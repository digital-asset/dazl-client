// Copyright (c) 2017-2025 Digital Asset (Switzerland) GmbH and/or its affiliates. All rights reserved.
// SPDX-License-Identifier: Apache-2.0
// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v6.30.0
// source: com/digitalasset/canton/mediator/admin/v30/mediator_administration_service.proto

package v30

import (
	context "context"
	v30 "github.com/digital-asset/dazl-client/v8/go/api/com/digitalasset/canton/admin/pruning/v30"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	MediatorAdministrationService_Prune_FullMethodName                  = "/com.digitalasset.canton.mediator.admin.v30.MediatorAdministrationService/Prune"
	MediatorAdministrationService_SetSchedule_FullMethodName            = "/com.digitalasset.canton.mediator.admin.v30.MediatorAdministrationService/SetSchedule"
	MediatorAdministrationService_SetCron_FullMethodName                = "/com.digitalasset.canton.mediator.admin.v30.MediatorAdministrationService/SetCron"
	MediatorAdministrationService_SetMaxDuration_FullMethodName         = "/com.digitalasset.canton.mediator.admin.v30.MediatorAdministrationService/SetMaxDuration"
	MediatorAdministrationService_SetRetention_FullMethodName           = "/com.digitalasset.canton.mediator.admin.v30.MediatorAdministrationService/SetRetention"
	MediatorAdministrationService_ClearSchedule_FullMethodName          = "/com.digitalasset.canton.mediator.admin.v30.MediatorAdministrationService/ClearSchedule"
	MediatorAdministrationService_GetSchedule_FullMethodName            = "/com.digitalasset.canton.mediator.admin.v30.MediatorAdministrationService/GetSchedule"
	MediatorAdministrationService_LocatePruningTimestamp_FullMethodName = "/com.digitalasset.canton.mediator.admin.v30.MediatorAdministrationService/LocatePruningTimestamp"
)

// MediatorAdministrationServiceClient is the client API for MediatorAdministrationService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type MediatorAdministrationServiceClient interface {
	Prune(ctx context.Context, in *MediatorPruning_PruneRequest, opts ...grpc.CallOption) (*MediatorPruning_PruneResponse, error)
	SetSchedule(ctx context.Context, in *v30.SetScheduleRequest, opts ...grpc.CallOption) (*v30.SetScheduleResponse, error)
	SetCron(ctx context.Context, in *v30.SetCronRequest, opts ...grpc.CallOption) (*v30.SetCronResponse, error)
	SetMaxDuration(ctx context.Context, in *v30.SetMaxDurationRequest, opts ...grpc.CallOption) (*v30.SetMaxDurationResponse, error)
	SetRetention(ctx context.Context, in *v30.SetRetentionRequest, opts ...grpc.CallOption) (*v30.SetRetentionResponse, error)
	ClearSchedule(ctx context.Context, in *v30.ClearScheduleRequest, opts ...grpc.CallOption) (*v30.ClearScheduleResponse, error)
	GetSchedule(ctx context.Context, in *v30.GetScheduleRequest, opts ...grpc.CallOption) (*v30.GetScheduleResponse, error)
	LocatePruningTimestamp(ctx context.Context, in *v30.LocatePruningTimestampRequest, opts ...grpc.CallOption) (*v30.LocatePruningTimestampResponse, error)
}

type mediatorAdministrationServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewMediatorAdministrationServiceClient(cc grpc.ClientConnInterface) MediatorAdministrationServiceClient {
	return &mediatorAdministrationServiceClient{cc}
}

func (c *mediatorAdministrationServiceClient) Prune(ctx context.Context, in *MediatorPruning_PruneRequest, opts ...grpc.CallOption) (*MediatorPruning_PruneResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(MediatorPruning_PruneResponse)
	err := c.cc.Invoke(ctx, MediatorAdministrationService_Prune_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mediatorAdministrationServiceClient) SetSchedule(ctx context.Context, in *v30.SetScheduleRequest, opts ...grpc.CallOption) (*v30.SetScheduleResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(v30.SetScheduleResponse)
	err := c.cc.Invoke(ctx, MediatorAdministrationService_SetSchedule_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mediatorAdministrationServiceClient) SetCron(ctx context.Context, in *v30.SetCronRequest, opts ...grpc.CallOption) (*v30.SetCronResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(v30.SetCronResponse)
	err := c.cc.Invoke(ctx, MediatorAdministrationService_SetCron_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mediatorAdministrationServiceClient) SetMaxDuration(ctx context.Context, in *v30.SetMaxDurationRequest, opts ...grpc.CallOption) (*v30.SetMaxDurationResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(v30.SetMaxDurationResponse)
	err := c.cc.Invoke(ctx, MediatorAdministrationService_SetMaxDuration_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mediatorAdministrationServiceClient) SetRetention(ctx context.Context, in *v30.SetRetentionRequest, opts ...grpc.CallOption) (*v30.SetRetentionResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(v30.SetRetentionResponse)
	err := c.cc.Invoke(ctx, MediatorAdministrationService_SetRetention_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mediatorAdministrationServiceClient) ClearSchedule(ctx context.Context, in *v30.ClearScheduleRequest, opts ...grpc.CallOption) (*v30.ClearScheduleResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(v30.ClearScheduleResponse)
	err := c.cc.Invoke(ctx, MediatorAdministrationService_ClearSchedule_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mediatorAdministrationServiceClient) GetSchedule(ctx context.Context, in *v30.GetScheduleRequest, opts ...grpc.CallOption) (*v30.GetScheduleResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(v30.GetScheduleResponse)
	err := c.cc.Invoke(ctx, MediatorAdministrationService_GetSchedule_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mediatorAdministrationServiceClient) LocatePruningTimestamp(ctx context.Context, in *v30.LocatePruningTimestampRequest, opts ...grpc.CallOption) (*v30.LocatePruningTimestampResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(v30.LocatePruningTimestampResponse)
	err := c.cc.Invoke(ctx, MediatorAdministrationService_LocatePruningTimestamp_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MediatorAdministrationServiceServer is the server API for MediatorAdministrationService service.
// All implementations must embed UnimplementedMediatorAdministrationServiceServer
// for forward compatibility.
type MediatorAdministrationServiceServer interface {
	Prune(context.Context, *MediatorPruning_PruneRequest) (*MediatorPruning_PruneResponse, error)
	SetSchedule(context.Context, *v30.SetScheduleRequest) (*v30.SetScheduleResponse, error)
	SetCron(context.Context, *v30.SetCronRequest) (*v30.SetCronResponse, error)
	SetMaxDuration(context.Context, *v30.SetMaxDurationRequest) (*v30.SetMaxDurationResponse, error)
	SetRetention(context.Context, *v30.SetRetentionRequest) (*v30.SetRetentionResponse, error)
	ClearSchedule(context.Context, *v30.ClearScheduleRequest) (*v30.ClearScheduleResponse, error)
	GetSchedule(context.Context, *v30.GetScheduleRequest) (*v30.GetScheduleResponse, error)
	LocatePruningTimestamp(context.Context, *v30.LocatePruningTimestampRequest) (*v30.LocatePruningTimestampResponse, error)
	mustEmbedUnimplementedMediatorAdministrationServiceServer()
}

// UnimplementedMediatorAdministrationServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedMediatorAdministrationServiceServer struct{}

func (UnimplementedMediatorAdministrationServiceServer) Prune(context.Context, *MediatorPruning_PruneRequest) (*MediatorPruning_PruneResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Prune not implemented")
}
func (UnimplementedMediatorAdministrationServiceServer) SetSchedule(context.Context, *v30.SetScheduleRequest) (*v30.SetScheduleResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetSchedule not implemented")
}
func (UnimplementedMediatorAdministrationServiceServer) SetCron(context.Context, *v30.SetCronRequest) (*v30.SetCronResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetCron not implemented")
}
func (UnimplementedMediatorAdministrationServiceServer) SetMaxDuration(context.Context, *v30.SetMaxDurationRequest) (*v30.SetMaxDurationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetMaxDuration not implemented")
}
func (UnimplementedMediatorAdministrationServiceServer) SetRetention(context.Context, *v30.SetRetentionRequest) (*v30.SetRetentionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetRetention not implemented")
}
func (UnimplementedMediatorAdministrationServiceServer) ClearSchedule(context.Context, *v30.ClearScheduleRequest) (*v30.ClearScheduleResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ClearSchedule not implemented")
}
func (UnimplementedMediatorAdministrationServiceServer) GetSchedule(context.Context, *v30.GetScheduleRequest) (*v30.GetScheduleResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSchedule not implemented")
}
func (UnimplementedMediatorAdministrationServiceServer) LocatePruningTimestamp(context.Context, *v30.LocatePruningTimestampRequest) (*v30.LocatePruningTimestampResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LocatePruningTimestamp not implemented")
}
func (UnimplementedMediatorAdministrationServiceServer) mustEmbedUnimplementedMediatorAdministrationServiceServer() {
}
func (UnimplementedMediatorAdministrationServiceServer) testEmbeddedByValue() {}

// UnsafeMediatorAdministrationServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MediatorAdministrationServiceServer will
// result in compilation errors.
type UnsafeMediatorAdministrationServiceServer interface {
	mustEmbedUnimplementedMediatorAdministrationServiceServer()
}

func RegisterMediatorAdministrationServiceServer(s grpc.ServiceRegistrar, srv MediatorAdministrationServiceServer) {
	// If the following call pancis, it indicates UnimplementedMediatorAdministrationServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&MediatorAdministrationService_ServiceDesc, srv)
}

func _MediatorAdministrationService_Prune_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MediatorPruning_PruneRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MediatorAdministrationServiceServer).Prune(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MediatorAdministrationService_Prune_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MediatorAdministrationServiceServer).Prune(ctx, req.(*MediatorPruning_PruneRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MediatorAdministrationService_SetSchedule_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(v30.SetScheduleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MediatorAdministrationServiceServer).SetSchedule(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MediatorAdministrationService_SetSchedule_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MediatorAdministrationServiceServer).SetSchedule(ctx, req.(*v30.SetScheduleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MediatorAdministrationService_SetCron_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(v30.SetCronRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MediatorAdministrationServiceServer).SetCron(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MediatorAdministrationService_SetCron_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MediatorAdministrationServiceServer).SetCron(ctx, req.(*v30.SetCronRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MediatorAdministrationService_SetMaxDuration_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(v30.SetMaxDurationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MediatorAdministrationServiceServer).SetMaxDuration(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MediatorAdministrationService_SetMaxDuration_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MediatorAdministrationServiceServer).SetMaxDuration(ctx, req.(*v30.SetMaxDurationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MediatorAdministrationService_SetRetention_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(v30.SetRetentionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MediatorAdministrationServiceServer).SetRetention(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MediatorAdministrationService_SetRetention_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MediatorAdministrationServiceServer).SetRetention(ctx, req.(*v30.SetRetentionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MediatorAdministrationService_ClearSchedule_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(v30.ClearScheduleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MediatorAdministrationServiceServer).ClearSchedule(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MediatorAdministrationService_ClearSchedule_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MediatorAdministrationServiceServer).ClearSchedule(ctx, req.(*v30.ClearScheduleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MediatorAdministrationService_GetSchedule_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(v30.GetScheduleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MediatorAdministrationServiceServer).GetSchedule(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MediatorAdministrationService_GetSchedule_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MediatorAdministrationServiceServer).GetSchedule(ctx, req.(*v30.GetScheduleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MediatorAdministrationService_LocatePruningTimestamp_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(v30.LocatePruningTimestampRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MediatorAdministrationServiceServer).LocatePruningTimestamp(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MediatorAdministrationService_LocatePruningTimestamp_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MediatorAdministrationServiceServer).LocatePruningTimestamp(ctx, req.(*v30.LocatePruningTimestampRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// MediatorAdministrationService_ServiceDesc is the grpc.ServiceDesc for MediatorAdministrationService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var MediatorAdministrationService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "com.digitalasset.canton.mediator.admin.v30.MediatorAdministrationService",
	HandlerType: (*MediatorAdministrationServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Prune",
			Handler:    _MediatorAdministrationService_Prune_Handler,
		},
		{
			MethodName: "SetSchedule",
			Handler:    _MediatorAdministrationService_SetSchedule_Handler,
		},
		{
			MethodName: "SetCron",
			Handler:    _MediatorAdministrationService_SetCron_Handler,
		},
		{
			MethodName: "SetMaxDuration",
			Handler:    _MediatorAdministrationService_SetMaxDuration_Handler,
		},
		{
			MethodName: "SetRetention",
			Handler:    _MediatorAdministrationService_SetRetention_Handler,
		},
		{
			MethodName: "ClearSchedule",
			Handler:    _MediatorAdministrationService_ClearSchedule_Handler,
		},
		{
			MethodName: "GetSchedule",
			Handler:    _MediatorAdministrationService_GetSchedule_Handler,
		},
		{
			MethodName: "LocatePruningTimestamp",
			Handler:    _MediatorAdministrationService_LocatePruningTimestamp_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "com/digitalasset/canton/mediator/admin/v30/mediator_administration_service.proto",
}
