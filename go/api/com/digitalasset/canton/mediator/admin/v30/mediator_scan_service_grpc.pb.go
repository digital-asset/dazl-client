// Copyright (c) 2017-2025 Digital Asset (Switzerland) GmbH and/or its affiliates. All rights reserved.
// SPDX-License-Identifier: Apache-2.0
// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v6.30.0
// source: com/digitalasset/canton/mediator/admin/v30/mediator_scan_service.proto

package v30

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	MediatorScanService_Verdicts_FullMethodName = "/com.digitalasset.canton.mediator.admin.v30.MediatorScanService/Verdicts"
)

// MediatorScanServiceClient is the client API for MediatorScanService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type MediatorScanServiceClient interface {
	Verdicts(ctx context.Context, in *VerdictsRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[VerdictsResponse], error)
}

type mediatorScanServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewMediatorScanServiceClient(cc grpc.ClientConnInterface) MediatorScanServiceClient {
	return &mediatorScanServiceClient{cc}
}

func (c *mediatorScanServiceClient) Verdicts(ctx context.Context, in *VerdictsRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[VerdictsResponse], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &MediatorScanService_ServiceDesc.Streams[0], MediatorScanService_Verdicts_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[VerdictsRequest, VerdictsResponse]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type MediatorScanService_VerdictsClient = grpc.ServerStreamingClient[VerdictsResponse]

// MediatorScanServiceServer is the server API for MediatorScanService service.
// All implementations must embed UnimplementedMediatorScanServiceServer
// for forward compatibility.
type MediatorScanServiceServer interface {
	Verdicts(*VerdictsRequest, grpc.ServerStreamingServer[VerdictsResponse]) error
	mustEmbedUnimplementedMediatorScanServiceServer()
}

// UnimplementedMediatorScanServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedMediatorScanServiceServer struct{}

func (UnimplementedMediatorScanServiceServer) Verdicts(*VerdictsRequest, grpc.ServerStreamingServer[VerdictsResponse]) error {
	return status.Errorf(codes.Unimplemented, "method Verdicts not implemented")
}
func (UnimplementedMediatorScanServiceServer) mustEmbedUnimplementedMediatorScanServiceServer() {}
func (UnimplementedMediatorScanServiceServer) testEmbeddedByValue()                             {}

// UnsafeMediatorScanServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MediatorScanServiceServer will
// result in compilation errors.
type UnsafeMediatorScanServiceServer interface {
	mustEmbedUnimplementedMediatorScanServiceServer()
}

func RegisterMediatorScanServiceServer(s grpc.ServiceRegistrar, srv MediatorScanServiceServer) {
	// If the following call pancis, it indicates UnimplementedMediatorScanServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&MediatorScanService_ServiceDesc, srv)
}

func _MediatorScanService_Verdicts_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(VerdictsRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(MediatorScanServiceServer).Verdicts(m, &grpc.GenericServerStream[VerdictsRequest, VerdictsResponse]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type MediatorScanService_VerdictsServer = grpc.ServerStreamingServer[VerdictsResponse]

// MediatorScanService_ServiceDesc is the grpc.ServiceDesc for MediatorScanService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var MediatorScanService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "com.digitalasset.canton.mediator.admin.v30.MediatorScanService",
	HandlerType: (*MediatorScanServiceServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Verdicts",
			Handler:       _MediatorScanService_Verdicts_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "com/digitalasset/canton/mediator/admin/v30/mediator_scan_service.proto",
}
