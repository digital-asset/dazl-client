// Copyright (c) 2017-2025 Digital Asset (Switzerland) GmbH and/or its affiliates. All rights reserved.
// SPDX-License-Identifier: Apache-2.0
// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v6.30.0
// source: com/digitalasset/canton/mediator/admin/v30/sequencer_connection_service.proto

package v30

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	SequencerConnectionService_GetConnection_FullMethodName = "/com.digitalasset.canton.mediator.admin.v30.SequencerConnectionService/GetConnection"
	SequencerConnectionService_SetConnection_FullMethodName = "/com.digitalasset.canton.mediator.admin.v30.SequencerConnectionService/SetConnection"
	SequencerConnectionService_Logout_FullMethodName        = "/com.digitalasset.canton.mediator.admin.v30.SequencerConnectionService/Logout"
)

// SequencerConnectionServiceClient is the client API for SequencerConnectionService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type SequencerConnectionServiceClient interface {
	GetConnection(ctx context.Context, in *GetConnectionRequest, opts ...grpc.CallOption) (*GetConnectionResponse, error)
	SetConnection(ctx context.Context, in *SetConnectionRequest, opts ...grpc.CallOption) (*SetConnectionResponse, error)
	Logout(ctx context.Context, in *LogoutRequest, opts ...grpc.CallOption) (*LogoutResponse, error)
}

type sequencerConnectionServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewSequencerConnectionServiceClient(cc grpc.ClientConnInterface) SequencerConnectionServiceClient {
	return &sequencerConnectionServiceClient{cc}
}

func (c *sequencerConnectionServiceClient) GetConnection(ctx context.Context, in *GetConnectionRequest, opts ...grpc.CallOption) (*GetConnectionResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetConnectionResponse)
	err := c.cc.Invoke(ctx, SequencerConnectionService_GetConnection_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sequencerConnectionServiceClient) SetConnection(ctx context.Context, in *SetConnectionRequest, opts ...grpc.CallOption) (*SetConnectionResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SetConnectionResponse)
	err := c.cc.Invoke(ctx, SequencerConnectionService_SetConnection_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sequencerConnectionServiceClient) Logout(ctx context.Context, in *LogoutRequest, opts ...grpc.CallOption) (*LogoutResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(LogoutResponse)
	err := c.cc.Invoke(ctx, SequencerConnectionService_Logout_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SequencerConnectionServiceServer is the server API for SequencerConnectionService service.
// All implementations must embed UnimplementedSequencerConnectionServiceServer
// for forward compatibility.
type SequencerConnectionServiceServer interface {
	GetConnection(context.Context, *GetConnectionRequest) (*GetConnectionResponse, error)
	SetConnection(context.Context, *SetConnectionRequest) (*SetConnectionResponse, error)
	Logout(context.Context, *LogoutRequest) (*LogoutResponse, error)
	mustEmbedUnimplementedSequencerConnectionServiceServer()
}

// UnimplementedSequencerConnectionServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedSequencerConnectionServiceServer struct{}

func (UnimplementedSequencerConnectionServiceServer) GetConnection(context.Context, *GetConnectionRequest) (*GetConnectionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetConnection not implemented")
}
func (UnimplementedSequencerConnectionServiceServer) SetConnection(context.Context, *SetConnectionRequest) (*SetConnectionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetConnection not implemented")
}
func (UnimplementedSequencerConnectionServiceServer) Logout(context.Context, *LogoutRequest) (*LogoutResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Logout not implemented")
}
func (UnimplementedSequencerConnectionServiceServer) mustEmbedUnimplementedSequencerConnectionServiceServer() {
}
func (UnimplementedSequencerConnectionServiceServer) testEmbeddedByValue() {}

// UnsafeSequencerConnectionServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SequencerConnectionServiceServer will
// result in compilation errors.
type UnsafeSequencerConnectionServiceServer interface {
	mustEmbedUnimplementedSequencerConnectionServiceServer()
}

func RegisterSequencerConnectionServiceServer(s grpc.ServiceRegistrar, srv SequencerConnectionServiceServer) {
	// If the following call pancis, it indicates UnimplementedSequencerConnectionServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&SequencerConnectionService_ServiceDesc, srv)
}

func _SequencerConnectionService_GetConnection_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetConnectionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SequencerConnectionServiceServer).GetConnection(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SequencerConnectionService_GetConnection_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SequencerConnectionServiceServer).GetConnection(ctx, req.(*GetConnectionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SequencerConnectionService_SetConnection_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetConnectionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SequencerConnectionServiceServer).SetConnection(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SequencerConnectionService_SetConnection_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SequencerConnectionServiceServer).SetConnection(ctx, req.(*SetConnectionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SequencerConnectionService_Logout_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LogoutRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SequencerConnectionServiceServer).Logout(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SequencerConnectionService_Logout_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SequencerConnectionServiceServer).Logout(ctx, req.(*LogoutRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// SequencerConnectionService_ServiceDesc is the grpc.ServiceDesc for SequencerConnectionService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var SequencerConnectionService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "com.digitalasset.canton.mediator.admin.v30.SequencerConnectionService",
	HandlerType: (*SequencerConnectionServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetConnection",
			Handler:    _SequencerConnectionService_GetConnection_Handler,
		},
		{
			MethodName: "SetConnection",
			Handler:    _SequencerConnectionService_SetConnection_Handler,
		},
		{
			MethodName: "Logout",
			Handler:    _SequencerConnectionService_Logout_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "com/digitalasset/canton/mediator/admin/v30/sequencer_connection_service.proto",
}
