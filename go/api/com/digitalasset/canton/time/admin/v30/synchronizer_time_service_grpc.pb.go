// Copyright (c) 2017-2025 Digital Asset (Switzerland) GmbH and/or its affiliates. All rights reserved.
// SPDX-License-Identifier: Apache-2.0
// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v6.30.0
// source: com/digitalasset/canton/time/admin/v30/synchronizer_time_service.proto

package v30

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	SynchronizerTimeService_FetchTime_FullMethodName = "/com.digitalasset.canton.time.admin.v30.SynchronizerTimeService/FetchTime"
	SynchronizerTimeService_AwaitTime_FullMethodName = "/com.digitalasset.canton.time.admin.v30.SynchronizerTimeService/AwaitTime"
)

// SynchronizerTimeServiceClient is the client API for SynchronizerTimeService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type SynchronizerTimeServiceClient interface {
	FetchTime(ctx context.Context, in *FetchTimeRequest, opts ...grpc.CallOption) (*FetchTimeResponse, error)
	AwaitTime(ctx context.Context, in *AwaitTimeRequest, opts ...grpc.CallOption) (*AwaitTimeResponse, error)
}

type synchronizerTimeServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewSynchronizerTimeServiceClient(cc grpc.ClientConnInterface) SynchronizerTimeServiceClient {
	return &synchronizerTimeServiceClient{cc}
}

func (c *synchronizerTimeServiceClient) FetchTime(ctx context.Context, in *FetchTimeRequest, opts ...grpc.CallOption) (*FetchTimeResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(FetchTimeResponse)
	err := c.cc.Invoke(ctx, SynchronizerTimeService_FetchTime_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *synchronizerTimeServiceClient) AwaitTime(ctx context.Context, in *AwaitTimeRequest, opts ...grpc.CallOption) (*AwaitTimeResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AwaitTimeResponse)
	err := c.cc.Invoke(ctx, SynchronizerTimeService_AwaitTime_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SynchronizerTimeServiceServer is the server API for SynchronizerTimeService service.
// All implementations must embed UnimplementedSynchronizerTimeServiceServer
// for forward compatibility.
type SynchronizerTimeServiceServer interface {
	FetchTime(context.Context, *FetchTimeRequest) (*FetchTimeResponse, error)
	AwaitTime(context.Context, *AwaitTimeRequest) (*AwaitTimeResponse, error)
	mustEmbedUnimplementedSynchronizerTimeServiceServer()
}

// UnimplementedSynchronizerTimeServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedSynchronizerTimeServiceServer struct{}

func (UnimplementedSynchronizerTimeServiceServer) FetchTime(context.Context, *FetchTimeRequest) (*FetchTimeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FetchTime not implemented")
}
func (UnimplementedSynchronizerTimeServiceServer) AwaitTime(context.Context, *AwaitTimeRequest) (*AwaitTimeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AwaitTime not implemented")
}
func (UnimplementedSynchronizerTimeServiceServer) mustEmbedUnimplementedSynchronizerTimeServiceServer() {
}
func (UnimplementedSynchronizerTimeServiceServer) testEmbeddedByValue() {}

// UnsafeSynchronizerTimeServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SynchronizerTimeServiceServer will
// result in compilation errors.
type UnsafeSynchronizerTimeServiceServer interface {
	mustEmbedUnimplementedSynchronizerTimeServiceServer()
}

func RegisterSynchronizerTimeServiceServer(s grpc.ServiceRegistrar, srv SynchronizerTimeServiceServer) {
	// If the following call pancis, it indicates UnimplementedSynchronizerTimeServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&SynchronizerTimeService_ServiceDesc, srv)
}

func _SynchronizerTimeService_FetchTime_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FetchTimeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SynchronizerTimeServiceServer).FetchTime(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SynchronizerTimeService_FetchTime_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SynchronizerTimeServiceServer).FetchTime(ctx, req.(*FetchTimeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SynchronizerTimeService_AwaitTime_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AwaitTimeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SynchronizerTimeServiceServer).AwaitTime(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SynchronizerTimeService_AwaitTime_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SynchronizerTimeServiceServer).AwaitTime(ctx, req.(*AwaitTimeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// SynchronizerTimeService_ServiceDesc is the grpc.ServiceDesc for SynchronizerTimeService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var SynchronizerTimeService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "com.digitalasset.canton.time.admin.v30.SynchronizerTimeService",
	HandlerType: (*SynchronizerTimeServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "FetchTime",
			Handler:    _SynchronizerTimeService_FetchTime_Handler,
		},
		{
			MethodName: "AwaitTime",
			Handler:    _SynchronizerTimeService_AwaitTime_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "com/digitalasset/canton/time/admin/v30/synchronizer_time_service.proto",
}
