// Copyright (c) 2017-2025 Digital Asset (Switzerland) GmbH and/or its affiliates. All rights reserved.
// SPDX-License-Identifier: Apache-2.0
// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.6
// 	protoc        v6.30.0
// source: com/digitalasset/canton/crypto/v0/crypto.proto

package v0

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type HashAlgorithm int32

const (
	HashAlgorithm_MissingHashAlgorithm HashAlgorithm = 0
	HashAlgorithm_Sha256               HashAlgorithm = 1
)

// Enum value maps for HashAlgorithm.
var (
	HashAlgorithm_name = map[int32]string{
		0: "MissingHashAlgorithm",
		1: "Sha256",
	}
	HashAlgorithm_value = map[string]int32{
		"MissingHashAlgorithm": 0,
		"Sha256":               1,
	}
)

func (x HashAlgorithm) Enum() *HashAlgorithm {
	p := new(HashAlgorithm)
	*p = x
	return p
}

func (x HashAlgorithm) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (HashAlgorithm) Descriptor() protoreflect.EnumDescriptor {
	return file_com_digitalasset_canton_crypto_v0_crypto_proto_enumTypes[0].Descriptor()
}

func (HashAlgorithm) Type() protoreflect.EnumType {
	return &file_com_digitalasset_canton_crypto_v0_crypto_proto_enumTypes[0]
}

func (x HashAlgorithm) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use HashAlgorithm.Descriptor instead.
func (HashAlgorithm) EnumDescriptor() ([]byte, []int) {
	return file_com_digitalasset_canton_crypto_v0_crypto_proto_rawDescGZIP(), []int{0}
}

type HmacAlgorithm int32

const (
	HmacAlgorithm_MissingHmacAlgorithm HmacAlgorithm = 0
	HmacAlgorithm_HmacSha256           HmacAlgorithm = 1
)

// Enum value maps for HmacAlgorithm.
var (
	HmacAlgorithm_name = map[int32]string{
		0: "MissingHmacAlgorithm",
		1: "HmacSha256",
	}
	HmacAlgorithm_value = map[string]int32{
		"MissingHmacAlgorithm": 0,
		"HmacSha256":           1,
	}
)

func (x HmacAlgorithm) Enum() *HmacAlgorithm {
	p := new(HmacAlgorithm)
	*p = x
	return p
}

func (x HmacAlgorithm) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (HmacAlgorithm) Descriptor() protoreflect.EnumDescriptor {
	return file_com_digitalasset_canton_crypto_v0_crypto_proto_enumTypes[1].Descriptor()
}

func (HmacAlgorithm) Type() protoreflect.EnumType {
	return &file_com_digitalasset_canton_crypto_v0_crypto_proto_enumTypes[1]
}

func (x HmacAlgorithm) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use HmacAlgorithm.Descriptor instead.
func (HmacAlgorithm) EnumDescriptor() ([]byte, []int) {
	return file_com_digitalasset_canton_crypto_v0_crypto_proto_rawDescGZIP(), []int{1}
}

type SignatureFormat int32

const (
	SignatureFormat_MissingSignatureFormat SignatureFormat = 0
	SignatureFormat_RawSignatureFormat     SignatureFormat = 1
)

// Enum value maps for SignatureFormat.
var (
	SignatureFormat_name = map[int32]string{
		0: "MissingSignatureFormat",
		1: "RawSignatureFormat",
	}
	SignatureFormat_value = map[string]int32{
		"MissingSignatureFormat": 0,
		"RawSignatureFormat":     1,
	}
)

func (x SignatureFormat) Enum() *SignatureFormat {
	p := new(SignatureFormat)
	*p = x
	return p
}

func (x SignatureFormat) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SignatureFormat) Descriptor() protoreflect.EnumDescriptor {
	return file_com_digitalasset_canton_crypto_v0_crypto_proto_enumTypes[2].Descriptor()
}

func (SignatureFormat) Type() protoreflect.EnumType {
	return &file_com_digitalasset_canton_crypto_v0_crypto_proto_enumTypes[2]
}

func (x SignatureFormat) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use SignatureFormat.Descriptor instead.
func (SignatureFormat) EnumDescriptor() ([]byte, []int) {
	return file_com_digitalasset_canton_crypto_v0_crypto_proto_rawDescGZIP(), []int{2}
}

type KeyPurpose int32

const (
	KeyPurpose_UnknownKeyPurpose    KeyPurpose = 0
	KeyPurpose_SigningKeyPurpose    KeyPurpose = 1
	KeyPurpose_EncryptionKeyPurpose KeyPurpose = 2
)

// Enum value maps for KeyPurpose.
var (
	KeyPurpose_name = map[int32]string{
		0: "UnknownKeyPurpose",
		1: "SigningKeyPurpose",
		2: "EncryptionKeyPurpose",
	}
	KeyPurpose_value = map[string]int32{
		"UnknownKeyPurpose":    0,
		"SigningKeyPurpose":    1,
		"EncryptionKeyPurpose": 2,
	}
)

func (x KeyPurpose) Enum() *KeyPurpose {
	p := new(KeyPurpose)
	*p = x
	return p
}

func (x KeyPurpose) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (KeyPurpose) Descriptor() protoreflect.EnumDescriptor {
	return file_com_digitalasset_canton_crypto_v0_crypto_proto_enumTypes[3].Descriptor()
}

func (KeyPurpose) Type() protoreflect.EnumType {
	return &file_com_digitalasset_canton_crypto_v0_crypto_proto_enumTypes[3]
}

func (x KeyPurpose) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use KeyPurpose.Descriptor instead.
func (KeyPurpose) EnumDescriptor() ([]byte, []int) {
	return file_com_digitalasset_canton_crypto_v0_crypto_proto_rawDescGZIP(), []int{3}
}

type SigningKeyScheme int32

const (
	SigningKeyScheme_MissingSigningKeyScheme SigningKeyScheme = 0
	SigningKeyScheme_Ed25519                 SigningKeyScheme = 1
	SigningKeyScheme_EcDsaP256               SigningKeyScheme = 2
	SigningKeyScheme_EcDsaP384               SigningKeyScheme = 3
	SigningKeyScheme_Sm2                     SigningKeyScheme = 4
)

// Enum value maps for SigningKeyScheme.
var (
	SigningKeyScheme_name = map[int32]string{
		0: "MissingSigningKeyScheme",
		1: "Ed25519",
		2: "EcDsaP256",
		3: "EcDsaP384",
		4: "Sm2",
	}
	SigningKeyScheme_value = map[string]int32{
		"MissingSigningKeyScheme": 0,
		"Ed25519":                 1,
		"EcDsaP256":               2,
		"EcDsaP384":               3,
		"Sm2":                     4,
	}
)

func (x SigningKeyScheme) Enum() *SigningKeyScheme {
	p := new(SigningKeyScheme)
	*p = x
	return p
}

func (x SigningKeyScheme) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SigningKeyScheme) Descriptor() protoreflect.EnumDescriptor {
	return file_com_digitalasset_canton_crypto_v0_crypto_proto_enumTypes[4].Descriptor()
}

func (SigningKeyScheme) Type() protoreflect.EnumType {
	return &file_com_digitalasset_canton_crypto_v0_crypto_proto_enumTypes[4]
}

func (x SigningKeyScheme) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use SigningKeyScheme.Descriptor instead.
func (SigningKeyScheme) EnumDescriptor() ([]byte, []int) {
	return file_com_digitalasset_canton_crypto_v0_crypto_proto_rawDescGZIP(), []int{4}
}

type EncryptionKeyScheme int32

const (
	EncryptionKeyScheme_MissingEncryptionKeyScheme       EncryptionKeyScheme = 0
	EncryptionKeyScheme_EciesP256HkdfHmacSha256Aes128Gcm EncryptionKeyScheme = 1
	EncryptionKeyScheme_EciesP256HmacSha256Aes128Cbc     EncryptionKeyScheme = 2
	EncryptionKeyScheme_Rsa2048OaepSha256                EncryptionKeyScheme = 3
)

// Enum value maps for EncryptionKeyScheme.
var (
	EncryptionKeyScheme_name = map[int32]string{
		0: "MissingEncryptionKeyScheme",
		1: "EciesP256HkdfHmacSha256Aes128Gcm",
		2: "EciesP256HmacSha256Aes128Cbc",
		3: "Rsa2048OaepSha256",
	}
	EncryptionKeyScheme_value = map[string]int32{
		"MissingEncryptionKeyScheme":       0,
		"EciesP256HkdfHmacSha256Aes128Gcm": 1,
		"EciesP256HmacSha256Aes128Cbc":     2,
		"Rsa2048OaepSha256":                3,
	}
)

func (x EncryptionKeyScheme) Enum() *EncryptionKeyScheme {
	p := new(EncryptionKeyScheme)
	*p = x
	return p
}

func (x EncryptionKeyScheme) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (EncryptionKeyScheme) Descriptor() protoreflect.EnumDescriptor {
	return file_com_digitalasset_canton_crypto_v0_crypto_proto_enumTypes[5].Descriptor()
}

func (EncryptionKeyScheme) Type() protoreflect.EnumType {
	return &file_com_digitalasset_canton_crypto_v0_crypto_proto_enumTypes[5]
}

func (x EncryptionKeyScheme) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use EncryptionKeyScheme.Descriptor instead.
func (EncryptionKeyScheme) EnumDescriptor() ([]byte, []int) {
	return file_com_digitalasset_canton_crypto_v0_crypto_proto_rawDescGZIP(), []int{5}
}

type SymmetricKeyScheme int32

const (
	SymmetricKeyScheme_MissingSymmetricKeyScheme SymmetricKeyScheme = 0
	SymmetricKeyScheme_Aes128Gcm                 SymmetricKeyScheme = 1
)

// Enum value maps for SymmetricKeyScheme.
var (
	SymmetricKeyScheme_name = map[int32]string{
		0: "MissingSymmetricKeyScheme",
		1: "Aes128Gcm",
	}
	SymmetricKeyScheme_value = map[string]int32{
		"MissingSymmetricKeyScheme": 0,
		"Aes128Gcm":                 1,
	}
)

func (x SymmetricKeyScheme) Enum() *SymmetricKeyScheme {
	p := new(SymmetricKeyScheme)
	*p = x
	return p
}

func (x SymmetricKeyScheme) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SymmetricKeyScheme) Descriptor() protoreflect.EnumDescriptor {
	return file_com_digitalasset_canton_crypto_v0_crypto_proto_enumTypes[6].Descriptor()
}

func (SymmetricKeyScheme) Type() protoreflect.EnumType {
	return &file_com_digitalasset_canton_crypto_v0_crypto_proto_enumTypes[6]
}

func (x SymmetricKeyScheme) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use SymmetricKeyScheme.Descriptor instead.
func (SymmetricKeyScheme) EnumDescriptor() ([]byte, []int) {
	return file_com_digitalasset_canton_crypto_v0_crypto_proto_rawDescGZIP(), []int{6}
}

type CryptoKeyFormat int32

const (
	CryptoKeyFormat_MissingCryptoKeyFormat CryptoKeyFormat = 0
	CryptoKeyFormat_Tink                   CryptoKeyFormat = 1
	CryptoKeyFormat_Der                    CryptoKeyFormat = 2
	CryptoKeyFormat_Raw                    CryptoKeyFormat = 3
	CryptoKeyFormat_Symbolic               CryptoKeyFormat = 10000
)

// Enum value maps for CryptoKeyFormat.
var (
	CryptoKeyFormat_name = map[int32]string{
		0:     "MissingCryptoKeyFormat",
		1:     "Tink",
		2:     "Der",
		3:     "Raw",
		10000: "Symbolic",
	}
	CryptoKeyFormat_value = map[string]int32{
		"MissingCryptoKeyFormat": 0,
		"Tink":                   1,
		"Der":                    2,
		"Raw":                    3,
		"Symbolic":               10000,
	}
)

func (x CryptoKeyFormat) Enum() *CryptoKeyFormat {
	p := new(CryptoKeyFormat)
	*p = x
	return p
}

func (x CryptoKeyFormat) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CryptoKeyFormat) Descriptor() protoreflect.EnumDescriptor {
	return file_com_digitalasset_canton_crypto_v0_crypto_proto_enumTypes[7].Descriptor()
}

func (CryptoKeyFormat) Type() protoreflect.EnumType {
	return &file_com_digitalasset_canton_crypto_v0_crypto_proto_enumTypes[7]
}

func (x CryptoKeyFormat) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use CryptoKeyFormat.Descriptor instead.
func (CryptoKeyFormat) EnumDescriptor() ([]byte, []int) {
	return file_com_digitalasset_canton_crypto_v0_crypto_proto_rawDescGZIP(), []int{7}
}

type Hmac struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Algorithm     HmacAlgorithm          `protobuf:"varint,1,opt,name=algorithm,proto3,enum=com.digitalasset.canton.crypto.v0.HmacAlgorithm" json:"algorithm,omitempty"`
	Hmac          []byte                 `protobuf:"bytes,2,opt,name=hmac,proto3" json:"hmac,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Hmac) Reset() {
	*x = Hmac{}
	mi := &file_com_digitalasset_canton_crypto_v0_crypto_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Hmac) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Hmac) ProtoMessage() {}

func (x *Hmac) ProtoReflect() protoreflect.Message {
	mi := &file_com_digitalasset_canton_crypto_v0_crypto_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Hmac.ProtoReflect.Descriptor instead.
func (*Hmac) Descriptor() ([]byte, []int) {
	return file_com_digitalasset_canton_crypto_v0_crypto_proto_rawDescGZIP(), []int{0}
}

func (x *Hmac) GetAlgorithm() HmacAlgorithm {
	if x != nil {
		return x.Algorithm
	}
	return HmacAlgorithm_MissingHmacAlgorithm
}

func (x *Hmac) GetHmac() []byte {
	if x != nil {
		return x.Hmac
	}
	return nil
}

type Salt struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Types that are valid to be assigned to Algorithm:
	//
	//	*Salt_Hmac
	Algorithm     isSalt_Algorithm `protobuf_oneof:"algorithm"`
	Salt          []byte           `protobuf:"bytes,2,opt,name=salt,proto3" json:"salt,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Salt) Reset() {
	*x = Salt{}
	mi := &file_com_digitalasset_canton_crypto_v0_crypto_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Salt) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Salt) ProtoMessage() {}

func (x *Salt) ProtoReflect() protoreflect.Message {
	mi := &file_com_digitalasset_canton_crypto_v0_crypto_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Salt.ProtoReflect.Descriptor instead.
func (*Salt) Descriptor() ([]byte, []int) {
	return file_com_digitalasset_canton_crypto_v0_crypto_proto_rawDescGZIP(), []int{1}
}

func (x *Salt) GetAlgorithm() isSalt_Algorithm {
	if x != nil {
		return x.Algorithm
	}
	return nil
}

func (x *Salt) GetHmac() HmacAlgorithm {
	if x != nil {
		if x, ok := x.Algorithm.(*Salt_Hmac); ok {
			return x.Hmac
		}
	}
	return HmacAlgorithm_MissingHmacAlgorithm
}

func (x *Salt) GetSalt() []byte {
	if x != nil {
		return x.Salt
	}
	return nil
}

type isSalt_Algorithm interface {
	isSalt_Algorithm()
}

type Salt_Hmac struct {
	Hmac HmacAlgorithm `protobuf:"varint,1,opt,name=hmac,proto3,enum=com.digitalasset.canton.crypto.v0.HmacAlgorithm,oneof"`
}

func (*Salt_Hmac) isSalt_Algorithm() {}

type Signature struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Format        SignatureFormat        `protobuf:"varint,1,opt,name=format,proto3,enum=com.digitalasset.canton.crypto.v0.SignatureFormat" json:"format,omitempty"`
	Signature     []byte                 `protobuf:"bytes,2,opt,name=signature,proto3" json:"signature,omitempty"`
	SignedBy      string                 `protobuf:"bytes,3,opt,name=signed_by,json=signedBy,proto3" json:"signed_by,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Signature) Reset() {
	*x = Signature{}
	mi := &file_com_digitalasset_canton_crypto_v0_crypto_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Signature) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Signature) ProtoMessage() {}

func (x *Signature) ProtoReflect() protoreflect.Message {
	mi := &file_com_digitalasset_canton_crypto_v0_crypto_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Signature.ProtoReflect.Descriptor instead.
func (*Signature) Descriptor() ([]byte, []int) {
	return file_com_digitalasset_canton_crypto_v0_crypto_proto_rawDescGZIP(), []int{2}
}

func (x *Signature) GetFormat() SignatureFormat {
	if x != nil {
		return x.Format
	}
	return SignatureFormat_MissingSignatureFormat
}

func (x *Signature) GetSignature() []byte {
	if x != nil {
		return x.Signature
	}
	return nil
}

func (x *Signature) GetSignedBy() string {
	if x != nil {
		return x.SignedBy
	}
	return ""
}

type PublicKey struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Types that are valid to be assigned to Key:
	//
	//	*PublicKey_SigningPublicKey
	//	*PublicKey_EncryptionPublicKey
	Key           isPublicKey_Key `protobuf_oneof:"key"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *PublicKey) Reset() {
	*x = PublicKey{}
	mi := &file_com_digitalasset_canton_crypto_v0_crypto_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PublicKey) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PublicKey) ProtoMessage() {}

func (x *PublicKey) ProtoReflect() protoreflect.Message {
	mi := &file_com_digitalasset_canton_crypto_v0_crypto_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PublicKey.ProtoReflect.Descriptor instead.
func (*PublicKey) Descriptor() ([]byte, []int) {
	return file_com_digitalasset_canton_crypto_v0_crypto_proto_rawDescGZIP(), []int{3}
}

func (x *PublicKey) GetKey() isPublicKey_Key {
	if x != nil {
		return x.Key
	}
	return nil
}

func (x *PublicKey) GetSigningPublicKey() *SigningPublicKey {
	if x != nil {
		if x, ok := x.Key.(*PublicKey_SigningPublicKey); ok {
			return x.SigningPublicKey
		}
	}
	return nil
}

func (x *PublicKey) GetEncryptionPublicKey() *EncryptionPublicKey {
	if x != nil {
		if x, ok := x.Key.(*PublicKey_EncryptionPublicKey); ok {
			return x.EncryptionPublicKey
		}
	}
	return nil
}

type isPublicKey_Key interface {
	isPublicKey_Key()
}

type PublicKey_SigningPublicKey struct {
	SigningPublicKey *SigningPublicKey `protobuf:"bytes,1,opt,name=signing_public_key,json=signingPublicKey,proto3,oneof"`
}

type PublicKey_EncryptionPublicKey struct {
	EncryptionPublicKey *EncryptionPublicKey `protobuf:"bytes,2,opt,name=encryption_public_key,json=encryptionPublicKey,proto3,oneof"`
}

func (*PublicKey_SigningPublicKey) isPublicKey_Key() {}

func (*PublicKey_EncryptionPublicKey) isPublicKey_Key() {}

type PublicKeyWithName struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	PublicKey     *PublicKey             `protobuf:"bytes,1,opt,name=public_key,json=publicKey,proto3" json:"public_key,omitempty"`
	Name          string                 `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *PublicKeyWithName) Reset() {
	*x = PublicKeyWithName{}
	mi := &file_com_digitalasset_canton_crypto_v0_crypto_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PublicKeyWithName) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PublicKeyWithName) ProtoMessage() {}

func (x *PublicKeyWithName) ProtoReflect() protoreflect.Message {
	mi := &file_com_digitalasset_canton_crypto_v0_crypto_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PublicKeyWithName.ProtoReflect.Descriptor instead.
func (*PublicKeyWithName) Descriptor() ([]byte, []int) {
	return file_com_digitalasset_canton_crypto_v0_crypto_proto_rawDescGZIP(), []int{4}
}

func (x *PublicKeyWithName) GetPublicKey() *PublicKey {
	if x != nil {
		return x.PublicKey
	}
	return nil
}

func (x *PublicKeyWithName) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

type PrivateKey struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Types that are valid to be assigned to Key:
	//
	//	*PrivateKey_SigningPrivateKey
	//	*PrivateKey_EncryptionPrivateKey
	Key           isPrivateKey_Key `protobuf_oneof:"key"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *PrivateKey) Reset() {
	*x = PrivateKey{}
	mi := &file_com_digitalasset_canton_crypto_v0_crypto_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PrivateKey) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PrivateKey) ProtoMessage() {}

func (x *PrivateKey) ProtoReflect() protoreflect.Message {
	mi := &file_com_digitalasset_canton_crypto_v0_crypto_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PrivateKey.ProtoReflect.Descriptor instead.
func (*PrivateKey) Descriptor() ([]byte, []int) {
	return file_com_digitalasset_canton_crypto_v0_crypto_proto_rawDescGZIP(), []int{5}
}

func (x *PrivateKey) GetKey() isPrivateKey_Key {
	if x != nil {
		return x.Key
	}
	return nil
}

func (x *PrivateKey) GetSigningPrivateKey() *SigningPrivateKey {
	if x != nil {
		if x, ok := x.Key.(*PrivateKey_SigningPrivateKey); ok {
			return x.SigningPrivateKey
		}
	}
	return nil
}

func (x *PrivateKey) GetEncryptionPrivateKey() *EncryptionPrivateKey {
	if x != nil {
		if x, ok := x.Key.(*PrivateKey_EncryptionPrivateKey); ok {
			return x.EncryptionPrivateKey
		}
	}
	return nil
}

type isPrivateKey_Key interface {
	isPrivateKey_Key()
}

type PrivateKey_SigningPrivateKey struct {
	SigningPrivateKey *SigningPrivateKey `protobuf:"bytes,1,opt,name=signing_private_key,json=signingPrivateKey,proto3,oneof"`
}

type PrivateKey_EncryptionPrivateKey struct {
	EncryptionPrivateKey *EncryptionPrivateKey `protobuf:"bytes,2,opt,name=encryption_private_key,json=encryptionPrivateKey,proto3,oneof"`
}

func (*PrivateKey_SigningPrivateKey) isPrivateKey_Key() {}

func (*PrivateKey_EncryptionPrivateKey) isPrivateKey_Key() {}

type SigningPublicKey struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Id            string                 `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Format        CryptoKeyFormat        `protobuf:"varint,2,opt,name=format,proto3,enum=com.digitalasset.canton.crypto.v0.CryptoKeyFormat" json:"format,omitempty"`
	PublicKey     []byte                 `protobuf:"bytes,3,opt,name=public_key,json=publicKey,proto3" json:"public_key,omitempty"`
	Scheme        SigningKeyScheme       `protobuf:"varint,4,opt,name=scheme,proto3,enum=com.digitalasset.canton.crypto.v0.SigningKeyScheme" json:"scheme,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SigningPublicKey) Reset() {
	*x = SigningPublicKey{}
	mi := &file_com_digitalasset_canton_crypto_v0_crypto_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SigningPublicKey) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SigningPublicKey) ProtoMessage() {}

func (x *SigningPublicKey) ProtoReflect() protoreflect.Message {
	mi := &file_com_digitalasset_canton_crypto_v0_crypto_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SigningPublicKey.ProtoReflect.Descriptor instead.
func (*SigningPublicKey) Descriptor() ([]byte, []int) {
	return file_com_digitalasset_canton_crypto_v0_crypto_proto_rawDescGZIP(), []int{6}
}

func (x *SigningPublicKey) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *SigningPublicKey) GetFormat() CryptoKeyFormat {
	if x != nil {
		return x.Format
	}
	return CryptoKeyFormat_MissingCryptoKeyFormat
}

func (x *SigningPublicKey) GetPublicKey() []byte {
	if x != nil {
		return x.PublicKey
	}
	return nil
}

func (x *SigningPublicKey) GetScheme() SigningKeyScheme {
	if x != nil {
		return x.Scheme
	}
	return SigningKeyScheme_MissingSigningKeyScheme
}

type SigningPrivateKey struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Id            string                 `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Format        CryptoKeyFormat        `protobuf:"varint,2,opt,name=format,proto3,enum=com.digitalasset.canton.crypto.v0.CryptoKeyFormat" json:"format,omitempty"`
	PrivateKey    []byte                 `protobuf:"bytes,3,opt,name=private_key,json=privateKey,proto3" json:"private_key,omitempty"`
	Scheme        SigningKeyScheme       `protobuf:"varint,4,opt,name=scheme,proto3,enum=com.digitalasset.canton.crypto.v0.SigningKeyScheme" json:"scheme,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SigningPrivateKey) Reset() {
	*x = SigningPrivateKey{}
	mi := &file_com_digitalasset_canton_crypto_v0_crypto_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SigningPrivateKey) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SigningPrivateKey) ProtoMessage() {}

func (x *SigningPrivateKey) ProtoReflect() protoreflect.Message {
	mi := &file_com_digitalasset_canton_crypto_v0_crypto_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SigningPrivateKey.ProtoReflect.Descriptor instead.
func (*SigningPrivateKey) Descriptor() ([]byte, []int) {
	return file_com_digitalasset_canton_crypto_v0_crypto_proto_rawDescGZIP(), []int{7}
}

func (x *SigningPrivateKey) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *SigningPrivateKey) GetFormat() CryptoKeyFormat {
	if x != nil {
		return x.Format
	}
	return CryptoKeyFormat_MissingCryptoKeyFormat
}

func (x *SigningPrivateKey) GetPrivateKey() []byte {
	if x != nil {
		return x.PrivateKey
	}
	return nil
}

func (x *SigningPrivateKey) GetScheme() SigningKeyScheme {
	if x != nil {
		return x.Scheme
	}
	return SigningKeyScheme_MissingSigningKeyScheme
}

type SigningKeyPair struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	PublicKey     *SigningPublicKey      `protobuf:"bytes,1,opt,name=public_key,json=publicKey,proto3" json:"public_key,omitempty"`
	PrivateKey    *SigningPrivateKey     `protobuf:"bytes,2,opt,name=private_key,json=privateKey,proto3" json:"private_key,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SigningKeyPair) Reset() {
	*x = SigningKeyPair{}
	mi := &file_com_digitalasset_canton_crypto_v0_crypto_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SigningKeyPair) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SigningKeyPair) ProtoMessage() {}

func (x *SigningKeyPair) ProtoReflect() protoreflect.Message {
	mi := &file_com_digitalasset_canton_crypto_v0_crypto_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SigningKeyPair.ProtoReflect.Descriptor instead.
func (*SigningKeyPair) Descriptor() ([]byte, []int) {
	return file_com_digitalasset_canton_crypto_v0_crypto_proto_rawDescGZIP(), []int{8}
}

func (x *SigningKeyPair) GetPublicKey() *SigningPublicKey {
	if x != nil {
		return x.PublicKey
	}
	return nil
}

func (x *SigningKeyPair) GetPrivateKey() *SigningPrivateKey {
	if x != nil {
		return x.PrivateKey
	}
	return nil
}

type EncryptionPublicKey struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Id            string                 `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Format        CryptoKeyFormat        `protobuf:"varint,2,opt,name=format,proto3,enum=com.digitalasset.canton.crypto.v0.CryptoKeyFormat" json:"format,omitempty"`
	PublicKey     []byte                 `protobuf:"bytes,3,opt,name=public_key,json=publicKey,proto3" json:"public_key,omitempty"`
	Scheme        EncryptionKeyScheme    `protobuf:"varint,4,opt,name=scheme,proto3,enum=com.digitalasset.canton.crypto.v0.EncryptionKeyScheme" json:"scheme,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *EncryptionPublicKey) Reset() {
	*x = EncryptionPublicKey{}
	mi := &file_com_digitalasset_canton_crypto_v0_crypto_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *EncryptionPublicKey) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EncryptionPublicKey) ProtoMessage() {}

func (x *EncryptionPublicKey) ProtoReflect() protoreflect.Message {
	mi := &file_com_digitalasset_canton_crypto_v0_crypto_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EncryptionPublicKey.ProtoReflect.Descriptor instead.
func (*EncryptionPublicKey) Descriptor() ([]byte, []int) {
	return file_com_digitalasset_canton_crypto_v0_crypto_proto_rawDescGZIP(), []int{9}
}

func (x *EncryptionPublicKey) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *EncryptionPublicKey) GetFormat() CryptoKeyFormat {
	if x != nil {
		return x.Format
	}
	return CryptoKeyFormat_MissingCryptoKeyFormat
}

func (x *EncryptionPublicKey) GetPublicKey() []byte {
	if x != nil {
		return x.PublicKey
	}
	return nil
}

func (x *EncryptionPublicKey) GetScheme() EncryptionKeyScheme {
	if x != nil {
		return x.Scheme
	}
	return EncryptionKeyScheme_MissingEncryptionKeyScheme
}

type EncryptionPrivateKey struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Id            string                 `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Format        CryptoKeyFormat        `protobuf:"varint,2,opt,name=format,proto3,enum=com.digitalasset.canton.crypto.v0.CryptoKeyFormat" json:"format,omitempty"`
	PrivateKey    []byte                 `protobuf:"bytes,3,opt,name=private_key,json=privateKey,proto3" json:"private_key,omitempty"`
	Scheme        EncryptionKeyScheme    `protobuf:"varint,4,opt,name=scheme,proto3,enum=com.digitalasset.canton.crypto.v0.EncryptionKeyScheme" json:"scheme,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *EncryptionPrivateKey) Reset() {
	*x = EncryptionPrivateKey{}
	mi := &file_com_digitalasset_canton_crypto_v0_crypto_proto_msgTypes[10]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *EncryptionPrivateKey) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EncryptionPrivateKey) ProtoMessage() {}

func (x *EncryptionPrivateKey) ProtoReflect() protoreflect.Message {
	mi := &file_com_digitalasset_canton_crypto_v0_crypto_proto_msgTypes[10]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EncryptionPrivateKey.ProtoReflect.Descriptor instead.
func (*EncryptionPrivateKey) Descriptor() ([]byte, []int) {
	return file_com_digitalasset_canton_crypto_v0_crypto_proto_rawDescGZIP(), []int{10}
}

func (x *EncryptionPrivateKey) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *EncryptionPrivateKey) GetFormat() CryptoKeyFormat {
	if x != nil {
		return x.Format
	}
	return CryptoKeyFormat_MissingCryptoKeyFormat
}

func (x *EncryptionPrivateKey) GetPrivateKey() []byte {
	if x != nil {
		return x.PrivateKey
	}
	return nil
}

func (x *EncryptionPrivateKey) GetScheme() EncryptionKeyScheme {
	if x != nil {
		return x.Scheme
	}
	return EncryptionKeyScheme_MissingEncryptionKeyScheme
}

type EncryptionKeyPair struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	PublicKey     *EncryptionPublicKey   `protobuf:"bytes,1,opt,name=public_key,json=publicKey,proto3" json:"public_key,omitempty"`
	PrivateKey    *EncryptionPrivateKey  `protobuf:"bytes,2,opt,name=private_key,json=privateKey,proto3" json:"private_key,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *EncryptionKeyPair) Reset() {
	*x = EncryptionKeyPair{}
	mi := &file_com_digitalasset_canton_crypto_v0_crypto_proto_msgTypes[11]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *EncryptionKeyPair) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EncryptionKeyPair) ProtoMessage() {}

func (x *EncryptionKeyPair) ProtoReflect() protoreflect.Message {
	mi := &file_com_digitalasset_canton_crypto_v0_crypto_proto_msgTypes[11]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EncryptionKeyPair.ProtoReflect.Descriptor instead.
func (*EncryptionKeyPair) Descriptor() ([]byte, []int) {
	return file_com_digitalasset_canton_crypto_v0_crypto_proto_rawDescGZIP(), []int{11}
}

func (x *EncryptionKeyPair) GetPublicKey() *EncryptionPublicKey {
	if x != nil {
		return x.PublicKey
	}
	return nil
}

func (x *EncryptionKeyPair) GetPrivateKey() *EncryptionPrivateKey {
	if x != nil {
		return x.PrivateKey
	}
	return nil
}

type CryptoKeyPair struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Types that are valid to be assigned to Pair:
	//
	//	*CryptoKeyPair_SigningKeyPair
	//	*CryptoKeyPair_EncryptionKeyPair
	Pair          isCryptoKeyPair_Pair `protobuf_oneof:"pair"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CryptoKeyPair) Reset() {
	*x = CryptoKeyPair{}
	mi := &file_com_digitalasset_canton_crypto_v0_crypto_proto_msgTypes[12]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CryptoKeyPair) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CryptoKeyPair) ProtoMessage() {}

func (x *CryptoKeyPair) ProtoReflect() protoreflect.Message {
	mi := &file_com_digitalasset_canton_crypto_v0_crypto_proto_msgTypes[12]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CryptoKeyPair.ProtoReflect.Descriptor instead.
func (*CryptoKeyPair) Descriptor() ([]byte, []int) {
	return file_com_digitalasset_canton_crypto_v0_crypto_proto_rawDescGZIP(), []int{12}
}

func (x *CryptoKeyPair) GetPair() isCryptoKeyPair_Pair {
	if x != nil {
		return x.Pair
	}
	return nil
}

func (x *CryptoKeyPair) GetSigningKeyPair() *SigningKeyPair {
	if x != nil {
		if x, ok := x.Pair.(*CryptoKeyPair_SigningKeyPair); ok {
			return x.SigningKeyPair
		}
	}
	return nil
}

func (x *CryptoKeyPair) GetEncryptionKeyPair() *EncryptionKeyPair {
	if x != nil {
		if x, ok := x.Pair.(*CryptoKeyPair_EncryptionKeyPair); ok {
			return x.EncryptionKeyPair
		}
	}
	return nil
}

type isCryptoKeyPair_Pair interface {
	isCryptoKeyPair_Pair()
}

type CryptoKeyPair_SigningKeyPair struct {
	SigningKeyPair *SigningKeyPair `protobuf:"bytes,1,opt,name=signing_key_pair,json=signingKeyPair,proto3,oneof"`
}

type CryptoKeyPair_EncryptionKeyPair struct {
	EncryptionKeyPair *EncryptionKeyPair `protobuf:"bytes,2,opt,name=encryption_key_pair,json=encryptionKeyPair,proto3,oneof"`
}

func (*CryptoKeyPair_SigningKeyPair) isCryptoKeyPair_Pair() {}

func (*CryptoKeyPair_EncryptionKeyPair) isCryptoKeyPair_Pair() {}

type SymmetricKey struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Format        CryptoKeyFormat        `protobuf:"varint,1,opt,name=format,proto3,enum=com.digitalasset.canton.crypto.v0.CryptoKeyFormat" json:"format,omitempty"`
	Key           []byte                 `protobuf:"bytes,2,opt,name=key,proto3" json:"key,omitempty"`
	Scheme        SymmetricKeyScheme     `protobuf:"varint,3,opt,name=scheme,proto3,enum=com.digitalasset.canton.crypto.v0.SymmetricKeyScheme" json:"scheme,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SymmetricKey) Reset() {
	*x = SymmetricKey{}
	mi := &file_com_digitalasset_canton_crypto_v0_crypto_proto_msgTypes[13]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SymmetricKey) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SymmetricKey) ProtoMessage() {}

func (x *SymmetricKey) ProtoReflect() protoreflect.Message {
	mi := &file_com_digitalasset_canton_crypto_v0_crypto_proto_msgTypes[13]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SymmetricKey.ProtoReflect.Descriptor instead.
func (*SymmetricKey) Descriptor() ([]byte, []int) {
	return file_com_digitalasset_canton_crypto_v0_crypto_proto_rawDescGZIP(), []int{13}
}

func (x *SymmetricKey) GetFormat() CryptoKeyFormat {
	if x != nil {
		return x.Format
	}
	return CryptoKeyFormat_MissingCryptoKeyFormat
}

func (x *SymmetricKey) GetKey() []byte {
	if x != nil {
		return x.Key
	}
	return nil
}

func (x *SymmetricKey) GetScheme() SymmetricKeyScheme {
	if x != nil {
		return x.Scheme
	}
	return SymmetricKeyScheme_MissingSymmetricKeyScheme
}

var File_com_digitalasset_canton_crypto_v0_crypto_proto protoreflect.FileDescriptor

const file_com_digitalasset_canton_crypto_v0_crypto_proto_rawDesc = "" +
	"\n" +
	".com/digitalasset/canton/crypto/v0/crypto.proto\x12!com.digitalasset.canton.crypto.v0\"j\n" +
	"\x04Hmac\x12N\n" +
	"\talgorithm\x18\x01 \x01(\x0e20.com.digitalasset.canton.crypto.v0.HmacAlgorithmR\talgorithm\x12\x12\n" +
	"\x04hmac\x18\x02 \x01(\fR\x04hmac\"o\n" +
	"\x04Salt\x12F\n" +
	"\x04hmac\x18\x01 \x01(\x0e20.com.digitalasset.canton.crypto.v0.HmacAlgorithmH\x00R\x04hmac\x12\x12\n" +
	"\x04salt\x18\x02 \x01(\fR\x04saltB\v\n" +
	"\talgorithm\"\x92\x01\n" +
	"\tSignature\x12J\n" +
	"\x06format\x18\x01 \x01(\x0e22.com.digitalasset.canton.crypto.v0.SignatureFormatR\x06format\x12\x1c\n" +
	"\tsignature\x18\x02 \x01(\fR\tsignature\x12\x1b\n" +
	"\tsigned_by\x18\x03 \x01(\tR\bsignedBy\"\xe5\x01\n" +
	"\tPublicKey\x12c\n" +
	"\x12signing_public_key\x18\x01 \x01(\v23.com.digitalasset.canton.crypto.v0.SigningPublicKeyH\x00R\x10signingPublicKey\x12l\n" +
	"\x15encryption_public_key\x18\x02 \x01(\v26.com.digitalasset.canton.crypto.v0.EncryptionPublicKeyH\x00R\x13encryptionPublicKeyB\x05\n" +
	"\x03key\"t\n" +
	"\x11PublicKeyWithName\x12K\n" +
	"\n" +
	"public_key\x18\x01 \x01(\v2,.com.digitalasset.canton.crypto.v0.PublicKeyR\tpublicKey\x12\x12\n" +
	"\x04name\x18\x02 \x01(\tR\x04name\"\xec\x01\n" +
	"\n" +
	"PrivateKey\x12f\n" +
	"\x13signing_private_key\x18\x01 \x01(\v24.com.digitalasset.canton.crypto.v0.SigningPrivateKeyH\x00R\x11signingPrivateKey\x12o\n" +
	"\x16encryption_private_key\x18\x02 \x01(\v27.com.digitalasset.canton.crypto.v0.EncryptionPrivateKeyH\x00R\x14encryptionPrivateKeyB\x05\n" +
	"\x03key\"\xda\x01\n" +
	"\x10SigningPublicKey\x12\x0e\n" +
	"\x02id\x18\x01 \x01(\tR\x02id\x12J\n" +
	"\x06format\x18\x02 \x01(\x0e22.com.digitalasset.canton.crypto.v0.CryptoKeyFormatR\x06format\x12\x1d\n" +
	"\n" +
	"public_key\x18\x03 \x01(\fR\tpublicKey\x12K\n" +
	"\x06scheme\x18\x04 \x01(\x0e23.com.digitalasset.canton.crypto.v0.SigningKeySchemeR\x06scheme\"\xdd\x01\n" +
	"\x11SigningPrivateKey\x12\x0e\n" +
	"\x02id\x18\x01 \x01(\tR\x02id\x12J\n" +
	"\x06format\x18\x02 \x01(\x0e22.com.digitalasset.canton.crypto.v0.CryptoKeyFormatR\x06format\x12\x1f\n" +
	"\vprivate_key\x18\x03 \x01(\fR\n" +
	"privateKey\x12K\n" +
	"\x06scheme\x18\x04 \x01(\x0e23.com.digitalasset.canton.crypto.v0.SigningKeySchemeR\x06scheme\"\xbb\x01\n" +
	"\x0eSigningKeyPair\x12R\n" +
	"\n" +
	"public_key\x18\x01 \x01(\v23.com.digitalasset.canton.crypto.v0.SigningPublicKeyR\tpublicKey\x12U\n" +
	"\vprivate_key\x18\x02 \x01(\v24.com.digitalasset.canton.crypto.v0.SigningPrivateKeyR\n" +
	"privateKey\"\xe0\x01\n" +
	"\x13EncryptionPublicKey\x12\x0e\n" +
	"\x02id\x18\x01 \x01(\tR\x02id\x12J\n" +
	"\x06format\x18\x02 \x01(\x0e22.com.digitalasset.canton.crypto.v0.CryptoKeyFormatR\x06format\x12\x1d\n" +
	"\n" +
	"public_key\x18\x03 \x01(\fR\tpublicKey\x12N\n" +
	"\x06scheme\x18\x04 \x01(\x0e26.com.digitalasset.canton.crypto.v0.EncryptionKeySchemeR\x06scheme\"\xe3\x01\n" +
	"\x14EncryptionPrivateKey\x12\x0e\n" +
	"\x02id\x18\x01 \x01(\tR\x02id\x12J\n" +
	"\x06format\x18\x02 \x01(\x0e22.com.digitalasset.canton.crypto.v0.CryptoKeyFormatR\x06format\x12\x1f\n" +
	"\vprivate_key\x18\x03 \x01(\fR\n" +
	"privateKey\x12N\n" +
	"\x06scheme\x18\x04 \x01(\x0e26.com.digitalasset.canton.crypto.v0.EncryptionKeySchemeR\x06scheme\"\xc4\x01\n" +
	"\x11EncryptionKeyPair\x12U\n" +
	"\n" +
	"public_key\x18\x01 \x01(\v26.com.digitalasset.canton.crypto.v0.EncryptionPublicKeyR\tpublicKey\x12X\n" +
	"\vprivate_key\x18\x02 \x01(\v27.com.digitalasset.canton.crypto.v0.EncryptionPrivateKeyR\n" +
	"privateKey\"\xde\x01\n" +
	"\rCryptoKeyPair\x12]\n" +
	"\x10signing_key_pair\x18\x01 \x01(\v21.com.digitalasset.canton.crypto.v0.SigningKeyPairH\x00R\x0esigningKeyPair\x12f\n" +
	"\x13encryption_key_pair\x18\x02 \x01(\v24.com.digitalasset.canton.crypto.v0.EncryptionKeyPairH\x00R\x11encryptionKeyPairB\x06\n" +
	"\x04pair\"\xbb\x01\n" +
	"\fSymmetricKey\x12J\n" +
	"\x06format\x18\x01 \x01(\x0e22.com.digitalasset.canton.crypto.v0.CryptoKeyFormatR\x06format\x12\x10\n" +
	"\x03key\x18\x02 \x01(\fR\x03key\x12M\n" +
	"\x06scheme\x18\x03 \x01(\x0e25.com.digitalasset.canton.crypto.v0.SymmetricKeySchemeR\x06scheme*5\n" +
	"\rHashAlgorithm\x12\x18\n" +
	"\x14MissingHashAlgorithm\x10\x00\x12\n" +
	"\n" +
	"\x06Sha256\x10\x01*9\n" +
	"\rHmacAlgorithm\x12\x18\n" +
	"\x14MissingHmacAlgorithm\x10\x00\x12\x0e\n" +
	"\n" +
	"HmacSha256\x10\x01*E\n" +
	"\x0fSignatureFormat\x12\x1a\n" +
	"\x16MissingSignatureFormat\x10\x00\x12\x16\n" +
	"\x12RawSignatureFormat\x10\x01*T\n" +
	"\n" +
	"KeyPurpose\x12\x15\n" +
	"\x11UnknownKeyPurpose\x10\x00\x12\x15\n" +
	"\x11SigningKeyPurpose\x10\x01\x12\x18\n" +
	"\x14EncryptionKeyPurpose\x10\x02*c\n" +
	"\x10SigningKeyScheme\x12\x1b\n" +
	"\x17MissingSigningKeyScheme\x10\x00\x12\v\n" +
	"\aEd25519\x10\x01\x12\r\n" +
	"\tEcDsaP256\x10\x02\x12\r\n" +
	"\tEcDsaP384\x10\x03\x12\a\n" +
	"\x03Sm2\x10\x04*\x94\x01\n" +
	"\x13EncryptionKeyScheme\x12\x1e\n" +
	"\x1aMissingEncryptionKeyScheme\x10\x00\x12$\n" +
	" EciesP256HkdfHmacSha256Aes128Gcm\x10\x01\x12 \n" +
	"\x1cEciesP256HmacSha256Aes128Cbc\x10\x02\x12\x15\n" +
	"\x11Rsa2048OaepSha256\x10\x03*B\n" +
	"\x12SymmetricKeyScheme\x12\x1d\n" +
	"\x19MissingSymmetricKeyScheme\x10\x00\x12\r\n" +
	"\tAes128Gcm\x10\x01*X\n" +
	"\x0fCryptoKeyFormat\x12\x1a\n" +
	"\x16MissingCryptoKeyFormat\x10\x00\x12\b\n" +
	"\x04Tink\x10\x01\x12\a\n" +
	"\x03Der\x10\x02\x12\a\n" +
	"\x03Raw\x10\x03\x12\r\n" +
	"\bSymbolic\x10\x90NBRZPgithub.com/digital-asset/dazl-client/v8/go/api/com/digitalasset/canton/crypto/v0b\x06proto3"

var (
	file_com_digitalasset_canton_crypto_v0_crypto_proto_rawDescOnce sync.Once
	file_com_digitalasset_canton_crypto_v0_crypto_proto_rawDescData []byte
)

func file_com_digitalasset_canton_crypto_v0_crypto_proto_rawDescGZIP() []byte {
	file_com_digitalasset_canton_crypto_v0_crypto_proto_rawDescOnce.Do(func() {
		file_com_digitalasset_canton_crypto_v0_crypto_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_com_digitalasset_canton_crypto_v0_crypto_proto_rawDesc), len(file_com_digitalasset_canton_crypto_v0_crypto_proto_rawDesc)))
	})
	return file_com_digitalasset_canton_crypto_v0_crypto_proto_rawDescData
}

var file_com_digitalasset_canton_crypto_v0_crypto_proto_enumTypes = make([]protoimpl.EnumInfo, 8)
var file_com_digitalasset_canton_crypto_v0_crypto_proto_msgTypes = make([]protoimpl.MessageInfo, 14)
var file_com_digitalasset_canton_crypto_v0_crypto_proto_goTypes = []any{
	(HashAlgorithm)(0),           // 0: com.digitalasset.canton.crypto.v0.HashAlgorithm
	(HmacAlgorithm)(0),           // 1: com.digitalasset.canton.crypto.v0.HmacAlgorithm
	(SignatureFormat)(0),         // 2: com.digitalasset.canton.crypto.v0.SignatureFormat
	(KeyPurpose)(0),              // 3: com.digitalasset.canton.crypto.v0.KeyPurpose
	(SigningKeyScheme)(0),        // 4: com.digitalasset.canton.crypto.v0.SigningKeyScheme
	(EncryptionKeyScheme)(0),     // 5: com.digitalasset.canton.crypto.v0.EncryptionKeyScheme
	(SymmetricKeyScheme)(0),      // 6: com.digitalasset.canton.crypto.v0.SymmetricKeyScheme
	(CryptoKeyFormat)(0),         // 7: com.digitalasset.canton.crypto.v0.CryptoKeyFormat
	(*Hmac)(nil),                 // 8: com.digitalasset.canton.crypto.v0.Hmac
	(*Salt)(nil),                 // 9: com.digitalasset.canton.crypto.v0.Salt
	(*Signature)(nil),            // 10: com.digitalasset.canton.crypto.v0.Signature
	(*PublicKey)(nil),            // 11: com.digitalasset.canton.crypto.v0.PublicKey
	(*PublicKeyWithName)(nil),    // 12: com.digitalasset.canton.crypto.v0.PublicKeyWithName
	(*PrivateKey)(nil),           // 13: com.digitalasset.canton.crypto.v0.PrivateKey
	(*SigningPublicKey)(nil),     // 14: com.digitalasset.canton.crypto.v0.SigningPublicKey
	(*SigningPrivateKey)(nil),    // 15: com.digitalasset.canton.crypto.v0.SigningPrivateKey
	(*SigningKeyPair)(nil),       // 16: com.digitalasset.canton.crypto.v0.SigningKeyPair
	(*EncryptionPublicKey)(nil),  // 17: com.digitalasset.canton.crypto.v0.EncryptionPublicKey
	(*EncryptionPrivateKey)(nil), // 18: com.digitalasset.canton.crypto.v0.EncryptionPrivateKey
	(*EncryptionKeyPair)(nil),    // 19: com.digitalasset.canton.crypto.v0.EncryptionKeyPair
	(*CryptoKeyPair)(nil),        // 20: com.digitalasset.canton.crypto.v0.CryptoKeyPair
	(*SymmetricKey)(nil),         // 21: com.digitalasset.canton.crypto.v0.SymmetricKey
}
var file_com_digitalasset_canton_crypto_v0_crypto_proto_depIdxs = []int32{
	1,  // 0: com.digitalasset.canton.crypto.v0.Hmac.algorithm:type_name -> com.digitalasset.canton.crypto.v0.HmacAlgorithm
	1,  // 1: com.digitalasset.canton.crypto.v0.Salt.hmac:type_name -> com.digitalasset.canton.crypto.v0.HmacAlgorithm
	2,  // 2: com.digitalasset.canton.crypto.v0.Signature.format:type_name -> com.digitalasset.canton.crypto.v0.SignatureFormat
	14, // 3: com.digitalasset.canton.crypto.v0.PublicKey.signing_public_key:type_name -> com.digitalasset.canton.crypto.v0.SigningPublicKey
	17, // 4: com.digitalasset.canton.crypto.v0.PublicKey.encryption_public_key:type_name -> com.digitalasset.canton.crypto.v0.EncryptionPublicKey
	11, // 5: com.digitalasset.canton.crypto.v0.PublicKeyWithName.public_key:type_name -> com.digitalasset.canton.crypto.v0.PublicKey
	15, // 6: com.digitalasset.canton.crypto.v0.PrivateKey.signing_private_key:type_name -> com.digitalasset.canton.crypto.v0.SigningPrivateKey
	18, // 7: com.digitalasset.canton.crypto.v0.PrivateKey.encryption_private_key:type_name -> com.digitalasset.canton.crypto.v0.EncryptionPrivateKey
	7,  // 8: com.digitalasset.canton.crypto.v0.SigningPublicKey.format:type_name -> com.digitalasset.canton.crypto.v0.CryptoKeyFormat
	4,  // 9: com.digitalasset.canton.crypto.v0.SigningPublicKey.scheme:type_name -> com.digitalasset.canton.crypto.v0.SigningKeyScheme
	7,  // 10: com.digitalasset.canton.crypto.v0.SigningPrivateKey.format:type_name -> com.digitalasset.canton.crypto.v0.CryptoKeyFormat
	4,  // 11: com.digitalasset.canton.crypto.v0.SigningPrivateKey.scheme:type_name -> com.digitalasset.canton.crypto.v0.SigningKeyScheme
	14, // 12: com.digitalasset.canton.crypto.v0.SigningKeyPair.public_key:type_name -> com.digitalasset.canton.crypto.v0.SigningPublicKey
	15, // 13: com.digitalasset.canton.crypto.v0.SigningKeyPair.private_key:type_name -> com.digitalasset.canton.crypto.v0.SigningPrivateKey
	7,  // 14: com.digitalasset.canton.crypto.v0.EncryptionPublicKey.format:type_name -> com.digitalasset.canton.crypto.v0.CryptoKeyFormat
	5,  // 15: com.digitalasset.canton.crypto.v0.EncryptionPublicKey.scheme:type_name -> com.digitalasset.canton.crypto.v0.EncryptionKeyScheme
	7,  // 16: com.digitalasset.canton.crypto.v0.EncryptionPrivateKey.format:type_name -> com.digitalasset.canton.crypto.v0.CryptoKeyFormat
	5,  // 17: com.digitalasset.canton.crypto.v0.EncryptionPrivateKey.scheme:type_name -> com.digitalasset.canton.crypto.v0.EncryptionKeyScheme
	17, // 18: com.digitalasset.canton.crypto.v0.EncryptionKeyPair.public_key:type_name -> com.digitalasset.canton.crypto.v0.EncryptionPublicKey
	18, // 19: com.digitalasset.canton.crypto.v0.EncryptionKeyPair.private_key:type_name -> com.digitalasset.canton.crypto.v0.EncryptionPrivateKey
	16, // 20: com.digitalasset.canton.crypto.v0.CryptoKeyPair.signing_key_pair:type_name -> com.digitalasset.canton.crypto.v0.SigningKeyPair
	19, // 21: com.digitalasset.canton.crypto.v0.CryptoKeyPair.encryption_key_pair:type_name -> com.digitalasset.canton.crypto.v0.EncryptionKeyPair
	7,  // 22: com.digitalasset.canton.crypto.v0.SymmetricKey.format:type_name -> com.digitalasset.canton.crypto.v0.CryptoKeyFormat
	6,  // 23: com.digitalasset.canton.crypto.v0.SymmetricKey.scheme:type_name -> com.digitalasset.canton.crypto.v0.SymmetricKeyScheme
	24, // [24:24] is the sub-list for method output_type
	24, // [24:24] is the sub-list for method input_type
	24, // [24:24] is the sub-list for extension type_name
	24, // [24:24] is the sub-list for extension extendee
	0,  // [0:24] is the sub-list for field type_name
}

func init() { file_com_digitalasset_canton_crypto_v0_crypto_proto_init() }
func file_com_digitalasset_canton_crypto_v0_crypto_proto_init() {
	if File_com_digitalasset_canton_crypto_v0_crypto_proto != nil {
		return
	}
	file_com_digitalasset_canton_crypto_v0_crypto_proto_msgTypes[1].OneofWrappers = []any{
		(*Salt_Hmac)(nil),
	}
	file_com_digitalasset_canton_crypto_v0_crypto_proto_msgTypes[3].OneofWrappers = []any{
		(*PublicKey_SigningPublicKey)(nil),
		(*PublicKey_EncryptionPublicKey)(nil),
	}
	file_com_digitalasset_canton_crypto_v0_crypto_proto_msgTypes[5].OneofWrappers = []any{
		(*PrivateKey_SigningPrivateKey)(nil),
		(*PrivateKey_EncryptionPrivateKey)(nil),
	}
	file_com_digitalasset_canton_crypto_v0_crypto_proto_msgTypes[12].OneofWrappers = []any{
		(*CryptoKeyPair_SigningKeyPair)(nil),
		(*CryptoKeyPair_EncryptionKeyPair)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_com_digitalasset_canton_crypto_v0_crypto_proto_rawDesc), len(file_com_digitalasset_canton_crypto_v0_crypto_proto_rawDesc)),
			NumEnums:      8,
			NumMessages:   14,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_com_digitalasset_canton_crypto_v0_crypto_proto_goTypes,
		DependencyIndexes: file_com_digitalasset_canton_crypto_v0_crypto_proto_depIdxs,
		EnumInfos:         file_com_digitalasset_canton_crypto_v0_crypto_proto_enumTypes,
		MessageInfos:      file_com_digitalasset_canton_crypto_v0_crypto_proto_msgTypes,
	}.Build()
	File_com_digitalasset_canton_crypto_v0_crypto_proto = out.File
	file_com_digitalasset_canton_crypto_v0_crypto_proto_goTypes = nil
	file_com_digitalasset_canton_crypto_v0_crypto_proto_depIdxs = nil
}
