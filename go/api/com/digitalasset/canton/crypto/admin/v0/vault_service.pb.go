// Copyright (c) 2017-2025 Digital Asset (Switzerland) GmbH and/or its affiliates. All rights reserved.
// SPDX-License-Identifier: Apache-2.0
// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.35.2
// 	protoc        v5.27.2
// source: com/digitalasset/canton/crypto/admin/v0/vault_service.proto

package v0

import (
	v0 "github.com/digital-asset/dazl-client/v8/go/api/com/digitalasset/canton/crypto/v0"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type GenerateCertificateRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UniqueIdentifier        string   `protobuf:"bytes,1,opt,name=unique_identifier,json=uniqueIdentifier,proto3" json:"unique_identifier,omitempty"`
	CertificateKey          string   `protobuf:"bytes,2,opt,name=certificate_key,json=certificateKey,proto3" json:"certificate_key,omitempty"`
	AdditionalSubject       string   `protobuf:"bytes,3,opt,name=additional_subject,json=additionalSubject,proto3" json:"additional_subject,omitempty"`
	SubjectAlternativeNames []string `protobuf:"bytes,4,rep,name=subject_alternative_names,json=subjectAlternativeNames,proto3" json:"subject_alternative_names,omitempty"`
}

func (x *GenerateCertificateRequest) Reset() {
	*x = GenerateCertificateRequest{}
	mi := &file_com_digitalasset_canton_crypto_admin_v0_vault_service_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GenerateCertificateRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GenerateCertificateRequest) ProtoMessage() {}

func (x *GenerateCertificateRequest) ProtoReflect() protoreflect.Message {
	mi := &file_com_digitalasset_canton_crypto_admin_v0_vault_service_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GenerateCertificateRequest.ProtoReflect.Descriptor instead.
func (*GenerateCertificateRequest) Descriptor() ([]byte, []int) {
	return file_com_digitalasset_canton_crypto_admin_v0_vault_service_proto_rawDescGZIP(), []int{0}
}

func (x *GenerateCertificateRequest) GetUniqueIdentifier() string {
	if x != nil {
		return x.UniqueIdentifier
	}
	return ""
}

func (x *GenerateCertificateRequest) GetCertificateKey() string {
	if x != nil {
		return x.CertificateKey
	}
	return ""
}

func (x *GenerateCertificateRequest) GetAdditionalSubject() string {
	if x != nil {
		return x.AdditionalSubject
	}
	return ""
}

func (x *GenerateCertificateRequest) GetSubjectAlternativeNames() []string {
	if x != nil {
		return x.SubjectAlternativeNames
	}
	return nil
}

type GenerateCertificateResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	X509Cert string `protobuf:"bytes,1,opt,name=x509_cert,json=x509Cert,proto3" json:"x509_cert,omitempty"`
}

func (x *GenerateCertificateResponse) Reset() {
	*x = GenerateCertificateResponse{}
	mi := &file_com_digitalasset_canton_crypto_admin_v0_vault_service_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GenerateCertificateResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GenerateCertificateResponse) ProtoMessage() {}

func (x *GenerateCertificateResponse) ProtoReflect() protoreflect.Message {
	mi := &file_com_digitalasset_canton_crypto_admin_v0_vault_service_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GenerateCertificateResponse.ProtoReflect.Descriptor instead.
func (*GenerateCertificateResponse) Descriptor() ([]byte, []int) {
	return file_com_digitalasset_canton_crypto_admin_v0_vault_service_proto_rawDescGZIP(), []int{1}
}

func (x *GenerateCertificateResponse) GetX509Cert() string {
	if x != nil {
		return x.X509Cert
	}
	return ""
}

type ListCertificateRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FilterUid string `protobuf:"bytes,1,opt,name=filterUid,proto3" json:"filterUid,omitempty"`
}

func (x *ListCertificateRequest) Reset() {
	*x = ListCertificateRequest{}
	mi := &file_com_digitalasset_canton_crypto_admin_v0_vault_service_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListCertificateRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListCertificateRequest) ProtoMessage() {}

func (x *ListCertificateRequest) ProtoReflect() protoreflect.Message {
	mi := &file_com_digitalasset_canton_crypto_admin_v0_vault_service_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListCertificateRequest.ProtoReflect.Descriptor instead.
func (*ListCertificateRequest) Descriptor() ([]byte, []int) {
	return file_com_digitalasset_canton_crypto_admin_v0_vault_service_proto_rawDescGZIP(), []int{2}
}

func (x *ListCertificateRequest) GetFilterUid() string {
	if x != nil {
		return x.FilterUid
	}
	return ""
}

type ListCertificateResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Results []*ListCertificateResponse_Result `protobuf:"bytes,1,rep,name=results,proto3" json:"results,omitempty"`
}

func (x *ListCertificateResponse) Reset() {
	*x = ListCertificateResponse{}
	mi := &file_com_digitalasset_canton_crypto_admin_v0_vault_service_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListCertificateResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListCertificateResponse) ProtoMessage() {}

func (x *ListCertificateResponse) ProtoReflect() protoreflect.Message {
	mi := &file_com_digitalasset_canton_crypto_admin_v0_vault_service_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListCertificateResponse.ProtoReflect.Descriptor instead.
func (*ListCertificateResponse) Descriptor() ([]byte, []int) {
	return file_com_digitalasset_canton_crypto_admin_v0_vault_service_proto_rawDescGZIP(), []int{3}
}

func (x *ListCertificateResponse) GetResults() []*ListCertificateResponse_Result {
	if x != nil {
		return x.Results
	}
	return nil
}

type ImportCertificateRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	X509Cert string `protobuf:"bytes,1,opt,name=x509_cert,json=x509Cert,proto3" json:"x509_cert,omitempty"`
}

func (x *ImportCertificateRequest) Reset() {
	*x = ImportCertificateRequest{}
	mi := &file_com_digitalasset_canton_crypto_admin_v0_vault_service_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ImportCertificateRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ImportCertificateRequest) ProtoMessage() {}

func (x *ImportCertificateRequest) ProtoReflect() protoreflect.Message {
	mi := &file_com_digitalasset_canton_crypto_admin_v0_vault_service_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ImportCertificateRequest.ProtoReflect.Descriptor instead.
func (*ImportCertificateRequest) Descriptor() ([]byte, []int) {
	return file_com_digitalasset_canton_crypto_admin_v0_vault_service_proto_rawDescGZIP(), []int{4}
}

func (x *ImportCertificateRequest) GetX509Cert() string {
	if x != nil {
		return x.X509Cert
	}
	return ""
}

type ImportCertificateResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CertificateId string `protobuf:"bytes,1,opt,name=certificate_id,json=certificateId,proto3" json:"certificate_id,omitempty"`
}

func (x *ImportCertificateResponse) Reset() {
	*x = ImportCertificateResponse{}
	mi := &file_com_digitalasset_canton_crypto_admin_v0_vault_service_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ImportCertificateResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ImportCertificateResponse) ProtoMessage() {}

func (x *ImportCertificateResponse) ProtoReflect() protoreflect.Message {
	mi := &file_com_digitalasset_canton_crypto_admin_v0_vault_service_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ImportCertificateResponse.ProtoReflect.Descriptor instead.
func (*ImportCertificateResponse) Descriptor() ([]byte, []int) {
	return file_com_digitalasset_canton_crypto_admin_v0_vault_service_proto_rawDescGZIP(), []int{5}
}

func (x *ImportCertificateResponse) GetCertificateId() string {
	if x != nil {
		return x.CertificateId
	}
	return ""
}

type ImportPublicKeyRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PublicKey []byte `protobuf:"bytes,1,opt,name=public_key,json=publicKey,proto3" json:"public_key,omitempty"`
	Name      string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *ImportPublicKeyRequest) Reset() {
	*x = ImportPublicKeyRequest{}
	mi := &file_com_digitalasset_canton_crypto_admin_v0_vault_service_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ImportPublicKeyRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ImportPublicKeyRequest) ProtoMessage() {}

func (x *ImportPublicKeyRequest) ProtoReflect() protoreflect.Message {
	mi := &file_com_digitalasset_canton_crypto_admin_v0_vault_service_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ImportPublicKeyRequest.ProtoReflect.Descriptor instead.
func (*ImportPublicKeyRequest) Descriptor() ([]byte, []int) {
	return file_com_digitalasset_canton_crypto_admin_v0_vault_service_proto_rawDescGZIP(), []int{6}
}

func (x *ImportPublicKeyRequest) GetPublicKey() []byte {
	if x != nil {
		return x.PublicKey
	}
	return nil
}

func (x *ImportPublicKeyRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

type ImportPublicKeyResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Fingerprint string `protobuf:"bytes,1,opt,name=fingerprint,proto3" json:"fingerprint,omitempty"`
}

func (x *ImportPublicKeyResponse) Reset() {
	*x = ImportPublicKeyResponse{}
	mi := &file_com_digitalasset_canton_crypto_admin_v0_vault_service_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ImportPublicKeyResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ImportPublicKeyResponse) ProtoMessage() {}

func (x *ImportPublicKeyResponse) ProtoReflect() protoreflect.Message {
	mi := &file_com_digitalasset_canton_crypto_admin_v0_vault_service_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ImportPublicKeyResponse.ProtoReflect.Descriptor instead.
func (*ImportPublicKeyResponse) Descriptor() ([]byte, []int) {
	return file_com_digitalasset_canton_crypto_admin_v0_vault_service_proto_rawDescGZIP(), []int{7}
}

func (x *ImportPublicKeyResponse) GetFingerprint() string {
	if x != nil {
		return x.Fingerprint
	}
	return ""
}

type ListKeysRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FilterFingerprint string          `protobuf:"bytes,1,opt,name=filter_fingerprint,json=filterFingerprint,proto3" json:"filter_fingerprint,omitempty"`
	FilterName        string          `protobuf:"bytes,2,opt,name=filter_name,json=filterName,proto3" json:"filter_name,omitempty"`
	FilterPurpose     []v0.KeyPurpose `protobuf:"varint,3,rep,packed,name=filter_purpose,json=filterPurpose,proto3,enum=com.digitalasset.canton.crypto.v0.KeyPurpose" json:"filter_purpose,omitempty"`
}

func (x *ListKeysRequest) Reset() {
	*x = ListKeysRequest{}
	mi := &file_com_digitalasset_canton_crypto_admin_v0_vault_service_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListKeysRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListKeysRequest) ProtoMessage() {}

func (x *ListKeysRequest) ProtoReflect() protoreflect.Message {
	mi := &file_com_digitalasset_canton_crypto_admin_v0_vault_service_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListKeysRequest.ProtoReflect.Descriptor instead.
func (*ListKeysRequest) Descriptor() ([]byte, []int) {
	return file_com_digitalasset_canton_crypto_admin_v0_vault_service_proto_rawDescGZIP(), []int{8}
}

func (x *ListKeysRequest) GetFilterFingerprint() string {
	if x != nil {
		return x.FilterFingerprint
	}
	return ""
}

func (x *ListKeysRequest) GetFilterName() string {
	if x != nil {
		return x.FilterName
	}
	return ""
}

func (x *ListKeysRequest) GetFilterPurpose() []v0.KeyPurpose {
	if x != nil {
		return x.FilterPurpose
	}
	return nil
}

type PrivateKeyMetadata struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PublicKeyWithName *v0.PublicKeyWithName `protobuf:"bytes,1,opt,name=public_key_with_name,json=publicKeyWithName,proto3" json:"public_key_with_name,omitempty"`
	WrapperKeyId      string                `protobuf:"bytes,2,opt,name=wrapper_key_id,json=wrapperKeyId,proto3" json:"wrapper_key_id,omitempty"`
}

func (x *PrivateKeyMetadata) Reset() {
	*x = PrivateKeyMetadata{}
	mi := &file_com_digitalasset_canton_crypto_admin_v0_vault_service_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PrivateKeyMetadata) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PrivateKeyMetadata) ProtoMessage() {}

func (x *PrivateKeyMetadata) ProtoReflect() protoreflect.Message {
	mi := &file_com_digitalasset_canton_crypto_admin_v0_vault_service_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PrivateKeyMetadata.ProtoReflect.Descriptor instead.
func (*PrivateKeyMetadata) Descriptor() ([]byte, []int) {
	return file_com_digitalasset_canton_crypto_admin_v0_vault_service_proto_rawDescGZIP(), []int{9}
}

func (x *PrivateKeyMetadata) GetPublicKeyWithName() *v0.PublicKeyWithName {
	if x != nil {
		return x.PublicKeyWithName
	}
	return nil
}

func (x *PrivateKeyMetadata) GetWrapperKeyId() string {
	if x != nil {
		return x.WrapperKeyId
	}
	return ""
}

type ListMyKeysResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PrivateKeysMetadata []*PrivateKeyMetadata `protobuf:"bytes,1,rep,name=private_keys_metadata,json=privateKeysMetadata,proto3" json:"private_keys_metadata,omitempty"`
}

func (x *ListMyKeysResponse) Reset() {
	*x = ListMyKeysResponse{}
	mi := &file_com_digitalasset_canton_crypto_admin_v0_vault_service_proto_msgTypes[10]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListMyKeysResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListMyKeysResponse) ProtoMessage() {}

func (x *ListMyKeysResponse) ProtoReflect() protoreflect.Message {
	mi := &file_com_digitalasset_canton_crypto_admin_v0_vault_service_proto_msgTypes[10]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListMyKeysResponse.ProtoReflect.Descriptor instead.
func (*ListMyKeysResponse) Descriptor() ([]byte, []int) {
	return file_com_digitalasset_canton_crypto_admin_v0_vault_service_proto_rawDescGZIP(), []int{10}
}

func (x *ListMyKeysResponse) GetPrivateKeysMetadata() []*PrivateKeyMetadata {
	if x != nil {
		return x.PrivateKeysMetadata
	}
	return nil
}

type ListKeysResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PublicKeys []*v0.PublicKeyWithName `protobuf:"bytes,1,rep,name=public_keys,json=publicKeys,proto3" json:"public_keys,omitempty"`
}

func (x *ListKeysResponse) Reset() {
	*x = ListKeysResponse{}
	mi := &file_com_digitalasset_canton_crypto_admin_v0_vault_service_proto_msgTypes[11]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListKeysResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListKeysResponse) ProtoMessage() {}

func (x *ListKeysResponse) ProtoReflect() protoreflect.Message {
	mi := &file_com_digitalasset_canton_crypto_admin_v0_vault_service_proto_msgTypes[11]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListKeysResponse.ProtoReflect.Descriptor instead.
func (*ListKeysResponse) Descriptor() ([]byte, []int) {
	return file_com_digitalasset_canton_crypto_admin_v0_vault_service_proto_rawDescGZIP(), []int{11}
}

func (x *ListKeysResponse) GetPublicKeys() []*v0.PublicKeyWithName {
	if x != nil {
		return x.PublicKeys
	}
	return nil
}

type GenerateSigningKeyRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	KeyScheme v0.SigningKeyScheme `protobuf:"varint,1,opt,name=key_scheme,json=keyScheme,proto3,enum=com.digitalasset.canton.crypto.v0.SigningKeyScheme" json:"key_scheme,omitempty"`
	Name      string              `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *GenerateSigningKeyRequest) Reset() {
	*x = GenerateSigningKeyRequest{}
	mi := &file_com_digitalasset_canton_crypto_admin_v0_vault_service_proto_msgTypes[12]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GenerateSigningKeyRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GenerateSigningKeyRequest) ProtoMessage() {}

func (x *GenerateSigningKeyRequest) ProtoReflect() protoreflect.Message {
	mi := &file_com_digitalasset_canton_crypto_admin_v0_vault_service_proto_msgTypes[12]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GenerateSigningKeyRequest.ProtoReflect.Descriptor instead.
func (*GenerateSigningKeyRequest) Descriptor() ([]byte, []int) {
	return file_com_digitalasset_canton_crypto_admin_v0_vault_service_proto_rawDescGZIP(), []int{12}
}

func (x *GenerateSigningKeyRequest) GetKeyScheme() v0.SigningKeyScheme {
	if x != nil {
		return x.KeyScheme
	}
	return v0.SigningKeyScheme(0)
}

func (x *GenerateSigningKeyRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

type GenerateSigningKeyResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PublicKey *v0.SigningPublicKey `protobuf:"bytes,1,opt,name=public_key,json=publicKey,proto3" json:"public_key,omitempty"`
}

func (x *GenerateSigningKeyResponse) Reset() {
	*x = GenerateSigningKeyResponse{}
	mi := &file_com_digitalasset_canton_crypto_admin_v0_vault_service_proto_msgTypes[13]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GenerateSigningKeyResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GenerateSigningKeyResponse) ProtoMessage() {}

func (x *GenerateSigningKeyResponse) ProtoReflect() protoreflect.Message {
	mi := &file_com_digitalasset_canton_crypto_admin_v0_vault_service_proto_msgTypes[13]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GenerateSigningKeyResponse.ProtoReflect.Descriptor instead.
func (*GenerateSigningKeyResponse) Descriptor() ([]byte, []int) {
	return file_com_digitalasset_canton_crypto_admin_v0_vault_service_proto_rawDescGZIP(), []int{13}
}

func (x *GenerateSigningKeyResponse) GetPublicKey() *v0.SigningPublicKey {
	if x != nil {
		return x.PublicKey
	}
	return nil
}

type GenerateEncryptionKeyRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	KeyScheme v0.EncryptionKeyScheme `protobuf:"varint,1,opt,name=key_scheme,json=keyScheme,proto3,enum=com.digitalasset.canton.crypto.v0.EncryptionKeyScheme" json:"key_scheme,omitempty"`
	Name      string                 `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *GenerateEncryptionKeyRequest) Reset() {
	*x = GenerateEncryptionKeyRequest{}
	mi := &file_com_digitalasset_canton_crypto_admin_v0_vault_service_proto_msgTypes[14]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GenerateEncryptionKeyRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GenerateEncryptionKeyRequest) ProtoMessage() {}

func (x *GenerateEncryptionKeyRequest) ProtoReflect() protoreflect.Message {
	mi := &file_com_digitalasset_canton_crypto_admin_v0_vault_service_proto_msgTypes[14]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GenerateEncryptionKeyRequest.ProtoReflect.Descriptor instead.
func (*GenerateEncryptionKeyRequest) Descriptor() ([]byte, []int) {
	return file_com_digitalasset_canton_crypto_admin_v0_vault_service_proto_rawDescGZIP(), []int{14}
}

func (x *GenerateEncryptionKeyRequest) GetKeyScheme() v0.EncryptionKeyScheme {
	if x != nil {
		return x.KeyScheme
	}
	return v0.EncryptionKeyScheme(0)
}

func (x *GenerateEncryptionKeyRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

type GenerateEncryptionKeyResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PublicKey *v0.EncryptionPublicKey `protobuf:"bytes,1,opt,name=public_key,json=publicKey,proto3" json:"public_key,omitempty"`
}

func (x *GenerateEncryptionKeyResponse) Reset() {
	*x = GenerateEncryptionKeyResponse{}
	mi := &file_com_digitalasset_canton_crypto_admin_v0_vault_service_proto_msgTypes[15]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GenerateEncryptionKeyResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GenerateEncryptionKeyResponse) ProtoMessage() {}

func (x *GenerateEncryptionKeyResponse) ProtoReflect() protoreflect.Message {
	mi := &file_com_digitalasset_canton_crypto_admin_v0_vault_service_proto_msgTypes[15]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GenerateEncryptionKeyResponse.ProtoReflect.Descriptor instead.
func (*GenerateEncryptionKeyResponse) Descriptor() ([]byte, []int) {
	return file_com_digitalasset_canton_crypto_admin_v0_vault_service_proto_rawDescGZIP(), []int{15}
}

func (x *GenerateEncryptionKeyResponse) GetPublicKey() *v0.EncryptionPublicKey {
	if x != nil {
		return x.PublicKey
	}
	return nil
}

type RegisterKmsSigningKeyRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	KmsKeyId string `protobuf:"bytes,1,opt,name=kms_key_id,json=kmsKeyId,proto3" json:"kms_key_id,omitempty"`
	Name     string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *RegisterKmsSigningKeyRequest) Reset() {
	*x = RegisterKmsSigningKeyRequest{}
	mi := &file_com_digitalasset_canton_crypto_admin_v0_vault_service_proto_msgTypes[16]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RegisterKmsSigningKeyRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RegisterKmsSigningKeyRequest) ProtoMessage() {}

func (x *RegisterKmsSigningKeyRequest) ProtoReflect() protoreflect.Message {
	mi := &file_com_digitalasset_canton_crypto_admin_v0_vault_service_proto_msgTypes[16]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RegisterKmsSigningKeyRequest.ProtoReflect.Descriptor instead.
func (*RegisterKmsSigningKeyRequest) Descriptor() ([]byte, []int) {
	return file_com_digitalasset_canton_crypto_admin_v0_vault_service_proto_rawDescGZIP(), []int{16}
}

func (x *RegisterKmsSigningKeyRequest) GetKmsKeyId() string {
	if x != nil {
		return x.KmsKeyId
	}
	return ""
}

func (x *RegisterKmsSigningKeyRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

type RegisterKmsSigningKeyResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PublicKey *v0.SigningPublicKey `protobuf:"bytes,1,opt,name=public_key,json=publicKey,proto3" json:"public_key,omitempty"`
}

func (x *RegisterKmsSigningKeyResponse) Reset() {
	*x = RegisterKmsSigningKeyResponse{}
	mi := &file_com_digitalasset_canton_crypto_admin_v0_vault_service_proto_msgTypes[17]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RegisterKmsSigningKeyResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RegisterKmsSigningKeyResponse) ProtoMessage() {}

func (x *RegisterKmsSigningKeyResponse) ProtoReflect() protoreflect.Message {
	mi := &file_com_digitalasset_canton_crypto_admin_v0_vault_service_proto_msgTypes[17]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RegisterKmsSigningKeyResponse.ProtoReflect.Descriptor instead.
func (*RegisterKmsSigningKeyResponse) Descriptor() ([]byte, []int) {
	return file_com_digitalasset_canton_crypto_admin_v0_vault_service_proto_rawDescGZIP(), []int{17}
}

func (x *RegisterKmsSigningKeyResponse) GetPublicKey() *v0.SigningPublicKey {
	if x != nil {
		return x.PublicKey
	}
	return nil
}

type RegisterKmsEncryptionKeyRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	KmsKeyId string `protobuf:"bytes,1,opt,name=kms_key_id,json=kmsKeyId,proto3" json:"kms_key_id,omitempty"`
	Name     string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *RegisterKmsEncryptionKeyRequest) Reset() {
	*x = RegisterKmsEncryptionKeyRequest{}
	mi := &file_com_digitalasset_canton_crypto_admin_v0_vault_service_proto_msgTypes[18]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RegisterKmsEncryptionKeyRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RegisterKmsEncryptionKeyRequest) ProtoMessage() {}

func (x *RegisterKmsEncryptionKeyRequest) ProtoReflect() protoreflect.Message {
	mi := &file_com_digitalasset_canton_crypto_admin_v0_vault_service_proto_msgTypes[18]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RegisterKmsEncryptionKeyRequest.ProtoReflect.Descriptor instead.
func (*RegisterKmsEncryptionKeyRequest) Descriptor() ([]byte, []int) {
	return file_com_digitalasset_canton_crypto_admin_v0_vault_service_proto_rawDescGZIP(), []int{18}
}

func (x *RegisterKmsEncryptionKeyRequest) GetKmsKeyId() string {
	if x != nil {
		return x.KmsKeyId
	}
	return ""
}

func (x *RegisterKmsEncryptionKeyRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

type RegisterKmsEncryptionKeyResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PublicKey *v0.EncryptionPublicKey `protobuf:"bytes,1,opt,name=public_key,json=publicKey,proto3" json:"public_key,omitempty"`
}

func (x *RegisterKmsEncryptionKeyResponse) Reset() {
	*x = RegisterKmsEncryptionKeyResponse{}
	mi := &file_com_digitalasset_canton_crypto_admin_v0_vault_service_proto_msgTypes[19]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RegisterKmsEncryptionKeyResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RegisterKmsEncryptionKeyResponse) ProtoMessage() {}

func (x *RegisterKmsEncryptionKeyResponse) ProtoReflect() protoreflect.Message {
	mi := &file_com_digitalasset_canton_crypto_admin_v0_vault_service_proto_msgTypes[19]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RegisterKmsEncryptionKeyResponse.ProtoReflect.Descriptor instead.
func (*RegisterKmsEncryptionKeyResponse) Descriptor() ([]byte, []int) {
	return file_com_digitalasset_canton_crypto_admin_v0_vault_service_proto_rawDescGZIP(), []int{19}
}

func (x *RegisterKmsEncryptionKeyResponse) GetPublicKey() *v0.EncryptionPublicKey {
	if x != nil {
		return x.PublicKey
	}
	return nil
}

type RotateWrapperKeyRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	NewWrapperKeyId string `protobuf:"bytes,1,opt,name=new_wrapper_key_id,json=newWrapperKeyId,proto3" json:"new_wrapper_key_id,omitempty"`
}

func (x *RotateWrapperKeyRequest) Reset() {
	*x = RotateWrapperKeyRequest{}
	mi := &file_com_digitalasset_canton_crypto_admin_v0_vault_service_proto_msgTypes[20]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RotateWrapperKeyRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RotateWrapperKeyRequest) ProtoMessage() {}

func (x *RotateWrapperKeyRequest) ProtoReflect() protoreflect.Message {
	mi := &file_com_digitalasset_canton_crypto_admin_v0_vault_service_proto_msgTypes[20]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RotateWrapperKeyRequest.ProtoReflect.Descriptor instead.
func (*RotateWrapperKeyRequest) Descriptor() ([]byte, []int) {
	return file_com_digitalasset_canton_crypto_admin_v0_vault_service_proto_rawDescGZIP(), []int{20}
}

func (x *RotateWrapperKeyRequest) GetNewWrapperKeyId() string {
	if x != nil {
		return x.NewWrapperKeyId
	}
	return ""
}

type GetWrapperKeyIdRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *GetWrapperKeyIdRequest) Reset() {
	*x = GetWrapperKeyIdRequest{}
	mi := &file_com_digitalasset_canton_crypto_admin_v0_vault_service_proto_msgTypes[21]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetWrapperKeyIdRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetWrapperKeyIdRequest) ProtoMessage() {}

func (x *GetWrapperKeyIdRequest) ProtoReflect() protoreflect.Message {
	mi := &file_com_digitalasset_canton_crypto_admin_v0_vault_service_proto_msgTypes[21]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetWrapperKeyIdRequest.ProtoReflect.Descriptor instead.
func (*GetWrapperKeyIdRequest) Descriptor() ([]byte, []int) {
	return file_com_digitalasset_canton_crypto_admin_v0_vault_service_proto_rawDescGZIP(), []int{21}
}

type GetWrapperKeyIdResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	WrapperKeyId string `protobuf:"bytes,1,opt,name=wrapper_key_id,json=wrapperKeyId,proto3" json:"wrapper_key_id,omitempty"`
}

func (x *GetWrapperKeyIdResponse) Reset() {
	*x = GetWrapperKeyIdResponse{}
	mi := &file_com_digitalasset_canton_crypto_admin_v0_vault_service_proto_msgTypes[22]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetWrapperKeyIdResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetWrapperKeyIdResponse) ProtoMessage() {}

func (x *GetWrapperKeyIdResponse) ProtoReflect() protoreflect.Message {
	mi := &file_com_digitalasset_canton_crypto_admin_v0_vault_service_proto_msgTypes[22]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetWrapperKeyIdResponse.ProtoReflect.Descriptor instead.
func (*GetWrapperKeyIdResponse) Descriptor() ([]byte, []int) {
	return file_com_digitalasset_canton_crypto_admin_v0_vault_service_proto_rawDescGZIP(), []int{22}
}

func (x *GetWrapperKeyIdResponse) GetWrapperKeyId() string {
	if x != nil {
		return x.WrapperKeyId
	}
	return ""
}

type ExportKeyPairRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Fingerprint     string `protobuf:"bytes,1,opt,name=fingerprint,proto3" json:"fingerprint,omitempty"`
	ProtocolVersion int32  `protobuf:"varint,2,opt,name=protocol_version,json=protocolVersion,proto3" json:"protocol_version,omitempty"`
}

func (x *ExportKeyPairRequest) Reset() {
	*x = ExportKeyPairRequest{}
	mi := &file_com_digitalasset_canton_crypto_admin_v0_vault_service_proto_msgTypes[23]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ExportKeyPairRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExportKeyPairRequest) ProtoMessage() {}

func (x *ExportKeyPairRequest) ProtoReflect() protoreflect.Message {
	mi := &file_com_digitalasset_canton_crypto_admin_v0_vault_service_proto_msgTypes[23]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExportKeyPairRequest.ProtoReflect.Descriptor instead.
func (*ExportKeyPairRequest) Descriptor() ([]byte, []int) {
	return file_com_digitalasset_canton_crypto_admin_v0_vault_service_proto_rawDescGZIP(), []int{23}
}

func (x *ExportKeyPairRequest) GetFingerprint() string {
	if x != nil {
		return x.Fingerprint
	}
	return ""
}

func (x *ExportKeyPairRequest) GetProtocolVersion() int32 {
	if x != nil {
		return x.ProtocolVersion
	}
	return 0
}

type ExportKeyPairResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	KeyPair []byte `protobuf:"bytes,1,opt,name=key_pair,json=keyPair,proto3" json:"key_pair,omitempty"`
}

func (x *ExportKeyPairResponse) Reset() {
	*x = ExportKeyPairResponse{}
	mi := &file_com_digitalasset_canton_crypto_admin_v0_vault_service_proto_msgTypes[24]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ExportKeyPairResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExportKeyPairResponse) ProtoMessage() {}

func (x *ExportKeyPairResponse) ProtoReflect() protoreflect.Message {
	mi := &file_com_digitalasset_canton_crypto_admin_v0_vault_service_proto_msgTypes[24]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExportKeyPairResponse.ProtoReflect.Descriptor instead.
func (*ExportKeyPairResponse) Descriptor() ([]byte, []int) {
	return file_com_digitalasset_canton_crypto_admin_v0_vault_service_proto_rawDescGZIP(), []int{24}
}

func (x *ExportKeyPairResponse) GetKeyPair() []byte {
	if x != nil {
		return x.KeyPair
	}
	return nil
}

type ImportKeyPairRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	KeyPair []byte `protobuf:"bytes,1,opt,name=key_pair,json=keyPair,proto3" json:"key_pair,omitempty"`
	Name    string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *ImportKeyPairRequest) Reset() {
	*x = ImportKeyPairRequest{}
	mi := &file_com_digitalasset_canton_crypto_admin_v0_vault_service_proto_msgTypes[25]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ImportKeyPairRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ImportKeyPairRequest) ProtoMessage() {}

func (x *ImportKeyPairRequest) ProtoReflect() protoreflect.Message {
	mi := &file_com_digitalasset_canton_crypto_admin_v0_vault_service_proto_msgTypes[25]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ImportKeyPairRequest.ProtoReflect.Descriptor instead.
func (*ImportKeyPairRequest) Descriptor() ([]byte, []int) {
	return file_com_digitalasset_canton_crypto_admin_v0_vault_service_proto_rawDescGZIP(), []int{25}
}

func (x *ImportKeyPairRequest) GetKeyPair() []byte {
	if x != nil {
		return x.KeyPair
	}
	return nil
}

func (x *ImportKeyPairRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

type ImportKeyPairResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *ImportKeyPairResponse) Reset() {
	*x = ImportKeyPairResponse{}
	mi := &file_com_digitalasset_canton_crypto_admin_v0_vault_service_proto_msgTypes[26]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ImportKeyPairResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ImportKeyPairResponse) ProtoMessage() {}

func (x *ImportKeyPairResponse) ProtoReflect() protoreflect.Message {
	mi := &file_com_digitalasset_canton_crypto_admin_v0_vault_service_proto_msgTypes[26]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ImportKeyPairResponse.ProtoReflect.Descriptor instead.
func (*ImportKeyPairResponse) Descriptor() ([]byte, []int) {
	return file_com_digitalasset_canton_crypto_admin_v0_vault_service_proto_rawDescGZIP(), []int{26}
}

type DeleteKeyPairRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Fingerprint string `protobuf:"bytes,1,opt,name=fingerprint,proto3" json:"fingerprint,omitempty"`
}

func (x *DeleteKeyPairRequest) Reset() {
	*x = DeleteKeyPairRequest{}
	mi := &file_com_digitalasset_canton_crypto_admin_v0_vault_service_proto_msgTypes[27]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DeleteKeyPairRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteKeyPairRequest) ProtoMessage() {}

func (x *DeleteKeyPairRequest) ProtoReflect() protoreflect.Message {
	mi := &file_com_digitalasset_canton_crypto_admin_v0_vault_service_proto_msgTypes[27]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteKeyPairRequest.ProtoReflect.Descriptor instead.
func (*DeleteKeyPairRequest) Descriptor() ([]byte, []int) {
	return file_com_digitalasset_canton_crypto_admin_v0_vault_service_proto_rawDescGZIP(), []int{27}
}

func (x *DeleteKeyPairRequest) GetFingerprint() string {
	if x != nil {
		return x.Fingerprint
	}
	return ""
}

type DeleteKeyPairResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *DeleteKeyPairResponse) Reset() {
	*x = DeleteKeyPairResponse{}
	mi := &file_com_digitalasset_canton_crypto_admin_v0_vault_service_proto_msgTypes[28]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DeleteKeyPairResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteKeyPairResponse) ProtoMessage() {}

func (x *DeleteKeyPairResponse) ProtoReflect() protoreflect.Message {
	mi := &file_com_digitalasset_canton_crypto_admin_v0_vault_service_proto_msgTypes[28]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteKeyPairResponse.ProtoReflect.Descriptor instead.
func (*DeleteKeyPairResponse) Descriptor() ([]byte, []int) {
	return file_com_digitalasset_canton_crypto_admin_v0_vault_service_proto_rawDescGZIP(), []int{28}
}

type ListCertificateResponse_Result struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	X509Cert string `protobuf:"bytes,1,opt,name=x509_cert,json=x509Cert,proto3" json:"x509_cert,omitempty"`
}

func (x *ListCertificateResponse_Result) Reset() {
	*x = ListCertificateResponse_Result{}
	mi := &file_com_digitalasset_canton_crypto_admin_v0_vault_service_proto_msgTypes[29]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListCertificateResponse_Result) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListCertificateResponse_Result) ProtoMessage() {}

func (x *ListCertificateResponse_Result) ProtoReflect() protoreflect.Message {
	mi := &file_com_digitalasset_canton_crypto_admin_v0_vault_service_proto_msgTypes[29]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListCertificateResponse_Result.ProtoReflect.Descriptor instead.
func (*ListCertificateResponse_Result) Descriptor() ([]byte, []int) {
	return file_com_digitalasset_canton_crypto_admin_v0_vault_service_proto_rawDescGZIP(), []int{3, 0}
}

func (x *ListCertificateResponse_Result) GetX509Cert() string {
	if x != nil {
		return x.X509Cert
	}
	return ""
}

var File_com_digitalasset_canton_crypto_admin_v0_vault_service_proto protoreflect.FileDescriptor

var file_com_digitalasset_canton_crypto_admin_v0_vault_service_proto_rawDesc = []byte{
	0x0a, 0x3b, 0x63, 0x6f, 0x6d, 0x2f, 0x64, 0x69, 0x67, 0x69, 0x74, 0x61, 0x6c, 0x61, 0x73, 0x73,
	0x65, 0x74, 0x2f, 0x63, 0x61, 0x6e, 0x74, 0x6f, 0x6e, 0x2f, 0x63, 0x72, 0x79, 0x70, 0x74, 0x6f,
	0x2f, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2f, 0x76, 0x30, 0x2f, 0x76, 0x61, 0x75, 0x6c, 0x74, 0x5f,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x27, 0x63,
	0x6f, 0x6d, 0x2e, 0x64, 0x69, 0x67, 0x69, 0x74, 0x61, 0x6c, 0x61, 0x73, 0x73, 0x65, 0x74, 0x2e,
	0x63, 0x61, 0x6e, 0x74, 0x6f, 0x6e, 0x2e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x6f, 0x2e, 0x61, 0x64,
	0x6d, 0x69, 0x6e, 0x2e, 0x76, 0x30, 0x1a, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x64, 0x69, 0x67, 0x69,
	0x74, 0x61, 0x6c, 0x61, 0x73, 0x73, 0x65, 0x74, 0x2f, 0x63, 0x61, 0x6e, 0x74, 0x6f, 0x6e, 0x2f,
	0x63, 0x72, 0x79, 0x70, 0x74, 0x6f, 0x2f, 0x76, 0x30, 0x2f, 0x63, 0x72, 0x79, 0x70, 0x74, 0x6f,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1b, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x22, 0xdd, 0x01, 0x0a, 0x1a, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x65,
	0x43, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x2b, 0x0a, 0x11, 0x75, 0x6e, 0x69, 0x71, 0x75, 0x65, 0x5f, 0x69, 0x64, 0x65,
	0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x75,
	0x6e, 0x69, 0x71, 0x75, 0x65, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x12,
	0x27, 0x0a, 0x0f, 0x63, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x5f, 0x6b,
	0x65, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x63, 0x65, 0x72, 0x74, 0x69, 0x66,
	0x69, 0x63, 0x61, 0x74, 0x65, 0x4b, 0x65, 0x79, 0x12, 0x2d, 0x0a, 0x12, 0x61, 0x64, 0x64, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x5f, 0x73, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x61, 0x64, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c,
	0x53, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x12, 0x3a, 0x0a, 0x19, 0x73, 0x75, 0x62, 0x6a, 0x65,
	0x63, 0x74, 0x5f, 0x61, 0x6c, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x74, 0x69, 0x76, 0x65, 0x5f, 0x6e,
	0x61, 0x6d, 0x65, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x09, 0x52, 0x17, 0x73, 0x75, 0x62, 0x6a,
	0x65, 0x63, 0x74, 0x41, 0x6c, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x74, 0x69, 0x76, 0x65, 0x4e, 0x61,
	0x6d, 0x65, 0x73, 0x22, 0x3a, 0x0a, 0x1b, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x65, 0x43,
	0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x78, 0x35, 0x30, 0x39, 0x5f, 0x63, 0x65, 0x72, 0x74, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x78, 0x35, 0x30, 0x39, 0x43, 0x65, 0x72, 0x74, 0x22,
	0x36, 0x0a, 0x16, 0x4c, 0x69, 0x73, 0x74, 0x43, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61,
	0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x66, 0x69, 0x6c,
	0x74, 0x65, 0x72, 0x55, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x66, 0x69,
	0x6c, 0x74, 0x65, 0x72, 0x55, 0x69, 0x64, 0x22, 0xa3, 0x01, 0x0a, 0x17, 0x4c, 0x69, 0x73, 0x74,
	0x43, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x61, 0x0a, 0x07, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x18, 0x01,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x47, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x64, 0x69, 0x67, 0x69, 0x74,
	0x61, 0x6c, 0x61, 0x73, 0x73, 0x65, 0x74, 0x2e, 0x63, 0x61, 0x6e, 0x74, 0x6f, 0x6e, 0x2e, 0x63,
	0x72, 0x79, 0x70, 0x74, 0x6f, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x76, 0x30, 0x2e, 0x4c,
	0x69, 0x73, 0x74, 0x43, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x07, 0x72,
	0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x1a, 0x25, 0x0a, 0x06, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74,
	0x12, 0x1b, 0x0a, 0x09, 0x78, 0x35, 0x30, 0x39, 0x5f, 0x63, 0x65, 0x72, 0x74, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x78, 0x35, 0x30, 0x39, 0x43, 0x65, 0x72, 0x74, 0x22, 0x37, 0x0a,
	0x18, 0x49, 0x6d, 0x70, 0x6f, 0x72, 0x74, 0x43, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61,
	0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x78, 0x35, 0x30,
	0x39, 0x5f, 0x63, 0x65, 0x72, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x78, 0x35,
	0x30, 0x39, 0x43, 0x65, 0x72, 0x74, 0x22, 0x42, 0x0a, 0x19, 0x49, 0x6d, 0x70, 0x6f, 0x72, 0x74,
	0x43, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x25, 0x0a, 0x0e, 0x63, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61,
	0x74, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x63, 0x65, 0x72,
	0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x49, 0x64, 0x22, 0x4b, 0x0a, 0x16, 0x49, 0x6d,
	0x70, 0x6f, 0x72, 0x74, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x4b, 0x65, 0x79, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x5f, 0x6b,
	0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x09, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63,
	0x4b, 0x65, 0x79, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0x3b, 0x0a, 0x17, 0x49, 0x6d, 0x70, 0x6f, 0x72,
	0x74, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x4b, 0x65, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x66, 0x69, 0x6e, 0x67, 0x65, 0x72, 0x70, 0x72, 0x69, 0x6e,
	0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x66, 0x69, 0x6e, 0x67, 0x65, 0x72, 0x70,
	0x72, 0x69, 0x6e, 0x74, 0x22, 0xb7, 0x01, 0x0a, 0x0f, 0x4c, 0x69, 0x73, 0x74, 0x4b, 0x65, 0x79,
	0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2d, 0x0a, 0x12, 0x66, 0x69, 0x6c, 0x74,
	0x65, 0x72, 0x5f, 0x66, 0x69, 0x6e, 0x67, 0x65, 0x72, 0x70, 0x72, 0x69, 0x6e, 0x74, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x46, 0x69, 0x6e, 0x67,
	0x65, 0x72, 0x70, 0x72, 0x69, 0x6e, 0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x66, 0x69, 0x6c, 0x74, 0x65,
	0x72, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x66, 0x69,
	0x6c, 0x74, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x54, 0x0a, 0x0e, 0x66, 0x69, 0x6c, 0x74,
	0x65, 0x72, 0x5f, 0x70, 0x75, 0x72, 0x70, 0x6f, 0x73, 0x65, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0e,
	0x32, 0x2d, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x64, 0x69, 0x67, 0x69, 0x74, 0x61, 0x6c, 0x61, 0x73,
	0x73, 0x65, 0x74, 0x2e, 0x63, 0x61, 0x6e, 0x74, 0x6f, 0x6e, 0x2e, 0x63, 0x72, 0x79, 0x70, 0x74,
	0x6f, 0x2e, 0x76, 0x30, 0x2e, 0x4b, 0x65, 0x79, 0x50, 0x75, 0x72, 0x70, 0x6f, 0x73, 0x65, 0x52,
	0x0d, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x50, 0x75, 0x72, 0x70, 0x6f, 0x73, 0x65, 0x22, 0xa1,
	0x01, 0x0a, 0x12, 0x50, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x4b, 0x65, 0x79, 0x4d, 0x65, 0x74,
	0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x65, 0x0a, 0x14, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x5f,
	0x6b, 0x65, 0x79, 0x5f, 0x77, 0x69, 0x74, 0x68, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x34, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x64, 0x69, 0x67, 0x69, 0x74, 0x61,
	0x6c, 0x61, 0x73, 0x73, 0x65, 0x74, 0x2e, 0x63, 0x61, 0x6e, 0x74, 0x6f, 0x6e, 0x2e, 0x63, 0x72,
	0x79, 0x70, 0x74, 0x6f, 0x2e, 0x76, 0x30, 0x2e, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x4b, 0x65,
	0x79, 0x57, 0x69, 0x74, 0x68, 0x4e, 0x61, 0x6d, 0x65, 0x52, 0x11, 0x70, 0x75, 0x62, 0x6c, 0x69,
	0x63, 0x4b, 0x65, 0x79, 0x57, 0x69, 0x74, 0x68, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x24, 0x0a, 0x0e,
	0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x5f, 0x6b, 0x65, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x4b, 0x65, 0x79,
	0x49, 0x64, 0x22, 0x85, 0x01, 0x0a, 0x12, 0x4c, 0x69, 0x73, 0x74, 0x4d, 0x79, 0x4b, 0x65, 0x79,
	0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x6f, 0x0a, 0x15, 0x70, 0x72, 0x69,
	0x76, 0x61, 0x74, 0x65, 0x5f, 0x6b, 0x65, 0x79, 0x73, 0x5f, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61,
	0x74, 0x61, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x3b, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x64,
	0x69, 0x67, 0x69, 0x74, 0x61, 0x6c, 0x61, 0x73, 0x73, 0x65, 0x74, 0x2e, 0x63, 0x61, 0x6e, 0x74,
	0x6f, 0x6e, 0x2e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x6f, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e,
	0x76, 0x30, 0x2e, 0x50, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x4b, 0x65, 0x79, 0x4d, 0x65, 0x74,
	0x61, 0x64, 0x61, 0x74, 0x61, 0x52, 0x13, 0x70, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x4b, 0x65,
	0x79, 0x73, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x22, 0x69, 0x0a, 0x10, 0x4c, 0x69,
	0x73, 0x74, 0x4b, 0x65, 0x79, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x55,
	0x0a, 0x0b, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x5f, 0x6b, 0x65, 0x79, 0x73, 0x18, 0x01, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x34, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x64, 0x69, 0x67, 0x69, 0x74, 0x61,
	0x6c, 0x61, 0x73, 0x73, 0x65, 0x74, 0x2e, 0x63, 0x61, 0x6e, 0x74, 0x6f, 0x6e, 0x2e, 0x63, 0x72,
	0x79, 0x70, 0x74, 0x6f, 0x2e, 0x76, 0x30, 0x2e, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x4b, 0x65,
	0x79, 0x57, 0x69, 0x74, 0x68, 0x4e, 0x61, 0x6d, 0x65, 0x52, 0x0a, 0x70, 0x75, 0x62, 0x6c, 0x69,
	0x63, 0x4b, 0x65, 0x79, 0x73, 0x22, 0x83, 0x01, 0x0a, 0x19, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x61,
	0x74, 0x65, 0x53, 0x69, 0x67, 0x6e, 0x69, 0x6e, 0x67, 0x4b, 0x65, 0x79, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x52, 0x0a, 0x0a, 0x6b, 0x65, 0x79, 0x5f, 0x73, 0x63, 0x68, 0x65, 0x6d,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x33, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x64, 0x69,
	0x67, 0x69, 0x74, 0x61, 0x6c, 0x61, 0x73, 0x73, 0x65, 0x74, 0x2e, 0x63, 0x61, 0x6e, 0x74, 0x6f,
	0x6e, 0x2e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x6f, 0x2e, 0x76, 0x30, 0x2e, 0x53, 0x69, 0x67, 0x6e,
	0x69, 0x6e, 0x67, 0x4b, 0x65, 0x79, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x65, 0x52, 0x09, 0x6b, 0x65,
	0x79, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0x70, 0x0a, 0x1a, 0x47,
	0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x65, 0x53, 0x69, 0x67, 0x6e, 0x69, 0x6e, 0x67, 0x4b, 0x65,
	0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x52, 0x0a, 0x0a, 0x70, 0x75, 0x62,
	0x6c, 0x69, 0x63, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x33, 0x2e,
	0x63, 0x6f, 0x6d, 0x2e, 0x64, 0x69, 0x67, 0x69, 0x74, 0x61, 0x6c, 0x61, 0x73, 0x73, 0x65, 0x74,
	0x2e, 0x63, 0x61, 0x6e, 0x74, 0x6f, 0x6e, 0x2e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x6f, 0x2e, 0x76,
	0x30, 0x2e, 0x53, 0x69, 0x67, 0x6e, 0x69, 0x6e, 0x67, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x4b,
	0x65, 0x79, 0x52, 0x09, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x4b, 0x65, 0x79, 0x22, 0x89, 0x01,
	0x0a, 0x1c, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x65, 0x45, 0x6e, 0x63, 0x72, 0x79, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x4b, 0x65, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x55,
	0x0a, 0x0a, 0x6b, 0x65, 0x79, 0x5f, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x36, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x64, 0x69, 0x67, 0x69, 0x74, 0x61, 0x6c,
	0x61, 0x73, 0x73, 0x65, 0x74, 0x2e, 0x63, 0x61, 0x6e, 0x74, 0x6f, 0x6e, 0x2e, 0x63, 0x72, 0x79,
	0x70, 0x74, 0x6f, 0x2e, 0x76, 0x30, 0x2e, 0x45, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x4b, 0x65, 0x79, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x65, 0x52, 0x09, 0x6b, 0x65, 0x79, 0x53,
	0x63, 0x68, 0x65, 0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0x76, 0x0a, 0x1d, 0x47, 0x65, 0x6e,
	0x65, 0x72, 0x61, 0x74, 0x65, 0x45, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x4b,
	0x65, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x55, 0x0a, 0x0a, 0x70, 0x75,
	0x62, 0x6c, 0x69, 0x63, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x36,
	0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x64, 0x69, 0x67, 0x69, 0x74, 0x61, 0x6c, 0x61, 0x73, 0x73, 0x65,
	0x74, 0x2e, 0x63, 0x61, 0x6e, 0x74, 0x6f, 0x6e, 0x2e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x6f, 0x2e,
	0x76, 0x30, 0x2e, 0x45, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x75, 0x62,
	0x6c, 0x69, 0x63, 0x4b, 0x65, 0x79, 0x52, 0x09, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x4b, 0x65,
	0x79, 0x22, 0x50, 0x0a, 0x1c, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x4b, 0x6d, 0x73,
	0x53, 0x69, 0x67, 0x6e, 0x69, 0x6e, 0x67, 0x4b, 0x65, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x1c, 0x0a, 0x0a, 0x6b, 0x6d, 0x73, 0x5f, 0x6b, 0x65, 0x79, 0x5f, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6b, 0x6d, 0x73, 0x4b, 0x65, 0x79, 0x49, 0x64, 0x12,
	0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x22, 0x73, 0x0a, 0x1d, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x4b,
	0x6d, 0x73, 0x53, 0x69, 0x67, 0x6e, 0x69, 0x6e, 0x67, 0x4b, 0x65, 0x79, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x52, 0x0a, 0x0a, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x5f, 0x6b,
	0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x33, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x64,
	0x69, 0x67, 0x69, 0x74, 0x61, 0x6c, 0x61, 0x73, 0x73, 0x65, 0x74, 0x2e, 0x63, 0x61, 0x6e, 0x74,
	0x6f, 0x6e, 0x2e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x6f, 0x2e, 0x76, 0x30, 0x2e, 0x53, 0x69, 0x67,
	0x6e, 0x69, 0x6e, 0x67, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x4b, 0x65, 0x79, 0x52, 0x09, 0x70,
	0x75, 0x62, 0x6c, 0x69, 0x63, 0x4b, 0x65, 0x79, 0x22, 0x53, 0x0a, 0x1f, 0x52, 0x65, 0x67, 0x69,
	0x73, 0x74, 0x65, 0x72, 0x4b, 0x6d, 0x73, 0x45, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x4b, 0x65, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1c, 0x0a, 0x0a, 0x6b,
	0x6d, 0x73, 0x5f, 0x6b, 0x65, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x08, 0x6b, 0x6d, 0x73, 0x4b, 0x65, 0x79, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0x79, 0x0a,
	0x20, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x4b, 0x6d, 0x73, 0x45, 0x6e, 0x63, 0x72,
	0x79, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x4b, 0x65, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x55, 0x0a, 0x0a, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x5f, 0x6b, 0x65, 0x79, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x36, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x64, 0x69, 0x67, 0x69,
	0x74, 0x61, 0x6c, 0x61, 0x73, 0x73, 0x65, 0x74, 0x2e, 0x63, 0x61, 0x6e, 0x74, 0x6f, 0x6e, 0x2e,
	0x63, 0x72, 0x79, 0x70, 0x74, 0x6f, 0x2e, 0x76, 0x30, 0x2e, 0x45, 0x6e, 0x63, 0x72, 0x79, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x4b, 0x65, 0x79, 0x52, 0x09, 0x70,
	0x75, 0x62, 0x6c, 0x69, 0x63, 0x4b, 0x65, 0x79, 0x22, 0x46, 0x0a, 0x17, 0x52, 0x6f, 0x74, 0x61,
	0x74, 0x65, 0x57, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x4b, 0x65, 0x79, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x2b, 0x0a, 0x12, 0x6e, 0x65, 0x77, 0x5f, 0x77, 0x72, 0x61, 0x70, 0x70,
	0x65, 0x72, 0x5f, 0x6b, 0x65, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0f, 0x6e, 0x65, 0x77, 0x57, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x4b, 0x65, 0x79, 0x49, 0x64,
	0x22, 0x18, 0x0a, 0x16, 0x47, 0x65, 0x74, 0x57, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x4b, 0x65,
	0x79, 0x49, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x3f, 0x0a, 0x17, 0x47, 0x65,
	0x74, 0x57, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x4b, 0x65, 0x79, 0x49, 0x64, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x24, 0x0a, 0x0e, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72,
	0x5f, 0x6b, 0x65, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x77,
	0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x4b, 0x65, 0x79, 0x49, 0x64, 0x22, 0x63, 0x0a, 0x14, 0x45,
	0x78, 0x70, 0x6f, 0x72, 0x74, 0x4b, 0x65, 0x79, 0x50, 0x61, 0x69, 0x72, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x20, 0x0a, 0x0b, 0x66, 0x69, 0x6e, 0x67, 0x65, 0x72, 0x70, 0x72, 0x69,
	0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x66, 0x69, 0x6e, 0x67, 0x65, 0x72,
	0x70, 0x72, 0x69, 0x6e, 0x74, 0x12, 0x29, 0x0a, 0x10, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f,
	0x6c, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x0f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e,
	0x22, 0x32, 0x0a, 0x15, 0x45, 0x78, 0x70, 0x6f, 0x72, 0x74, 0x4b, 0x65, 0x79, 0x50, 0x61, 0x69,
	0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x6b, 0x65, 0x79,
	0x5f, 0x70, 0x61, 0x69, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x07, 0x6b, 0x65, 0x79,
	0x50, 0x61, 0x69, 0x72, 0x22, 0x45, 0x0a, 0x14, 0x49, 0x6d, 0x70, 0x6f, 0x72, 0x74, 0x4b, 0x65,
	0x79, 0x50, 0x61, 0x69, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x19, 0x0a, 0x08,
	0x6b, 0x65, 0x79, 0x5f, 0x70, 0x61, 0x69, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x07,
	0x6b, 0x65, 0x79, 0x50, 0x61, 0x69, 0x72, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0x17, 0x0a, 0x15, 0x49,
	0x6d, 0x70, 0x6f, 0x72, 0x74, 0x4b, 0x65, 0x79, 0x50, 0x61, 0x69, 0x72, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0x38, 0x0a, 0x14, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x4b, 0x65,
	0x79, 0x50, 0x61, 0x69, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x20, 0x0a, 0x0b,
	0x66, 0x69, 0x6e, 0x67, 0x65, 0x72, 0x70, 0x72, 0x69, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0b, 0x66, 0x69, 0x6e, 0x67, 0x65, 0x72, 0x70, 0x72, 0x69, 0x6e, 0x74, 0x22, 0x17,
	0x0a, 0x15, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x4b, 0x65, 0x79, 0x50, 0x61, 0x69, 0x72, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x32, 0x8f, 0x0e, 0x0a, 0x0c, 0x56, 0x61, 0x75, 0x6c,
	0x74, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x83, 0x01, 0x0a, 0x0a, 0x4c, 0x69, 0x73,
	0x74, 0x4d, 0x79, 0x4b, 0x65, 0x79, 0x73, 0x12, 0x38, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x64, 0x69,
	0x67, 0x69, 0x74, 0x61, 0x6c, 0x61, 0x73, 0x73, 0x65, 0x74, 0x2e, 0x63, 0x61, 0x6e, 0x74, 0x6f,
	0x6e, 0x2e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x6f, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x76,
	0x30, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x4b, 0x65, 0x79, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x3b, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x64, 0x69, 0x67, 0x69, 0x74, 0x61, 0x6c, 0x61,
	0x73, 0x73, 0x65, 0x74, 0x2e, 0x63, 0x61, 0x6e, 0x74, 0x6f, 0x6e, 0x2e, 0x63, 0x72, 0x79, 0x70,
	0x74, 0x6f, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x76, 0x30, 0x2e, 0x4c, 0x69, 0x73, 0x74,
	0x4d, 0x79, 0x4b, 0x65, 0x79, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x9d,
	0x01, 0x0a, 0x12, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x65, 0x53, 0x69, 0x67, 0x6e, 0x69,
	0x6e, 0x67, 0x4b, 0x65, 0x79, 0x12, 0x42, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x64, 0x69, 0x67, 0x69,
	0x74, 0x61, 0x6c, 0x61, 0x73, 0x73, 0x65, 0x74, 0x2e, 0x63, 0x61, 0x6e, 0x74, 0x6f, 0x6e, 0x2e,
	0x63, 0x72, 0x79, 0x70, 0x74, 0x6f, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x76, 0x30, 0x2e,
	0x47, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x65, 0x53, 0x69, 0x67, 0x6e, 0x69, 0x6e, 0x67, 0x4b,
	0x65, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x43, 0x2e, 0x63, 0x6f, 0x6d, 0x2e,
	0x64, 0x69, 0x67, 0x69, 0x74, 0x61, 0x6c, 0x61, 0x73, 0x73, 0x65, 0x74, 0x2e, 0x63, 0x61, 0x6e,
	0x74, 0x6f, 0x6e, 0x2e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x6f, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e,
	0x2e, 0x76, 0x30, 0x2e, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x65, 0x53, 0x69, 0x67, 0x6e,
	0x69, 0x6e, 0x67, 0x4b, 0x65, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0xa6,
	0x01, 0x0a, 0x15, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x65, 0x45, 0x6e, 0x63, 0x72, 0x79,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x4b, 0x65, 0x79, 0x12, 0x45, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x64,
	0x69, 0x67, 0x69, 0x74, 0x61, 0x6c, 0x61, 0x73, 0x73, 0x65, 0x74, 0x2e, 0x63, 0x61, 0x6e, 0x74,
	0x6f, 0x6e, 0x2e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x6f, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e,
	0x76, 0x30, 0x2e, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x65, 0x45, 0x6e, 0x63, 0x72, 0x79,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x4b, 0x65, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x46, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x64, 0x69, 0x67, 0x69, 0x74, 0x61, 0x6c, 0x61, 0x73, 0x73,
	0x65, 0x74, 0x2e, 0x63, 0x61, 0x6e, 0x74, 0x6f, 0x6e, 0x2e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x6f,
	0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x76, 0x30, 0x2e, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x61,
	0x74, 0x65, 0x45, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x4b, 0x65, 0x79, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0xaf, 0x01, 0x0a, 0x18, 0x52, 0x65, 0x67, 0x69,
	0x73, 0x74, 0x65, 0x72, 0x4b, 0x6d, 0x73, 0x45, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x4b, 0x65, 0x79, 0x12, 0x48, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x64, 0x69, 0x67, 0x69, 0x74,
	0x61, 0x6c, 0x61, 0x73, 0x73, 0x65, 0x74, 0x2e, 0x63, 0x61, 0x6e, 0x74, 0x6f, 0x6e, 0x2e, 0x63,
	0x72, 0x79, 0x70, 0x74, 0x6f, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x76, 0x30, 0x2e, 0x52,
	0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x4b, 0x6d, 0x73, 0x45, 0x6e, 0x63, 0x72, 0x79, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x4b, 0x65, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x49,
	0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x64, 0x69, 0x67, 0x69, 0x74, 0x61, 0x6c, 0x61, 0x73, 0x73, 0x65,
	0x74, 0x2e, 0x63, 0x61, 0x6e, 0x74, 0x6f, 0x6e, 0x2e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x6f, 0x2e,
	0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x76, 0x30, 0x2e, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65,
	0x72, 0x4b, 0x6d, 0x73, 0x45, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x4b, 0x65,
	0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0xa6, 0x01, 0x0a, 0x15, 0x52, 0x65,
	0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x4b, 0x6d, 0x73, 0x53, 0x69, 0x67, 0x6e, 0x69, 0x6e, 0x67,
	0x4b, 0x65, 0x79, 0x12, 0x45, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x64, 0x69, 0x67, 0x69, 0x74, 0x61,
	0x6c, 0x61, 0x73, 0x73, 0x65, 0x74, 0x2e, 0x63, 0x61, 0x6e, 0x74, 0x6f, 0x6e, 0x2e, 0x63, 0x72,
	0x79, 0x70, 0x74, 0x6f, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x76, 0x30, 0x2e, 0x52, 0x65,
	0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x4b, 0x6d, 0x73, 0x53, 0x69, 0x67, 0x6e, 0x69, 0x6e, 0x67,
	0x4b, 0x65, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x46, 0x2e, 0x63, 0x6f, 0x6d,
	0x2e, 0x64, 0x69, 0x67, 0x69, 0x74, 0x61, 0x6c, 0x61, 0x73, 0x73, 0x65, 0x74, 0x2e, 0x63, 0x61,
	0x6e, 0x74, 0x6f, 0x6e, 0x2e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x6f, 0x2e, 0x61, 0x64, 0x6d, 0x69,
	0x6e, 0x2e, 0x76, 0x30, 0x2e, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x4b, 0x6d, 0x73,
	0x53, 0x69, 0x67, 0x6e, 0x69, 0x6e, 0x67, 0x4b, 0x65, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x94, 0x01, 0x0a, 0x0f, 0x49, 0x6d, 0x70, 0x6f, 0x72, 0x74, 0x50, 0x75, 0x62,
	0x6c, 0x69, 0x63, 0x4b, 0x65, 0x79, 0x12, 0x3f, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x64, 0x69, 0x67,
	0x69, 0x74, 0x61, 0x6c, 0x61, 0x73, 0x73, 0x65, 0x74, 0x2e, 0x63, 0x61, 0x6e, 0x74, 0x6f, 0x6e,
	0x2e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x6f, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x76, 0x30,
	0x2e, 0x49, 0x6d, 0x70, 0x6f, 0x72, 0x74, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x4b, 0x65, 0x79,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x40, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x64, 0x69,
	0x67, 0x69, 0x74, 0x61, 0x6c, 0x61, 0x73, 0x73, 0x65, 0x74, 0x2e, 0x63, 0x61, 0x6e, 0x74, 0x6f,
	0x6e, 0x2e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x6f, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x76,
	0x30, 0x2e, 0x49, 0x6d, 0x70, 0x6f, 0x72, 0x74, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x4b, 0x65,
	0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x85, 0x01, 0x0a, 0x0e, 0x4c, 0x69,
	0x73, 0x74, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x4b, 0x65, 0x79, 0x73, 0x12, 0x38, 0x2e, 0x63,
	0x6f, 0x6d, 0x2e, 0x64, 0x69, 0x67, 0x69, 0x74, 0x61, 0x6c, 0x61, 0x73, 0x73, 0x65, 0x74, 0x2e,
	0x63, 0x61, 0x6e, 0x74, 0x6f, 0x6e, 0x2e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x6f, 0x2e, 0x61, 0x64,
	0x6d, 0x69, 0x6e, 0x2e, 0x76, 0x30, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x4b, 0x65, 0x79, 0x73, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x39, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x64, 0x69, 0x67,
	0x69, 0x74, 0x61, 0x6c, 0x61, 0x73, 0x73, 0x65, 0x74, 0x2e, 0x63, 0x61, 0x6e, 0x74, 0x6f, 0x6e,
	0x2e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x6f, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x76, 0x30,
	0x2e, 0x4c, 0x69, 0x73, 0x74, 0x4b, 0x65, 0x79, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x6c, 0x0a, 0x10, 0x52, 0x6f, 0x74, 0x61, 0x74, 0x65, 0x57, 0x72, 0x61, 0x70, 0x70,
	0x65, 0x72, 0x4b, 0x65, 0x79, 0x12, 0x40, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x64, 0x69, 0x67, 0x69,
	0x74, 0x61, 0x6c, 0x61, 0x73, 0x73, 0x65, 0x74, 0x2e, 0x63, 0x61, 0x6e, 0x74, 0x6f, 0x6e, 0x2e,
	0x63, 0x72, 0x79, 0x70, 0x74, 0x6f, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x76, 0x30, 0x2e,
	0x52, 0x6f, 0x74, 0x61, 0x74, 0x65, 0x57, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x4b, 0x65, 0x79,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x12,
	0x94, 0x01, 0x0a, 0x0f, 0x47, 0x65, 0x74, 0x57, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x4b, 0x65,
	0x79, 0x49, 0x64, 0x12, 0x3f, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x64, 0x69, 0x67, 0x69, 0x74, 0x61,
	0x6c, 0x61, 0x73, 0x73, 0x65, 0x74, 0x2e, 0x63, 0x61, 0x6e, 0x74, 0x6f, 0x6e, 0x2e, 0x63, 0x72,
	0x79, 0x70, 0x74, 0x6f, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x76, 0x30, 0x2e, 0x47, 0x65,
	0x74, 0x57, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x4b, 0x65, 0x79, 0x49, 0x64, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x40, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x64, 0x69, 0x67, 0x69, 0x74,
	0x61, 0x6c, 0x61, 0x73, 0x73, 0x65, 0x74, 0x2e, 0x63, 0x61, 0x6e, 0x74, 0x6f, 0x6e, 0x2e, 0x63,
	0x72, 0x79, 0x70, 0x74, 0x6f, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x76, 0x30, 0x2e, 0x47,
	0x65, 0x74, 0x57, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x4b, 0x65, 0x79, 0x49, 0x64, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x8e, 0x01, 0x0a, 0x0d, 0x45, 0x78, 0x70, 0x6f, 0x72,
	0x74, 0x4b, 0x65, 0x79, 0x50, 0x61, 0x69, 0x72, 0x12, 0x3d, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x64,
	0x69, 0x67, 0x69, 0x74, 0x61, 0x6c, 0x61, 0x73, 0x73, 0x65, 0x74, 0x2e, 0x63, 0x61, 0x6e, 0x74,
	0x6f, 0x6e, 0x2e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x6f, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e,
	0x76, 0x30, 0x2e, 0x45, 0x78, 0x70, 0x6f, 0x72, 0x74, 0x4b, 0x65, 0x79, 0x50, 0x61, 0x69, 0x72,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x3e, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x64, 0x69,
	0x67, 0x69, 0x74, 0x61, 0x6c, 0x61, 0x73, 0x73, 0x65, 0x74, 0x2e, 0x63, 0x61, 0x6e, 0x74, 0x6f,
	0x6e, 0x2e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x6f, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x76,
	0x30, 0x2e, 0x45, 0x78, 0x70, 0x6f, 0x72, 0x74, 0x4b, 0x65, 0x79, 0x50, 0x61, 0x69, 0x72, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x8e, 0x01, 0x0a, 0x0d, 0x49, 0x6d, 0x70, 0x6f,
	0x72, 0x74, 0x4b, 0x65, 0x79, 0x50, 0x61, 0x69, 0x72, 0x12, 0x3d, 0x2e, 0x63, 0x6f, 0x6d, 0x2e,
	0x64, 0x69, 0x67, 0x69, 0x74, 0x61, 0x6c, 0x61, 0x73, 0x73, 0x65, 0x74, 0x2e, 0x63, 0x61, 0x6e,
	0x74, 0x6f, 0x6e, 0x2e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x6f, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e,
	0x2e, 0x76, 0x30, 0x2e, 0x49, 0x6d, 0x70, 0x6f, 0x72, 0x74, 0x4b, 0x65, 0x79, 0x50, 0x61, 0x69,
	0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x3e, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x64,
	0x69, 0x67, 0x69, 0x74, 0x61, 0x6c, 0x61, 0x73, 0x73, 0x65, 0x74, 0x2e, 0x63, 0x61, 0x6e, 0x74,
	0x6f, 0x6e, 0x2e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x6f, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e,
	0x76, 0x30, 0x2e, 0x49, 0x6d, 0x70, 0x6f, 0x72, 0x74, 0x4b, 0x65, 0x79, 0x50, 0x61, 0x69, 0x72,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x8e, 0x01, 0x0a, 0x0d, 0x44, 0x65, 0x6c,
	0x65, 0x74, 0x65, 0x4b, 0x65, 0x79, 0x50, 0x61, 0x69, 0x72, 0x12, 0x3d, 0x2e, 0x63, 0x6f, 0x6d,
	0x2e, 0x64, 0x69, 0x67, 0x69, 0x74, 0x61, 0x6c, 0x61, 0x73, 0x73, 0x65, 0x74, 0x2e, 0x63, 0x61,
	0x6e, 0x74, 0x6f, 0x6e, 0x2e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x6f, 0x2e, 0x61, 0x64, 0x6d, 0x69,
	0x6e, 0x2e, 0x76, 0x30, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x4b, 0x65, 0x79, 0x50, 0x61,
	0x69, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x3e, 0x2e, 0x63, 0x6f, 0x6d, 0x2e,
	0x64, 0x69, 0x67, 0x69, 0x74, 0x61, 0x6c, 0x61, 0x73, 0x73, 0x65, 0x74, 0x2e, 0x63, 0x61, 0x6e,
	0x74, 0x6f, 0x6e, 0x2e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x6f, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e,
	0x2e, 0x76, 0x30, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x4b, 0x65, 0x79, 0x50, 0x61, 0x69,
	0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x42, 0x58, 0x5a, 0x56, 0x67, 0x69, 0x74,
	0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x64, 0x69, 0x67, 0x69, 0x74, 0x61, 0x6c, 0x2d,
	0x61, 0x73, 0x73, 0x65, 0x74, 0x2f, 0x64, 0x61, 0x7a, 0x6c, 0x2d, 0x63, 0x6c, 0x69, 0x65, 0x6e,
	0x74, 0x2f, 0x76, 0x38, 0x2f, 0x67, 0x6f, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x63, 0x6f, 0x6d, 0x2f,
	0x64, 0x69, 0x67, 0x69, 0x74, 0x61, 0x6c, 0x61, 0x73, 0x73, 0x65, 0x74, 0x2f, 0x63, 0x61, 0x6e,
	0x74, 0x6f, 0x6e, 0x2f, 0x63, 0x72, 0x79, 0x70, 0x74, 0x6f, 0x2f, 0x61, 0x64, 0x6d, 0x69, 0x6e,
	0x2f, 0x76, 0x30, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_com_digitalasset_canton_crypto_admin_v0_vault_service_proto_rawDescOnce sync.Once
	file_com_digitalasset_canton_crypto_admin_v0_vault_service_proto_rawDescData = file_com_digitalasset_canton_crypto_admin_v0_vault_service_proto_rawDesc
)

func file_com_digitalasset_canton_crypto_admin_v0_vault_service_proto_rawDescGZIP() []byte {
	file_com_digitalasset_canton_crypto_admin_v0_vault_service_proto_rawDescOnce.Do(func() {
		file_com_digitalasset_canton_crypto_admin_v0_vault_service_proto_rawDescData = protoimpl.X.CompressGZIP(file_com_digitalasset_canton_crypto_admin_v0_vault_service_proto_rawDescData)
	})
	return file_com_digitalasset_canton_crypto_admin_v0_vault_service_proto_rawDescData
}

var file_com_digitalasset_canton_crypto_admin_v0_vault_service_proto_msgTypes = make([]protoimpl.MessageInfo, 30)
var file_com_digitalasset_canton_crypto_admin_v0_vault_service_proto_goTypes = []any{
	(*GenerateCertificateRequest)(nil),       // 0: com.digitalasset.canton.crypto.admin.v0.GenerateCertificateRequest
	(*GenerateCertificateResponse)(nil),      // 1: com.digitalasset.canton.crypto.admin.v0.GenerateCertificateResponse
	(*ListCertificateRequest)(nil),           // 2: com.digitalasset.canton.crypto.admin.v0.ListCertificateRequest
	(*ListCertificateResponse)(nil),          // 3: com.digitalasset.canton.crypto.admin.v0.ListCertificateResponse
	(*ImportCertificateRequest)(nil),         // 4: com.digitalasset.canton.crypto.admin.v0.ImportCertificateRequest
	(*ImportCertificateResponse)(nil),        // 5: com.digitalasset.canton.crypto.admin.v0.ImportCertificateResponse
	(*ImportPublicKeyRequest)(nil),           // 6: com.digitalasset.canton.crypto.admin.v0.ImportPublicKeyRequest
	(*ImportPublicKeyResponse)(nil),          // 7: com.digitalasset.canton.crypto.admin.v0.ImportPublicKeyResponse
	(*ListKeysRequest)(nil),                  // 8: com.digitalasset.canton.crypto.admin.v0.ListKeysRequest
	(*PrivateKeyMetadata)(nil),               // 9: com.digitalasset.canton.crypto.admin.v0.PrivateKeyMetadata
	(*ListMyKeysResponse)(nil),               // 10: com.digitalasset.canton.crypto.admin.v0.ListMyKeysResponse
	(*ListKeysResponse)(nil),                 // 11: com.digitalasset.canton.crypto.admin.v0.ListKeysResponse
	(*GenerateSigningKeyRequest)(nil),        // 12: com.digitalasset.canton.crypto.admin.v0.GenerateSigningKeyRequest
	(*GenerateSigningKeyResponse)(nil),       // 13: com.digitalasset.canton.crypto.admin.v0.GenerateSigningKeyResponse
	(*GenerateEncryptionKeyRequest)(nil),     // 14: com.digitalasset.canton.crypto.admin.v0.GenerateEncryptionKeyRequest
	(*GenerateEncryptionKeyResponse)(nil),    // 15: com.digitalasset.canton.crypto.admin.v0.GenerateEncryptionKeyResponse
	(*RegisterKmsSigningKeyRequest)(nil),     // 16: com.digitalasset.canton.crypto.admin.v0.RegisterKmsSigningKeyRequest
	(*RegisterKmsSigningKeyResponse)(nil),    // 17: com.digitalasset.canton.crypto.admin.v0.RegisterKmsSigningKeyResponse
	(*RegisterKmsEncryptionKeyRequest)(nil),  // 18: com.digitalasset.canton.crypto.admin.v0.RegisterKmsEncryptionKeyRequest
	(*RegisterKmsEncryptionKeyResponse)(nil), // 19: com.digitalasset.canton.crypto.admin.v0.RegisterKmsEncryptionKeyResponse
	(*RotateWrapperKeyRequest)(nil),          // 20: com.digitalasset.canton.crypto.admin.v0.RotateWrapperKeyRequest
	(*GetWrapperKeyIdRequest)(nil),           // 21: com.digitalasset.canton.crypto.admin.v0.GetWrapperKeyIdRequest
	(*GetWrapperKeyIdResponse)(nil),          // 22: com.digitalasset.canton.crypto.admin.v0.GetWrapperKeyIdResponse
	(*ExportKeyPairRequest)(nil),             // 23: com.digitalasset.canton.crypto.admin.v0.ExportKeyPairRequest
	(*ExportKeyPairResponse)(nil),            // 24: com.digitalasset.canton.crypto.admin.v0.ExportKeyPairResponse
	(*ImportKeyPairRequest)(nil),             // 25: com.digitalasset.canton.crypto.admin.v0.ImportKeyPairRequest
	(*ImportKeyPairResponse)(nil),            // 26: com.digitalasset.canton.crypto.admin.v0.ImportKeyPairResponse
	(*DeleteKeyPairRequest)(nil),             // 27: com.digitalasset.canton.crypto.admin.v0.DeleteKeyPairRequest
	(*DeleteKeyPairResponse)(nil),            // 28: com.digitalasset.canton.crypto.admin.v0.DeleteKeyPairResponse
	(*ListCertificateResponse_Result)(nil),   // 29: com.digitalasset.canton.crypto.admin.v0.ListCertificateResponse.Result
	(v0.KeyPurpose)(0),                       // 30: com.digitalasset.canton.crypto.v0.KeyPurpose
	(*v0.PublicKeyWithName)(nil),             // 31: com.digitalasset.canton.crypto.v0.PublicKeyWithName
	(v0.SigningKeyScheme)(0),                 // 32: com.digitalasset.canton.crypto.v0.SigningKeyScheme
	(*v0.SigningPublicKey)(nil),              // 33: com.digitalasset.canton.crypto.v0.SigningPublicKey
	(v0.EncryptionKeyScheme)(0),              // 34: com.digitalasset.canton.crypto.v0.EncryptionKeyScheme
	(*v0.EncryptionPublicKey)(nil),           // 35: com.digitalasset.canton.crypto.v0.EncryptionPublicKey
	(*emptypb.Empty)(nil),                    // 36: google.protobuf.Empty
}
var file_com_digitalasset_canton_crypto_admin_v0_vault_service_proto_depIdxs = []int32{
	29, // 0: com.digitalasset.canton.crypto.admin.v0.ListCertificateResponse.results:type_name -> com.digitalasset.canton.crypto.admin.v0.ListCertificateResponse.Result
	30, // 1: com.digitalasset.canton.crypto.admin.v0.ListKeysRequest.filter_purpose:type_name -> com.digitalasset.canton.crypto.v0.KeyPurpose
	31, // 2: com.digitalasset.canton.crypto.admin.v0.PrivateKeyMetadata.public_key_with_name:type_name -> com.digitalasset.canton.crypto.v0.PublicKeyWithName
	9,  // 3: com.digitalasset.canton.crypto.admin.v0.ListMyKeysResponse.private_keys_metadata:type_name -> com.digitalasset.canton.crypto.admin.v0.PrivateKeyMetadata
	31, // 4: com.digitalasset.canton.crypto.admin.v0.ListKeysResponse.public_keys:type_name -> com.digitalasset.canton.crypto.v0.PublicKeyWithName
	32, // 5: com.digitalasset.canton.crypto.admin.v0.GenerateSigningKeyRequest.key_scheme:type_name -> com.digitalasset.canton.crypto.v0.SigningKeyScheme
	33, // 6: com.digitalasset.canton.crypto.admin.v0.GenerateSigningKeyResponse.public_key:type_name -> com.digitalasset.canton.crypto.v0.SigningPublicKey
	34, // 7: com.digitalasset.canton.crypto.admin.v0.GenerateEncryptionKeyRequest.key_scheme:type_name -> com.digitalasset.canton.crypto.v0.EncryptionKeyScheme
	35, // 8: com.digitalasset.canton.crypto.admin.v0.GenerateEncryptionKeyResponse.public_key:type_name -> com.digitalasset.canton.crypto.v0.EncryptionPublicKey
	33, // 9: com.digitalasset.canton.crypto.admin.v0.RegisterKmsSigningKeyResponse.public_key:type_name -> com.digitalasset.canton.crypto.v0.SigningPublicKey
	35, // 10: com.digitalasset.canton.crypto.admin.v0.RegisterKmsEncryptionKeyResponse.public_key:type_name -> com.digitalasset.canton.crypto.v0.EncryptionPublicKey
	8,  // 11: com.digitalasset.canton.crypto.admin.v0.VaultService.ListMyKeys:input_type -> com.digitalasset.canton.crypto.admin.v0.ListKeysRequest
	12, // 12: com.digitalasset.canton.crypto.admin.v0.VaultService.GenerateSigningKey:input_type -> com.digitalasset.canton.crypto.admin.v0.GenerateSigningKeyRequest
	14, // 13: com.digitalasset.canton.crypto.admin.v0.VaultService.GenerateEncryptionKey:input_type -> com.digitalasset.canton.crypto.admin.v0.GenerateEncryptionKeyRequest
	18, // 14: com.digitalasset.canton.crypto.admin.v0.VaultService.RegisterKmsEncryptionKey:input_type -> com.digitalasset.canton.crypto.admin.v0.RegisterKmsEncryptionKeyRequest
	16, // 15: com.digitalasset.canton.crypto.admin.v0.VaultService.RegisterKmsSigningKey:input_type -> com.digitalasset.canton.crypto.admin.v0.RegisterKmsSigningKeyRequest
	6,  // 16: com.digitalasset.canton.crypto.admin.v0.VaultService.ImportPublicKey:input_type -> com.digitalasset.canton.crypto.admin.v0.ImportPublicKeyRequest
	8,  // 17: com.digitalasset.canton.crypto.admin.v0.VaultService.ListPublicKeys:input_type -> com.digitalasset.canton.crypto.admin.v0.ListKeysRequest
	20, // 18: com.digitalasset.canton.crypto.admin.v0.VaultService.RotateWrapperKey:input_type -> com.digitalasset.canton.crypto.admin.v0.RotateWrapperKeyRequest
	21, // 19: com.digitalasset.canton.crypto.admin.v0.VaultService.GetWrapperKeyId:input_type -> com.digitalasset.canton.crypto.admin.v0.GetWrapperKeyIdRequest
	23, // 20: com.digitalasset.canton.crypto.admin.v0.VaultService.ExportKeyPair:input_type -> com.digitalasset.canton.crypto.admin.v0.ExportKeyPairRequest
	25, // 21: com.digitalasset.canton.crypto.admin.v0.VaultService.ImportKeyPair:input_type -> com.digitalasset.canton.crypto.admin.v0.ImportKeyPairRequest
	27, // 22: com.digitalasset.canton.crypto.admin.v0.VaultService.DeleteKeyPair:input_type -> com.digitalasset.canton.crypto.admin.v0.DeleteKeyPairRequest
	10, // 23: com.digitalasset.canton.crypto.admin.v0.VaultService.ListMyKeys:output_type -> com.digitalasset.canton.crypto.admin.v0.ListMyKeysResponse
	13, // 24: com.digitalasset.canton.crypto.admin.v0.VaultService.GenerateSigningKey:output_type -> com.digitalasset.canton.crypto.admin.v0.GenerateSigningKeyResponse
	15, // 25: com.digitalasset.canton.crypto.admin.v0.VaultService.GenerateEncryptionKey:output_type -> com.digitalasset.canton.crypto.admin.v0.GenerateEncryptionKeyResponse
	19, // 26: com.digitalasset.canton.crypto.admin.v0.VaultService.RegisterKmsEncryptionKey:output_type -> com.digitalasset.canton.crypto.admin.v0.RegisterKmsEncryptionKeyResponse
	17, // 27: com.digitalasset.canton.crypto.admin.v0.VaultService.RegisterKmsSigningKey:output_type -> com.digitalasset.canton.crypto.admin.v0.RegisterKmsSigningKeyResponse
	7,  // 28: com.digitalasset.canton.crypto.admin.v0.VaultService.ImportPublicKey:output_type -> com.digitalasset.canton.crypto.admin.v0.ImportPublicKeyResponse
	11, // 29: com.digitalasset.canton.crypto.admin.v0.VaultService.ListPublicKeys:output_type -> com.digitalasset.canton.crypto.admin.v0.ListKeysResponse
	36, // 30: com.digitalasset.canton.crypto.admin.v0.VaultService.RotateWrapperKey:output_type -> google.protobuf.Empty
	22, // 31: com.digitalasset.canton.crypto.admin.v0.VaultService.GetWrapperKeyId:output_type -> com.digitalasset.canton.crypto.admin.v0.GetWrapperKeyIdResponse
	24, // 32: com.digitalasset.canton.crypto.admin.v0.VaultService.ExportKeyPair:output_type -> com.digitalasset.canton.crypto.admin.v0.ExportKeyPairResponse
	26, // 33: com.digitalasset.canton.crypto.admin.v0.VaultService.ImportKeyPair:output_type -> com.digitalasset.canton.crypto.admin.v0.ImportKeyPairResponse
	28, // 34: com.digitalasset.canton.crypto.admin.v0.VaultService.DeleteKeyPair:output_type -> com.digitalasset.canton.crypto.admin.v0.DeleteKeyPairResponse
	23, // [23:35] is the sub-list for method output_type
	11, // [11:23] is the sub-list for method input_type
	11, // [11:11] is the sub-list for extension type_name
	11, // [11:11] is the sub-list for extension extendee
	0,  // [0:11] is the sub-list for field type_name
}

func init() { file_com_digitalasset_canton_crypto_admin_v0_vault_service_proto_init() }
func file_com_digitalasset_canton_crypto_admin_v0_vault_service_proto_init() {
	if File_com_digitalasset_canton_crypto_admin_v0_vault_service_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_com_digitalasset_canton_crypto_admin_v0_vault_service_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   30,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_com_digitalasset_canton_crypto_admin_v0_vault_service_proto_goTypes,
		DependencyIndexes: file_com_digitalasset_canton_crypto_admin_v0_vault_service_proto_depIdxs,
		MessageInfos:      file_com_digitalasset_canton_crypto_admin_v0_vault_service_proto_msgTypes,
	}.Build()
	File_com_digitalasset_canton_crypto_admin_v0_vault_service_proto = out.File
	file_com_digitalasset_canton_crypto_admin_v0_vault_service_proto_rawDesc = nil
	file_com_digitalasset_canton_crypto_admin_v0_vault_service_proto_goTypes = nil
	file_com_digitalasset_canton_crypto_admin_v0_vault_service_proto_depIdxs = nil
}
