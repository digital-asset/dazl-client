// Copyright (c) 2017-2025 Digital Asset (Switzerland) GmbH and/or its affiliates. All rights reserved.
// SPDX-License-Identifier: Apache-2.0
// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.35.2
// 	protoc        v5.27.2
// source: com/digitalasset/canton/domain/api/v0/sequencer_connect_service.proto

package v0

import (
	v0 "github.com/digital-asset/dazl-client/v8/go/api/com/digitalasset/canton/protocol/v0"
	v1 "github.com/digital-asset/dazl-client/v8/go/api/com/digitalasset/canton/protocol/v1"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type SequencerConnect struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *SequencerConnect) Reset() {
	*x = SequencerConnect{}
	mi := &file_com_digitalasset_canton_domain_api_v0_sequencer_connect_service_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SequencerConnect) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SequencerConnect) ProtoMessage() {}

func (x *SequencerConnect) ProtoReflect() protoreflect.Message {
	mi := &file_com_digitalasset_canton_domain_api_v0_sequencer_connect_service_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SequencerConnect.ProtoReflect.Descriptor instead.
func (*SequencerConnect) Descriptor() ([]byte, []int) {
	return file_com_digitalasset_canton_domain_api_v0_sequencer_connect_service_proto_rawDescGZIP(), []int{0}
}

type SequencerConnect_GetDomainId struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *SequencerConnect_GetDomainId) Reset() {
	*x = SequencerConnect_GetDomainId{}
	mi := &file_com_digitalasset_canton_domain_api_v0_sequencer_connect_service_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SequencerConnect_GetDomainId) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SequencerConnect_GetDomainId) ProtoMessage() {}

func (x *SequencerConnect_GetDomainId) ProtoReflect() protoreflect.Message {
	mi := &file_com_digitalasset_canton_domain_api_v0_sequencer_connect_service_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SequencerConnect_GetDomainId.ProtoReflect.Descriptor instead.
func (*SequencerConnect_GetDomainId) Descriptor() ([]byte, []int) {
	return file_com_digitalasset_canton_domain_api_v0_sequencer_connect_service_proto_rawDescGZIP(), []int{0, 0}
}

type SequencerConnect_GetDomainParameters struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *SequencerConnect_GetDomainParameters) Reset() {
	*x = SequencerConnect_GetDomainParameters{}
	mi := &file_com_digitalasset_canton_domain_api_v0_sequencer_connect_service_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SequencerConnect_GetDomainParameters) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SequencerConnect_GetDomainParameters) ProtoMessage() {}

func (x *SequencerConnect_GetDomainParameters) ProtoReflect() protoreflect.Message {
	mi := &file_com_digitalasset_canton_domain_api_v0_sequencer_connect_service_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SequencerConnect_GetDomainParameters.ProtoReflect.Descriptor instead.
func (*SequencerConnect_GetDomainParameters) Descriptor() ([]byte, []int) {
	return file_com_digitalasset_canton_domain_api_v0_sequencer_connect_service_proto_rawDescGZIP(), []int{0, 1}
}

type SequencerConnect_VerifyActive struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *SequencerConnect_VerifyActive) Reset() {
	*x = SequencerConnect_VerifyActive{}
	mi := &file_com_digitalasset_canton_domain_api_v0_sequencer_connect_service_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SequencerConnect_VerifyActive) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SequencerConnect_VerifyActive) ProtoMessage() {}

func (x *SequencerConnect_VerifyActive) ProtoReflect() protoreflect.Message {
	mi := &file_com_digitalasset_canton_domain_api_v0_sequencer_connect_service_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SequencerConnect_VerifyActive.ProtoReflect.Descriptor instead.
func (*SequencerConnect_VerifyActive) Descriptor() ([]byte, []int) {
	return file_com_digitalasset_canton_domain_api_v0_sequencer_connect_service_proto_rawDescGZIP(), []int{0, 2}
}

type SequencerConnect_GetDomainId_Request struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *SequencerConnect_GetDomainId_Request) Reset() {
	*x = SequencerConnect_GetDomainId_Request{}
	mi := &file_com_digitalasset_canton_domain_api_v0_sequencer_connect_service_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SequencerConnect_GetDomainId_Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SequencerConnect_GetDomainId_Request) ProtoMessage() {}

func (x *SequencerConnect_GetDomainId_Request) ProtoReflect() protoreflect.Message {
	mi := &file_com_digitalasset_canton_domain_api_v0_sequencer_connect_service_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SequencerConnect_GetDomainId_Request.ProtoReflect.Descriptor instead.
func (*SequencerConnect_GetDomainId_Request) Descriptor() ([]byte, []int) {
	return file_com_digitalasset_canton_domain_api_v0_sequencer_connect_service_proto_rawDescGZIP(), []int{0, 0, 0}
}

type SequencerConnect_GetDomainId_Response struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DomainId    string `protobuf:"bytes,1,opt,name=domain_id,json=domainId,proto3" json:"domain_id,omitempty"`
	SequencerId string `protobuf:"bytes,2,opt,name=sequencer_id,json=sequencerId,proto3" json:"sequencer_id,omitempty"`
}

func (x *SequencerConnect_GetDomainId_Response) Reset() {
	*x = SequencerConnect_GetDomainId_Response{}
	mi := &file_com_digitalasset_canton_domain_api_v0_sequencer_connect_service_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SequencerConnect_GetDomainId_Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SequencerConnect_GetDomainId_Response) ProtoMessage() {}

func (x *SequencerConnect_GetDomainId_Response) ProtoReflect() protoreflect.Message {
	mi := &file_com_digitalasset_canton_domain_api_v0_sequencer_connect_service_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SequencerConnect_GetDomainId_Response.ProtoReflect.Descriptor instead.
func (*SequencerConnect_GetDomainId_Response) Descriptor() ([]byte, []int) {
	return file_com_digitalasset_canton_domain_api_v0_sequencer_connect_service_proto_rawDescGZIP(), []int{0, 0, 1}
}

func (x *SequencerConnect_GetDomainId_Response) GetDomainId() string {
	if x != nil {
		return x.DomainId
	}
	return ""
}

func (x *SequencerConnect_GetDomainId_Response) GetSequencerId() string {
	if x != nil {
		return x.SequencerId
	}
	return ""
}

type SequencerConnect_GetDomainParameters_Request struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *SequencerConnect_GetDomainParameters_Request) Reset() {
	*x = SequencerConnect_GetDomainParameters_Request{}
	mi := &file_com_digitalasset_canton_domain_api_v0_sequencer_connect_service_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SequencerConnect_GetDomainParameters_Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SequencerConnect_GetDomainParameters_Request) ProtoMessage() {}

func (x *SequencerConnect_GetDomainParameters_Request) ProtoReflect() protoreflect.Message {
	mi := &file_com_digitalasset_canton_domain_api_v0_sequencer_connect_service_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SequencerConnect_GetDomainParameters_Request.ProtoReflect.Descriptor instead.
func (*SequencerConnect_GetDomainParameters_Request) Descriptor() ([]byte, []int) {
	return file_com_digitalasset_canton_domain_api_v0_sequencer_connect_service_proto_rawDescGZIP(), []int{0, 1, 0}
}

type SequencerConnect_GetDomainParameters_Response struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Parameters:
	//
	//	*SequencerConnect_GetDomainParameters_Response_ParametersV0
	//	*SequencerConnect_GetDomainParameters_Response_ParametersV1
	Parameters isSequencerConnect_GetDomainParameters_Response_Parameters `protobuf_oneof:"parameters"`
}

func (x *SequencerConnect_GetDomainParameters_Response) Reset() {
	*x = SequencerConnect_GetDomainParameters_Response{}
	mi := &file_com_digitalasset_canton_domain_api_v0_sequencer_connect_service_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SequencerConnect_GetDomainParameters_Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SequencerConnect_GetDomainParameters_Response) ProtoMessage() {}

func (x *SequencerConnect_GetDomainParameters_Response) ProtoReflect() protoreflect.Message {
	mi := &file_com_digitalasset_canton_domain_api_v0_sequencer_connect_service_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SequencerConnect_GetDomainParameters_Response.ProtoReflect.Descriptor instead.
func (*SequencerConnect_GetDomainParameters_Response) Descriptor() ([]byte, []int) {
	return file_com_digitalasset_canton_domain_api_v0_sequencer_connect_service_proto_rawDescGZIP(), []int{0, 1, 1}
}

func (m *SequencerConnect_GetDomainParameters_Response) GetParameters() isSequencerConnect_GetDomainParameters_Response_Parameters {
	if m != nil {
		return m.Parameters
	}
	return nil
}

func (x *SequencerConnect_GetDomainParameters_Response) GetParametersV0() *v0.StaticDomainParameters {
	if x, ok := x.GetParameters().(*SequencerConnect_GetDomainParameters_Response_ParametersV0); ok {
		return x.ParametersV0
	}
	return nil
}

func (x *SequencerConnect_GetDomainParameters_Response) GetParametersV1() *v1.StaticDomainParameters {
	if x, ok := x.GetParameters().(*SequencerConnect_GetDomainParameters_Response_ParametersV1); ok {
		return x.ParametersV1
	}
	return nil
}

type isSequencerConnect_GetDomainParameters_Response_Parameters interface {
	isSequencerConnect_GetDomainParameters_Response_Parameters()
}

type SequencerConnect_GetDomainParameters_Response_ParametersV0 struct {
	ParametersV0 *v0.StaticDomainParameters `protobuf:"bytes,1,opt,name=parameters_v0,json=parametersV0,proto3,oneof"`
}

type SequencerConnect_GetDomainParameters_Response_ParametersV1 struct {
	ParametersV1 *v1.StaticDomainParameters `protobuf:"bytes,2,opt,name=parameters_v1,json=parametersV1,proto3,oneof"`
}

func (*SequencerConnect_GetDomainParameters_Response_ParametersV0) isSequencerConnect_GetDomainParameters_Response_Parameters() {
}

func (*SequencerConnect_GetDomainParameters_Response_ParametersV1) isSequencerConnect_GetDomainParameters_Response_Parameters() {
}

type SequencerConnect_VerifyActive_Request struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *SequencerConnect_VerifyActive_Request) Reset() {
	*x = SequencerConnect_VerifyActive_Request{}
	mi := &file_com_digitalasset_canton_domain_api_v0_sequencer_connect_service_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SequencerConnect_VerifyActive_Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SequencerConnect_VerifyActive_Request) ProtoMessage() {}

func (x *SequencerConnect_VerifyActive_Request) ProtoReflect() protoreflect.Message {
	mi := &file_com_digitalasset_canton_domain_api_v0_sequencer_connect_service_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SequencerConnect_VerifyActive_Request.ProtoReflect.Descriptor instead.
func (*SequencerConnect_VerifyActive_Request) Descriptor() ([]byte, []int) {
	return file_com_digitalasset_canton_domain_api_v0_sequencer_connect_service_proto_rawDescGZIP(), []int{0, 2, 0}
}

type SequencerConnect_VerifyActive_Response struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Value:
	//
	//	*SequencerConnect_VerifyActive_Response_Success
	//	*SequencerConnect_VerifyActive_Response_Failure
	Value isSequencerConnect_VerifyActive_Response_Value `protobuf_oneof:"value"`
}

func (x *SequencerConnect_VerifyActive_Response) Reset() {
	*x = SequencerConnect_VerifyActive_Response{}
	mi := &file_com_digitalasset_canton_domain_api_v0_sequencer_connect_service_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SequencerConnect_VerifyActive_Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SequencerConnect_VerifyActive_Response) ProtoMessage() {}

func (x *SequencerConnect_VerifyActive_Response) ProtoReflect() protoreflect.Message {
	mi := &file_com_digitalasset_canton_domain_api_v0_sequencer_connect_service_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SequencerConnect_VerifyActive_Response.ProtoReflect.Descriptor instead.
func (*SequencerConnect_VerifyActive_Response) Descriptor() ([]byte, []int) {
	return file_com_digitalasset_canton_domain_api_v0_sequencer_connect_service_proto_rawDescGZIP(), []int{0, 2, 1}
}

func (m *SequencerConnect_VerifyActive_Response) GetValue() isSequencerConnect_VerifyActive_Response_Value {
	if m != nil {
		return m.Value
	}
	return nil
}

func (x *SequencerConnect_VerifyActive_Response) GetSuccess() *SequencerConnect_VerifyActive_Success {
	if x, ok := x.GetValue().(*SequencerConnect_VerifyActive_Response_Success); ok {
		return x.Success
	}
	return nil
}

func (x *SequencerConnect_VerifyActive_Response) GetFailure() *SequencerConnect_VerifyActive_Failure {
	if x, ok := x.GetValue().(*SequencerConnect_VerifyActive_Response_Failure); ok {
		return x.Failure
	}
	return nil
}

type isSequencerConnect_VerifyActive_Response_Value interface {
	isSequencerConnect_VerifyActive_Response_Value()
}

type SequencerConnect_VerifyActive_Response_Success struct {
	Success *SequencerConnect_VerifyActive_Success `protobuf:"bytes,1,opt,name=success,proto3,oneof"`
}

type SequencerConnect_VerifyActive_Response_Failure struct {
	Failure *SequencerConnect_VerifyActive_Failure `protobuf:"bytes,2,opt,name=failure,proto3,oneof"`
}

func (*SequencerConnect_VerifyActive_Response_Success) isSequencerConnect_VerifyActive_Response_Value() {
}

func (*SequencerConnect_VerifyActive_Response_Failure) isSequencerConnect_VerifyActive_Response_Value() {
}

type SequencerConnect_VerifyActive_Success struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IsActive bool `protobuf:"varint,1,opt,name=is_active,json=isActive,proto3" json:"is_active,omitempty"`
}

func (x *SequencerConnect_VerifyActive_Success) Reset() {
	*x = SequencerConnect_VerifyActive_Success{}
	mi := &file_com_digitalasset_canton_domain_api_v0_sequencer_connect_service_proto_msgTypes[10]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SequencerConnect_VerifyActive_Success) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SequencerConnect_VerifyActive_Success) ProtoMessage() {}

func (x *SequencerConnect_VerifyActive_Success) ProtoReflect() protoreflect.Message {
	mi := &file_com_digitalasset_canton_domain_api_v0_sequencer_connect_service_proto_msgTypes[10]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SequencerConnect_VerifyActive_Success.ProtoReflect.Descriptor instead.
func (*SequencerConnect_VerifyActive_Success) Descriptor() ([]byte, []int) {
	return file_com_digitalasset_canton_domain_api_v0_sequencer_connect_service_proto_rawDescGZIP(), []int{0, 2, 2}
}

func (x *SequencerConnect_VerifyActive_Success) GetIsActive() bool {
	if x != nil {
		return x.IsActive
	}
	return false
}

type SequencerConnect_VerifyActive_Failure struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Reason string `protobuf:"bytes,1,opt,name=reason,proto3" json:"reason,omitempty"`
}

func (x *SequencerConnect_VerifyActive_Failure) Reset() {
	*x = SequencerConnect_VerifyActive_Failure{}
	mi := &file_com_digitalasset_canton_domain_api_v0_sequencer_connect_service_proto_msgTypes[11]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SequencerConnect_VerifyActive_Failure) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SequencerConnect_VerifyActive_Failure) ProtoMessage() {}

func (x *SequencerConnect_VerifyActive_Failure) ProtoReflect() protoreflect.Message {
	mi := &file_com_digitalasset_canton_domain_api_v0_sequencer_connect_service_proto_msgTypes[11]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SequencerConnect_VerifyActive_Failure.ProtoReflect.Descriptor instead.
func (*SequencerConnect_VerifyActive_Failure) Descriptor() ([]byte, []int) {
	return file_com_digitalasset_canton_domain_api_v0_sequencer_connect_service_proto_rawDescGZIP(), []int{0, 2, 3}
}

func (x *SequencerConnect_VerifyActive_Failure) GetReason() string {
	if x != nil {
		return x.Reason
	}
	return ""
}

var File_com_digitalasset_canton_domain_api_v0_sequencer_connect_service_proto protoreflect.FileDescriptor

var file_com_digitalasset_canton_domain_api_v0_sequencer_connect_service_proto_rawDesc = []byte{
	0x0a, 0x45, 0x63, 0x6f, 0x6d, 0x2f, 0x64, 0x69, 0x67, 0x69, 0x74, 0x61, 0x6c, 0x61, 0x73, 0x73,
	0x65, 0x74, 0x2f, 0x63, 0x61, 0x6e, 0x74, 0x6f, 0x6e, 0x2f, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e,
	0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x30, 0x2f, 0x73, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65,
	0x72, 0x5f, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x25, 0x63, 0x6f, 0x6d, 0x2e, 0x64, 0x69, 0x67,
	0x69, 0x74, 0x61, 0x6c, 0x61, 0x73, 0x73, 0x65, 0x74, 0x2e, 0x63, 0x61, 0x6e, 0x74, 0x6f, 0x6e,
	0x2e, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x30, 0x1a, 0x3d,
	0x63, 0x6f, 0x6d, 0x2f, 0x64, 0x69, 0x67, 0x69, 0x74, 0x61, 0x6c, 0x61, 0x73, 0x73, 0x65, 0x74,
	0x2f, 0x63, 0x61, 0x6e, 0x74, 0x6f, 0x6e, 0x2f, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x2f, 0x61,
	0x70, 0x69, 0x2f, 0x76, 0x30, 0x2f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x61, 0x67,
	0x72, 0x65, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x34, 0x63,
	0x6f, 0x6d, 0x2f, 0x64, 0x69, 0x67, 0x69, 0x74, 0x61, 0x6c, 0x61, 0x73, 0x73, 0x65, 0x74, 0x2f,
	0x63, 0x61, 0x6e, 0x74, 0x6f, 0x6e, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2f,
	0x76, 0x30, 0x2f, 0x73, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x69, 0x6e, 0x67, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x1a, 0x34, 0x63, 0x6f, 0x6d, 0x2f, 0x64, 0x69, 0x67, 0x69, 0x74, 0x61, 0x6c,
	0x61, 0x73, 0x73, 0x65, 0x74, 0x2f, 0x63, 0x61, 0x6e, 0x74, 0x6f, 0x6e, 0x2f, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2f, 0x76, 0x31, 0x2f, 0x73, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63,
	0x69, 0x6e, 0x67, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xcf, 0x05, 0x0a, 0x10, 0x53, 0x65,
	0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x1a, 0x64,
	0x0a, 0x0b, 0x47, 0x65, 0x74, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x49, 0x64, 0x1a, 0x09, 0x0a,
	0x07, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x4a, 0x0a, 0x08, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x5f, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x49,
	0x64, 0x12, 0x21, 0x0a, 0x0c, 0x73, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x72, 0x5f, 0x69,
	0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x73, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63,
	0x65, 0x72, 0x49, 0x64, 0x1a, 0x83, 0x02, 0x0a, 0x13, 0x47, 0x65, 0x74, 0x44, 0x6f, 0x6d, 0x61,
	0x69, 0x6e, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x1a, 0x09, 0x0a, 0x07,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0xe0, 0x01, 0x0a, 0x08, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x62, 0x0a, 0x0d, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65,
	0x72, 0x73, 0x5f, 0x76, 0x30, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3b, 0x2e, 0x63, 0x6f,
	0x6d, 0x2e, 0x64, 0x69, 0x67, 0x69, 0x74, 0x61, 0x6c, 0x61, 0x73, 0x73, 0x65, 0x74, 0x2e, 0x63,
	0x61, 0x6e, 0x74, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x76,
	0x30, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x69, 0x63, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x50, 0x61,
	0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x48, 0x00, 0x52, 0x0c, 0x70, 0x61, 0x72, 0x61,
	0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x56, 0x30, 0x12, 0x62, 0x0a, 0x0d, 0x70, 0x61, 0x72, 0x61,
	0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x5f, 0x76, 0x31, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x3b, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x64, 0x69, 0x67, 0x69, 0x74, 0x61, 0x6c, 0x61, 0x73, 0x73,
	0x65, 0x74, 0x2e, 0x63, 0x61, 0x6e, 0x74, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63,
	0x6f, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x69, 0x63, 0x44, 0x6f, 0x6d, 0x61,
	0x69, 0x6e, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x48, 0x00, 0x52, 0x0c,
	0x70, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x56, 0x31, 0x42, 0x0c, 0x0a, 0x0a,
	0x70, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x1a, 0xce, 0x02, 0x0a, 0x0c, 0x56,
	0x65, 0x72, 0x69, 0x66, 0x79, 0x41, 0x63, 0x74, 0x69, 0x76, 0x65, 0x1a, 0x09, 0x0a, 0x07, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0xe7, 0x01, 0x0a, 0x08, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x68, 0x0a, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x4c, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x64, 0x69, 0x67, 0x69, 0x74,
	0x61, 0x6c, 0x61, 0x73, 0x73, 0x65, 0x74, 0x2e, 0x63, 0x61, 0x6e, 0x74, 0x6f, 0x6e, 0x2e, 0x64,
	0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x30, 0x2e, 0x53, 0x65, 0x71,
	0x75, 0x65, 0x6e, 0x63, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x2e, 0x56, 0x65,
	0x72, 0x69, 0x66, 0x79, 0x41, 0x63, 0x74, 0x69, 0x76, 0x65, 0x2e, 0x53, 0x75, 0x63, 0x63, 0x65,
	0x73, 0x73, 0x48, 0x00, 0x52, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x12, 0x68, 0x0a,
	0x07, 0x66, 0x61, 0x69, 0x6c, 0x75, 0x72, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x4c,
	0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x64, 0x69, 0x67, 0x69, 0x74, 0x61, 0x6c, 0x61, 0x73, 0x73, 0x65,
	0x74, 0x2e, 0x63, 0x61, 0x6e, 0x74, 0x6f, 0x6e, 0x2e, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x76, 0x30, 0x2e, 0x53, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x72,
	0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x2e, 0x56, 0x65, 0x72, 0x69, 0x66, 0x79, 0x41, 0x63,
	0x74, 0x69, 0x76, 0x65, 0x2e, 0x46, 0x61, 0x69, 0x6c, 0x75, 0x72, 0x65, 0x48, 0x00, 0x52, 0x07,
	0x66, 0x61, 0x69, 0x6c, 0x75, 0x72, 0x65, 0x42, 0x07, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x1a, 0x26, 0x0a, 0x07, 0x53, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x12, 0x1b, 0x0a, 0x09, 0x69,
	0x73, 0x5f, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08,
	0x69, 0x73, 0x41, 0x63, 0x74, 0x69, 0x76, 0x65, 0x1a, 0x21, 0x0a, 0x07, 0x46, 0x61, 0x69, 0x6c,
	0x75, 0x72, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x06, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x32, 0xd2, 0x06, 0x0a, 0x17,
	0x53, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74,
	0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x7c, 0x0a, 0x09, 0x48, 0x61, 0x6e, 0x64, 0x73,
	0x68, 0x61, 0x6b, 0x65, 0x12, 0x36, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x64, 0x69, 0x67, 0x69, 0x74,
	0x61, 0x6c, 0x61, 0x73, 0x73, 0x65, 0x74, 0x2e, 0x63, 0x61, 0x6e, 0x74, 0x6f, 0x6e, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x76, 0x30, 0x2e, 0x48, 0x61, 0x6e, 0x64, 0x73,
	0x68, 0x61, 0x6b, 0x65, 0x2e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x37, 0x2e, 0x63,
	0x6f, 0x6d, 0x2e, 0x64, 0x69, 0x67, 0x69, 0x74, 0x61, 0x6c, 0x61, 0x73, 0x73, 0x65, 0x74, 0x2e,
	0x63, 0x61, 0x6e, 0x74, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e,
	0x76, 0x30, 0x2e, 0x48, 0x61, 0x6e, 0x64, 0x73, 0x68, 0x61, 0x6b, 0x65, 0x2e, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0xa8, 0x01, 0x0a, 0x0b, 0x47, 0x65, 0x74, 0x44, 0x6f, 0x6d,
	0x61, 0x69, 0x6e, 0x49, 0x64, 0x12, 0x4b, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x64, 0x69, 0x67, 0x69,
	0x74, 0x61, 0x6c, 0x61, 0x73, 0x73, 0x65, 0x74, 0x2e, 0x63, 0x61, 0x6e, 0x74, 0x6f, 0x6e, 0x2e,
	0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x30, 0x2e, 0x53, 0x65,
	0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x2e, 0x47,
	0x65, 0x74, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x49, 0x64, 0x2e, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x4c, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x64, 0x69, 0x67, 0x69, 0x74, 0x61, 0x6c,
	0x61, 0x73, 0x73, 0x65, 0x74, 0x2e, 0x63, 0x61, 0x6e, 0x74, 0x6f, 0x6e, 0x2e, 0x64, 0x6f, 0x6d,
	0x61, 0x69, 0x6e, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x30, 0x2e, 0x53, 0x65, 0x71, 0x75, 0x65,
	0x6e, 0x63, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x2e, 0x47, 0x65, 0x74, 0x44,
	0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x49, 0x64, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0xc0, 0x01, 0x0a, 0x13, 0x47, 0x65, 0x74, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x50, 0x61,
	0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x12, 0x53, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x64,
	0x69, 0x67, 0x69, 0x74, 0x61, 0x6c, 0x61, 0x73, 0x73, 0x65, 0x74, 0x2e, 0x63, 0x61, 0x6e, 0x74,
	0x6f, 0x6e, 0x2e, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x30,
	0x2e, 0x53, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63,
	0x74, 0x2e, 0x47, 0x65, 0x74, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x50, 0x61, 0x72, 0x61, 0x6d,
	0x65, 0x74, 0x65, 0x72, 0x73, 0x2e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x54, 0x2e,
	0x63, 0x6f, 0x6d, 0x2e, 0x64, 0x69, 0x67, 0x69, 0x74, 0x61, 0x6c, 0x61, 0x73, 0x73, 0x65, 0x74,
	0x2e, 0x63, 0x61, 0x6e, 0x74, 0x6f, 0x6e, 0x2e, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x76, 0x30, 0x2e, 0x53, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x72, 0x43,
	0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x2e, 0x47, 0x65, 0x74, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e,
	0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0xab, 0x01, 0x0a, 0x0c, 0x56, 0x65, 0x72, 0x69, 0x66, 0x79, 0x41, 0x63,
	0x74, 0x69, 0x76, 0x65, 0x12, 0x4c, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x64, 0x69, 0x67, 0x69, 0x74,
	0x61, 0x6c, 0x61, 0x73, 0x73, 0x65, 0x74, 0x2e, 0x63, 0x61, 0x6e, 0x74, 0x6f, 0x6e, 0x2e, 0x64,
	0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x30, 0x2e, 0x53, 0x65, 0x71,
	0x75, 0x65, 0x6e, 0x63, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x2e, 0x56, 0x65,
	0x72, 0x69, 0x66, 0x79, 0x41, 0x63, 0x74, 0x69, 0x76, 0x65, 0x2e, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x4d, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x64, 0x69, 0x67, 0x69, 0x74, 0x61, 0x6c,
	0x61, 0x73, 0x73, 0x65, 0x74, 0x2e, 0x63, 0x61, 0x6e, 0x74, 0x6f, 0x6e, 0x2e, 0x64, 0x6f, 0x6d,
	0x61, 0x69, 0x6e, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x30, 0x2e, 0x53, 0x65, 0x71, 0x75, 0x65,
	0x6e, 0x63, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x2e, 0x56, 0x65, 0x72, 0x69,
	0x66, 0x79, 0x41, 0x63, 0x74, 0x69, 0x76, 0x65, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x9c, 0x01, 0x0a, 0x13, 0x47, 0x65, 0x74, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x41, 0x67, 0x72, 0x65, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x41, 0x2e, 0x63, 0x6f, 0x6d, 0x2e,
	0x64, 0x69, 0x67, 0x69, 0x74, 0x61, 0x6c, 0x61, 0x73, 0x73, 0x65, 0x74, 0x2e, 0x63, 0x61, 0x6e,
	0x74, 0x6f, 0x6e, 0x2e, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76,
	0x30, 0x2e, 0x47, 0x65, 0x74, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x41, 0x67, 0x72, 0x65,
	0x65, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x42, 0x2e, 0x63,
	0x6f, 0x6d, 0x2e, 0x64, 0x69, 0x67, 0x69, 0x74, 0x61, 0x6c, 0x61, 0x73, 0x73, 0x65, 0x74, 0x2e,
	0x63, 0x61, 0x6e, 0x74, 0x6f, 0x6e, 0x2e, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x76, 0x30, 0x2e, 0x47, 0x65, 0x74, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x41,
	0x67, 0x72, 0x65, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x42, 0x56, 0x5a, 0x54, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x64,
	0x69, 0x67, 0x69, 0x74, 0x61, 0x6c, 0x2d, 0x61, 0x73, 0x73, 0x65, 0x74, 0x2f, 0x64, 0x61, 0x7a,
	0x6c, 0x2d, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2f, 0x76, 0x38, 0x2f, 0x67, 0x6f, 0x2f, 0x61,
	0x70, 0x69, 0x2f, 0x63, 0x6f, 0x6d, 0x2f, 0x64, 0x69, 0x67, 0x69, 0x74, 0x61, 0x6c, 0x61, 0x73,
	0x73, 0x65, 0x74, 0x2f, 0x63, 0x61, 0x6e, 0x74, 0x6f, 0x6e, 0x2f, 0x64, 0x6f, 0x6d, 0x61, 0x69,
	0x6e, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x30, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_com_digitalasset_canton_domain_api_v0_sequencer_connect_service_proto_rawDescOnce sync.Once
	file_com_digitalasset_canton_domain_api_v0_sequencer_connect_service_proto_rawDescData = file_com_digitalasset_canton_domain_api_v0_sequencer_connect_service_proto_rawDesc
)

func file_com_digitalasset_canton_domain_api_v0_sequencer_connect_service_proto_rawDescGZIP() []byte {
	file_com_digitalasset_canton_domain_api_v0_sequencer_connect_service_proto_rawDescOnce.Do(func() {
		file_com_digitalasset_canton_domain_api_v0_sequencer_connect_service_proto_rawDescData = protoimpl.X.CompressGZIP(file_com_digitalasset_canton_domain_api_v0_sequencer_connect_service_proto_rawDescData)
	})
	return file_com_digitalasset_canton_domain_api_v0_sequencer_connect_service_proto_rawDescData
}

var file_com_digitalasset_canton_domain_api_v0_sequencer_connect_service_proto_msgTypes = make([]protoimpl.MessageInfo, 12)
var file_com_digitalasset_canton_domain_api_v0_sequencer_connect_service_proto_goTypes = []any{
	(*SequencerConnect)(nil),                              // 0: com.digitalasset.canton.domain.api.v0.SequencerConnect
	(*SequencerConnect_GetDomainId)(nil),                  // 1: com.digitalasset.canton.domain.api.v0.SequencerConnect.GetDomainId
	(*SequencerConnect_GetDomainParameters)(nil),          // 2: com.digitalasset.canton.domain.api.v0.SequencerConnect.GetDomainParameters
	(*SequencerConnect_VerifyActive)(nil),                 // 3: com.digitalasset.canton.domain.api.v0.SequencerConnect.VerifyActive
	(*SequencerConnect_GetDomainId_Request)(nil),          // 4: com.digitalasset.canton.domain.api.v0.SequencerConnect.GetDomainId.Request
	(*SequencerConnect_GetDomainId_Response)(nil),         // 5: com.digitalasset.canton.domain.api.v0.SequencerConnect.GetDomainId.Response
	(*SequencerConnect_GetDomainParameters_Request)(nil),  // 6: com.digitalasset.canton.domain.api.v0.SequencerConnect.GetDomainParameters.Request
	(*SequencerConnect_GetDomainParameters_Response)(nil), // 7: com.digitalasset.canton.domain.api.v0.SequencerConnect.GetDomainParameters.Response
	(*SequencerConnect_VerifyActive_Request)(nil),         // 8: com.digitalasset.canton.domain.api.v0.SequencerConnect.VerifyActive.Request
	(*SequencerConnect_VerifyActive_Response)(nil),        // 9: com.digitalasset.canton.domain.api.v0.SequencerConnect.VerifyActive.Response
	(*SequencerConnect_VerifyActive_Success)(nil),         // 10: com.digitalasset.canton.domain.api.v0.SequencerConnect.VerifyActive.Success
	(*SequencerConnect_VerifyActive_Failure)(nil),         // 11: com.digitalasset.canton.domain.api.v0.SequencerConnect.VerifyActive.Failure
	(*v0.StaticDomainParameters)(nil),                     // 12: com.digitalasset.canton.protocol.v0.StaticDomainParameters
	(*v1.StaticDomainParameters)(nil),                     // 13: com.digitalasset.canton.protocol.v1.StaticDomainParameters
	(*v0.Handshake_Request)(nil),                          // 14: com.digitalasset.canton.protocol.v0.Handshake.Request
	(*GetServiceAgreementRequest)(nil),                    // 15: com.digitalasset.canton.domain.api.v0.GetServiceAgreementRequest
	(*v0.Handshake_Response)(nil),                         // 16: com.digitalasset.canton.protocol.v0.Handshake.Response
	(*GetServiceAgreementResponse)(nil),                   // 17: com.digitalasset.canton.domain.api.v0.GetServiceAgreementResponse
}
var file_com_digitalasset_canton_domain_api_v0_sequencer_connect_service_proto_depIdxs = []int32{
	12, // 0: com.digitalasset.canton.domain.api.v0.SequencerConnect.GetDomainParameters.Response.parameters_v0:type_name -> com.digitalasset.canton.protocol.v0.StaticDomainParameters
	13, // 1: com.digitalasset.canton.domain.api.v0.SequencerConnect.GetDomainParameters.Response.parameters_v1:type_name -> com.digitalasset.canton.protocol.v1.StaticDomainParameters
	10, // 2: com.digitalasset.canton.domain.api.v0.SequencerConnect.VerifyActive.Response.success:type_name -> com.digitalasset.canton.domain.api.v0.SequencerConnect.VerifyActive.Success
	11, // 3: com.digitalasset.canton.domain.api.v0.SequencerConnect.VerifyActive.Response.failure:type_name -> com.digitalasset.canton.domain.api.v0.SequencerConnect.VerifyActive.Failure
	14, // 4: com.digitalasset.canton.domain.api.v0.SequencerConnectService.Handshake:input_type -> com.digitalasset.canton.protocol.v0.Handshake.Request
	4,  // 5: com.digitalasset.canton.domain.api.v0.SequencerConnectService.GetDomainId:input_type -> com.digitalasset.canton.domain.api.v0.SequencerConnect.GetDomainId.Request
	6,  // 6: com.digitalasset.canton.domain.api.v0.SequencerConnectService.GetDomainParameters:input_type -> com.digitalasset.canton.domain.api.v0.SequencerConnect.GetDomainParameters.Request
	8,  // 7: com.digitalasset.canton.domain.api.v0.SequencerConnectService.VerifyActive:input_type -> com.digitalasset.canton.domain.api.v0.SequencerConnect.VerifyActive.Request
	15, // 8: com.digitalasset.canton.domain.api.v0.SequencerConnectService.GetServiceAgreement:input_type -> com.digitalasset.canton.domain.api.v0.GetServiceAgreementRequest
	16, // 9: com.digitalasset.canton.domain.api.v0.SequencerConnectService.Handshake:output_type -> com.digitalasset.canton.protocol.v0.Handshake.Response
	5,  // 10: com.digitalasset.canton.domain.api.v0.SequencerConnectService.GetDomainId:output_type -> com.digitalasset.canton.domain.api.v0.SequencerConnect.GetDomainId.Response
	7,  // 11: com.digitalasset.canton.domain.api.v0.SequencerConnectService.GetDomainParameters:output_type -> com.digitalasset.canton.domain.api.v0.SequencerConnect.GetDomainParameters.Response
	9,  // 12: com.digitalasset.canton.domain.api.v0.SequencerConnectService.VerifyActive:output_type -> com.digitalasset.canton.domain.api.v0.SequencerConnect.VerifyActive.Response
	17, // 13: com.digitalasset.canton.domain.api.v0.SequencerConnectService.GetServiceAgreement:output_type -> com.digitalasset.canton.domain.api.v0.GetServiceAgreementResponse
	9,  // [9:14] is the sub-list for method output_type
	4,  // [4:9] is the sub-list for method input_type
	4,  // [4:4] is the sub-list for extension type_name
	4,  // [4:4] is the sub-list for extension extendee
	0,  // [0:4] is the sub-list for field type_name
}

func init() { file_com_digitalasset_canton_domain_api_v0_sequencer_connect_service_proto_init() }
func file_com_digitalasset_canton_domain_api_v0_sequencer_connect_service_proto_init() {
	if File_com_digitalasset_canton_domain_api_v0_sequencer_connect_service_proto != nil {
		return
	}
	file_com_digitalasset_canton_domain_api_v0_service_agreement_proto_init()
	file_com_digitalasset_canton_domain_api_v0_sequencer_connect_service_proto_msgTypes[7].OneofWrappers = []any{
		(*SequencerConnect_GetDomainParameters_Response_ParametersV0)(nil),
		(*SequencerConnect_GetDomainParameters_Response_ParametersV1)(nil),
	}
	file_com_digitalasset_canton_domain_api_v0_sequencer_connect_service_proto_msgTypes[9].OneofWrappers = []any{
		(*SequencerConnect_VerifyActive_Response_Success)(nil),
		(*SequencerConnect_VerifyActive_Response_Failure)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_com_digitalasset_canton_domain_api_v0_sequencer_connect_service_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   12,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_com_digitalasset_canton_domain_api_v0_sequencer_connect_service_proto_goTypes,
		DependencyIndexes: file_com_digitalasset_canton_domain_api_v0_sequencer_connect_service_proto_depIdxs,
		MessageInfos:      file_com_digitalasset_canton_domain_api_v0_sequencer_connect_service_proto_msgTypes,
	}.Build()
	File_com_digitalasset_canton_domain_api_v0_sequencer_connect_service_proto = out.File
	file_com_digitalasset_canton_domain_api_v0_sequencer_connect_service_proto_rawDesc = nil
	file_com_digitalasset_canton_domain_api_v0_sequencer_connect_service_proto_goTypes = nil
	file_com_digitalasset_canton_domain_api_v0_sequencer_connect_service_proto_depIdxs = nil
}
