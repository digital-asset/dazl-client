// Copyright (c) 2017-2025 Digital Asset (Switzerland) GmbH and/or its affiliates. All rights reserved.
// SPDX-License-Identifier: Apache-2.0
// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.35.2
// 	protoc        v5.27.2
// source: com/digitalasset/canton/domain/api/v0/sequencer_service.proto

package v0

import (
	v0 "github.com/digital-asset/dazl-client/v8/go/api/com/digitalasset/canton/protocol/v0"
	v01 "github.com/digital-asset/dazl-client/v8/go/api/com/digitalasset/canton/v0"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type SendAsyncVersionedRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SignedSubmissionRequest []byte `protobuf:"bytes,1,opt,name=signed_submission_request,json=signedSubmissionRequest,proto3" json:"signed_submission_request,omitempty"`
}

func (x *SendAsyncVersionedRequest) Reset() {
	*x = SendAsyncVersionedRequest{}
	mi := &file_com_digitalasset_canton_domain_api_v0_sequencer_service_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SendAsyncVersionedRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SendAsyncVersionedRequest) ProtoMessage() {}

func (x *SendAsyncVersionedRequest) ProtoReflect() protoreflect.Message {
	mi := &file_com_digitalasset_canton_domain_api_v0_sequencer_service_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SendAsyncVersionedRequest.ProtoReflect.Descriptor instead.
func (*SendAsyncVersionedRequest) Descriptor() ([]byte, []int) {
	return file_com_digitalasset_canton_domain_api_v0_sequencer_service_proto_rawDescGZIP(), []int{0}
}

func (x *SendAsyncVersionedRequest) GetSignedSubmissionRequest() []byte {
	if x != nil {
		return x.SignedSubmissionRequest
	}
	return nil
}

type SendAsyncUnauthenticatedVersionedRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SubmissionRequest []byte `protobuf:"bytes,1,opt,name=submission_request,json=submissionRequest,proto3" json:"submission_request,omitempty"`
}

func (x *SendAsyncUnauthenticatedVersionedRequest) Reset() {
	*x = SendAsyncUnauthenticatedVersionedRequest{}
	mi := &file_com_digitalasset_canton_domain_api_v0_sequencer_service_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SendAsyncUnauthenticatedVersionedRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SendAsyncUnauthenticatedVersionedRequest) ProtoMessage() {}

func (x *SendAsyncUnauthenticatedVersionedRequest) ProtoReflect() protoreflect.Message {
	mi := &file_com_digitalasset_canton_domain_api_v0_sequencer_service_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SendAsyncUnauthenticatedVersionedRequest.ProtoReflect.Descriptor instead.
func (*SendAsyncUnauthenticatedVersionedRequest) Descriptor() ([]byte, []int) {
	return file_com_digitalasset_canton_domain_api_v0_sequencer_service_proto_rawDescGZIP(), []int{1}
}

func (x *SendAsyncUnauthenticatedVersionedRequest) GetSubmissionRequest() []byte {
	if x != nil {
		return x.SubmissionRequest
	}
	return nil
}

type SendAsyncResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Error *SendAsyncResponse_Error `protobuf:"bytes,1,opt,name=error,proto3" json:"error,omitempty"`
}

func (x *SendAsyncResponse) Reset() {
	*x = SendAsyncResponse{}
	mi := &file_com_digitalasset_canton_domain_api_v0_sequencer_service_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SendAsyncResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SendAsyncResponse) ProtoMessage() {}

func (x *SendAsyncResponse) ProtoReflect() protoreflect.Message {
	mi := &file_com_digitalasset_canton_domain_api_v0_sequencer_service_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SendAsyncResponse.ProtoReflect.Descriptor instead.
func (*SendAsyncResponse) Descriptor() ([]byte, []int) {
	return file_com_digitalasset_canton_domain_api_v0_sequencer_service_proto_rawDescGZIP(), []int{2}
}

func (x *SendAsyncResponse) GetError() *SendAsyncResponse_Error {
	if x != nil {
		return x.Error
	}
	return nil
}

type SendAsyncSignedResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Error *SendAsyncSignedResponse_Error `protobuf:"bytes,1,opt,name=error,proto3" json:"error,omitempty"`
}

func (x *SendAsyncSignedResponse) Reset() {
	*x = SendAsyncSignedResponse{}
	mi := &file_com_digitalasset_canton_domain_api_v0_sequencer_service_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SendAsyncSignedResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SendAsyncSignedResponse) ProtoMessage() {}

func (x *SendAsyncSignedResponse) ProtoReflect() protoreflect.Message {
	mi := &file_com_digitalasset_canton_domain_api_v0_sequencer_service_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SendAsyncSignedResponse.ProtoReflect.Descriptor instead.
func (*SendAsyncSignedResponse) Descriptor() ([]byte, []int) {
	return file_com_digitalasset_canton_domain_api_v0_sequencer_service_proto_rawDescGZIP(), []int{3}
}

func (x *SendAsyncSignedResponse) GetError() *SendAsyncSignedResponse_Error {
	if x != nil {
		return x.Error
	}
	return nil
}

type SubscriptionRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Member  string `protobuf:"bytes,1,opt,name=member,proto3" json:"member,omitempty"`
	Counter int64  `protobuf:"varint,2,opt,name=counter,proto3" json:"counter,omitempty"`
}

func (x *SubscriptionRequest) Reset() {
	*x = SubscriptionRequest{}
	mi := &file_com_digitalasset_canton_domain_api_v0_sequencer_service_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SubscriptionRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SubscriptionRequest) ProtoMessage() {}

func (x *SubscriptionRequest) ProtoReflect() protoreflect.Message {
	mi := &file_com_digitalasset_canton_domain_api_v0_sequencer_service_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SubscriptionRequest.ProtoReflect.Descriptor instead.
func (*SubscriptionRequest) Descriptor() ([]byte, []int) {
	return file_com_digitalasset_canton_domain_api_v0_sequencer_service_proto_rawDescGZIP(), []int{4}
}

func (x *SubscriptionRequest) GetMember() string {
	if x != nil {
		return x.Member
	}
	return ""
}

func (x *SubscriptionRequest) GetCounter() int64 {
	if x != nil {
		return x.Counter
	}
	return 0
}

type SubscriptionResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SignedSequencedEvent *v0.SignedContent `protobuf:"bytes,1,opt,name=signed_sequenced_event,json=signedSequencedEvent,proto3" json:"signed_sequenced_event,omitempty"`
	TraceContext         *v01.TraceContext `protobuf:"bytes,2,opt,name=trace_context,json=traceContext,proto3" json:"trace_context,omitempty"`
}

func (x *SubscriptionResponse) Reset() {
	*x = SubscriptionResponse{}
	mi := &file_com_digitalasset_canton_domain_api_v0_sequencer_service_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SubscriptionResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SubscriptionResponse) ProtoMessage() {}

func (x *SubscriptionResponse) ProtoReflect() protoreflect.Message {
	mi := &file_com_digitalasset_canton_domain_api_v0_sequencer_service_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SubscriptionResponse.ProtoReflect.Descriptor instead.
func (*SubscriptionResponse) Descriptor() ([]byte, []int) {
	return file_com_digitalasset_canton_domain_api_v0_sequencer_service_proto_rawDescGZIP(), []int{5}
}

func (x *SubscriptionResponse) GetSignedSequencedEvent() *v0.SignedContent {
	if x != nil {
		return x.SignedSequencedEvent
	}
	return nil
}

func (x *SubscriptionResponse) GetTraceContext() *v01.TraceContext {
	if x != nil {
		return x.TraceContext
	}
	return nil
}

type VersionedSubscriptionResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SignedSequencedEvent []byte                      `protobuf:"bytes,1,opt,name=signed_sequenced_event,json=signedSequencedEvent,proto3" json:"signed_sequenced_event,omitempty"`
	TraceContext         *v01.TraceContext           `protobuf:"bytes,2,opt,name=trace_context,json=traceContext,proto3" json:"trace_context,omitempty"`
	TrafficState         *SequencedEventTrafficState `protobuf:"bytes,3,opt,name=traffic_state,json=trafficState,proto3" json:"traffic_state,omitempty"`
}

func (x *VersionedSubscriptionResponse) Reset() {
	*x = VersionedSubscriptionResponse{}
	mi := &file_com_digitalasset_canton_domain_api_v0_sequencer_service_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *VersionedSubscriptionResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VersionedSubscriptionResponse) ProtoMessage() {}

func (x *VersionedSubscriptionResponse) ProtoReflect() protoreflect.Message {
	mi := &file_com_digitalasset_canton_domain_api_v0_sequencer_service_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VersionedSubscriptionResponse.ProtoReflect.Descriptor instead.
func (*VersionedSubscriptionResponse) Descriptor() ([]byte, []int) {
	return file_com_digitalasset_canton_domain_api_v0_sequencer_service_proto_rawDescGZIP(), []int{6}
}

func (x *VersionedSubscriptionResponse) GetSignedSequencedEvent() []byte {
	if x != nil {
		return x.SignedSequencedEvent
	}
	return nil
}

func (x *VersionedSubscriptionResponse) GetTraceContext() *v01.TraceContext {
	if x != nil {
		return x.TraceContext
	}
	return nil
}

func (x *VersionedSubscriptionResponse) GetTrafficState() *SequencedEventTrafficState {
	if x != nil {
		return x.TrafficState
	}
	return nil
}

type AcknowledgeRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Member    string                 `protobuf:"bytes,1,opt,name=member,proto3" json:"member,omitempty"`
	Timestamp *timestamppb.Timestamp `protobuf:"bytes,2,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
}

func (x *AcknowledgeRequest) Reset() {
	*x = AcknowledgeRequest{}
	mi := &file_com_digitalasset_canton_domain_api_v0_sequencer_service_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AcknowledgeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AcknowledgeRequest) ProtoMessage() {}

func (x *AcknowledgeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_com_digitalasset_canton_domain_api_v0_sequencer_service_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AcknowledgeRequest.ProtoReflect.Descriptor instead.
func (*AcknowledgeRequest) Descriptor() ([]byte, []int) {
	return file_com_digitalasset_canton_domain_api_v0_sequencer_service_proto_rawDescGZIP(), []int{7}
}

func (x *AcknowledgeRequest) GetMember() string {
	if x != nil {
		return x.Member
	}
	return ""
}

func (x *AcknowledgeRequest) GetTimestamp() *timestamppb.Timestamp {
	if x != nil {
		return x.Timestamp
	}
	return nil
}

type SequencedEventTrafficState struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ExtraTrafficRemainder uint64 `protobuf:"varint,2,opt,name=extra_traffic_remainder,json=extraTrafficRemainder,proto3" json:"extra_traffic_remainder,omitempty"`
	ExtraTrafficConsumed  uint64 `protobuf:"varint,3,opt,name=extra_traffic_consumed,json=extraTrafficConsumed,proto3" json:"extra_traffic_consumed,omitempty"`
}

func (x *SequencedEventTrafficState) Reset() {
	*x = SequencedEventTrafficState{}
	mi := &file_com_digitalasset_canton_domain_api_v0_sequencer_service_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SequencedEventTrafficState) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SequencedEventTrafficState) ProtoMessage() {}

func (x *SequencedEventTrafficState) ProtoReflect() protoreflect.Message {
	mi := &file_com_digitalasset_canton_domain_api_v0_sequencer_service_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SequencedEventTrafficState.ProtoReflect.Descriptor instead.
func (*SequencedEventTrafficState) Descriptor() ([]byte, []int) {
	return file_com_digitalasset_canton_domain_api_v0_sequencer_service_proto_rawDescGZIP(), []int{8}
}

func (x *SequencedEventTrafficState) GetExtraTrafficRemainder() uint64 {
	if x != nil {
		return x.ExtraTrafficRemainder
	}
	return 0
}

func (x *SequencedEventTrafficState) GetExtraTrafficConsumed() uint64 {
	if x != nil {
		return x.ExtraTrafficConsumed
	}
	return 0
}

type SendAsyncResponse_Error struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Reason:
	//
	//	*SendAsyncResponse_Error_RequestInvalid
	//	*SendAsyncResponse_Error_RequestRefused
	//	*SendAsyncResponse_Error_Overloaded
	//	*SendAsyncResponse_Error_SenderUnknown
	//	*SendAsyncResponse_Error_ShuttingDown
	//	*SendAsyncResponse_Error_Unavailable
	//	*SendAsyncResponse_Error_UnknownRecipients
	Reason isSendAsyncResponse_Error_Reason `protobuf_oneof:"reason"`
}

func (x *SendAsyncResponse_Error) Reset() {
	*x = SendAsyncResponse_Error{}
	mi := &file_com_digitalasset_canton_domain_api_v0_sequencer_service_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SendAsyncResponse_Error) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SendAsyncResponse_Error) ProtoMessage() {}

func (x *SendAsyncResponse_Error) ProtoReflect() protoreflect.Message {
	mi := &file_com_digitalasset_canton_domain_api_v0_sequencer_service_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SendAsyncResponse_Error.ProtoReflect.Descriptor instead.
func (*SendAsyncResponse_Error) Descriptor() ([]byte, []int) {
	return file_com_digitalasset_canton_domain_api_v0_sequencer_service_proto_rawDescGZIP(), []int{2, 0}
}

func (m *SendAsyncResponse_Error) GetReason() isSendAsyncResponse_Error_Reason {
	if m != nil {
		return m.Reason
	}
	return nil
}

func (x *SendAsyncResponse_Error) GetRequestInvalid() string {
	if x, ok := x.GetReason().(*SendAsyncResponse_Error_RequestInvalid); ok {
		return x.RequestInvalid
	}
	return ""
}

func (x *SendAsyncResponse_Error) GetRequestRefused() string {
	if x, ok := x.GetReason().(*SendAsyncResponse_Error_RequestRefused); ok {
		return x.RequestRefused
	}
	return ""
}

func (x *SendAsyncResponse_Error) GetOverloaded() string {
	if x, ok := x.GetReason().(*SendAsyncResponse_Error_Overloaded); ok {
		return x.Overloaded
	}
	return ""
}

func (x *SendAsyncResponse_Error) GetSenderUnknown() string {
	if x, ok := x.GetReason().(*SendAsyncResponse_Error_SenderUnknown); ok {
		return x.SenderUnknown
	}
	return ""
}

func (x *SendAsyncResponse_Error) GetShuttingDown() string {
	if x, ok := x.GetReason().(*SendAsyncResponse_Error_ShuttingDown); ok {
		return x.ShuttingDown
	}
	return ""
}

func (x *SendAsyncResponse_Error) GetUnavailable() string {
	if x, ok := x.GetReason().(*SendAsyncResponse_Error_Unavailable); ok {
		return x.Unavailable
	}
	return ""
}

func (x *SendAsyncResponse_Error) GetUnknownRecipients() string {
	if x, ok := x.GetReason().(*SendAsyncResponse_Error_UnknownRecipients); ok {
		return x.UnknownRecipients
	}
	return ""
}

type isSendAsyncResponse_Error_Reason interface {
	isSendAsyncResponse_Error_Reason()
}

type SendAsyncResponse_Error_RequestInvalid struct {
	RequestInvalid string `protobuf:"bytes,1,opt,name=request_invalid,json=requestInvalid,proto3,oneof"`
}

type SendAsyncResponse_Error_RequestRefused struct {
	RequestRefused string `protobuf:"bytes,2,opt,name=request_refused,json=requestRefused,proto3,oneof"`
}

type SendAsyncResponse_Error_Overloaded struct {
	Overloaded string `protobuf:"bytes,3,opt,name=overloaded,proto3,oneof"`
}

type SendAsyncResponse_Error_SenderUnknown struct {
	SenderUnknown string `protobuf:"bytes,4,opt,name=sender_unknown,json=senderUnknown,proto3,oneof"`
}

type SendAsyncResponse_Error_ShuttingDown struct {
	ShuttingDown string `protobuf:"bytes,5,opt,name=shutting_down,json=shuttingDown,proto3,oneof"`
}

type SendAsyncResponse_Error_Unavailable struct {
	Unavailable string `protobuf:"bytes,6,opt,name=unavailable,proto3,oneof"`
}

type SendAsyncResponse_Error_UnknownRecipients struct {
	UnknownRecipients string `protobuf:"bytes,7,opt,name=unknown_recipients,json=unknownRecipients,proto3,oneof"`
}

func (*SendAsyncResponse_Error_RequestInvalid) isSendAsyncResponse_Error_Reason() {}

func (*SendAsyncResponse_Error_RequestRefused) isSendAsyncResponse_Error_Reason() {}

func (*SendAsyncResponse_Error_Overloaded) isSendAsyncResponse_Error_Reason() {}

func (*SendAsyncResponse_Error_SenderUnknown) isSendAsyncResponse_Error_Reason() {}

func (*SendAsyncResponse_Error_ShuttingDown) isSendAsyncResponse_Error_Reason() {}

func (*SendAsyncResponse_Error_Unavailable) isSendAsyncResponse_Error_Reason() {}

func (*SendAsyncResponse_Error_UnknownRecipients) isSendAsyncResponse_Error_Reason() {}

type SendAsyncSignedResponse_Error struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Reason:
	//
	//	*SendAsyncSignedResponse_Error_RequestInvalid
	//	*SendAsyncSignedResponse_Error_RequestRefused
	//	*SendAsyncSignedResponse_Error_Overloaded
	//	*SendAsyncSignedResponse_Error_SenderUnknown
	//	*SendAsyncSignedResponse_Error_ShuttingDown
	//	*SendAsyncSignedResponse_Error_Unavailable
	//	*SendAsyncSignedResponse_Error_UnknownRecipients
	//	*SendAsyncSignedResponse_Error_Internal
	//	*SendAsyncSignedResponse_Error_Generic
	Reason isSendAsyncSignedResponse_Error_Reason `protobuf_oneof:"reason"`
}

func (x *SendAsyncSignedResponse_Error) Reset() {
	*x = SendAsyncSignedResponse_Error{}
	mi := &file_com_digitalasset_canton_domain_api_v0_sequencer_service_proto_msgTypes[10]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SendAsyncSignedResponse_Error) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SendAsyncSignedResponse_Error) ProtoMessage() {}

func (x *SendAsyncSignedResponse_Error) ProtoReflect() protoreflect.Message {
	mi := &file_com_digitalasset_canton_domain_api_v0_sequencer_service_proto_msgTypes[10]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SendAsyncSignedResponse_Error.ProtoReflect.Descriptor instead.
func (*SendAsyncSignedResponse_Error) Descriptor() ([]byte, []int) {
	return file_com_digitalasset_canton_domain_api_v0_sequencer_service_proto_rawDescGZIP(), []int{3, 0}
}

func (m *SendAsyncSignedResponse_Error) GetReason() isSendAsyncSignedResponse_Error_Reason {
	if m != nil {
		return m.Reason
	}
	return nil
}

func (x *SendAsyncSignedResponse_Error) GetRequestInvalid() string {
	if x, ok := x.GetReason().(*SendAsyncSignedResponse_Error_RequestInvalid); ok {
		return x.RequestInvalid
	}
	return ""
}

func (x *SendAsyncSignedResponse_Error) GetRequestRefused() string {
	if x, ok := x.GetReason().(*SendAsyncSignedResponse_Error_RequestRefused); ok {
		return x.RequestRefused
	}
	return ""
}

func (x *SendAsyncSignedResponse_Error) GetOverloaded() string {
	if x, ok := x.GetReason().(*SendAsyncSignedResponse_Error_Overloaded); ok {
		return x.Overloaded
	}
	return ""
}

func (x *SendAsyncSignedResponse_Error) GetSenderUnknown() string {
	if x, ok := x.GetReason().(*SendAsyncSignedResponse_Error_SenderUnknown); ok {
		return x.SenderUnknown
	}
	return ""
}

func (x *SendAsyncSignedResponse_Error) GetShuttingDown() string {
	if x, ok := x.GetReason().(*SendAsyncSignedResponse_Error_ShuttingDown); ok {
		return x.ShuttingDown
	}
	return ""
}

func (x *SendAsyncSignedResponse_Error) GetUnavailable() string {
	if x, ok := x.GetReason().(*SendAsyncSignedResponse_Error_Unavailable); ok {
		return x.Unavailable
	}
	return ""
}

func (x *SendAsyncSignedResponse_Error) GetUnknownRecipients() string {
	if x, ok := x.GetReason().(*SendAsyncSignedResponse_Error_UnknownRecipients); ok {
		return x.UnknownRecipients
	}
	return ""
}

func (x *SendAsyncSignedResponse_Error) GetInternal() string {
	if x, ok := x.GetReason().(*SendAsyncSignedResponse_Error_Internal); ok {
		return x.Internal
	}
	return ""
}

func (x *SendAsyncSignedResponse_Error) GetGeneric() string {
	if x, ok := x.GetReason().(*SendAsyncSignedResponse_Error_Generic); ok {
		return x.Generic
	}
	return ""
}

type isSendAsyncSignedResponse_Error_Reason interface {
	isSendAsyncSignedResponse_Error_Reason()
}

type SendAsyncSignedResponse_Error_RequestInvalid struct {
	RequestInvalid string `protobuf:"bytes,1,opt,name=request_invalid,json=requestInvalid,proto3,oneof"`
}

type SendAsyncSignedResponse_Error_RequestRefused struct {
	RequestRefused string `protobuf:"bytes,2,opt,name=request_refused,json=requestRefused,proto3,oneof"`
}

type SendAsyncSignedResponse_Error_Overloaded struct {
	Overloaded string `protobuf:"bytes,3,opt,name=overloaded,proto3,oneof"`
}

type SendAsyncSignedResponse_Error_SenderUnknown struct {
	SenderUnknown string `protobuf:"bytes,4,opt,name=sender_unknown,json=senderUnknown,proto3,oneof"`
}

type SendAsyncSignedResponse_Error_ShuttingDown struct {
	ShuttingDown string `protobuf:"bytes,5,opt,name=shutting_down,json=shuttingDown,proto3,oneof"`
}

type SendAsyncSignedResponse_Error_Unavailable struct {
	Unavailable string `protobuf:"bytes,6,opt,name=unavailable,proto3,oneof"`
}

type SendAsyncSignedResponse_Error_UnknownRecipients struct {
	UnknownRecipients string `protobuf:"bytes,7,opt,name=unknown_recipients,json=unknownRecipients,proto3,oneof"`
}

type SendAsyncSignedResponse_Error_Internal struct {
	Internal string `protobuf:"bytes,8,opt,name=internal,proto3,oneof"`
}

type SendAsyncSignedResponse_Error_Generic struct {
	Generic string `protobuf:"bytes,9,opt,name=generic,proto3,oneof"`
}

func (*SendAsyncSignedResponse_Error_RequestInvalid) isSendAsyncSignedResponse_Error_Reason() {}

func (*SendAsyncSignedResponse_Error_RequestRefused) isSendAsyncSignedResponse_Error_Reason() {}

func (*SendAsyncSignedResponse_Error_Overloaded) isSendAsyncSignedResponse_Error_Reason() {}

func (*SendAsyncSignedResponse_Error_SenderUnknown) isSendAsyncSignedResponse_Error_Reason() {}

func (*SendAsyncSignedResponse_Error_ShuttingDown) isSendAsyncSignedResponse_Error_Reason() {}

func (*SendAsyncSignedResponse_Error_Unavailable) isSendAsyncSignedResponse_Error_Reason() {}

func (*SendAsyncSignedResponse_Error_UnknownRecipients) isSendAsyncSignedResponse_Error_Reason() {}

func (*SendAsyncSignedResponse_Error_Internal) isSendAsyncSignedResponse_Error_Reason() {}

func (*SendAsyncSignedResponse_Error_Generic) isSendAsyncSignedResponse_Error_Reason() {}

var File_com_digitalasset_canton_domain_api_v0_sequencer_service_proto protoreflect.FileDescriptor

var file_com_digitalasset_canton_domain_api_v0_sequencer_service_proto_rawDesc = []byte{
	0x0a, 0x3d, 0x63, 0x6f, 0x6d, 0x2f, 0x64, 0x69, 0x67, 0x69, 0x74, 0x61, 0x6c, 0x61, 0x73, 0x73,
	0x65, 0x74, 0x2f, 0x63, 0x61, 0x6e, 0x74, 0x6f, 0x6e, 0x2f, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e,
	0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x30, 0x2f, 0x73, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65,
	0x72, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12,
	0x25, 0x63, 0x6f, 0x6d, 0x2e, 0x64, 0x69, 0x67, 0x69, 0x74, 0x61, 0x6c, 0x61, 0x73, 0x73, 0x65,
	0x74, 0x2e, 0x63, 0x61, 0x6e, 0x74, 0x6f, 0x6e, 0x2e, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x76, 0x30, 0x1a, 0x34, 0x63, 0x6f, 0x6d, 0x2f, 0x64, 0x69, 0x67, 0x69,
	0x74, 0x61, 0x6c, 0x61, 0x73, 0x73, 0x65, 0x74, 0x2f, 0x63, 0x61, 0x6e, 0x74, 0x6f, 0x6e, 0x2f,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2f, 0x76, 0x30, 0x2f, 0x73, 0x65, 0x71, 0x75,
	0x65, 0x6e, 0x63, 0x69, 0x6e, 0x67, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x2e, 0x63, 0x6f,
	0x6d, 0x2f, 0x64, 0x69, 0x67, 0x69, 0x74, 0x61, 0x6c, 0x61, 0x73, 0x73, 0x65, 0x74, 0x2f, 0x63,
	0x61, 0x6e, 0x74, 0x6f, 0x6e, 0x2f, 0x76, 0x30, 0x2f, 0x74, 0x72, 0x61, 0x63, 0x65, 0x5f, 0x63,
	0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1b, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x65, 0x6d,
	0x70, 0x74, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73,
	0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x57, 0x0a, 0x19, 0x53, 0x65,
	0x6e, 0x64, 0x41, 0x73, 0x79, 0x6e, 0x63, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x65, 0x64,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x3a, 0x0a, 0x19, 0x73, 0x69, 0x67, 0x6e, 0x65,
	0x64, 0x5f, 0x73, 0x75, 0x62, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x72, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x17, 0x73, 0x69, 0x67, 0x6e,
	0x65, 0x64, 0x53, 0x75, 0x62, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x22, 0x59, 0x0a, 0x28, 0x53, 0x65, 0x6e, 0x64, 0x41, 0x73, 0x79, 0x6e, 0x63,
	0x55, 0x6e, 0x61, 0x75, 0x74, 0x68, 0x65, 0x6e, 0x74, 0x69, 0x63, 0x61, 0x74, 0x65, 0x64, 0x56,
	0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x65, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x2d, 0x0a, 0x12, 0x73, 0x75, 0x62, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x72, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x11, 0x73, 0x75, 0x62,
	0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x9a,
	0x03, 0x0a, 0x11, 0x53, 0x65, 0x6e, 0x64, 0x41, 0x73, 0x79, 0x6e, 0x63, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x54, 0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x3e, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x64, 0x69, 0x67, 0x69, 0x74, 0x61,
	0x6c, 0x61, 0x73, 0x73, 0x65, 0x74, 0x2e, 0x63, 0x61, 0x6e, 0x74, 0x6f, 0x6e, 0x2e, 0x64, 0x6f,
	0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x30, 0x2e, 0x53, 0x65, 0x6e, 0x64,
	0x41, 0x73, 0x79, 0x6e, 0x63, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x45, 0x72,
	0x72, 0x6f, 0x72, 0x52, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x1a, 0xae, 0x02, 0x0a, 0x05, 0x45,
	0x72, 0x72, 0x6f, 0x72, 0x12, 0x29, 0x0a, 0x0f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x5f,
	0x69, 0x6e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52,
	0x0e, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x6e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x12,
	0x29, 0x0a, 0x0f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x72, 0x65, 0x66, 0x75, 0x73,
	0x65, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x0e, 0x72, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x52, 0x65, 0x66, 0x75, 0x73, 0x65, 0x64, 0x12, 0x20, 0x0a, 0x0a, 0x6f, 0x76,
	0x65, 0x72, 0x6c, 0x6f, 0x61, 0x64, 0x65, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00,
	0x52, 0x0a, 0x6f, 0x76, 0x65, 0x72, 0x6c, 0x6f, 0x61, 0x64, 0x65, 0x64, 0x12, 0x27, 0x0a, 0x0e,
	0x73, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x5f, 0x75, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x0d, 0x73, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x55, 0x6e,
	0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x12, 0x25, 0x0a, 0x0d, 0x73, 0x68, 0x75, 0x74, 0x74, 0x69, 0x6e,
	0x67, 0x5f, 0x64, 0x6f, 0x77, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x0c,
	0x73, 0x68, 0x75, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x44, 0x6f, 0x77, 0x6e, 0x12, 0x22, 0x0a, 0x0b,
	0x75, 0x6e, 0x61, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x09, 0x48, 0x00, 0x52, 0x0b, 0x75, 0x6e, 0x61, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65,
	0x12, 0x2f, 0x0a, 0x12, 0x75, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x5f, 0x72, 0x65, 0x63, 0x69,
	0x70, 0x69, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x11,
	0x75, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x52, 0x65, 0x63, 0x69, 0x70, 0x69, 0x65, 0x6e, 0x74,
	0x73, 0x42, 0x08, 0x0a, 0x06, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x22, 0xe0, 0x03, 0x0a, 0x17,
	0x53, 0x65, 0x6e, 0x64, 0x41, 0x73, 0x79, 0x6e, 0x63, 0x53, 0x69, 0x67, 0x6e, 0x65, 0x64, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x5a, 0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x44, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x64, 0x69, 0x67,
	0x69, 0x74, 0x61, 0x6c, 0x61, 0x73, 0x73, 0x65, 0x74, 0x2e, 0x63, 0x61, 0x6e, 0x74, 0x6f, 0x6e,
	0x2e, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x30, 0x2e, 0x53,
	0x65, 0x6e, 0x64, 0x41, 0x73, 0x79, 0x6e, 0x63, 0x53, 0x69, 0x67, 0x6e, 0x65, 0x64, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x52, 0x05, 0x65, 0x72,
	0x72, 0x6f, 0x72, 0x1a, 0xe8, 0x02, 0x0a, 0x05, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x12, 0x29, 0x0a,
	0x0f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x69, 0x6e, 0x76, 0x61, 0x6c, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x0e, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x49, 0x6e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x12, 0x29, 0x0a, 0x0f, 0x72, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x5f, 0x72, 0x65, 0x66, 0x75, 0x73, 0x65, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x48, 0x00, 0x52, 0x0e, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x65, 0x66, 0x75,
	0x73, 0x65, 0x64, 0x12, 0x20, 0x0a, 0x0a, 0x6f, 0x76, 0x65, 0x72, 0x6c, 0x6f, 0x61, 0x64, 0x65,
	0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x0a, 0x6f, 0x76, 0x65, 0x72, 0x6c,
	0x6f, 0x61, 0x64, 0x65, 0x64, 0x12, 0x27, 0x0a, 0x0e, 0x73, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x5f,
	0x75, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52,
	0x0d, 0x73, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x55, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x12, 0x25,
	0x0a, 0x0d, 0x73, 0x68, 0x75, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x64, 0x6f, 0x77, 0x6e, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x0c, 0x73, 0x68, 0x75, 0x74, 0x74, 0x69, 0x6e,
	0x67, 0x44, 0x6f, 0x77, 0x6e, 0x12, 0x22, 0x0a, 0x0b, 0x75, 0x6e, 0x61, 0x76, 0x61, 0x69, 0x6c,
	0x61, 0x62, 0x6c, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x0b, 0x75, 0x6e,
	0x61, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x2f, 0x0a, 0x12, 0x75, 0x6e, 0x6b,
	0x6e, 0x6f, 0x77, 0x6e, 0x5f, 0x72, 0x65, 0x63, 0x69, 0x70, 0x69, 0x65, 0x6e, 0x74, 0x73, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x11, 0x75, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e,
	0x52, 0x65, 0x63, 0x69, 0x70, 0x69, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x1c, 0x0a, 0x08, 0x69, 0x6e,
	0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x08,
	0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x12, 0x1a, 0x0a, 0x07, 0x67, 0x65, 0x6e, 0x65,
	0x72, 0x69, 0x63, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x07, 0x67, 0x65, 0x6e,
	0x65, 0x72, 0x69, 0x63, 0x42, 0x08, 0x0a, 0x06, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x22, 0x47,
	0x0a, 0x13, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x18, 0x0a,
	0x07, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x22, 0xcf, 0x01, 0x0a, 0x14, 0x53, 0x75, 0x62, 0x73,
	0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x68, 0x0a, 0x16, 0x73, 0x69, 0x67, 0x6e, 0x65, 0x64, 0x5f, 0x73, 0x65, 0x71, 0x75, 0x65,
	0x6e, 0x63, 0x65, 0x64, 0x5f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x32, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x64, 0x69, 0x67, 0x69, 0x74, 0x61, 0x6c, 0x61, 0x73,
	0x73, 0x65, 0x74, 0x2e, 0x63, 0x61, 0x6e, 0x74, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x63, 0x6f, 0x6c, 0x2e, 0x76, 0x30, 0x2e, 0x53, 0x69, 0x67, 0x6e, 0x65, 0x64, 0x43, 0x6f, 0x6e,
	0x74, 0x65, 0x6e, 0x74, 0x52, 0x14, 0x73, 0x69, 0x67, 0x6e, 0x65, 0x64, 0x53, 0x65, 0x71, 0x75,
	0x65, 0x6e, 0x63, 0x65, 0x64, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x4d, 0x0a, 0x0d, 0x74, 0x72,
	0x61, 0x63, 0x65, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x28, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x64, 0x69, 0x67, 0x69, 0x74, 0x61, 0x6c, 0x61,
	0x73, 0x73, 0x65, 0x74, 0x2e, 0x63, 0x61, 0x6e, 0x74, 0x6f, 0x6e, 0x2e, 0x76, 0x30, 0x2e, 0x54,
	0x72, 0x61, 0x63, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x52, 0x0c, 0x74, 0x72, 0x61,
	0x63, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x22, 0x8c, 0x02, 0x0a, 0x1d, 0x56, 0x65,
	0x72, 0x73, 0x69, 0x6f, 0x6e, 0x65, 0x64, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x34, 0x0a, 0x16, 0x73,
	0x69, 0x67, 0x6e, 0x65, 0x64, 0x5f, 0x73, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x64, 0x5f,
	0x65, 0x76, 0x65, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x14, 0x73, 0x69, 0x67,
	0x6e, 0x65, 0x64, 0x53, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x64, 0x45, 0x76, 0x65, 0x6e,
	0x74, 0x12, 0x4d, 0x0a, 0x0d, 0x74, 0x72, 0x61, 0x63, 0x65, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x65,
	0x78, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x64,
	0x69, 0x67, 0x69, 0x74, 0x61, 0x6c, 0x61, 0x73, 0x73, 0x65, 0x74, 0x2e, 0x63, 0x61, 0x6e, 0x74,
	0x6f, 0x6e, 0x2e, 0x76, 0x30, 0x2e, 0x54, 0x72, 0x61, 0x63, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x65,
	0x78, 0x74, 0x52, 0x0c, 0x74, 0x72, 0x61, 0x63, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74,
	0x12, 0x66, 0x0a, 0x0d, 0x74, 0x72, 0x61, 0x66, 0x66, 0x69, 0x63, 0x5f, 0x73, 0x74, 0x61, 0x74,
	0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x41, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x64, 0x69,
	0x67, 0x69, 0x74, 0x61, 0x6c, 0x61, 0x73, 0x73, 0x65, 0x74, 0x2e, 0x63, 0x61, 0x6e, 0x74, 0x6f,
	0x6e, 0x2e, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x30, 0x2e,
	0x53, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x64, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x54, 0x72,
	0x61, 0x66, 0x66, 0x69, 0x63, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x0c, 0x74, 0x72, 0x61, 0x66,
	0x66, 0x69, 0x63, 0x53, 0x74, 0x61, 0x74, 0x65, 0x22, 0x66, 0x0a, 0x12, 0x41, 0x63, 0x6b, 0x6e,
	0x6f, 0x77, 0x6c, 0x65, 0x64, 0x67, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x16,
	0x0a, 0x06, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06,
	0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x38, 0x0a, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74,
	0x61, 0x6d, 0x70, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65,
	0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70,
	0x22, 0x8a, 0x01, 0x0a, 0x1a, 0x53, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x64, 0x45, 0x76,
	0x65, 0x6e, 0x74, 0x54, 0x72, 0x61, 0x66, 0x66, 0x69, 0x63, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12,
	0x36, 0x0a, 0x17, 0x65, 0x78, 0x74, 0x72, 0x61, 0x5f, 0x74, 0x72, 0x61, 0x66, 0x66, 0x69, 0x63,
	0x5f, 0x72, 0x65, 0x6d, 0x61, 0x69, 0x6e, 0x64, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x15, 0x65, 0x78, 0x74, 0x72, 0x61, 0x54, 0x72, 0x61, 0x66, 0x66, 0x69, 0x63, 0x52, 0x65,
	0x6d, 0x61, 0x69, 0x6e, 0x64, 0x65, 0x72, 0x12, 0x34, 0x0a, 0x16, 0x65, 0x78, 0x74, 0x72, 0x61,
	0x5f, 0x74, 0x72, 0x61, 0x66, 0x66, 0x69, 0x63, 0x5f, 0x63, 0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x65,
	0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x14, 0x65, 0x78, 0x74, 0x72, 0x61, 0x54, 0x72,
	0x61, 0x66, 0x66, 0x69, 0x63, 0x43, 0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x65, 0x64, 0x32, 0x9b, 0x0c,
	0x0a, 0x10, 0x53, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x12, 0x7d, 0x0a, 0x09, 0x53, 0x65, 0x6e, 0x64, 0x41, 0x73, 0x79, 0x6e, 0x63, 0x12,
	0x36, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x64, 0x69, 0x67, 0x69, 0x74, 0x61, 0x6c, 0x61, 0x73, 0x73,
	0x65, 0x74, 0x2e, 0x63, 0x61, 0x6e, 0x74, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63,
	0x6f, 0x6c, 0x2e, 0x76, 0x30, 0x2e, 0x53, 0x75, 0x62, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x38, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x64, 0x69,
	0x67, 0x69, 0x74, 0x61, 0x6c, 0x61, 0x73, 0x73, 0x65, 0x74, 0x2e, 0x63, 0x61, 0x6e, 0x74, 0x6f,
	0x6e, 0x2e, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x30, 0x2e,
	0x53, 0x65, 0x6e, 0x64, 0x41, 0x73, 0x79, 0x6e, 0x63, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x85, 0x01, 0x0a, 0x0f, 0x53, 0x65, 0x6e, 0x64, 0x41, 0x73, 0x79, 0x6e, 0x63, 0x53,
	0x69, 0x67, 0x6e, 0x65, 0x64, 0x12, 0x32, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x64, 0x69, 0x67, 0x69,
	0x74, 0x61, 0x6c, 0x61, 0x73, 0x73, 0x65, 0x74, 0x2e, 0x63, 0x61, 0x6e, 0x74, 0x6f, 0x6e, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x76, 0x30, 0x2e, 0x53, 0x69, 0x67, 0x6e,
	0x65, 0x64, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x1a, 0x3e, 0x2e, 0x63, 0x6f, 0x6d, 0x2e,
	0x64, 0x69, 0x67, 0x69, 0x74, 0x61, 0x6c, 0x61, 0x73, 0x73, 0x65, 0x74, 0x2e, 0x63, 0x61, 0x6e,
	0x74, 0x6f, 0x6e, 0x2e, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76,
	0x30, 0x2e, 0x53, 0x65, 0x6e, 0x64, 0x41, 0x73, 0x79, 0x6e, 0x63, 0x53, 0x69, 0x67, 0x6e, 0x65,
	0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x8c, 0x01, 0x0a, 0x18, 0x53, 0x65,
	0x6e, 0x64, 0x41, 0x73, 0x79, 0x6e, 0x63, 0x55, 0x6e, 0x61, 0x75, 0x74, 0x68, 0x65, 0x6e, 0x74,
	0x69, 0x63, 0x61, 0x74, 0x65, 0x64, 0x12, 0x36, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x64, 0x69, 0x67,
	0x69, 0x74, 0x61, 0x6c, 0x61, 0x73, 0x73, 0x65, 0x74, 0x2e, 0x63, 0x61, 0x6e, 0x74, 0x6f, 0x6e,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x76, 0x30, 0x2e, 0x53, 0x75, 0x62,
	0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x38,
	0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x64, 0x69, 0x67, 0x69, 0x74, 0x61, 0x6c, 0x61, 0x73, 0x73, 0x65,
	0x74, 0x2e, 0x63, 0x61, 0x6e, 0x74, 0x6f, 0x6e, 0x2e, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x76, 0x30, 0x2e, 0x53, 0x65, 0x6e, 0x64, 0x41, 0x73, 0x79, 0x6e, 0x63,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x96, 0x01, 0x0a, 0x12, 0x53, 0x65, 0x6e,
	0x64, 0x41, 0x73, 0x79, 0x6e, 0x63, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x65, 0x64, 0x12,
	0x40, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x64, 0x69, 0x67, 0x69, 0x74, 0x61, 0x6c, 0x61, 0x73, 0x73,
	0x65, 0x74, 0x2e, 0x63, 0x61, 0x6e, 0x74, 0x6f, 0x6e, 0x2e, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x30, 0x2e, 0x53, 0x65, 0x6e, 0x64, 0x41, 0x73, 0x79, 0x6e,
	0x63, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x65, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x3e, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x64, 0x69, 0x67, 0x69, 0x74, 0x61, 0x6c, 0x61,
	0x73, 0x73, 0x65, 0x74, 0x2e, 0x63, 0x61, 0x6e, 0x74, 0x6f, 0x6e, 0x2e, 0x64, 0x6f, 0x6d, 0x61,
	0x69, 0x6e, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x30, 0x2e, 0x53, 0x65, 0x6e, 0x64, 0x41, 0x73,
	0x79, 0x6e, 0x63, 0x53, 0x69, 0x67, 0x6e, 0x65, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0xae, 0x01, 0x0a, 0x21, 0x53, 0x65, 0x6e, 0x64, 0x41, 0x73, 0x79, 0x6e, 0x63, 0x55,
	0x6e, 0x61, 0x75, 0x74, 0x68, 0x65, 0x6e, 0x74, 0x69, 0x63, 0x61, 0x74, 0x65, 0x64, 0x56, 0x65,
	0x72, 0x73, 0x69, 0x6f, 0x6e, 0x65, 0x64, 0x12, 0x4f, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x64, 0x69,
	0x67, 0x69, 0x74, 0x61, 0x6c, 0x61, 0x73, 0x73, 0x65, 0x74, 0x2e, 0x63, 0x61, 0x6e, 0x74, 0x6f,
	0x6e, 0x2e, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x30, 0x2e,
	0x53, 0x65, 0x6e, 0x64, 0x41, 0x73, 0x79, 0x6e, 0x63, 0x55, 0x6e, 0x61, 0x75, 0x74, 0x68, 0x65,
	0x6e, 0x74, 0x69, 0x63, 0x61, 0x74, 0x65, 0x64, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x65,
	0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x38, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x64,
	0x69, 0x67, 0x69, 0x74, 0x61, 0x6c, 0x61, 0x73, 0x73, 0x65, 0x74, 0x2e, 0x63, 0x61, 0x6e, 0x74,
	0x6f, 0x6e, 0x2e, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x30,
	0x2e, 0x53, 0x65, 0x6e, 0x64, 0x41, 0x73, 0x79, 0x6e, 0x63, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x86, 0x01, 0x0a, 0x09, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65,
	0x12, 0x3a, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x64, 0x69, 0x67, 0x69, 0x74, 0x61, 0x6c, 0x61, 0x73,
	0x73, 0x65, 0x74, 0x2e, 0x63, 0x61, 0x6e, 0x74, 0x6f, 0x6e, 0x2e, 0x64, 0x6f, 0x6d, 0x61, 0x69,
	0x6e, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x30, 0x2e, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x3b, 0x2e, 0x63,
	0x6f, 0x6d, 0x2e, 0x64, 0x69, 0x67, 0x69, 0x74, 0x61, 0x6c, 0x61, 0x73, 0x73, 0x65, 0x74, 0x2e,
	0x63, 0x61, 0x6e, 0x74, 0x6f, 0x6e, 0x2e, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x76, 0x30, 0x2e, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x30, 0x01, 0x12, 0x98, 0x01, 0x0a, 0x12,
	0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e,
	0x65, 0x64, 0x12, 0x3a, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x64, 0x69, 0x67, 0x69, 0x74, 0x61, 0x6c,
	0x61, 0x73, 0x73, 0x65, 0x74, 0x2e, 0x63, 0x61, 0x6e, 0x74, 0x6f, 0x6e, 0x2e, 0x64, 0x6f, 0x6d,
	0x61, 0x69, 0x6e, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x30, 0x2e, 0x53, 0x75, 0x62, 0x73, 0x63,
	0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x44,
	0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x64, 0x69, 0x67, 0x69, 0x74, 0x61, 0x6c, 0x61, 0x73, 0x73, 0x65,
	0x74, 0x2e, 0x63, 0x61, 0x6e, 0x74, 0x6f, 0x6e, 0x2e, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x76, 0x30, 0x2e, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x65, 0x64,
	0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x30, 0x01, 0x12, 0x95, 0x01, 0x0a, 0x18, 0x53, 0x75, 0x62, 0x73, 0x63,
	0x72, 0x69, 0x62, 0x65, 0x55, 0x6e, 0x61, 0x75, 0x74, 0x68, 0x65, 0x6e, 0x74, 0x69, 0x63, 0x61,
	0x74, 0x65, 0x64, 0x12, 0x3a, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x64, 0x69, 0x67, 0x69, 0x74, 0x61,
	0x6c, 0x61, 0x73, 0x73, 0x65, 0x74, 0x2e, 0x63, 0x61, 0x6e, 0x74, 0x6f, 0x6e, 0x2e, 0x64, 0x6f,
	0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x30, 0x2e, 0x53, 0x75, 0x62, 0x73,
	0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x3b, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x64, 0x69, 0x67, 0x69, 0x74, 0x61, 0x6c, 0x61, 0x73, 0x73,
	0x65, 0x74, 0x2e, 0x63, 0x61, 0x6e, 0x74, 0x6f, 0x6e, 0x2e, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x30, 0x2e, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x30, 0x01, 0x12, 0xa7,
	0x01, 0x0a, 0x21, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x55, 0x6e, 0x61, 0x75,
	0x74, 0x68, 0x65, 0x6e, 0x74, 0x69, 0x63, 0x61, 0x74, 0x65, 0x64, 0x56, 0x65, 0x72, 0x73, 0x69,
	0x6f, 0x6e, 0x65, 0x64, 0x12, 0x3a, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x64, 0x69, 0x67, 0x69, 0x74,
	0x61, 0x6c, 0x61, 0x73, 0x73, 0x65, 0x74, 0x2e, 0x63, 0x61, 0x6e, 0x74, 0x6f, 0x6e, 0x2e, 0x64,
	0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x30, 0x2e, 0x53, 0x75, 0x62,
	0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x44, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x64, 0x69, 0x67, 0x69, 0x74, 0x61, 0x6c, 0x61, 0x73,
	0x73, 0x65, 0x74, 0x2e, 0x63, 0x61, 0x6e, 0x74, 0x6f, 0x6e, 0x2e, 0x64, 0x6f, 0x6d, 0x61, 0x69,
	0x6e, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x30, 0x2e, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e,
	0x65, 0x64, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x30, 0x01, 0x12, 0x60, 0x0a, 0x0b, 0x41, 0x63, 0x6b, 0x6e,
	0x6f, 0x77, 0x6c, 0x65, 0x64, 0x67, 0x65, 0x12, 0x39, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x64, 0x69,
	0x67, 0x69, 0x74, 0x61, 0x6c, 0x61, 0x73, 0x73, 0x65, 0x74, 0x2e, 0x63, 0x61, 0x6e, 0x74, 0x6f,
	0x6e, 0x2e, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x30, 0x2e,
	0x41, 0x63, 0x6b, 0x6e, 0x6f, 0x77, 0x6c, 0x65, 0x64, 0x67, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x12, 0x5f, 0x0a, 0x11, 0x41, 0x63,
	0x6b, 0x6e, 0x6f, 0x77, 0x6c, 0x65, 0x64, 0x67, 0x65, 0x53, 0x69, 0x67, 0x6e, 0x65, 0x64, 0x12,
	0x32, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x64, 0x69, 0x67, 0x69, 0x74, 0x61, 0x6c, 0x61, 0x73, 0x73,
	0x65, 0x74, 0x2e, 0x63, 0x61, 0x6e, 0x74, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63,
	0x6f, 0x6c, 0x2e, 0x76, 0x30, 0x2e, 0x53, 0x69, 0x67, 0x6e, 0x65, 0x64, 0x43, 0x6f, 0x6e, 0x74,
	0x65, 0x6e, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x42, 0x56, 0x5a, 0x54, 0x67,
	0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x64, 0x69, 0x67, 0x69, 0x74, 0x61,
	0x6c, 0x2d, 0x61, 0x73, 0x73, 0x65, 0x74, 0x2f, 0x64, 0x61, 0x7a, 0x6c, 0x2d, 0x63, 0x6c, 0x69,
	0x65, 0x6e, 0x74, 0x2f, 0x76, 0x38, 0x2f, 0x67, 0x6f, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x63, 0x6f,
	0x6d, 0x2f, 0x64, 0x69, 0x67, 0x69, 0x74, 0x61, 0x6c, 0x61, 0x73, 0x73, 0x65, 0x74, 0x2f, 0x63,
	0x61, 0x6e, 0x74, 0x6f, 0x6e, 0x2f, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x2f, 0x61, 0x70, 0x69,
	0x2f, 0x76, 0x30, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_com_digitalasset_canton_domain_api_v0_sequencer_service_proto_rawDescOnce sync.Once
	file_com_digitalasset_canton_domain_api_v0_sequencer_service_proto_rawDescData = file_com_digitalasset_canton_domain_api_v0_sequencer_service_proto_rawDesc
)

func file_com_digitalasset_canton_domain_api_v0_sequencer_service_proto_rawDescGZIP() []byte {
	file_com_digitalasset_canton_domain_api_v0_sequencer_service_proto_rawDescOnce.Do(func() {
		file_com_digitalasset_canton_domain_api_v0_sequencer_service_proto_rawDescData = protoimpl.X.CompressGZIP(file_com_digitalasset_canton_domain_api_v0_sequencer_service_proto_rawDescData)
	})
	return file_com_digitalasset_canton_domain_api_v0_sequencer_service_proto_rawDescData
}

var file_com_digitalasset_canton_domain_api_v0_sequencer_service_proto_msgTypes = make([]protoimpl.MessageInfo, 11)
var file_com_digitalasset_canton_domain_api_v0_sequencer_service_proto_goTypes = []any{
	(*SendAsyncVersionedRequest)(nil),                // 0: com.digitalasset.canton.domain.api.v0.SendAsyncVersionedRequest
	(*SendAsyncUnauthenticatedVersionedRequest)(nil), // 1: com.digitalasset.canton.domain.api.v0.SendAsyncUnauthenticatedVersionedRequest
	(*SendAsyncResponse)(nil),                        // 2: com.digitalasset.canton.domain.api.v0.SendAsyncResponse
	(*SendAsyncSignedResponse)(nil),                  // 3: com.digitalasset.canton.domain.api.v0.SendAsyncSignedResponse
	(*SubscriptionRequest)(nil),                      // 4: com.digitalasset.canton.domain.api.v0.SubscriptionRequest
	(*SubscriptionResponse)(nil),                     // 5: com.digitalasset.canton.domain.api.v0.SubscriptionResponse
	(*VersionedSubscriptionResponse)(nil),            // 6: com.digitalasset.canton.domain.api.v0.VersionedSubscriptionResponse
	(*AcknowledgeRequest)(nil),                       // 7: com.digitalasset.canton.domain.api.v0.AcknowledgeRequest
	(*SequencedEventTrafficState)(nil),               // 8: com.digitalasset.canton.domain.api.v0.SequencedEventTrafficState
	(*SendAsyncResponse_Error)(nil),                  // 9: com.digitalasset.canton.domain.api.v0.SendAsyncResponse.Error
	(*SendAsyncSignedResponse_Error)(nil),            // 10: com.digitalasset.canton.domain.api.v0.SendAsyncSignedResponse.Error
	(*v0.SignedContent)(nil),                         // 11: com.digitalasset.canton.protocol.v0.SignedContent
	(*v01.TraceContext)(nil),                         // 12: com.digitalasset.canton.v0.TraceContext
	(*timestamppb.Timestamp)(nil),                    // 13: google.protobuf.Timestamp
	(*v0.SubmissionRequest)(nil),                     // 14: com.digitalasset.canton.protocol.v0.SubmissionRequest
	(*emptypb.Empty)(nil),                            // 15: google.protobuf.Empty
}
var file_com_digitalasset_canton_domain_api_v0_sequencer_service_proto_depIdxs = []int32{
	9,  // 0: com.digitalasset.canton.domain.api.v0.SendAsyncResponse.error:type_name -> com.digitalasset.canton.domain.api.v0.SendAsyncResponse.Error
	10, // 1: com.digitalasset.canton.domain.api.v0.SendAsyncSignedResponse.error:type_name -> com.digitalasset.canton.domain.api.v0.SendAsyncSignedResponse.Error
	11, // 2: com.digitalasset.canton.domain.api.v0.SubscriptionResponse.signed_sequenced_event:type_name -> com.digitalasset.canton.protocol.v0.SignedContent
	12, // 3: com.digitalasset.canton.domain.api.v0.SubscriptionResponse.trace_context:type_name -> com.digitalasset.canton.v0.TraceContext
	12, // 4: com.digitalasset.canton.domain.api.v0.VersionedSubscriptionResponse.trace_context:type_name -> com.digitalasset.canton.v0.TraceContext
	8,  // 5: com.digitalasset.canton.domain.api.v0.VersionedSubscriptionResponse.traffic_state:type_name -> com.digitalasset.canton.domain.api.v0.SequencedEventTrafficState
	13, // 6: com.digitalasset.canton.domain.api.v0.AcknowledgeRequest.timestamp:type_name -> google.protobuf.Timestamp
	14, // 7: com.digitalasset.canton.domain.api.v0.SequencerService.SendAsync:input_type -> com.digitalasset.canton.protocol.v0.SubmissionRequest
	11, // 8: com.digitalasset.canton.domain.api.v0.SequencerService.SendAsyncSigned:input_type -> com.digitalasset.canton.protocol.v0.SignedContent
	14, // 9: com.digitalasset.canton.domain.api.v0.SequencerService.SendAsyncUnauthenticated:input_type -> com.digitalasset.canton.protocol.v0.SubmissionRequest
	0,  // 10: com.digitalasset.canton.domain.api.v0.SequencerService.SendAsyncVersioned:input_type -> com.digitalasset.canton.domain.api.v0.SendAsyncVersionedRequest
	1,  // 11: com.digitalasset.canton.domain.api.v0.SequencerService.SendAsyncUnauthenticatedVersioned:input_type -> com.digitalasset.canton.domain.api.v0.SendAsyncUnauthenticatedVersionedRequest
	4,  // 12: com.digitalasset.canton.domain.api.v0.SequencerService.Subscribe:input_type -> com.digitalasset.canton.domain.api.v0.SubscriptionRequest
	4,  // 13: com.digitalasset.canton.domain.api.v0.SequencerService.SubscribeVersioned:input_type -> com.digitalasset.canton.domain.api.v0.SubscriptionRequest
	4,  // 14: com.digitalasset.canton.domain.api.v0.SequencerService.SubscribeUnauthenticated:input_type -> com.digitalasset.canton.domain.api.v0.SubscriptionRequest
	4,  // 15: com.digitalasset.canton.domain.api.v0.SequencerService.SubscribeUnauthenticatedVersioned:input_type -> com.digitalasset.canton.domain.api.v0.SubscriptionRequest
	7,  // 16: com.digitalasset.canton.domain.api.v0.SequencerService.Acknowledge:input_type -> com.digitalasset.canton.domain.api.v0.AcknowledgeRequest
	11, // 17: com.digitalasset.canton.domain.api.v0.SequencerService.AcknowledgeSigned:input_type -> com.digitalasset.canton.protocol.v0.SignedContent
	2,  // 18: com.digitalasset.canton.domain.api.v0.SequencerService.SendAsync:output_type -> com.digitalasset.canton.domain.api.v0.SendAsyncResponse
	3,  // 19: com.digitalasset.canton.domain.api.v0.SequencerService.SendAsyncSigned:output_type -> com.digitalasset.canton.domain.api.v0.SendAsyncSignedResponse
	2,  // 20: com.digitalasset.canton.domain.api.v0.SequencerService.SendAsyncUnauthenticated:output_type -> com.digitalasset.canton.domain.api.v0.SendAsyncResponse
	3,  // 21: com.digitalasset.canton.domain.api.v0.SequencerService.SendAsyncVersioned:output_type -> com.digitalasset.canton.domain.api.v0.SendAsyncSignedResponse
	2,  // 22: com.digitalasset.canton.domain.api.v0.SequencerService.SendAsyncUnauthenticatedVersioned:output_type -> com.digitalasset.canton.domain.api.v0.SendAsyncResponse
	5,  // 23: com.digitalasset.canton.domain.api.v0.SequencerService.Subscribe:output_type -> com.digitalasset.canton.domain.api.v0.SubscriptionResponse
	6,  // 24: com.digitalasset.canton.domain.api.v0.SequencerService.SubscribeVersioned:output_type -> com.digitalasset.canton.domain.api.v0.VersionedSubscriptionResponse
	5,  // 25: com.digitalasset.canton.domain.api.v0.SequencerService.SubscribeUnauthenticated:output_type -> com.digitalasset.canton.domain.api.v0.SubscriptionResponse
	6,  // 26: com.digitalasset.canton.domain.api.v0.SequencerService.SubscribeUnauthenticatedVersioned:output_type -> com.digitalasset.canton.domain.api.v0.VersionedSubscriptionResponse
	15, // 27: com.digitalasset.canton.domain.api.v0.SequencerService.Acknowledge:output_type -> google.protobuf.Empty
	15, // 28: com.digitalasset.canton.domain.api.v0.SequencerService.AcknowledgeSigned:output_type -> google.protobuf.Empty
	18, // [18:29] is the sub-list for method output_type
	7,  // [7:18] is the sub-list for method input_type
	7,  // [7:7] is the sub-list for extension type_name
	7,  // [7:7] is the sub-list for extension extendee
	0,  // [0:7] is the sub-list for field type_name
}

func init() { file_com_digitalasset_canton_domain_api_v0_sequencer_service_proto_init() }
func file_com_digitalasset_canton_domain_api_v0_sequencer_service_proto_init() {
	if File_com_digitalasset_canton_domain_api_v0_sequencer_service_proto != nil {
		return
	}
	file_com_digitalasset_canton_domain_api_v0_sequencer_service_proto_msgTypes[9].OneofWrappers = []any{
		(*SendAsyncResponse_Error_RequestInvalid)(nil),
		(*SendAsyncResponse_Error_RequestRefused)(nil),
		(*SendAsyncResponse_Error_Overloaded)(nil),
		(*SendAsyncResponse_Error_SenderUnknown)(nil),
		(*SendAsyncResponse_Error_ShuttingDown)(nil),
		(*SendAsyncResponse_Error_Unavailable)(nil),
		(*SendAsyncResponse_Error_UnknownRecipients)(nil),
	}
	file_com_digitalasset_canton_domain_api_v0_sequencer_service_proto_msgTypes[10].OneofWrappers = []any{
		(*SendAsyncSignedResponse_Error_RequestInvalid)(nil),
		(*SendAsyncSignedResponse_Error_RequestRefused)(nil),
		(*SendAsyncSignedResponse_Error_Overloaded)(nil),
		(*SendAsyncSignedResponse_Error_SenderUnknown)(nil),
		(*SendAsyncSignedResponse_Error_ShuttingDown)(nil),
		(*SendAsyncSignedResponse_Error_Unavailable)(nil),
		(*SendAsyncSignedResponse_Error_UnknownRecipients)(nil),
		(*SendAsyncSignedResponse_Error_Internal)(nil),
		(*SendAsyncSignedResponse_Error_Generic)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_com_digitalasset_canton_domain_api_v0_sequencer_service_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   11,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_com_digitalasset_canton_domain_api_v0_sequencer_service_proto_goTypes,
		DependencyIndexes: file_com_digitalasset_canton_domain_api_v0_sequencer_service_proto_depIdxs,
		MessageInfos:      file_com_digitalasset_canton_domain_api_v0_sequencer_service_proto_msgTypes,
	}.Build()
	File_com_digitalasset_canton_domain_api_v0_sequencer_service_proto = out.File
	file_com_digitalasset_canton_domain_api_v0_sequencer_service_proto_rawDesc = nil
	file_com_digitalasset_canton_domain_api_v0_sequencer_service_proto_goTypes = nil
	file_com_digitalasset_canton_domain_api_v0_sequencer_service_proto_depIdxs = nil
}
