// Copyright (c) 2017-2025 Digital Asset (Switzerland) GmbH and/or its affiliates. All rights reserved.
// SPDX-License-Identifier: Apache-2.0
// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.35.2
// 	protoc        v5.27.2
// source: com/digitalasset/canton/domain/api/v30/sequencer_service.proto

package v30

import (
	v302 "github.com/digital-asset/dazl-client/v8/go/api/com/digitalasset/canton/protocol/v30"
	v301 "github.com/digital-asset/dazl-client/v8/go/api/com/digitalasset/canton/topology/admin/v30"
	v30 "github.com/digital-asset/dazl-client/v8/go/api/com/digitalasset/canton/v30"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type SendAsyncVersionedRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SignedSubmissionRequest []byte `protobuf:"bytes,1,opt,name=signed_submission_request,json=signedSubmissionRequest,proto3" json:"signed_submission_request,omitempty"`
}

func (x *SendAsyncVersionedRequest) Reset() {
	*x = SendAsyncVersionedRequest{}
	mi := &file_com_digitalasset_canton_domain_api_v30_sequencer_service_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SendAsyncVersionedRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SendAsyncVersionedRequest) ProtoMessage() {}

func (x *SendAsyncVersionedRequest) ProtoReflect() protoreflect.Message {
	mi := &file_com_digitalasset_canton_domain_api_v30_sequencer_service_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SendAsyncVersionedRequest.ProtoReflect.Descriptor instead.
func (*SendAsyncVersionedRequest) Descriptor() ([]byte, []int) {
	return file_com_digitalasset_canton_domain_api_v30_sequencer_service_proto_rawDescGZIP(), []int{0}
}

func (x *SendAsyncVersionedRequest) GetSignedSubmissionRequest() []byte {
	if x != nil {
		return x.SignedSubmissionRequest
	}
	return nil
}

type TrafficControlErrorReason struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Error *TrafficControlErrorReason_Error `protobuf:"bytes,1,opt,name=error,proto3" json:"error,omitempty"`
}

func (x *TrafficControlErrorReason) Reset() {
	*x = TrafficControlErrorReason{}
	mi := &file_com_digitalasset_canton_domain_api_v30_sequencer_service_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TrafficControlErrorReason) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TrafficControlErrorReason) ProtoMessage() {}

func (x *TrafficControlErrorReason) ProtoReflect() protoreflect.Message {
	mi := &file_com_digitalasset_canton_domain_api_v30_sequencer_service_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TrafficControlErrorReason.ProtoReflect.Descriptor instead.
func (*TrafficControlErrorReason) Descriptor() ([]byte, []int) {
	return file_com_digitalasset_canton_domain_api_v30_sequencer_service_proto_rawDescGZIP(), []int{1}
}

func (x *TrafficControlErrorReason) GetError() *TrafficControlErrorReason_Error {
	if x != nil {
		return x.Error
	}
	return nil
}

type SendAsyncVersionedResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Error *SendAsyncVersionedResponse_Error `protobuf:"bytes,1,opt,name=error,proto3" json:"error,omitempty"`
}

func (x *SendAsyncVersionedResponse) Reset() {
	*x = SendAsyncVersionedResponse{}
	mi := &file_com_digitalasset_canton_domain_api_v30_sequencer_service_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SendAsyncVersionedResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SendAsyncVersionedResponse) ProtoMessage() {}

func (x *SendAsyncVersionedResponse) ProtoReflect() protoreflect.Message {
	mi := &file_com_digitalasset_canton_domain_api_v30_sequencer_service_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SendAsyncVersionedResponse.ProtoReflect.Descriptor instead.
func (*SendAsyncVersionedResponse) Descriptor() ([]byte, []int) {
	return file_com_digitalasset_canton_domain_api_v30_sequencer_service_proto_rawDescGZIP(), []int{2}
}

func (x *SendAsyncVersionedResponse) GetError() *SendAsyncVersionedResponse_Error {
	if x != nil {
		return x.Error
	}
	return nil
}

type SubscriptionRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Member  string `protobuf:"bytes,1,opt,name=member,proto3" json:"member,omitempty"`
	Counter int64  `protobuf:"varint,2,opt,name=counter,proto3" json:"counter,omitempty"`
}

func (x *SubscriptionRequest) Reset() {
	*x = SubscriptionRequest{}
	mi := &file_com_digitalasset_canton_domain_api_v30_sequencer_service_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SubscriptionRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SubscriptionRequest) ProtoMessage() {}

func (x *SubscriptionRequest) ProtoReflect() protoreflect.Message {
	mi := &file_com_digitalasset_canton_domain_api_v30_sequencer_service_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SubscriptionRequest.ProtoReflect.Descriptor instead.
func (*SubscriptionRequest) Descriptor() ([]byte, []int) {
	return file_com_digitalasset_canton_domain_api_v30_sequencer_service_proto_rawDescGZIP(), []int{3}
}

func (x *SubscriptionRequest) GetMember() string {
	if x != nil {
		return x.Member
	}
	return ""
}

func (x *SubscriptionRequest) GetCounter() int64 {
	if x != nil {
		return x.Counter
	}
	return 0
}

type VersionedSubscriptionResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SignedSequencedEvent []byte            `protobuf:"bytes,1,opt,name=signed_sequenced_event,json=signedSequencedEvent,proto3" json:"signed_sequenced_event,omitempty"`
	TraceContext         *v30.TraceContext `protobuf:"bytes,2,opt,name=trace_context,json=traceContext,proto3" json:"trace_context,omitempty"`
}

func (x *VersionedSubscriptionResponse) Reset() {
	*x = VersionedSubscriptionResponse{}
	mi := &file_com_digitalasset_canton_domain_api_v30_sequencer_service_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *VersionedSubscriptionResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VersionedSubscriptionResponse) ProtoMessage() {}

func (x *VersionedSubscriptionResponse) ProtoReflect() protoreflect.Message {
	mi := &file_com_digitalasset_canton_domain_api_v30_sequencer_service_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VersionedSubscriptionResponse.ProtoReflect.Descriptor instead.
func (*VersionedSubscriptionResponse) Descriptor() ([]byte, []int) {
	return file_com_digitalasset_canton_domain_api_v30_sequencer_service_proto_rawDescGZIP(), []int{4}
}

func (x *VersionedSubscriptionResponse) GetSignedSequencedEvent() []byte {
	if x != nil {
		return x.SignedSequencedEvent
	}
	return nil
}

func (x *VersionedSubscriptionResponse) GetTraceContext() *v30.TraceContext {
	if x != nil {
		return x.TraceContext
	}
	return nil
}

type AcknowledgeRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Member    string `protobuf:"bytes,1,opt,name=member,proto3" json:"member,omitempty"`
	Timestamp int64  `protobuf:"varint,2,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
}

func (x *AcknowledgeRequest) Reset() {
	*x = AcknowledgeRequest{}
	mi := &file_com_digitalasset_canton_domain_api_v30_sequencer_service_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AcknowledgeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AcknowledgeRequest) ProtoMessage() {}

func (x *AcknowledgeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_com_digitalasset_canton_domain_api_v30_sequencer_service_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AcknowledgeRequest.ProtoReflect.Descriptor instead.
func (*AcknowledgeRequest) Descriptor() ([]byte, []int) {
	return file_com_digitalasset_canton_domain_api_v30_sequencer_service_proto_rawDescGZIP(), []int{5}
}

func (x *AcknowledgeRequest) GetMember() string {
	if x != nil {
		return x.Member
	}
	return ""
}

func (x *AcknowledgeRequest) GetTimestamp() int64 {
	if x != nil {
		return x.Timestamp
	}
	return 0
}

type AcknowledgeResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *AcknowledgeResponse) Reset() {
	*x = AcknowledgeResponse{}
	mi := &file_com_digitalasset_canton_domain_api_v30_sequencer_service_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AcknowledgeResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AcknowledgeResponse) ProtoMessage() {}

func (x *AcknowledgeResponse) ProtoReflect() protoreflect.Message {
	mi := &file_com_digitalasset_canton_domain_api_v30_sequencer_service_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AcknowledgeResponse.ProtoReflect.Descriptor instead.
func (*AcknowledgeResponse) Descriptor() ([]byte, []int) {
	return file_com_digitalasset_canton_domain_api_v30_sequencer_service_proto_rawDescGZIP(), []int{6}
}

type AcknowledgeSignedRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SignedAcknowledgeRequest []byte `protobuf:"bytes,1,opt,name=signed_acknowledge_request,json=signedAcknowledgeRequest,proto3" json:"signed_acknowledge_request,omitempty"`
}

func (x *AcknowledgeSignedRequest) Reset() {
	*x = AcknowledgeSignedRequest{}
	mi := &file_com_digitalasset_canton_domain_api_v30_sequencer_service_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AcknowledgeSignedRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AcknowledgeSignedRequest) ProtoMessage() {}

func (x *AcknowledgeSignedRequest) ProtoReflect() protoreflect.Message {
	mi := &file_com_digitalasset_canton_domain_api_v30_sequencer_service_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AcknowledgeSignedRequest.ProtoReflect.Descriptor instead.
func (*AcknowledgeSignedRequest) Descriptor() ([]byte, []int) {
	return file_com_digitalasset_canton_domain_api_v30_sequencer_service_proto_rawDescGZIP(), []int{7}
}

func (x *AcknowledgeSignedRequest) GetSignedAcknowledgeRequest() []byte {
	if x != nil {
		return x.SignedAcknowledgeRequest
	}
	return nil
}

type AcknowledgeSignedResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *AcknowledgeSignedResponse) Reset() {
	*x = AcknowledgeSignedResponse{}
	mi := &file_com_digitalasset_canton_domain_api_v30_sequencer_service_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AcknowledgeSignedResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AcknowledgeSignedResponse) ProtoMessage() {}

func (x *AcknowledgeSignedResponse) ProtoReflect() protoreflect.Message {
	mi := &file_com_digitalasset_canton_domain_api_v30_sequencer_service_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AcknowledgeSignedResponse.ProtoReflect.Descriptor instead.
func (*AcknowledgeSignedResponse) Descriptor() ([]byte, []int) {
	return file_com_digitalasset_canton_domain_api_v30_sequencer_service_proto_rawDescGZIP(), []int{8}
}

type DownloadTopologyStateForInitRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Member string `protobuf:"bytes,1,opt,name=member,proto3" json:"member,omitempty"`
}

func (x *DownloadTopologyStateForInitRequest) Reset() {
	*x = DownloadTopologyStateForInitRequest{}
	mi := &file_com_digitalasset_canton_domain_api_v30_sequencer_service_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DownloadTopologyStateForInitRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DownloadTopologyStateForInitRequest) ProtoMessage() {}

func (x *DownloadTopologyStateForInitRequest) ProtoReflect() protoreflect.Message {
	mi := &file_com_digitalasset_canton_domain_api_v30_sequencer_service_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DownloadTopologyStateForInitRequest.ProtoReflect.Descriptor instead.
func (*DownloadTopologyStateForInitRequest) Descriptor() ([]byte, []int) {
	return file_com_digitalasset_canton_domain_api_v30_sequencer_service_proto_rawDescGZIP(), []int{9}
}

func (x *DownloadTopologyStateForInitRequest) GetMember() string {
	if x != nil {
		return x.Member
	}
	return ""
}

type DownloadTopologyStateForInitResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TopologyTransactions *v301.TopologyTransactions `protobuf:"bytes,1,opt,name=topology_transactions,json=topologyTransactions,proto3" json:"topology_transactions,omitempty"`
}

func (x *DownloadTopologyStateForInitResponse) Reset() {
	*x = DownloadTopologyStateForInitResponse{}
	mi := &file_com_digitalasset_canton_domain_api_v30_sequencer_service_proto_msgTypes[10]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DownloadTopologyStateForInitResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DownloadTopologyStateForInitResponse) ProtoMessage() {}

func (x *DownloadTopologyStateForInitResponse) ProtoReflect() protoreflect.Message {
	mi := &file_com_digitalasset_canton_domain_api_v30_sequencer_service_proto_msgTypes[10]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DownloadTopologyStateForInitResponse.ProtoReflect.Descriptor instead.
func (*DownloadTopologyStateForInitResponse) Descriptor() ([]byte, []int) {
	return file_com_digitalasset_canton_domain_api_v30_sequencer_service_proto_rawDescGZIP(), []int{10}
}

func (x *DownloadTopologyStateForInitResponse) GetTopologyTransactions() *v301.TopologyTransactions {
	if x != nil {
		return x.TopologyTransactions
	}
	return nil
}

type GetTrafficStateForMemberRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Member    string `protobuf:"bytes,1,opt,name=member,proto3" json:"member,omitempty"`
	Timestamp int64  `protobuf:"varint,2,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
}

func (x *GetTrafficStateForMemberRequest) Reset() {
	*x = GetTrafficStateForMemberRequest{}
	mi := &file_com_digitalasset_canton_domain_api_v30_sequencer_service_proto_msgTypes[11]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetTrafficStateForMemberRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetTrafficStateForMemberRequest) ProtoMessage() {}

func (x *GetTrafficStateForMemberRequest) ProtoReflect() protoreflect.Message {
	mi := &file_com_digitalasset_canton_domain_api_v30_sequencer_service_proto_msgTypes[11]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetTrafficStateForMemberRequest.ProtoReflect.Descriptor instead.
func (*GetTrafficStateForMemberRequest) Descriptor() ([]byte, []int) {
	return file_com_digitalasset_canton_domain_api_v30_sequencer_service_proto_rawDescGZIP(), []int{11}
}

func (x *GetTrafficStateForMemberRequest) GetMember() string {
	if x != nil {
		return x.Member
	}
	return ""
}

func (x *GetTrafficStateForMemberRequest) GetTimestamp() int64 {
	if x != nil {
		return x.Timestamp
	}
	return 0
}

type GetTrafficStateForMemberResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TrafficState *v302.TrafficState `protobuf:"bytes,1,opt,name=traffic_state,json=trafficState,proto3" json:"traffic_state,omitempty"`
}

func (x *GetTrafficStateForMemberResponse) Reset() {
	*x = GetTrafficStateForMemberResponse{}
	mi := &file_com_digitalasset_canton_domain_api_v30_sequencer_service_proto_msgTypes[12]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetTrafficStateForMemberResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetTrafficStateForMemberResponse) ProtoMessage() {}

func (x *GetTrafficStateForMemberResponse) ProtoReflect() protoreflect.Message {
	mi := &file_com_digitalasset_canton_domain_api_v30_sequencer_service_proto_msgTypes[12]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetTrafficStateForMemberResponse.ProtoReflect.Descriptor instead.
func (*GetTrafficStateForMemberResponse) Descriptor() ([]byte, []int) {
	return file_com_digitalasset_canton_domain_api_v30_sequencer_service_proto_rawDescGZIP(), []int{12}
}

func (x *GetTrafficStateForMemberResponse) GetTrafficState() *v302.TrafficState {
	if x != nil {
		return x.TrafficState
	}
	return nil
}

type SequencedEventTrafficState struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ExtraTrafficRemainder uint64 `protobuf:"varint,2,opt,name=extra_traffic_remainder,json=extraTrafficRemainder,proto3" json:"extra_traffic_remainder,omitempty"`
	ExtraTrafficConsumed  uint64 `protobuf:"varint,3,opt,name=extra_traffic_consumed,json=extraTrafficConsumed,proto3" json:"extra_traffic_consumed,omitempty"`
}

func (x *SequencedEventTrafficState) Reset() {
	*x = SequencedEventTrafficState{}
	mi := &file_com_digitalasset_canton_domain_api_v30_sequencer_service_proto_msgTypes[13]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SequencedEventTrafficState) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SequencedEventTrafficState) ProtoMessage() {}

func (x *SequencedEventTrafficState) ProtoReflect() protoreflect.Message {
	mi := &file_com_digitalasset_canton_domain_api_v30_sequencer_service_proto_msgTypes[13]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SequencedEventTrafficState.ProtoReflect.Descriptor instead.
func (*SequencedEventTrafficState) Descriptor() ([]byte, []int) {
	return file_com_digitalasset_canton_domain_api_v30_sequencer_service_proto_rawDescGZIP(), []int{13}
}

func (x *SequencedEventTrafficState) GetExtraTrafficRemainder() uint64 {
	if x != nil {
		return x.ExtraTrafficRemainder
	}
	return 0
}

func (x *SequencedEventTrafficState) GetExtraTrafficConsumed() uint64 {
	if x != nil {
		return x.ExtraTrafficConsumed
	}
	return 0
}

type TrafficControlErrorReason_Error struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Reason:
	//
	//	*TrafficControlErrorReason_Error_InsufficientTraffic
	//	*TrafficControlErrorReason_Error_OutdatedTrafficCost
	Reason isTrafficControlErrorReason_Error_Reason `protobuf_oneof:"reason"`
}

func (x *TrafficControlErrorReason_Error) Reset() {
	*x = TrafficControlErrorReason_Error{}
	mi := &file_com_digitalasset_canton_domain_api_v30_sequencer_service_proto_msgTypes[14]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TrafficControlErrorReason_Error) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TrafficControlErrorReason_Error) ProtoMessage() {}

func (x *TrafficControlErrorReason_Error) ProtoReflect() protoreflect.Message {
	mi := &file_com_digitalasset_canton_domain_api_v30_sequencer_service_proto_msgTypes[14]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TrafficControlErrorReason_Error.ProtoReflect.Descriptor instead.
func (*TrafficControlErrorReason_Error) Descriptor() ([]byte, []int) {
	return file_com_digitalasset_canton_domain_api_v30_sequencer_service_proto_rawDescGZIP(), []int{1, 0}
}

func (m *TrafficControlErrorReason_Error) GetReason() isTrafficControlErrorReason_Error_Reason {
	if m != nil {
		return m.Reason
	}
	return nil
}

func (x *TrafficControlErrorReason_Error) GetInsufficientTraffic() string {
	if x, ok := x.GetReason().(*TrafficControlErrorReason_Error_InsufficientTraffic); ok {
		return x.InsufficientTraffic
	}
	return ""
}

func (x *TrafficControlErrorReason_Error) GetOutdatedTrafficCost() string {
	if x, ok := x.GetReason().(*TrafficControlErrorReason_Error_OutdatedTrafficCost); ok {
		return x.OutdatedTrafficCost
	}
	return ""
}

type isTrafficControlErrorReason_Error_Reason interface {
	isTrafficControlErrorReason_Error_Reason()
}

type TrafficControlErrorReason_Error_InsufficientTraffic struct {
	InsufficientTraffic string `protobuf:"bytes,1,opt,name=insufficient_traffic,json=insufficientTraffic,proto3,oneof"`
}

type TrafficControlErrorReason_Error_OutdatedTrafficCost struct {
	OutdatedTrafficCost string `protobuf:"bytes,2,opt,name=outdated_traffic_cost,json=outdatedTrafficCost,proto3,oneof"`
}

func (*TrafficControlErrorReason_Error_InsufficientTraffic) isTrafficControlErrorReason_Error_Reason() {
}

func (*TrafficControlErrorReason_Error_OutdatedTrafficCost) isTrafficControlErrorReason_Error_Reason() {
}

type SendAsyncVersionedResponse_Error struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Reason:
	//
	//	*SendAsyncVersionedResponse_Error_RequestInvalid
	//	*SendAsyncVersionedResponse_Error_RequestRefused
	//	*SendAsyncVersionedResponse_Error_Overloaded
	//	*SendAsyncVersionedResponse_Error_SenderUnknown
	//	*SendAsyncVersionedResponse_Error_ShuttingDown
	//	*SendAsyncVersionedResponse_Error_Unavailable
	//	*SendAsyncVersionedResponse_Error_UnknownRecipients
	//	*SendAsyncVersionedResponse_Error_Internal
	//	*SendAsyncVersionedResponse_Error_Generic
	//	*SendAsyncVersionedResponse_Error_TrafficControl
	Reason isSendAsyncVersionedResponse_Error_Reason `protobuf_oneof:"reason"`
}

func (x *SendAsyncVersionedResponse_Error) Reset() {
	*x = SendAsyncVersionedResponse_Error{}
	mi := &file_com_digitalasset_canton_domain_api_v30_sequencer_service_proto_msgTypes[15]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SendAsyncVersionedResponse_Error) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SendAsyncVersionedResponse_Error) ProtoMessage() {}

func (x *SendAsyncVersionedResponse_Error) ProtoReflect() protoreflect.Message {
	mi := &file_com_digitalasset_canton_domain_api_v30_sequencer_service_proto_msgTypes[15]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SendAsyncVersionedResponse_Error.ProtoReflect.Descriptor instead.
func (*SendAsyncVersionedResponse_Error) Descriptor() ([]byte, []int) {
	return file_com_digitalasset_canton_domain_api_v30_sequencer_service_proto_rawDescGZIP(), []int{2, 0}
}

func (m *SendAsyncVersionedResponse_Error) GetReason() isSendAsyncVersionedResponse_Error_Reason {
	if m != nil {
		return m.Reason
	}
	return nil
}

func (x *SendAsyncVersionedResponse_Error) GetRequestInvalid() string {
	if x, ok := x.GetReason().(*SendAsyncVersionedResponse_Error_RequestInvalid); ok {
		return x.RequestInvalid
	}
	return ""
}

func (x *SendAsyncVersionedResponse_Error) GetRequestRefused() string {
	if x, ok := x.GetReason().(*SendAsyncVersionedResponse_Error_RequestRefused); ok {
		return x.RequestRefused
	}
	return ""
}

func (x *SendAsyncVersionedResponse_Error) GetOverloaded() string {
	if x, ok := x.GetReason().(*SendAsyncVersionedResponse_Error_Overloaded); ok {
		return x.Overloaded
	}
	return ""
}

func (x *SendAsyncVersionedResponse_Error) GetSenderUnknown() string {
	if x, ok := x.GetReason().(*SendAsyncVersionedResponse_Error_SenderUnknown); ok {
		return x.SenderUnknown
	}
	return ""
}

func (x *SendAsyncVersionedResponse_Error) GetShuttingDown() string {
	if x, ok := x.GetReason().(*SendAsyncVersionedResponse_Error_ShuttingDown); ok {
		return x.ShuttingDown
	}
	return ""
}

func (x *SendAsyncVersionedResponse_Error) GetUnavailable() string {
	if x, ok := x.GetReason().(*SendAsyncVersionedResponse_Error_Unavailable); ok {
		return x.Unavailable
	}
	return ""
}

func (x *SendAsyncVersionedResponse_Error) GetUnknownRecipients() string {
	if x, ok := x.GetReason().(*SendAsyncVersionedResponse_Error_UnknownRecipients); ok {
		return x.UnknownRecipients
	}
	return ""
}

func (x *SendAsyncVersionedResponse_Error) GetInternal() string {
	if x, ok := x.GetReason().(*SendAsyncVersionedResponse_Error_Internal); ok {
		return x.Internal
	}
	return ""
}

func (x *SendAsyncVersionedResponse_Error) GetGeneric() string {
	if x, ok := x.GetReason().(*SendAsyncVersionedResponse_Error_Generic); ok {
		return x.Generic
	}
	return ""
}

func (x *SendAsyncVersionedResponse_Error) GetTrafficControl() *TrafficControlErrorReason {
	if x, ok := x.GetReason().(*SendAsyncVersionedResponse_Error_TrafficControl); ok {
		return x.TrafficControl
	}
	return nil
}

type isSendAsyncVersionedResponse_Error_Reason interface {
	isSendAsyncVersionedResponse_Error_Reason()
}

type SendAsyncVersionedResponse_Error_RequestInvalid struct {
	RequestInvalid string `protobuf:"bytes,1,opt,name=request_invalid,json=requestInvalid,proto3,oneof"`
}

type SendAsyncVersionedResponse_Error_RequestRefused struct {
	RequestRefused string `protobuf:"bytes,2,opt,name=request_refused,json=requestRefused,proto3,oneof"`
}

type SendAsyncVersionedResponse_Error_Overloaded struct {
	Overloaded string `protobuf:"bytes,3,opt,name=overloaded,proto3,oneof"`
}

type SendAsyncVersionedResponse_Error_SenderUnknown struct {
	SenderUnknown string `protobuf:"bytes,4,opt,name=sender_unknown,json=senderUnknown,proto3,oneof"`
}

type SendAsyncVersionedResponse_Error_ShuttingDown struct {
	ShuttingDown string `protobuf:"bytes,5,opt,name=shutting_down,json=shuttingDown,proto3,oneof"`
}

type SendAsyncVersionedResponse_Error_Unavailable struct {
	Unavailable string `protobuf:"bytes,6,opt,name=unavailable,proto3,oneof"`
}

type SendAsyncVersionedResponse_Error_UnknownRecipients struct {
	UnknownRecipients string `protobuf:"bytes,7,opt,name=unknown_recipients,json=unknownRecipients,proto3,oneof"`
}

type SendAsyncVersionedResponse_Error_Internal struct {
	Internal string `protobuf:"bytes,8,opt,name=internal,proto3,oneof"`
}

type SendAsyncVersionedResponse_Error_Generic struct {
	Generic string `protobuf:"bytes,9,opt,name=generic,proto3,oneof"`
}

type SendAsyncVersionedResponse_Error_TrafficControl struct {
	TrafficControl *TrafficControlErrorReason `protobuf:"bytes,10,opt,name=traffic_control,json=trafficControl,proto3,oneof"`
}

func (*SendAsyncVersionedResponse_Error_RequestInvalid) isSendAsyncVersionedResponse_Error_Reason() {}

func (*SendAsyncVersionedResponse_Error_RequestRefused) isSendAsyncVersionedResponse_Error_Reason() {}

func (*SendAsyncVersionedResponse_Error_Overloaded) isSendAsyncVersionedResponse_Error_Reason() {}

func (*SendAsyncVersionedResponse_Error_SenderUnknown) isSendAsyncVersionedResponse_Error_Reason() {}

func (*SendAsyncVersionedResponse_Error_ShuttingDown) isSendAsyncVersionedResponse_Error_Reason() {}

func (*SendAsyncVersionedResponse_Error_Unavailable) isSendAsyncVersionedResponse_Error_Reason() {}

func (*SendAsyncVersionedResponse_Error_UnknownRecipients) isSendAsyncVersionedResponse_Error_Reason() {
}

func (*SendAsyncVersionedResponse_Error_Internal) isSendAsyncVersionedResponse_Error_Reason() {}

func (*SendAsyncVersionedResponse_Error_Generic) isSendAsyncVersionedResponse_Error_Reason() {}

func (*SendAsyncVersionedResponse_Error_TrafficControl) isSendAsyncVersionedResponse_Error_Reason() {}

var File_com_digitalasset_canton_domain_api_v30_sequencer_service_proto protoreflect.FileDescriptor

var file_com_digitalasset_canton_domain_api_v30_sequencer_service_proto_rawDesc = []byte{
	0x0a, 0x3e, 0x63, 0x6f, 0x6d, 0x2f, 0x64, 0x69, 0x67, 0x69, 0x74, 0x61, 0x6c, 0x61, 0x73, 0x73,
	0x65, 0x74, 0x2f, 0x63, 0x61, 0x6e, 0x74, 0x6f, 0x6e, 0x2f, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e,
	0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x33, 0x30, 0x2f, 0x73, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63,
	0x65, 0x72, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x12, 0x26, 0x63, 0x6f, 0x6d, 0x2e, 0x64, 0x69, 0x67, 0x69, 0x74, 0x61, 0x6c, 0x61, 0x73, 0x73,
	0x65, 0x74, 0x2e, 0x63, 0x61, 0x6e, 0x74, 0x6f, 0x6e, 0x2e, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x33, 0x30, 0x1a, 0x45, 0x63, 0x6f, 0x6d, 0x2f, 0x64, 0x69,
	0x67, 0x69, 0x74, 0x61, 0x6c, 0x61, 0x73, 0x73, 0x65, 0x74, 0x2f, 0x63, 0x61, 0x6e, 0x74, 0x6f,
	0x6e, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2f, 0x76, 0x33, 0x30, 0x2f, 0x74,
	0x72, 0x61, 0x66, 0x66, 0x69, 0x63, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x5f, 0x70,
	0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a,
	0x3d, 0x63, 0x6f, 0x6d, 0x2f, 0x64, 0x69, 0x67, 0x69, 0x74, 0x61, 0x6c, 0x61, 0x73, 0x73, 0x65,
	0x74, 0x2f, 0x63, 0x61, 0x6e, 0x74, 0x6f, 0x6e, 0x2f, 0x74, 0x6f, 0x70, 0x6f, 0x6c, 0x6f, 0x67,
	0x79, 0x2f, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2f, 0x76, 0x33, 0x30, 0x2f, 0x74, 0x6f, 0x70, 0x6f,
	0x6c, 0x6f, 0x67, 0x79, 0x5f, 0x65, 0x78, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x2f,
	0x63, 0x6f, 0x6d, 0x2f, 0x64, 0x69, 0x67, 0x69, 0x74, 0x61, 0x6c, 0x61, 0x73, 0x73, 0x65, 0x74,
	0x2f, 0x63, 0x61, 0x6e, 0x74, 0x6f, 0x6e, 0x2f, 0x76, 0x33, 0x30, 0x2f, 0x74, 0x72, 0x61, 0x63,
	0x65, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22,
	0x57, 0x0a, 0x19, 0x53, 0x65, 0x6e, 0x64, 0x41, 0x73, 0x79, 0x6e, 0x63, 0x56, 0x65, 0x72, 0x73,
	0x69, 0x6f, 0x6e, 0x65, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x3a, 0x0a, 0x19,
	0x73, 0x69, 0x67, 0x6e, 0x65, 0x64, 0x5f, 0x73, 0x75, 0x62, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f,
	0x6e, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52,
	0x17, 0x73, 0x69, 0x67, 0x6e, 0x65, 0x64, 0x53, 0x75, 0x62, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f,
	0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0xf8, 0x01, 0x0a, 0x19, 0x54, 0x72, 0x61,
	0x66, 0x66, 0x69, 0x63, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x45, 0x72, 0x72, 0x6f, 0x72,
	0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x12, 0x5d, 0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x47, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x64, 0x69, 0x67, 0x69,
	0x74, 0x61, 0x6c, 0x61, 0x73, 0x73, 0x65, 0x74, 0x2e, 0x63, 0x61, 0x6e, 0x74, 0x6f, 0x6e, 0x2e,
	0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x33, 0x30, 0x2e, 0x54,
	0x72, 0x61, 0x66, 0x66, 0x69, 0x63, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x45, 0x72, 0x72,
	0x6f, 0x72, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x2e, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x52, 0x05,
	0x65, 0x72, 0x72, 0x6f, 0x72, 0x1a, 0x7c, 0x0a, 0x05, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x12, 0x33,
	0x0a, 0x14, 0x69, 0x6e, 0x73, 0x75, 0x66, 0x66, 0x69, 0x63, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x74,
	0x72, 0x61, 0x66, 0x66, 0x69, 0x63, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x13,
	0x69, 0x6e, 0x73, 0x75, 0x66, 0x66, 0x69, 0x63, 0x69, 0x65, 0x6e, 0x74, 0x54, 0x72, 0x61, 0x66,
	0x66, 0x69, 0x63, 0x12, 0x34, 0x0a, 0x15, 0x6f, 0x75, 0x74, 0x64, 0x61, 0x74, 0x65, 0x64, 0x5f,
	0x74, 0x72, 0x61, 0x66, 0x66, 0x69, 0x63, 0x5f, 0x63, 0x6f, 0x73, 0x74, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x48, 0x00, 0x52, 0x13, 0x6f, 0x75, 0x74, 0x64, 0x61, 0x74, 0x65, 0x64, 0x54, 0x72,
	0x61, 0x66, 0x66, 0x69, 0x63, 0x43, 0x6f, 0x73, 0x74, 0x42, 0x08, 0x0a, 0x06, 0x72, 0x65, 0x61,
	0x73, 0x6f, 0x6e, 0x22, 0xd5, 0x04, 0x0a, 0x1a, 0x53, 0x65, 0x6e, 0x64, 0x41, 0x73, 0x79, 0x6e,
	0x63, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x65, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x5e, 0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x48, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x64, 0x69, 0x67, 0x69, 0x74, 0x61, 0x6c, 0x61,
	0x73, 0x73, 0x65, 0x74, 0x2e, 0x63, 0x61, 0x6e, 0x74, 0x6f, 0x6e, 0x2e, 0x64, 0x6f, 0x6d, 0x61,
	0x69, 0x6e, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x33, 0x30, 0x2e, 0x53, 0x65, 0x6e, 0x64, 0x41,
	0x73, 0x79, 0x6e, 0x63, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x65, 0x64, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x52, 0x05, 0x65, 0x72, 0x72,
	0x6f, 0x72, 0x1a, 0xd6, 0x03, 0x0a, 0x05, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x12, 0x29, 0x0a, 0x0f,
	0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x69, 0x6e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x0e, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x49, 0x6e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x12, 0x29, 0x0a, 0x0f, 0x72, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x5f, 0x72, 0x65, 0x66, 0x75, 0x73, 0x65, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x48, 0x00, 0x52, 0x0e, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x65, 0x66, 0x75, 0x73,
	0x65, 0x64, 0x12, 0x20, 0x0a, 0x0a, 0x6f, 0x76, 0x65, 0x72, 0x6c, 0x6f, 0x61, 0x64, 0x65, 0x64,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x0a, 0x6f, 0x76, 0x65, 0x72, 0x6c, 0x6f,
	0x61, 0x64, 0x65, 0x64, 0x12, 0x27, 0x0a, 0x0e, 0x73, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x5f, 0x75,
	0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x0d,
	0x73, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x55, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x12, 0x25, 0x0a,
	0x0d, 0x73, 0x68, 0x75, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x64, 0x6f, 0x77, 0x6e, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x0c, 0x73, 0x68, 0x75, 0x74, 0x74, 0x69, 0x6e, 0x67,
	0x44, 0x6f, 0x77, 0x6e, 0x12, 0x22, 0x0a, 0x0b, 0x75, 0x6e, 0x61, 0x76, 0x61, 0x69, 0x6c, 0x61,
	0x62, 0x6c, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x0b, 0x75, 0x6e, 0x61,
	0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x2f, 0x0a, 0x12, 0x75, 0x6e, 0x6b, 0x6e,
	0x6f, 0x77, 0x6e, 0x5f, 0x72, 0x65, 0x63, 0x69, 0x70, 0x69, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x11, 0x75, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x52,
	0x65, 0x63, 0x69, 0x70, 0x69, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x1c, 0x0a, 0x08, 0x69, 0x6e, 0x74,
	0x65, 0x72, 0x6e, 0x61, 0x6c, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x08, 0x69,
	0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x12, 0x1a, 0x0a, 0x07, 0x67, 0x65, 0x6e, 0x65, 0x72,
	0x69, 0x63, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x07, 0x67, 0x65, 0x6e, 0x65,
	0x72, 0x69, 0x63, 0x12, 0x6c, 0x0a, 0x0f, 0x74, 0x72, 0x61, 0x66, 0x66, 0x69, 0x63, 0x5f, 0x63,
	0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x41, 0x2e, 0x63,
	0x6f, 0x6d, 0x2e, 0x64, 0x69, 0x67, 0x69, 0x74, 0x61, 0x6c, 0x61, 0x73, 0x73, 0x65, 0x74, 0x2e,
	0x63, 0x61, 0x6e, 0x74, 0x6f, 0x6e, 0x2e, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x76, 0x33, 0x30, 0x2e, 0x54, 0x72, 0x61, 0x66, 0x66, 0x69, 0x63, 0x43, 0x6f, 0x6e,
	0x74, 0x72, 0x6f, 0x6c, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x48,
	0x00, 0x52, 0x0e, 0x74, 0x72, 0x61, 0x66, 0x66, 0x69, 0x63, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f,
	0x6c, 0x42, 0x08, 0x0a, 0x06, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x22, 0x47, 0x0a, 0x13, 0x53,
	0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x06, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x65, 0x72, 0x22, 0xa5, 0x01, 0x0a, 0x1d, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e,
	0x65, 0x64, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x34, 0x0a, 0x16, 0x73, 0x69, 0x67, 0x6e, 0x65, 0x64,
	0x5f, 0x73, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x64, 0x5f, 0x65, 0x76, 0x65, 0x6e, 0x74,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x14, 0x73, 0x69, 0x67, 0x6e, 0x65, 0x64, 0x53, 0x65,
	0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x64, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x4e, 0x0a, 0x0d,
	0x74, 0x72, 0x61, 0x63, 0x65, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x64, 0x69, 0x67, 0x69, 0x74, 0x61,
	0x6c, 0x61, 0x73, 0x73, 0x65, 0x74, 0x2e, 0x63, 0x61, 0x6e, 0x74, 0x6f, 0x6e, 0x2e, 0x76, 0x33,
	0x30, 0x2e, 0x54, 0x72, 0x61, 0x63, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x52, 0x0c,
	0x74, 0x72, 0x61, 0x63, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x22, 0x4a, 0x0a, 0x12,
	0x41, 0x63, 0x6b, 0x6e, 0x6f, 0x77, 0x6c, 0x65, 0x64, 0x67, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x06, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x1c, 0x0a, 0x09, 0x74, 0x69,
	0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x74,
	0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x22, 0x15, 0x0a, 0x13, 0x41, 0x63, 0x6b, 0x6e,
	0x6f, 0x77, 0x6c, 0x65, 0x64, 0x67, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22,
	0x58, 0x0a, 0x18, 0x41, 0x63, 0x6b, 0x6e, 0x6f, 0x77, 0x6c, 0x65, 0x64, 0x67, 0x65, 0x53, 0x69,
	0x67, 0x6e, 0x65, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x3c, 0x0a, 0x1a, 0x73,
	0x69, 0x67, 0x6e, 0x65, 0x64, 0x5f, 0x61, 0x63, 0x6b, 0x6e, 0x6f, 0x77, 0x6c, 0x65, 0x64, 0x67,
	0x65, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52,
	0x18, 0x73, 0x69, 0x67, 0x6e, 0x65, 0x64, 0x41, 0x63, 0x6b, 0x6e, 0x6f, 0x77, 0x6c, 0x65, 0x64,
	0x67, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x1b, 0x0a, 0x19, 0x41, 0x63, 0x6b,
	0x6e, 0x6f, 0x77, 0x6c, 0x65, 0x64, 0x67, 0x65, 0x53, 0x69, 0x67, 0x6e, 0x65, 0x64, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x3d, 0x0a, 0x23, 0x44, 0x6f, 0x77, 0x6e, 0x6c, 0x6f,
	0x61, 0x64, 0x54, 0x6f, 0x70, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x53, 0x74, 0x61, 0x74, 0x65, 0x46,
	0x6f, 0x72, 0x49, 0x6e, 0x69, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x16, 0x0a,
	0x06, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x6d,
	0x65, 0x6d, 0x62, 0x65, 0x72, 0x22, 0x9d, 0x01, 0x0a, 0x24, 0x44, 0x6f, 0x77, 0x6e, 0x6c, 0x6f,
	0x61, 0x64, 0x54, 0x6f, 0x70, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x53, 0x74, 0x61, 0x74, 0x65, 0x46,
	0x6f, 0x72, 0x49, 0x6e, 0x69, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x75,
	0x0a, 0x15, 0x74, 0x6f, 0x70, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x5f, 0x74, 0x72, 0x61, 0x6e, 0x73,
	0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x40, 0x2e,
	0x63, 0x6f, 0x6d, 0x2e, 0x64, 0x69, 0x67, 0x69, 0x74, 0x61, 0x6c, 0x61, 0x73, 0x73, 0x65, 0x74,
	0x2e, 0x63, 0x61, 0x6e, 0x74, 0x6f, 0x6e, 0x2e, 0x74, 0x6f, 0x70, 0x6f, 0x6c, 0x6f, 0x67, 0x79,
	0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x76, 0x33, 0x30, 0x2e, 0x54, 0x6f, 0x70, 0x6f, 0x6c,
	0x6f, 0x67, 0x79, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52,
	0x14, 0x74, 0x6f, 0x70, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x22, 0x57, 0x0a, 0x1f, 0x47, 0x65, 0x74, 0x54, 0x72, 0x61, 0x66,
	0x66, 0x69, 0x63, 0x53, 0x74, 0x61, 0x74, 0x65, 0x46, 0x6f, 0x72, 0x4d, 0x65, 0x6d, 0x62, 0x65,
	0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x6d, 0x65, 0x6d, 0x62,
	0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72,
	0x12, 0x1c, 0x0a, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x22, 0x7b,
	0x0a, 0x20, 0x47, 0x65, 0x74, 0x54, 0x72, 0x61, 0x66, 0x66, 0x69, 0x63, 0x53, 0x74, 0x61, 0x74,
	0x65, 0x46, 0x6f, 0x72, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x57, 0x0a, 0x0d, 0x74, 0x72, 0x61, 0x66, 0x66, 0x69, 0x63, 0x5f, 0x73, 0x74,
	0x61, 0x74, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x32, 0x2e, 0x63, 0x6f, 0x6d, 0x2e,
	0x64, 0x69, 0x67, 0x69, 0x74, 0x61, 0x6c, 0x61, 0x73, 0x73, 0x65, 0x74, 0x2e, 0x63, 0x61, 0x6e,
	0x74, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x76, 0x33, 0x30,
	0x2e, 0x54, 0x72, 0x61, 0x66, 0x66, 0x69, 0x63, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x0c, 0x74,
	0x72, 0x61, 0x66, 0x66, 0x69, 0x63, 0x53, 0x74, 0x61, 0x74, 0x65, 0x22, 0x8a, 0x01, 0x0a, 0x1a,
	0x53, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x64, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x54, 0x72,
	0x61, 0x66, 0x66, 0x69, 0x63, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x36, 0x0a, 0x17, 0x65, 0x78,
	0x74, 0x72, 0x61, 0x5f, 0x74, 0x72, 0x61, 0x66, 0x66, 0x69, 0x63, 0x5f, 0x72, 0x65, 0x6d, 0x61,
	0x69, 0x6e, 0x64, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x15, 0x65, 0x78, 0x74,
	0x72, 0x61, 0x54, 0x72, 0x61, 0x66, 0x66, 0x69, 0x63, 0x52, 0x65, 0x6d, 0x61, 0x69, 0x6e, 0x64,
	0x65, 0x72, 0x12, 0x34, 0x0a, 0x16, 0x65, 0x78, 0x74, 0x72, 0x61, 0x5f, 0x74, 0x72, 0x61, 0x66,
	0x66, 0x69, 0x63, 0x5f, 0x63, 0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x65, 0x64, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x04, 0x52, 0x14, 0x65, 0x78, 0x74, 0x72, 0x61, 0x54, 0x72, 0x61, 0x66, 0x66, 0x69, 0x63,
	0x43, 0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x65, 0x64, 0x32, 0xd6, 0x06, 0x0a, 0x10, 0x53, 0x65, 0x71,
	0x75, 0x65, 0x6e, 0x63, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x9b, 0x01,
	0x0a, 0x12, 0x53, 0x65, 0x6e, 0x64, 0x41, 0x73, 0x79, 0x6e, 0x63, 0x56, 0x65, 0x72, 0x73, 0x69,
	0x6f, 0x6e, 0x65, 0x64, 0x12, 0x41, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x64, 0x69, 0x67, 0x69, 0x74,
	0x61, 0x6c, 0x61, 0x73, 0x73, 0x65, 0x74, 0x2e, 0x63, 0x61, 0x6e, 0x74, 0x6f, 0x6e, 0x2e, 0x64,
	0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x33, 0x30, 0x2e, 0x53, 0x65,
	0x6e, 0x64, 0x41, 0x73, 0x79, 0x6e, 0x63, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x65, 0x64,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x42, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x64, 0x69,
	0x67, 0x69, 0x74, 0x61, 0x6c, 0x61, 0x73, 0x73, 0x65, 0x74, 0x2e, 0x63, 0x61, 0x6e, 0x74, 0x6f,
	0x6e, 0x2e, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x33, 0x30,
	0x2e, 0x53, 0x65, 0x6e, 0x64, 0x41, 0x73, 0x79, 0x6e, 0x63, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f,
	0x6e, 0x65, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x9a, 0x01, 0x0a, 0x12,
	0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e,
	0x65, 0x64, 0x12, 0x3b, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x64, 0x69, 0x67, 0x69, 0x74, 0x61, 0x6c,
	0x61, 0x73, 0x73, 0x65, 0x74, 0x2e, 0x63, 0x61, 0x6e, 0x74, 0x6f, 0x6e, 0x2e, 0x64, 0x6f, 0x6d,
	0x61, 0x69, 0x6e, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x33, 0x30, 0x2e, 0x53, 0x75, 0x62, 0x73,
	0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x45, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x64, 0x69, 0x67, 0x69, 0x74, 0x61, 0x6c, 0x61, 0x73, 0x73,
	0x65, 0x74, 0x2e, 0x63, 0x61, 0x6e, 0x74, 0x6f, 0x6e, 0x2e, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x33, 0x30, 0x2e, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e,
	0x65, 0x64, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x30, 0x01, 0x12, 0x98, 0x01, 0x0a, 0x11, 0x41, 0x63, 0x6b,
	0x6e, 0x6f, 0x77, 0x6c, 0x65, 0x64, 0x67, 0x65, 0x53, 0x69, 0x67, 0x6e, 0x65, 0x64, 0x12, 0x40,
	0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x64, 0x69, 0x67, 0x69, 0x74, 0x61, 0x6c, 0x61, 0x73, 0x73, 0x65,
	0x74, 0x2e, 0x63, 0x61, 0x6e, 0x74, 0x6f, 0x6e, 0x2e, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x76, 0x33, 0x30, 0x2e, 0x41, 0x63, 0x6b, 0x6e, 0x6f, 0x77, 0x6c, 0x65,
	0x64, 0x67, 0x65, 0x53, 0x69, 0x67, 0x6e, 0x65, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x41, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x64, 0x69, 0x67, 0x69, 0x74, 0x61, 0x6c, 0x61, 0x73,
	0x73, 0x65, 0x74, 0x2e, 0x63, 0x61, 0x6e, 0x74, 0x6f, 0x6e, 0x2e, 0x64, 0x6f, 0x6d, 0x61, 0x69,
	0x6e, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x33, 0x30, 0x2e, 0x41, 0x63, 0x6b, 0x6e, 0x6f, 0x77,
	0x6c, 0x65, 0x64, 0x67, 0x65, 0x53, 0x69, 0x67, 0x6e, 0x65, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0xbb, 0x01, 0x0a, 0x1c, 0x44, 0x6f, 0x77, 0x6e, 0x6c, 0x6f, 0x61, 0x64,
	0x54, 0x6f, 0x70, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x53, 0x74, 0x61, 0x74, 0x65, 0x46, 0x6f, 0x72,
	0x49, 0x6e, 0x69, 0x74, 0x12, 0x4b, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x64, 0x69, 0x67, 0x69, 0x74,
	0x61, 0x6c, 0x61, 0x73, 0x73, 0x65, 0x74, 0x2e, 0x63, 0x61, 0x6e, 0x74, 0x6f, 0x6e, 0x2e, 0x64,
	0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x33, 0x30, 0x2e, 0x44, 0x6f,
	0x77, 0x6e, 0x6c, 0x6f, 0x61, 0x64, 0x54, 0x6f, 0x70, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x53, 0x74,
	0x61, 0x74, 0x65, 0x46, 0x6f, 0x72, 0x49, 0x6e, 0x69, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x4c, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x64, 0x69, 0x67, 0x69, 0x74, 0x61, 0x6c, 0x61,
	0x73, 0x73, 0x65, 0x74, 0x2e, 0x63, 0x61, 0x6e, 0x74, 0x6f, 0x6e, 0x2e, 0x64, 0x6f, 0x6d, 0x61,
	0x69, 0x6e, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x33, 0x30, 0x2e, 0x44, 0x6f, 0x77, 0x6e, 0x6c,
	0x6f, 0x61, 0x64, 0x54, 0x6f, 0x70, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x53, 0x74, 0x61, 0x74, 0x65,
	0x46, 0x6f, 0x72, 0x49, 0x6e, 0x69, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x30,
	0x01, 0x12, 0xad, 0x01, 0x0a, 0x18, 0x47, 0x65, 0x74, 0x54, 0x72, 0x61, 0x66, 0x66, 0x69, 0x63,
	0x53, 0x74, 0x61, 0x74, 0x65, 0x46, 0x6f, 0x72, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x47,
	0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x64, 0x69, 0x67, 0x69, 0x74, 0x61, 0x6c, 0x61, 0x73, 0x73, 0x65,
	0x74, 0x2e, 0x63, 0x61, 0x6e, 0x74, 0x6f, 0x6e, 0x2e, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x76, 0x33, 0x30, 0x2e, 0x47, 0x65, 0x74, 0x54, 0x72, 0x61, 0x66, 0x66,
	0x69, 0x63, 0x53, 0x74, 0x61, 0x74, 0x65, 0x46, 0x6f, 0x72, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x48, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x64, 0x69,
	0x67, 0x69, 0x74, 0x61, 0x6c, 0x61, 0x73, 0x73, 0x65, 0x74, 0x2e, 0x63, 0x61, 0x6e, 0x74, 0x6f,
	0x6e, 0x2e, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x33, 0x30,
	0x2e, 0x47, 0x65, 0x74, 0x54, 0x72, 0x61, 0x66, 0x66, 0x69, 0x63, 0x53, 0x74, 0x61, 0x74, 0x65,
	0x46, 0x6f, 0x72, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x42, 0x57, 0x5a, 0x55, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f,
	0x64, 0x69, 0x67, 0x69, 0x74, 0x61, 0x6c, 0x2d, 0x61, 0x73, 0x73, 0x65, 0x74, 0x2f, 0x64, 0x61,
	0x7a, 0x6c, 0x2d, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2f, 0x76, 0x38, 0x2f, 0x67, 0x6f, 0x2f,
	0x61, 0x70, 0x69, 0x2f, 0x63, 0x6f, 0x6d, 0x2f, 0x64, 0x69, 0x67, 0x69, 0x74, 0x61, 0x6c, 0x61,
	0x73, 0x73, 0x65, 0x74, 0x2f, 0x63, 0x61, 0x6e, 0x74, 0x6f, 0x6e, 0x2f, 0x64, 0x6f, 0x6d, 0x61,
	0x69, 0x6e, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x33, 0x30, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x33,
}

var (
	file_com_digitalasset_canton_domain_api_v30_sequencer_service_proto_rawDescOnce sync.Once
	file_com_digitalasset_canton_domain_api_v30_sequencer_service_proto_rawDescData = file_com_digitalasset_canton_domain_api_v30_sequencer_service_proto_rawDesc
)

func file_com_digitalasset_canton_domain_api_v30_sequencer_service_proto_rawDescGZIP() []byte {
	file_com_digitalasset_canton_domain_api_v30_sequencer_service_proto_rawDescOnce.Do(func() {
		file_com_digitalasset_canton_domain_api_v30_sequencer_service_proto_rawDescData = protoimpl.X.CompressGZIP(file_com_digitalasset_canton_domain_api_v30_sequencer_service_proto_rawDescData)
	})
	return file_com_digitalasset_canton_domain_api_v30_sequencer_service_proto_rawDescData
}

var file_com_digitalasset_canton_domain_api_v30_sequencer_service_proto_msgTypes = make([]protoimpl.MessageInfo, 16)
var file_com_digitalasset_canton_domain_api_v30_sequencer_service_proto_goTypes = []any{
	(*SendAsyncVersionedRequest)(nil),            // 0: com.digitalasset.canton.domain.api.v30.SendAsyncVersionedRequest
	(*TrafficControlErrorReason)(nil),            // 1: com.digitalasset.canton.domain.api.v30.TrafficControlErrorReason
	(*SendAsyncVersionedResponse)(nil),           // 2: com.digitalasset.canton.domain.api.v30.SendAsyncVersionedResponse
	(*SubscriptionRequest)(nil),                  // 3: com.digitalasset.canton.domain.api.v30.SubscriptionRequest
	(*VersionedSubscriptionResponse)(nil),        // 4: com.digitalasset.canton.domain.api.v30.VersionedSubscriptionResponse
	(*AcknowledgeRequest)(nil),                   // 5: com.digitalasset.canton.domain.api.v30.AcknowledgeRequest
	(*AcknowledgeResponse)(nil),                  // 6: com.digitalasset.canton.domain.api.v30.AcknowledgeResponse
	(*AcknowledgeSignedRequest)(nil),             // 7: com.digitalasset.canton.domain.api.v30.AcknowledgeSignedRequest
	(*AcknowledgeSignedResponse)(nil),            // 8: com.digitalasset.canton.domain.api.v30.AcknowledgeSignedResponse
	(*DownloadTopologyStateForInitRequest)(nil),  // 9: com.digitalasset.canton.domain.api.v30.DownloadTopologyStateForInitRequest
	(*DownloadTopologyStateForInitResponse)(nil), // 10: com.digitalasset.canton.domain.api.v30.DownloadTopologyStateForInitResponse
	(*GetTrafficStateForMemberRequest)(nil),      // 11: com.digitalasset.canton.domain.api.v30.GetTrafficStateForMemberRequest
	(*GetTrafficStateForMemberResponse)(nil),     // 12: com.digitalasset.canton.domain.api.v30.GetTrafficStateForMemberResponse
	(*SequencedEventTrafficState)(nil),           // 13: com.digitalasset.canton.domain.api.v30.SequencedEventTrafficState
	(*TrafficControlErrorReason_Error)(nil),      // 14: com.digitalasset.canton.domain.api.v30.TrafficControlErrorReason.Error
	(*SendAsyncVersionedResponse_Error)(nil),     // 15: com.digitalasset.canton.domain.api.v30.SendAsyncVersionedResponse.Error
	(*v30.TraceContext)(nil),                     // 16: com.digitalasset.canton.v30.TraceContext
	(*v301.TopologyTransactions)(nil),            // 17: com.digitalasset.canton.topology.admin.v30.TopologyTransactions
	(*v302.TrafficState)(nil),                    // 18: com.digitalasset.canton.protocol.v30.TrafficState
}
var file_com_digitalasset_canton_domain_api_v30_sequencer_service_proto_depIdxs = []int32{
	14, // 0: com.digitalasset.canton.domain.api.v30.TrafficControlErrorReason.error:type_name -> com.digitalasset.canton.domain.api.v30.TrafficControlErrorReason.Error
	15, // 1: com.digitalasset.canton.domain.api.v30.SendAsyncVersionedResponse.error:type_name -> com.digitalasset.canton.domain.api.v30.SendAsyncVersionedResponse.Error
	16, // 2: com.digitalasset.canton.domain.api.v30.VersionedSubscriptionResponse.trace_context:type_name -> com.digitalasset.canton.v30.TraceContext
	17, // 3: com.digitalasset.canton.domain.api.v30.DownloadTopologyStateForInitResponse.topology_transactions:type_name -> com.digitalasset.canton.topology.admin.v30.TopologyTransactions
	18, // 4: com.digitalasset.canton.domain.api.v30.GetTrafficStateForMemberResponse.traffic_state:type_name -> com.digitalasset.canton.protocol.v30.TrafficState
	1,  // 5: com.digitalasset.canton.domain.api.v30.SendAsyncVersionedResponse.Error.traffic_control:type_name -> com.digitalasset.canton.domain.api.v30.TrafficControlErrorReason
	0,  // 6: com.digitalasset.canton.domain.api.v30.SequencerService.SendAsyncVersioned:input_type -> com.digitalasset.canton.domain.api.v30.SendAsyncVersionedRequest
	3,  // 7: com.digitalasset.canton.domain.api.v30.SequencerService.SubscribeVersioned:input_type -> com.digitalasset.canton.domain.api.v30.SubscriptionRequest
	7,  // 8: com.digitalasset.canton.domain.api.v30.SequencerService.AcknowledgeSigned:input_type -> com.digitalasset.canton.domain.api.v30.AcknowledgeSignedRequest
	9,  // 9: com.digitalasset.canton.domain.api.v30.SequencerService.DownloadTopologyStateForInit:input_type -> com.digitalasset.canton.domain.api.v30.DownloadTopologyStateForInitRequest
	11, // 10: com.digitalasset.canton.domain.api.v30.SequencerService.GetTrafficStateForMember:input_type -> com.digitalasset.canton.domain.api.v30.GetTrafficStateForMemberRequest
	2,  // 11: com.digitalasset.canton.domain.api.v30.SequencerService.SendAsyncVersioned:output_type -> com.digitalasset.canton.domain.api.v30.SendAsyncVersionedResponse
	4,  // 12: com.digitalasset.canton.domain.api.v30.SequencerService.SubscribeVersioned:output_type -> com.digitalasset.canton.domain.api.v30.VersionedSubscriptionResponse
	8,  // 13: com.digitalasset.canton.domain.api.v30.SequencerService.AcknowledgeSigned:output_type -> com.digitalasset.canton.domain.api.v30.AcknowledgeSignedResponse
	10, // 14: com.digitalasset.canton.domain.api.v30.SequencerService.DownloadTopologyStateForInit:output_type -> com.digitalasset.canton.domain.api.v30.DownloadTopologyStateForInitResponse
	12, // 15: com.digitalasset.canton.domain.api.v30.SequencerService.GetTrafficStateForMember:output_type -> com.digitalasset.canton.domain.api.v30.GetTrafficStateForMemberResponse
	11, // [11:16] is the sub-list for method output_type
	6,  // [6:11] is the sub-list for method input_type
	6,  // [6:6] is the sub-list for extension type_name
	6,  // [6:6] is the sub-list for extension extendee
	0,  // [0:6] is the sub-list for field type_name
}

func init() { file_com_digitalasset_canton_domain_api_v30_sequencer_service_proto_init() }
func file_com_digitalasset_canton_domain_api_v30_sequencer_service_proto_init() {
	if File_com_digitalasset_canton_domain_api_v30_sequencer_service_proto != nil {
		return
	}
	file_com_digitalasset_canton_domain_api_v30_sequencer_service_proto_msgTypes[14].OneofWrappers = []any{
		(*TrafficControlErrorReason_Error_InsufficientTraffic)(nil),
		(*TrafficControlErrorReason_Error_OutdatedTrafficCost)(nil),
	}
	file_com_digitalasset_canton_domain_api_v30_sequencer_service_proto_msgTypes[15].OneofWrappers = []any{
		(*SendAsyncVersionedResponse_Error_RequestInvalid)(nil),
		(*SendAsyncVersionedResponse_Error_RequestRefused)(nil),
		(*SendAsyncVersionedResponse_Error_Overloaded)(nil),
		(*SendAsyncVersionedResponse_Error_SenderUnknown)(nil),
		(*SendAsyncVersionedResponse_Error_ShuttingDown)(nil),
		(*SendAsyncVersionedResponse_Error_Unavailable)(nil),
		(*SendAsyncVersionedResponse_Error_UnknownRecipients)(nil),
		(*SendAsyncVersionedResponse_Error_Internal)(nil),
		(*SendAsyncVersionedResponse_Error_Generic)(nil),
		(*SendAsyncVersionedResponse_Error_TrafficControl)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_com_digitalasset_canton_domain_api_v30_sequencer_service_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   16,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_com_digitalasset_canton_domain_api_v30_sequencer_service_proto_goTypes,
		DependencyIndexes: file_com_digitalasset_canton_domain_api_v30_sequencer_service_proto_depIdxs,
		MessageInfos:      file_com_digitalasset_canton_domain_api_v30_sequencer_service_proto_msgTypes,
	}.Build()
	File_com_digitalasset_canton_domain_api_v30_sequencer_service_proto = out.File
	file_com_digitalasset_canton_domain_api_v30_sequencer_service_proto_rawDesc = nil
	file_com_digitalasset_canton_domain_api_v30_sequencer_service_proto_goTypes = nil
	file_com_digitalasset_canton_domain_api_v30_sequencer_service_proto_depIdxs = nil
}
