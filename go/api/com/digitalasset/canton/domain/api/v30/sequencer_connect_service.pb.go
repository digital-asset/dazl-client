// Copyright (c) 2017-2025 Digital Asset (Switzerland) GmbH and/or its affiliates. All rights reserved.
// SPDX-License-Identifier: Apache-2.0
// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.35.2
// 	protoc        v5.27.2
// source: com/digitalasset/canton/domain/api/v30/sequencer_connect_service.proto

package v30

import (
	v30 "github.com/digital-asset/dazl-client/v8/go/api/com/digitalasset/canton/protocol/v30"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type SequencerConnect struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *SequencerConnect) Reset() {
	*x = SequencerConnect{}
	mi := &file_com_digitalasset_canton_domain_api_v30_sequencer_connect_service_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SequencerConnect) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SequencerConnect) ProtoMessage() {}

func (x *SequencerConnect) ProtoReflect() protoreflect.Message {
	mi := &file_com_digitalasset_canton_domain_api_v30_sequencer_connect_service_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SequencerConnect.ProtoReflect.Descriptor instead.
func (*SequencerConnect) Descriptor() ([]byte, []int) {
	return file_com_digitalasset_canton_domain_api_v30_sequencer_connect_service_proto_rawDescGZIP(), []int{0}
}

type SequencerConnect_HandshakeRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	HandshakeRequest *v30.Handshake_Request `protobuf:"bytes,1,opt,name=handshake_request,json=handshakeRequest,proto3" json:"handshake_request,omitempty"`
}

func (x *SequencerConnect_HandshakeRequest) Reset() {
	*x = SequencerConnect_HandshakeRequest{}
	mi := &file_com_digitalasset_canton_domain_api_v30_sequencer_connect_service_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SequencerConnect_HandshakeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SequencerConnect_HandshakeRequest) ProtoMessage() {}

func (x *SequencerConnect_HandshakeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_com_digitalasset_canton_domain_api_v30_sequencer_connect_service_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SequencerConnect_HandshakeRequest.ProtoReflect.Descriptor instead.
func (*SequencerConnect_HandshakeRequest) Descriptor() ([]byte, []int) {
	return file_com_digitalasset_canton_domain_api_v30_sequencer_connect_service_proto_rawDescGZIP(), []int{0, 0}
}

func (x *SequencerConnect_HandshakeRequest) GetHandshakeRequest() *v30.Handshake_Request {
	if x != nil {
		return x.HandshakeRequest
	}
	return nil
}

type SequencerConnect_HandshakeResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	HandshakeResponse *v30.Handshake_Response `protobuf:"bytes,1,opt,name=handshake_response,json=handshakeResponse,proto3" json:"handshake_response,omitempty"`
}

func (x *SequencerConnect_HandshakeResponse) Reset() {
	*x = SequencerConnect_HandshakeResponse{}
	mi := &file_com_digitalasset_canton_domain_api_v30_sequencer_connect_service_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SequencerConnect_HandshakeResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SequencerConnect_HandshakeResponse) ProtoMessage() {}

func (x *SequencerConnect_HandshakeResponse) ProtoReflect() protoreflect.Message {
	mi := &file_com_digitalasset_canton_domain_api_v30_sequencer_connect_service_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SequencerConnect_HandshakeResponse.ProtoReflect.Descriptor instead.
func (*SequencerConnect_HandshakeResponse) Descriptor() ([]byte, []int) {
	return file_com_digitalasset_canton_domain_api_v30_sequencer_connect_service_proto_rawDescGZIP(), []int{0, 1}
}

func (x *SequencerConnect_HandshakeResponse) GetHandshakeResponse() *v30.Handshake_Response {
	if x != nil {
		return x.HandshakeResponse
	}
	return nil
}

type SequencerConnect_GetDomainIdRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *SequencerConnect_GetDomainIdRequest) Reset() {
	*x = SequencerConnect_GetDomainIdRequest{}
	mi := &file_com_digitalasset_canton_domain_api_v30_sequencer_connect_service_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SequencerConnect_GetDomainIdRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SequencerConnect_GetDomainIdRequest) ProtoMessage() {}

func (x *SequencerConnect_GetDomainIdRequest) ProtoReflect() protoreflect.Message {
	mi := &file_com_digitalasset_canton_domain_api_v30_sequencer_connect_service_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SequencerConnect_GetDomainIdRequest.ProtoReflect.Descriptor instead.
func (*SequencerConnect_GetDomainIdRequest) Descriptor() ([]byte, []int) {
	return file_com_digitalasset_canton_domain_api_v30_sequencer_connect_service_proto_rawDescGZIP(), []int{0, 2}
}

type SequencerConnect_GetDomainIdResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DomainId     string `protobuf:"bytes,1,opt,name=domain_id,json=domainId,proto3" json:"domain_id,omitempty"`
	SequencerUid string `protobuf:"bytes,2,opt,name=sequencer_uid,json=sequencerUid,proto3" json:"sequencer_uid,omitempty"`
}

func (x *SequencerConnect_GetDomainIdResponse) Reset() {
	*x = SequencerConnect_GetDomainIdResponse{}
	mi := &file_com_digitalasset_canton_domain_api_v30_sequencer_connect_service_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SequencerConnect_GetDomainIdResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SequencerConnect_GetDomainIdResponse) ProtoMessage() {}

func (x *SequencerConnect_GetDomainIdResponse) ProtoReflect() protoreflect.Message {
	mi := &file_com_digitalasset_canton_domain_api_v30_sequencer_connect_service_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SequencerConnect_GetDomainIdResponse.ProtoReflect.Descriptor instead.
func (*SequencerConnect_GetDomainIdResponse) Descriptor() ([]byte, []int) {
	return file_com_digitalasset_canton_domain_api_v30_sequencer_connect_service_proto_rawDescGZIP(), []int{0, 3}
}

func (x *SequencerConnect_GetDomainIdResponse) GetDomainId() string {
	if x != nil {
		return x.DomainId
	}
	return ""
}

func (x *SequencerConnect_GetDomainIdResponse) GetSequencerUid() string {
	if x != nil {
		return x.SequencerUid
	}
	return ""
}

type SequencerConnect_GetDomainParametersRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *SequencerConnect_GetDomainParametersRequest) Reset() {
	*x = SequencerConnect_GetDomainParametersRequest{}
	mi := &file_com_digitalasset_canton_domain_api_v30_sequencer_connect_service_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SequencerConnect_GetDomainParametersRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SequencerConnect_GetDomainParametersRequest) ProtoMessage() {}

func (x *SequencerConnect_GetDomainParametersRequest) ProtoReflect() protoreflect.Message {
	mi := &file_com_digitalasset_canton_domain_api_v30_sequencer_connect_service_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SequencerConnect_GetDomainParametersRequest.ProtoReflect.Descriptor instead.
func (*SequencerConnect_GetDomainParametersRequest) Descriptor() ([]byte, []int) {
	return file_com_digitalasset_canton_domain_api_v30_sequencer_connect_service_proto_rawDescGZIP(), []int{0, 4}
}

type SequencerConnect_GetDomainParametersResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Parameters:
	//
	//	*SequencerConnect_GetDomainParametersResponse_ParametersV1
	Parameters isSequencerConnect_GetDomainParametersResponse_Parameters `protobuf_oneof:"parameters"`
}

func (x *SequencerConnect_GetDomainParametersResponse) Reset() {
	*x = SequencerConnect_GetDomainParametersResponse{}
	mi := &file_com_digitalasset_canton_domain_api_v30_sequencer_connect_service_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SequencerConnect_GetDomainParametersResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SequencerConnect_GetDomainParametersResponse) ProtoMessage() {}

func (x *SequencerConnect_GetDomainParametersResponse) ProtoReflect() protoreflect.Message {
	mi := &file_com_digitalasset_canton_domain_api_v30_sequencer_connect_service_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SequencerConnect_GetDomainParametersResponse.ProtoReflect.Descriptor instead.
func (*SequencerConnect_GetDomainParametersResponse) Descriptor() ([]byte, []int) {
	return file_com_digitalasset_canton_domain_api_v30_sequencer_connect_service_proto_rawDescGZIP(), []int{0, 5}
}

func (m *SequencerConnect_GetDomainParametersResponse) GetParameters() isSequencerConnect_GetDomainParametersResponse_Parameters {
	if m != nil {
		return m.Parameters
	}
	return nil
}

func (x *SequencerConnect_GetDomainParametersResponse) GetParametersV1() *v30.StaticDomainParameters {
	if x, ok := x.GetParameters().(*SequencerConnect_GetDomainParametersResponse_ParametersV1); ok {
		return x.ParametersV1
	}
	return nil
}

type isSequencerConnect_GetDomainParametersResponse_Parameters interface {
	isSequencerConnect_GetDomainParametersResponse_Parameters()
}

type SequencerConnect_GetDomainParametersResponse_ParametersV1 struct {
	ParametersV1 *v30.StaticDomainParameters `protobuf:"bytes,2,opt,name=parameters_v1,json=parametersV1,proto3,oneof"`
}

func (*SequencerConnect_GetDomainParametersResponse_ParametersV1) isSequencerConnect_GetDomainParametersResponse_Parameters() {
}

type SequencerConnect_VerifyActiveRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *SequencerConnect_VerifyActiveRequest) Reset() {
	*x = SequencerConnect_VerifyActiveRequest{}
	mi := &file_com_digitalasset_canton_domain_api_v30_sequencer_connect_service_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SequencerConnect_VerifyActiveRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SequencerConnect_VerifyActiveRequest) ProtoMessage() {}

func (x *SequencerConnect_VerifyActiveRequest) ProtoReflect() protoreflect.Message {
	mi := &file_com_digitalasset_canton_domain_api_v30_sequencer_connect_service_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SequencerConnect_VerifyActiveRequest.ProtoReflect.Descriptor instead.
func (*SequencerConnect_VerifyActiveRequest) Descriptor() ([]byte, []int) {
	return file_com_digitalasset_canton_domain_api_v30_sequencer_connect_service_proto_rawDescGZIP(), []int{0, 6}
}

type SequencerConnect_VerifyActiveResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Value:
	//
	//	*SequencerConnect_VerifyActiveResponse_Success_
	//	*SequencerConnect_VerifyActiveResponse_Failure_
	Value isSequencerConnect_VerifyActiveResponse_Value `protobuf_oneof:"value"`
}

func (x *SequencerConnect_VerifyActiveResponse) Reset() {
	*x = SequencerConnect_VerifyActiveResponse{}
	mi := &file_com_digitalasset_canton_domain_api_v30_sequencer_connect_service_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SequencerConnect_VerifyActiveResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SequencerConnect_VerifyActiveResponse) ProtoMessage() {}

func (x *SequencerConnect_VerifyActiveResponse) ProtoReflect() protoreflect.Message {
	mi := &file_com_digitalasset_canton_domain_api_v30_sequencer_connect_service_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SequencerConnect_VerifyActiveResponse.ProtoReflect.Descriptor instead.
func (*SequencerConnect_VerifyActiveResponse) Descriptor() ([]byte, []int) {
	return file_com_digitalasset_canton_domain_api_v30_sequencer_connect_service_proto_rawDescGZIP(), []int{0, 7}
}

func (m *SequencerConnect_VerifyActiveResponse) GetValue() isSequencerConnect_VerifyActiveResponse_Value {
	if m != nil {
		return m.Value
	}
	return nil
}

func (x *SequencerConnect_VerifyActiveResponse) GetSuccess() *SequencerConnect_VerifyActiveResponse_Success {
	if x, ok := x.GetValue().(*SequencerConnect_VerifyActiveResponse_Success_); ok {
		return x.Success
	}
	return nil
}

func (x *SequencerConnect_VerifyActiveResponse) GetFailure() *SequencerConnect_VerifyActiveResponse_Failure {
	if x, ok := x.GetValue().(*SequencerConnect_VerifyActiveResponse_Failure_); ok {
		return x.Failure
	}
	return nil
}

type isSequencerConnect_VerifyActiveResponse_Value interface {
	isSequencerConnect_VerifyActiveResponse_Value()
}

type SequencerConnect_VerifyActiveResponse_Success_ struct {
	Success *SequencerConnect_VerifyActiveResponse_Success `protobuf:"bytes,1,opt,name=success,proto3,oneof"`
}

type SequencerConnect_VerifyActiveResponse_Failure_ struct {
	Failure *SequencerConnect_VerifyActiveResponse_Failure `protobuf:"bytes,2,opt,name=failure,proto3,oneof"`
}

func (*SequencerConnect_VerifyActiveResponse_Success_) isSequencerConnect_VerifyActiveResponse_Value() {
}

func (*SequencerConnect_VerifyActiveResponse_Failure_) isSequencerConnect_VerifyActiveResponse_Value() {
}

type SequencerConnect_RegisterOnboardingTopologyTransactionsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TopologyTransactions []*v30.SignedTopologyTransaction `protobuf:"bytes,1,rep,name=topology_transactions,json=topologyTransactions,proto3" json:"topology_transactions,omitempty"`
}

func (x *SequencerConnect_RegisterOnboardingTopologyTransactionsRequest) Reset() {
	*x = SequencerConnect_RegisterOnboardingTopologyTransactionsRequest{}
	mi := &file_com_digitalasset_canton_domain_api_v30_sequencer_connect_service_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SequencerConnect_RegisterOnboardingTopologyTransactionsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SequencerConnect_RegisterOnboardingTopologyTransactionsRequest) ProtoMessage() {}

func (x *SequencerConnect_RegisterOnboardingTopologyTransactionsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_com_digitalasset_canton_domain_api_v30_sequencer_connect_service_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SequencerConnect_RegisterOnboardingTopologyTransactionsRequest.ProtoReflect.Descriptor instead.
func (*SequencerConnect_RegisterOnboardingTopologyTransactionsRequest) Descriptor() ([]byte, []int) {
	return file_com_digitalasset_canton_domain_api_v30_sequencer_connect_service_proto_rawDescGZIP(), []int{0, 8}
}

func (x *SequencerConnect_RegisterOnboardingTopologyTransactionsRequest) GetTopologyTransactions() []*v30.SignedTopologyTransaction {
	if x != nil {
		return x.TopologyTransactions
	}
	return nil
}

type SequencerConnect_RegisterOnboardingTopologyTransactionsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *SequencerConnect_RegisterOnboardingTopologyTransactionsResponse) Reset() {
	*x = SequencerConnect_RegisterOnboardingTopologyTransactionsResponse{}
	mi := &file_com_digitalasset_canton_domain_api_v30_sequencer_connect_service_proto_msgTypes[10]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SequencerConnect_RegisterOnboardingTopologyTransactionsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SequencerConnect_RegisterOnboardingTopologyTransactionsResponse) ProtoMessage() {}

func (x *SequencerConnect_RegisterOnboardingTopologyTransactionsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_com_digitalasset_canton_domain_api_v30_sequencer_connect_service_proto_msgTypes[10]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SequencerConnect_RegisterOnboardingTopologyTransactionsResponse.ProtoReflect.Descriptor instead.
func (*SequencerConnect_RegisterOnboardingTopologyTransactionsResponse) Descriptor() ([]byte, []int) {
	return file_com_digitalasset_canton_domain_api_v30_sequencer_connect_service_proto_rawDescGZIP(), []int{0, 9}
}

type SequencerConnect_VerifyActiveResponse_Success struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IsActive bool `protobuf:"varint,1,opt,name=is_active,json=isActive,proto3" json:"is_active,omitempty"`
}

func (x *SequencerConnect_VerifyActiveResponse_Success) Reset() {
	*x = SequencerConnect_VerifyActiveResponse_Success{}
	mi := &file_com_digitalasset_canton_domain_api_v30_sequencer_connect_service_proto_msgTypes[11]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SequencerConnect_VerifyActiveResponse_Success) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SequencerConnect_VerifyActiveResponse_Success) ProtoMessage() {}

func (x *SequencerConnect_VerifyActiveResponse_Success) ProtoReflect() protoreflect.Message {
	mi := &file_com_digitalasset_canton_domain_api_v30_sequencer_connect_service_proto_msgTypes[11]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SequencerConnect_VerifyActiveResponse_Success.ProtoReflect.Descriptor instead.
func (*SequencerConnect_VerifyActiveResponse_Success) Descriptor() ([]byte, []int) {
	return file_com_digitalasset_canton_domain_api_v30_sequencer_connect_service_proto_rawDescGZIP(), []int{0, 7, 0}
}

func (x *SequencerConnect_VerifyActiveResponse_Success) GetIsActive() bool {
	if x != nil {
		return x.IsActive
	}
	return false
}

type SequencerConnect_VerifyActiveResponse_Failure struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Reason string `protobuf:"bytes,1,opt,name=reason,proto3" json:"reason,omitempty"`
}

func (x *SequencerConnect_VerifyActiveResponse_Failure) Reset() {
	*x = SequencerConnect_VerifyActiveResponse_Failure{}
	mi := &file_com_digitalasset_canton_domain_api_v30_sequencer_connect_service_proto_msgTypes[12]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SequencerConnect_VerifyActiveResponse_Failure) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SequencerConnect_VerifyActiveResponse_Failure) ProtoMessage() {}

func (x *SequencerConnect_VerifyActiveResponse_Failure) ProtoReflect() protoreflect.Message {
	mi := &file_com_digitalasset_canton_domain_api_v30_sequencer_connect_service_proto_msgTypes[12]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SequencerConnect_VerifyActiveResponse_Failure.ProtoReflect.Descriptor instead.
func (*SequencerConnect_VerifyActiveResponse_Failure) Descriptor() ([]byte, []int) {
	return file_com_digitalasset_canton_domain_api_v30_sequencer_connect_service_proto_rawDescGZIP(), []int{0, 7, 1}
}

func (x *SequencerConnect_VerifyActiveResponse_Failure) GetReason() string {
	if x != nil {
		return x.Reason
	}
	return ""
}

var File_com_digitalasset_canton_domain_api_v30_sequencer_connect_service_proto protoreflect.FileDescriptor

var file_com_digitalasset_canton_domain_api_v30_sequencer_connect_service_proto_rawDesc = []byte{
	0x0a, 0x46, 0x63, 0x6f, 0x6d, 0x2f, 0x64, 0x69, 0x67, 0x69, 0x74, 0x61, 0x6c, 0x61, 0x73, 0x73,
	0x65, 0x74, 0x2f, 0x63, 0x61, 0x6e, 0x74, 0x6f, 0x6e, 0x2f, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e,
	0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x33, 0x30, 0x2f, 0x73, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63,
	0x65, 0x72, 0x5f, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x26, 0x63, 0x6f, 0x6d, 0x2e, 0x64, 0x69,
	0x67, 0x69, 0x74, 0x61, 0x6c, 0x61, 0x73, 0x73, 0x65, 0x74, 0x2e, 0x63, 0x61, 0x6e, 0x74, 0x6f,
	0x6e, 0x2e, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x33, 0x30,
	0x1a, 0x35, 0x63, 0x6f, 0x6d, 0x2f, 0x64, 0x69, 0x67, 0x69, 0x74, 0x61, 0x6c, 0x61, 0x73, 0x73,
	0x65, 0x74, 0x2f, 0x63, 0x61, 0x6e, 0x74, 0x6f, 0x6e, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63,
	0x6f, 0x6c, 0x2f, 0x76, 0x33, 0x30, 0x2f, 0x73, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x69, 0x6e,
	0x67, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x33, 0x63, 0x6f, 0x6d, 0x2f, 0x64, 0x69, 0x67,
	0x69, 0x74, 0x61, 0x6c, 0x61, 0x73, 0x73, 0x65, 0x74, 0x2f, 0x63, 0x61, 0x6e, 0x74, 0x6f, 0x6e,
	0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2f, 0x76, 0x33, 0x30, 0x2f, 0x74, 0x6f,
	0x70, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xee, 0x08, 0x0a,
	0x10, 0x53, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63,
	0x74, 0x1a, 0x78, 0x0a, 0x10, 0x48, 0x61, 0x6e, 0x64, 0x73, 0x68, 0x61, 0x6b, 0x65, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x64, 0x0a, 0x11, 0x68, 0x61, 0x6e, 0x64, 0x73, 0x68, 0x61,
	0x6b, 0x65, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x37, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x64, 0x69, 0x67, 0x69, 0x74, 0x61, 0x6c, 0x61, 0x73,
	0x73, 0x65, 0x74, 0x2e, 0x63, 0x61, 0x6e, 0x74, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x63, 0x6f, 0x6c, 0x2e, 0x76, 0x33, 0x30, 0x2e, 0x48, 0x61, 0x6e, 0x64, 0x73, 0x68, 0x61, 0x6b,
	0x65, 0x2e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x10, 0x68, 0x61, 0x6e, 0x64, 0x73,
	0x68, 0x61, 0x6b, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x7c, 0x0a, 0x11, 0x48,
	0x61, 0x6e, 0x64, 0x73, 0x68, 0x61, 0x6b, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x67, 0x0a, 0x12, 0x68, 0x61, 0x6e, 0x64, 0x73, 0x68, 0x61, 0x6b, 0x65, 0x5f, 0x72, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x38, 0x2e, 0x63,
	0x6f, 0x6d, 0x2e, 0x64, 0x69, 0x67, 0x69, 0x74, 0x61, 0x6c, 0x61, 0x73, 0x73, 0x65, 0x74, 0x2e,
	0x63, 0x61, 0x6e, 0x74, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e,
	0x76, 0x33, 0x30, 0x2e, 0x48, 0x61, 0x6e, 0x64, 0x73, 0x68, 0x61, 0x6b, 0x65, 0x2e, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x11, 0x68, 0x61, 0x6e, 0x64, 0x73, 0x68, 0x61, 0x6b,
	0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x1a, 0x14, 0x0a, 0x12, 0x47, 0x65, 0x74,
	0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x49, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x57, 0x0a, 0x13, 0x47, 0x65, 0x74, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x49, 0x64, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e,
	0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x64, 0x6f, 0x6d, 0x61, 0x69,
	0x6e, 0x49, 0x64, 0x12, 0x23, 0x0a, 0x0d, 0x73, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x72,
	0x5f, 0x75, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x73, 0x65, 0x71, 0x75,
	0x65, 0x6e, 0x63, 0x65, 0x72, 0x55, 0x69, 0x64, 0x1a, 0x1c, 0x0a, 0x1a, 0x47, 0x65, 0x74, 0x44,
	0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x90, 0x01, 0x0a, 0x1b, 0x47, 0x65, 0x74, 0x44, 0x6f,
	0x6d, 0x61, 0x69, 0x6e, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x63, 0x0a, 0x0d, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x65,
	0x74, 0x65, 0x72, 0x73, 0x5f, 0x76, 0x31, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3c, 0x2e,
	0x63, 0x6f, 0x6d, 0x2e, 0x64, 0x69, 0x67, 0x69, 0x74, 0x61, 0x6c, 0x61, 0x73, 0x73, 0x65, 0x74,
	0x2e, 0x63, 0x61, 0x6e, 0x74, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c,
	0x2e, 0x76, 0x33, 0x30, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x69, 0x63, 0x44, 0x6f, 0x6d, 0x61, 0x69,
	0x6e, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x48, 0x00, 0x52, 0x0c, 0x70,
	0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x56, 0x31, 0x42, 0x0c, 0x0a, 0x0a, 0x70,
	0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x1a, 0x15, 0x0a, 0x13, 0x56, 0x65, 0x72,
	0x69, 0x66, 0x79, 0x41, 0x63, 0x74, 0x69, 0x76, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0xd0, 0x02, 0x0a, 0x14, 0x56, 0x65, 0x72, 0x69, 0x66, 0x79, 0x41, 0x63, 0x74, 0x69, 0x76,
	0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x71, 0x0a, 0x07, 0x73, 0x75, 0x63,
	0x63, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x55, 0x2e, 0x63, 0x6f, 0x6d,
	0x2e, 0x64, 0x69, 0x67, 0x69, 0x74, 0x61, 0x6c, 0x61, 0x73, 0x73, 0x65, 0x74, 0x2e, 0x63, 0x61,
	0x6e, 0x74, 0x6f, 0x6e, 0x2e, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x76, 0x33, 0x30, 0x2e, 0x53, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x72, 0x43, 0x6f, 0x6e,
	0x6e, 0x65, 0x63, 0x74, 0x2e, 0x56, 0x65, 0x72, 0x69, 0x66, 0x79, 0x41, 0x63, 0x74, 0x69, 0x76,
	0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x53, 0x75, 0x63, 0x63, 0x65, 0x73,
	0x73, 0x48, 0x00, 0x52, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x12, 0x71, 0x0a, 0x07,
	0x66, 0x61, 0x69, 0x6c, 0x75, 0x72, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x55, 0x2e,
	0x63, 0x6f, 0x6d, 0x2e, 0x64, 0x69, 0x67, 0x69, 0x74, 0x61, 0x6c, 0x61, 0x73, 0x73, 0x65, 0x74,
	0x2e, 0x63, 0x61, 0x6e, 0x74, 0x6f, 0x6e, 0x2e, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x76, 0x33, 0x30, 0x2e, 0x53, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x72,
	0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x2e, 0x56, 0x65, 0x72, 0x69, 0x66, 0x79, 0x41, 0x63,
	0x74, 0x69, 0x76, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x46, 0x61, 0x69,
	0x6c, 0x75, 0x72, 0x65, 0x48, 0x00, 0x52, 0x07, 0x66, 0x61, 0x69, 0x6c, 0x75, 0x72, 0x65, 0x1a,
	0x26, 0x0a, 0x07, 0x53, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x12, 0x1b, 0x0a, 0x09, 0x69, 0x73,
	0x5f, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x69,
	0x73, 0x41, 0x63, 0x74, 0x69, 0x76, 0x65, 0x1a, 0x21, 0x0a, 0x07, 0x46, 0x61, 0x69, 0x6c, 0x75,
	0x72, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x06, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x42, 0x07, 0x0a, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x1a, 0xa5, 0x01, 0x0a, 0x2d, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72,
	0x4f, 0x6e, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x54, 0x6f, 0x70, 0x6f, 0x6c, 0x6f,
	0x67, 0x79, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x74, 0x0a, 0x15, 0x74, 0x6f, 0x70, 0x6f, 0x6c, 0x6f, 0x67,
	0x79, 0x5f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x01,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x3f, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x64, 0x69, 0x67, 0x69, 0x74,
	0x61, 0x6c, 0x61, 0x73, 0x73, 0x65, 0x74, 0x2e, 0x63, 0x61, 0x6e, 0x74, 0x6f, 0x6e, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x76, 0x33, 0x30, 0x2e, 0x53, 0x69, 0x67, 0x6e,
	0x65, 0x64, 0x54, 0x6f, 0x70, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x14, 0x74, 0x6f, 0x70, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x54,
	0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x1a, 0x30, 0x0a, 0x2e, 0x52,
	0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x4f, 0x6e, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x69, 0x6e,
	0x67, 0x54, 0x6f, 0x70, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x32, 0xd6, 0x07,
	0x0a, 0x17, 0x53, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x6e, 0x65,
	0x63, 0x74, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0xa2, 0x01, 0x0a, 0x09, 0x48, 0x61,
	0x6e, 0x64, 0x73, 0x68, 0x61, 0x6b, 0x65, 0x12, 0x49, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x64, 0x69,
	0x67, 0x69, 0x74, 0x61, 0x6c, 0x61, 0x73, 0x73, 0x65, 0x74, 0x2e, 0x63, 0x61, 0x6e, 0x74, 0x6f,
	0x6e, 0x2e, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x33, 0x30,
	0x2e, 0x53, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63,
	0x74, 0x2e, 0x48, 0x61, 0x6e, 0x64, 0x73, 0x68, 0x61, 0x6b, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x4a, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x64, 0x69, 0x67, 0x69, 0x74, 0x61, 0x6c,
	0x61, 0x73, 0x73, 0x65, 0x74, 0x2e, 0x63, 0x61, 0x6e, 0x74, 0x6f, 0x6e, 0x2e, 0x64, 0x6f, 0x6d,
	0x61, 0x69, 0x6e, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x33, 0x30, 0x2e, 0x53, 0x65, 0x71, 0x75,
	0x65, 0x6e, 0x63, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x2e, 0x48, 0x61, 0x6e,
	0x64, 0x73, 0x68, 0x61, 0x6b, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0xa8,
	0x01, 0x0a, 0x0b, 0x47, 0x65, 0x74, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x49, 0x64, 0x12, 0x4b,
	0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x64, 0x69, 0x67, 0x69, 0x74, 0x61, 0x6c, 0x61, 0x73, 0x73, 0x65,
	0x74, 0x2e, 0x63, 0x61, 0x6e, 0x74, 0x6f, 0x6e, 0x2e, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x76, 0x33, 0x30, 0x2e, 0x53, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65,
	0x72, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x2e, 0x47, 0x65, 0x74, 0x44, 0x6f, 0x6d, 0x61,
	0x69, 0x6e, 0x49, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x4c, 0x2e, 0x63, 0x6f,
	0x6d, 0x2e, 0x64, 0x69, 0x67, 0x69, 0x74, 0x61, 0x6c, 0x61, 0x73, 0x73, 0x65, 0x74, 0x2e, 0x63,
	0x61, 0x6e, 0x74, 0x6f, 0x6e, 0x2e, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x61, 0x70, 0x69,
	0x2e, 0x76, 0x33, 0x30, 0x2e, 0x53, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x72, 0x43, 0x6f,
	0x6e, 0x6e, 0x65, 0x63, 0x74, 0x2e, 0x47, 0x65, 0x74, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x49,
	0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0xc0, 0x01, 0x0a, 0x13, 0x47, 0x65,
	0x74, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72,
	0x73, 0x12, 0x53, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x64, 0x69, 0x67, 0x69, 0x74, 0x61, 0x6c, 0x61,
	0x73, 0x73, 0x65, 0x74, 0x2e, 0x63, 0x61, 0x6e, 0x74, 0x6f, 0x6e, 0x2e, 0x64, 0x6f, 0x6d, 0x61,
	0x69, 0x6e, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x33, 0x30, 0x2e, 0x53, 0x65, 0x71, 0x75, 0x65,
	0x6e, 0x63, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x2e, 0x47, 0x65, 0x74, 0x44,
	0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x54, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x64, 0x69, 0x67,
	0x69, 0x74, 0x61, 0x6c, 0x61, 0x73, 0x73, 0x65, 0x74, 0x2e, 0x63, 0x61, 0x6e, 0x74, 0x6f, 0x6e,
	0x2e, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x33, 0x30, 0x2e,
	0x53, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74,
	0x2e, 0x47, 0x65, 0x74, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65,
	0x74, 0x65, 0x72, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0xab, 0x01, 0x0a,
	0x0c, 0x56, 0x65, 0x72, 0x69, 0x66, 0x79, 0x41, 0x63, 0x74, 0x69, 0x76, 0x65, 0x12, 0x4c, 0x2e,
	0x63, 0x6f, 0x6d, 0x2e, 0x64, 0x69, 0x67, 0x69, 0x74, 0x61, 0x6c, 0x61, 0x73, 0x73, 0x65, 0x74,
	0x2e, 0x63, 0x61, 0x6e, 0x74, 0x6f, 0x6e, 0x2e, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x76, 0x33, 0x30, 0x2e, 0x53, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x72,
	0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x2e, 0x56, 0x65, 0x72, 0x69, 0x66, 0x79, 0x41, 0x63,
	0x74, 0x69, 0x76, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x4d, 0x2e, 0x63, 0x6f,
	0x6d, 0x2e, 0x64, 0x69, 0x67, 0x69, 0x74, 0x61, 0x6c, 0x61, 0x73, 0x73, 0x65, 0x74, 0x2e, 0x63,
	0x61, 0x6e, 0x74, 0x6f, 0x6e, 0x2e, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x61, 0x70, 0x69,
	0x2e, 0x76, 0x33, 0x30, 0x2e, 0x53, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x72, 0x43, 0x6f,
	0x6e, 0x6e, 0x65, 0x63, 0x74, 0x2e, 0x56, 0x65, 0x72, 0x69, 0x66, 0x79, 0x41, 0x63, 0x74, 0x69,
	0x76, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0xf9, 0x01, 0x0a, 0x26, 0x52,
	0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x4f, 0x6e, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x69, 0x6e,
	0x67, 0x54, 0x6f, 0x70, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x66, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x64, 0x69, 0x67, 0x69,
	0x74, 0x61, 0x6c, 0x61, 0x73, 0x73, 0x65, 0x74, 0x2e, 0x63, 0x61, 0x6e, 0x74, 0x6f, 0x6e, 0x2e,
	0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x33, 0x30, 0x2e, 0x53,
	0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x2e,
	0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x4f, 0x6e, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x69,
	0x6e, 0x67, 0x54, 0x6f, 0x70, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x67, 0x2e,
	0x63, 0x6f, 0x6d, 0x2e, 0x64, 0x69, 0x67, 0x69, 0x74, 0x61, 0x6c, 0x61, 0x73, 0x73, 0x65, 0x74,
	0x2e, 0x63, 0x61, 0x6e, 0x74, 0x6f, 0x6e, 0x2e, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x76, 0x33, 0x30, 0x2e, 0x53, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x72,
	0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x2e, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72,
	0x4f, 0x6e, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x54, 0x6f, 0x70, 0x6f, 0x6c, 0x6f,
	0x67, 0x79, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x42, 0x57, 0x5a, 0x55, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62,
	0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x64, 0x69, 0x67, 0x69, 0x74, 0x61, 0x6c, 0x2d, 0x61, 0x73, 0x73,
	0x65, 0x74, 0x2f, 0x64, 0x61, 0x7a, 0x6c, 0x2d, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2f, 0x76,
	0x38, 0x2f, 0x67, 0x6f, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x63, 0x6f, 0x6d, 0x2f, 0x64, 0x69, 0x67,
	0x69, 0x74, 0x61, 0x6c, 0x61, 0x73, 0x73, 0x65, 0x74, 0x2f, 0x63, 0x61, 0x6e, 0x74, 0x6f, 0x6e,
	0x2f, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x33, 0x30, 0x62,
	0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_com_digitalasset_canton_domain_api_v30_sequencer_connect_service_proto_rawDescOnce sync.Once
	file_com_digitalasset_canton_domain_api_v30_sequencer_connect_service_proto_rawDescData = file_com_digitalasset_canton_domain_api_v30_sequencer_connect_service_proto_rawDesc
)

func file_com_digitalasset_canton_domain_api_v30_sequencer_connect_service_proto_rawDescGZIP() []byte {
	file_com_digitalasset_canton_domain_api_v30_sequencer_connect_service_proto_rawDescOnce.Do(func() {
		file_com_digitalasset_canton_domain_api_v30_sequencer_connect_service_proto_rawDescData = protoimpl.X.CompressGZIP(file_com_digitalasset_canton_domain_api_v30_sequencer_connect_service_proto_rawDescData)
	})
	return file_com_digitalasset_canton_domain_api_v30_sequencer_connect_service_proto_rawDescData
}

var file_com_digitalasset_canton_domain_api_v30_sequencer_connect_service_proto_msgTypes = make([]protoimpl.MessageInfo, 13)
var file_com_digitalasset_canton_domain_api_v30_sequencer_connect_service_proto_goTypes = []any{
	(*SequencerConnect)(nil),                                                // 0: com.digitalasset.canton.domain.api.v30.SequencerConnect
	(*SequencerConnect_HandshakeRequest)(nil),                               // 1: com.digitalasset.canton.domain.api.v30.SequencerConnect.HandshakeRequest
	(*SequencerConnect_HandshakeResponse)(nil),                              // 2: com.digitalasset.canton.domain.api.v30.SequencerConnect.HandshakeResponse
	(*SequencerConnect_GetDomainIdRequest)(nil),                             // 3: com.digitalasset.canton.domain.api.v30.SequencerConnect.GetDomainIdRequest
	(*SequencerConnect_GetDomainIdResponse)(nil),                            // 4: com.digitalasset.canton.domain.api.v30.SequencerConnect.GetDomainIdResponse
	(*SequencerConnect_GetDomainParametersRequest)(nil),                     // 5: com.digitalasset.canton.domain.api.v30.SequencerConnect.GetDomainParametersRequest
	(*SequencerConnect_GetDomainParametersResponse)(nil),                    // 6: com.digitalasset.canton.domain.api.v30.SequencerConnect.GetDomainParametersResponse
	(*SequencerConnect_VerifyActiveRequest)(nil),                            // 7: com.digitalasset.canton.domain.api.v30.SequencerConnect.VerifyActiveRequest
	(*SequencerConnect_VerifyActiveResponse)(nil),                           // 8: com.digitalasset.canton.domain.api.v30.SequencerConnect.VerifyActiveResponse
	(*SequencerConnect_RegisterOnboardingTopologyTransactionsRequest)(nil),  // 9: com.digitalasset.canton.domain.api.v30.SequencerConnect.RegisterOnboardingTopologyTransactionsRequest
	(*SequencerConnect_RegisterOnboardingTopologyTransactionsResponse)(nil), // 10: com.digitalasset.canton.domain.api.v30.SequencerConnect.RegisterOnboardingTopologyTransactionsResponse
	(*SequencerConnect_VerifyActiveResponse_Success)(nil),                   // 11: com.digitalasset.canton.domain.api.v30.SequencerConnect.VerifyActiveResponse.Success
	(*SequencerConnect_VerifyActiveResponse_Failure)(nil),                   // 12: com.digitalasset.canton.domain.api.v30.SequencerConnect.VerifyActiveResponse.Failure
	(*v30.Handshake_Request)(nil),                                           // 13: com.digitalasset.canton.protocol.v30.Handshake.Request
	(*v30.Handshake_Response)(nil),                                          // 14: com.digitalasset.canton.protocol.v30.Handshake.Response
	(*v30.StaticDomainParameters)(nil),                                      // 15: com.digitalasset.canton.protocol.v30.StaticDomainParameters
	(*v30.SignedTopologyTransaction)(nil),                                   // 16: com.digitalasset.canton.protocol.v30.SignedTopologyTransaction
}
var file_com_digitalasset_canton_domain_api_v30_sequencer_connect_service_proto_depIdxs = []int32{
	13, // 0: com.digitalasset.canton.domain.api.v30.SequencerConnect.HandshakeRequest.handshake_request:type_name -> com.digitalasset.canton.protocol.v30.Handshake.Request
	14, // 1: com.digitalasset.canton.domain.api.v30.SequencerConnect.HandshakeResponse.handshake_response:type_name -> com.digitalasset.canton.protocol.v30.Handshake.Response
	15, // 2: com.digitalasset.canton.domain.api.v30.SequencerConnect.GetDomainParametersResponse.parameters_v1:type_name -> com.digitalasset.canton.protocol.v30.StaticDomainParameters
	11, // 3: com.digitalasset.canton.domain.api.v30.SequencerConnect.VerifyActiveResponse.success:type_name -> com.digitalasset.canton.domain.api.v30.SequencerConnect.VerifyActiveResponse.Success
	12, // 4: com.digitalasset.canton.domain.api.v30.SequencerConnect.VerifyActiveResponse.failure:type_name -> com.digitalasset.canton.domain.api.v30.SequencerConnect.VerifyActiveResponse.Failure
	16, // 5: com.digitalasset.canton.domain.api.v30.SequencerConnect.RegisterOnboardingTopologyTransactionsRequest.topology_transactions:type_name -> com.digitalasset.canton.protocol.v30.SignedTopologyTransaction
	1,  // 6: com.digitalasset.canton.domain.api.v30.SequencerConnectService.Handshake:input_type -> com.digitalasset.canton.domain.api.v30.SequencerConnect.HandshakeRequest
	3,  // 7: com.digitalasset.canton.domain.api.v30.SequencerConnectService.GetDomainId:input_type -> com.digitalasset.canton.domain.api.v30.SequencerConnect.GetDomainIdRequest
	5,  // 8: com.digitalasset.canton.domain.api.v30.SequencerConnectService.GetDomainParameters:input_type -> com.digitalasset.canton.domain.api.v30.SequencerConnect.GetDomainParametersRequest
	7,  // 9: com.digitalasset.canton.domain.api.v30.SequencerConnectService.VerifyActive:input_type -> com.digitalasset.canton.domain.api.v30.SequencerConnect.VerifyActiveRequest
	9,  // 10: com.digitalasset.canton.domain.api.v30.SequencerConnectService.RegisterOnboardingTopologyTransactions:input_type -> com.digitalasset.canton.domain.api.v30.SequencerConnect.RegisterOnboardingTopologyTransactionsRequest
	2,  // 11: com.digitalasset.canton.domain.api.v30.SequencerConnectService.Handshake:output_type -> com.digitalasset.canton.domain.api.v30.SequencerConnect.HandshakeResponse
	4,  // 12: com.digitalasset.canton.domain.api.v30.SequencerConnectService.GetDomainId:output_type -> com.digitalasset.canton.domain.api.v30.SequencerConnect.GetDomainIdResponse
	6,  // 13: com.digitalasset.canton.domain.api.v30.SequencerConnectService.GetDomainParameters:output_type -> com.digitalasset.canton.domain.api.v30.SequencerConnect.GetDomainParametersResponse
	8,  // 14: com.digitalasset.canton.domain.api.v30.SequencerConnectService.VerifyActive:output_type -> com.digitalasset.canton.domain.api.v30.SequencerConnect.VerifyActiveResponse
	10, // 15: com.digitalasset.canton.domain.api.v30.SequencerConnectService.RegisterOnboardingTopologyTransactions:output_type -> com.digitalasset.canton.domain.api.v30.SequencerConnect.RegisterOnboardingTopologyTransactionsResponse
	11, // [11:16] is the sub-list for method output_type
	6,  // [6:11] is the sub-list for method input_type
	6,  // [6:6] is the sub-list for extension type_name
	6,  // [6:6] is the sub-list for extension extendee
	0,  // [0:6] is the sub-list for field type_name
}

func init() { file_com_digitalasset_canton_domain_api_v30_sequencer_connect_service_proto_init() }
func file_com_digitalasset_canton_domain_api_v30_sequencer_connect_service_proto_init() {
	if File_com_digitalasset_canton_domain_api_v30_sequencer_connect_service_proto != nil {
		return
	}
	file_com_digitalasset_canton_domain_api_v30_sequencer_connect_service_proto_msgTypes[6].OneofWrappers = []any{
		(*SequencerConnect_GetDomainParametersResponse_ParametersV1)(nil),
	}
	file_com_digitalasset_canton_domain_api_v30_sequencer_connect_service_proto_msgTypes[8].OneofWrappers = []any{
		(*SequencerConnect_VerifyActiveResponse_Success_)(nil),
		(*SequencerConnect_VerifyActiveResponse_Failure_)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_com_digitalasset_canton_domain_api_v30_sequencer_connect_service_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   13,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_com_digitalasset_canton_domain_api_v30_sequencer_connect_service_proto_goTypes,
		DependencyIndexes: file_com_digitalasset_canton_domain_api_v30_sequencer_connect_service_proto_depIdxs,
		MessageInfos:      file_com_digitalasset_canton_domain_api_v30_sequencer_connect_service_proto_msgTypes,
	}.Build()
	File_com_digitalasset_canton_domain_api_v30_sequencer_connect_service_proto = out.File
	file_com_digitalasset_canton_domain_api_v30_sequencer_connect_service_proto_rawDesc = nil
	file_com_digitalasset_canton_domain_api_v30_sequencer_connect_service_proto_goTypes = nil
	file_com_digitalasset_canton_domain_api_v30_sequencer_connect_service_proto_depIdxs = nil
}
