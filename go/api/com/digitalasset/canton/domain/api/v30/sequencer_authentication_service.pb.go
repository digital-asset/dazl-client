// Copyright (c) 2017-2025 Digital Asset (Switzerland) GmbH and/or its affiliates. All rights reserved.
// SPDX-License-Identifier: Apache-2.0
// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.35.2
// 	protoc        v5.27.2
// source: com/digitalasset/canton/domain/api/v30/sequencer_authentication_service.proto

package v30

import (
	v30 "github.com/digital-asset/dazl-client/v8/go/api/com/digitalasset/canton/crypto/v30"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type SequencerAuthentication struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *SequencerAuthentication) Reset() {
	*x = SequencerAuthentication{}
	mi := &file_com_digitalasset_canton_domain_api_v30_sequencer_authentication_service_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SequencerAuthentication) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SequencerAuthentication) ProtoMessage() {}

func (x *SequencerAuthentication) ProtoReflect() protoreflect.Message {
	mi := &file_com_digitalasset_canton_domain_api_v30_sequencer_authentication_service_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SequencerAuthentication.ProtoReflect.Descriptor instead.
func (*SequencerAuthentication) Descriptor() ([]byte, []int) {
	return file_com_digitalasset_canton_domain_api_v30_sequencer_authentication_service_proto_rawDescGZIP(), []int{0}
}

type SequencerAuthentication_ChallengeRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Member                 string   `protobuf:"bytes,1,opt,name=member,proto3" json:"member,omitempty"`
	MemberProtocolVersions []string `protobuf:"bytes,2,rep,name=member_protocol_versions,json=memberProtocolVersions,proto3" json:"member_protocol_versions,omitempty"`
}

func (x *SequencerAuthentication_ChallengeRequest) Reset() {
	*x = SequencerAuthentication_ChallengeRequest{}
	mi := &file_com_digitalasset_canton_domain_api_v30_sequencer_authentication_service_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SequencerAuthentication_ChallengeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SequencerAuthentication_ChallengeRequest) ProtoMessage() {}

func (x *SequencerAuthentication_ChallengeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_com_digitalasset_canton_domain_api_v30_sequencer_authentication_service_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SequencerAuthentication_ChallengeRequest.ProtoReflect.Descriptor instead.
func (*SequencerAuthentication_ChallengeRequest) Descriptor() ([]byte, []int) {
	return file_com_digitalasset_canton_domain_api_v30_sequencer_authentication_service_proto_rawDescGZIP(), []int{0, 0}
}

func (x *SequencerAuthentication_ChallengeRequest) GetMember() string {
	if x != nil {
		return x.Member
	}
	return ""
}

func (x *SequencerAuthentication_ChallengeRequest) GetMemberProtocolVersions() []string {
	if x != nil {
		return x.MemberProtocolVersions
	}
	return nil
}

type SequencerAuthentication_ChallengeResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Value:
	//
	//	*SequencerAuthentication_ChallengeResponse_Success_
	//	*SequencerAuthentication_ChallengeResponse_Failure_
	Value isSequencerAuthentication_ChallengeResponse_Value `protobuf_oneof:"value"`
}

func (x *SequencerAuthentication_ChallengeResponse) Reset() {
	*x = SequencerAuthentication_ChallengeResponse{}
	mi := &file_com_digitalasset_canton_domain_api_v30_sequencer_authentication_service_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SequencerAuthentication_ChallengeResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SequencerAuthentication_ChallengeResponse) ProtoMessage() {}

func (x *SequencerAuthentication_ChallengeResponse) ProtoReflect() protoreflect.Message {
	mi := &file_com_digitalasset_canton_domain_api_v30_sequencer_authentication_service_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SequencerAuthentication_ChallengeResponse.ProtoReflect.Descriptor instead.
func (*SequencerAuthentication_ChallengeResponse) Descriptor() ([]byte, []int) {
	return file_com_digitalasset_canton_domain_api_v30_sequencer_authentication_service_proto_rawDescGZIP(), []int{0, 1}
}

func (m *SequencerAuthentication_ChallengeResponse) GetValue() isSequencerAuthentication_ChallengeResponse_Value {
	if m != nil {
		return m.Value
	}
	return nil
}

func (x *SequencerAuthentication_ChallengeResponse) GetSuccess() *SequencerAuthentication_ChallengeResponse_Success {
	if x, ok := x.GetValue().(*SequencerAuthentication_ChallengeResponse_Success_); ok {
		return x.Success
	}
	return nil
}

func (x *SequencerAuthentication_ChallengeResponse) GetFailure() *SequencerAuthentication_ChallengeResponse_Failure {
	if x, ok := x.GetValue().(*SequencerAuthentication_ChallengeResponse_Failure_); ok {
		return x.Failure
	}
	return nil
}

type isSequencerAuthentication_ChallengeResponse_Value interface {
	isSequencerAuthentication_ChallengeResponse_Value()
}

type SequencerAuthentication_ChallengeResponse_Success_ struct {
	Success *SequencerAuthentication_ChallengeResponse_Success `protobuf:"bytes,1,opt,name=success,proto3,oneof"`
}

type SequencerAuthentication_ChallengeResponse_Failure_ struct {
	Failure *SequencerAuthentication_ChallengeResponse_Failure `protobuf:"bytes,2,opt,name=failure,proto3,oneof"`
}

func (*SequencerAuthentication_ChallengeResponse_Success_) isSequencerAuthentication_ChallengeResponse_Value() {
}

func (*SequencerAuthentication_ChallengeResponse_Failure_) isSequencerAuthentication_ChallengeResponse_Value() {
}

type SequencerAuthentication_AuthenticateRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Member    string         `protobuf:"bytes,1,opt,name=member,proto3" json:"member,omitempty"`
	Signature *v30.Signature `protobuf:"bytes,2,opt,name=signature,proto3" json:"signature,omitempty"`
	Nonce     []byte         `protobuf:"bytes,3,opt,name=nonce,proto3" json:"nonce,omitempty"`
}

func (x *SequencerAuthentication_AuthenticateRequest) Reset() {
	*x = SequencerAuthentication_AuthenticateRequest{}
	mi := &file_com_digitalasset_canton_domain_api_v30_sequencer_authentication_service_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SequencerAuthentication_AuthenticateRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SequencerAuthentication_AuthenticateRequest) ProtoMessage() {}

func (x *SequencerAuthentication_AuthenticateRequest) ProtoReflect() protoreflect.Message {
	mi := &file_com_digitalasset_canton_domain_api_v30_sequencer_authentication_service_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SequencerAuthentication_AuthenticateRequest.ProtoReflect.Descriptor instead.
func (*SequencerAuthentication_AuthenticateRequest) Descriptor() ([]byte, []int) {
	return file_com_digitalasset_canton_domain_api_v30_sequencer_authentication_service_proto_rawDescGZIP(), []int{0, 2}
}

func (x *SequencerAuthentication_AuthenticateRequest) GetMember() string {
	if x != nil {
		return x.Member
	}
	return ""
}

func (x *SequencerAuthentication_AuthenticateRequest) GetSignature() *v30.Signature {
	if x != nil {
		return x.Signature
	}
	return nil
}

func (x *SequencerAuthentication_AuthenticateRequest) GetNonce() []byte {
	if x != nil {
		return x.Nonce
	}
	return nil
}

type SequencerAuthentication_AuthenticateResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Value:
	//
	//	*SequencerAuthentication_AuthenticateResponse_Success_
	//	*SequencerAuthentication_AuthenticateResponse_Failure_
	Value isSequencerAuthentication_AuthenticateResponse_Value `protobuf_oneof:"value"`
}

func (x *SequencerAuthentication_AuthenticateResponse) Reset() {
	*x = SequencerAuthentication_AuthenticateResponse{}
	mi := &file_com_digitalasset_canton_domain_api_v30_sequencer_authentication_service_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SequencerAuthentication_AuthenticateResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SequencerAuthentication_AuthenticateResponse) ProtoMessage() {}

func (x *SequencerAuthentication_AuthenticateResponse) ProtoReflect() protoreflect.Message {
	mi := &file_com_digitalasset_canton_domain_api_v30_sequencer_authentication_service_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SequencerAuthentication_AuthenticateResponse.ProtoReflect.Descriptor instead.
func (*SequencerAuthentication_AuthenticateResponse) Descriptor() ([]byte, []int) {
	return file_com_digitalasset_canton_domain_api_v30_sequencer_authentication_service_proto_rawDescGZIP(), []int{0, 3}
}

func (m *SequencerAuthentication_AuthenticateResponse) GetValue() isSequencerAuthentication_AuthenticateResponse_Value {
	if m != nil {
		return m.Value
	}
	return nil
}

func (x *SequencerAuthentication_AuthenticateResponse) GetSuccess() *SequencerAuthentication_AuthenticateResponse_Success {
	if x, ok := x.GetValue().(*SequencerAuthentication_AuthenticateResponse_Success_); ok {
		return x.Success
	}
	return nil
}

func (x *SequencerAuthentication_AuthenticateResponse) GetFailure() *SequencerAuthentication_AuthenticateResponse_Failure {
	if x, ok := x.GetValue().(*SequencerAuthentication_AuthenticateResponse_Failure_); ok {
		return x.Failure
	}
	return nil
}

type isSequencerAuthentication_AuthenticateResponse_Value interface {
	isSequencerAuthentication_AuthenticateResponse_Value()
}

type SequencerAuthentication_AuthenticateResponse_Success_ struct {
	Success *SequencerAuthentication_AuthenticateResponse_Success `protobuf:"bytes,1,opt,name=success,proto3,oneof"`
}

type SequencerAuthentication_AuthenticateResponse_Failure_ struct {
	Failure *SequencerAuthentication_AuthenticateResponse_Failure `protobuf:"bytes,2,opt,name=failure,proto3,oneof"`
}

func (*SequencerAuthentication_AuthenticateResponse_Success_) isSequencerAuthentication_AuthenticateResponse_Value() {
}

func (*SequencerAuthentication_AuthenticateResponse_Failure_) isSequencerAuthentication_AuthenticateResponse_Value() {
}

type SequencerAuthentication_ChallengeResponse_Success struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DomainVersion string   `protobuf:"bytes,1,opt,name=domain_version,json=domainVersion,proto3" json:"domain_version,omitempty"`
	Nonce         []byte   `protobuf:"bytes,2,opt,name=nonce,proto3" json:"nonce,omitempty"`
	Fingerprints  []string `protobuf:"bytes,3,rep,name=fingerprints,proto3" json:"fingerprints,omitempty"`
}

func (x *SequencerAuthentication_ChallengeResponse_Success) Reset() {
	*x = SequencerAuthentication_ChallengeResponse_Success{}
	mi := &file_com_digitalasset_canton_domain_api_v30_sequencer_authentication_service_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SequencerAuthentication_ChallengeResponse_Success) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SequencerAuthentication_ChallengeResponse_Success) ProtoMessage() {}

func (x *SequencerAuthentication_ChallengeResponse_Success) ProtoReflect() protoreflect.Message {
	mi := &file_com_digitalasset_canton_domain_api_v30_sequencer_authentication_service_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SequencerAuthentication_ChallengeResponse_Success.ProtoReflect.Descriptor instead.
func (*SequencerAuthentication_ChallengeResponse_Success) Descriptor() ([]byte, []int) {
	return file_com_digitalasset_canton_domain_api_v30_sequencer_authentication_service_proto_rawDescGZIP(), []int{0, 1, 0}
}

func (x *SequencerAuthentication_ChallengeResponse_Success) GetDomainVersion() string {
	if x != nil {
		return x.DomainVersion
	}
	return ""
}

func (x *SequencerAuthentication_ChallengeResponse_Success) GetNonce() []byte {
	if x != nil {
		return x.Nonce
	}
	return nil
}

func (x *SequencerAuthentication_ChallengeResponse_Success) GetFingerprints() []string {
	if x != nil {
		return x.Fingerprints
	}
	return nil
}

type SequencerAuthentication_ChallengeResponse_Failure struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code   uint32 `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	Reason string `protobuf:"bytes,2,opt,name=reason,proto3" json:"reason,omitempty"`
}

func (x *SequencerAuthentication_ChallengeResponse_Failure) Reset() {
	*x = SequencerAuthentication_ChallengeResponse_Failure{}
	mi := &file_com_digitalasset_canton_domain_api_v30_sequencer_authentication_service_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SequencerAuthentication_ChallengeResponse_Failure) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SequencerAuthentication_ChallengeResponse_Failure) ProtoMessage() {}

func (x *SequencerAuthentication_ChallengeResponse_Failure) ProtoReflect() protoreflect.Message {
	mi := &file_com_digitalasset_canton_domain_api_v30_sequencer_authentication_service_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SequencerAuthentication_ChallengeResponse_Failure.ProtoReflect.Descriptor instead.
func (*SequencerAuthentication_ChallengeResponse_Failure) Descriptor() ([]byte, []int) {
	return file_com_digitalasset_canton_domain_api_v30_sequencer_authentication_service_proto_rawDescGZIP(), []int{0, 1, 1}
}

func (x *SequencerAuthentication_ChallengeResponse_Failure) GetCode() uint32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *SequencerAuthentication_ChallengeResponse_Failure) GetReason() string {
	if x != nil {
		return x.Reason
	}
	return ""
}

type SequencerAuthentication_AuthenticateResponse_Success struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Token     []byte                 `protobuf:"bytes,1,opt,name=token,proto3" json:"token,omitempty"`
	ExpiresAt *timestamppb.Timestamp `protobuf:"bytes,2,opt,name=expires_at,json=expiresAt,proto3" json:"expires_at,omitempty"`
}

func (x *SequencerAuthentication_AuthenticateResponse_Success) Reset() {
	*x = SequencerAuthentication_AuthenticateResponse_Success{}
	mi := &file_com_digitalasset_canton_domain_api_v30_sequencer_authentication_service_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SequencerAuthentication_AuthenticateResponse_Success) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SequencerAuthentication_AuthenticateResponse_Success) ProtoMessage() {}

func (x *SequencerAuthentication_AuthenticateResponse_Success) ProtoReflect() protoreflect.Message {
	mi := &file_com_digitalasset_canton_domain_api_v30_sequencer_authentication_service_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SequencerAuthentication_AuthenticateResponse_Success.ProtoReflect.Descriptor instead.
func (*SequencerAuthentication_AuthenticateResponse_Success) Descriptor() ([]byte, []int) {
	return file_com_digitalasset_canton_domain_api_v30_sequencer_authentication_service_proto_rawDescGZIP(), []int{0, 3, 0}
}

func (x *SequencerAuthentication_AuthenticateResponse_Success) GetToken() []byte {
	if x != nil {
		return x.Token
	}
	return nil
}

func (x *SequencerAuthentication_AuthenticateResponse_Success) GetExpiresAt() *timestamppb.Timestamp {
	if x != nil {
		return x.ExpiresAt
	}
	return nil
}

type SequencerAuthentication_AuthenticateResponse_Failure struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code   uint32 `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	Reason string `protobuf:"bytes,2,opt,name=reason,proto3" json:"reason,omitempty"`
}

func (x *SequencerAuthentication_AuthenticateResponse_Failure) Reset() {
	*x = SequencerAuthentication_AuthenticateResponse_Failure{}
	mi := &file_com_digitalasset_canton_domain_api_v30_sequencer_authentication_service_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SequencerAuthentication_AuthenticateResponse_Failure) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SequencerAuthentication_AuthenticateResponse_Failure) ProtoMessage() {}

func (x *SequencerAuthentication_AuthenticateResponse_Failure) ProtoReflect() protoreflect.Message {
	mi := &file_com_digitalasset_canton_domain_api_v30_sequencer_authentication_service_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SequencerAuthentication_AuthenticateResponse_Failure.ProtoReflect.Descriptor instead.
func (*SequencerAuthentication_AuthenticateResponse_Failure) Descriptor() ([]byte, []int) {
	return file_com_digitalasset_canton_domain_api_v30_sequencer_authentication_service_proto_rawDescGZIP(), []int{0, 3, 1}
}

func (x *SequencerAuthentication_AuthenticateResponse_Failure) GetCode() uint32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *SequencerAuthentication_AuthenticateResponse_Failure) GetReason() string {
	if x != nil {
		return x.Reason
	}
	return ""
}

var File_com_digitalasset_canton_domain_api_v30_sequencer_authentication_service_proto protoreflect.FileDescriptor

var file_com_digitalasset_canton_domain_api_v30_sequencer_authentication_service_proto_rawDesc = []byte{
	0x0a, 0x4d, 0x63, 0x6f, 0x6d, 0x2f, 0x64, 0x69, 0x67, 0x69, 0x74, 0x61, 0x6c, 0x61, 0x73, 0x73,
	0x65, 0x74, 0x2f, 0x63, 0x61, 0x6e, 0x74, 0x6f, 0x6e, 0x2f, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e,
	0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x33, 0x30, 0x2f, 0x73, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63,
	0x65, 0x72, 0x5f, 0x61, 0x75, 0x74, 0x68, 0x65, 0x6e, 0x74, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12,
	0x26, 0x63, 0x6f, 0x6d, 0x2e, 0x64, 0x69, 0x67, 0x69, 0x74, 0x61, 0x6c, 0x61, 0x73, 0x73, 0x65,
	0x74, 0x2e, 0x63, 0x61, 0x6e, 0x74, 0x6f, 0x6e, 0x2e, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x76, 0x33, 0x30, 0x1a, 0x2f, 0x63, 0x6f, 0x6d, 0x2f, 0x64, 0x69, 0x67,
	0x69, 0x74, 0x61, 0x6c, 0x61, 0x73, 0x73, 0x65, 0x74, 0x2f, 0x63, 0x61, 0x6e, 0x74, 0x6f, 0x6e,
	0x2f, 0x63, 0x72, 0x79, 0x70, 0x74, 0x6f, 0x2f, 0x76, 0x33, 0x30, 0x2f, 0x63, 0x72, 0x79, 0x70,
	0x74, 0x6f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74,
	0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xeb, 0x08, 0x0a, 0x17, 0x53, 0x65,
	0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x72, 0x41, 0x75, 0x74, 0x68, 0x65, 0x6e, 0x74, 0x69, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x1a, 0x64, 0x0a, 0x10, 0x43, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e,
	0x67, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x6d, 0x65, 0x6d,
	0x62, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x6d, 0x65, 0x6d, 0x62, 0x65,
	0x72, 0x12, 0x38, 0x0a, 0x18, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x5f, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x63, 0x6f, 0x6c, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x02, 0x20,
	0x03, 0x28, 0x09, 0x52, 0x16, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x50, 0x72, 0x6f, 0x74, 0x6f,
	0x63, 0x6f, 0x6c, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x1a, 0xad, 0x03, 0x0a, 0x11,
	0x43, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x75, 0x0a, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x59, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x64, 0x69, 0x67, 0x69, 0x74, 0x61, 0x6c,
	0x61, 0x73, 0x73, 0x65, 0x74, 0x2e, 0x63, 0x61, 0x6e, 0x74, 0x6f, 0x6e, 0x2e, 0x64, 0x6f, 0x6d,
	0x61, 0x69, 0x6e, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x33, 0x30, 0x2e, 0x53, 0x65, 0x71, 0x75,
	0x65, 0x6e, 0x63, 0x65, 0x72, 0x41, 0x75, 0x74, 0x68, 0x65, 0x6e, 0x74, 0x69, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x2e, 0x43, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x53, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x48, 0x00, 0x52,
	0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x12, 0x75, 0x0a, 0x07, 0x66, 0x61, 0x69, 0x6c,
	0x75, 0x72, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x59, 0x2e, 0x63, 0x6f, 0x6d, 0x2e,
	0x64, 0x69, 0x67, 0x69, 0x74, 0x61, 0x6c, 0x61, 0x73, 0x73, 0x65, 0x74, 0x2e, 0x63, 0x61, 0x6e,
	0x74, 0x6f, 0x6e, 0x2e, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76,
	0x33, 0x30, 0x2e, 0x53, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x72, 0x41, 0x75, 0x74, 0x68,
	0x65, 0x6e, 0x74, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x43, 0x68, 0x61, 0x6c, 0x6c,
	0x65, 0x6e, 0x67, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x46, 0x61, 0x69,
	0x6c, 0x75, 0x72, 0x65, 0x48, 0x00, 0x52, 0x07, 0x66, 0x61, 0x69, 0x6c, 0x75, 0x72, 0x65, 0x1a,
	0x6a, 0x0a, 0x07, 0x53, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x12, 0x25, 0x0a, 0x0e, 0x64, 0x6f,
	0x6d, 0x61, 0x69, 0x6e, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0d, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f,
	0x6e, 0x12, 0x14, 0x0a, 0x05, 0x6e, 0x6f, 0x6e, 0x63, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c,
	0x52, 0x05, 0x6e, 0x6f, 0x6e, 0x63, 0x65, 0x12, 0x22, 0x0a, 0x0c, 0x66, 0x69, 0x6e, 0x67, 0x65,
	0x72, 0x70, 0x72, 0x69, 0x6e, 0x74, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0c, 0x66,
	0x69, 0x6e, 0x67, 0x65, 0x72, 0x70, 0x72, 0x69, 0x6e, 0x74, 0x73, 0x1a, 0x35, 0x0a, 0x07, 0x46,
	0x61, 0x69, 0x6c, 0x75, 0x72, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65,
	0x61, 0x73, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x72, 0x65, 0x61, 0x73,
	0x6f, 0x6e, 0x42, 0x07, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x1a, 0x90, 0x01, 0x0a, 0x13,
	0x41, 0x75, 0x74, 0x68, 0x65, 0x6e, 0x74, 0x69, 0x63, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x06, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x4b, 0x0a, 0x09, 0x73,
	0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2d,
	0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x64, 0x69, 0x67, 0x69, 0x74, 0x61, 0x6c, 0x61, 0x73, 0x73, 0x65,
	0x74, 0x2e, 0x63, 0x61, 0x6e, 0x74, 0x6f, 0x6e, 0x2e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x6f, 0x2e,
	0x76, 0x33, 0x30, 0x2e, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x52, 0x09, 0x73,
	0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x6e, 0x6f, 0x6e, 0x63,
	0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x05, 0x6e, 0x6f, 0x6e, 0x63, 0x65, 0x1a, 0xa6,
	0x03, 0x0a, 0x14, 0x41, 0x75, 0x74, 0x68, 0x65, 0x6e, 0x74, 0x69, 0x63, 0x61, 0x74, 0x65, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x78, 0x0a, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65,
	0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x5c, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x64,
	0x69, 0x67, 0x69, 0x74, 0x61, 0x6c, 0x61, 0x73, 0x73, 0x65, 0x74, 0x2e, 0x63, 0x61, 0x6e, 0x74,
	0x6f, 0x6e, 0x2e, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x33,
	0x30, 0x2e, 0x53, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x72, 0x41, 0x75, 0x74, 0x68, 0x65,
	0x6e, 0x74, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x41, 0x75, 0x74, 0x68, 0x65, 0x6e,
	0x74, 0x69, 0x63, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x53,
	0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x48, 0x00, 0x52, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73,
	0x73, 0x12, 0x78, 0x0a, 0x07, 0x66, 0x61, 0x69, 0x6c, 0x75, 0x72, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x5c, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x64, 0x69, 0x67, 0x69, 0x74, 0x61, 0x6c,
	0x61, 0x73, 0x73, 0x65, 0x74, 0x2e, 0x63, 0x61, 0x6e, 0x74, 0x6f, 0x6e, 0x2e, 0x64, 0x6f, 0x6d,
	0x61, 0x69, 0x6e, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x33, 0x30, 0x2e, 0x53, 0x65, 0x71, 0x75,
	0x65, 0x6e, 0x63, 0x65, 0x72, 0x41, 0x75, 0x74, 0x68, 0x65, 0x6e, 0x74, 0x69, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x2e, 0x41, 0x75, 0x74, 0x68, 0x65, 0x6e, 0x74, 0x69, 0x63, 0x61, 0x74, 0x65,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x46, 0x61, 0x69, 0x6c, 0x75, 0x72, 0x65,
	0x48, 0x00, 0x52, 0x07, 0x66, 0x61, 0x69, 0x6c, 0x75, 0x72, 0x65, 0x1a, 0x5a, 0x0a, 0x07, 0x53,
	0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x39, 0x0a, 0x0a,
	0x65, 0x78, 0x70, 0x69, 0x72, 0x65, 0x73, 0x5f, 0x61, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x65, 0x78,
	0x70, 0x69, 0x72, 0x65, 0x73, 0x41, 0x74, 0x1a, 0x35, 0x0a, 0x07, 0x46, 0x61, 0x69, 0x6c, 0x75,
	0x72, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x42, 0x07,
	0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x32, 0x93, 0x03, 0x0a, 0x1e, 0x53, 0x65, 0x71, 0x75,
	0x65, 0x6e, 0x63, 0x65, 0x72, 0x41, 0x75, 0x74, 0x68, 0x65, 0x6e, 0x74, 0x69, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0xb2, 0x01, 0x0a, 0x09, 0x43,
	0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65, 0x12, 0x50, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x64,
	0x69, 0x67, 0x69, 0x74, 0x61, 0x6c, 0x61, 0x73, 0x73, 0x65, 0x74, 0x2e, 0x63, 0x61, 0x6e, 0x74,
	0x6f, 0x6e, 0x2e, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x33,
	0x30, 0x2e, 0x53, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x72, 0x41, 0x75, 0x74, 0x68, 0x65,
	0x6e, 0x74, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x43, 0x68, 0x61, 0x6c, 0x6c, 0x65,
	0x6e, 0x67, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x51, 0x2e, 0x63, 0x6f, 0x6d,
	0x2e, 0x64, 0x69, 0x67, 0x69, 0x74, 0x61, 0x6c, 0x61, 0x73, 0x73, 0x65, 0x74, 0x2e, 0x63, 0x61,
	0x6e, 0x74, 0x6f, 0x6e, 0x2e, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x76, 0x33, 0x30, 0x2e, 0x53, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x72, 0x41, 0x75, 0x74,
	0x68, 0x65, 0x6e, 0x74, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x43, 0x68, 0x61, 0x6c,
	0x6c, 0x65, 0x6e, 0x67, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12,
	0xbb, 0x01, 0x0a, 0x0c, 0x41, 0x75, 0x74, 0x68, 0x65, 0x6e, 0x74, 0x69, 0x63, 0x61, 0x74, 0x65,
	0x12, 0x53, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x64, 0x69, 0x67, 0x69, 0x74, 0x61, 0x6c, 0x61, 0x73,
	0x73, 0x65, 0x74, 0x2e, 0x63, 0x61, 0x6e, 0x74, 0x6f, 0x6e, 0x2e, 0x64, 0x6f, 0x6d, 0x61, 0x69,
	0x6e, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x33, 0x30, 0x2e, 0x53, 0x65, 0x71, 0x75, 0x65, 0x6e,
	0x63, 0x65, 0x72, 0x41, 0x75, 0x74, 0x68, 0x65, 0x6e, 0x74, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x2e, 0x41, 0x75, 0x74, 0x68, 0x65, 0x6e, 0x74, 0x69, 0x63, 0x61, 0x74, 0x65, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x54, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x64, 0x69, 0x67, 0x69,
	0x74, 0x61, 0x6c, 0x61, 0x73, 0x73, 0x65, 0x74, 0x2e, 0x63, 0x61, 0x6e, 0x74, 0x6f, 0x6e, 0x2e,
	0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x33, 0x30, 0x2e, 0x53,
	0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x72, 0x41, 0x75, 0x74, 0x68, 0x65, 0x6e, 0x74, 0x69,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x41, 0x75, 0x74, 0x68, 0x65, 0x6e, 0x74, 0x69, 0x63,
	0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x42, 0x57, 0x5a,
	0x55, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x64, 0x69, 0x67, 0x69,
	0x74, 0x61, 0x6c, 0x2d, 0x61, 0x73, 0x73, 0x65, 0x74, 0x2f, 0x64, 0x61, 0x7a, 0x6c, 0x2d, 0x63,
	0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2f, 0x76, 0x38, 0x2f, 0x67, 0x6f, 0x2f, 0x61, 0x70, 0x69, 0x2f,
	0x63, 0x6f, 0x6d, 0x2f, 0x64, 0x69, 0x67, 0x69, 0x74, 0x61, 0x6c, 0x61, 0x73, 0x73, 0x65, 0x74,
	0x2f, 0x63, 0x61, 0x6e, 0x74, 0x6f, 0x6e, 0x2f, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x2f, 0x61,
	0x70, 0x69, 0x2f, 0x76, 0x33, 0x30, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_com_digitalasset_canton_domain_api_v30_sequencer_authentication_service_proto_rawDescOnce sync.Once
	file_com_digitalasset_canton_domain_api_v30_sequencer_authentication_service_proto_rawDescData = file_com_digitalasset_canton_domain_api_v30_sequencer_authentication_service_proto_rawDesc
)

func file_com_digitalasset_canton_domain_api_v30_sequencer_authentication_service_proto_rawDescGZIP() []byte {
	file_com_digitalasset_canton_domain_api_v30_sequencer_authentication_service_proto_rawDescOnce.Do(func() {
		file_com_digitalasset_canton_domain_api_v30_sequencer_authentication_service_proto_rawDescData = protoimpl.X.CompressGZIP(file_com_digitalasset_canton_domain_api_v30_sequencer_authentication_service_proto_rawDescData)
	})
	return file_com_digitalasset_canton_domain_api_v30_sequencer_authentication_service_proto_rawDescData
}

var file_com_digitalasset_canton_domain_api_v30_sequencer_authentication_service_proto_msgTypes = make([]protoimpl.MessageInfo, 9)
var file_com_digitalasset_canton_domain_api_v30_sequencer_authentication_service_proto_goTypes = []any{
	(*SequencerAuthentication)(nil),                              // 0: com.digitalasset.canton.domain.api.v30.SequencerAuthentication
	(*SequencerAuthentication_ChallengeRequest)(nil),             // 1: com.digitalasset.canton.domain.api.v30.SequencerAuthentication.ChallengeRequest
	(*SequencerAuthentication_ChallengeResponse)(nil),            // 2: com.digitalasset.canton.domain.api.v30.SequencerAuthentication.ChallengeResponse
	(*SequencerAuthentication_AuthenticateRequest)(nil),          // 3: com.digitalasset.canton.domain.api.v30.SequencerAuthentication.AuthenticateRequest
	(*SequencerAuthentication_AuthenticateResponse)(nil),         // 4: com.digitalasset.canton.domain.api.v30.SequencerAuthentication.AuthenticateResponse
	(*SequencerAuthentication_ChallengeResponse_Success)(nil),    // 5: com.digitalasset.canton.domain.api.v30.SequencerAuthentication.ChallengeResponse.Success
	(*SequencerAuthentication_ChallengeResponse_Failure)(nil),    // 6: com.digitalasset.canton.domain.api.v30.SequencerAuthentication.ChallengeResponse.Failure
	(*SequencerAuthentication_AuthenticateResponse_Success)(nil), // 7: com.digitalasset.canton.domain.api.v30.SequencerAuthentication.AuthenticateResponse.Success
	(*SequencerAuthentication_AuthenticateResponse_Failure)(nil), // 8: com.digitalasset.canton.domain.api.v30.SequencerAuthentication.AuthenticateResponse.Failure
	(*v30.Signature)(nil),                                        // 9: com.digitalasset.canton.crypto.v30.Signature
	(*timestamppb.Timestamp)(nil),                                // 10: google.protobuf.Timestamp
}
var file_com_digitalasset_canton_domain_api_v30_sequencer_authentication_service_proto_depIdxs = []int32{
	5,  // 0: com.digitalasset.canton.domain.api.v30.SequencerAuthentication.ChallengeResponse.success:type_name -> com.digitalasset.canton.domain.api.v30.SequencerAuthentication.ChallengeResponse.Success
	6,  // 1: com.digitalasset.canton.domain.api.v30.SequencerAuthentication.ChallengeResponse.failure:type_name -> com.digitalasset.canton.domain.api.v30.SequencerAuthentication.ChallengeResponse.Failure
	9,  // 2: com.digitalasset.canton.domain.api.v30.SequencerAuthentication.AuthenticateRequest.signature:type_name -> com.digitalasset.canton.crypto.v30.Signature
	7,  // 3: com.digitalasset.canton.domain.api.v30.SequencerAuthentication.AuthenticateResponse.success:type_name -> com.digitalasset.canton.domain.api.v30.SequencerAuthentication.AuthenticateResponse.Success
	8,  // 4: com.digitalasset.canton.domain.api.v30.SequencerAuthentication.AuthenticateResponse.failure:type_name -> com.digitalasset.canton.domain.api.v30.SequencerAuthentication.AuthenticateResponse.Failure
	10, // 5: com.digitalasset.canton.domain.api.v30.SequencerAuthentication.AuthenticateResponse.Success.expires_at:type_name -> google.protobuf.Timestamp
	1,  // 6: com.digitalasset.canton.domain.api.v30.SequencerAuthenticationService.Challenge:input_type -> com.digitalasset.canton.domain.api.v30.SequencerAuthentication.ChallengeRequest
	3,  // 7: com.digitalasset.canton.domain.api.v30.SequencerAuthenticationService.Authenticate:input_type -> com.digitalasset.canton.domain.api.v30.SequencerAuthentication.AuthenticateRequest
	2,  // 8: com.digitalasset.canton.domain.api.v30.SequencerAuthenticationService.Challenge:output_type -> com.digitalasset.canton.domain.api.v30.SequencerAuthentication.ChallengeResponse
	4,  // 9: com.digitalasset.canton.domain.api.v30.SequencerAuthenticationService.Authenticate:output_type -> com.digitalasset.canton.domain.api.v30.SequencerAuthentication.AuthenticateResponse
	8,  // [8:10] is the sub-list for method output_type
	6,  // [6:8] is the sub-list for method input_type
	6,  // [6:6] is the sub-list for extension type_name
	6,  // [6:6] is the sub-list for extension extendee
	0,  // [0:6] is the sub-list for field type_name
}

func init() {
	file_com_digitalasset_canton_domain_api_v30_sequencer_authentication_service_proto_init()
}
func file_com_digitalasset_canton_domain_api_v30_sequencer_authentication_service_proto_init() {
	if File_com_digitalasset_canton_domain_api_v30_sequencer_authentication_service_proto != nil {
		return
	}
	file_com_digitalasset_canton_domain_api_v30_sequencer_authentication_service_proto_msgTypes[2].OneofWrappers = []any{
		(*SequencerAuthentication_ChallengeResponse_Success_)(nil),
		(*SequencerAuthentication_ChallengeResponse_Failure_)(nil),
	}
	file_com_digitalasset_canton_domain_api_v30_sequencer_authentication_service_proto_msgTypes[4].OneofWrappers = []any{
		(*SequencerAuthentication_AuthenticateResponse_Success_)(nil),
		(*SequencerAuthentication_AuthenticateResponse_Failure_)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_com_digitalasset_canton_domain_api_v30_sequencer_authentication_service_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   9,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_com_digitalasset_canton_domain_api_v30_sequencer_authentication_service_proto_goTypes,
		DependencyIndexes: file_com_digitalasset_canton_domain_api_v30_sequencer_authentication_service_proto_depIdxs,
		MessageInfos:      file_com_digitalasset_canton_domain_api_v30_sequencer_authentication_service_proto_msgTypes,
	}.Build()
	File_com_digitalasset_canton_domain_api_v30_sequencer_authentication_service_proto = out.File
	file_com_digitalasset_canton_domain_api_v30_sequencer_authentication_service_proto_rawDesc = nil
	file_com_digitalasset_canton_domain_api_v30_sequencer_authentication_service_proto_goTypes = nil
	file_com_digitalasset_canton_domain_api_v30_sequencer_authentication_service_proto_depIdxs = nil
}
