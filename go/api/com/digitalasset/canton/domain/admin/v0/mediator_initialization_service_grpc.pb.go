// Copyright (c) 2017-2025 Digital Asset (Switzerland) GmbH and/or its affiliates. All rights reserved.
// SPDX-License-Identifier: Apache-2.0
// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.27.2
// source: com/digitalasset/canton/domain/admin/v0/mediator_initialization_service.proto

package v0

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	MediatorInitializationService_Initialize_FullMethodName = "/com.digitalasset.canton.domain.admin.v0.MediatorInitializationService/Initialize"
)

// MediatorInitializationServiceClient is the client API for MediatorInitializationService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type MediatorInitializationServiceClient interface {
	Initialize(ctx context.Context, in *InitializeMediatorRequest, opts ...grpc.CallOption) (*InitializeMediatorResponse, error)
}

type mediatorInitializationServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewMediatorInitializationServiceClient(cc grpc.ClientConnInterface) MediatorInitializationServiceClient {
	return &mediatorInitializationServiceClient{cc}
}

func (c *mediatorInitializationServiceClient) Initialize(ctx context.Context, in *InitializeMediatorRequest, opts ...grpc.CallOption) (*InitializeMediatorResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(InitializeMediatorResponse)
	err := c.cc.Invoke(ctx, MediatorInitializationService_Initialize_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MediatorInitializationServiceServer is the server API for MediatorInitializationService service.
// All implementations must embed UnimplementedMediatorInitializationServiceServer
// for forward compatibility.
type MediatorInitializationServiceServer interface {
	Initialize(context.Context, *InitializeMediatorRequest) (*InitializeMediatorResponse, error)
	mustEmbedUnimplementedMediatorInitializationServiceServer()
}

// UnimplementedMediatorInitializationServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedMediatorInitializationServiceServer struct{}

func (UnimplementedMediatorInitializationServiceServer) Initialize(context.Context, *InitializeMediatorRequest) (*InitializeMediatorResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Initialize not implemented")
}
func (UnimplementedMediatorInitializationServiceServer) mustEmbedUnimplementedMediatorInitializationServiceServer() {
}
func (UnimplementedMediatorInitializationServiceServer) testEmbeddedByValue() {}

// UnsafeMediatorInitializationServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MediatorInitializationServiceServer will
// result in compilation errors.
type UnsafeMediatorInitializationServiceServer interface {
	mustEmbedUnimplementedMediatorInitializationServiceServer()
}

func RegisterMediatorInitializationServiceServer(s grpc.ServiceRegistrar, srv MediatorInitializationServiceServer) {
	// If the following call pancis, it indicates UnimplementedMediatorInitializationServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&MediatorInitializationService_ServiceDesc, srv)
}

func _MediatorInitializationService_Initialize_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(InitializeMediatorRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MediatorInitializationServiceServer).Initialize(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MediatorInitializationService_Initialize_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MediatorInitializationServiceServer).Initialize(ctx, req.(*InitializeMediatorRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// MediatorInitializationService_ServiceDesc is the grpc.ServiceDesc for MediatorInitializationService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var MediatorInitializationService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "com.digitalasset.canton.domain.admin.v0.MediatorInitializationService",
	HandlerType: (*MediatorInitializationServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Initialize",
			Handler:    _MediatorInitializationService_Initialize_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "com/digitalasset/canton/domain/admin/v0/mediator_initialization_service.proto",
}
