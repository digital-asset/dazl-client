// Copyright (c) 2017-2025 Digital Asset (Switzerland) GmbH and/or its affiliates. All rights reserved.
// SPDX-License-Identifier: Apache-2.0
// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.27.2
// source: com/digitalasset/canton/domain/admin/v0/domain_initialization_service.proto

package v0

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	DomainInitializationService_Init_FullMethodName = "/com.digitalasset.canton.domain.admin.v0.DomainInitializationService/Init"
)

// DomainInitializationServiceClient is the client API for DomainInitializationService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type DomainInitializationServiceClient interface {
	Init(ctx context.Context, in *DomainInitRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
}

type domainInitializationServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewDomainInitializationServiceClient(cc grpc.ClientConnInterface) DomainInitializationServiceClient {
	return &domainInitializationServiceClient{cc}
}

func (c *domainInitializationServiceClient) Init(ctx context.Context, in *DomainInitRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, DomainInitializationService_Init_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// DomainInitializationServiceServer is the server API for DomainInitializationService service.
// All implementations must embed UnimplementedDomainInitializationServiceServer
// for forward compatibility.
type DomainInitializationServiceServer interface {
	Init(context.Context, *DomainInitRequest) (*emptypb.Empty, error)
	mustEmbedUnimplementedDomainInitializationServiceServer()
}

// UnimplementedDomainInitializationServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedDomainInitializationServiceServer struct{}

func (UnimplementedDomainInitializationServiceServer) Init(context.Context, *DomainInitRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Init not implemented")
}
func (UnimplementedDomainInitializationServiceServer) mustEmbedUnimplementedDomainInitializationServiceServer() {
}
func (UnimplementedDomainInitializationServiceServer) testEmbeddedByValue() {}

// UnsafeDomainInitializationServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to DomainInitializationServiceServer will
// result in compilation errors.
type UnsafeDomainInitializationServiceServer interface {
	mustEmbedUnimplementedDomainInitializationServiceServer()
}

func RegisterDomainInitializationServiceServer(s grpc.ServiceRegistrar, srv DomainInitializationServiceServer) {
	// If the following call pancis, it indicates UnimplementedDomainInitializationServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&DomainInitializationService_ServiceDesc, srv)
}

func _DomainInitializationService_Init_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DomainInitRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DomainInitializationServiceServer).Init(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DomainInitializationService_Init_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DomainInitializationServiceServer).Init(ctx, req.(*DomainInitRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// DomainInitializationService_ServiceDesc is the grpc.ServiceDesc for DomainInitializationService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var DomainInitializationService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "com.digitalasset.canton.domain.admin.v0.DomainInitializationService",
	HandlerType: (*DomainInitializationServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Init",
			Handler:    _DomainInitializationService_Init_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "com/digitalasset/canton/domain/admin/v0/domain_initialization_service.proto",
}
