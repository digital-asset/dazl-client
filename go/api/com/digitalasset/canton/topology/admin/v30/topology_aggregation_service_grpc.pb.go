// Copyright (c) 2017-2025 Digital Asset (Switzerland) GmbH and/or its affiliates. All rights reserved.
// SPDX-License-Identifier: Apache-2.0
// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v6.30.0
// source: com/digitalasset/canton/topology/admin/v30/topology_aggregation_service.proto

package v30

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	TopologyAggregationService_ListParties_FullMethodName   = "/com.digitalasset.canton.topology.admin.v30.TopologyAggregationService/ListParties"
	TopologyAggregationService_ListKeyOwners_FullMethodName = "/com.digitalasset.canton.topology.admin.v30.TopologyAggregationService/ListKeyOwners"
)

// TopologyAggregationServiceClient is the client API for TopologyAggregationService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type TopologyAggregationServiceClient interface {
	ListParties(ctx context.Context, in *ListPartiesRequest, opts ...grpc.CallOption) (*ListPartiesResponse, error)
	ListKeyOwners(ctx context.Context, in *ListKeyOwnersRequest, opts ...grpc.CallOption) (*ListKeyOwnersResponse, error)
}

type topologyAggregationServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewTopologyAggregationServiceClient(cc grpc.ClientConnInterface) TopologyAggregationServiceClient {
	return &topologyAggregationServiceClient{cc}
}

func (c *topologyAggregationServiceClient) ListParties(ctx context.Context, in *ListPartiesRequest, opts ...grpc.CallOption) (*ListPartiesResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListPartiesResponse)
	err := c.cc.Invoke(ctx, TopologyAggregationService_ListParties_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *topologyAggregationServiceClient) ListKeyOwners(ctx context.Context, in *ListKeyOwnersRequest, opts ...grpc.CallOption) (*ListKeyOwnersResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListKeyOwnersResponse)
	err := c.cc.Invoke(ctx, TopologyAggregationService_ListKeyOwners_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TopologyAggregationServiceServer is the server API for TopologyAggregationService service.
// All implementations must embed UnimplementedTopologyAggregationServiceServer
// for forward compatibility.
type TopologyAggregationServiceServer interface {
	ListParties(context.Context, *ListPartiesRequest) (*ListPartiesResponse, error)
	ListKeyOwners(context.Context, *ListKeyOwnersRequest) (*ListKeyOwnersResponse, error)
	mustEmbedUnimplementedTopologyAggregationServiceServer()
}

// UnimplementedTopologyAggregationServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedTopologyAggregationServiceServer struct{}

func (UnimplementedTopologyAggregationServiceServer) ListParties(context.Context, *ListPartiesRequest) (*ListPartiesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListParties not implemented")
}
func (UnimplementedTopologyAggregationServiceServer) ListKeyOwners(context.Context, *ListKeyOwnersRequest) (*ListKeyOwnersResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListKeyOwners not implemented")
}
func (UnimplementedTopologyAggregationServiceServer) mustEmbedUnimplementedTopologyAggregationServiceServer() {
}
func (UnimplementedTopologyAggregationServiceServer) testEmbeddedByValue() {}

// UnsafeTopologyAggregationServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to TopologyAggregationServiceServer will
// result in compilation errors.
type UnsafeTopologyAggregationServiceServer interface {
	mustEmbedUnimplementedTopologyAggregationServiceServer()
}

func RegisterTopologyAggregationServiceServer(s grpc.ServiceRegistrar, srv TopologyAggregationServiceServer) {
	// If the following call pancis, it indicates UnimplementedTopologyAggregationServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&TopologyAggregationService_ServiceDesc, srv)
}

func _TopologyAggregationService_ListParties_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListPartiesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TopologyAggregationServiceServer).ListParties(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TopologyAggregationService_ListParties_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TopologyAggregationServiceServer).ListParties(ctx, req.(*ListPartiesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TopologyAggregationService_ListKeyOwners_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListKeyOwnersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TopologyAggregationServiceServer).ListKeyOwners(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TopologyAggregationService_ListKeyOwners_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TopologyAggregationServiceServer).ListKeyOwners(ctx, req.(*ListKeyOwnersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// TopologyAggregationService_ServiceDesc is the grpc.ServiceDesc for TopologyAggregationService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var TopologyAggregationService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "com.digitalasset.canton.topology.admin.v30.TopologyAggregationService",
	HandlerType: (*TopologyAggregationServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ListParties",
			Handler:    _TopologyAggregationService_ListParties_Handler,
		},
		{
			MethodName: "ListKeyOwners",
			Handler:    _TopologyAggregationService_ListKeyOwners_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "com/digitalasset/canton/topology/admin/v30/topology_aggregation_service.proto",
}
