// Copyright (c) 2017-2025 Digital Asset (Switzerland) GmbH and/or its affiliates. All rights reserved.
// SPDX-License-Identifier: Apache-2.0
// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.27.2
// source: com/digitalasset/canton/topology/admin/v30/initialization_service.proto

package v30

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	IdentityInitializationService_InitId_FullMethodName                    = "/com.digitalasset.canton.topology.admin.v30.IdentityInitializationService/InitId"
	IdentityInitializationService_GetOnboardingTransactions_FullMethodName = "/com.digitalasset.canton.topology.admin.v30.IdentityInitializationService/GetOnboardingTransactions"
	IdentityInitializationService_GetId_FullMethodName                     = "/com.digitalasset.canton.topology.admin.v30.IdentityInitializationService/GetId"
	IdentityInitializationService_CurrentTime_FullMethodName               = "/com.digitalasset.canton.topology.admin.v30.IdentityInitializationService/CurrentTime"
)

// IdentityInitializationServiceClient is the client API for IdentityInitializationService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type IdentityInitializationServiceClient interface {
	InitId(ctx context.Context, in *InitIdRequest, opts ...grpc.CallOption) (*InitIdResponse, error)
	GetOnboardingTransactions(ctx context.Context, in *GetOnboardingTransactionsRequest, opts ...grpc.CallOption) (*GetOnboardingTransactionsResponse, error)
	GetId(ctx context.Context, in *GetIdRequest, opts ...grpc.CallOption) (*GetIdResponse, error)
	CurrentTime(ctx context.Context, in *CurrentTimeRequest, opts ...grpc.CallOption) (*CurrentTimeResponse, error)
}

type identityInitializationServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewIdentityInitializationServiceClient(cc grpc.ClientConnInterface) IdentityInitializationServiceClient {
	return &identityInitializationServiceClient{cc}
}

func (c *identityInitializationServiceClient) InitId(ctx context.Context, in *InitIdRequest, opts ...grpc.CallOption) (*InitIdResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(InitIdResponse)
	err := c.cc.Invoke(ctx, IdentityInitializationService_InitId_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *identityInitializationServiceClient) GetOnboardingTransactions(ctx context.Context, in *GetOnboardingTransactionsRequest, opts ...grpc.CallOption) (*GetOnboardingTransactionsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetOnboardingTransactionsResponse)
	err := c.cc.Invoke(ctx, IdentityInitializationService_GetOnboardingTransactions_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *identityInitializationServiceClient) GetId(ctx context.Context, in *GetIdRequest, opts ...grpc.CallOption) (*GetIdResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetIdResponse)
	err := c.cc.Invoke(ctx, IdentityInitializationService_GetId_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *identityInitializationServiceClient) CurrentTime(ctx context.Context, in *CurrentTimeRequest, opts ...grpc.CallOption) (*CurrentTimeResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CurrentTimeResponse)
	err := c.cc.Invoke(ctx, IdentityInitializationService_CurrentTime_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// IdentityInitializationServiceServer is the server API for IdentityInitializationService service.
// All implementations must embed UnimplementedIdentityInitializationServiceServer
// for forward compatibility.
type IdentityInitializationServiceServer interface {
	InitId(context.Context, *InitIdRequest) (*InitIdResponse, error)
	GetOnboardingTransactions(context.Context, *GetOnboardingTransactionsRequest) (*GetOnboardingTransactionsResponse, error)
	GetId(context.Context, *GetIdRequest) (*GetIdResponse, error)
	CurrentTime(context.Context, *CurrentTimeRequest) (*CurrentTimeResponse, error)
	mustEmbedUnimplementedIdentityInitializationServiceServer()
}

// UnimplementedIdentityInitializationServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedIdentityInitializationServiceServer struct{}

func (UnimplementedIdentityInitializationServiceServer) InitId(context.Context, *InitIdRequest) (*InitIdResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method InitId not implemented")
}
func (UnimplementedIdentityInitializationServiceServer) GetOnboardingTransactions(context.Context, *GetOnboardingTransactionsRequest) (*GetOnboardingTransactionsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetOnboardingTransactions not implemented")
}
func (UnimplementedIdentityInitializationServiceServer) GetId(context.Context, *GetIdRequest) (*GetIdResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetId not implemented")
}
func (UnimplementedIdentityInitializationServiceServer) CurrentTime(context.Context, *CurrentTimeRequest) (*CurrentTimeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CurrentTime not implemented")
}
func (UnimplementedIdentityInitializationServiceServer) mustEmbedUnimplementedIdentityInitializationServiceServer() {
}
func (UnimplementedIdentityInitializationServiceServer) testEmbeddedByValue() {}

// UnsafeIdentityInitializationServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to IdentityInitializationServiceServer will
// result in compilation errors.
type UnsafeIdentityInitializationServiceServer interface {
	mustEmbedUnimplementedIdentityInitializationServiceServer()
}

func RegisterIdentityInitializationServiceServer(s grpc.ServiceRegistrar, srv IdentityInitializationServiceServer) {
	// If the following call pancis, it indicates UnimplementedIdentityInitializationServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&IdentityInitializationService_ServiceDesc, srv)
}

func _IdentityInitializationService_InitId_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(InitIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IdentityInitializationServiceServer).InitId(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: IdentityInitializationService_InitId_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IdentityInitializationServiceServer).InitId(ctx, req.(*InitIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IdentityInitializationService_GetOnboardingTransactions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetOnboardingTransactionsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IdentityInitializationServiceServer).GetOnboardingTransactions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: IdentityInitializationService_GetOnboardingTransactions_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IdentityInitializationServiceServer).GetOnboardingTransactions(ctx, req.(*GetOnboardingTransactionsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IdentityInitializationService_GetId_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IdentityInitializationServiceServer).GetId(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: IdentityInitializationService_GetId_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IdentityInitializationServiceServer).GetId(ctx, req.(*GetIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IdentityInitializationService_CurrentTime_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CurrentTimeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IdentityInitializationServiceServer).CurrentTime(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: IdentityInitializationService_CurrentTime_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IdentityInitializationServiceServer).CurrentTime(ctx, req.(*CurrentTimeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// IdentityInitializationService_ServiceDesc is the grpc.ServiceDesc for IdentityInitializationService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var IdentityInitializationService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "com.digitalasset.canton.topology.admin.v30.IdentityInitializationService",
	HandlerType: (*IdentityInitializationServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "InitId",
			Handler:    _IdentityInitializationService_InitId_Handler,
		},
		{
			MethodName: "GetOnboardingTransactions",
			Handler:    _IdentityInitializationService_GetOnboardingTransactions_Handler,
		},
		{
			MethodName: "GetId",
			Handler:    _IdentityInitializationService_GetId_Handler,
		},
		{
			MethodName: "CurrentTime",
			Handler:    _IdentityInitializationService_CurrentTime_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "com/digitalasset/canton/topology/admin/v30/initialization_service.proto",
}
