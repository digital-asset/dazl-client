// Copyright (c) 2017-2025 Digital Asset (Switzerland) GmbH and/or its affiliates. All rights reserved.
// SPDX-License-Identifier: Apache-2.0
// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v6.30.0
// source: com/digitalasset/canton/topology/admin/v30/topology_manager_read_service.proto

package v30

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	TopologyManagerReadService_ListNamespaceDelegation_FullMethodName               = "/com.digitalasset.canton.topology.admin.v30.TopologyManagerReadService/ListNamespaceDelegation"
	TopologyManagerReadService_ListDecentralizedNamespaceDefinition_FullMethodName  = "/com.digitalasset.canton.topology.admin.v30.TopologyManagerReadService/ListDecentralizedNamespaceDefinition"
	TopologyManagerReadService_ListOwnerToKeyMapping_FullMethodName                 = "/com.digitalasset.canton.topology.admin.v30.TopologyManagerReadService/ListOwnerToKeyMapping"
	TopologyManagerReadService_ListPartyToKeyMapping_FullMethodName                 = "/com.digitalasset.canton.topology.admin.v30.TopologyManagerReadService/ListPartyToKeyMapping"
	TopologyManagerReadService_ListSynchronizerTrustCertificate_FullMethodName      = "/com.digitalasset.canton.topology.admin.v30.TopologyManagerReadService/ListSynchronizerTrustCertificate"
	TopologyManagerReadService_ListParticipantSynchronizerPermission_FullMethodName = "/com.digitalasset.canton.topology.admin.v30.TopologyManagerReadService/ListParticipantSynchronizerPermission"
	TopologyManagerReadService_ListPartyHostingLimits_FullMethodName                = "/com.digitalasset.canton.topology.admin.v30.TopologyManagerReadService/ListPartyHostingLimits"
	TopologyManagerReadService_ListVettedPackages_FullMethodName                    = "/com.digitalasset.canton.topology.admin.v30.TopologyManagerReadService/ListVettedPackages"
	TopologyManagerReadService_ListPartyToParticipant_FullMethodName                = "/com.digitalasset.canton.topology.admin.v30.TopologyManagerReadService/ListPartyToParticipant"
	TopologyManagerReadService_ListSynchronizerParametersState_FullMethodName       = "/com.digitalasset.canton.topology.admin.v30.TopologyManagerReadService/ListSynchronizerParametersState"
	TopologyManagerReadService_ListMediatorSynchronizerState_FullMethodName         = "/com.digitalasset.canton.topology.admin.v30.TopologyManagerReadService/ListMediatorSynchronizerState"
	TopologyManagerReadService_ListSequencerSynchronizerState_FullMethodName        = "/com.digitalasset.canton.topology.admin.v30.TopologyManagerReadService/ListSequencerSynchronizerState"
	TopologyManagerReadService_ListPurgeTopologyTransaction_FullMethodName          = "/com.digitalasset.canton.topology.admin.v30.TopologyManagerReadService/ListPurgeTopologyTransaction"
	TopologyManagerReadService_ListAvailableStores_FullMethodName                   = "/com.digitalasset.canton.topology.admin.v30.TopologyManagerReadService/ListAvailableStores"
	TopologyManagerReadService_ListAll_FullMethodName                               = "/com.digitalasset.canton.topology.admin.v30.TopologyManagerReadService/ListAll"
	TopologyManagerReadService_ExportTopologySnapshot_FullMethodName                = "/com.digitalasset.canton.topology.admin.v30.TopologyManagerReadService/ExportTopologySnapshot"
	TopologyManagerReadService_GenesisState_FullMethodName                          = "/com.digitalasset.canton.topology.admin.v30.TopologyManagerReadService/GenesisState"
)

// TopologyManagerReadServiceClient is the client API for TopologyManagerReadService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type TopologyManagerReadServiceClient interface {
	ListNamespaceDelegation(ctx context.Context, in *ListNamespaceDelegationRequest, opts ...grpc.CallOption) (*ListNamespaceDelegationResponse, error)
	ListDecentralizedNamespaceDefinition(ctx context.Context, in *ListDecentralizedNamespaceDefinitionRequest, opts ...grpc.CallOption) (*ListDecentralizedNamespaceDefinitionResponse, error)
	ListOwnerToKeyMapping(ctx context.Context, in *ListOwnerToKeyMappingRequest, opts ...grpc.CallOption) (*ListOwnerToKeyMappingResponse, error)
	ListPartyToKeyMapping(ctx context.Context, in *ListPartyToKeyMappingRequest, opts ...grpc.CallOption) (*ListPartyToKeyMappingResponse, error)
	ListSynchronizerTrustCertificate(ctx context.Context, in *ListSynchronizerTrustCertificateRequest, opts ...grpc.CallOption) (*ListSynchronizerTrustCertificateResponse, error)
	ListParticipantSynchronizerPermission(ctx context.Context, in *ListParticipantSynchronizerPermissionRequest, opts ...grpc.CallOption) (*ListParticipantSynchronizerPermissionResponse, error)
	ListPartyHostingLimits(ctx context.Context, in *ListPartyHostingLimitsRequest, opts ...grpc.CallOption) (*ListPartyHostingLimitsResponse, error)
	ListVettedPackages(ctx context.Context, in *ListVettedPackagesRequest, opts ...grpc.CallOption) (*ListVettedPackagesResponse, error)
	ListPartyToParticipant(ctx context.Context, in *ListPartyToParticipantRequest, opts ...grpc.CallOption) (*ListPartyToParticipantResponse, error)
	ListSynchronizerParametersState(ctx context.Context, in *ListSynchronizerParametersStateRequest, opts ...grpc.CallOption) (*ListSynchronizerParametersStateResponse, error)
	ListMediatorSynchronizerState(ctx context.Context, in *ListMediatorSynchronizerStateRequest, opts ...grpc.CallOption) (*ListMediatorSynchronizerStateResponse, error)
	ListSequencerSynchronizerState(ctx context.Context, in *ListSequencerSynchronizerStateRequest, opts ...grpc.CallOption) (*ListSequencerSynchronizerStateResponse, error)
	ListPurgeTopologyTransaction(ctx context.Context, in *ListPurgeTopologyTransactionRequest, opts ...grpc.CallOption) (*ListPurgeTopologyTransactionResponse, error)
	ListAvailableStores(ctx context.Context, in *ListAvailableStoresRequest, opts ...grpc.CallOption) (*ListAvailableStoresResponse, error)
	ListAll(ctx context.Context, in *ListAllRequest, opts ...grpc.CallOption) (*ListAllResponse, error)
	ExportTopologySnapshot(ctx context.Context, in *ExportTopologySnapshotRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[ExportTopologySnapshotResponse], error)
	GenesisState(ctx context.Context, in *GenesisStateRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[GenesisStateResponse], error)
}

type topologyManagerReadServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewTopologyManagerReadServiceClient(cc grpc.ClientConnInterface) TopologyManagerReadServiceClient {
	return &topologyManagerReadServiceClient{cc}
}

func (c *topologyManagerReadServiceClient) ListNamespaceDelegation(ctx context.Context, in *ListNamespaceDelegationRequest, opts ...grpc.CallOption) (*ListNamespaceDelegationResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListNamespaceDelegationResponse)
	err := c.cc.Invoke(ctx, TopologyManagerReadService_ListNamespaceDelegation_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *topologyManagerReadServiceClient) ListDecentralizedNamespaceDefinition(ctx context.Context, in *ListDecentralizedNamespaceDefinitionRequest, opts ...grpc.CallOption) (*ListDecentralizedNamespaceDefinitionResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListDecentralizedNamespaceDefinitionResponse)
	err := c.cc.Invoke(ctx, TopologyManagerReadService_ListDecentralizedNamespaceDefinition_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *topologyManagerReadServiceClient) ListOwnerToKeyMapping(ctx context.Context, in *ListOwnerToKeyMappingRequest, opts ...grpc.CallOption) (*ListOwnerToKeyMappingResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListOwnerToKeyMappingResponse)
	err := c.cc.Invoke(ctx, TopologyManagerReadService_ListOwnerToKeyMapping_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *topologyManagerReadServiceClient) ListPartyToKeyMapping(ctx context.Context, in *ListPartyToKeyMappingRequest, opts ...grpc.CallOption) (*ListPartyToKeyMappingResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListPartyToKeyMappingResponse)
	err := c.cc.Invoke(ctx, TopologyManagerReadService_ListPartyToKeyMapping_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *topologyManagerReadServiceClient) ListSynchronizerTrustCertificate(ctx context.Context, in *ListSynchronizerTrustCertificateRequest, opts ...grpc.CallOption) (*ListSynchronizerTrustCertificateResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListSynchronizerTrustCertificateResponse)
	err := c.cc.Invoke(ctx, TopologyManagerReadService_ListSynchronizerTrustCertificate_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *topologyManagerReadServiceClient) ListParticipantSynchronizerPermission(ctx context.Context, in *ListParticipantSynchronizerPermissionRequest, opts ...grpc.CallOption) (*ListParticipantSynchronizerPermissionResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListParticipantSynchronizerPermissionResponse)
	err := c.cc.Invoke(ctx, TopologyManagerReadService_ListParticipantSynchronizerPermission_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *topologyManagerReadServiceClient) ListPartyHostingLimits(ctx context.Context, in *ListPartyHostingLimitsRequest, opts ...grpc.CallOption) (*ListPartyHostingLimitsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListPartyHostingLimitsResponse)
	err := c.cc.Invoke(ctx, TopologyManagerReadService_ListPartyHostingLimits_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *topologyManagerReadServiceClient) ListVettedPackages(ctx context.Context, in *ListVettedPackagesRequest, opts ...grpc.CallOption) (*ListVettedPackagesResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListVettedPackagesResponse)
	err := c.cc.Invoke(ctx, TopologyManagerReadService_ListVettedPackages_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *topologyManagerReadServiceClient) ListPartyToParticipant(ctx context.Context, in *ListPartyToParticipantRequest, opts ...grpc.CallOption) (*ListPartyToParticipantResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListPartyToParticipantResponse)
	err := c.cc.Invoke(ctx, TopologyManagerReadService_ListPartyToParticipant_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *topologyManagerReadServiceClient) ListSynchronizerParametersState(ctx context.Context, in *ListSynchronizerParametersStateRequest, opts ...grpc.CallOption) (*ListSynchronizerParametersStateResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListSynchronizerParametersStateResponse)
	err := c.cc.Invoke(ctx, TopologyManagerReadService_ListSynchronizerParametersState_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *topologyManagerReadServiceClient) ListMediatorSynchronizerState(ctx context.Context, in *ListMediatorSynchronizerStateRequest, opts ...grpc.CallOption) (*ListMediatorSynchronizerStateResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListMediatorSynchronizerStateResponse)
	err := c.cc.Invoke(ctx, TopologyManagerReadService_ListMediatorSynchronizerState_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *topologyManagerReadServiceClient) ListSequencerSynchronizerState(ctx context.Context, in *ListSequencerSynchronizerStateRequest, opts ...grpc.CallOption) (*ListSequencerSynchronizerStateResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListSequencerSynchronizerStateResponse)
	err := c.cc.Invoke(ctx, TopologyManagerReadService_ListSequencerSynchronizerState_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *topologyManagerReadServiceClient) ListPurgeTopologyTransaction(ctx context.Context, in *ListPurgeTopologyTransactionRequest, opts ...grpc.CallOption) (*ListPurgeTopologyTransactionResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListPurgeTopologyTransactionResponse)
	err := c.cc.Invoke(ctx, TopologyManagerReadService_ListPurgeTopologyTransaction_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *topologyManagerReadServiceClient) ListAvailableStores(ctx context.Context, in *ListAvailableStoresRequest, opts ...grpc.CallOption) (*ListAvailableStoresResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListAvailableStoresResponse)
	err := c.cc.Invoke(ctx, TopologyManagerReadService_ListAvailableStores_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *topologyManagerReadServiceClient) ListAll(ctx context.Context, in *ListAllRequest, opts ...grpc.CallOption) (*ListAllResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListAllResponse)
	err := c.cc.Invoke(ctx, TopologyManagerReadService_ListAll_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *topologyManagerReadServiceClient) ExportTopologySnapshot(ctx context.Context, in *ExportTopologySnapshotRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[ExportTopologySnapshotResponse], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &TopologyManagerReadService_ServiceDesc.Streams[0], TopologyManagerReadService_ExportTopologySnapshot_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[ExportTopologySnapshotRequest, ExportTopologySnapshotResponse]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type TopologyManagerReadService_ExportTopologySnapshotClient = grpc.ServerStreamingClient[ExportTopologySnapshotResponse]

func (c *topologyManagerReadServiceClient) GenesisState(ctx context.Context, in *GenesisStateRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[GenesisStateResponse], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &TopologyManagerReadService_ServiceDesc.Streams[1], TopologyManagerReadService_GenesisState_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[GenesisStateRequest, GenesisStateResponse]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type TopologyManagerReadService_GenesisStateClient = grpc.ServerStreamingClient[GenesisStateResponse]

// TopologyManagerReadServiceServer is the server API for TopologyManagerReadService service.
// All implementations must embed UnimplementedTopologyManagerReadServiceServer
// for forward compatibility.
type TopologyManagerReadServiceServer interface {
	ListNamespaceDelegation(context.Context, *ListNamespaceDelegationRequest) (*ListNamespaceDelegationResponse, error)
	ListDecentralizedNamespaceDefinition(context.Context, *ListDecentralizedNamespaceDefinitionRequest) (*ListDecentralizedNamespaceDefinitionResponse, error)
	ListOwnerToKeyMapping(context.Context, *ListOwnerToKeyMappingRequest) (*ListOwnerToKeyMappingResponse, error)
	ListPartyToKeyMapping(context.Context, *ListPartyToKeyMappingRequest) (*ListPartyToKeyMappingResponse, error)
	ListSynchronizerTrustCertificate(context.Context, *ListSynchronizerTrustCertificateRequest) (*ListSynchronizerTrustCertificateResponse, error)
	ListParticipantSynchronizerPermission(context.Context, *ListParticipantSynchronizerPermissionRequest) (*ListParticipantSynchronizerPermissionResponse, error)
	ListPartyHostingLimits(context.Context, *ListPartyHostingLimitsRequest) (*ListPartyHostingLimitsResponse, error)
	ListVettedPackages(context.Context, *ListVettedPackagesRequest) (*ListVettedPackagesResponse, error)
	ListPartyToParticipant(context.Context, *ListPartyToParticipantRequest) (*ListPartyToParticipantResponse, error)
	ListSynchronizerParametersState(context.Context, *ListSynchronizerParametersStateRequest) (*ListSynchronizerParametersStateResponse, error)
	ListMediatorSynchronizerState(context.Context, *ListMediatorSynchronizerStateRequest) (*ListMediatorSynchronizerStateResponse, error)
	ListSequencerSynchronizerState(context.Context, *ListSequencerSynchronizerStateRequest) (*ListSequencerSynchronizerStateResponse, error)
	ListPurgeTopologyTransaction(context.Context, *ListPurgeTopologyTransactionRequest) (*ListPurgeTopologyTransactionResponse, error)
	ListAvailableStores(context.Context, *ListAvailableStoresRequest) (*ListAvailableStoresResponse, error)
	ListAll(context.Context, *ListAllRequest) (*ListAllResponse, error)
	ExportTopologySnapshot(*ExportTopologySnapshotRequest, grpc.ServerStreamingServer[ExportTopologySnapshotResponse]) error
	GenesisState(*GenesisStateRequest, grpc.ServerStreamingServer[GenesisStateResponse]) error
	mustEmbedUnimplementedTopologyManagerReadServiceServer()
}

// UnimplementedTopologyManagerReadServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedTopologyManagerReadServiceServer struct{}

func (UnimplementedTopologyManagerReadServiceServer) ListNamespaceDelegation(context.Context, *ListNamespaceDelegationRequest) (*ListNamespaceDelegationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListNamespaceDelegation not implemented")
}
func (UnimplementedTopologyManagerReadServiceServer) ListDecentralizedNamespaceDefinition(context.Context, *ListDecentralizedNamespaceDefinitionRequest) (*ListDecentralizedNamespaceDefinitionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListDecentralizedNamespaceDefinition not implemented")
}
func (UnimplementedTopologyManagerReadServiceServer) ListOwnerToKeyMapping(context.Context, *ListOwnerToKeyMappingRequest) (*ListOwnerToKeyMappingResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListOwnerToKeyMapping not implemented")
}
func (UnimplementedTopologyManagerReadServiceServer) ListPartyToKeyMapping(context.Context, *ListPartyToKeyMappingRequest) (*ListPartyToKeyMappingResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListPartyToKeyMapping not implemented")
}
func (UnimplementedTopologyManagerReadServiceServer) ListSynchronizerTrustCertificate(context.Context, *ListSynchronizerTrustCertificateRequest) (*ListSynchronizerTrustCertificateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListSynchronizerTrustCertificate not implemented")
}
func (UnimplementedTopologyManagerReadServiceServer) ListParticipantSynchronizerPermission(context.Context, *ListParticipantSynchronizerPermissionRequest) (*ListParticipantSynchronizerPermissionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListParticipantSynchronizerPermission not implemented")
}
func (UnimplementedTopologyManagerReadServiceServer) ListPartyHostingLimits(context.Context, *ListPartyHostingLimitsRequest) (*ListPartyHostingLimitsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListPartyHostingLimits not implemented")
}
func (UnimplementedTopologyManagerReadServiceServer) ListVettedPackages(context.Context, *ListVettedPackagesRequest) (*ListVettedPackagesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListVettedPackages not implemented")
}
func (UnimplementedTopologyManagerReadServiceServer) ListPartyToParticipant(context.Context, *ListPartyToParticipantRequest) (*ListPartyToParticipantResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListPartyToParticipant not implemented")
}
func (UnimplementedTopologyManagerReadServiceServer) ListSynchronizerParametersState(context.Context, *ListSynchronizerParametersStateRequest) (*ListSynchronizerParametersStateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListSynchronizerParametersState not implemented")
}
func (UnimplementedTopologyManagerReadServiceServer) ListMediatorSynchronizerState(context.Context, *ListMediatorSynchronizerStateRequest) (*ListMediatorSynchronizerStateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListMediatorSynchronizerState not implemented")
}
func (UnimplementedTopologyManagerReadServiceServer) ListSequencerSynchronizerState(context.Context, *ListSequencerSynchronizerStateRequest) (*ListSequencerSynchronizerStateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListSequencerSynchronizerState not implemented")
}
func (UnimplementedTopologyManagerReadServiceServer) ListPurgeTopologyTransaction(context.Context, *ListPurgeTopologyTransactionRequest) (*ListPurgeTopologyTransactionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListPurgeTopologyTransaction not implemented")
}
func (UnimplementedTopologyManagerReadServiceServer) ListAvailableStores(context.Context, *ListAvailableStoresRequest) (*ListAvailableStoresResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListAvailableStores not implemented")
}
func (UnimplementedTopologyManagerReadServiceServer) ListAll(context.Context, *ListAllRequest) (*ListAllResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListAll not implemented")
}
func (UnimplementedTopologyManagerReadServiceServer) ExportTopologySnapshot(*ExportTopologySnapshotRequest, grpc.ServerStreamingServer[ExportTopologySnapshotResponse]) error {
	return status.Errorf(codes.Unimplemented, "method ExportTopologySnapshot not implemented")
}
func (UnimplementedTopologyManagerReadServiceServer) GenesisState(*GenesisStateRequest, grpc.ServerStreamingServer[GenesisStateResponse]) error {
	return status.Errorf(codes.Unimplemented, "method GenesisState not implemented")
}
func (UnimplementedTopologyManagerReadServiceServer) mustEmbedUnimplementedTopologyManagerReadServiceServer() {
}
func (UnimplementedTopologyManagerReadServiceServer) testEmbeddedByValue() {}

// UnsafeTopologyManagerReadServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to TopologyManagerReadServiceServer will
// result in compilation errors.
type UnsafeTopologyManagerReadServiceServer interface {
	mustEmbedUnimplementedTopologyManagerReadServiceServer()
}

func RegisterTopologyManagerReadServiceServer(s grpc.ServiceRegistrar, srv TopologyManagerReadServiceServer) {
	// If the following call pancis, it indicates UnimplementedTopologyManagerReadServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&TopologyManagerReadService_ServiceDesc, srv)
}

func _TopologyManagerReadService_ListNamespaceDelegation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListNamespaceDelegationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TopologyManagerReadServiceServer).ListNamespaceDelegation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TopologyManagerReadService_ListNamespaceDelegation_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TopologyManagerReadServiceServer).ListNamespaceDelegation(ctx, req.(*ListNamespaceDelegationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TopologyManagerReadService_ListDecentralizedNamespaceDefinition_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListDecentralizedNamespaceDefinitionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TopologyManagerReadServiceServer).ListDecentralizedNamespaceDefinition(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TopologyManagerReadService_ListDecentralizedNamespaceDefinition_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TopologyManagerReadServiceServer).ListDecentralizedNamespaceDefinition(ctx, req.(*ListDecentralizedNamespaceDefinitionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TopologyManagerReadService_ListOwnerToKeyMapping_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListOwnerToKeyMappingRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TopologyManagerReadServiceServer).ListOwnerToKeyMapping(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TopologyManagerReadService_ListOwnerToKeyMapping_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TopologyManagerReadServiceServer).ListOwnerToKeyMapping(ctx, req.(*ListOwnerToKeyMappingRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TopologyManagerReadService_ListPartyToKeyMapping_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListPartyToKeyMappingRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TopologyManagerReadServiceServer).ListPartyToKeyMapping(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TopologyManagerReadService_ListPartyToKeyMapping_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TopologyManagerReadServiceServer).ListPartyToKeyMapping(ctx, req.(*ListPartyToKeyMappingRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TopologyManagerReadService_ListSynchronizerTrustCertificate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListSynchronizerTrustCertificateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TopologyManagerReadServiceServer).ListSynchronizerTrustCertificate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TopologyManagerReadService_ListSynchronizerTrustCertificate_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TopologyManagerReadServiceServer).ListSynchronizerTrustCertificate(ctx, req.(*ListSynchronizerTrustCertificateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TopologyManagerReadService_ListParticipantSynchronizerPermission_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListParticipantSynchronizerPermissionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TopologyManagerReadServiceServer).ListParticipantSynchronizerPermission(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TopologyManagerReadService_ListParticipantSynchronizerPermission_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TopologyManagerReadServiceServer).ListParticipantSynchronizerPermission(ctx, req.(*ListParticipantSynchronizerPermissionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TopologyManagerReadService_ListPartyHostingLimits_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListPartyHostingLimitsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TopologyManagerReadServiceServer).ListPartyHostingLimits(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TopologyManagerReadService_ListPartyHostingLimits_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TopologyManagerReadServiceServer).ListPartyHostingLimits(ctx, req.(*ListPartyHostingLimitsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TopologyManagerReadService_ListVettedPackages_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListVettedPackagesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TopologyManagerReadServiceServer).ListVettedPackages(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TopologyManagerReadService_ListVettedPackages_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TopologyManagerReadServiceServer).ListVettedPackages(ctx, req.(*ListVettedPackagesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TopologyManagerReadService_ListPartyToParticipant_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListPartyToParticipantRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TopologyManagerReadServiceServer).ListPartyToParticipant(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TopologyManagerReadService_ListPartyToParticipant_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TopologyManagerReadServiceServer).ListPartyToParticipant(ctx, req.(*ListPartyToParticipantRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TopologyManagerReadService_ListSynchronizerParametersState_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListSynchronizerParametersStateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TopologyManagerReadServiceServer).ListSynchronizerParametersState(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TopologyManagerReadService_ListSynchronizerParametersState_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TopologyManagerReadServiceServer).ListSynchronizerParametersState(ctx, req.(*ListSynchronizerParametersStateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TopologyManagerReadService_ListMediatorSynchronizerState_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListMediatorSynchronizerStateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TopologyManagerReadServiceServer).ListMediatorSynchronizerState(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TopologyManagerReadService_ListMediatorSynchronizerState_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TopologyManagerReadServiceServer).ListMediatorSynchronizerState(ctx, req.(*ListMediatorSynchronizerStateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TopologyManagerReadService_ListSequencerSynchronizerState_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListSequencerSynchronizerStateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TopologyManagerReadServiceServer).ListSequencerSynchronizerState(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TopologyManagerReadService_ListSequencerSynchronizerState_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TopologyManagerReadServiceServer).ListSequencerSynchronizerState(ctx, req.(*ListSequencerSynchronizerStateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TopologyManagerReadService_ListPurgeTopologyTransaction_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListPurgeTopologyTransactionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TopologyManagerReadServiceServer).ListPurgeTopologyTransaction(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TopologyManagerReadService_ListPurgeTopologyTransaction_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TopologyManagerReadServiceServer).ListPurgeTopologyTransaction(ctx, req.(*ListPurgeTopologyTransactionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TopologyManagerReadService_ListAvailableStores_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListAvailableStoresRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TopologyManagerReadServiceServer).ListAvailableStores(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TopologyManagerReadService_ListAvailableStores_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TopologyManagerReadServiceServer).ListAvailableStores(ctx, req.(*ListAvailableStoresRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TopologyManagerReadService_ListAll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListAllRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TopologyManagerReadServiceServer).ListAll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TopologyManagerReadService_ListAll_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TopologyManagerReadServiceServer).ListAll(ctx, req.(*ListAllRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TopologyManagerReadService_ExportTopologySnapshot_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ExportTopologySnapshotRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(TopologyManagerReadServiceServer).ExportTopologySnapshot(m, &grpc.GenericServerStream[ExportTopologySnapshotRequest, ExportTopologySnapshotResponse]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type TopologyManagerReadService_ExportTopologySnapshotServer = grpc.ServerStreamingServer[ExportTopologySnapshotResponse]

func _TopologyManagerReadService_GenesisState_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(GenesisStateRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(TopologyManagerReadServiceServer).GenesisState(m, &grpc.GenericServerStream[GenesisStateRequest, GenesisStateResponse]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type TopologyManagerReadService_GenesisStateServer = grpc.ServerStreamingServer[GenesisStateResponse]

// TopologyManagerReadService_ServiceDesc is the grpc.ServiceDesc for TopologyManagerReadService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var TopologyManagerReadService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "com.digitalasset.canton.topology.admin.v30.TopologyManagerReadService",
	HandlerType: (*TopologyManagerReadServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ListNamespaceDelegation",
			Handler:    _TopologyManagerReadService_ListNamespaceDelegation_Handler,
		},
		{
			MethodName: "ListDecentralizedNamespaceDefinition",
			Handler:    _TopologyManagerReadService_ListDecentralizedNamespaceDefinition_Handler,
		},
		{
			MethodName: "ListOwnerToKeyMapping",
			Handler:    _TopologyManagerReadService_ListOwnerToKeyMapping_Handler,
		},
		{
			MethodName: "ListPartyToKeyMapping",
			Handler:    _TopologyManagerReadService_ListPartyToKeyMapping_Handler,
		},
		{
			MethodName: "ListSynchronizerTrustCertificate",
			Handler:    _TopologyManagerReadService_ListSynchronizerTrustCertificate_Handler,
		},
		{
			MethodName: "ListParticipantSynchronizerPermission",
			Handler:    _TopologyManagerReadService_ListParticipantSynchronizerPermission_Handler,
		},
		{
			MethodName: "ListPartyHostingLimits",
			Handler:    _TopologyManagerReadService_ListPartyHostingLimits_Handler,
		},
		{
			MethodName: "ListVettedPackages",
			Handler:    _TopologyManagerReadService_ListVettedPackages_Handler,
		},
		{
			MethodName: "ListPartyToParticipant",
			Handler:    _TopologyManagerReadService_ListPartyToParticipant_Handler,
		},
		{
			MethodName: "ListSynchronizerParametersState",
			Handler:    _TopologyManagerReadService_ListSynchronizerParametersState_Handler,
		},
		{
			MethodName: "ListMediatorSynchronizerState",
			Handler:    _TopologyManagerReadService_ListMediatorSynchronizerState_Handler,
		},
		{
			MethodName: "ListSequencerSynchronizerState",
			Handler:    _TopologyManagerReadService_ListSequencerSynchronizerState_Handler,
		},
		{
			MethodName: "ListPurgeTopologyTransaction",
			Handler:    _TopologyManagerReadService_ListPurgeTopologyTransaction_Handler,
		},
		{
			MethodName: "ListAvailableStores",
			Handler:    _TopologyManagerReadService_ListAvailableStores_Handler,
		},
		{
			MethodName: "ListAll",
			Handler:    _TopologyManagerReadService_ListAll_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "ExportTopologySnapshot",
			Handler:       _TopologyManagerReadService_ExportTopologySnapshot_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "GenesisState",
			Handler:       _TopologyManagerReadService_GenesisState_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "com/digitalasset/canton/topology/admin/v30/topology_manager_read_service.proto",
}
