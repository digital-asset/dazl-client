// Copyright (c) 2017-2025 Digital Asset (Switzerland) GmbH and/or its affiliates. All rights reserved.
// SPDX-License-Identifier: Apache-2.0
// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.35.2
// 	protoc        v5.27.2
// source: com/digitalasset/canton/topology/admin/v30/topology_manager_write_service.proto

package v30

import (
	v30 "github.com/digital-asset/dazl-client/v8/go/api/com/digitalasset/canton/protocol/v30"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type ForceFlag int32

const (
	ForceFlag_FORCE_FLAG_UNSPECIFIED                                ForceFlag = 0
	ForceFlag_FORCE_FLAG_ALIEN_MEMBER                               ForceFlag = 1
	ForceFlag_FORCE_FLAG_LEDGER_TIME_RECORD_TIME_TOLERANCE_INCREASE ForceFlag = 2
)

// Enum value maps for ForceFlag.
var (
	ForceFlag_name = map[int32]string{
		0: "FORCE_FLAG_UNSPECIFIED",
		1: "FORCE_FLAG_ALIEN_MEMBER",
		2: "FORCE_FLAG_LEDGER_TIME_RECORD_TIME_TOLERANCE_INCREASE",
	}
	ForceFlag_value = map[string]int32{
		"FORCE_FLAG_UNSPECIFIED":                                0,
		"FORCE_FLAG_ALIEN_MEMBER":                               1,
		"FORCE_FLAG_LEDGER_TIME_RECORD_TIME_TOLERANCE_INCREASE": 2,
	}
)

func (x ForceFlag) Enum() *ForceFlag {
	p := new(ForceFlag)
	*p = x
	return p
}

func (x ForceFlag) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ForceFlag) Descriptor() protoreflect.EnumDescriptor {
	return file_com_digitalasset_canton_topology_admin_v30_topology_manager_write_service_proto_enumTypes[0].Descriptor()
}

func (ForceFlag) Type() protoreflect.EnumType {
	return &file_com_digitalasset_canton_topology_admin_v30_topology_manager_write_service_proto_enumTypes[0]
}

func (x ForceFlag) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ForceFlag.Descriptor instead.
func (ForceFlag) EnumDescriptor() ([]byte, []int) {
	return file_com_digitalasset_canton_topology_admin_v30_topology_manager_write_service_proto_rawDescGZIP(), []int{0}
}

type GenerateTransactionsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Proposals []*GenerateTransactionsRequest_Proposal `protobuf:"bytes,1,rep,name=proposals,proto3" json:"proposals,omitempty"`
}

func (x *GenerateTransactionsRequest) Reset() {
	*x = GenerateTransactionsRequest{}
	mi := &file_com_digitalasset_canton_topology_admin_v30_topology_manager_write_service_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GenerateTransactionsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GenerateTransactionsRequest) ProtoMessage() {}

func (x *GenerateTransactionsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_com_digitalasset_canton_topology_admin_v30_topology_manager_write_service_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GenerateTransactionsRequest.ProtoReflect.Descriptor instead.
func (*GenerateTransactionsRequest) Descriptor() ([]byte, []int) {
	return file_com_digitalasset_canton_topology_admin_v30_topology_manager_write_service_proto_rawDescGZIP(), []int{0}
}

func (x *GenerateTransactionsRequest) GetProposals() []*GenerateTransactionsRequest_Proposal {
	if x != nil {
		return x.Proposals
	}
	return nil
}

type GenerateTransactionsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GeneratedTransactions []*GenerateTransactionsResponse_GeneratedTransaction `protobuf:"bytes,1,rep,name=generated_transactions,json=generatedTransactions,proto3" json:"generated_transactions,omitempty"`
}

func (x *GenerateTransactionsResponse) Reset() {
	*x = GenerateTransactionsResponse{}
	mi := &file_com_digitalasset_canton_topology_admin_v30_topology_manager_write_service_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GenerateTransactionsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GenerateTransactionsResponse) ProtoMessage() {}

func (x *GenerateTransactionsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_com_digitalasset_canton_topology_admin_v30_topology_manager_write_service_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GenerateTransactionsResponse.ProtoReflect.Descriptor instead.
func (*GenerateTransactionsResponse) Descriptor() ([]byte, []int) {
	return file_com_digitalasset_canton_topology_admin_v30_topology_manager_write_service_proto_rawDescGZIP(), []int{1}
}

func (x *GenerateTransactionsResponse) GetGeneratedTransactions() []*GenerateTransactionsResponse_GeneratedTransaction {
	if x != nil {
		return x.GeneratedTransactions
	}
	return nil
}

type AuthorizeRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Type:
	//
	//	*AuthorizeRequest_Proposal_
	//	*AuthorizeRequest_TransactionHash
	Type               isAuthorizeRequest_Type `protobuf_oneof:"type"`
	MustFullyAuthorize bool                    `protobuf:"varint,3,opt,name=must_fully_authorize,json=mustFullyAuthorize,proto3" json:"must_fully_authorize,omitempty"`
	ForceChanges       []ForceFlag             `protobuf:"varint,4,rep,packed,name=force_changes,json=forceChanges,proto3,enum=com.digitalasset.canton.topology.admin.v30.ForceFlag" json:"force_changes,omitempty"`
	SignedBy           []string                `protobuf:"bytes,5,rep,name=signed_by,json=signedBy,proto3" json:"signed_by,omitempty"`
	Store              string                  `protobuf:"bytes,6,opt,name=store,proto3" json:"store,omitempty"`
}

func (x *AuthorizeRequest) Reset() {
	*x = AuthorizeRequest{}
	mi := &file_com_digitalasset_canton_topology_admin_v30_topology_manager_write_service_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AuthorizeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AuthorizeRequest) ProtoMessage() {}

func (x *AuthorizeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_com_digitalasset_canton_topology_admin_v30_topology_manager_write_service_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AuthorizeRequest.ProtoReflect.Descriptor instead.
func (*AuthorizeRequest) Descriptor() ([]byte, []int) {
	return file_com_digitalasset_canton_topology_admin_v30_topology_manager_write_service_proto_rawDescGZIP(), []int{2}
}

func (m *AuthorizeRequest) GetType() isAuthorizeRequest_Type {
	if m != nil {
		return m.Type
	}
	return nil
}

func (x *AuthorizeRequest) GetProposal() *AuthorizeRequest_Proposal {
	if x, ok := x.GetType().(*AuthorizeRequest_Proposal_); ok {
		return x.Proposal
	}
	return nil
}

func (x *AuthorizeRequest) GetTransactionHash() string {
	if x, ok := x.GetType().(*AuthorizeRequest_TransactionHash); ok {
		return x.TransactionHash
	}
	return ""
}

func (x *AuthorizeRequest) GetMustFullyAuthorize() bool {
	if x != nil {
		return x.MustFullyAuthorize
	}
	return false
}

func (x *AuthorizeRequest) GetForceChanges() []ForceFlag {
	if x != nil {
		return x.ForceChanges
	}
	return nil
}

func (x *AuthorizeRequest) GetSignedBy() []string {
	if x != nil {
		return x.SignedBy
	}
	return nil
}

func (x *AuthorizeRequest) GetStore() string {
	if x != nil {
		return x.Store
	}
	return ""
}

type isAuthorizeRequest_Type interface {
	isAuthorizeRequest_Type()
}

type AuthorizeRequest_Proposal_ struct {
	Proposal *AuthorizeRequest_Proposal `protobuf:"bytes,1,opt,name=proposal,proto3,oneof"`
}

type AuthorizeRequest_TransactionHash struct {
	TransactionHash string `protobuf:"bytes,2,opt,name=transaction_hash,json=transactionHash,proto3,oneof"`
}

func (*AuthorizeRequest_Proposal_) isAuthorizeRequest_Type() {}

func (*AuthorizeRequest_TransactionHash) isAuthorizeRequest_Type() {}

type AuthorizeResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Transaction *v30.SignedTopologyTransaction `protobuf:"bytes,1,opt,name=transaction,proto3" json:"transaction,omitempty"`
}

func (x *AuthorizeResponse) Reset() {
	*x = AuthorizeResponse{}
	mi := &file_com_digitalasset_canton_topology_admin_v30_topology_manager_write_service_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AuthorizeResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AuthorizeResponse) ProtoMessage() {}

func (x *AuthorizeResponse) ProtoReflect() protoreflect.Message {
	mi := &file_com_digitalasset_canton_topology_admin_v30_topology_manager_write_service_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AuthorizeResponse.ProtoReflect.Descriptor instead.
func (*AuthorizeResponse) Descriptor() ([]byte, []int) {
	return file_com_digitalasset_canton_topology_admin_v30_topology_manager_write_service_proto_rawDescGZIP(), []int{3}
}

func (x *AuthorizeResponse) GetTransaction() *v30.SignedTopologyTransaction {
	if x != nil {
		return x.Transaction
	}
	return nil
}

type AddTransactionsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Transactions []*v30.SignedTopologyTransaction `protobuf:"bytes,1,rep,name=transactions,proto3" json:"transactions,omitempty"`
	ForceChanges []ForceFlag                      `protobuf:"varint,2,rep,packed,name=force_changes,json=forceChanges,proto3,enum=com.digitalasset.canton.topology.admin.v30.ForceFlag" json:"force_changes,omitempty"`
	Store        string                           `protobuf:"bytes,3,opt,name=store,proto3" json:"store,omitempty"`
}

func (x *AddTransactionsRequest) Reset() {
	*x = AddTransactionsRequest{}
	mi := &file_com_digitalasset_canton_topology_admin_v30_topology_manager_write_service_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AddTransactionsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddTransactionsRequest) ProtoMessage() {}

func (x *AddTransactionsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_com_digitalasset_canton_topology_admin_v30_topology_manager_write_service_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddTransactionsRequest.ProtoReflect.Descriptor instead.
func (*AddTransactionsRequest) Descriptor() ([]byte, []int) {
	return file_com_digitalasset_canton_topology_admin_v30_topology_manager_write_service_proto_rawDescGZIP(), []int{4}
}

func (x *AddTransactionsRequest) GetTransactions() []*v30.SignedTopologyTransaction {
	if x != nil {
		return x.Transactions
	}
	return nil
}

func (x *AddTransactionsRequest) GetForceChanges() []ForceFlag {
	if x != nil {
		return x.ForceChanges
	}
	return nil
}

func (x *AddTransactionsRequest) GetStore() string {
	if x != nil {
		return x.Store
	}
	return ""
}

type AddTransactionsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *AddTransactionsResponse) Reset() {
	*x = AddTransactionsResponse{}
	mi := &file_com_digitalasset_canton_topology_admin_v30_topology_manager_write_service_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AddTransactionsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddTransactionsResponse) ProtoMessage() {}

func (x *AddTransactionsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_com_digitalasset_canton_topology_admin_v30_topology_manager_write_service_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddTransactionsResponse.ProtoReflect.Descriptor instead.
func (*AddTransactionsResponse) Descriptor() ([]byte, []int) {
	return file_com_digitalasset_canton_topology_admin_v30_topology_manager_write_service_proto_rawDescGZIP(), []int{5}
}

type ImportTopologySnapshotRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TopologySnapshot []byte `protobuf:"bytes,1,opt,name=topology_snapshot,json=topologySnapshot,proto3" json:"topology_snapshot,omitempty"`
	Store            string `protobuf:"bytes,2,opt,name=store,proto3" json:"store,omitempty"`
}

func (x *ImportTopologySnapshotRequest) Reset() {
	*x = ImportTopologySnapshotRequest{}
	mi := &file_com_digitalasset_canton_topology_admin_v30_topology_manager_write_service_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ImportTopologySnapshotRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ImportTopologySnapshotRequest) ProtoMessage() {}

func (x *ImportTopologySnapshotRequest) ProtoReflect() protoreflect.Message {
	mi := &file_com_digitalasset_canton_topology_admin_v30_topology_manager_write_service_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ImportTopologySnapshotRequest.ProtoReflect.Descriptor instead.
func (*ImportTopologySnapshotRequest) Descriptor() ([]byte, []int) {
	return file_com_digitalasset_canton_topology_admin_v30_topology_manager_write_service_proto_rawDescGZIP(), []int{6}
}

func (x *ImportTopologySnapshotRequest) GetTopologySnapshot() []byte {
	if x != nil {
		return x.TopologySnapshot
	}
	return nil
}

func (x *ImportTopologySnapshotRequest) GetStore() string {
	if x != nil {
		return x.Store
	}
	return ""
}

type ImportTopologySnapshotResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *ImportTopologySnapshotResponse) Reset() {
	*x = ImportTopologySnapshotResponse{}
	mi := &file_com_digitalasset_canton_topology_admin_v30_topology_manager_write_service_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ImportTopologySnapshotResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ImportTopologySnapshotResponse) ProtoMessage() {}

func (x *ImportTopologySnapshotResponse) ProtoReflect() protoreflect.Message {
	mi := &file_com_digitalasset_canton_topology_admin_v30_topology_manager_write_service_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ImportTopologySnapshotResponse.ProtoReflect.Descriptor instead.
func (*ImportTopologySnapshotResponse) Descriptor() ([]byte, []int) {
	return file_com_digitalasset_canton_topology_admin_v30_topology_manager_write_service_proto_rawDescGZIP(), []int{7}
}

type SignTransactionsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Transactions []*v30.SignedTopologyTransaction `protobuf:"bytes,1,rep,name=transactions,proto3" json:"transactions,omitempty"`
	SignedBy     []string                         `protobuf:"bytes,2,rep,name=signed_by,json=signedBy,proto3" json:"signed_by,omitempty"`
}

func (x *SignTransactionsRequest) Reset() {
	*x = SignTransactionsRequest{}
	mi := &file_com_digitalasset_canton_topology_admin_v30_topology_manager_write_service_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SignTransactionsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SignTransactionsRequest) ProtoMessage() {}

func (x *SignTransactionsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_com_digitalasset_canton_topology_admin_v30_topology_manager_write_service_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SignTransactionsRequest.ProtoReflect.Descriptor instead.
func (*SignTransactionsRequest) Descriptor() ([]byte, []int) {
	return file_com_digitalasset_canton_topology_admin_v30_topology_manager_write_service_proto_rawDescGZIP(), []int{8}
}

func (x *SignTransactionsRequest) GetTransactions() []*v30.SignedTopologyTransaction {
	if x != nil {
		return x.Transactions
	}
	return nil
}

func (x *SignTransactionsRequest) GetSignedBy() []string {
	if x != nil {
		return x.SignedBy
	}
	return nil
}

type SignTransactionsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Transactions []*v30.SignedTopologyTransaction `protobuf:"bytes,1,rep,name=transactions,proto3" json:"transactions,omitempty"`
}

func (x *SignTransactionsResponse) Reset() {
	*x = SignTransactionsResponse{}
	mi := &file_com_digitalasset_canton_topology_admin_v30_topology_manager_write_service_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SignTransactionsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SignTransactionsResponse) ProtoMessage() {}

func (x *SignTransactionsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_com_digitalasset_canton_topology_admin_v30_topology_manager_write_service_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SignTransactionsResponse.ProtoReflect.Descriptor instead.
func (*SignTransactionsResponse) Descriptor() ([]byte, []int) {
	return file_com_digitalasset_canton_topology_admin_v30_topology_manager_write_service_proto_rawDescGZIP(), []int{9}
}

func (x *SignTransactionsResponse) GetTransactions() []*v30.SignedTopologyTransaction {
	if x != nil {
		return x.Transactions
	}
	return nil
}

type GenerateTransactionsRequest_Proposal struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Operation v30.Enums_TopologyChangeOp `protobuf:"varint,1,opt,name=operation,proto3,enum=com.digitalasset.canton.protocol.v30.Enums_TopologyChangeOp" json:"operation,omitempty"`
	Serial    uint32                     `protobuf:"varint,2,opt,name=serial,proto3" json:"serial,omitempty"`
	Mapping   *v30.TopologyMapping       `protobuf:"bytes,3,opt,name=mapping,proto3" json:"mapping,omitempty"`
	Store     string                     `protobuf:"bytes,4,opt,name=store,proto3" json:"store,omitempty"`
}

func (x *GenerateTransactionsRequest_Proposal) Reset() {
	*x = GenerateTransactionsRequest_Proposal{}
	mi := &file_com_digitalasset_canton_topology_admin_v30_topology_manager_write_service_proto_msgTypes[10]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GenerateTransactionsRequest_Proposal) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GenerateTransactionsRequest_Proposal) ProtoMessage() {}

func (x *GenerateTransactionsRequest_Proposal) ProtoReflect() protoreflect.Message {
	mi := &file_com_digitalasset_canton_topology_admin_v30_topology_manager_write_service_proto_msgTypes[10]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GenerateTransactionsRequest_Proposal.ProtoReflect.Descriptor instead.
func (*GenerateTransactionsRequest_Proposal) Descriptor() ([]byte, []int) {
	return file_com_digitalasset_canton_topology_admin_v30_topology_manager_write_service_proto_rawDescGZIP(), []int{0, 0}
}

func (x *GenerateTransactionsRequest_Proposal) GetOperation() v30.Enums_TopologyChangeOp {
	if x != nil {
		return x.Operation
	}
	return v30.Enums_TopologyChangeOp(0)
}

func (x *GenerateTransactionsRequest_Proposal) GetSerial() uint32 {
	if x != nil {
		return x.Serial
	}
	return 0
}

func (x *GenerateTransactionsRequest_Proposal) GetMapping() *v30.TopologyMapping {
	if x != nil {
		return x.Mapping
	}
	return nil
}

func (x *GenerateTransactionsRequest_Proposal) GetStore() string {
	if x != nil {
		return x.Store
	}
	return ""
}

type GenerateTransactionsResponse_GeneratedTransaction struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SerializedTransaction []byte `protobuf:"bytes,1,opt,name=serialized_transaction,json=serializedTransaction,proto3" json:"serialized_transaction,omitempty"`
	TransactionHash       []byte `protobuf:"bytes,2,opt,name=transaction_hash,json=transactionHash,proto3" json:"transaction_hash,omitempty"`
}

func (x *GenerateTransactionsResponse_GeneratedTransaction) Reset() {
	*x = GenerateTransactionsResponse_GeneratedTransaction{}
	mi := &file_com_digitalasset_canton_topology_admin_v30_topology_manager_write_service_proto_msgTypes[11]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GenerateTransactionsResponse_GeneratedTransaction) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GenerateTransactionsResponse_GeneratedTransaction) ProtoMessage() {}

func (x *GenerateTransactionsResponse_GeneratedTransaction) ProtoReflect() protoreflect.Message {
	mi := &file_com_digitalasset_canton_topology_admin_v30_topology_manager_write_service_proto_msgTypes[11]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GenerateTransactionsResponse_GeneratedTransaction.ProtoReflect.Descriptor instead.
func (*GenerateTransactionsResponse_GeneratedTransaction) Descriptor() ([]byte, []int) {
	return file_com_digitalasset_canton_topology_admin_v30_topology_manager_write_service_proto_rawDescGZIP(), []int{1, 0}
}

func (x *GenerateTransactionsResponse_GeneratedTransaction) GetSerializedTransaction() []byte {
	if x != nil {
		return x.SerializedTransaction
	}
	return nil
}

func (x *GenerateTransactionsResponse_GeneratedTransaction) GetTransactionHash() []byte {
	if x != nil {
		return x.TransactionHash
	}
	return nil
}

type AuthorizeRequest_Proposal struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Change  v30.Enums_TopologyChangeOp `protobuf:"varint,1,opt,name=change,proto3,enum=com.digitalasset.canton.protocol.v30.Enums_TopologyChangeOp" json:"change,omitempty"`
	Serial  uint32                     `protobuf:"varint,2,opt,name=serial,proto3" json:"serial,omitempty"`
	Mapping *v30.TopologyMapping       `protobuf:"bytes,3,opt,name=mapping,proto3" json:"mapping,omitempty"`
}

func (x *AuthorizeRequest_Proposal) Reset() {
	*x = AuthorizeRequest_Proposal{}
	mi := &file_com_digitalasset_canton_topology_admin_v30_topology_manager_write_service_proto_msgTypes[12]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AuthorizeRequest_Proposal) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AuthorizeRequest_Proposal) ProtoMessage() {}

func (x *AuthorizeRequest_Proposal) ProtoReflect() protoreflect.Message {
	mi := &file_com_digitalasset_canton_topology_admin_v30_topology_manager_write_service_proto_msgTypes[12]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AuthorizeRequest_Proposal.ProtoReflect.Descriptor instead.
func (*AuthorizeRequest_Proposal) Descriptor() ([]byte, []int) {
	return file_com_digitalasset_canton_topology_admin_v30_topology_manager_write_service_proto_rawDescGZIP(), []int{2, 0}
}

func (x *AuthorizeRequest_Proposal) GetChange() v30.Enums_TopologyChangeOp {
	if x != nil {
		return x.Change
	}
	return v30.Enums_TopologyChangeOp(0)
}

func (x *AuthorizeRequest_Proposal) GetSerial() uint32 {
	if x != nil {
		return x.Serial
	}
	return 0
}

func (x *AuthorizeRequest_Proposal) GetMapping() *v30.TopologyMapping {
	if x != nil {
		return x.Mapping
	}
	return nil
}

var File_com_digitalasset_canton_topology_admin_v30_topology_manager_write_service_proto protoreflect.FileDescriptor

var file_com_digitalasset_canton_topology_admin_v30_topology_manager_write_service_proto_rawDesc = []byte{
	0x0a, 0x4f, 0x63, 0x6f, 0x6d, 0x2f, 0x64, 0x69, 0x67, 0x69, 0x74, 0x61, 0x6c, 0x61, 0x73, 0x73,
	0x65, 0x74, 0x2f, 0x63, 0x61, 0x6e, 0x74, 0x6f, 0x6e, 0x2f, 0x74, 0x6f, 0x70, 0x6f, 0x6c, 0x6f,
	0x67, 0x79, 0x2f, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2f, 0x76, 0x33, 0x30, 0x2f, 0x74, 0x6f, 0x70,
	0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x5f, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x5f, 0x77, 0x72,
	0x69, 0x74, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x12, 0x2a, 0x63, 0x6f, 0x6d, 0x2e, 0x64, 0x69, 0x67, 0x69, 0x74, 0x61, 0x6c, 0x61, 0x73,
	0x73, 0x65, 0x74, 0x2e, 0x63, 0x61, 0x6e, 0x74, 0x6f, 0x6e, 0x2e, 0x74, 0x6f, 0x70, 0x6f, 0x6c,
	0x6f, 0x67, 0x79, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x76, 0x33, 0x30, 0x1a, 0x33, 0x63,
	0x6f, 0x6d, 0x2f, 0x64, 0x69, 0x67, 0x69, 0x74, 0x61, 0x6c, 0x61, 0x73, 0x73, 0x65, 0x74, 0x2f,
	0x63, 0x61, 0x6e, 0x74, 0x6f, 0x6e, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2f,
	0x76, 0x33, 0x30, 0x2f, 0x74, 0x6f, 0x70, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x22, 0xf5, 0x02, 0x0a, 0x1b, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x65, 0x54,
	0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x6e, 0x0a, 0x09, 0x70, 0x72, 0x6f, 0x70, 0x6f, 0x73, 0x61, 0x6c, 0x73, 0x18,
	0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x50, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x64, 0x69, 0x67, 0x69,
	0x74, 0x61, 0x6c, 0x61, 0x73, 0x73, 0x65, 0x74, 0x2e, 0x63, 0x61, 0x6e, 0x74, 0x6f, 0x6e, 0x2e,
	0x74, 0x6f, 0x70, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x76,
	0x33, 0x30, 0x2e, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x65, 0x54, 0x72, 0x61, 0x6e, 0x73,
	0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x50,
	0x72, 0x6f, 0x70, 0x6f, 0x73, 0x61, 0x6c, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x70, 0x6f, 0x73, 0x61,
	0x6c, 0x73, 0x1a, 0xe5, 0x01, 0x0a, 0x08, 0x50, 0x72, 0x6f, 0x70, 0x6f, 0x73, 0x61, 0x6c, 0x12,
	0x5a, 0x0a, 0x09, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x3c, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x64, 0x69, 0x67, 0x69, 0x74, 0x61, 0x6c,
	0x61, 0x73, 0x73, 0x65, 0x74, 0x2e, 0x63, 0x61, 0x6e, 0x74, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x76, 0x33, 0x30, 0x2e, 0x45, 0x6e, 0x75, 0x6d, 0x73, 0x2e,
	0x54, 0x6f, 0x70, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x4f, 0x70,
	0x52, 0x09, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x16, 0x0a, 0x06, 0x73,
	0x65, 0x72, 0x69, 0x61, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x73, 0x65, 0x72,
	0x69, 0x61, 0x6c, 0x12, 0x4f, 0x0a, 0x07, 0x6d, 0x61, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x35, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x64, 0x69, 0x67, 0x69, 0x74,
	0x61, 0x6c, 0x61, 0x73, 0x73, 0x65, 0x74, 0x2e, 0x63, 0x61, 0x6e, 0x74, 0x6f, 0x6e, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x76, 0x33, 0x30, 0x2e, 0x54, 0x6f, 0x70, 0x6f,
	0x6c, 0x6f, 0x67, 0x79, 0x4d, 0x61, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x52, 0x07, 0x6d, 0x61, 0x70,
	0x70, 0x69, 0x6e, 0x67, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x05, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x22, 0xaf, 0x02, 0x0a, 0x1c, 0x47,
	0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x65, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x94, 0x01, 0x0a, 0x16,
	0x67, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x5d, 0x2e, 0x63,
	0x6f, 0x6d, 0x2e, 0x64, 0x69, 0x67, 0x69, 0x74, 0x61, 0x6c, 0x61, 0x73, 0x73, 0x65, 0x74, 0x2e,
	0x63, 0x61, 0x6e, 0x74, 0x6f, 0x6e, 0x2e, 0x74, 0x6f, 0x70, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x2e,
	0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x76, 0x33, 0x30, 0x2e, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x61,
	0x74, 0x65, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x65, 0x64,
	0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x15, 0x67, 0x65, 0x6e,
	0x65, 0x72, 0x61, 0x74, 0x65, 0x64, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x1a, 0x78, 0x0a, 0x14, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x65, 0x64, 0x54,
	0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x35, 0x0a, 0x16, 0x73, 0x65,
	0x72, 0x69, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x64, 0x5f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x15, 0x73, 0x65, 0x72, 0x69,
	0x61, 0x6c, 0x69, 0x7a, 0x65, 0x64, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x29, 0x0a, 0x10, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x5f, 0x68, 0x61, 0x73, 0x68, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0f, 0x74, 0x72, 0x61,
	0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x61, 0x73, 0x68, 0x22, 0xb9, 0x04, 0x0a,
	0x10, 0x41, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x63, 0x0a, 0x08, 0x70, 0x72, 0x6f, 0x70, 0x6f, 0x73, 0x61, 0x6c, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x45, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x64, 0x69, 0x67, 0x69, 0x74, 0x61,
	0x6c, 0x61, 0x73, 0x73, 0x65, 0x74, 0x2e, 0x63, 0x61, 0x6e, 0x74, 0x6f, 0x6e, 0x2e, 0x74, 0x6f,
	0x70, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x76, 0x33, 0x30,
	0x2e, 0x41, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x2e, 0x50, 0x72, 0x6f, 0x70, 0x6f, 0x73, 0x61, 0x6c, 0x48, 0x00, 0x52, 0x08, 0x70, 0x72,
	0x6f, 0x70, 0x6f, 0x73, 0x61, 0x6c, 0x12, 0x2b, 0x0a, 0x10, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x68, 0x61, 0x73, 0x68, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x48, 0x00, 0x52, 0x0f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x48,
	0x61, 0x73, 0x68, 0x12, 0x30, 0x0a, 0x14, 0x6d, 0x75, 0x73, 0x74, 0x5f, 0x66, 0x75, 0x6c, 0x6c,
	0x79, 0x5f, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x12, 0x6d, 0x75, 0x73, 0x74, 0x46, 0x75, 0x6c, 0x6c, 0x79, 0x41, 0x75, 0x74, 0x68,
	0x6f, 0x72, 0x69, 0x7a, 0x65, 0x12, 0x5a, 0x0a, 0x0d, 0x66, 0x6f, 0x72, 0x63, 0x65, 0x5f, 0x63,
	0x68, 0x61, 0x6e, 0x67, 0x65, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0e, 0x32, 0x35, 0x2e, 0x63,
	0x6f, 0x6d, 0x2e, 0x64, 0x69, 0x67, 0x69, 0x74, 0x61, 0x6c, 0x61, 0x73, 0x73, 0x65, 0x74, 0x2e,
	0x63, 0x61, 0x6e, 0x74, 0x6f, 0x6e, 0x2e, 0x74, 0x6f, 0x70, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x2e,
	0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x76, 0x33, 0x30, 0x2e, 0x46, 0x6f, 0x72, 0x63, 0x65, 0x46,
	0x6c, 0x61, 0x67, 0x52, 0x0c, 0x66, 0x6f, 0x72, 0x63, 0x65, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65,
	0x73, 0x12, 0x1b, 0x0a, 0x09, 0x73, 0x69, 0x67, 0x6e, 0x65, 0x64, 0x5f, 0x62, 0x79, 0x18, 0x05,
	0x20, 0x03, 0x28, 0x09, 0x52, 0x08, 0x73, 0x69, 0x67, 0x6e, 0x65, 0x64, 0x42, 0x79, 0x12, 0x14,
	0x0a, 0x05, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x73,
	0x74, 0x6f, 0x72, 0x65, 0x1a, 0xc9, 0x01, 0x0a, 0x08, 0x50, 0x72, 0x6f, 0x70, 0x6f, 0x73, 0x61,
	0x6c, 0x12, 0x54, 0x0a, 0x06, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x3c, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x64, 0x69, 0x67, 0x69, 0x74, 0x61, 0x6c, 0x61,
	0x73, 0x73, 0x65, 0x74, 0x2e, 0x63, 0x61, 0x6e, 0x74, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x76, 0x33, 0x30, 0x2e, 0x45, 0x6e, 0x75, 0x6d, 0x73, 0x2e, 0x54,
	0x6f, 0x70, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x4f, 0x70, 0x52,
	0x06, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x65, 0x72, 0x69, 0x61,
	0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x73, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x12,
	0x4f, 0x0a, 0x07, 0x6d, 0x61, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x35, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x64, 0x69, 0x67, 0x69, 0x74, 0x61, 0x6c, 0x61, 0x73,
	0x73, 0x65, 0x74, 0x2e, 0x63, 0x61, 0x6e, 0x74, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x63, 0x6f, 0x6c, 0x2e, 0x76, 0x33, 0x30, 0x2e, 0x54, 0x6f, 0x70, 0x6f, 0x6c, 0x6f, 0x67, 0x79,
	0x4d, 0x61, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x52, 0x07, 0x6d, 0x61, 0x70, 0x70, 0x69, 0x6e, 0x67,
	0x42, 0x06, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x22, 0x76, 0x0a, 0x11, 0x41, 0x75, 0x74, 0x68,
	0x6f, 0x72, 0x69, 0x7a, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x61, 0x0a,
	0x0b, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x3f, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x64, 0x69, 0x67, 0x69, 0x74, 0x61, 0x6c,
	0x61, 0x73, 0x73, 0x65, 0x74, 0x2e, 0x63, 0x61, 0x6e, 0x74, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x76, 0x33, 0x30, 0x2e, 0x53, 0x69, 0x67, 0x6e, 0x65, 0x64,
	0x54, 0x6f, 0x70, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x52, 0x0b, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x22, 0xef, 0x01, 0x0a, 0x16, 0x41, 0x64, 0x64, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x63, 0x0a, 0x0c, 0x74,
	0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x3f, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x64, 0x69, 0x67, 0x69, 0x74, 0x61, 0x6c, 0x61,
	0x73, 0x73, 0x65, 0x74, 0x2e, 0x63, 0x61, 0x6e, 0x74, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x76, 0x33, 0x30, 0x2e, 0x53, 0x69, 0x67, 0x6e, 0x65, 0x64, 0x54,
	0x6f, 0x70, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x52, 0x0c, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x12, 0x5a, 0x0a, 0x0d, 0x66, 0x6f, 0x72, 0x63, 0x65, 0x5f, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65,
	0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0e, 0x32, 0x35, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x64, 0x69,
	0x67, 0x69, 0x74, 0x61, 0x6c, 0x61, 0x73, 0x73, 0x65, 0x74, 0x2e, 0x63, 0x61, 0x6e, 0x74, 0x6f,
	0x6e, 0x2e, 0x74, 0x6f, 0x70, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e,
	0x2e, 0x76, 0x33, 0x30, 0x2e, 0x46, 0x6f, 0x72, 0x63, 0x65, 0x46, 0x6c, 0x61, 0x67, 0x52, 0x0c,
	0x66, 0x6f, 0x72, 0x63, 0x65, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x73, 0x12, 0x14, 0x0a, 0x05,
	0x73, 0x74, 0x6f, 0x72, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x73, 0x74, 0x6f,
	0x72, 0x65, 0x22, 0x19, 0x0a, 0x17, 0x41, 0x64, 0x64, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x62, 0x0a,
	0x1d, 0x49, 0x6d, 0x70, 0x6f, 0x72, 0x74, 0x54, 0x6f, 0x70, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x53,
	0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2b,
	0x0a, 0x11, 0x74, 0x6f, 0x70, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x5f, 0x73, 0x6e, 0x61, 0x70, 0x73,
	0x68, 0x6f, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x10, 0x74, 0x6f, 0x70, 0x6f, 0x6c,
	0x6f, 0x67, 0x79, 0x53, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x73,
	0x74, 0x6f, 0x72, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x73, 0x74, 0x6f, 0x72,
	0x65, 0x22, 0x20, 0x0a, 0x1e, 0x49, 0x6d, 0x70, 0x6f, 0x72, 0x74, 0x54, 0x6f, 0x70, 0x6f, 0x6c,
	0x6f, 0x67, 0x79, 0x53, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x22, 0x9b, 0x01, 0x0a, 0x17, 0x53, 0x69, 0x67, 0x6e, 0x54, 0x72, 0x61, 0x6e,
	0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x63, 0x0a, 0x0c, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18,
	0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x3f, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x64, 0x69, 0x67, 0x69,
	0x74, 0x61, 0x6c, 0x61, 0x73, 0x73, 0x65, 0x74, 0x2e, 0x63, 0x61, 0x6e, 0x74, 0x6f, 0x6e, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x76, 0x33, 0x30, 0x2e, 0x53, 0x69, 0x67,
	0x6e, 0x65, 0x64, 0x54, 0x6f, 0x70, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x54, 0x72, 0x61, 0x6e, 0x73,
	0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0c, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x12, 0x1b, 0x0a, 0x09, 0x73, 0x69, 0x67, 0x6e, 0x65, 0x64, 0x5f, 0x62,
	0x79, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x08, 0x73, 0x69, 0x67, 0x6e, 0x65, 0x64, 0x42,
	0x79, 0x22, 0x7f, 0x0a, 0x18, 0x53, 0x69, 0x67, 0x6e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x63, 0x0a,
	0x0c, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x01, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x3f, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x64, 0x69, 0x67, 0x69, 0x74, 0x61,
	0x6c, 0x61, 0x73, 0x73, 0x65, 0x74, 0x2e, 0x63, 0x61, 0x6e, 0x74, 0x6f, 0x6e, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x76, 0x33, 0x30, 0x2e, 0x53, 0x69, 0x67, 0x6e, 0x65,
	0x64, 0x54, 0x6f, 0x70, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0c, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x2a, 0x7f, 0x0a, 0x09, 0x46, 0x6f, 0x72, 0x63, 0x65, 0x46, 0x6c, 0x61, 0x67, 0x12,
	0x1a, 0x0a, 0x16, 0x46, 0x4f, 0x52, 0x43, 0x45, 0x5f, 0x46, 0x4c, 0x41, 0x47, 0x5f, 0x55, 0x4e,
	0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x1b, 0x0a, 0x17, 0x46,
	0x4f, 0x52, 0x43, 0x45, 0x5f, 0x46, 0x4c, 0x41, 0x47, 0x5f, 0x41, 0x4c, 0x49, 0x45, 0x4e, 0x5f,
	0x4d, 0x45, 0x4d, 0x42, 0x45, 0x52, 0x10, 0x01, 0x12, 0x39, 0x0a, 0x35, 0x46, 0x4f, 0x52, 0x43,
	0x45, 0x5f, 0x46, 0x4c, 0x41, 0x47, 0x5f, 0x4c, 0x45, 0x44, 0x47, 0x45, 0x52, 0x5f, 0x54, 0x49,
	0x4d, 0x45, 0x5f, 0x52, 0x45, 0x43, 0x4f, 0x52, 0x44, 0x5f, 0x54, 0x49, 0x4d, 0x45, 0x5f, 0x54,
	0x4f, 0x4c, 0x45, 0x52, 0x41, 0x4e, 0x43, 0x45, 0x5f, 0x49, 0x4e, 0x43, 0x52, 0x45, 0x41, 0x53,
	0x45, 0x10, 0x02, 0x32, 0xc3, 0x06, 0x0a, 0x1b, 0x54, 0x6f, 0x70, 0x6f, 0x6c, 0x6f, 0x67, 0x79,
	0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x57, 0x72, 0x69, 0x74, 0x65, 0x53, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x12, 0x88, 0x01, 0x0a, 0x09, 0x41, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a,
	0x65, 0x12, 0x3c, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x64, 0x69, 0x67, 0x69, 0x74, 0x61, 0x6c, 0x61,
	0x73, 0x73, 0x65, 0x74, 0x2e, 0x63, 0x61, 0x6e, 0x74, 0x6f, 0x6e, 0x2e, 0x74, 0x6f, 0x70, 0x6f,
	0x6c, 0x6f, 0x67, 0x79, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x76, 0x33, 0x30, 0x2e, 0x41,
	0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x3d, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x64, 0x69, 0x67, 0x69, 0x74, 0x61, 0x6c, 0x61, 0x73, 0x73,
	0x65, 0x74, 0x2e, 0x63, 0x61, 0x6e, 0x74, 0x6f, 0x6e, 0x2e, 0x74, 0x6f, 0x70, 0x6f, 0x6c, 0x6f,
	0x67, 0x79, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x76, 0x33, 0x30, 0x2e, 0x41, 0x75, 0x74,
	0x68, 0x6f, 0x72, 0x69, 0x7a, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x9a,
	0x01, 0x0a, 0x0f, 0x41, 0x64, 0x64, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x12, 0x42, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x64, 0x69, 0x67, 0x69, 0x74, 0x61, 0x6c,
	0x61, 0x73, 0x73, 0x65, 0x74, 0x2e, 0x63, 0x61, 0x6e, 0x74, 0x6f, 0x6e, 0x2e, 0x74, 0x6f, 0x70,
	0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x76, 0x33, 0x30, 0x2e,
	0x41, 0x64, 0x64, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x43, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x64, 0x69, 0x67,
	0x69, 0x74, 0x61, 0x6c, 0x61, 0x73, 0x73, 0x65, 0x74, 0x2e, 0x63, 0x61, 0x6e, 0x74, 0x6f, 0x6e,
	0x2e, 0x74, 0x6f, 0x70, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e,
	0x76, 0x33, 0x30, 0x2e, 0x41, 0x64, 0x64, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0xaf, 0x01, 0x0a, 0x16,
	0x49, 0x6d, 0x70, 0x6f, 0x72, 0x74, 0x54, 0x6f, 0x70, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x53, 0x6e,
	0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x12, 0x49, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x64, 0x69, 0x67,
	0x69, 0x74, 0x61, 0x6c, 0x61, 0x73, 0x73, 0x65, 0x74, 0x2e, 0x63, 0x61, 0x6e, 0x74, 0x6f, 0x6e,
	0x2e, 0x74, 0x6f, 0x70, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e,
	0x76, 0x33, 0x30, 0x2e, 0x49, 0x6d, 0x70, 0x6f, 0x72, 0x74, 0x54, 0x6f, 0x70, 0x6f, 0x6c, 0x6f,
	0x67, 0x79, 0x53, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x4a, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x64, 0x69, 0x67, 0x69, 0x74, 0x61, 0x6c, 0x61,
	0x73, 0x73, 0x65, 0x74, 0x2e, 0x63, 0x61, 0x6e, 0x74, 0x6f, 0x6e, 0x2e, 0x74, 0x6f, 0x70, 0x6f,
	0x6c, 0x6f, 0x67, 0x79, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x76, 0x33, 0x30, 0x2e, 0x49,
	0x6d, 0x70, 0x6f, 0x72, 0x74, 0x54, 0x6f, 0x70, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x53, 0x6e, 0x61,
	0x70, 0x73, 0x68, 0x6f, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x9d, 0x01,
	0x0a, 0x10, 0x53, 0x69, 0x67, 0x6e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x12, 0x43, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x64, 0x69, 0x67, 0x69, 0x74, 0x61, 0x6c,
	0x61, 0x73, 0x73, 0x65, 0x74, 0x2e, 0x63, 0x61, 0x6e, 0x74, 0x6f, 0x6e, 0x2e, 0x74, 0x6f, 0x70,
	0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x76, 0x33, 0x30, 0x2e,
	0x53, 0x69, 0x67, 0x6e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x44, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x64, 0x69,
	0x67, 0x69, 0x74, 0x61, 0x6c, 0x61, 0x73, 0x73, 0x65, 0x74, 0x2e, 0x63, 0x61, 0x6e, 0x74, 0x6f,
	0x6e, 0x2e, 0x74, 0x6f, 0x70, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e,
	0x2e, 0x76, 0x33, 0x30, 0x2e, 0x53, 0x69, 0x67, 0x6e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0xa9, 0x01,
	0x0a, 0x14, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x65, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x47, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x64, 0x69, 0x67,
	0x69, 0x74, 0x61, 0x6c, 0x61, 0x73, 0x73, 0x65, 0x74, 0x2e, 0x63, 0x61, 0x6e, 0x74, 0x6f, 0x6e,
	0x2e, 0x74, 0x6f, 0x70, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e,
	0x76, 0x33, 0x30, 0x2e, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x65, 0x54, 0x72, 0x61, 0x6e,
	0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x48, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x64, 0x69, 0x67, 0x69, 0x74, 0x61, 0x6c, 0x61, 0x73, 0x73,
	0x65, 0x74, 0x2e, 0x63, 0x61, 0x6e, 0x74, 0x6f, 0x6e, 0x2e, 0x74, 0x6f, 0x70, 0x6f, 0x6c, 0x6f,
	0x67, 0x79, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x76, 0x33, 0x30, 0x2e, 0x47, 0x65, 0x6e,
	0x65, 0x72, 0x61, 0x74, 0x65, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x42, 0x5b, 0x5a, 0x59, 0x67, 0x69, 0x74,
	0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x64, 0x69, 0x67, 0x69, 0x74, 0x61, 0x6c, 0x2d,
	0x61, 0x73, 0x73, 0x65, 0x74, 0x2f, 0x64, 0x61, 0x7a, 0x6c, 0x2d, 0x63, 0x6c, 0x69, 0x65, 0x6e,
	0x74, 0x2f, 0x76, 0x38, 0x2f, 0x67, 0x6f, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x63, 0x6f, 0x6d, 0x2f,
	0x64, 0x69, 0x67, 0x69, 0x74, 0x61, 0x6c, 0x61, 0x73, 0x73, 0x65, 0x74, 0x2f, 0x63, 0x61, 0x6e,
	0x74, 0x6f, 0x6e, 0x2f, 0x74, 0x6f, 0x70, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x2f, 0x61, 0x64, 0x6d,
	0x69, 0x6e, 0x2f, 0x76, 0x33, 0x30, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_com_digitalasset_canton_topology_admin_v30_topology_manager_write_service_proto_rawDescOnce sync.Once
	file_com_digitalasset_canton_topology_admin_v30_topology_manager_write_service_proto_rawDescData = file_com_digitalasset_canton_topology_admin_v30_topology_manager_write_service_proto_rawDesc
)

func file_com_digitalasset_canton_topology_admin_v30_topology_manager_write_service_proto_rawDescGZIP() []byte {
	file_com_digitalasset_canton_topology_admin_v30_topology_manager_write_service_proto_rawDescOnce.Do(func() {
		file_com_digitalasset_canton_topology_admin_v30_topology_manager_write_service_proto_rawDescData = protoimpl.X.CompressGZIP(file_com_digitalasset_canton_topology_admin_v30_topology_manager_write_service_proto_rawDescData)
	})
	return file_com_digitalasset_canton_topology_admin_v30_topology_manager_write_service_proto_rawDescData
}

var file_com_digitalasset_canton_topology_admin_v30_topology_manager_write_service_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_com_digitalasset_canton_topology_admin_v30_topology_manager_write_service_proto_msgTypes = make([]protoimpl.MessageInfo, 13)
var file_com_digitalasset_canton_topology_admin_v30_topology_manager_write_service_proto_goTypes = []any{
	(ForceFlag)(0),                                            // 0: com.digitalasset.canton.topology.admin.v30.ForceFlag
	(*GenerateTransactionsRequest)(nil),                       // 1: com.digitalasset.canton.topology.admin.v30.GenerateTransactionsRequest
	(*GenerateTransactionsResponse)(nil),                      // 2: com.digitalasset.canton.topology.admin.v30.GenerateTransactionsResponse
	(*AuthorizeRequest)(nil),                                  // 3: com.digitalasset.canton.topology.admin.v30.AuthorizeRequest
	(*AuthorizeResponse)(nil),                                 // 4: com.digitalasset.canton.topology.admin.v30.AuthorizeResponse
	(*AddTransactionsRequest)(nil),                            // 5: com.digitalasset.canton.topology.admin.v30.AddTransactionsRequest
	(*AddTransactionsResponse)(nil),                           // 6: com.digitalasset.canton.topology.admin.v30.AddTransactionsResponse
	(*ImportTopologySnapshotRequest)(nil),                     // 7: com.digitalasset.canton.topology.admin.v30.ImportTopologySnapshotRequest
	(*ImportTopologySnapshotResponse)(nil),                    // 8: com.digitalasset.canton.topology.admin.v30.ImportTopologySnapshotResponse
	(*SignTransactionsRequest)(nil),                           // 9: com.digitalasset.canton.topology.admin.v30.SignTransactionsRequest
	(*SignTransactionsResponse)(nil),                          // 10: com.digitalasset.canton.topology.admin.v30.SignTransactionsResponse
	(*GenerateTransactionsRequest_Proposal)(nil),              // 11: com.digitalasset.canton.topology.admin.v30.GenerateTransactionsRequest.Proposal
	(*GenerateTransactionsResponse_GeneratedTransaction)(nil), // 12: com.digitalasset.canton.topology.admin.v30.GenerateTransactionsResponse.GeneratedTransaction
	(*AuthorizeRequest_Proposal)(nil),                         // 13: com.digitalasset.canton.topology.admin.v30.AuthorizeRequest.Proposal
	(*v30.SignedTopologyTransaction)(nil),                     // 14: com.digitalasset.canton.protocol.v30.SignedTopologyTransaction
	(v30.Enums_TopologyChangeOp)(0),                           // 15: com.digitalasset.canton.protocol.v30.Enums.TopologyChangeOp
	(*v30.TopologyMapping)(nil),                               // 16: com.digitalasset.canton.protocol.v30.TopologyMapping
}
var file_com_digitalasset_canton_topology_admin_v30_topology_manager_write_service_proto_depIdxs = []int32{
	11, // 0: com.digitalasset.canton.topology.admin.v30.GenerateTransactionsRequest.proposals:type_name -> com.digitalasset.canton.topology.admin.v30.GenerateTransactionsRequest.Proposal
	12, // 1: com.digitalasset.canton.topology.admin.v30.GenerateTransactionsResponse.generated_transactions:type_name -> com.digitalasset.canton.topology.admin.v30.GenerateTransactionsResponse.GeneratedTransaction
	13, // 2: com.digitalasset.canton.topology.admin.v30.AuthorizeRequest.proposal:type_name -> com.digitalasset.canton.topology.admin.v30.AuthorizeRequest.Proposal
	0,  // 3: com.digitalasset.canton.topology.admin.v30.AuthorizeRequest.force_changes:type_name -> com.digitalasset.canton.topology.admin.v30.ForceFlag
	14, // 4: com.digitalasset.canton.topology.admin.v30.AuthorizeResponse.transaction:type_name -> com.digitalasset.canton.protocol.v30.SignedTopologyTransaction
	14, // 5: com.digitalasset.canton.topology.admin.v30.AddTransactionsRequest.transactions:type_name -> com.digitalasset.canton.protocol.v30.SignedTopologyTransaction
	0,  // 6: com.digitalasset.canton.topology.admin.v30.AddTransactionsRequest.force_changes:type_name -> com.digitalasset.canton.topology.admin.v30.ForceFlag
	14, // 7: com.digitalasset.canton.topology.admin.v30.SignTransactionsRequest.transactions:type_name -> com.digitalasset.canton.protocol.v30.SignedTopologyTransaction
	14, // 8: com.digitalasset.canton.topology.admin.v30.SignTransactionsResponse.transactions:type_name -> com.digitalasset.canton.protocol.v30.SignedTopologyTransaction
	15, // 9: com.digitalasset.canton.topology.admin.v30.GenerateTransactionsRequest.Proposal.operation:type_name -> com.digitalasset.canton.protocol.v30.Enums.TopologyChangeOp
	16, // 10: com.digitalasset.canton.topology.admin.v30.GenerateTransactionsRequest.Proposal.mapping:type_name -> com.digitalasset.canton.protocol.v30.TopologyMapping
	15, // 11: com.digitalasset.canton.topology.admin.v30.AuthorizeRequest.Proposal.change:type_name -> com.digitalasset.canton.protocol.v30.Enums.TopologyChangeOp
	16, // 12: com.digitalasset.canton.topology.admin.v30.AuthorizeRequest.Proposal.mapping:type_name -> com.digitalasset.canton.protocol.v30.TopologyMapping
	3,  // 13: com.digitalasset.canton.topology.admin.v30.TopologyManagerWriteService.Authorize:input_type -> com.digitalasset.canton.topology.admin.v30.AuthorizeRequest
	5,  // 14: com.digitalasset.canton.topology.admin.v30.TopologyManagerWriteService.AddTransactions:input_type -> com.digitalasset.canton.topology.admin.v30.AddTransactionsRequest
	7,  // 15: com.digitalasset.canton.topology.admin.v30.TopologyManagerWriteService.ImportTopologySnapshot:input_type -> com.digitalasset.canton.topology.admin.v30.ImportTopologySnapshotRequest
	9,  // 16: com.digitalasset.canton.topology.admin.v30.TopologyManagerWriteService.SignTransactions:input_type -> com.digitalasset.canton.topology.admin.v30.SignTransactionsRequest
	1,  // 17: com.digitalasset.canton.topology.admin.v30.TopologyManagerWriteService.GenerateTransactions:input_type -> com.digitalasset.canton.topology.admin.v30.GenerateTransactionsRequest
	4,  // 18: com.digitalasset.canton.topology.admin.v30.TopologyManagerWriteService.Authorize:output_type -> com.digitalasset.canton.topology.admin.v30.AuthorizeResponse
	6,  // 19: com.digitalasset.canton.topology.admin.v30.TopologyManagerWriteService.AddTransactions:output_type -> com.digitalasset.canton.topology.admin.v30.AddTransactionsResponse
	8,  // 20: com.digitalasset.canton.topology.admin.v30.TopologyManagerWriteService.ImportTopologySnapshot:output_type -> com.digitalasset.canton.topology.admin.v30.ImportTopologySnapshotResponse
	10, // 21: com.digitalasset.canton.topology.admin.v30.TopologyManagerWriteService.SignTransactions:output_type -> com.digitalasset.canton.topology.admin.v30.SignTransactionsResponse
	2,  // 22: com.digitalasset.canton.topology.admin.v30.TopologyManagerWriteService.GenerateTransactions:output_type -> com.digitalasset.canton.topology.admin.v30.GenerateTransactionsResponse
	18, // [18:23] is the sub-list for method output_type
	13, // [13:18] is the sub-list for method input_type
	13, // [13:13] is the sub-list for extension type_name
	13, // [13:13] is the sub-list for extension extendee
	0,  // [0:13] is the sub-list for field type_name
}

func init() {
	file_com_digitalasset_canton_topology_admin_v30_topology_manager_write_service_proto_init()
}
func file_com_digitalasset_canton_topology_admin_v30_topology_manager_write_service_proto_init() {
	if File_com_digitalasset_canton_topology_admin_v30_topology_manager_write_service_proto != nil {
		return
	}
	file_com_digitalasset_canton_topology_admin_v30_topology_manager_write_service_proto_msgTypes[2].OneofWrappers = []any{
		(*AuthorizeRequest_Proposal_)(nil),
		(*AuthorizeRequest_TransactionHash)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_com_digitalasset_canton_topology_admin_v30_topology_manager_write_service_proto_rawDesc,
			NumEnums:      1,
			NumMessages:   13,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_com_digitalasset_canton_topology_admin_v30_topology_manager_write_service_proto_goTypes,
		DependencyIndexes: file_com_digitalasset_canton_topology_admin_v30_topology_manager_write_service_proto_depIdxs,
		EnumInfos:         file_com_digitalasset_canton_topology_admin_v30_topology_manager_write_service_proto_enumTypes,
		MessageInfos:      file_com_digitalasset_canton_topology_admin_v30_topology_manager_write_service_proto_msgTypes,
	}.Build()
	File_com_digitalasset_canton_topology_admin_v30_topology_manager_write_service_proto = out.File
	file_com_digitalasset_canton_topology_admin_v30_topology_manager_write_service_proto_rawDesc = nil
	file_com_digitalasset_canton_topology_admin_v30_topology_manager_write_service_proto_goTypes = nil
	file_com_digitalasset_canton_topology_admin_v30_topology_manager_write_service_proto_depIdxs = nil
}
