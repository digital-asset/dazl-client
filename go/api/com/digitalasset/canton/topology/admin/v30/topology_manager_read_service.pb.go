// Copyright (c) 2017-2025 Digital Asset (Switzerland) GmbH and/or its affiliates. All rights reserved.
// SPDX-License-Identifier: Apache-2.0
// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.35.2
// 	protoc        v5.27.2
// source: com/digitalasset/canton/topology/admin/v30/topology_manager_read_service.proto

package v30

import (
	v30 "github.com/digital-asset/dazl-client/v8/go/api/com/digitalasset/canton/protocol/v30"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	wrapperspb "google.golang.org/protobuf/types/known/wrapperspb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type BaseQuery struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FilterStore *Store                     `protobuf:"bytes,1,opt,name=filter_store,json=filterStore,proto3" json:"filter_store,omitempty"`
	Proposals   bool                       `protobuf:"varint,2,opt,name=proposals,proto3" json:"proposals,omitempty"`
	Operation   v30.Enums_TopologyChangeOp `protobuf:"varint,3,opt,name=operation,proto3,enum=com.digitalasset.canton.protocol.v30.Enums_TopologyChangeOp" json:"operation,omitempty"`
	// Types that are assignable to TimeQuery:
	//
	//	*BaseQuery_Snapshot
	//	*BaseQuery_HeadState
	//	*BaseQuery_Range
	TimeQuery       isBaseQuery_TimeQuery  `protobuf_oneof:"time_query"`
	FilterSignedKey string                 `protobuf:"bytes,8,opt,name=filter_signed_key,json=filterSignedKey,proto3" json:"filter_signed_key,omitempty"`
	ProtocolVersion *wrapperspb.Int32Value `protobuf:"bytes,9,opt,name=protocol_version,json=protocolVersion,proto3" json:"protocol_version,omitempty"`
}

func (x *BaseQuery) Reset() {
	*x = BaseQuery{}
	mi := &file_com_digitalasset_canton_topology_admin_v30_topology_manager_read_service_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *BaseQuery) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BaseQuery) ProtoMessage() {}

func (x *BaseQuery) ProtoReflect() protoreflect.Message {
	mi := &file_com_digitalasset_canton_topology_admin_v30_topology_manager_read_service_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BaseQuery.ProtoReflect.Descriptor instead.
func (*BaseQuery) Descriptor() ([]byte, []int) {
	return file_com_digitalasset_canton_topology_admin_v30_topology_manager_read_service_proto_rawDescGZIP(), []int{0}
}

func (x *BaseQuery) GetFilterStore() *Store {
	if x != nil {
		return x.FilterStore
	}
	return nil
}

func (x *BaseQuery) GetProposals() bool {
	if x != nil {
		return x.Proposals
	}
	return false
}

func (x *BaseQuery) GetOperation() v30.Enums_TopologyChangeOp {
	if x != nil {
		return x.Operation
	}
	return v30.Enums_TopologyChangeOp(0)
}

func (m *BaseQuery) GetTimeQuery() isBaseQuery_TimeQuery {
	if m != nil {
		return m.TimeQuery
	}
	return nil
}

func (x *BaseQuery) GetSnapshot() *timestamppb.Timestamp {
	if x, ok := x.GetTimeQuery().(*BaseQuery_Snapshot); ok {
		return x.Snapshot
	}
	return nil
}

func (x *BaseQuery) GetHeadState() *emptypb.Empty {
	if x, ok := x.GetTimeQuery().(*BaseQuery_HeadState); ok {
		return x.HeadState
	}
	return nil
}

func (x *BaseQuery) GetRange() *BaseQuery_TimeRange {
	if x, ok := x.GetTimeQuery().(*BaseQuery_Range); ok {
		return x.Range
	}
	return nil
}

func (x *BaseQuery) GetFilterSignedKey() string {
	if x != nil {
		return x.FilterSignedKey
	}
	return ""
}

func (x *BaseQuery) GetProtocolVersion() *wrapperspb.Int32Value {
	if x != nil {
		return x.ProtocolVersion
	}
	return nil
}

type isBaseQuery_TimeQuery interface {
	isBaseQuery_TimeQuery()
}

type BaseQuery_Snapshot struct {
	Snapshot *timestamppb.Timestamp `protobuf:"bytes,5,opt,name=snapshot,proto3,oneof"`
}

type BaseQuery_HeadState struct {
	HeadState *emptypb.Empty `protobuf:"bytes,6,opt,name=head_state,json=headState,proto3,oneof"`
}

type BaseQuery_Range struct {
	Range *BaseQuery_TimeRange `protobuf:"bytes,7,opt,name=range,proto3,oneof"`
}

func (*BaseQuery_Snapshot) isBaseQuery_TimeQuery() {}

func (*BaseQuery_HeadState) isBaseQuery_TimeQuery() {}

func (*BaseQuery_Range) isBaseQuery_TimeQuery() {}

type Store struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Store:
	//
	//	*Store_Authorized_
	//	*Store_Domain_
	Store isStore_Store `protobuf_oneof:"store"`
}

func (x *Store) Reset() {
	*x = Store{}
	mi := &file_com_digitalasset_canton_topology_admin_v30_topology_manager_read_service_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Store) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Store) ProtoMessage() {}

func (x *Store) ProtoReflect() protoreflect.Message {
	mi := &file_com_digitalasset_canton_topology_admin_v30_topology_manager_read_service_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Store.ProtoReflect.Descriptor instead.
func (*Store) Descriptor() ([]byte, []int) {
	return file_com_digitalasset_canton_topology_admin_v30_topology_manager_read_service_proto_rawDescGZIP(), []int{1}
}

func (m *Store) GetStore() isStore_Store {
	if m != nil {
		return m.Store
	}
	return nil
}

func (x *Store) GetAuthorized() *Store_Authorized {
	if x, ok := x.GetStore().(*Store_Authorized_); ok {
		return x.Authorized
	}
	return nil
}

func (x *Store) GetDomain() *Store_Domain {
	if x, ok := x.GetStore().(*Store_Domain_); ok {
		return x.Domain
	}
	return nil
}

type isStore_Store interface {
	isStore_Store()
}

type Store_Authorized_ struct {
	Authorized *Store_Authorized `protobuf:"bytes,1,opt,name=authorized,proto3,oneof"`
}

type Store_Domain_ struct {
	Domain *Store_Domain `protobuf:"bytes,2,opt,name=domain,proto3,oneof"`
}

func (*Store_Authorized_) isStore_Store() {}

func (*Store_Domain_) isStore_Store() {}

type BaseResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Store                *Store                     `protobuf:"bytes,1,opt,name=store,proto3" json:"store,omitempty"`
	Sequenced            *timestamppb.Timestamp     `protobuf:"bytes,2,opt,name=sequenced,proto3" json:"sequenced,omitempty"`
	ValidFrom            *timestamppb.Timestamp     `protobuf:"bytes,3,opt,name=valid_from,json=validFrom,proto3" json:"valid_from,omitempty"`
	ValidUntil           *timestamppb.Timestamp     `protobuf:"bytes,4,opt,name=valid_until,json=validUntil,proto3" json:"valid_until,omitempty"`
	Operation            v30.Enums_TopologyChangeOp `protobuf:"varint,5,opt,name=operation,proto3,enum=com.digitalasset.canton.protocol.v30.Enums_TopologyChangeOp" json:"operation,omitempty"`
	TransactionHash      []byte                     `protobuf:"bytes,6,opt,name=transaction_hash,json=transactionHash,proto3" json:"transaction_hash,omitempty"`
	Serial               int32                      `protobuf:"varint,7,opt,name=serial,proto3" json:"serial,omitempty"`
	SignedByFingerprints []string                   `protobuf:"bytes,8,rep,name=signed_by_fingerprints,json=signedByFingerprints,proto3" json:"signed_by_fingerprints,omitempty"`
}

func (x *BaseResult) Reset() {
	*x = BaseResult{}
	mi := &file_com_digitalasset_canton_topology_admin_v30_topology_manager_read_service_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *BaseResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BaseResult) ProtoMessage() {}

func (x *BaseResult) ProtoReflect() protoreflect.Message {
	mi := &file_com_digitalasset_canton_topology_admin_v30_topology_manager_read_service_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BaseResult.ProtoReflect.Descriptor instead.
func (*BaseResult) Descriptor() ([]byte, []int) {
	return file_com_digitalasset_canton_topology_admin_v30_topology_manager_read_service_proto_rawDescGZIP(), []int{2}
}

func (x *BaseResult) GetStore() *Store {
	if x != nil {
		return x.Store
	}
	return nil
}

func (x *BaseResult) GetSequenced() *timestamppb.Timestamp {
	if x != nil {
		return x.Sequenced
	}
	return nil
}

func (x *BaseResult) GetValidFrom() *timestamppb.Timestamp {
	if x != nil {
		return x.ValidFrom
	}
	return nil
}

func (x *BaseResult) GetValidUntil() *timestamppb.Timestamp {
	if x != nil {
		return x.ValidUntil
	}
	return nil
}

func (x *BaseResult) GetOperation() v30.Enums_TopologyChangeOp {
	if x != nil {
		return x.Operation
	}
	return v30.Enums_TopologyChangeOp(0)
}

func (x *BaseResult) GetTransactionHash() []byte {
	if x != nil {
		return x.TransactionHash
	}
	return nil
}

func (x *BaseResult) GetSerial() int32 {
	if x != nil {
		return x.Serial
	}
	return 0
}

func (x *BaseResult) GetSignedByFingerprints() []string {
	if x != nil {
		return x.SignedByFingerprints
	}
	return nil
}

type ListNamespaceDelegationRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BaseQuery                  *BaseQuery `protobuf:"bytes,1,opt,name=base_query,json=baseQuery,proto3" json:"base_query,omitempty"`
	FilterNamespace            string     `protobuf:"bytes,2,opt,name=filter_namespace,json=filterNamespace,proto3" json:"filter_namespace,omitempty"`
	FilterTargetKeyFingerprint string     `protobuf:"bytes,3,opt,name=filter_target_key_fingerprint,json=filterTargetKeyFingerprint,proto3" json:"filter_target_key_fingerprint,omitempty"`
}

func (x *ListNamespaceDelegationRequest) Reset() {
	*x = ListNamespaceDelegationRequest{}
	mi := &file_com_digitalasset_canton_topology_admin_v30_topology_manager_read_service_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListNamespaceDelegationRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListNamespaceDelegationRequest) ProtoMessage() {}

func (x *ListNamespaceDelegationRequest) ProtoReflect() protoreflect.Message {
	mi := &file_com_digitalasset_canton_topology_admin_v30_topology_manager_read_service_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListNamespaceDelegationRequest.ProtoReflect.Descriptor instead.
func (*ListNamespaceDelegationRequest) Descriptor() ([]byte, []int) {
	return file_com_digitalasset_canton_topology_admin_v30_topology_manager_read_service_proto_rawDescGZIP(), []int{3}
}

func (x *ListNamespaceDelegationRequest) GetBaseQuery() *BaseQuery {
	if x != nil {
		return x.BaseQuery
	}
	return nil
}

func (x *ListNamespaceDelegationRequest) GetFilterNamespace() string {
	if x != nil {
		return x.FilterNamespace
	}
	return ""
}

func (x *ListNamespaceDelegationRequest) GetFilterTargetKeyFingerprint() string {
	if x != nil {
		return x.FilterTargetKeyFingerprint
	}
	return ""
}

type ListNamespaceDelegationResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Results []*ListNamespaceDelegationResponse_Result `protobuf:"bytes,1,rep,name=results,proto3" json:"results,omitempty"`
}

func (x *ListNamespaceDelegationResponse) Reset() {
	*x = ListNamespaceDelegationResponse{}
	mi := &file_com_digitalasset_canton_topology_admin_v30_topology_manager_read_service_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListNamespaceDelegationResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListNamespaceDelegationResponse) ProtoMessage() {}

func (x *ListNamespaceDelegationResponse) ProtoReflect() protoreflect.Message {
	mi := &file_com_digitalasset_canton_topology_admin_v30_topology_manager_read_service_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListNamespaceDelegationResponse.ProtoReflect.Descriptor instead.
func (*ListNamespaceDelegationResponse) Descriptor() ([]byte, []int) {
	return file_com_digitalasset_canton_topology_admin_v30_topology_manager_read_service_proto_rawDescGZIP(), []int{4}
}

func (x *ListNamespaceDelegationResponse) GetResults() []*ListNamespaceDelegationResponse_Result {
	if x != nil {
		return x.Results
	}
	return nil
}

type ListDecentralizedNamespaceDefinitionRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BaseQuery       *BaseQuery `protobuf:"bytes,1,opt,name=base_query,json=baseQuery,proto3" json:"base_query,omitempty"`
	FilterNamespace string     `protobuf:"bytes,2,opt,name=filter_namespace,json=filterNamespace,proto3" json:"filter_namespace,omitempty"`
}

func (x *ListDecentralizedNamespaceDefinitionRequest) Reset() {
	*x = ListDecentralizedNamespaceDefinitionRequest{}
	mi := &file_com_digitalasset_canton_topology_admin_v30_topology_manager_read_service_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListDecentralizedNamespaceDefinitionRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListDecentralizedNamespaceDefinitionRequest) ProtoMessage() {}

func (x *ListDecentralizedNamespaceDefinitionRequest) ProtoReflect() protoreflect.Message {
	mi := &file_com_digitalasset_canton_topology_admin_v30_topology_manager_read_service_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListDecentralizedNamespaceDefinitionRequest.ProtoReflect.Descriptor instead.
func (*ListDecentralizedNamespaceDefinitionRequest) Descriptor() ([]byte, []int) {
	return file_com_digitalasset_canton_topology_admin_v30_topology_manager_read_service_proto_rawDescGZIP(), []int{5}
}

func (x *ListDecentralizedNamespaceDefinitionRequest) GetBaseQuery() *BaseQuery {
	if x != nil {
		return x.BaseQuery
	}
	return nil
}

func (x *ListDecentralizedNamespaceDefinitionRequest) GetFilterNamespace() string {
	if x != nil {
		return x.FilterNamespace
	}
	return ""
}

type ListDecentralizedNamespaceDefinitionResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Results []*ListDecentralizedNamespaceDefinitionResponse_Result `protobuf:"bytes,1,rep,name=results,proto3" json:"results,omitempty"`
}

func (x *ListDecentralizedNamespaceDefinitionResponse) Reset() {
	*x = ListDecentralizedNamespaceDefinitionResponse{}
	mi := &file_com_digitalasset_canton_topology_admin_v30_topology_manager_read_service_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListDecentralizedNamespaceDefinitionResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListDecentralizedNamespaceDefinitionResponse) ProtoMessage() {}

func (x *ListDecentralizedNamespaceDefinitionResponse) ProtoReflect() protoreflect.Message {
	mi := &file_com_digitalasset_canton_topology_admin_v30_topology_manager_read_service_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListDecentralizedNamespaceDefinitionResponse.ProtoReflect.Descriptor instead.
func (*ListDecentralizedNamespaceDefinitionResponse) Descriptor() ([]byte, []int) {
	return file_com_digitalasset_canton_topology_admin_v30_topology_manager_read_service_proto_rawDescGZIP(), []int{6}
}

func (x *ListDecentralizedNamespaceDefinitionResponse) GetResults() []*ListDecentralizedNamespaceDefinitionResponse_Result {
	if x != nil {
		return x.Results
	}
	return nil
}

type ListIdentifierDelegationRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BaseQuery                  *BaseQuery `protobuf:"bytes,1,opt,name=base_query,json=baseQuery,proto3" json:"base_query,omitempty"`
	FilterUid                  string     `protobuf:"bytes,2,opt,name=filter_uid,json=filterUid,proto3" json:"filter_uid,omitempty"`
	FilterTargetKeyFingerprint string     `protobuf:"bytes,3,opt,name=filter_target_key_fingerprint,json=filterTargetKeyFingerprint,proto3" json:"filter_target_key_fingerprint,omitempty"`
}

func (x *ListIdentifierDelegationRequest) Reset() {
	*x = ListIdentifierDelegationRequest{}
	mi := &file_com_digitalasset_canton_topology_admin_v30_topology_manager_read_service_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListIdentifierDelegationRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListIdentifierDelegationRequest) ProtoMessage() {}

func (x *ListIdentifierDelegationRequest) ProtoReflect() protoreflect.Message {
	mi := &file_com_digitalasset_canton_topology_admin_v30_topology_manager_read_service_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListIdentifierDelegationRequest.ProtoReflect.Descriptor instead.
func (*ListIdentifierDelegationRequest) Descriptor() ([]byte, []int) {
	return file_com_digitalasset_canton_topology_admin_v30_topology_manager_read_service_proto_rawDescGZIP(), []int{7}
}

func (x *ListIdentifierDelegationRequest) GetBaseQuery() *BaseQuery {
	if x != nil {
		return x.BaseQuery
	}
	return nil
}

func (x *ListIdentifierDelegationRequest) GetFilterUid() string {
	if x != nil {
		return x.FilterUid
	}
	return ""
}

func (x *ListIdentifierDelegationRequest) GetFilterTargetKeyFingerprint() string {
	if x != nil {
		return x.FilterTargetKeyFingerprint
	}
	return ""
}

type ListIdentifierDelegationResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Results []*ListIdentifierDelegationResponse_Result `protobuf:"bytes,1,rep,name=results,proto3" json:"results,omitempty"`
}

func (x *ListIdentifierDelegationResponse) Reset() {
	*x = ListIdentifierDelegationResponse{}
	mi := &file_com_digitalasset_canton_topology_admin_v30_topology_manager_read_service_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListIdentifierDelegationResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListIdentifierDelegationResponse) ProtoMessage() {}

func (x *ListIdentifierDelegationResponse) ProtoReflect() protoreflect.Message {
	mi := &file_com_digitalasset_canton_topology_admin_v30_topology_manager_read_service_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListIdentifierDelegationResponse.ProtoReflect.Descriptor instead.
func (*ListIdentifierDelegationResponse) Descriptor() ([]byte, []int) {
	return file_com_digitalasset_canton_topology_admin_v30_topology_manager_read_service_proto_rawDescGZIP(), []int{8}
}

func (x *ListIdentifierDelegationResponse) GetResults() []*ListIdentifierDelegationResponse_Result {
	if x != nil {
		return x.Results
	}
	return nil
}

type ListOwnerToKeyMappingRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BaseQuery          *BaseQuery `protobuf:"bytes,1,opt,name=base_query,json=baseQuery,proto3" json:"base_query,omitempty"`
	FilterKeyOwnerType string     `protobuf:"bytes,2,opt,name=filter_key_owner_type,json=filterKeyOwnerType,proto3" json:"filter_key_owner_type,omitempty"`
	FilterKeyOwnerUid  string     `protobuf:"bytes,3,opt,name=filter_key_owner_uid,json=filterKeyOwnerUid,proto3" json:"filter_key_owner_uid,omitempty"`
}

func (x *ListOwnerToKeyMappingRequest) Reset() {
	*x = ListOwnerToKeyMappingRequest{}
	mi := &file_com_digitalasset_canton_topology_admin_v30_topology_manager_read_service_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListOwnerToKeyMappingRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListOwnerToKeyMappingRequest) ProtoMessage() {}

func (x *ListOwnerToKeyMappingRequest) ProtoReflect() protoreflect.Message {
	mi := &file_com_digitalasset_canton_topology_admin_v30_topology_manager_read_service_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListOwnerToKeyMappingRequest.ProtoReflect.Descriptor instead.
func (*ListOwnerToKeyMappingRequest) Descriptor() ([]byte, []int) {
	return file_com_digitalasset_canton_topology_admin_v30_topology_manager_read_service_proto_rawDescGZIP(), []int{9}
}

func (x *ListOwnerToKeyMappingRequest) GetBaseQuery() *BaseQuery {
	if x != nil {
		return x.BaseQuery
	}
	return nil
}

func (x *ListOwnerToKeyMappingRequest) GetFilterKeyOwnerType() string {
	if x != nil {
		return x.FilterKeyOwnerType
	}
	return ""
}

func (x *ListOwnerToKeyMappingRequest) GetFilterKeyOwnerUid() string {
	if x != nil {
		return x.FilterKeyOwnerUid
	}
	return ""
}

type ListOwnerToKeyMappingResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Results []*ListOwnerToKeyMappingResponse_Result `protobuf:"bytes,1,rep,name=results,proto3" json:"results,omitempty"`
}

func (x *ListOwnerToKeyMappingResponse) Reset() {
	*x = ListOwnerToKeyMappingResponse{}
	mi := &file_com_digitalasset_canton_topology_admin_v30_topology_manager_read_service_proto_msgTypes[10]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListOwnerToKeyMappingResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListOwnerToKeyMappingResponse) ProtoMessage() {}

func (x *ListOwnerToKeyMappingResponse) ProtoReflect() protoreflect.Message {
	mi := &file_com_digitalasset_canton_topology_admin_v30_topology_manager_read_service_proto_msgTypes[10]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListOwnerToKeyMappingResponse.ProtoReflect.Descriptor instead.
func (*ListOwnerToKeyMappingResponse) Descriptor() ([]byte, []int) {
	return file_com_digitalasset_canton_topology_admin_v30_topology_manager_read_service_proto_rawDescGZIP(), []int{10}
}

func (x *ListOwnerToKeyMappingResponse) GetResults() []*ListOwnerToKeyMappingResponse_Result {
	if x != nil {
		return x.Results
	}
	return nil
}

type ListPartyToKeyMappingRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BaseQuery   *BaseQuery `protobuf:"bytes,1,opt,name=base_query,json=baseQuery,proto3" json:"base_query,omitempty"`
	FilterParty string     `protobuf:"bytes,2,opt,name=filter_party,json=filterParty,proto3" json:"filter_party,omitempty"`
}

func (x *ListPartyToKeyMappingRequest) Reset() {
	*x = ListPartyToKeyMappingRequest{}
	mi := &file_com_digitalasset_canton_topology_admin_v30_topology_manager_read_service_proto_msgTypes[11]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListPartyToKeyMappingRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListPartyToKeyMappingRequest) ProtoMessage() {}

func (x *ListPartyToKeyMappingRequest) ProtoReflect() protoreflect.Message {
	mi := &file_com_digitalasset_canton_topology_admin_v30_topology_manager_read_service_proto_msgTypes[11]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListPartyToKeyMappingRequest.ProtoReflect.Descriptor instead.
func (*ListPartyToKeyMappingRequest) Descriptor() ([]byte, []int) {
	return file_com_digitalasset_canton_topology_admin_v30_topology_manager_read_service_proto_rawDescGZIP(), []int{11}
}

func (x *ListPartyToKeyMappingRequest) GetBaseQuery() *BaseQuery {
	if x != nil {
		return x.BaseQuery
	}
	return nil
}

func (x *ListPartyToKeyMappingRequest) GetFilterParty() string {
	if x != nil {
		return x.FilterParty
	}
	return ""
}

type ListPartyToKeyMappingResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Results []*ListPartyToKeyMappingResponse_Result `protobuf:"bytes,1,rep,name=results,proto3" json:"results,omitempty"`
}

func (x *ListPartyToKeyMappingResponse) Reset() {
	*x = ListPartyToKeyMappingResponse{}
	mi := &file_com_digitalasset_canton_topology_admin_v30_topology_manager_read_service_proto_msgTypes[12]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListPartyToKeyMappingResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListPartyToKeyMappingResponse) ProtoMessage() {}

func (x *ListPartyToKeyMappingResponse) ProtoReflect() protoreflect.Message {
	mi := &file_com_digitalasset_canton_topology_admin_v30_topology_manager_read_service_proto_msgTypes[12]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListPartyToKeyMappingResponse.ProtoReflect.Descriptor instead.
func (*ListPartyToKeyMappingResponse) Descriptor() ([]byte, []int) {
	return file_com_digitalasset_canton_topology_admin_v30_topology_manager_read_service_proto_rawDescGZIP(), []int{12}
}

func (x *ListPartyToKeyMappingResponse) GetResults() []*ListPartyToKeyMappingResponse_Result {
	if x != nil {
		return x.Results
	}
	return nil
}

type ListDomainTrustCertificateRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BaseQuery *BaseQuery `protobuf:"bytes,1,opt,name=base_query,json=baseQuery,proto3" json:"base_query,omitempty"`
	FilterUid string     `protobuf:"bytes,2,opt,name=filter_uid,json=filterUid,proto3" json:"filter_uid,omitempty"`
}

func (x *ListDomainTrustCertificateRequest) Reset() {
	*x = ListDomainTrustCertificateRequest{}
	mi := &file_com_digitalasset_canton_topology_admin_v30_topology_manager_read_service_proto_msgTypes[13]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListDomainTrustCertificateRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListDomainTrustCertificateRequest) ProtoMessage() {}

func (x *ListDomainTrustCertificateRequest) ProtoReflect() protoreflect.Message {
	mi := &file_com_digitalasset_canton_topology_admin_v30_topology_manager_read_service_proto_msgTypes[13]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListDomainTrustCertificateRequest.ProtoReflect.Descriptor instead.
func (*ListDomainTrustCertificateRequest) Descriptor() ([]byte, []int) {
	return file_com_digitalasset_canton_topology_admin_v30_topology_manager_read_service_proto_rawDescGZIP(), []int{13}
}

func (x *ListDomainTrustCertificateRequest) GetBaseQuery() *BaseQuery {
	if x != nil {
		return x.BaseQuery
	}
	return nil
}

func (x *ListDomainTrustCertificateRequest) GetFilterUid() string {
	if x != nil {
		return x.FilterUid
	}
	return ""
}

type ListDomainTrustCertificateResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Results []*ListDomainTrustCertificateResponse_Result `protobuf:"bytes,1,rep,name=results,proto3" json:"results,omitempty"`
}

func (x *ListDomainTrustCertificateResponse) Reset() {
	*x = ListDomainTrustCertificateResponse{}
	mi := &file_com_digitalasset_canton_topology_admin_v30_topology_manager_read_service_proto_msgTypes[14]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListDomainTrustCertificateResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListDomainTrustCertificateResponse) ProtoMessage() {}

func (x *ListDomainTrustCertificateResponse) ProtoReflect() protoreflect.Message {
	mi := &file_com_digitalasset_canton_topology_admin_v30_topology_manager_read_service_proto_msgTypes[14]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListDomainTrustCertificateResponse.ProtoReflect.Descriptor instead.
func (*ListDomainTrustCertificateResponse) Descriptor() ([]byte, []int) {
	return file_com_digitalasset_canton_topology_admin_v30_topology_manager_read_service_proto_rawDescGZIP(), []int{14}
}

func (x *ListDomainTrustCertificateResponse) GetResults() []*ListDomainTrustCertificateResponse_Result {
	if x != nil {
		return x.Results
	}
	return nil
}

type ListParticipantDomainPermissionRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BaseQuery *BaseQuery `protobuf:"bytes,1,opt,name=base_query,json=baseQuery,proto3" json:"base_query,omitempty"`
	FilterUid string     `protobuf:"bytes,2,opt,name=filter_uid,json=filterUid,proto3" json:"filter_uid,omitempty"`
}

func (x *ListParticipantDomainPermissionRequest) Reset() {
	*x = ListParticipantDomainPermissionRequest{}
	mi := &file_com_digitalasset_canton_topology_admin_v30_topology_manager_read_service_proto_msgTypes[15]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListParticipantDomainPermissionRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListParticipantDomainPermissionRequest) ProtoMessage() {}

func (x *ListParticipantDomainPermissionRequest) ProtoReflect() protoreflect.Message {
	mi := &file_com_digitalasset_canton_topology_admin_v30_topology_manager_read_service_proto_msgTypes[15]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListParticipantDomainPermissionRequest.ProtoReflect.Descriptor instead.
func (*ListParticipantDomainPermissionRequest) Descriptor() ([]byte, []int) {
	return file_com_digitalasset_canton_topology_admin_v30_topology_manager_read_service_proto_rawDescGZIP(), []int{15}
}

func (x *ListParticipantDomainPermissionRequest) GetBaseQuery() *BaseQuery {
	if x != nil {
		return x.BaseQuery
	}
	return nil
}

func (x *ListParticipantDomainPermissionRequest) GetFilterUid() string {
	if x != nil {
		return x.FilterUid
	}
	return ""
}

type ListParticipantDomainPermissionResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Results []*ListParticipantDomainPermissionResponse_Result `protobuf:"bytes,1,rep,name=results,proto3" json:"results,omitempty"`
}

func (x *ListParticipantDomainPermissionResponse) Reset() {
	*x = ListParticipantDomainPermissionResponse{}
	mi := &file_com_digitalasset_canton_topology_admin_v30_topology_manager_read_service_proto_msgTypes[16]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListParticipantDomainPermissionResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListParticipantDomainPermissionResponse) ProtoMessage() {}

func (x *ListParticipantDomainPermissionResponse) ProtoReflect() protoreflect.Message {
	mi := &file_com_digitalasset_canton_topology_admin_v30_topology_manager_read_service_proto_msgTypes[16]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListParticipantDomainPermissionResponse.ProtoReflect.Descriptor instead.
func (*ListParticipantDomainPermissionResponse) Descriptor() ([]byte, []int) {
	return file_com_digitalasset_canton_topology_admin_v30_topology_manager_read_service_proto_rawDescGZIP(), []int{16}
}

func (x *ListParticipantDomainPermissionResponse) GetResults() []*ListParticipantDomainPermissionResponse_Result {
	if x != nil {
		return x.Results
	}
	return nil
}

type ListPartyHostingLimitsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BaseQuery *BaseQuery `protobuf:"bytes,1,opt,name=base_query,json=baseQuery,proto3" json:"base_query,omitempty"`
	FilterUid string     `protobuf:"bytes,2,opt,name=filter_uid,json=filterUid,proto3" json:"filter_uid,omitempty"`
}

func (x *ListPartyHostingLimitsRequest) Reset() {
	*x = ListPartyHostingLimitsRequest{}
	mi := &file_com_digitalasset_canton_topology_admin_v30_topology_manager_read_service_proto_msgTypes[17]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListPartyHostingLimitsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListPartyHostingLimitsRequest) ProtoMessage() {}

func (x *ListPartyHostingLimitsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_com_digitalasset_canton_topology_admin_v30_topology_manager_read_service_proto_msgTypes[17]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListPartyHostingLimitsRequest.ProtoReflect.Descriptor instead.
func (*ListPartyHostingLimitsRequest) Descriptor() ([]byte, []int) {
	return file_com_digitalasset_canton_topology_admin_v30_topology_manager_read_service_proto_rawDescGZIP(), []int{17}
}

func (x *ListPartyHostingLimitsRequest) GetBaseQuery() *BaseQuery {
	if x != nil {
		return x.BaseQuery
	}
	return nil
}

func (x *ListPartyHostingLimitsRequest) GetFilterUid() string {
	if x != nil {
		return x.FilterUid
	}
	return ""
}

type ListPartyHostingLimitsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Results []*ListPartyHostingLimitsResponse_Result `protobuf:"bytes,1,rep,name=results,proto3" json:"results,omitempty"`
}

func (x *ListPartyHostingLimitsResponse) Reset() {
	*x = ListPartyHostingLimitsResponse{}
	mi := &file_com_digitalasset_canton_topology_admin_v30_topology_manager_read_service_proto_msgTypes[18]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListPartyHostingLimitsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListPartyHostingLimitsResponse) ProtoMessage() {}

func (x *ListPartyHostingLimitsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_com_digitalasset_canton_topology_admin_v30_topology_manager_read_service_proto_msgTypes[18]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListPartyHostingLimitsResponse.ProtoReflect.Descriptor instead.
func (*ListPartyHostingLimitsResponse) Descriptor() ([]byte, []int) {
	return file_com_digitalasset_canton_topology_admin_v30_topology_manager_read_service_proto_rawDescGZIP(), []int{18}
}

func (x *ListPartyHostingLimitsResponse) GetResults() []*ListPartyHostingLimitsResponse_Result {
	if x != nil {
		return x.Results
	}
	return nil
}

type ListVettedPackagesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BaseQuery         *BaseQuery `protobuf:"bytes,1,opt,name=base_query,json=baseQuery,proto3" json:"base_query,omitempty"`
	FilterParticipant string     `protobuf:"bytes,2,opt,name=filter_participant,json=filterParticipant,proto3" json:"filter_participant,omitempty"`
}

func (x *ListVettedPackagesRequest) Reset() {
	*x = ListVettedPackagesRequest{}
	mi := &file_com_digitalasset_canton_topology_admin_v30_topology_manager_read_service_proto_msgTypes[19]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListVettedPackagesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListVettedPackagesRequest) ProtoMessage() {}

func (x *ListVettedPackagesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_com_digitalasset_canton_topology_admin_v30_topology_manager_read_service_proto_msgTypes[19]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListVettedPackagesRequest.ProtoReflect.Descriptor instead.
func (*ListVettedPackagesRequest) Descriptor() ([]byte, []int) {
	return file_com_digitalasset_canton_topology_admin_v30_topology_manager_read_service_proto_rawDescGZIP(), []int{19}
}

func (x *ListVettedPackagesRequest) GetBaseQuery() *BaseQuery {
	if x != nil {
		return x.BaseQuery
	}
	return nil
}

func (x *ListVettedPackagesRequest) GetFilterParticipant() string {
	if x != nil {
		return x.FilterParticipant
	}
	return ""
}

type ListVettedPackagesResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Results []*ListVettedPackagesResponse_Result `protobuf:"bytes,1,rep,name=results,proto3" json:"results,omitempty"`
}

func (x *ListVettedPackagesResponse) Reset() {
	*x = ListVettedPackagesResponse{}
	mi := &file_com_digitalasset_canton_topology_admin_v30_topology_manager_read_service_proto_msgTypes[20]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListVettedPackagesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListVettedPackagesResponse) ProtoMessage() {}

func (x *ListVettedPackagesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_com_digitalasset_canton_topology_admin_v30_topology_manager_read_service_proto_msgTypes[20]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListVettedPackagesResponse.ProtoReflect.Descriptor instead.
func (*ListVettedPackagesResponse) Descriptor() ([]byte, []int) {
	return file_com_digitalasset_canton_topology_admin_v30_topology_manager_read_service_proto_rawDescGZIP(), []int{20}
}

func (x *ListVettedPackagesResponse) GetResults() []*ListVettedPackagesResponse_Result {
	if x != nil {
		return x.Results
	}
	return nil
}

type ListPartyToParticipantRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BaseQuery         *BaseQuery `protobuf:"bytes,1,opt,name=base_query,json=baseQuery,proto3" json:"base_query,omitempty"`
	FilterParty       string     `protobuf:"bytes,2,opt,name=filter_party,json=filterParty,proto3" json:"filter_party,omitempty"`
	FilterParticipant string     `protobuf:"bytes,3,opt,name=filter_participant,json=filterParticipant,proto3" json:"filter_participant,omitempty"`
}

func (x *ListPartyToParticipantRequest) Reset() {
	*x = ListPartyToParticipantRequest{}
	mi := &file_com_digitalasset_canton_topology_admin_v30_topology_manager_read_service_proto_msgTypes[21]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListPartyToParticipantRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListPartyToParticipantRequest) ProtoMessage() {}

func (x *ListPartyToParticipantRequest) ProtoReflect() protoreflect.Message {
	mi := &file_com_digitalasset_canton_topology_admin_v30_topology_manager_read_service_proto_msgTypes[21]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListPartyToParticipantRequest.ProtoReflect.Descriptor instead.
func (*ListPartyToParticipantRequest) Descriptor() ([]byte, []int) {
	return file_com_digitalasset_canton_topology_admin_v30_topology_manager_read_service_proto_rawDescGZIP(), []int{21}
}

func (x *ListPartyToParticipantRequest) GetBaseQuery() *BaseQuery {
	if x != nil {
		return x.BaseQuery
	}
	return nil
}

func (x *ListPartyToParticipantRequest) GetFilterParty() string {
	if x != nil {
		return x.FilterParty
	}
	return ""
}

func (x *ListPartyToParticipantRequest) GetFilterParticipant() string {
	if x != nil {
		return x.FilterParticipant
	}
	return ""
}

type ListPartyToParticipantResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Results []*ListPartyToParticipantResponse_Result `protobuf:"bytes,2,rep,name=results,proto3" json:"results,omitempty"`
}

func (x *ListPartyToParticipantResponse) Reset() {
	*x = ListPartyToParticipantResponse{}
	mi := &file_com_digitalasset_canton_topology_admin_v30_topology_manager_read_service_proto_msgTypes[22]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListPartyToParticipantResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListPartyToParticipantResponse) ProtoMessage() {}

func (x *ListPartyToParticipantResponse) ProtoReflect() protoreflect.Message {
	mi := &file_com_digitalasset_canton_topology_admin_v30_topology_manager_read_service_proto_msgTypes[22]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListPartyToParticipantResponse.ProtoReflect.Descriptor instead.
func (*ListPartyToParticipantResponse) Descriptor() ([]byte, []int) {
	return file_com_digitalasset_canton_topology_admin_v30_topology_manager_read_service_proto_rawDescGZIP(), []int{22}
}

func (x *ListPartyToParticipantResponse) GetResults() []*ListPartyToParticipantResponse_Result {
	if x != nil {
		return x.Results
	}
	return nil
}

type ListAuthorityOfRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BaseQuery   *BaseQuery `protobuf:"bytes,1,opt,name=base_query,json=baseQuery,proto3" json:"base_query,omitempty"`
	FilterParty string     `protobuf:"bytes,2,opt,name=filter_party,json=filterParty,proto3" json:"filter_party,omitempty"`
}

func (x *ListAuthorityOfRequest) Reset() {
	*x = ListAuthorityOfRequest{}
	mi := &file_com_digitalasset_canton_topology_admin_v30_topology_manager_read_service_proto_msgTypes[23]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListAuthorityOfRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListAuthorityOfRequest) ProtoMessage() {}

func (x *ListAuthorityOfRequest) ProtoReflect() protoreflect.Message {
	mi := &file_com_digitalasset_canton_topology_admin_v30_topology_manager_read_service_proto_msgTypes[23]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListAuthorityOfRequest.ProtoReflect.Descriptor instead.
func (*ListAuthorityOfRequest) Descriptor() ([]byte, []int) {
	return file_com_digitalasset_canton_topology_admin_v30_topology_manager_read_service_proto_rawDescGZIP(), []int{23}
}

func (x *ListAuthorityOfRequest) GetBaseQuery() *BaseQuery {
	if x != nil {
		return x.BaseQuery
	}
	return nil
}

func (x *ListAuthorityOfRequest) GetFilterParty() string {
	if x != nil {
		return x.FilterParty
	}
	return ""
}

type ListAuthorityOfResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Results []*ListAuthorityOfResponse_Result `protobuf:"bytes,2,rep,name=results,proto3" json:"results,omitempty"`
}

func (x *ListAuthorityOfResponse) Reset() {
	*x = ListAuthorityOfResponse{}
	mi := &file_com_digitalasset_canton_topology_admin_v30_topology_manager_read_service_proto_msgTypes[24]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListAuthorityOfResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListAuthorityOfResponse) ProtoMessage() {}

func (x *ListAuthorityOfResponse) ProtoReflect() protoreflect.Message {
	mi := &file_com_digitalasset_canton_topology_admin_v30_topology_manager_read_service_proto_msgTypes[24]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListAuthorityOfResponse.ProtoReflect.Descriptor instead.
func (*ListAuthorityOfResponse) Descriptor() ([]byte, []int) {
	return file_com_digitalasset_canton_topology_admin_v30_topology_manager_read_service_proto_rawDescGZIP(), []int{24}
}

func (x *ListAuthorityOfResponse) GetResults() []*ListAuthorityOfResponse_Result {
	if x != nil {
		return x.Results
	}
	return nil
}

type ListDomainParametersStateRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BaseQuery    *BaseQuery `protobuf:"bytes,1,opt,name=base_query,json=baseQuery,proto3" json:"base_query,omitempty"`
	FilterDomain string     `protobuf:"bytes,2,opt,name=filter_domain,json=filterDomain,proto3" json:"filter_domain,omitempty"`
}

func (x *ListDomainParametersStateRequest) Reset() {
	*x = ListDomainParametersStateRequest{}
	mi := &file_com_digitalasset_canton_topology_admin_v30_topology_manager_read_service_proto_msgTypes[25]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListDomainParametersStateRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListDomainParametersStateRequest) ProtoMessage() {}

func (x *ListDomainParametersStateRequest) ProtoReflect() protoreflect.Message {
	mi := &file_com_digitalasset_canton_topology_admin_v30_topology_manager_read_service_proto_msgTypes[25]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListDomainParametersStateRequest.ProtoReflect.Descriptor instead.
func (*ListDomainParametersStateRequest) Descriptor() ([]byte, []int) {
	return file_com_digitalasset_canton_topology_admin_v30_topology_manager_read_service_proto_rawDescGZIP(), []int{25}
}

func (x *ListDomainParametersStateRequest) GetBaseQuery() *BaseQuery {
	if x != nil {
		return x.BaseQuery
	}
	return nil
}

func (x *ListDomainParametersStateRequest) GetFilterDomain() string {
	if x != nil {
		return x.FilterDomain
	}
	return ""
}

type ListDomainParametersStateResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Results []*ListDomainParametersStateResponse_Result `protobuf:"bytes,1,rep,name=results,proto3" json:"results,omitempty"`
}

func (x *ListDomainParametersStateResponse) Reset() {
	*x = ListDomainParametersStateResponse{}
	mi := &file_com_digitalasset_canton_topology_admin_v30_topology_manager_read_service_proto_msgTypes[26]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListDomainParametersStateResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListDomainParametersStateResponse) ProtoMessage() {}

func (x *ListDomainParametersStateResponse) ProtoReflect() protoreflect.Message {
	mi := &file_com_digitalasset_canton_topology_admin_v30_topology_manager_read_service_proto_msgTypes[26]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListDomainParametersStateResponse.ProtoReflect.Descriptor instead.
func (*ListDomainParametersStateResponse) Descriptor() ([]byte, []int) {
	return file_com_digitalasset_canton_topology_admin_v30_topology_manager_read_service_proto_rawDescGZIP(), []int{26}
}

func (x *ListDomainParametersStateResponse) GetResults() []*ListDomainParametersStateResponse_Result {
	if x != nil {
		return x.Results
	}
	return nil
}

type ListMediatorDomainStateRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BaseQuery    *BaseQuery `protobuf:"bytes,1,opt,name=base_query,json=baseQuery,proto3" json:"base_query,omitempty"`
	FilterDomain string     `protobuf:"bytes,2,opt,name=filter_domain,json=filterDomain,proto3" json:"filter_domain,omitempty"`
}

func (x *ListMediatorDomainStateRequest) Reset() {
	*x = ListMediatorDomainStateRequest{}
	mi := &file_com_digitalasset_canton_topology_admin_v30_topology_manager_read_service_proto_msgTypes[27]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListMediatorDomainStateRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListMediatorDomainStateRequest) ProtoMessage() {}

func (x *ListMediatorDomainStateRequest) ProtoReflect() protoreflect.Message {
	mi := &file_com_digitalasset_canton_topology_admin_v30_topology_manager_read_service_proto_msgTypes[27]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListMediatorDomainStateRequest.ProtoReflect.Descriptor instead.
func (*ListMediatorDomainStateRequest) Descriptor() ([]byte, []int) {
	return file_com_digitalasset_canton_topology_admin_v30_topology_manager_read_service_proto_rawDescGZIP(), []int{27}
}

func (x *ListMediatorDomainStateRequest) GetBaseQuery() *BaseQuery {
	if x != nil {
		return x.BaseQuery
	}
	return nil
}

func (x *ListMediatorDomainStateRequest) GetFilterDomain() string {
	if x != nil {
		return x.FilterDomain
	}
	return ""
}

type ListMediatorDomainStateResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Results []*ListMediatorDomainStateResponse_Result `protobuf:"bytes,1,rep,name=results,proto3" json:"results,omitempty"`
}

func (x *ListMediatorDomainStateResponse) Reset() {
	*x = ListMediatorDomainStateResponse{}
	mi := &file_com_digitalasset_canton_topology_admin_v30_topology_manager_read_service_proto_msgTypes[28]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListMediatorDomainStateResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListMediatorDomainStateResponse) ProtoMessage() {}

func (x *ListMediatorDomainStateResponse) ProtoReflect() protoreflect.Message {
	mi := &file_com_digitalasset_canton_topology_admin_v30_topology_manager_read_service_proto_msgTypes[28]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListMediatorDomainStateResponse.ProtoReflect.Descriptor instead.
func (*ListMediatorDomainStateResponse) Descriptor() ([]byte, []int) {
	return file_com_digitalasset_canton_topology_admin_v30_topology_manager_read_service_proto_rawDescGZIP(), []int{28}
}

func (x *ListMediatorDomainStateResponse) GetResults() []*ListMediatorDomainStateResponse_Result {
	if x != nil {
		return x.Results
	}
	return nil
}

type ListSequencerDomainStateRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BaseQuery    *BaseQuery `protobuf:"bytes,1,opt,name=base_query,json=baseQuery,proto3" json:"base_query,omitempty"`
	FilterDomain string     `protobuf:"bytes,2,opt,name=filter_domain,json=filterDomain,proto3" json:"filter_domain,omitempty"`
}

func (x *ListSequencerDomainStateRequest) Reset() {
	*x = ListSequencerDomainStateRequest{}
	mi := &file_com_digitalasset_canton_topology_admin_v30_topology_manager_read_service_proto_msgTypes[29]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListSequencerDomainStateRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListSequencerDomainStateRequest) ProtoMessage() {}

func (x *ListSequencerDomainStateRequest) ProtoReflect() protoreflect.Message {
	mi := &file_com_digitalasset_canton_topology_admin_v30_topology_manager_read_service_proto_msgTypes[29]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListSequencerDomainStateRequest.ProtoReflect.Descriptor instead.
func (*ListSequencerDomainStateRequest) Descriptor() ([]byte, []int) {
	return file_com_digitalasset_canton_topology_admin_v30_topology_manager_read_service_proto_rawDescGZIP(), []int{29}
}

func (x *ListSequencerDomainStateRequest) GetBaseQuery() *BaseQuery {
	if x != nil {
		return x.BaseQuery
	}
	return nil
}

func (x *ListSequencerDomainStateRequest) GetFilterDomain() string {
	if x != nil {
		return x.FilterDomain
	}
	return ""
}

type ListSequencerDomainStateResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Results []*ListSequencerDomainStateResponse_Result `protobuf:"bytes,1,rep,name=results,proto3" json:"results,omitempty"`
}

func (x *ListSequencerDomainStateResponse) Reset() {
	*x = ListSequencerDomainStateResponse{}
	mi := &file_com_digitalasset_canton_topology_admin_v30_topology_manager_read_service_proto_msgTypes[30]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListSequencerDomainStateResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListSequencerDomainStateResponse) ProtoMessage() {}

func (x *ListSequencerDomainStateResponse) ProtoReflect() protoreflect.Message {
	mi := &file_com_digitalasset_canton_topology_admin_v30_topology_manager_read_service_proto_msgTypes[30]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListSequencerDomainStateResponse.ProtoReflect.Descriptor instead.
func (*ListSequencerDomainStateResponse) Descriptor() ([]byte, []int) {
	return file_com_digitalasset_canton_topology_admin_v30_topology_manager_read_service_proto_rawDescGZIP(), []int{30}
}

func (x *ListSequencerDomainStateResponse) GetResults() []*ListSequencerDomainStateResponse_Result {
	if x != nil {
		return x.Results
	}
	return nil
}

type ListPurgeTopologyTransactionRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BaseQuery    *BaseQuery `protobuf:"bytes,1,opt,name=base_query,json=baseQuery,proto3" json:"base_query,omitempty"`
	FilterDomain string     `protobuf:"bytes,2,opt,name=filter_domain,json=filterDomain,proto3" json:"filter_domain,omitempty"`
}

func (x *ListPurgeTopologyTransactionRequest) Reset() {
	*x = ListPurgeTopologyTransactionRequest{}
	mi := &file_com_digitalasset_canton_topology_admin_v30_topology_manager_read_service_proto_msgTypes[31]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListPurgeTopologyTransactionRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListPurgeTopologyTransactionRequest) ProtoMessage() {}

func (x *ListPurgeTopologyTransactionRequest) ProtoReflect() protoreflect.Message {
	mi := &file_com_digitalasset_canton_topology_admin_v30_topology_manager_read_service_proto_msgTypes[31]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListPurgeTopologyTransactionRequest.ProtoReflect.Descriptor instead.
func (*ListPurgeTopologyTransactionRequest) Descriptor() ([]byte, []int) {
	return file_com_digitalasset_canton_topology_admin_v30_topology_manager_read_service_proto_rawDescGZIP(), []int{31}
}

func (x *ListPurgeTopologyTransactionRequest) GetBaseQuery() *BaseQuery {
	if x != nil {
		return x.BaseQuery
	}
	return nil
}

func (x *ListPurgeTopologyTransactionRequest) GetFilterDomain() string {
	if x != nil {
		return x.FilterDomain
	}
	return ""
}

type ListPurgeTopologyTransactionResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Results []*ListPurgeTopologyTransactionResponse_Result `protobuf:"bytes,1,rep,name=results,proto3" json:"results,omitempty"`
}

func (x *ListPurgeTopologyTransactionResponse) Reset() {
	*x = ListPurgeTopologyTransactionResponse{}
	mi := &file_com_digitalasset_canton_topology_admin_v30_topology_manager_read_service_proto_msgTypes[32]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListPurgeTopologyTransactionResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListPurgeTopologyTransactionResponse) ProtoMessage() {}

func (x *ListPurgeTopologyTransactionResponse) ProtoReflect() protoreflect.Message {
	mi := &file_com_digitalasset_canton_topology_admin_v30_topology_manager_read_service_proto_msgTypes[32]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListPurgeTopologyTransactionResponse.ProtoReflect.Descriptor instead.
func (*ListPurgeTopologyTransactionResponse) Descriptor() ([]byte, []int) {
	return file_com_digitalasset_canton_topology_admin_v30_topology_manager_read_service_proto_rawDescGZIP(), []int{32}
}

func (x *ListPurgeTopologyTransactionResponse) GetResults() []*ListPurgeTopologyTransactionResponse_Result {
	if x != nil {
		return x.Results
	}
	return nil
}

type ListAvailableStoresRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *ListAvailableStoresRequest) Reset() {
	*x = ListAvailableStoresRequest{}
	mi := &file_com_digitalasset_canton_topology_admin_v30_topology_manager_read_service_proto_msgTypes[33]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListAvailableStoresRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListAvailableStoresRequest) ProtoMessage() {}

func (x *ListAvailableStoresRequest) ProtoReflect() protoreflect.Message {
	mi := &file_com_digitalasset_canton_topology_admin_v30_topology_manager_read_service_proto_msgTypes[33]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListAvailableStoresRequest.ProtoReflect.Descriptor instead.
func (*ListAvailableStoresRequest) Descriptor() ([]byte, []int) {
	return file_com_digitalasset_canton_topology_admin_v30_topology_manager_read_service_proto_rawDescGZIP(), []int{33}
}

type ListAvailableStoresResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	StoreIds []string `protobuf:"bytes,1,rep,name=store_ids,json=storeIds,proto3" json:"store_ids,omitempty"`
}

func (x *ListAvailableStoresResponse) Reset() {
	*x = ListAvailableStoresResponse{}
	mi := &file_com_digitalasset_canton_topology_admin_v30_topology_manager_read_service_proto_msgTypes[34]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListAvailableStoresResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListAvailableStoresResponse) ProtoMessage() {}

func (x *ListAvailableStoresResponse) ProtoReflect() protoreflect.Message {
	mi := &file_com_digitalasset_canton_topology_admin_v30_topology_manager_read_service_proto_msgTypes[34]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListAvailableStoresResponse.ProtoReflect.Descriptor instead.
func (*ListAvailableStoresResponse) Descriptor() ([]byte, []int) {
	return file_com_digitalasset_canton_topology_admin_v30_topology_manager_read_service_proto_rawDescGZIP(), []int{34}
}

func (x *ListAvailableStoresResponse) GetStoreIds() []string {
	if x != nil {
		return x.StoreIds
	}
	return nil
}

type ListAllRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BaseQuery       *BaseQuery `protobuf:"bytes,1,opt,name=base_query,json=baseQuery,proto3" json:"base_query,omitempty"`
	ExcludeMappings []string   `protobuf:"bytes,2,rep,name=exclude_mappings,json=excludeMappings,proto3" json:"exclude_mappings,omitempty"`
	FilterNamespace string     `protobuf:"bytes,3,opt,name=filter_namespace,json=filterNamespace,proto3" json:"filter_namespace,omitempty"`
}

func (x *ListAllRequest) Reset() {
	*x = ListAllRequest{}
	mi := &file_com_digitalasset_canton_topology_admin_v30_topology_manager_read_service_proto_msgTypes[35]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListAllRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListAllRequest) ProtoMessage() {}

func (x *ListAllRequest) ProtoReflect() protoreflect.Message {
	mi := &file_com_digitalasset_canton_topology_admin_v30_topology_manager_read_service_proto_msgTypes[35]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListAllRequest.ProtoReflect.Descriptor instead.
func (*ListAllRequest) Descriptor() ([]byte, []int) {
	return file_com_digitalasset_canton_topology_admin_v30_topology_manager_read_service_proto_rawDescGZIP(), []int{35}
}

func (x *ListAllRequest) GetBaseQuery() *BaseQuery {
	if x != nil {
		return x.BaseQuery
	}
	return nil
}

func (x *ListAllRequest) GetExcludeMappings() []string {
	if x != nil {
		return x.ExcludeMappings
	}
	return nil
}

func (x *ListAllRequest) GetFilterNamespace() string {
	if x != nil {
		return x.FilterNamespace
	}
	return ""
}

type ExportTopologySnapshotRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BaseQuery       *BaseQuery `protobuf:"bytes,1,opt,name=base_query,json=baseQuery,proto3" json:"base_query,omitempty"`
	ExcludeMappings []string   `protobuf:"bytes,2,rep,name=exclude_mappings,json=excludeMappings,proto3" json:"exclude_mappings,omitempty"`
	FilterNamespace string     `protobuf:"bytes,3,opt,name=filter_namespace,json=filterNamespace,proto3" json:"filter_namespace,omitempty"`
}

func (x *ExportTopologySnapshotRequest) Reset() {
	*x = ExportTopologySnapshotRequest{}
	mi := &file_com_digitalasset_canton_topology_admin_v30_topology_manager_read_service_proto_msgTypes[36]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ExportTopologySnapshotRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExportTopologySnapshotRequest) ProtoMessage() {}

func (x *ExportTopologySnapshotRequest) ProtoReflect() protoreflect.Message {
	mi := &file_com_digitalasset_canton_topology_admin_v30_topology_manager_read_service_proto_msgTypes[36]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExportTopologySnapshotRequest.ProtoReflect.Descriptor instead.
func (*ExportTopologySnapshotRequest) Descriptor() ([]byte, []int) {
	return file_com_digitalasset_canton_topology_admin_v30_topology_manager_read_service_proto_rawDescGZIP(), []int{36}
}

func (x *ExportTopologySnapshotRequest) GetBaseQuery() *BaseQuery {
	if x != nil {
		return x.BaseQuery
	}
	return nil
}

func (x *ExportTopologySnapshotRequest) GetExcludeMappings() []string {
	if x != nil {
		return x.ExcludeMappings
	}
	return nil
}

func (x *ExportTopologySnapshotRequest) GetFilterNamespace() string {
	if x != nil {
		return x.FilterNamespace
	}
	return ""
}

type ListAllResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Result *TopologyTransactions `protobuf:"bytes,1,opt,name=result,proto3" json:"result,omitempty"`
}

func (x *ListAllResponse) Reset() {
	*x = ListAllResponse{}
	mi := &file_com_digitalasset_canton_topology_admin_v30_topology_manager_read_service_proto_msgTypes[37]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListAllResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListAllResponse) ProtoMessage() {}

func (x *ListAllResponse) ProtoReflect() protoreflect.Message {
	mi := &file_com_digitalasset_canton_topology_admin_v30_topology_manager_read_service_proto_msgTypes[37]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListAllResponse.ProtoReflect.Descriptor instead.
func (*ListAllResponse) Descriptor() ([]byte, []int) {
	return file_com_digitalasset_canton_topology_admin_v30_topology_manager_read_service_proto_rawDescGZIP(), []int{37}
}

func (x *ListAllResponse) GetResult() *TopologyTransactions {
	if x != nil {
		return x.Result
	}
	return nil
}

type ExportTopologySnapshotResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Result []byte `protobuf:"bytes,1,opt,name=result,proto3" json:"result,omitempty"`
}

func (x *ExportTopologySnapshotResponse) Reset() {
	*x = ExportTopologySnapshotResponse{}
	mi := &file_com_digitalasset_canton_topology_admin_v30_topology_manager_read_service_proto_msgTypes[38]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ExportTopologySnapshotResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExportTopologySnapshotResponse) ProtoMessage() {}

func (x *ExportTopologySnapshotResponse) ProtoReflect() protoreflect.Message {
	mi := &file_com_digitalasset_canton_topology_admin_v30_topology_manager_read_service_proto_msgTypes[38]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExportTopologySnapshotResponse.ProtoReflect.Descriptor instead.
func (*ExportTopologySnapshotResponse) Descriptor() ([]byte, []int) {
	return file_com_digitalasset_canton_topology_admin_v30_topology_manager_read_service_proto_rawDescGZIP(), []int{38}
}

func (x *ExportTopologySnapshotResponse) GetResult() []byte {
	if x != nil {
		return x.Result
	}
	return nil
}

type GenesisStateRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FilterDomainStore *Store                 `protobuf:"bytes,1,opt,name=filter_domain_store,json=filterDomainStore,proto3" json:"filter_domain_store,omitempty"`
	Timestamp         *timestamppb.Timestamp `protobuf:"bytes,2,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
}

func (x *GenesisStateRequest) Reset() {
	*x = GenesisStateRequest{}
	mi := &file_com_digitalasset_canton_topology_admin_v30_topology_manager_read_service_proto_msgTypes[39]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GenesisStateRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GenesisStateRequest) ProtoMessage() {}

func (x *GenesisStateRequest) ProtoReflect() protoreflect.Message {
	mi := &file_com_digitalasset_canton_topology_admin_v30_topology_manager_read_service_proto_msgTypes[39]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GenesisStateRequest.ProtoReflect.Descriptor instead.
func (*GenesisStateRequest) Descriptor() ([]byte, []int) {
	return file_com_digitalasset_canton_topology_admin_v30_topology_manager_read_service_proto_rawDescGZIP(), []int{39}
}

func (x *GenesisStateRequest) GetFilterDomainStore() *Store {
	if x != nil {
		return x.FilterDomainStore
	}
	return nil
}

func (x *GenesisStateRequest) GetTimestamp() *timestamppb.Timestamp {
	if x != nil {
		return x.Timestamp
	}
	return nil
}

type GenesisStateResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Chunk []byte `protobuf:"bytes,1,opt,name=chunk,proto3" json:"chunk,omitempty"`
}

func (x *GenesisStateResponse) Reset() {
	*x = GenesisStateResponse{}
	mi := &file_com_digitalasset_canton_topology_admin_v30_topology_manager_read_service_proto_msgTypes[40]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GenesisStateResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GenesisStateResponse) ProtoMessage() {}

func (x *GenesisStateResponse) ProtoReflect() protoreflect.Message {
	mi := &file_com_digitalasset_canton_topology_admin_v30_topology_manager_read_service_proto_msgTypes[40]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GenesisStateResponse.ProtoReflect.Descriptor instead.
func (*GenesisStateResponse) Descriptor() ([]byte, []int) {
	return file_com_digitalasset_canton_topology_admin_v30_topology_manager_read_service_proto_rawDescGZIP(), []int{40}
}

func (x *GenesisStateResponse) GetChunk() []byte {
	if x != nil {
		return x.Chunk
	}
	return nil
}

type BaseQuery_TimeRange struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	From  *timestamppb.Timestamp `protobuf:"bytes,1,opt,name=from,proto3" json:"from,omitempty"`
	Until *timestamppb.Timestamp `protobuf:"bytes,2,opt,name=until,proto3" json:"until,omitempty"`
}

func (x *BaseQuery_TimeRange) Reset() {
	*x = BaseQuery_TimeRange{}
	mi := &file_com_digitalasset_canton_topology_admin_v30_topology_manager_read_service_proto_msgTypes[41]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *BaseQuery_TimeRange) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BaseQuery_TimeRange) ProtoMessage() {}

func (x *BaseQuery_TimeRange) ProtoReflect() protoreflect.Message {
	mi := &file_com_digitalasset_canton_topology_admin_v30_topology_manager_read_service_proto_msgTypes[41]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BaseQuery_TimeRange.ProtoReflect.Descriptor instead.
func (*BaseQuery_TimeRange) Descriptor() ([]byte, []int) {
	return file_com_digitalasset_canton_topology_admin_v30_topology_manager_read_service_proto_rawDescGZIP(), []int{0, 0}
}

func (x *BaseQuery_TimeRange) GetFrom() *timestamppb.Timestamp {
	if x != nil {
		return x.From
	}
	return nil
}

func (x *BaseQuery_TimeRange) GetUntil() *timestamppb.Timestamp {
	if x != nil {
		return x.Until
	}
	return nil
}

type Store_Authorized struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *Store_Authorized) Reset() {
	*x = Store_Authorized{}
	mi := &file_com_digitalasset_canton_topology_admin_v30_topology_manager_read_service_proto_msgTypes[42]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Store_Authorized) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Store_Authorized) ProtoMessage() {}

func (x *Store_Authorized) ProtoReflect() protoreflect.Message {
	mi := &file_com_digitalasset_canton_topology_admin_v30_topology_manager_read_service_proto_msgTypes[42]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Store_Authorized.ProtoReflect.Descriptor instead.
func (*Store_Authorized) Descriptor() ([]byte, []int) {
	return file_com_digitalasset_canton_topology_admin_v30_topology_manager_read_service_proto_rawDescGZIP(), []int{1, 0}
}

type Store_Domain struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *Store_Domain) Reset() {
	*x = Store_Domain{}
	mi := &file_com_digitalasset_canton_topology_admin_v30_topology_manager_read_service_proto_msgTypes[43]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Store_Domain) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Store_Domain) ProtoMessage() {}

func (x *Store_Domain) ProtoReflect() protoreflect.Message {
	mi := &file_com_digitalasset_canton_topology_admin_v30_topology_manager_read_service_proto_msgTypes[43]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Store_Domain.ProtoReflect.Descriptor instead.
func (*Store_Domain) Descriptor() ([]byte, []int) {
	return file_com_digitalasset_canton_topology_admin_v30_topology_manager_read_service_proto_rawDescGZIP(), []int{1, 1}
}

func (x *Store_Domain) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

type ListNamespaceDelegationResponse_Result struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Context *BaseResult              `protobuf:"bytes,1,opt,name=context,proto3" json:"context,omitempty"`
	Item    *v30.NamespaceDelegation `protobuf:"bytes,2,opt,name=item,proto3" json:"item,omitempty"`
}

func (x *ListNamespaceDelegationResponse_Result) Reset() {
	*x = ListNamespaceDelegationResponse_Result{}
	mi := &file_com_digitalasset_canton_topology_admin_v30_topology_manager_read_service_proto_msgTypes[44]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListNamespaceDelegationResponse_Result) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListNamespaceDelegationResponse_Result) ProtoMessage() {}

func (x *ListNamespaceDelegationResponse_Result) ProtoReflect() protoreflect.Message {
	mi := &file_com_digitalasset_canton_topology_admin_v30_topology_manager_read_service_proto_msgTypes[44]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListNamespaceDelegationResponse_Result.ProtoReflect.Descriptor instead.
func (*ListNamespaceDelegationResponse_Result) Descriptor() ([]byte, []int) {
	return file_com_digitalasset_canton_topology_admin_v30_topology_manager_read_service_proto_rawDescGZIP(), []int{4, 0}
}

func (x *ListNamespaceDelegationResponse_Result) GetContext() *BaseResult {
	if x != nil {
		return x.Context
	}
	return nil
}

func (x *ListNamespaceDelegationResponse_Result) GetItem() *v30.NamespaceDelegation {
	if x != nil {
		return x.Item
	}
	return nil
}

type ListDecentralizedNamespaceDefinitionResponse_Result struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Context *BaseResult                           `protobuf:"bytes,1,opt,name=context,proto3" json:"context,omitempty"`
	Item    *v30.DecentralizedNamespaceDefinition `protobuf:"bytes,2,opt,name=item,proto3" json:"item,omitempty"`
}

func (x *ListDecentralizedNamespaceDefinitionResponse_Result) Reset() {
	*x = ListDecentralizedNamespaceDefinitionResponse_Result{}
	mi := &file_com_digitalasset_canton_topology_admin_v30_topology_manager_read_service_proto_msgTypes[45]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListDecentralizedNamespaceDefinitionResponse_Result) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListDecentralizedNamespaceDefinitionResponse_Result) ProtoMessage() {}

func (x *ListDecentralizedNamespaceDefinitionResponse_Result) ProtoReflect() protoreflect.Message {
	mi := &file_com_digitalasset_canton_topology_admin_v30_topology_manager_read_service_proto_msgTypes[45]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListDecentralizedNamespaceDefinitionResponse_Result.ProtoReflect.Descriptor instead.
func (*ListDecentralizedNamespaceDefinitionResponse_Result) Descriptor() ([]byte, []int) {
	return file_com_digitalasset_canton_topology_admin_v30_topology_manager_read_service_proto_rawDescGZIP(), []int{6, 0}
}

func (x *ListDecentralizedNamespaceDefinitionResponse_Result) GetContext() *BaseResult {
	if x != nil {
		return x.Context
	}
	return nil
}

func (x *ListDecentralizedNamespaceDefinitionResponse_Result) GetItem() *v30.DecentralizedNamespaceDefinition {
	if x != nil {
		return x.Item
	}
	return nil
}

type ListIdentifierDelegationResponse_Result struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Context *BaseResult               `protobuf:"bytes,1,opt,name=context,proto3" json:"context,omitempty"`
	Item    *v30.IdentifierDelegation `protobuf:"bytes,2,opt,name=item,proto3" json:"item,omitempty"`
}

func (x *ListIdentifierDelegationResponse_Result) Reset() {
	*x = ListIdentifierDelegationResponse_Result{}
	mi := &file_com_digitalasset_canton_topology_admin_v30_topology_manager_read_service_proto_msgTypes[46]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListIdentifierDelegationResponse_Result) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListIdentifierDelegationResponse_Result) ProtoMessage() {}

func (x *ListIdentifierDelegationResponse_Result) ProtoReflect() protoreflect.Message {
	mi := &file_com_digitalasset_canton_topology_admin_v30_topology_manager_read_service_proto_msgTypes[46]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListIdentifierDelegationResponse_Result.ProtoReflect.Descriptor instead.
func (*ListIdentifierDelegationResponse_Result) Descriptor() ([]byte, []int) {
	return file_com_digitalasset_canton_topology_admin_v30_topology_manager_read_service_proto_rawDescGZIP(), []int{8, 0}
}

func (x *ListIdentifierDelegationResponse_Result) GetContext() *BaseResult {
	if x != nil {
		return x.Context
	}
	return nil
}

func (x *ListIdentifierDelegationResponse_Result) GetItem() *v30.IdentifierDelegation {
	if x != nil {
		return x.Item
	}
	return nil
}

type ListOwnerToKeyMappingResponse_Result struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Context *BaseResult            `protobuf:"bytes,1,opt,name=context,proto3" json:"context,omitempty"`
	Item    *v30.OwnerToKeyMapping `protobuf:"bytes,2,opt,name=item,proto3" json:"item,omitempty"`
}

func (x *ListOwnerToKeyMappingResponse_Result) Reset() {
	*x = ListOwnerToKeyMappingResponse_Result{}
	mi := &file_com_digitalasset_canton_topology_admin_v30_topology_manager_read_service_proto_msgTypes[47]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListOwnerToKeyMappingResponse_Result) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListOwnerToKeyMappingResponse_Result) ProtoMessage() {}

func (x *ListOwnerToKeyMappingResponse_Result) ProtoReflect() protoreflect.Message {
	mi := &file_com_digitalasset_canton_topology_admin_v30_topology_manager_read_service_proto_msgTypes[47]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListOwnerToKeyMappingResponse_Result.ProtoReflect.Descriptor instead.
func (*ListOwnerToKeyMappingResponse_Result) Descriptor() ([]byte, []int) {
	return file_com_digitalasset_canton_topology_admin_v30_topology_manager_read_service_proto_rawDescGZIP(), []int{10, 0}
}

func (x *ListOwnerToKeyMappingResponse_Result) GetContext() *BaseResult {
	if x != nil {
		return x.Context
	}
	return nil
}

func (x *ListOwnerToKeyMappingResponse_Result) GetItem() *v30.OwnerToKeyMapping {
	if x != nil {
		return x.Item
	}
	return nil
}

type ListPartyToKeyMappingResponse_Result struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Context *BaseResult            `protobuf:"bytes,1,opt,name=context,proto3" json:"context,omitempty"`
	Item    *v30.PartyToKeyMapping `protobuf:"bytes,2,opt,name=item,proto3" json:"item,omitempty"`
}

func (x *ListPartyToKeyMappingResponse_Result) Reset() {
	*x = ListPartyToKeyMappingResponse_Result{}
	mi := &file_com_digitalasset_canton_topology_admin_v30_topology_manager_read_service_proto_msgTypes[48]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListPartyToKeyMappingResponse_Result) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListPartyToKeyMappingResponse_Result) ProtoMessage() {}

func (x *ListPartyToKeyMappingResponse_Result) ProtoReflect() protoreflect.Message {
	mi := &file_com_digitalasset_canton_topology_admin_v30_topology_manager_read_service_proto_msgTypes[48]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListPartyToKeyMappingResponse_Result.ProtoReflect.Descriptor instead.
func (*ListPartyToKeyMappingResponse_Result) Descriptor() ([]byte, []int) {
	return file_com_digitalasset_canton_topology_admin_v30_topology_manager_read_service_proto_rawDescGZIP(), []int{12, 0}
}

func (x *ListPartyToKeyMappingResponse_Result) GetContext() *BaseResult {
	if x != nil {
		return x.Context
	}
	return nil
}

func (x *ListPartyToKeyMappingResponse_Result) GetItem() *v30.PartyToKeyMapping {
	if x != nil {
		return x.Item
	}
	return nil
}

type ListDomainTrustCertificateResponse_Result struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Context *BaseResult                 `protobuf:"bytes,1,opt,name=context,proto3" json:"context,omitempty"`
	Item    *v30.DomainTrustCertificate `protobuf:"bytes,2,opt,name=item,proto3" json:"item,omitempty"`
}

func (x *ListDomainTrustCertificateResponse_Result) Reset() {
	*x = ListDomainTrustCertificateResponse_Result{}
	mi := &file_com_digitalasset_canton_topology_admin_v30_topology_manager_read_service_proto_msgTypes[49]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListDomainTrustCertificateResponse_Result) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListDomainTrustCertificateResponse_Result) ProtoMessage() {}

func (x *ListDomainTrustCertificateResponse_Result) ProtoReflect() protoreflect.Message {
	mi := &file_com_digitalasset_canton_topology_admin_v30_topology_manager_read_service_proto_msgTypes[49]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListDomainTrustCertificateResponse_Result.ProtoReflect.Descriptor instead.
func (*ListDomainTrustCertificateResponse_Result) Descriptor() ([]byte, []int) {
	return file_com_digitalasset_canton_topology_admin_v30_topology_manager_read_service_proto_rawDescGZIP(), []int{14, 0}
}

func (x *ListDomainTrustCertificateResponse_Result) GetContext() *BaseResult {
	if x != nil {
		return x.Context
	}
	return nil
}

func (x *ListDomainTrustCertificateResponse_Result) GetItem() *v30.DomainTrustCertificate {
	if x != nil {
		return x.Item
	}
	return nil
}

type ListParticipantDomainPermissionResponse_Result struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Context *BaseResult                      `protobuf:"bytes,1,opt,name=context,proto3" json:"context,omitempty"`
	Item    *v30.ParticipantDomainPermission `protobuf:"bytes,2,opt,name=item,proto3" json:"item,omitempty"`
}

func (x *ListParticipantDomainPermissionResponse_Result) Reset() {
	*x = ListParticipantDomainPermissionResponse_Result{}
	mi := &file_com_digitalasset_canton_topology_admin_v30_topology_manager_read_service_proto_msgTypes[50]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListParticipantDomainPermissionResponse_Result) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListParticipantDomainPermissionResponse_Result) ProtoMessage() {}

func (x *ListParticipantDomainPermissionResponse_Result) ProtoReflect() protoreflect.Message {
	mi := &file_com_digitalasset_canton_topology_admin_v30_topology_manager_read_service_proto_msgTypes[50]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListParticipantDomainPermissionResponse_Result.ProtoReflect.Descriptor instead.
func (*ListParticipantDomainPermissionResponse_Result) Descriptor() ([]byte, []int) {
	return file_com_digitalasset_canton_topology_admin_v30_topology_manager_read_service_proto_rawDescGZIP(), []int{16, 0}
}

func (x *ListParticipantDomainPermissionResponse_Result) GetContext() *BaseResult {
	if x != nil {
		return x.Context
	}
	return nil
}

func (x *ListParticipantDomainPermissionResponse_Result) GetItem() *v30.ParticipantDomainPermission {
	if x != nil {
		return x.Item
	}
	return nil
}

type ListPartyHostingLimitsResponse_Result struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Context *BaseResult             `protobuf:"bytes,1,opt,name=context,proto3" json:"context,omitempty"`
	Item    *v30.PartyHostingLimits `protobuf:"bytes,2,opt,name=item,proto3" json:"item,omitempty"`
}

func (x *ListPartyHostingLimitsResponse_Result) Reset() {
	*x = ListPartyHostingLimitsResponse_Result{}
	mi := &file_com_digitalasset_canton_topology_admin_v30_topology_manager_read_service_proto_msgTypes[51]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListPartyHostingLimitsResponse_Result) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListPartyHostingLimitsResponse_Result) ProtoMessage() {}

func (x *ListPartyHostingLimitsResponse_Result) ProtoReflect() protoreflect.Message {
	mi := &file_com_digitalasset_canton_topology_admin_v30_topology_manager_read_service_proto_msgTypes[51]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListPartyHostingLimitsResponse_Result.ProtoReflect.Descriptor instead.
func (*ListPartyHostingLimitsResponse_Result) Descriptor() ([]byte, []int) {
	return file_com_digitalasset_canton_topology_admin_v30_topology_manager_read_service_proto_rawDescGZIP(), []int{18, 0}
}

func (x *ListPartyHostingLimitsResponse_Result) GetContext() *BaseResult {
	if x != nil {
		return x.Context
	}
	return nil
}

func (x *ListPartyHostingLimitsResponse_Result) GetItem() *v30.PartyHostingLimits {
	if x != nil {
		return x.Item
	}
	return nil
}

type ListVettedPackagesResponse_Result struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Context *BaseResult         `protobuf:"bytes,1,opt,name=context,proto3" json:"context,omitempty"`
	Item    *v30.VettedPackages `protobuf:"bytes,2,opt,name=item,proto3" json:"item,omitempty"`
}

func (x *ListVettedPackagesResponse_Result) Reset() {
	*x = ListVettedPackagesResponse_Result{}
	mi := &file_com_digitalasset_canton_topology_admin_v30_topology_manager_read_service_proto_msgTypes[52]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListVettedPackagesResponse_Result) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListVettedPackagesResponse_Result) ProtoMessage() {}

func (x *ListVettedPackagesResponse_Result) ProtoReflect() protoreflect.Message {
	mi := &file_com_digitalasset_canton_topology_admin_v30_topology_manager_read_service_proto_msgTypes[52]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListVettedPackagesResponse_Result.ProtoReflect.Descriptor instead.
func (*ListVettedPackagesResponse_Result) Descriptor() ([]byte, []int) {
	return file_com_digitalasset_canton_topology_admin_v30_topology_manager_read_service_proto_rawDescGZIP(), []int{20, 0}
}

func (x *ListVettedPackagesResponse_Result) GetContext() *BaseResult {
	if x != nil {
		return x.Context
	}
	return nil
}

func (x *ListVettedPackagesResponse_Result) GetItem() *v30.VettedPackages {
	if x != nil {
		return x.Item
	}
	return nil
}

type ListPartyToParticipantResponse_Result struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Context *BaseResult             `protobuf:"bytes,1,opt,name=context,proto3" json:"context,omitempty"`
	Item    *v30.PartyToParticipant `protobuf:"bytes,2,opt,name=item,proto3" json:"item,omitempty"`
}

func (x *ListPartyToParticipantResponse_Result) Reset() {
	*x = ListPartyToParticipantResponse_Result{}
	mi := &file_com_digitalasset_canton_topology_admin_v30_topology_manager_read_service_proto_msgTypes[53]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListPartyToParticipantResponse_Result) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListPartyToParticipantResponse_Result) ProtoMessage() {}

func (x *ListPartyToParticipantResponse_Result) ProtoReflect() protoreflect.Message {
	mi := &file_com_digitalasset_canton_topology_admin_v30_topology_manager_read_service_proto_msgTypes[53]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListPartyToParticipantResponse_Result.ProtoReflect.Descriptor instead.
func (*ListPartyToParticipantResponse_Result) Descriptor() ([]byte, []int) {
	return file_com_digitalasset_canton_topology_admin_v30_topology_manager_read_service_proto_rawDescGZIP(), []int{22, 0}
}

func (x *ListPartyToParticipantResponse_Result) GetContext() *BaseResult {
	if x != nil {
		return x.Context
	}
	return nil
}

func (x *ListPartyToParticipantResponse_Result) GetItem() *v30.PartyToParticipant {
	if x != nil {
		return x.Item
	}
	return nil
}

type ListAuthorityOfResponse_Result struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Context *BaseResult      `protobuf:"bytes,1,opt,name=context,proto3" json:"context,omitempty"`
	Item    *v30.AuthorityOf `protobuf:"bytes,2,opt,name=item,proto3" json:"item,omitempty"`
}

func (x *ListAuthorityOfResponse_Result) Reset() {
	*x = ListAuthorityOfResponse_Result{}
	mi := &file_com_digitalasset_canton_topology_admin_v30_topology_manager_read_service_proto_msgTypes[54]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListAuthorityOfResponse_Result) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListAuthorityOfResponse_Result) ProtoMessage() {}

func (x *ListAuthorityOfResponse_Result) ProtoReflect() protoreflect.Message {
	mi := &file_com_digitalasset_canton_topology_admin_v30_topology_manager_read_service_proto_msgTypes[54]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListAuthorityOfResponse_Result.ProtoReflect.Descriptor instead.
func (*ListAuthorityOfResponse_Result) Descriptor() ([]byte, []int) {
	return file_com_digitalasset_canton_topology_admin_v30_topology_manager_read_service_proto_rawDescGZIP(), []int{24, 0}
}

func (x *ListAuthorityOfResponse_Result) GetContext() *BaseResult {
	if x != nil {
		return x.Context
	}
	return nil
}

func (x *ListAuthorityOfResponse_Result) GetItem() *v30.AuthorityOf {
	if x != nil {
		return x.Item
	}
	return nil
}

type ListDomainParametersStateResponse_Result struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Context *BaseResult                  `protobuf:"bytes,1,opt,name=context,proto3" json:"context,omitempty"`
	Item    *v30.DynamicDomainParameters `protobuf:"bytes,2,opt,name=item,proto3" json:"item,omitempty"`
}

func (x *ListDomainParametersStateResponse_Result) Reset() {
	*x = ListDomainParametersStateResponse_Result{}
	mi := &file_com_digitalasset_canton_topology_admin_v30_topology_manager_read_service_proto_msgTypes[55]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListDomainParametersStateResponse_Result) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListDomainParametersStateResponse_Result) ProtoMessage() {}

func (x *ListDomainParametersStateResponse_Result) ProtoReflect() protoreflect.Message {
	mi := &file_com_digitalasset_canton_topology_admin_v30_topology_manager_read_service_proto_msgTypes[55]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListDomainParametersStateResponse_Result.ProtoReflect.Descriptor instead.
func (*ListDomainParametersStateResponse_Result) Descriptor() ([]byte, []int) {
	return file_com_digitalasset_canton_topology_admin_v30_topology_manager_read_service_proto_rawDescGZIP(), []int{26, 0}
}

func (x *ListDomainParametersStateResponse_Result) GetContext() *BaseResult {
	if x != nil {
		return x.Context
	}
	return nil
}

func (x *ListDomainParametersStateResponse_Result) GetItem() *v30.DynamicDomainParameters {
	if x != nil {
		return x.Item
	}
	return nil
}

type ListMediatorDomainStateResponse_Result struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Context *BaseResult              `protobuf:"bytes,1,opt,name=context,proto3" json:"context,omitempty"`
	Item    *v30.MediatorDomainState `protobuf:"bytes,2,opt,name=item,proto3" json:"item,omitempty"`
}

func (x *ListMediatorDomainStateResponse_Result) Reset() {
	*x = ListMediatorDomainStateResponse_Result{}
	mi := &file_com_digitalasset_canton_topology_admin_v30_topology_manager_read_service_proto_msgTypes[56]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListMediatorDomainStateResponse_Result) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListMediatorDomainStateResponse_Result) ProtoMessage() {}

func (x *ListMediatorDomainStateResponse_Result) ProtoReflect() protoreflect.Message {
	mi := &file_com_digitalasset_canton_topology_admin_v30_topology_manager_read_service_proto_msgTypes[56]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListMediatorDomainStateResponse_Result.ProtoReflect.Descriptor instead.
func (*ListMediatorDomainStateResponse_Result) Descriptor() ([]byte, []int) {
	return file_com_digitalasset_canton_topology_admin_v30_topology_manager_read_service_proto_rawDescGZIP(), []int{28, 0}
}

func (x *ListMediatorDomainStateResponse_Result) GetContext() *BaseResult {
	if x != nil {
		return x.Context
	}
	return nil
}

func (x *ListMediatorDomainStateResponse_Result) GetItem() *v30.MediatorDomainState {
	if x != nil {
		return x.Item
	}
	return nil
}

type ListSequencerDomainStateResponse_Result struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Context *BaseResult               `protobuf:"bytes,1,opt,name=context,proto3" json:"context,omitempty"`
	Item    *v30.SequencerDomainState `protobuf:"bytes,2,opt,name=item,proto3" json:"item,omitempty"`
}

func (x *ListSequencerDomainStateResponse_Result) Reset() {
	*x = ListSequencerDomainStateResponse_Result{}
	mi := &file_com_digitalasset_canton_topology_admin_v30_topology_manager_read_service_proto_msgTypes[57]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListSequencerDomainStateResponse_Result) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListSequencerDomainStateResponse_Result) ProtoMessage() {}

func (x *ListSequencerDomainStateResponse_Result) ProtoReflect() protoreflect.Message {
	mi := &file_com_digitalasset_canton_topology_admin_v30_topology_manager_read_service_proto_msgTypes[57]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListSequencerDomainStateResponse_Result.ProtoReflect.Descriptor instead.
func (*ListSequencerDomainStateResponse_Result) Descriptor() ([]byte, []int) {
	return file_com_digitalasset_canton_topology_admin_v30_topology_manager_read_service_proto_rawDescGZIP(), []int{30, 0}
}

func (x *ListSequencerDomainStateResponse_Result) GetContext() *BaseResult {
	if x != nil {
		return x.Context
	}
	return nil
}

func (x *ListSequencerDomainStateResponse_Result) GetItem() *v30.SequencerDomainState {
	if x != nil {
		return x.Item
	}
	return nil
}

type ListPurgeTopologyTransactionResponse_Result struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Context *BaseResult                   `protobuf:"bytes,1,opt,name=context,proto3" json:"context,omitempty"`
	Item    *v30.PurgeTopologyTransaction `protobuf:"bytes,2,opt,name=item,proto3" json:"item,omitempty"`
}

func (x *ListPurgeTopologyTransactionResponse_Result) Reset() {
	*x = ListPurgeTopologyTransactionResponse_Result{}
	mi := &file_com_digitalasset_canton_topology_admin_v30_topology_manager_read_service_proto_msgTypes[58]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListPurgeTopologyTransactionResponse_Result) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListPurgeTopologyTransactionResponse_Result) ProtoMessage() {}

func (x *ListPurgeTopologyTransactionResponse_Result) ProtoReflect() protoreflect.Message {
	mi := &file_com_digitalasset_canton_topology_admin_v30_topology_manager_read_service_proto_msgTypes[58]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListPurgeTopologyTransactionResponse_Result.ProtoReflect.Descriptor instead.
func (*ListPurgeTopologyTransactionResponse_Result) Descriptor() ([]byte, []int) {
	return file_com_digitalasset_canton_topology_admin_v30_topology_manager_read_service_proto_rawDescGZIP(), []int{32, 0}
}

func (x *ListPurgeTopologyTransactionResponse_Result) GetContext() *BaseResult {
	if x != nil {
		return x.Context
	}
	return nil
}

func (x *ListPurgeTopologyTransactionResponse_Result) GetItem() *v30.PurgeTopologyTransaction {
	if x != nil {
		return x.Item
	}
	return nil
}

var File_com_digitalasset_canton_topology_admin_v30_topology_manager_read_service_proto protoreflect.FileDescriptor

var file_com_digitalasset_canton_topology_admin_v30_topology_manager_read_service_proto_rawDesc = []byte{
	0x0a, 0x4e, 0x63, 0x6f, 0x6d, 0x2f, 0x64, 0x69, 0x67, 0x69, 0x74, 0x61, 0x6c, 0x61, 0x73, 0x73,
	0x65, 0x74, 0x2f, 0x63, 0x61, 0x6e, 0x74, 0x6f, 0x6e, 0x2f, 0x74, 0x6f, 0x70, 0x6f, 0x6c, 0x6f,
	0x67, 0x79, 0x2f, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2f, 0x76, 0x33, 0x30, 0x2f, 0x74, 0x6f, 0x70,
	0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x5f, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x5f, 0x72, 0x65,
	0x61, 0x64, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x12, 0x2a, 0x63, 0x6f, 0x6d, 0x2e, 0x64, 0x69, 0x67, 0x69, 0x74, 0x61, 0x6c, 0x61, 0x73, 0x73,
	0x65, 0x74, 0x2e, 0x63, 0x61, 0x6e, 0x74, 0x6f, 0x6e, 0x2e, 0x74, 0x6f, 0x70, 0x6f, 0x6c, 0x6f,
	0x67, 0x79, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x76, 0x33, 0x30, 0x1a, 0x3c, 0x63, 0x6f,
	0x6d, 0x2f, 0x64, 0x69, 0x67, 0x69, 0x74, 0x61, 0x6c, 0x61, 0x73, 0x73, 0x65, 0x74, 0x2f, 0x63,
	0x61, 0x6e, 0x74, 0x6f, 0x6e, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2f, 0x76,
	0x33, 0x30, 0x2f, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x5f, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x65,
	0x74, 0x65, 0x72, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x33, 0x63, 0x6f, 0x6d, 0x2f,
	0x64, 0x69, 0x67, 0x69, 0x74, 0x61, 0x6c, 0x61, 0x73, 0x73, 0x65, 0x74, 0x2f, 0x63, 0x61, 0x6e,
	0x74, 0x6f, 0x6e, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2f, 0x76, 0x33, 0x30,
	0x2f, 0x74, 0x6f, 0x70, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a,
	0x3d, 0x63, 0x6f, 0x6d, 0x2f, 0x64, 0x69, 0x67, 0x69, 0x74, 0x61, 0x6c, 0x61, 0x73, 0x73, 0x65,
	0x74, 0x2f, 0x63, 0x61, 0x6e, 0x74, 0x6f, 0x6e, 0x2f, 0x74, 0x6f, 0x70, 0x6f, 0x6c, 0x6f, 0x67,
	0x79, 0x2f, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2f, 0x76, 0x33, 0x30, 0x2f, 0x74, 0x6f, 0x70, 0x6f,
	0x6c, 0x6f, 0x67, 0x79, 0x5f, 0x65, 0x78, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1b,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f,
	0x65, 0x6d, 0x70, 0x74, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1f, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d,
	0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x77, 0x72,
	0x61, 0x70, 0x70, 0x65, 0x72, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x9e, 0x05, 0x0a,
	0x09, 0x42, 0x61, 0x73, 0x65, 0x51, 0x75, 0x65, 0x72, 0x79, 0x12, 0x54, 0x0a, 0x0c, 0x66, 0x69,
	0x6c, 0x74, 0x65, 0x72, 0x5f, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x31, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x64, 0x69, 0x67, 0x69, 0x74, 0x61, 0x6c, 0x61, 0x73,
	0x73, 0x65, 0x74, 0x2e, 0x63, 0x61, 0x6e, 0x74, 0x6f, 0x6e, 0x2e, 0x74, 0x6f, 0x70, 0x6f, 0x6c,
	0x6f, 0x67, 0x79, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x76, 0x33, 0x30, 0x2e, 0x53, 0x74,
	0x6f, 0x72, 0x65, 0x52, 0x0b, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x53, 0x74, 0x6f, 0x72, 0x65,
	0x12, 0x1c, 0x0a, 0x09, 0x70, 0x72, 0x6f, 0x70, 0x6f, 0x73, 0x61, 0x6c, 0x73, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x70, 0x6f, 0x73, 0x61, 0x6c, 0x73, 0x12, 0x5a,
	0x0a, 0x09, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x3c, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x64, 0x69, 0x67, 0x69, 0x74, 0x61, 0x6c, 0x61,
	0x73, 0x73, 0x65, 0x74, 0x2e, 0x63, 0x61, 0x6e, 0x74, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x76, 0x33, 0x30, 0x2e, 0x45, 0x6e, 0x75, 0x6d, 0x73, 0x2e, 0x54,
	0x6f, 0x70, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x4f, 0x70, 0x52,
	0x09, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x38, 0x0a, 0x08, 0x73, 0x6e,
	0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54,
	0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x48, 0x00, 0x52, 0x08, 0x73, 0x6e, 0x61, 0x70,
	0x73, 0x68, 0x6f, 0x74, 0x12, 0x37, 0x0a, 0x0a, 0x68, 0x65, 0x61, 0x64, 0x5f, 0x73, 0x74, 0x61,
	0x74, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79,
	0x48, 0x00, 0x52, 0x09, 0x68, 0x65, 0x61, 0x64, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x57, 0x0a,
	0x05, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3f, 0x2e, 0x63,
	0x6f, 0x6d, 0x2e, 0x64, 0x69, 0x67, 0x69, 0x74, 0x61, 0x6c, 0x61, 0x73, 0x73, 0x65, 0x74, 0x2e,
	0x63, 0x61, 0x6e, 0x74, 0x6f, 0x6e, 0x2e, 0x74, 0x6f, 0x70, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x2e,
	0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x76, 0x33, 0x30, 0x2e, 0x42, 0x61, 0x73, 0x65, 0x51, 0x75,
	0x65, 0x72, 0x79, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x48, 0x00, 0x52,
	0x05, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x12, 0x2a, 0x0a, 0x11, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72,
	0x5f, 0x73, 0x69, 0x67, 0x6e, 0x65, 0x64, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x08, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0f, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x53, 0x69, 0x67, 0x6e, 0x65, 0x64, 0x4b,
	0x65, 0x79, 0x12, 0x46, 0x0a, 0x10, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x5f, 0x76,
	0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x49,
	0x6e, 0x74, 0x33, 0x32, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0f, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x63, 0x6f, 0x6c, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x1a, 0x6d, 0x0a, 0x09, 0x54, 0x69,
	0x6d, 0x65, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x12, 0x2e, 0x0a, 0x04, 0x66, 0x72, 0x6f, 0x6d, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d,
	0x70, 0x52, 0x04, 0x66, 0x72, 0x6f, 0x6d, 0x12, 0x30, 0x0a, 0x05, 0x75, 0x6e, 0x74, 0x69, 0x6c,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61,
	0x6d, 0x70, 0x52, 0x05, 0x75, 0x6e, 0x74, 0x69, 0x6c, 0x42, 0x0c, 0x0a, 0x0a, 0x74, 0x69, 0x6d,
	0x65, 0x5f, 0x71, 0x75, 0x65, 0x72, 0x79, 0x4a, 0x04, 0x08, 0x04, 0x10, 0x05, 0x22, 0xec, 0x01,
	0x0a, 0x05, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x12, 0x5e, 0x0a, 0x0a, 0x61, 0x75, 0x74, 0x68, 0x6f,
	0x72, 0x69, 0x7a, 0x65, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3c, 0x2e, 0x63, 0x6f,
	0x6d, 0x2e, 0x64, 0x69, 0x67, 0x69, 0x74, 0x61, 0x6c, 0x61, 0x73, 0x73, 0x65, 0x74, 0x2e, 0x63,
	0x61, 0x6e, 0x74, 0x6f, 0x6e, 0x2e, 0x74, 0x6f, 0x70, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x2e, 0x61,
	0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x76, 0x33, 0x30, 0x2e, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x2e, 0x41,
	0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x65, 0x64, 0x48, 0x00, 0x52, 0x0a, 0x61, 0x75, 0x74,
	0x68, 0x6f, 0x72, 0x69, 0x7a, 0x65, 0x64, 0x12, 0x52, 0x0a, 0x06, 0x64, 0x6f, 0x6d, 0x61, 0x69,
	0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x38, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x64, 0x69,
	0x67, 0x69, 0x74, 0x61, 0x6c, 0x61, 0x73, 0x73, 0x65, 0x74, 0x2e, 0x63, 0x61, 0x6e, 0x74, 0x6f,
	0x6e, 0x2e, 0x74, 0x6f, 0x70, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e,
	0x2e, 0x76, 0x33, 0x30, 0x2e, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x2e, 0x44, 0x6f, 0x6d, 0x61, 0x69,
	0x6e, 0x48, 0x00, 0x52, 0x06, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x1a, 0x0c, 0x0a, 0x0a, 0x41,
	0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x65, 0x64, 0x1a, 0x18, 0x0a, 0x06, 0x44, 0x6f, 0x6d,
	0x61, 0x69, 0x6e, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x02, 0x69, 0x64, 0x42, 0x07, 0x0a, 0x05, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x22, 0xdc, 0x03, 0x0a,
	0x0a, 0x42, 0x61, 0x73, 0x65, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x47, 0x0a, 0x05, 0x73,
	0x74, 0x6f, 0x72, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x31, 0x2e, 0x63, 0x6f, 0x6d,
	0x2e, 0x64, 0x69, 0x67, 0x69, 0x74, 0x61, 0x6c, 0x61, 0x73, 0x73, 0x65, 0x74, 0x2e, 0x63, 0x61,
	0x6e, 0x74, 0x6f, 0x6e, 0x2e, 0x74, 0x6f, 0x70, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x2e, 0x61, 0x64,
	0x6d, 0x69, 0x6e, 0x2e, 0x76, 0x33, 0x30, 0x2e, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x52, 0x05, 0x73,
	0x74, 0x6f, 0x72, 0x65, 0x12, 0x38, 0x0a, 0x09, 0x73, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65,
	0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74,
	0x61, 0x6d, 0x70, 0x52, 0x09, 0x73, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x64, 0x12, 0x39,
	0x0a, 0x0a, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x5f, 0x66, 0x72, 0x6f, 0x6d, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09,
	0x76, 0x61, 0x6c, 0x69, 0x64, 0x46, 0x72, 0x6f, 0x6d, 0x12, 0x3b, 0x0a, 0x0b, 0x76, 0x61, 0x6c,
	0x69, 0x64, 0x5f, 0x75, 0x6e, 0x74, 0x69, 0x6c, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0a, 0x76, 0x61, 0x6c, 0x69,
	0x64, 0x55, 0x6e, 0x74, 0x69, 0x6c, 0x12, 0x5a, 0x0a, 0x09, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x3c, 0x2e, 0x63, 0x6f, 0x6d, 0x2e,
	0x64, 0x69, 0x67, 0x69, 0x74, 0x61, 0x6c, 0x61, 0x73, 0x73, 0x65, 0x74, 0x2e, 0x63, 0x61, 0x6e,
	0x74, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x76, 0x33, 0x30,
	0x2e, 0x45, 0x6e, 0x75, 0x6d, 0x73, 0x2e, 0x54, 0x6f, 0x70, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x43,
	0x68, 0x61, 0x6e, 0x67, 0x65, 0x4f, 0x70, 0x52, 0x09, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x29, 0x0a, 0x10, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x5f, 0x68, 0x61, 0x73, 0x68, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0f, 0x74, 0x72,
	0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x61, 0x73, 0x68, 0x12, 0x16, 0x0a,
	0x06, 0x73, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x18, 0x07, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x73,
	0x65, 0x72, 0x69, 0x61, 0x6c, 0x12, 0x34, 0x0a, 0x16, 0x73, 0x69, 0x67, 0x6e, 0x65, 0x64, 0x5f,
	0x62, 0x79, 0x5f, 0x66, 0x69, 0x6e, 0x67, 0x65, 0x72, 0x70, 0x72, 0x69, 0x6e, 0x74, 0x73, 0x18,
	0x08, 0x20, 0x03, 0x28, 0x09, 0x52, 0x14, 0x73, 0x69, 0x67, 0x6e, 0x65, 0x64, 0x42, 0x79, 0x46,
	0x69, 0x6e, 0x67, 0x65, 0x72, 0x70, 0x72, 0x69, 0x6e, 0x74, 0x73, 0x22, 0xe4, 0x01, 0x0a, 0x1e,
	0x4c, 0x69, 0x73, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x44, 0x65, 0x6c,
	0x65, 0x67, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x54,
	0x0a, 0x0a, 0x62, 0x61, 0x73, 0x65, 0x5f, 0x71, 0x75, 0x65, 0x72, 0x79, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x35, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x64, 0x69, 0x67, 0x69, 0x74, 0x61, 0x6c,
	0x61, 0x73, 0x73, 0x65, 0x74, 0x2e, 0x63, 0x61, 0x6e, 0x74, 0x6f, 0x6e, 0x2e, 0x74, 0x6f, 0x70,
	0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x76, 0x33, 0x30, 0x2e,
	0x42, 0x61, 0x73, 0x65, 0x51, 0x75, 0x65, 0x72, 0x79, 0x52, 0x09, 0x62, 0x61, 0x73, 0x65, 0x51,
	0x75, 0x65, 0x72, 0x79, 0x12, 0x29, 0x0a, 0x10, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x5f, 0x6e,
	0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f,
	0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x12,
	0x41, 0x0a, 0x1d, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x5f, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74,
	0x5f, 0x6b, 0x65, 0x79, 0x5f, 0x66, 0x69, 0x6e, 0x67, 0x65, 0x72, 0x70, 0x72, 0x69, 0x6e, 0x74,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x1a, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x54, 0x61,
	0x72, 0x67, 0x65, 0x74, 0x4b, 0x65, 0x79, 0x46, 0x69, 0x6e, 0x67, 0x65, 0x72, 0x70, 0x72, 0x69,
	0x6e, 0x74, 0x22, 0xbb, 0x02, 0x0a, 0x1f, 0x4c, 0x69, 0x73, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x73,
	0x70, 0x61, 0x63, 0x65, 0x44, 0x65, 0x6c, 0x65, 0x67, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x6c, 0x0a, 0x07, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74,
	0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x52, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x64, 0x69,
	0x67, 0x69, 0x74, 0x61, 0x6c, 0x61, 0x73, 0x73, 0x65, 0x74, 0x2e, 0x63, 0x61, 0x6e, 0x74, 0x6f,
	0x6e, 0x2e, 0x74, 0x6f, 0x70, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e,
	0x2e, 0x76, 0x33, 0x30, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61,
	0x63, 0x65, 0x44, 0x65, 0x6c, 0x65, 0x67, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x07, 0x72, 0x65, 0x73,
	0x75, 0x6c, 0x74, 0x73, 0x1a, 0xa9, 0x01, 0x0a, 0x06, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12,
	0x50, 0x0a, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x36, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x64, 0x69, 0x67, 0x69, 0x74, 0x61, 0x6c, 0x61, 0x73,
	0x73, 0x65, 0x74, 0x2e, 0x63, 0x61, 0x6e, 0x74, 0x6f, 0x6e, 0x2e, 0x74, 0x6f, 0x70, 0x6f, 0x6c,
	0x6f, 0x67, 0x79, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x76, 0x33, 0x30, 0x2e, 0x42, 0x61,
	0x73, 0x65, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78,
	0x74, 0x12, 0x4d, 0x0a, 0x04, 0x69, 0x74, 0x65, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x39, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x64, 0x69, 0x67, 0x69, 0x74, 0x61, 0x6c, 0x61, 0x73, 0x73,
	0x65, 0x74, 0x2e, 0x63, 0x61, 0x6e, 0x74, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63,
	0x6f, 0x6c, 0x2e, 0x76, 0x33, 0x30, 0x2e, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65,
	0x44, 0x65, 0x6c, 0x65, 0x67, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x04, 0x69, 0x74, 0x65, 0x6d,
	0x22, 0xae, 0x01, 0x0a, 0x2b, 0x4c, 0x69, 0x73, 0x74, 0x44, 0x65, 0x63, 0x65, 0x6e, 0x74, 0x72,
	0x61, 0x6c, 0x69, 0x7a, 0x65, 0x64, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x44,
	0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x54, 0x0a, 0x0a, 0x62, 0x61, 0x73, 0x65, 0x5f, 0x71, 0x75, 0x65, 0x72, 0x79, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x35, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x64, 0x69, 0x67, 0x69, 0x74,
	0x61, 0x6c, 0x61, 0x73, 0x73, 0x65, 0x74, 0x2e, 0x63, 0x61, 0x6e, 0x74, 0x6f, 0x6e, 0x2e, 0x74,
	0x6f, 0x70, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x76, 0x33,
	0x30, 0x2e, 0x42, 0x61, 0x73, 0x65, 0x51, 0x75, 0x65, 0x72, 0x79, 0x52, 0x09, 0x62, 0x61, 0x73,
	0x65, 0x51, 0x75, 0x65, 0x72, 0x79, 0x12, 0x29, 0x0a, 0x10, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72,
	0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0f, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63,
	0x65, 0x22, 0xe2, 0x02, 0x0a, 0x2c, 0x4c, 0x69, 0x73, 0x74, 0x44, 0x65, 0x63, 0x65, 0x6e, 0x74,
	0x72, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x64, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65,
	0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x79, 0x0a, 0x07, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x18, 0x01, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x5f, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x64, 0x69, 0x67, 0x69, 0x74, 0x61,
	0x6c, 0x61, 0x73, 0x73, 0x65, 0x74, 0x2e, 0x63, 0x61, 0x6e, 0x74, 0x6f, 0x6e, 0x2e, 0x74, 0x6f,
	0x70, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x76, 0x33, 0x30,
	0x2e, 0x4c, 0x69, 0x73, 0x74, 0x44, 0x65, 0x63, 0x65, 0x6e, 0x74, 0x72, 0x61, 0x6c, 0x69, 0x7a,
	0x65, 0x64, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x44, 0x65, 0x66, 0x69, 0x6e,
	0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x52, 0x65,
	0x73, 0x75, 0x6c, 0x74, 0x52, 0x07, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x1a, 0xb6, 0x01,
	0x0a, 0x06, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x50, 0x0a, 0x07, 0x63, 0x6f, 0x6e, 0x74,
	0x65, 0x78, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x36, 0x2e, 0x63, 0x6f, 0x6d, 0x2e,
	0x64, 0x69, 0x67, 0x69, 0x74, 0x61, 0x6c, 0x61, 0x73, 0x73, 0x65, 0x74, 0x2e, 0x63, 0x61, 0x6e,
	0x74, 0x6f, 0x6e, 0x2e, 0x74, 0x6f, 0x70, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x2e, 0x61, 0x64, 0x6d,
	0x69, 0x6e, 0x2e, 0x76, 0x33, 0x30, 0x2e, 0x42, 0x61, 0x73, 0x65, 0x52, 0x65, 0x73, 0x75, 0x6c,
	0x74, 0x52, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x12, 0x5a, 0x0a, 0x04, 0x69, 0x74,
	0x65, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x46, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x64,
	0x69, 0x67, 0x69, 0x74, 0x61, 0x6c, 0x61, 0x73, 0x73, 0x65, 0x74, 0x2e, 0x63, 0x61, 0x6e, 0x74,
	0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x76, 0x33, 0x30, 0x2e,
	0x44, 0x65, 0x63, 0x65, 0x6e, 0x74, 0x72, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x64, 0x4e, 0x61, 0x6d,
	0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e,
	0x52, 0x04, 0x69, 0x74, 0x65, 0x6d, 0x22, 0xd9, 0x01, 0x0a, 0x1f, 0x4c, 0x69, 0x73, 0x74, 0x49,
	0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x44, 0x65, 0x6c, 0x65, 0x67, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x54, 0x0a, 0x0a, 0x62, 0x61,
	0x73, 0x65, 0x5f, 0x71, 0x75, 0x65, 0x72, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x35,
	0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x64, 0x69, 0x67, 0x69, 0x74, 0x61, 0x6c, 0x61, 0x73, 0x73, 0x65,
	0x74, 0x2e, 0x63, 0x61, 0x6e, 0x74, 0x6f, 0x6e, 0x2e, 0x74, 0x6f, 0x70, 0x6f, 0x6c, 0x6f, 0x67,
	0x79, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x76, 0x33, 0x30, 0x2e, 0x42, 0x61, 0x73, 0x65,
	0x51, 0x75, 0x65, 0x72, 0x79, 0x52, 0x09, 0x62, 0x61, 0x73, 0x65, 0x51, 0x75, 0x65, 0x72, 0x79,
	0x12, 0x1d, 0x0a, 0x0a, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x5f, 0x75, 0x69, 0x64, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x55, 0x69, 0x64, 0x12,
	0x41, 0x0a, 0x1d, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x5f, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74,
	0x5f, 0x6b, 0x65, 0x79, 0x5f, 0x66, 0x69, 0x6e, 0x67, 0x65, 0x72, 0x70, 0x72, 0x69, 0x6e, 0x74,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x1a, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x54, 0x61,
	0x72, 0x67, 0x65, 0x74, 0x4b, 0x65, 0x79, 0x46, 0x69, 0x6e, 0x67, 0x65, 0x72, 0x70, 0x72, 0x69,
	0x6e, 0x74, 0x22, 0xbe, 0x02, 0x0a, 0x20, 0x4c, 0x69, 0x73, 0x74, 0x49, 0x64, 0x65, 0x6e, 0x74,
	0x69, 0x66, 0x69, 0x65, 0x72, 0x44, 0x65, 0x6c, 0x65, 0x67, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x6d, 0x0a, 0x07, 0x72, 0x65, 0x73, 0x75, 0x6c,
	0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x53, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x64,
	0x69, 0x67, 0x69, 0x74, 0x61, 0x6c, 0x61, 0x73, 0x73, 0x65, 0x74, 0x2e, 0x63, 0x61, 0x6e, 0x74,
	0x6f, 0x6e, 0x2e, 0x74, 0x6f, 0x70, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x2e, 0x61, 0x64, 0x6d, 0x69,
	0x6e, 0x2e, 0x76, 0x33, 0x30, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69,
	0x66, 0x69, 0x65, 0x72, 0x44, 0x65, 0x6c, 0x65, 0x67, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x07, 0x72,
	0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x1a, 0xaa, 0x01, 0x0a, 0x06, 0x52, 0x65, 0x73, 0x75, 0x6c,
	0x74, 0x12, 0x50, 0x0a, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x36, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x64, 0x69, 0x67, 0x69, 0x74, 0x61, 0x6c,
	0x61, 0x73, 0x73, 0x65, 0x74, 0x2e, 0x63, 0x61, 0x6e, 0x74, 0x6f, 0x6e, 0x2e, 0x74, 0x6f, 0x70,
	0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x76, 0x33, 0x30, 0x2e,
	0x42, 0x61, 0x73, 0x65, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x07, 0x63, 0x6f, 0x6e, 0x74,
	0x65, 0x78, 0x74, 0x12, 0x4e, 0x0a, 0x04, 0x69, 0x74, 0x65, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x3a, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x64, 0x69, 0x67, 0x69, 0x74, 0x61, 0x6c, 0x61,
	0x73, 0x73, 0x65, 0x74, 0x2e, 0x63, 0x61, 0x6e, 0x74, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x76, 0x33, 0x30, 0x2e, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66,
	0x69, 0x65, 0x72, 0x44, 0x65, 0x6c, 0x65, 0x67, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x04, 0x69,
	0x74, 0x65, 0x6d, 0x22, 0xd8, 0x01, 0x0a, 0x1c, 0x4c, 0x69, 0x73, 0x74, 0x4f, 0x77, 0x6e, 0x65,
	0x72, 0x54, 0x6f, 0x4b, 0x65, 0x79, 0x4d, 0x61, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x54, 0x0a, 0x0a, 0x62, 0x61, 0x73, 0x65, 0x5f, 0x71, 0x75, 0x65,
	0x72, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x35, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x64,
	0x69, 0x67, 0x69, 0x74, 0x61, 0x6c, 0x61, 0x73, 0x73, 0x65, 0x74, 0x2e, 0x63, 0x61, 0x6e, 0x74,
	0x6f, 0x6e, 0x2e, 0x74, 0x6f, 0x70, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x2e, 0x61, 0x64, 0x6d, 0x69,
	0x6e, 0x2e, 0x76, 0x33, 0x30, 0x2e, 0x42, 0x61, 0x73, 0x65, 0x51, 0x75, 0x65, 0x72, 0x79, 0x52,
	0x09, 0x62, 0x61, 0x73, 0x65, 0x51, 0x75, 0x65, 0x72, 0x79, 0x12, 0x31, 0x0a, 0x15, 0x66, 0x69,
	0x6c, 0x74, 0x65, 0x72, 0x5f, 0x6b, 0x65, 0x79, 0x5f, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x5f, 0x74,
	0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x66, 0x69, 0x6c, 0x74, 0x65,
	0x72, 0x4b, 0x65, 0x79, 0x4f, 0x77, 0x6e, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x12, 0x2f, 0x0a,
	0x14, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x5f, 0x6b, 0x65, 0x79, 0x5f, 0x6f, 0x77, 0x6e, 0x65,
	0x72, 0x5f, 0x75, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x66, 0x69, 0x6c,
	0x74, 0x65, 0x72, 0x4b, 0x65, 0x79, 0x4f, 0x77, 0x6e, 0x65, 0x72, 0x55, 0x69, 0x64, 0x22, 0xb5,
	0x02, 0x0a, 0x1d, 0x4c, 0x69, 0x73, 0x74, 0x4f, 0x77, 0x6e, 0x65, 0x72, 0x54, 0x6f, 0x4b, 0x65,
	0x79, 0x4d, 0x61, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x6a, 0x0a, 0x07, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x50, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x64, 0x69, 0x67, 0x69, 0x74, 0x61, 0x6c, 0x61,
	0x73, 0x73, 0x65, 0x74, 0x2e, 0x63, 0x61, 0x6e, 0x74, 0x6f, 0x6e, 0x2e, 0x74, 0x6f, 0x70, 0x6f,
	0x6c, 0x6f, 0x67, 0x79, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x76, 0x33, 0x30, 0x2e, 0x4c,
	0x69, 0x73, 0x74, 0x4f, 0x77, 0x6e, 0x65, 0x72, 0x54, 0x6f, 0x4b, 0x65, 0x79, 0x4d, 0x61, 0x70,
	0x70, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x52, 0x65, 0x73,
	0x75, 0x6c, 0x74, 0x52, 0x07, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x1a, 0xa7, 0x01, 0x0a,
	0x06, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x50, 0x0a, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65,
	0x78, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x36, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x64,
	0x69, 0x67, 0x69, 0x74, 0x61, 0x6c, 0x61, 0x73, 0x73, 0x65, 0x74, 0x2e, 0x63, 0x61, 0x6e, 0x74,
	0x6f, 0x6e, 0x2e, 0x74, 0x6f, 0x70, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x2e, 0x61, 0x64, 0x6d, 0x69,
	0x6e, 0x2e, 0x76, 0x33, 0x30, 0x2e, 0x42, 0x61, 0x73, 0x65, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74,
	0x52, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x12, 0x4b, 0x0a, 0x04, 0x69, 0x74, 0x65,
	0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x37, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x64, 0x69,
	0x67, 0x69, 0x74, 0x61, 0x6c, 0x61, 0x73, 0x73, 0x65, 0x74, 0x2e, 0x63, 0x61, 0x6e, 0x74, 0x6f,
	0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x76, 0x33, 0x30, 0x2e, 0x4f,
	0x77, 0x6e, 0x65, 0x72, 0x54, 0x6f, 0x4b, 0x65, 0x79, 0x4d, 0x61, 0x70, 0x70, 0x69, 0x6e, 0x67,
	0x52, 0x04, 0x69, 0x74, 0x65, 0x6d, 0x22, 0x97, 0x01, 0x0a, 0x1c, 0x4c, 0x69, 0x73, 0x74, 0x50,
	0x61, 0x72, 0x74, 0x79, 0x54, 0x6f, 0x4b, 0x65, 0x79, 0x4d, 0x61, 0x70, 0x70, 0x69, 0x6e, 0x67,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x54, 0x0a, 0x0a, 0x62, 0x61, 0x73, 0x65, 0x5f,
	0x71, 0x75, 0x65, 0x72, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x35, 0x2e, 0x63, 0x6f,
	0x6d, 0x2e, 0x64, 0x69, 0x67, 0x69, 0x74, 0x61, 0x6c, 0x61, 0x73, 0x73, 0x65, 0x74, 0x2e, 0x63,
	0x61, 0x6e, 0x74, 0x6f, 0x6e, 0x2e, 0x74, 0x6f, 0x70, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x2e, 0x61,
	0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x76, 0x33, 0x30, 0x2e, 0x42, 0x61, 0x73, 0x65, 0x51, 0x75, 0x65,
	0x72, 0x79, 0x52, 0x09, 0x62, 0x61, 0x73, 0x65, 0x51, 0x75, 0x65, 0x72, 0x79, 0x12, 0x21, 0x0a,
	0x0c, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x5f, 0x70, 0x61, 0x72, 0x74, 0x79, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0b, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x50, 0x61, 0x72, 0x74, 0x79,
	0x22, 0xb5, 0x02, 0x0a, 0x1d, 0x4c, 0x69, 0x73, 0x74, 0x50, 0x61, 0x72, 0x74, 0x79, 0x54, 0x6f,
	0x4b, 0x65, 0x79, 0x4d, 0x61, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x6a, 0x0a, 0x07, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x18, 0x01, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x50, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x64, 0x69, 0x67, 0x69, 0x74, 0x61,
	0x6c, 0x61, 0x73, 0x73, 0x65, 0x74, 0x2e, 0x63, 0x61, 0x6e, 0x74, 0x6f, 0x6e, 0x2e, 0x74, 0x6f,
	0x70, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x76, 0x33, 0x30,
	0x2e, 0x4c, 0x69, 0x73, 0x74, 0x50, 0x61, 0x72, 0x74, 0x79, 0x54, 0x6f, 0x4b, 0x65, 0x79, 0x4d,
	0x61, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x52,
	0x65, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x07, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x1a, 0xa7,
	0x01, 0x0a, 0x06, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x50, 0x0a, 0x07, 0x63, 0x6f, 0x6e,
	0x74, 0x65, 0x78, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x36, 0x2e, 0x63, 0x6f, 0x6d,
	0x2e, 0x64, 0x69, 0x67, 0x69, 0x74, 0x61, 0x6c, 0x61, 0x73, 0x73, 0x65, 0x74, 0x2e, 0x63, 0x61,
	0x6e, 0x74, 0x6f, 0x6e, 0x2e, 0x74, 0x6f, 0x70, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x2e, 0x61, 0x64,
	0x6d, 0x69, 0x6e, 0x2e, 0x76, 0x33, 0x30, 0x2e, 0x42, 0x61, 0x73, 0x65, 0x52, 0x65, 0x73, 0x75,
	0x6c, 0x74, 0x52, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x12, 0x4b, 0x0a, 0x04, 0x69,
	0x74, 0x65, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x37, 0x2e, 0x63, 0x6f, 0x6d, 0x2e,
	0x64, 0x69, 0x67, 0x69, 0x74, 0x61, 0x6c, 0x61, 0x73, 0x73, 0x65, 0x74, 0x2e, 0x63, 0x61, 0x6e,
	0x74, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x76, 0x33, 0x30,
	0x2e, 0x50, 0x61, 0x72, 0x74, 0x79, 0x54, 0x6f, 0x4b, 0x65, 0x79, 0x4d, 0x61, 0x70, 0x70, 0x69,
	0x6e, 0x67, 0x52, 0x04, 0x69, 0x74, 0x65, 0x6d, 0x22, 0x98, 0x01, 0x0a, 0x21, 0x4c, 0x69, 0x73,
	0x74, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x54, 0x72, 0x75, 0x73, 0x74, 0x43, 0x65, 0x72, 0x74,
	0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x54,
	0x0a, 0x0a, 0x62, 0x61, 0x73, 0x65, 0x5f, 0x71, 0x75, 0x65, 0x72, 0x79, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x35, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x64, 0x69, 0x67, 0x69, 0x74, 0x61, 0x6c,
	0x61, 0x73, 0x73, 0x65, 0x74, 0x2e, 0x63, 0x61, 0x6e, 0x74, 0x6f, 0x6e, 0x2e, 0x74, 0x6f, 0x70,
	0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x76, 0x33, 0x30, 0x2e,
	0x42, 0x61, 0x73, 0x65, 0x51, 0x75, 0x65, 0x72, 0x79, 0x52, 0x09, 0x62, 0x61, 0x73, 0x65, 0x51,
	0x75, 0x65, 0x72, 0x79, 0x12, 0x1d, 0x0a, 0x0a, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x5f, 0x75,
	0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72,
	0x55, 0x69, 0x64, 0x22, 0xc4, 0x02, 0x0a, 0x22, 0x4c, 0x69, 0x73, 0x74, 0x44, 0x6f, 0x6d, 0x61,
	0x69, 0x6e, 0x54, 0x72, 0x75, 0x73, 0x74, 0x43, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61,
	0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x6f, 0x0a, 0x07, 0x72, 0x65,
	0x73, 0x75, 0x6c, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x55, 0x2e, 0x63, 0x6f,
	0x6d, 0x2e, 0x64, 0x69, 0x67, 0x69, 0x74, 0x61, 0x6c, 0x61, 0x73, 0x73, 0x65, 0x74, 0x2e, 0x63,
	0x61, 0x6e, 0x74, 0x6f, 0x6e, 0x2e, 0x74, 0x6f, 0x70, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x2e, 0x61,
	0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x76, 0x33, 0x30, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x44, 0x6f, 0x6d,
	0x61, 0x69, 0x6e, 0x54, 0x72, 0x75, 0x73, 0x74, 0x43, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63,
	0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x52, 0x65, 0x73, 0x75,
	0x6c, 0x74, 0x52, 0x07, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x1a, 0xac, 0x01, 0x0a, 0x06,
	0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x50, 0x0a, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78,
	0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x36, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x64, 0x69,
	0x67, 0x69, 0x74, 0x61, 0x6c, 0x61, 0x73, 0x73, 0x65, 0x74, 0x2e, 0x63, 0x61, 0x6e, 0x74, 0x6f,
	0x6e, 0x2e, 0x74, 0x6f, 0x70, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e,
	0x2e, 0x76, 0x33, 0x30, 0x2e, 0x42, 0x61, 0x73, 0x65, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52,
	0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x12, 0x50, 0x0a, 0x04, 0x69, 0x74, 0x65, 0x6d,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3c, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x64, 0x69, 0x67,
	0x69, 0x74, 0x61, 0x6c, 0x61, 0x73, 0x73, 0x65, 0x74, 0x2e, 0x63, 0x61, 0x6e, 0x74, 0x6f, 0x6e,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x76, 0x33, 0x30, 0x2e, 0x44, 0x6f,
	0x6d, 0x61, 0x69, 0x6e, 0x54, 0x72, 0x75, 0x73, 0x74, 0x43, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69,
	0x63, 0x61, 0x74, 0x65, 0x52, 0x04, 0x69, 0x74, 0x65, 0x6d, 0x22, 0x9d, 0x01, 0x0a, 0x26, 0x4c,
	0x69, 0x73, 0x74, 0x50, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x44, 0x6f,
	0x6d, 0x61, 0x69, 0x6e, 0x50, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x54, 0x0a, 0x0a, 0x62, 0x61, 0x73, 0x65, 0x5f, 0x71, 0x75,
	0x65, 0x72, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x35, 0x2e, 0x63, 0x6f, 0x6d, 0x2e,
	0x64, 0x69, 0x67, 0x69, 0x74, 0x61, 0x6c, 0x61, 0x73, 0x73, 0x65, 0x74, 0x2e, 0x63, 0x61, 0x6e,
	0x74, 0x6f, 0x6e, 0x2e, 0x74, 0x6f, 0x70, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x2e, 0x61, 0x64, 0x6d,
	0x69, 0x6e, 0x2e, 0x76, 0x33, 0x30, 0x2e, 0x42, 0x61, 0x73, 0x65, 0x51, 0x75, 0x65, 0x72, 0x79,
	0x52, 0x09, 0x62, 0x61, 0x73, 0x65, 0x51, 0x75, 0x65, 0x72, 0x79, 0x12, 0x1d, 0x0a, 0x0a, 0x66,
	0x69, 0x6c, 0x74, 0x65, 0x72, 0x5f, 0x75, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x09, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x55, 0x69, 0x64, 0x22, 0xd3, 0x02, 0x0a, 0x27, 0x4c,
	0x69, 0x73, 0x74, 0x50, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x44, 0x6f,
	0x6d, 0x61, 0x69, 0x6e, 0x50, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x74, 0x0a, 0x07, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74,
	0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x5a, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x64, 0x69,
	0x67, 0x69, 0x74, 0x61, 0x6c, 0x61, 0x73, 0x73, 0x65, 0x74, 0x2e, 0x63, 0x61, 0x6e, 0x74, 0x6f,
	0x6e, 0x2e, 0x74, 0x6f, 0x70, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e,
	0x2e, 0x76, 0x33, 0x30, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x50, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69,
	0x70, 0x61, 0x6e, 0x74, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x50, 0x65, 0x72, 0x6d, 0x69, 0x73,
	0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x52, 0x65, 0x73,
	0x75, 0x6c, 0x74, 0x52, 0x07, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x1a, 0xb1, 0x01, 0x0a,
	0x06, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x50, 0x0a, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65,
	0x78, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x36, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x64,
	0x69, 0x67, 0x69, 0x74, 0x61, 0x6c, 0x61, 0x73, 0x73, 0x65, 0x74, 0x2e, 0x63, 0x61, 0x6e, 0x74,
	0x6f, 0x6e, 0x2e, 0x74, 0x6f, 0x70, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x2e, 0x61, 0x64, 0x6d, 0x69,
	0x6e, 0x2e, 0x76, 0x33, 0x30, 0x2e, 0x42, 0x61, 0x73, 0x65, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74,
	0x52, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x12, 0x55, 0x0a, 0x04, 0x69, 0x74, 0x65,
	0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x41, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x64, 0x69,
	0x67, 0x69, 0x74, 0x61, 0x6c, 0x61, 0x73, 0x73, 0x65, 0x74, 0x2e, 0x63, 0x61, 0x6e, 0x74, 0x6f,
	0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x76, 0x33, 0x30, 0x2e, 0x50,
	0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e,
	0x50, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x04, 0x69, 0x74, 0x65, 0x6d,
	0x22, 0x94, 0x01, 0x0a, 0x1d, 0x4c, 0x69, 0x73, 0x74, 0x50, 0x61, 0x72, 0x74, 0x79, 0x48, 0x6f,
	0x73, 0x74, 0x69, 0x6e, 0x67, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x54, 0x0a, 0x0a, 0x62, 0x61, 0x73, 0x65, 0x5f, 0x71, 0x75, 0x65, 0x72, 0x79,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x35, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x64, 0x69, 0x67,
	0x69, 0x74, 0x61, 0x6c, 0x61, 0x73, 0x73, 0x65, 0x74, 0x2e, 0x63, 0x61, 0x6e, 0x74, 0x6f, 0x6e,
	0x2e, 0x74, 0x6f, 0x70, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e,
	0x76, 0x33, 0x30, 0x2e, 0x42, 0x61, 0x73, 0x65, 0x51, 0x75, 0x65, 0x72, 0x79, 0x52, 0x09, 0x62,
	0x61, 0x73, 0x65, 0x51, 0x75, 0x65, 0x72, 0x79, 0x12, 0x1d, 0x0a, 0x0a, 0x66, 0x69, 0x6c, 0x74,
	0x65, 0x72, 0x5f, 0x75, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x66, 0x69,
	0x6c, 0x74, 0x65, 0x72, 0x55, 0x69, 0x64, 0x22, 0xb8, 0x02, 0x0a, 0x1e, 0x4c, 0x69, 0x73, 0x74,
	0x50, 0x61, 0x72, 0x74, 0x79, 0x48, 0x6f, 0x73, 0x74, 0x69, 0x6e, 0x67, 0x4c, 0x69, 0x6d, 0x69,
	0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x6b, 0x0a, 0x07, 0x72, 0x65,
	0x73, 0x75, 0x6c, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x51, 0x2e, 0x63, 0x6f,
	0x6d, 0x2e, 0x64, 0x69, 0x67, 0x69, 0x74, 0x61, 0x6c, 0x61, 0x73, 0x73, 0x65, 0x74, 0x2e, 0x63,
	0x61, 0x6e, 0x74, 0x6f, 0x6e, 0x2e, 0x74, 0x6f, 0x70, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x2e, 0x61,
	0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x76, 0x33, 0x30, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x50, 0x61, 0x72,
	0x74, 0x79, 0x48, 0x6f, 0x73, 0x74, 0x69, 0x6e, 0x67, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x73, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x07,
	0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x1a, 0xa8, 0x01, 0x0a, 0x06, 0x52, 0x65, 0x73, 0x75,
	0x6c, 0x74, 0x12, 0x50, 0x0a, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x36, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x64, 0x69, 0x67, 0x69, 0x74, 0x61,
	0x6c, 0x61, 0x73, 0x73, 0x65, 0x74, 0x2e, 0x63, 0x61, 0x6e, 0x74, 0x6f, 0x6e, 0x2e, 0x74, 0x6f,
	0x70, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x76, 0x33, 0x30,
	0x2e, 0x42, 0x61, 0x73, 0x65, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x07, 0x63, 0x6f, 0x6e,
	0x74, 0x65, 0x78, 0x74, 0x12, 0x4c, 0x0a, 0x04, 0x69, 0x74, 0x65, 0x6d, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x38, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x64, 0x69, 0x67, 0x69, 0x74, 0x61, 0x6c,
	0x61, 0x73, 0x73, 0x65, 0x74, 0x2e, 0x63, 0x61, 0x6e, 0x74, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x76, 0x33, 0x30, 0x2e, 0x50, 0x61, 0x72, 0x74, 0x79, 0x48,
	0x6f, 0x73, 0x74, 0x69, 0x6e, 0x67, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x73, 0x52, 0x04, 0x69, 0x74,
	0x65, 0x6d, 0x22, 0xa0, 0x01, 0x0a, 0x19, 0x4c, 0x69, 0x73, 0x74, 0x56, 0x65, 0x74, 0x74, 0x65,
	0x64, 0x50, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x54, 0x0a, 0x0a, 0x62, 0x61, 0x73, 0x65, 0x5f, 0x71, 0x75, 0x65, 0x72, 0x79, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x35, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x64, 0x69, 0x67, 0x69, 0x74,
	0x61, 0x6c, 0x61, 0x73, 0x73, 0x65, 0x74, 0x2e, 0x63, 0x61, 0x6e, 0x74, 0x6f, 0x6e, 0x2e, 0x74,
	0x6f, 0x70, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x76, 0x33,
	0x30, 0x2e, 0x42, 0x61, 0x73, 0x65, 0x51, 0x75, 0x65, 0x72, 0x79, 0x52, 0x09, 0x62, 0x61, 0x73,
	0x65, 0x51, 0x75, 0x65, 0x72, 0x79, 0x12, 0x2d, 0x0a, 0x12, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72,
	0x5f, 0x70, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x11, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x50, 0x61, 0x72, 0x74, 0x69, 0x63,
	0x69, 0x70, 0x61, 0x6e, 0x74, 0x22, 0xac, 0x02, 0x0a, 0x1a, 0x4c, 0x69, 0x73, 0x74, 0x56, 0x65,
	0x74, 0x74, 0x65, 0x64, 0x50, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x67, 0x0a, 0x07, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x18,
	0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x4d, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x64, 0x69, 0x67, 0x69,
	0x74, 0x61, 0x6c, 0x61, 0x73, 0x73, 0x65, 0x74, 0x2e, 0x63, 0x61, 0x6e, 0x74, 0x6f, 0x6e, 0x2e,
	0x74, 0x6f, 0x70, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x76,
	0x33, 0x30, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x56, 0x65, 0x74, 0x74, 0x65, 0x64, 0x50, 0x61, 0x63,
	0x6b, 0x61, 0x67, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x52, 0x65,
	0x73, 0x75, 0x6c, 0x74, 0x52, 0x07, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x1a, 0xa4, 0x01,
	0x0a, 0x06, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x50, 0x0a, 0x07, 0x63, 0x6f, 0x6e, 0x74,
	0x65, 0x78, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x36, 0x2e, 0x63, 0x6f, 0x6d, 0x2e,
	0x64, 0x69, 0x67, 0x69, 0x74, 0x61, 0x6c, 0x61, 0x73, 0x73, 0x65, 0x74, 0x2e, 0x63, 0x61, 0x6e,
	0x74, 0x6f, 0x6e, 0x2e, 0x74, 0x6f, 0x70, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x2e, 0x61, 0x64, 0x6d,
	0x69, 0x6e, 0x2e, 0x76, 0x33, 0x30, 0x2e, 0x42, 0x61, 0x73, 0x65, 0x52, 0x65, 0x73, 0x75, 0x6c,
	0x74, 0x52, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x12, 0x48, 0x0a, 0x04, 0x69, 0x74,
	0x65, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x34, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x64,
	0x69, 0x67, 0x69, 0x74, 0x61, 0x6c, 0x61, 0x73, 0x73, 0x65, 0x74, 0x2e, 0x63, 0x61, 0x6e, 0x74,
	0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x76, 0x33, 0x30, 0x2e,
	0x56, 0x65, 0x74, 0x74, 0x65, 0x64, 0x50, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x73, 0x52, 0x04,
	0x69, 0x74, 0x65, 0x6d, 0x22, 0xc7, 0x01, 0x0a, 0x1d, 0x4c, 0x69, 0x73, 0x74, 0x50, 0x61, 0x72,
	0x74, 0x79, 0x54, 0x6f, 0x50, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x54, 0x0a, 0x0a, 0x62, 0x61, 0x73, 0x65, 0x5f, 0x71,
	0x75, 0x65, 0x72, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x35, 0x2e, 0x63, 0x6f, 0x6d,
	0x2e, 0x64, 0x69, 0x67, 0x69, 0x74, 0x61, 0x6c, 0x61, 0x73, 0x73, 0x65, 0x74, 0x2e, 0x63, 0x61,
	0x6e, 0x74, 0x6f, 0x6e, 0x2e, 0x74, 0x6f, 0x70, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x2e, 0x61, 0x64,
	0x6d, 0x69, 0x6e, 0x2e, 0x76, 0x33, 0x30, 0x2e, 0x42, 0x61, 0x73, 0x65, 0x51, 0x75, 0x65, 0x72,
	0x79, 0x52, 0x09, 0x62, 0x61, 0x73, 0x65, 0x51, 0x75, 0x65, 0x72, 0x79, 0x12, 0x21, 0x0a, 0x0c,
	0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x5f, 0x70, 0x61, 0x72, 0x74, 0x79, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0b, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x50, 0x61, 0x72, 0x74, 0x79, 0x12,
	0x2d, 0x0a, 0x12, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x5f, 0x70, 0x61, 0x72, 0x74, 0x69, 0x63,
	0x69, 0x70, 0x61, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x66, 0x69, 0x6c,
	0x74, 0x65, 0x72, 0x50, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x22, 0xb8,
	0x02, 0x0a, 0x1e, 0x4c, 0x69, 0x73, 0x74, 0x50, 0x61, 0x72, 0x74, 0x79, 0x54, 0x6f, 0x50, 0x61,
	0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x6b, 0x0a, 0x07, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x18, 0x02, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x51, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x64, 0x69, 0x67, 0x69, 0x74, 0x61, 0x6c,
	0x61, 0x73, 0x73, 0x65, 0x74, 0x2e, 0x63, 0x61, 0x6e, 0x74, 0x6f, 0x6e, 0x2e, 0x74, 0x6f, 0x70,
	0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x76, 0x33, 0x30, 0x2e,
	0x4c, 0x69, 0x73, 0x74, 0x50, 0x61, 0x72, 0x74, 0x79, 0x54, 0x6f, 0x50, 0x61, 0x72, 0x74, 0x69,
	0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x52,
	0x65, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x07, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x1a, 0xa8,
	0x01, 0x0a, 0x06, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x50, 0x0a, 0x07, 0x63, 0x6f, 0x6e,
	0x74, 0x65, 0x78, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x36, 0x2e, 0x63, 0x6f, 0x6d,
	0x2e, 0x64, 0x69, 0x67, 0x69, 0x74, 0x61, 0x6c, 0x61, 0x73, 0x73, 0x65, 0x74, 0x2e, 0x63, 0x61,
	0x6e, 0x74, 0x6f, 0x6e, 0x2e, 0x74, 0x6f, 0x70, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x2e, 0x61, 0x64,
	0x6d, 0x69, 0x6e, 0x2e, 0x76, 0x33, 0x30, 0x2e, 0x42, 0x61, 0x73, 0x65, 0x52, 0x65, 0x73, 0x75,
	0x6c, 0x74, 0x52, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x12, 0x4c, 0x0a, 0x04, 0x69,
	0x74, 0x65, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x38, 0x2e, 0x63, 0x6f, 0x6d, 0x2e,
	0x64, 0x69, 0x67, 0x69, 0x74, 0x61, 0x6c, 0x61, 0x73, 0x73, 0x65, 0x74, 0x2e, 0x63, 0x61, 0x6e,
	0x74, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x76, 0x33, 0x30,
	0x2e, 0x50, 0x61, 0x72, 0x74, 0x79, 0x54, 0x6f, 0x50, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70,
	0x61, 0x6e, 0x74, 0x52, 0x04, 0x69, 0x74, 0x65, 0x6d, 0x22, 0x91, 0x01, 0x0a, 0x16, 0x4c, 0x69,
	0x73, 0x74, 0x41, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x4f, 0x66, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x54, 0x0a, 0x0a, 0x62, 0x61, 0x73, 0x65, 0x5f, 0x71, 0x75, 0x65,
	0x72, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x35, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x64,
	0x69, 0x67, 0x69, 0x74, 0x61, 0x6c, 0x61, 0x73, 0x73, 0x65, 0x74, 0x2e, 0x63, 0x61, 0x6e, 0x74,
	0x6f, 0x6e, 0x2e, 0x74, 0x6f, 0x70, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x2e, 0x61, 0x64, 0x6d, 0x69,
	0x6e, 0x2e, 0x76, 0x33, 0x30, 0x2e, 0x42, 0x61, 0x73, 0x65, 0x51, 0x75, 0x65, 0x72, 0x79, 0x52,
	0x09, 0x62, 0x61, 0x73, 0x65, 0x51, 0x75, 0x65, 0x72, 0x79, 0x12, 0x21, 0x0a, 0x0c, 0x66, 0x69,
	0x6c, 0x74, 0x65, 0x72, 0x5f, 0x70, 0x61, 0x72, 0x74, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0b, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x50, 0x61, 0x72, 0x74, 0x79, 0x22, 0xa3, 0x02,
	0x0a, 0x17, 0x4c, 0x69, 0x73, 0x74, 0x41, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x4f,
	0x66, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x64, 0x0a, 0x07, 0x72, 0x65, 0x73,
	0x75, 0x6c, 0x74, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x4a, 0x2e, 0x63, 0x6f, 0x6d,
	0x2e, 0x64, 0x69, 0x67, 0x69, 0x74, 0x61, 0x6c, 0x61, 0x73, 0x73, 0x65, 0x74, 0x2e, 0x63, 0x61,
	0x6e, 0x74, 0x6f, 0x6e, 0x2e, 0x74, 0x6f, 0x70, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x2e, 0x61, 0x64,
	0x6d, 0x69, 0x6e, 0x2e, 0x76, 0x33, 0x30, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x41, 0x75, 0x74, 0x68,
	0x6f, 0x72, 0x69, 0x74, 0x79, 0x4f, 0x66, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e,
	0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x07, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x1a,
	0xa1, 0x01, 0x0a, 0x06, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x50, 0x0a, 0x07, 0x63, 0x6f,
	0x6e, 0x74, 0x65, 0x78, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x36, 0x2e, 0x63, 0x6f,
	0x6d, 0x2e, 0x64, 0x69, 0x67, 0x69, 0x74, 0x61, 0x6c, 0x61, 0x73, 0x73, 0x65, 0x74, 0x2e, 0x63,
	0x61, 0x6e, 0x74, 0x6f, 0x6e, 0x2e, 0x74, 0x6f, 0x70, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x2e, 0x61,
	0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x76, 0x33, 0x30, 0x2e, 0x42, 0x61, 0x73, 0x65, 0x52, 0x65, 0x73,
	0x75, 0x6c, 0x74, 0x52, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x12, 0x45, 0x0a, 0x04,
	0x69, 0x74, 0x65, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x31, 0x2e, 0x63, 0x6f, 0x6d,
	0x2e, 0x64, 0x69, 0x67, 0x69, 0x74, 0x61, 0x6c, 0x61, 0x73, 0x73, 0x65, 0x74, 0x2e, 0x63, 0x61,
	0x6e, 0x74, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x76, 0x33,
	0x30, 0x2e, 0x41, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x4f, 0x66, 0x52, 0x04, 0x69,
	0x74, 0x65, 0x6d, 0x22, 0x9d, 0x01, 0x0a, 0x20, 0x4c, 0x69, 0x73, 0x74, 0x44, 0x6f, 0x6d, 0x61,
	0x69, 0x6e, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x53, 0x74, 0x61, 0x74,
	0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x54, 0x0a, 0x0a, 0x62, 0x61, 0x73, 0x65,
	0x5f, 0x71, 0x75, 0x65, 0x72, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x35, 0x2e, 0x63,
	0x6f, 0x6d, 0x2e, 0x64, 0x69, 0x67, 0x69, 0x74, 0x61, 0x6c, 0x61, 0x73, 0x73, 0x65, 0x74, 0x2e,
	0x63, 0x61, 0x6e, 0x74, 0x6f, 0x6e, 0x2e, 0x74, 0x6f, 0x70, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x2e,
	0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x76, 0x33, 0x30, 0x2e, 0x42, 0x61, 0x73, 0x65, 0x51, 0x75,
	0x65, 0x72, 0x79, 0x52, 0x09, 0x62, 0x61, 0x73, 0x65, 0x51, 0x75, 0x65, 0x72, 0x79, 0x12, 0x23,
	0x0a, 0x0d, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x5f, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x44, 0x6f, 0x6d,
	0x61, 0x69, 0x6e, 0x22, 0xc3, 0x02, 0x0a, 0x21, 0x4c, 0x69, 0x73, 0x74, 0x44, 0x6f, 0x6d, 0x61,
	0x69, 0x6e, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x53, 0x74, 0x61, 0x74,
	0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x6e, 0x0a, 0x07, 0x72, 0x65, 0x73,
	0x75, 0x6c, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x54, 0x2e, 0x63, 0x6f, 0x6d,
	0x2e, 0x64, 0x69, 0x67, 0x69, 0x74, 0x61, 0x6c, 0x61, 0x73, 0x73, 0x65, 0x74, 0x2e, 0x63, 0x61,
	0x6e, 0x74, 0x6f, 0x6e, 0x2e, 0x74, 0x6f, 0x70, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x2e, 0x61, 0x64,
	0x6d, 0x69, 0x6e, 0x2e, 0x76, 0x33, 0x30, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x44, 0x6f, 0x6d, 0x61,
	0x69, 0x6e, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x53, 0x74, 0x61, 0x74,
	0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74,
	0x52, 0x07, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x1a, 0xad, 0x01, 0x0a, 0x06, 0x52, 0x65,
	0x73, 0x75, 0x6c, 0x74, 0x12, 0x50, 0x0a, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x36, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x64, 0x69, 0x67, 0x69,
	0x74, 0x61, 0x6c, 0x61, 0x73, 0x73, 0x65, 0x74, 0x2e, 0x63, 0x61, 0x6e, 0x74, 0x6f, 0x6e, 0x2e,
	0x74, 0x6f, 0x70, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x76,
	0x33, 0x30, 0x2e, 0x42, 0x61, 0x73, 0x65, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x07, 0x63,
	0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x12, 0x51, 0x0a, 0x04, 0x69, 0x74, 0x65, 0x6d, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x3d, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x64, 0x69, 0x67, 0x69, 0x74,
	0x61, 0x6c, 0x61, 0x73, 0x73, 0x65, 0x74, 0x2e, 0x63, 0x61, 0x6e, 0x74, 0x6f, 0x6e, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x76, 0x33, 0x30, 0x2e, 0x44, 0x79, 0x6e, 0x61,
	0x6d, 0x69, 0x63, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74,
	0x65, 0x72, 0x73, 0x52, 0x04, 0x69, 0x74, 0x65, 0x6d, 0x22, 0x9b, 0x01, 0x0a, 0x1e, 0x4c, 0x69,
	0x73, 0x74, 0x4d, 0x65, 0x64, 0x69, 0x61, 0x74, 0x6f, 0x72, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e,
	0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x54, 0x0a, 0x0a,
	0x62, 0x61, 0x73, 0x65, 0x5f, 0x71, 0x75, 0x65, 0x72, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x35, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x64, 0x69, 0x67, 0x69, 0x74, 0x61, 0x6c, 0x61, 0x73,
	0x73, 0x65, 0x74, 0x2e, 0x63, 0x61, 0x6e, 0x74, 0x6f, 0x6e, 0x2e, 0x74, 0x6f, 0x70, 0x6f, 0x6c,
	0x6f, 0x67, 0x79, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x76, 0x33, 0x30, 0x2e, 0x42, 0x61,
	0x73, 0x65, 0x51, 0x75, 0x65, 0x72, 0x79, 0x52, 0x09, 0x62, 0x61, 0x73, 0x65, 0x51, 0x75, 0x65,
	0x72, 0x79, 0x12, 0x23, 0x0a, 0x0d, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x5f, 0x64, 0x6f, 0x6d,
	0x61, 0x69, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x66, 0x69, 0x6c, 0x74, 0x65,
	0x72, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x22, 0xbb, 0x02, 0x0a, 0x1f, 0x4c, 0x69, 0x73, 0x74,
	0x4d, 0x65, 0x64, 0x69, 0x61, 0x74, 0x6f, 0x72, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x53, 0x74,
	0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x6c, 0x0a, 0x07, 0x72,
	0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x52, 0x2e, 0x63,
	0x6f, 0x6d, 0x2e, 0x64, 0x69, 0x67, 0x69, 0x74, 0x61, 0x6c, 0x61, 0x73, 0x73, 0x65, 0x74, 0x2e,
	0x63, 0x61, 0x6e, 0x74, 0x6f, 0x6e, 0x2e, 0x74, 0x6f, 0x70, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x2e,
	0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x76, 0x33, 0x30, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x4d, 0x65,
	0x64, 0x69, 0x61, 0x74, 0x6f, 0x72, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x53, 0x74, 0x61, 0x74,
	0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74,
	0x52, 0x07, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x1a, 0xa9, 0x01, 0x0a, 0x06, 0x52, 0x65,
	0x73, 0x75, 0x6c, 0x74, 0x12, 0x50, 0x0a, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x36, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x64, 0x69, 0x67, 0x69,
	0x74, 0x61, 0x6c, 0x61, 0x73, 0x73, 0x65, 0x74, 0x2e, 0x63, 0x61, 0x6e, 0x74, 0x6f, 0x6e, 0x2e,
	0x74, 0x6f, 0x70, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x76,
	0x33, 0x30, 0x2e, 0x42, 0x61, 0x73, 0x65, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x07, 0x63,
	0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x12, 0x4d, 0x0a, 0x04, 0x69, 0x74, 0x65, 0x6d, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x39, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x64, 0x69, 0x67, 0x69, 0x74,
	0x61, 0x6c, 0x61, 0x73, 0x73, 0x65, 0x74, 0x2e, 0x63, 0x61, 0x6e, 0x74, 0x6f, 0x6e, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x76, 0x33, 0x30, 0x2e, 0x4d, 0x65, 0x64, 0x69,
	0x61, 0x74, 0x6f, 0x72, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52,
	0x04, 0x69, 0x74, 0x65, 0x6d, 0x22, 0x9c, 0x01, 0x0a, 0x1f, 0x4c, 0x69, 0x73, 0x74, 0x53, 0x65,
	0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x72, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x53, 0x74, 0x61,
	0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x54, 0x0a, 0x0a, 0x62, 0x61, 0x73,
	0x65, 0x5f, 0x71, 0x75, 0x65, 0x72, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x35, 0x2e,
	0x63, 0x6f, 0x6d, 0x2e, 0x64, 0x69, 0x67, 0x69, 0x74, 0x61, 0x6c, 0x61, 0x73, 0x73, 0x65, 0x74,
	0x2e, 0x63, 0x61, 0x6e, 0x74, 0x6f, 0x6e, 0x2e, 0x74, 0x6f, 0x70, 0x6f, 0x6c, 0x6f, 0x67, 0x79,
	0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x76, 0x33, 0x30, 0x2e, 0x42, 0x61, 0x73, 0x65, 0x51,
	0x75, 0x65, 0x72, 0x79, 0x52, 0x09, 0x62, 0x61, 0x73, 0x65, 0x51, 0x75, 0x65, 0x72, 0x79, 0x12,
	0x23, 0x0a, 0x0d, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x5f, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x44, 0x6f,
	0x6d, 0x61, 0x69, 0x6e, 0x22, 0xbe, 0x02, 0x0a, 0x20, 0x4c, 0x69, 0x73, 0x74, 0x53, 0x65, 0x71,
	0x75, 0x65, 0x6e, 0x63, 0x65, 0x72, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x53, 0x74, 0x61, 0x74,
	0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x6d, 0x0a, 0x07, 0x72, 0x65, 0x73,
	0x75, 0x6c, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x53, 0x2e, 0x63, 0x6f, 0x6d,
	0x2e, 0x64, 0x69, 0x67, 0x69, 0x74, 0x61, 0x6c, 0x61, 0x73, 0x73, 0x65, 0x74, 0x2e, 0x63, 0x61,
	0x6e, 0x74, 0x6f, 0x6e, 0x2e, 0x74, 0x6f, 0x70, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x2e, 0x61, 0x64,
	0x6d, 0x69, 0x6e, 0x2e, 0x76, 0x33, 0x30, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x53, 0x65, 0x71, 0x75,
	0x65, 0x6e, 0x63, 0x65, 0x72, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x65,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52,
	0x07, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x1a, 0xaa, 0x01, 0x0a, 0x06, 0x52, 0x65, 0x73,
	0x75, 0x6c, 0x74, 0x12, 0x50, 0x0a, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x36, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x64, 0x69, 0x67, 0x69, 0x74,
	0x61, 0x6c, 0x61, 0x73, 0x73, 0x65, 0x74, 0x2e, 0x63, 0x61, 0x6e, 0x74, 0x6f, 0x6e, 0x2e, 0x74,
	0x6f, 0x70, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x76, 0x33,
	0x30, 0x2e, 0x42, 0x61, 0x73, 0x65, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x07, 0x63, 0x6f,
	0x6e, 0x74, 0x65, 0x78, 0x74, 0x12, 0x4e, 0x0a, 0x04, 0x69, 0x74, 0x65, 0x6d, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x3a, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x64, 0x69, 0x67, 0x69, 0x74, 0x61,
	0x6c, 0x61, 0x73, 0x73, 0x65, 0x74, 0x2e, 0x63, 0x61, 0x6e, 0x74, 0x6f, 0x6e, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x76, 0x33, 0x30, 0x2e, 0x53, 0x65, 0x71, 0x75, 0x65,
	0x6e, 0x63, 0x65, 0x72, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52,
	0x04, 0x69, 0x74, 0x65, 0x6d, 0x22, 0xa0, 0x01, 0x0a, 0x23, 0x4c, 0x69, 0x73, 0x74, 0x50, 0x75,
	0x72, 0x67, 0x65, 0x54, 0x6f, 0x70, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x54, 0x72, 0x61, 0x6e, 0x73,
	0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x54, 0x0a,
	0x0a, 0x62, 0x61, 0x73, 0x65, 0x5f, 0x71, 0x75, 0x65, 0x72, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x35, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x64, 0x69, 0x67, 0x69, 0x74, 0x61, 0x6c, 0x61,
	0x73, 0x73, 0x65, 0x74, 0x2e, 0x63, 0x61, 0x6e, 0x74, 0x6f, 0x6e, 0x2e, 0x74, 0x6f, 0x70, 0x6f,
	0x6c, 0x6f, 0x67, 0x79, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x76, 0x33, 0x30, 0x2e, 0x42,
	0x61, 0x73, 0x65, 0x51, 0x75, 0x65, 0x72, 0x79, 0x52, 0x09, 0x62, 0x61, 0x73, 0x65, 0x51, 0x75,
	0x65, 0x72, 0x79, 0x12, 0x23, 0x0a, 0x0d, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x5f, 0x64, 0x6f,
	0x6d, 0x61, 0x69, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x66, 0x69, 0x6c, 0x74,
	0x65, 0x72, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x22, 0xca, 0x02, 0x0a, 0x24, 0x4c, 0x69, 0x73,
	0x74, 0x50, 0x75, 0x72, 0x67, 0x65, 0x54, 0x6f, 0x70, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x54, 0x72,
	0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x71, 0x0a, 0x07, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x57, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x64, 0x69, 0x67, 0x69, 0x74, 0x61, 0x6c,
	0x61, 0x73, 0x73, 0x65, 0x74, 0x2e, 0x63, 0x61, 0x6e, 0x74, 0x6f, 0x6e, 0x2e, 0x74, 0x6f, 0x70,
	0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x76, 0x33, 0x30, 0x2e,
	0x4c, 0x69, 0x73, 0x74, 0x50, 0x75, 0x72, 0x67, 0x65, 0x54, 0x6f, 0x70, 0x6f, 0x6c, 0x6f, 0x67,
	0x79, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x07, 0x72, 0x65, 0x73,
	0x75, 0x6c, 0x74, 0x73, 0x1a, 0xae, 0x01, 0x0a, 0x06, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12,
	0x50, 0x0a, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x36, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x64, 0x69, 0x67, 0x69, 0x74, 0x61, 0x6c, 0x61, 0x73,
	0x73, 0x65, 0x74, 0x2e, 0x63, 0x61, 0x6e, 0x74, 0x6f, 0x6e, 0x2e, 0x74, 0x6f, 0x70, 0x6f, 0x6c,
	0x6f, 0x67, 0x79, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x76, 0x33, 0x30, 0x2e, 0x42, 0x61,
	0x73, 0x65, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78,
	0x74, 0x12, 0x52, 0x0a, 0x04, 0x69, 0x74, 0x65, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x3e, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x64, 0x69, 0x67, 0x69, 0x74, 0x61, 0x6c, 0x61, 0x73, 0x73,
	0x65, 0x74, 0x2e, 0x63, 0x61, 0x6e, 0x74, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63,
	0x6f, 0x6c, 0x2e, 0x76, 0x33, 0x30, 0x2e, 0x50, 0x75, 0x72, 0x67, 0x65, 0x54, 0x6f, 0x70, 0x6f,
	0x6c, 0x6f, 0x67, 0x79, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52,
	0x04, 0x69, 0x74, 0x65, 0x6d, 0x22, 0x1c, 0x0a, 0x1a, 0x4c, 0x69, 0x73, 0x74, 0x41, 0x76, 0x61,
	0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x22, 0x3a, 0x0a, 0x1b, 0x4c, 0x69, 0x73, 0x74, 0x41, 0x76, 0x61, 0x69, 0x6c,
	0x61, 0x62, 0x6c, 0x65, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x5f, 0x69, 0x64, 0x73, 0x18,
	0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x08, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x49, 0x64, 0x73, 0x22,
	0xbc, 0x01, 0x0a, 0x0e, 0x4c, 0x69, 0x73, 0x74, 0x41, 0x6c, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x54, 0x0a, 0x0a, 0x62, 0x61, 0x73, 0x65, 0x5f, 0x71, 0x75, 0x65, 0x72, 0x79,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x35, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x64, 0x69, 0x67,
	0x69, 0x74, 0x61, 0x6c, 0x61, 0x73, 0x73, 0x65, 0x74, 0x2e, 0x63, 0x61, 0x6e, 0x74, 0x6f, 0x6e,
	0x2e, 0x74, 0x6f, 0x70, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e,
	0x76, 0x33, 0x30, 0x2e, 0x42, 0x61, 0x73, 0x65, 0x51, 0x75, 0x65, 0x72, 0x79, 0x52, 0x09, 0x62,
	0x61, 0x73, 0x65, 0x51, 0x75, 0x65, 0x72, 0x79, 0x12, 0x29, 0x0a, 0x10, 0x65, 0x78, 0x63, 0x6c,
	0x75, 0x64, 0x65, 0x5f, 0x6d, 0x61, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x73, 0x18, 0x02, 0x20, 0x03,
	0x28, 0x09, 0x52, 0x0f, 0x65, 0x78, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x4d, 0x61, 0x70, 0x70, 0x69,
	0x6e, 0x67, 0x73, 0x12, 0x29, 0x0a, 0x10, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x5f, 0x6e, 0x61,
	0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x66,
	0x69, 0x6c, 0x74, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x22, 0xcb,
	0x01, 0x0a, 0x1d, 0x45, 0x78, 0x70, 0x6f, 0x72, 0x74, 0x54, 0x6f, 0x70, 0x6f, 0x6c, 0x6f, 0x67,
	0x79, 0x53, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x54, 0x0a, 0x0a, 0x62, 0x61, 0x73, 0x65, 0x5f, 0x71, 0x75, 0x65, 0x72, 0x79, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x35, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x64, 0x69, 0x67, 0x69, 0x74,
	0x61, 0x6c, 0x61, 0x73, 0x73, 0x65, 0x74, 0x2e, 0x63, 0x61, 0x6e, 0x74, 0x6f, 0x6e, 0x2e, 0x74,
	0x6f, 0x70, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x76, 0x33,
	0x30, 0x2e, 0x42, 0x61, 0x73, 0x65, 0x51, 0x75, 0x65, 0x72, 0x79, 0x52, 0x09, 0x62, 0x61, 0x73,
	0x65, 0x51, 0x75, 0x65, 0x72, 0x79, 0x12, 0x29, 0x0a, 0x10, 0x65, 0x78, 0x63, 0x6c, 0x75, 0x64,
	0x65, 0x5f, 0x6d, 0x61, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09,
	0x52, 0x0f, 0x65, 0x78, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x4d, 0x61, 0x70, 0x70, 0x69, 0x6e, 0x67,
	0x73, 0x12, 0x29, 0x0a, 0x10, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x5f, 0x6e, 0x61, 0x6d, 0x65,
	0x73, 0x70, 0x61, 0x63, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x66, 0x69, 0x6c,
	0x74, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x22, 0x6b, 0x0a, 0x0f,
	0x4c, 0x69, 0x73, 0x74, 0x41, 0x6c, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x58, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x40, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x64, 0x69, 0x67, 0x69, 0x74, 0x61, 0x6c, 0x61, 0x73, 0x73,
	0x65, 0x74, 0x2e, 0x63, 0x61, 0x6e, 0x74, 0x6f, 0x6e, 0x2e, 0x74, 0x6f, 0x70, 0x6f, 0x6c, 0x6f,
	0x67, 0x79, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x76, 0x33, 0x30, 0x2e, 0x54, 0x6f, 0x70,
	0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x52, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x22, 0x38, 0x0a, 0x1e, 0x45, 0x78, 0x70,
	0x6f, 0x72, 0x74, 0x54, 0x6f, 0x70, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x53, 0x6e, 0x61, 0x70, 0x73,
	0x68, 0x6f, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x72,
	0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x06, 0x72, 0x65, 0x73,
	0x75, 0x6c, 0x74, 0x22, 0xb2, 0x01, 0x0a, 0x13, 0x47, 0x65, 0x6e, 0x65, 0x73, 0x69, 0x73, 0x53,
	0x74, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x61, 0x0a, 0x13, 0x66,
	0x69, 0x6c, 0x74, 0x65, 0x72, 0x5f, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x5f, 0x73, 0x74, 0x6f,
	0x72, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x31, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x64,
	0x69, 0x67, 0x69, 0x74, 0x61, 0x6c, 0x61, 0x73, 0x73, 0x65, 0x74, 0x2e, 0x63, 0x61, 0x6e, 0x74,
	0x6f, 0x6e, 0x2e, 0x74, 0x6f, 0x70, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x2e, 0x61, 0x64, 0x6d, 0x69,
	0x6e, 0x2e, 0x76, 0x33, 0x30, 0x2e, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x52, 0x11, 0x66, 0x69, 0x6c,
	0x74, 0x65, 0x72, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x12, 0x38,
	0x0a, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x74,
	0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x22, 0x2c, 0x0a, 0x14, 0x47, 0x65, 0x6e, 0x65,
	0x73, 0x69, 0x73, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x14, 0x0a, 0x05, 0x63, 0x68, 0x75, 0x6e, 0x6b, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52,
	0x05, 0x63, 0x68, 0x75, 0x6e, 0x6b, 0x32, 0xd7, 0x1a, 0x0a, 0x1a, 0x54, 0x6f, 0x70, 0x6f, 0x6c,
	0x6f, 0x67, 0x79, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x52, 0x65, 0x61, 0x64, 0x53, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0xb2, 0x01, 0x0a, 0x17, 0x4c, 0x69, 0x73, 0x74, 0x4e, 0x61,
	0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x44, 0x65, 0x6c, 0x65, 0x67, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x4a, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x64, 0x69, 0x67, 0x69, 0x74, 0x61, 0x6c, 0x61,
	0x73, 0x73, 0x65, 0x74, 0x2e, 0x63, 0x61, 0x6e, 0x74, 0x6f, 0x6e, 0x2e, 0x74, 0x6f, 0x70, 0x6f,
	0x6c, 0x6f, 0x67, 0x79, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x76, 0x33, 0x30, 0x2e, 0x4c,
	0x69, 0x73, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x44, 0x65, 0x6c, 0x65,
	0x67, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x4b, 0x2e,
	0x63, 0x6f, 0x6d, 0x2e, 0x64, 0x69, 0x67, 0x69, 0x74, 0x61, 0x6c, 0x61, 0x73, 0x73, 0x65, 0x74,
	0x2e, 0x63, 0x61, 0x6e, 0x74, 0x6f, 0x6e, 0x2e, 0x74, 0x6f, 0x70, 0x6f, 0x6c, 0x6f, 0x67, 0x79,
	0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x76, 0x33, 0x30, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x4e,
	0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x44, 0x65, 0x6c, 0x65, 0x67, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0xd9, 0x01, 0x0a, 0x24, 0x4c,
	0x69, 0x73, 0x74, 0x44, 0x65, 0x63, 0x65, 0x6e, 0x74, 0x72, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x64,
	0x4e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x57, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x64, 0x69, 0x67, 0x69, 0x74, 0x61,
	0x6c, 0x61, 0x73, 0x73, 0x65, 0x74, 0x2e, 0x63, 0x61, 0x6e, 0x74, 0x6f, 0x6e, 0x2e, 0x74, 0x6f,
	0x70, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x76, 0x33, 0x30,
	0x2e, 0x4c, 0x69, 0x73, 0x74, 0x44, 0x65, 0x63, 0x65, 0x6e, 0x74, 0x72, 0x61, 0x6c, 0x69, 0x7a,
	0x65, 0x64, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x44, 0x65, 0x66, 0x69, 0x6e,
	0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x58, 0x2e, 0x63,
	0x6f, 0x6d, 0x2e, 0x64, 0x69, 0x67, 0x69, 0x74, 0x61, 0x6c, 0x61, 0x73, 0x73, 0x65, 0x74, 0x2e,
	0x63, 0x61, 0x6e, 0x74, 0x6f, 0x6e, 0x2e, 0x74, 0x6f, 0x70, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x2e,
	0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x76, 0x33, 0x30, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x44, 0x65,
	0x63, 0x65, 0x6e, 0x74, 0x72, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x64, 0x4e, 0x61, 0x6d, 0x65, 0x73,
	0x70, 0x61, 0x63, 0x65, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0xb5, 0x01, 0x0a, 0x18, 0x4c, 0x69, 0x73, 0x74, 0x49,
	0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x44, 0x65, 0x6c, 0x65, 0x67, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x4b, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x64, 0x69, 0x67, 0x69, 0x74, 0x61,
	0x6c, 0x61, 0x73, 0x73, 0x65, 0x74, 0x2e, 0x63, 0x61, 0x6e, 0x74, 0x6f, 0x6e, 0x2e, 0x74, 0x6f,
	0x70, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x76, 0x33, 0x30,
	0x2e, 0x4c, 0x69, 0x73, 0x74, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x44,
	0x65, 0x6c, 0x65, 0x67, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x4c, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x64, 0x69, 0x67, 0x69, 0x74, 0x61, 0x6c, 0x61, 0x73,
	0x73, 0x65, 0x74, 0x2e, 0x63, 0x61, 0x6e, 0x74, 0x6f, 0x6e, 0x2e, 0x74, 0x6f, 0x70, 0x6f, 0x6c,
	0x6f, 0x67, 0x79, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x76, 0x33, 0x30, 0x2e, 0x4c, 0x69,
	0x73, 0x74, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x44, 0x65, 0x6c, 0x65,
	0x67, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0xac,
	0x01, 0x0a, 0x15, 0x4c, 0x69, 0x73, 0x74, 0x4f, 0x77, 0x6e, 0x65, 0x72, 0x54, 0x6f, 0x4b, 0x65,
	0x79, 0x4d, 0x61, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x12, 0x48, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x64,
	0x69, 0x67, 0x69, 0x74, 0x61, 0x6c, 0x61, 0x73, 0x73, 0x65, 0x74, 0x2e, 0x63, 0x61, 0x6e, 0x74,
	0x6f, 0x6e, 0x2e, 0x74, 0x6f, 0x70, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x2e, 0x61, 0x64, 0x6d, 0x69,
	0x6e, 0x2e, 0x76, 0x33, 0x30, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x4f, 0x77, 0x6e, 0x65, 0x72, 0x54,
	0x6f, 0x4b, 0x65, 0x79, 0x4d, 0x61, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x49, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x64, 0x69, 0x67, 0x69, 0x74, 0x61, 0x6c,
	0x61, 0x73, 0x73, 0x65, 0x74, 0x2e, 0x63, 0x61, 0x6e, 0x74, 0x6f, 0x6e, 0x2e, 0x74, 0x6f, 0x70,
	0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x76, 0x33, 0x30, 0x2e,
	0x4c, 0x69, 0x73, 0x74, 0x4f, 0x77, 0x6e, 0x65, 0x72, 0x54, 0x6f, 0x4b, 0x65, 0x79, 0x4d, 0x61,
	0x70, 0x70, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0xac, 0x01,
	0x0a, 0x15, 0x4c, 0x69, 0x73, 0x74, 0x50, 0x61, 0x72, 0x74, 0x79, 0x54, 0x6f, 0x4b, 0x65, 0x79,
	0x4d, 0x61, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x12, 0x48, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x64, 0x69,
	0x67, 0x69, 0x74, 0x61, 0x6c, 0x61, 0x73, 0x73, 0x65, 0x74, 0x2e, 0x63, 0x61, 0x6e, 0x74, 0x6f,
	0x6e, 0x2e, 0x74, 0x6f, 0x70, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e,
	0x2e, 0x76, 0x33, 0x30, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x50, 0x61, 0x72, 0x74, 0x79, 0x54, 0x6f,
	0x4b, 0x65, 0x79, 0x4d, 0x61, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x49, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x64, 0x69, 0x67, 0x69, 0x74, 0x61, 0x6c, 0x61,
	0x73, 0x73, 0x65, 0x74, 0x2e, 0x63, 0x61, 0x6e, 0x74, 0x6f, 0x6e, 0x2e, 0x74, 0x6f, 0x70, 0x6f,
	0x6c, 0x6f, 0x67, 0x79, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x76, 0x33, 0x30, 0x2e, 0x4c,
	0x69, 0x73, 0x74, 0x50, 0x61, 0x72, 0x74, 0x79, 0x54, 0x6f, 0x4b, 0x65, 0x79, 0x4d, 0x61, 0x70,
	0x70, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0xbb, 0x01, 0x0a,
	0x1a, 0x4c, 0x69, 0x73, 0x74, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x54, 0x72, 0x75, 0x73, 0x74,
	0x43, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x12, 0x4d, 0x2e, 0x63, 0x6f,
	0x6d, 0x2e, 0x64, 0x69, 0x67, 0x69, 0x74, 0x61, 0x6c, 0x61, 0x73, 0x73, 0x65, 0x74, 0x2e, 0x63,
	0x61, 0x6e, 0x74, 0x6f, 0x6e, 0x2e, 0x74, 0x6f, 0x70, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x2e, 0x61,
	0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x76, 0x33, 0x30, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x44, 0x6f, 0x6d,
	0x61, 0x69, 0x6e, 0x54, 0x72, 0x75, 0x73, 0x74, 0x43, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63,
	0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x4e, 0x2e, 0x63, 0x6f, 0x6d,
	0x2e, 0x64, 0x69, 0x67, 0x69, 0x74, 0x61, 0x6c, 0x61, 0x73, 0x73, 0x65, 0x74, 0x2e, 0x63, 0x61,
	0x6e, 0x74, 0x6f, 0x6e, 0x2e, 0x74, 0x6f, 0x70, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x2e, 0x61, 0x64,
	0x6d, 0x69, 0x6e, 0x2e, 0x76, 0x33, 0x30, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x44, 0x6f, 0x6d, 0x61,
	0x69, 0x6e, 0x54, 0x72, 0x75, 0x73, 0x74, 0x43, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61,
	0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0xca, 0x01, 0x0a, 0x1f, 0x4c,
	0x69, 0x73, 0x74, 0x50, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x44, 0x6f,
	0x6d, 0x61, 0x69, 0x6e, 0x50, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x52,
	0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x64, 0x69, 0x67, 0x69, 0x74, 0x61, 0x6c, 0x61, 0x73, 0x73, 0x65,
	0x74, 0x2e, 0x63, 0x61, 0x6e, 0x74, 0x6f, 0x6e, 0x2e, 0x74, 0x6f, 0x70, 0x6f, 0x6c, 0x6f, 0x67,
	0x79, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x76, 0x33, 0x30, 0x2e, 0x4c, 0x69, 0x73, 0x74,
	0x50, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x44, 0x6f, 0x6d, 0x61, 0x69,
	0x6e, 0x50, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x53, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x64, 0x69, 0x67, 0x69, 0x74, 0x61, 0x6c,
	0x61, 0x73, 0x73, 0x65, 0x74, 0x2e, 0x63, 0x61, 0x6e, 0x74, 0x6f, 0x6e, 0x2e, 0x74, 0x6f, 0x70,
	0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x76, 0x33, 0x30, 0x2e,
	0x4c, 0x69, 0x73, 0x74, 0x50, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x44,
	0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x50, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0xaf, 0x01, 0x0a, 0x16, 0x4c, 0x69, 0x73, 0x74,
	0x50, 0x61, 0x72, 0x74, 0x79, 0x48, 0x6f, 0x73, 0x74, 0x69, 0x6e, 0x67, 0x4c, 0x69, 0x6d, 0x69,
	0x74, 0x73, 0x12, 0x49, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x64, 0x69, 0x67, 0x69, 0x74, 0x61, 0x6c,
	0x61, 0x73, 0x73, 0x65, 0x74, 0x2e, 0x63, 0x61, 0x6e, 0x74, 0x6f, 0x6e, 0x2e, 0x74, 0x6f, 0x70,
	0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x76, 0x33, 0x30, 0x2e,
	0x4c, 0x69, 0x73, 0x74, 0x50, 0x61, 0x72, 0x74, 0x79, 0x48, 0x6f, 0x73, 0x74, 0x69, 0x6e, 0x67,
	0x4c, 0x69, 0x6d, 0x69, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x4a, 0x2e,
	0x63, 0x6f, 0x6d, 0x2e, 0x64, 0x69, 0x67, 0x69, 0x74, 0x61, 0x6c, 0x61, 0x73, 0x73, 0x65, 0x74,
	0x2e, 0x63, 0x61, 0x6e, 0x74, 0x6f, 0x6e, 0x2e, 0x74, 0x6f, 0x70, 0x6f, 0x6c, 0x6f, 0x67, 0x79,
	0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x76, 0x33, 0x30, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x50,
	0x61, 0x72, 0x74, 0x79, 0x48, 0x6f, 0x73, 0x74, 0x69, 0x6e, 0x67, 0x4c, 0x69, 0x6d, 0x69, 0x74,
	0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0xa3, 0x01, 0x0a, 0x12, 0x4c, 0x69,
	0x73, 0x74, 0x56, 0x65, 0x74, 0x74, 0x65, 0x64, 0x50, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x73,
	0x12, 0x45, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x64, 0x69, 0x67, 0x69, 0x74, 0x61, 0x6c, 0x61, 0x73,
	0x73, 0x65, 0x74, 0x2e, 0x63, 0x61, 0x6e, 0x74, 0x6f, 0x6e, 0x2e, 0x74, 0x6f, 0x70, 0x6f, 0x6c,
	0x6f, 0x67, 0x79, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x76, 0x33, 0x30, 0x2e, 0x4c, 0x69,
	0x73, 0x74, 0x56, 0x65, 0x74, 0x74, 0x65, 0x64, 0x50, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x73,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x46, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x64, 0x69,
	0x67, 0x69, 0x74, 0x61, 0x6c, 0x61, 0x73, 0x73, 0x65, 0x74, 0x2e, 0x63, 0x61, 0x6e, 0x74, 0x6f,
	0x6e, 0x2e, 0x74, 0x6f, 0x70, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e,
	0x2e, 0x76, 0x33, 0x30, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x56, 0x65, 0x74, 0x74, 0x65, 0x64, 0x50,
	0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0xaf, 0x01, 0x0a, 0x16, 0x4c, 0x69, 0x73, 0x74, 0x50, 0x61, 0x72, 0x74, 0x79, 0x54, 0x6f, 0x50,
	0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x12, 0x49, 0x2e, 0x63, 0x6f, 0x6d,
	0x2e, 0x64, 0x69, 0x67, 0x69, 0x74, 0x61, 0x6c, 0x61, 0x73, 0x73, 0x65, 0x74, 0x2e, 0x63, 0x61,
	0x6e, 0x74, 0x6f, 0x6e, 0x2e, 0x74, 0x6f, 0x70, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x2e, 0x61, 0x64,
	0x6d, 0x69, 0x6e, 0x2e, 0x76, 0x33, 0x30, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x50, 0x61, 0x72, 0x74,
	0x79, 0x54, 0x6f, 0x50, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x4a, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x64, 0x69, 0x67, 0x69,
	0x74, 0x61, 0x6c, 0x61, 0x73, 0x73, 0x65, 0x74, 0x2e, 0x63, 0x61, 0x6e, 0x74, 0x6f, 0x6e, 0x2e,
	0x74, 0x6f, 0x70, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x76,
	0x33, 0x30, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x50, 0x61, 0x72, 0x74, 0x79, 0x54, 0x6f, 0x50, 0x61,
	0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x9a, 0x01, 0x0a, 0x0f, 0x4c, 0x69, 0x73, 0x74, 0x41, 0x75, 0x74, 0x68, 0x6f, 0x72,
	0x69, 0x74, 0x79, 0x4f, 0x66, 0x12, 0x42, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x64, 0x69, 0x67, 0x69,
	0x74, 0x61, 0x6c, 0x61, 0x73, 0x73, 0x65, 0x74, 0x2e, 0x63, 0x61, 0x6e, 0x74, 0x6f, 0x6e, 0x2e,
	0x74, 0x6f, 0x70, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x76,
	0x33, 0x30, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x41, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x74, 0x79,
	0x4f, 0x66, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x43, 0x2e, 0x63, 0x6f, 0x6d, 0x2e,
	0x64, 0x69, 0x67, 0x69, 0x74, 0x61, 0x6c, 0x61, 0x73, 0x73, 0x65, 0x74, 0x2e, 0x63, 0x61, 0x6e,
	0x74, 0x6f, 0x6e, 0x2e, 0x74, 0x6f, 0x70, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x2e, 0x61, 0x64, 0x6d,
	0x69, 0x6e, 0x2e, 0x76, 0x33, 0x30, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x41, 0x75, 0x74, 0x68, 0x6f,
	0x72, 0x69, 0x74, 0x79, 0x4f, 0x66, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0xb8,
	0x01, 0x0a, 0x19, 0x4c, 0x69, 0x73, 0x74, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x50, 0x61, 0x72,
	0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x4c, 0x2e, 0x63,
	0x6f, 0x6d, 0x2e, 0x64, 0x69, 0x67, 0x69, 0x74, 0x61, 0x6c, 0x61, 0x73, 0x73, 0x65, 0x74, 0x2e,
	0x63, 0x61, 0x6e, 0x74, 0x6f, 0x6e, 0x2e, 0x74, 0x6f, 0x70, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x2e,
	0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x76, 0x33, 0x30, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x44, 0x6f,
	0x6d, 0x61, 0x69, 0x6e, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x53, 0x74,
	0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x4d, 0x2e, 0x63, 0x6f, 0x6d,
	0x2e, 0x64, 0x69, 0x67, 0x69, 0x74, 0x61, 0x6c, 0x61, 0x73, 0x73, 0x65, 0x74, 0x2e, 0x63, 0x61,
	0x6e, 0x74, 0x6f, 0x6e, 0x2e, 0x74, 0x6f, 0x70, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x2e, 0x61, 0x64,
	0x6d, 0x69, 0x6e, 0x2e, 0x76, 0x33, 0x30, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x44, 0x6f, 0x6d, 0x61,
	0x69, 0x6e, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x53, 0x74, 0x61, 0x74,
	0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0xb2, 0x01, 0x0a, 0x17, 0x4c, 0x69,
	0x73, 0x74, 0x4d, 0x65, 0x64, 0x69, 0x61, 0x74, 0x6f, 0x72, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e,
	0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x4a, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x64, 0x69, 0x67, 0x69,
	0x74, 0x61, 0x6c, 0x61, 0x73, 0x73, 0x65, 0x74, 0x2e, 0x63, 0x61, 0x6e, 0x74, 0x6f, 0x6e, 0x2e,
	0x74, 0x6f, 0x70, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x76,
	0x33, 0x30, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x4d, 0x65, 0x64, 0x69, 0x61, 0x74, 0x6f, 0x72, 0x44,
	0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x4b, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x64, 0x69, 0x67, 0x69, 0x74, 0x61, 0x6c, 0x61,
	0x73, 0x73, 0x65, 0x74, 0x2e, 0x63, 0x61, 0x6e, 0x74, 0x6f, 0x6e, 0x2e, 0x74, 0x6f, 0x70, 0x6f,
	0x6c, 0x6f, 0x67, 0x79, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x76, 0x33, 0x30, 0x2e, 0x4c,
	0x69, 0x73, 0x74, 0x4d, 0x65, 0x64, 0x69, 0x61, 0x74, 0x6f, 0x72, 0x44, 0x6f, 0x6d, 0x61, 0x69,
	0x6e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0xb5,
	0x01, 0x0a, 0x18, 0x4c, 0x69, 0x73, 0x74, 0x53, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x72,
	0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x4b, 0x2e, 0x63, 0x6f,
	0x6d, 0x2e, 0x64, 0x69, 0x67, 0x69, 0x74, 0x61, 0x6c, 0x61, 0x73, 0x73, 0x65, 0x74, 0x2e, 0x63,
	0x61, 0x6e, 0x74, 0x6f, 0x6e, 0x2e, 0x74, 0x6f, 0x70, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x2e, 0x61,
	0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x76, 0x33, 0x30, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x53, 0x65, 0x71,
	0x75, 0x65, 0x6e, 0x63, 0x65, 0x72, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x53, 0x74, 0x61, 0x74,
	0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x4c, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x64,
	0x69, 0x67, 0x69, 0x74, 0x61, 0x6c, 0x61, 0x73, 0x73, 0x65, 0x74, 0x2e, 0x63, 0x61, 0x6e, 0x74,
	0x6f, 0x6e, 0x2e, 0x74, 0x6f, 0x70, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x2e, 0x61, 0x64, 0x6d, 0x69,
	0x6e, 0x2e, 0x76, 0x33, 0x30, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x53, 0x65, 0x71, 0x75, 0x65, 0x6e,
	0x63, 0x65, 0x72, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0xc1, 0x01, 0x0a, 0x1c, 0x4c, 0x69, 0x73, 0x74, 0x50,
	0x75, 0x72, 0x67, 0x65, 0x54, 0x6f, 0x70, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x54, 0x72, 0x61, 0x6e,
	0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x4f, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x64, 0x69,
	0x67, 0x69, 0x74, 0x61, 0x6c, 0x61, 0x73, 0x73, 0x65, 0x74, 0x2e, 0x63, 0x61, 0x6e, 0x74, 0x6f,
	0x6e, 0x2e, 0x74, 0x6f, 0x70, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e,
	0x2e, 0x76, 0x33, 0x30, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x50, 0x75, 0x72, 0x67, 0x65, 0x54, 0x6f,
	0x70, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x50, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x64,
	0x69, 0x67, 0x69, 0x74, 0x61, 0x6c, 0x61, 0x73, 0x73, 0x65, 0x74, 0x2e, 0x63, 0x61, 0x6e, 0x74,
	0x6f, 0x6e, 0x2e, 0x74, 0x6f, 0x70, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x2e, 0x61, 0x64, 0x6d, 0x69,
	0x6e, 0x2e, 0x76, 0x33, 0x30, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x50, 0x75, 0x72, 0x67, 0x65, 0x54,
	0x6f, 0x70, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0xa6, 0x01, 0x0a, 0x13, 0x4c,
	0x69, 0x73, 0x74, 0x41, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x53, 0x74, 0x6f, 0x72,
	0x65, 0x73, 0x12, 0x46, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x64, 0x69, 0x67, 0x69, 0x74, 0x61, 0x6c,
	0x61, 0x73, 0x73, 0x65, 0x74, 0x2e, 0x63, 0x61, 0x6e, 0x74, 0x6f, 0x6e, 0x2e, 0x74, 0x6f, 0x70,
	0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x76, 0x33, 0x30, 0x2e,
	0x4c, 0x69, 0x73, 0x74, 0x41, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x53, 0x74, 0x6f,
	0x72, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x47, 0x2e, 0x63, 0x6f, 0x6d,
	0x2e, 0x64, 0x69, 0x67, 0x69, 0x74, 0x61, 0x6c, 0x61, 0x73, 0x73, 0x65, 0x74, 0x2e, 0x63, 0x61,
	0x6e, 0x74, 0x6f, 0x6e, 0x2e, 0x74, 0x6f, 0x70, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x2e, 0x61, 0x64,
	0x6d, 0x69, 0x6e, 0x2e, 0x76, 0x33, 0x30, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x41, 0x76, 0x61, 0x69,
	0x6c, 0x61, 0x62, 0x6c, 0x65, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x82, 0x01, 0x0a, 0x07, 0x4c, 0x69, 0x73, 0x74, 0x41, 0x6c, 0x6c, 0x12,
	0x3a, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x64, 0x69, 0x67, 0x69, 0x74, 0x61, 0x6c, 0x61, 0x73, 0x73,
	0x65, 0x74, 0x2e, 0x63, 0x61, 0x6e, 0x74, 0x6f, 0x6e, 0x2e, 0x74, 0x6f, 0x70, 0x6f, 0x6c, 0x6f,
	0x67, 0x79, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x76, 0x33, 0x30, 0x2e, 0x4c, 0x69, 0x73,
	0x74, 0x41, 0x6c, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x3b, 0x2e, 0x63, 0x6f,
	0x6d, 0x2e, 0x64, 0x69, 0x67, 0x69, 0x74, 0x61, 0x6c, 0x61, 0x73, 0x73, 0x65, 0x74, 0x2e, 0x63,
	0x61, 0x6e, 0x74, 0x6f, 0x6e, 0x2e, 0x74, 0x6f, 0x70, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x2e, 0x61,
	0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x76, 0x33, 0x30, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x41, 0x6c, 0x6c,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0xaf, 0x01, 0x0a, 0x16, 0x45, 0x78, 0x70,
	0x6f, 0x72, 0x74, 0x54, 0x6f, 0x70, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x53, 0x6e, 0x61, 0x70, 0x73,
	0x68, 0x6f, 0x74, 0x12, 0x49, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x64, 0x69, 0x67, 0x69, 0x74, 0x61,
	0x6c, 0x61, 0x73, 0x73, 0x65, 0x74, 0x2e, 0x63, 0x61, 0x6e, 0x74, 0x6f, 0x6e, 0x2e, 0x74, 0x6f,
	0x70, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x76, 0x33, 0x30,
	0x2e, 0x45, 0x78, 0x70, 0x6f, 0x72, 0x74, 0x54, 0x6f, 0x70, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x53,
	0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x4a,
	0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x64, 0x69, 0x67, 0x69, 0x74, 0x61, 0x6c, 0x61, 0x73, 0x73, 0x65,
	0x74, 0x2e, 0x63, 0x61, 0x6e, 0x74, 0x6f, 0x6e, 0x2e, 0x74, 0x6f, 0x70, 0x6f, 0x6c, 0x6f, 0x67,
	0x79, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x76, 0x33, 0x30, 0x2e, 0x45, 0x78, 0x70, 0x6f,
	0x72, 0x74, 0x54, 0x6f, 0x70, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x53, 0x6e, 0x61, 0x70, 0x73, 0x68,
	0x6f, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x93, 0x01, 0x0a, 0x0c, 0x47,
	0x65, 0x6e, 0x65, 0x73, 0x69, 0x73, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x3f, 0x2e, 0x63, 0x6f,
	0x6d, 0x2e, 0x64, 0x69, 0x67, 0x69, 0x74, 0x61, 0x6c, 0x61, 0x73, 0x73, 0x65, 0x74, 0x2e, 0x63,
	0x61, 0x6e, 0x74, 0x6f, 0x6e, 0x2e, 0x74, 0x6f, 0x70, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x2e, 0x61,
	0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x76, 0x33, 0x30, 0x2e, 0x47, 0x65, 0x6e, 0x65, 0x73, 0x69, 0x73,
	0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x40, 0x2e, 0x63,
	0x6f, 0x6d, 0x2e, 0x64, 0x69, 0x67, 0x69, 0x74, 0x61, 0x6c, 0x61, 0x73, 0x73, 0x65, 0x74, 0x2e,
	0x63, 0x61, 0x6e, 0x74, 0x6f, 0x6e, 0x2e, 0x74, 0x6f, 0x70, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x2e,
	0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x76, 0x33, 0x30, 0x2e, 0x47, 0x65, 0x6e, 0x65, 0x73, 0x69,
	0x73, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x30, 0x01,
	0x42, 0x5b, 0x5a, 0x59, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x64,
	0x69, 0x67, 0x69, 0x74, 0x61, 0x6c, 0x2d, 0x61, 0x73, 0x73, 0x65, 0x74, 0x2f, 0x64, 0x61, 0x7a,
	0x6c, 0x2d, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2f, 0x76, 0x38, 0x2f, 0x67, 0x6f, 0x2f, 0x61,
	0x70, 0x69, 0x2f, 0x63, 0x6f, 0x6d, 0x2f, 0x64, 0x69, 0x67, 0x69, 0x74, 0x61, 0x6c, 0x61, 0x73,
	0x73, 0x65, 0x74, 0x2f, 0x63, 0x61, 0x6e, 0x74, 0x6f, 0x6e, 0x2f, 0x74, 0x6f, 0x70, 0x6f, 0x6c,
	0x6f, 0x67, 0x79, 0x2f, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2f, 0x76, 0x33, 0x30, 0x62, 0x06, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_com_digitalasset_canton_topology_admin_v30_topology_manager_read_service_proto_rawDescOnce sync.Once
	file_com_digitalasset_canton_topology_admin_v30_topology_manager_read_service_proto_rawDescData = file_com_digitalasset_canton_topology_admin_v30_topology_manager_read_service_proto_rawDesc
)

func file_com_digitalasset_canton_topology_admin_v30_topology_manager_read_service_proto_rawDescGZIP() []byte {
	file_com_digitalasset_canton_topology_admin_v30_topology_manager_read_service_proto_rawDescOnce.Do(func() {
		file_com_digitalasset_canton_topology_admin_v30_topology_manager_read_service_proto_rawDescData = protoimpl.X.CompressGZIP(file_com_digitalasset_canton_topology_admin_v30_topology_manager_read_service_proto_rawDescData)
	})
	return file_com_digitalasset_canton_topology_admin_v30_topology_manager_read_service_proto_rawDescData
}

var file_com_digitalasset_canton_topology_admin_v30_topology_manager_read_service_proto_msgTypes = make([]protoimpl.MessageInfo, 59)
var file_com_digitalasset_canton_topology_admin_v30_topology_manager_read_service_proto_goTypes = []any{
	(*BaseQuery)(nil),                                           // 0: com.digitalasset.canton.topology.admin.v30.BaseQuery
	(*Store)(nil),                                               // 1: com.digitalasset.canton.topology.admin.v30.Store
	(*BaseResult)(nil),                                          // 2: com.digitalasset.canton.topology.admin.v30.BaseResult
	(*ListNamespaceDelegationRequest)(nil),                      // 3: com.digitalasset.canton.topology.admin.v30.ListNamespaceDelegationRequest
	(*ListNamespaceDelegationResponse)(nil),                     // 4: com.digitalasset.canton.topology.admin.v30.ListNamespaceDelegationResponse
	(*ListDecentralizedNamespaceDefinitionRequest)(nil),         // 5: com.digitalasset.canton.topology.admin.v30.ListDecentralizedNamespaceDefinitionRequest
	(*ListDecentralizedNamespaceDefinitionResponse)(nil),        // 6: com.digitalasset.canton.topology.admin.v30.ListDecentralizedNamespaceDefinitionResponse
	(*ListIdentifierDelegationRequest)(nil),                     // 7: com.digitalasset.canton.topology.admin.v30.ListIdentifierDelegationRequest
	(*ListIdentifierDelegationResponse)(nil),                    // 8: com.digitalasset.canton.topology.admin.v30.ListIdentifierDelegationResponse
	(*ListOwnerToKeyMappingRequest)(nil),                        // 9: com.digitalasset.canton.topology.admin.v30.ListOwnerToKeyMappingRequest
	(*ListOwnerToKeyMappingResponse)(nil),                       // 10: com.digitalasset.canton.topology.admin.v30.ListOwnerToKeyMappingResponse
	(*ListPartyToKeyMappingRequest)(nil),                        // 11: com.digitalasset.canton.topology.admin.v30.ListPartyToKeyMappingRequest
	(*ListPartyToKeyMappingResponse)(nil),                       // 12: com.digitalasset.canton.topology.admin.v30.ListPartyToKeyMappingResponse
	(*ListDomainTrustCertificateRequest)(nil),                   // 13: com.digitalasset.canton.topology.admin.v30.ListDomainTrustCertificateRequest
	(*ListDomainTrustCertificateResponse)(nil),                  // 14: com.digitalasset.canton.topology.admin.v30.ListDomainTrustCertificateResponse
	(*ListParticipantDomainPermissionRequest)(nil),              // 15: com.digitalasset.canton.topology.admin.v30.ListParticipantDomainPermissionRequest
	(*ListParticipantDomainPermissionResponse)(nil),             // 16: com.digitalasset.canton.topology.admin.v30.ListParticipantDomainPermissionResponse
	(*ListPartyHostingLimitsRequest)(nil),                       // 17: com.digitalasset.canton.topology.admin.v30.ListPartyHostingLimitsRequest
	(*ListPartyHostingLimitsResponse)(nil),                      // 18: com.digitalasset.canton.topology.admin.v30.ListPartyHostingLimitsResponse
	(*ListVettedPackagesRequest)(nil),                           // 19: com.digitalasset.canton.topology.admin.v30.ListVettedPackagesRequest
	(*ListVettedPackagesResponse)(nil),                          // 20: com.digitalasset.canton.topology.admin.v30.ListVettedPackagesResponse
	(*ListPartyToParticipantRequest)(nil),                       // 21: com.digitalasset.canton.topology.admin.v30.ListPartyToParticipantRequest
	(*ListPartyToParticipantResponse)(nil),                      // 22: com.digitalasset.canton.topology.admin.v30.ListPartyToParticipantResponse
	(*ListAuthorityOfRequest)(nil),                              // 23: com.digitalasset.canton.topology.admin.v30.ListAuthorityOfRequest
	(*ListAuthorityOfResponse)(nil),                             // 24: com.digitalasset.canton.topology.admin.v30.ListAuthorityOfResponse
	(*ListDomainParametersStateRequest)(nil),                    // 25: com.digitalasset.canton.topology.admin.v30.ListDomainParametersStateRequest
	(*ListDomainParametersStateResponse)(nil),                   // 26: com.digitalasset.canton.topology.admin.v30.ListDomainParametersStateResponse
	(*ListMediatorDomainStateRequest)(nil),                      // 27: com.digitalasset.canton.topology.admin.v30.ListMediatorDomainStateRequest
	(*ListMediatorDomainStateResponse)(nil),                     // 28: com.digitalasset.canton.topology.admin.v30.ListMediatorDomainStateResponse
	(*ListSequencerDomainStateRequest)(nil),                     // 29: com.digitalasset.canton.topology.admin.v30.ListSequencerDomainStateRequest
	(*ListSequencerDomainStateResponse)(nil),                    // 30: com.digitalasset.canton.topology.admin.v30.ListSequencerDomainStateResponse
	(*ListPurgeTopologyTransactionRequest)(nil),                 // 31: com.digitalasset.canton.topology.admin.v30.ListPurgeTopologyTransactionRequest
	(*ListPurgeTopologyTransactionResponse)(nil),                // 32: com.digitalasset.canton.topology.admin.v30.ListPurgeTopologyTransactionResponse
	(*ListAvailableStoresRequest)(nil),                          // 33: com.digitalasset.canton.topology.admin.v30.ListAvailableStoresRequest
	(*ListAvailableStoresResponse)(nil),                         // 34: com.digitalasset.canton.topology.admin.v30.ListAvailableStoresResponse
	(*ListAllRequest)(nil),                                      // 35: com.digitalasset.canton.topology.admin.v30.ListAllRequest
	(*ExportTopologySnapshotRequest)(nil),                       // 36: com.digitalasset.canton.topology.admin.v30.ExportTopologySnapshotRequest
	(*ListAllResponse)(nil),                                     // 37: com.digitalasset.canton.topology.admin.v30.ListAllResponse
	(*ExportTopologySnapshotResponse)(nil),                      // 38: com.digitalasset.canton.topology.admin.v30.ExportTopologySnapshotResponse
	(*GenesisStateRequest)(nil),                                 // 39: com.digitalasset.canton.topology.admin.v30.GenesisStateRequest
	(*GenesisStateResponse)(nil),                                // 40: com.digitalasset.canton.topology.admin.v30.GenesisStateResponse
	(*BaseQuery_TimeRange)(nil),                                 // 41: com.digitalasset.canton.topology.admin.v30.BaseQuery.TimeRange
	(*Store_Authorized)(nil),                                    // 42: com.digitalasset.canton.topology.admin.v30.Store.Authorized
	(*Store_Domain)(nil),                                        // 43: com.digitalasset.canton.topology.admin.v30.Store.Domain
	(*ListNamespaceDelegationResponse_Result)(nil),              // 44: com.digitalasset.canton.topology.admin.v30.ListNamespaceDelegationResponse.Result
	(*ListDecentralizedNamespaceDefinitionResponse_Result)(nil), // 45: com.digitalasset.canton.topology.admin.v30.ListDecentralizedNamespaceDefinitionResponse.Result
	(*ListIdentifierDelegationResponse_Result)(nil),             // 46: com.digitalasset.canton.topology.admin.v30.ListIdentifierDelegationResponse.Result
	(*ListOwnerToKeyMappingResponse_Result)(nil),                // 47: com.digitalasset.canton.topology.admin.v30.ListOwnerToKeyMappingResponse.Result
	(*ListPartyToKeyMappingResponse_Result)(nil),                // 48: com.digitalasset.canton.topology.admin.v30.ListPartyToKeyMappingResponse.Result
	(*ListDomainTrustCertificateResponse_Result)(nil),           // 49: com.digitalasset.canton.topology.admin.v30.ListDomainTrustCertificateResponse.Result
	(*ListParticipantDomainPermissionResponse_Result)(nil),      // 50: com.digitalasset.canton.topology.admin.v30.ListParticipantDomainPermissionResponse.Result
	(*ListPartyHostingLimitsResponse_Result)(nil),               // 51: com.digitalasset.canton.topology.admin.v30.ListPartyHostingLimitsResponse.Result
	(*ListVettedPackagesResponse_Result)(nil),                   // 52: com.digitalasset.canton.topology.admin.v30.ListVettedPackagesResponse.Result
	(*ListPartyToParticipantResponse_Result)(nil),               // 53: com.digitalasset.canton.topology.admin.v30.ListPartyToParticipantResponse.Result
	(*ListAuthorityOfResponse_Result)(nil),                      // 54: com.digitalasset.canton.topology.admin.v30.ListAuthorityOfResponse.Result
	(*ListDomainParametersStateResponse_Result)(nil),            // 55: com.digitalasset.canton.topology.admin.v30.ListDomainParametersStateResponse.Result
	(*ListMediatorDomainStateResponse_Result)(nil),              // 56: com.digitalasset.canton.topology.admin.v30.ListMediatorDomainStateResponse.Result
	(*ListSequencerDomainStateResponse_Result)(nil),             // 57: com.digitalasset.canton.topology.admin.v30.ListSequencerDomainStateResponse.Result
	(*ListPurgeTopologyTransactionResponse_Result)(nil),         // 58: com.digitalasset.canton.topology.admin.v30.ListPurgeTopologyTransactionResponse.Result
	(v30.Enums_TopologyChangeOp)(0),                             // 59: com.digitalasset.canton.protocol.v30.Enums.TopologyChangeOp
	(*timestamppb.Timestamp)(nil),                               // 60: google.protobuf.Timestamp
	(*emptypb.Empty)(nil),                                       // 61: google.protobuf.Empty
	(*wrapperspb.Int32Value)(nil),                               // 62: google.protobuf.Int32Value
	(*TopologyTransactions)(nil),                                // 63: com.digitalasset.canton.topology.admin.v30.TopologyTransactions
	(*v30.NamespaceDelegation)(nil),                             // 64: com.digitalasset.canton.protocol.v30.NamespaceDelegation
	(*v30.DecentralizedNamespaceDefinition)(nil),                // 65: com.digitalasset.canton.protocol.v30.DecentralizedNamespaceDefinition
	(*v30.IdentifierDelegation)(nil),                            // 66: com.digitalasset.canton.protocol.v30.IdentifierDelegation
	(*v30.OwnerToKeyMapping)(nil),                               // 67: com.digitalasset.canton.protocol.v30.OwnerToKeyMapping
	(*v30.PartyToKeyMapping)(nil),                               // 68: com.digitalasset.canton.protocol.v30.PartyToKeyMapping
	(*v30.DomainTrustCertificate)(nil),                          // 69: com.digitalasset.canton.protocol.v30.DomainTrustCertificate
	(*v30.ParticipantDomainPermission)(nil),                     // 70: com.digitalasset.canton.protocol.v30.ParticipantDomainPermission
	(*v30.PartyHostingLimits)(nil),                              // 71: com.digitalasset.canton.protocol.v30.PartyHostingLimits
	(*v30.VettedPackages)(nil),                                  // 72: com.digitalasset.canton.protocol.v30.VettedPackages
	(*v30.PartyToParticipant)(nil),                              // 73: com.digitalasset.canton.protocol.v30.PartyToParticipant
	(*v30.AuthorityOf)(nil),                                     // 74: com.digitalasset.canton.protocol.v30.AuthorityOf
	(*v30.DynamicDomainParameters)(nil),                         // 75: com.digitalasset.canton.protocol.v30.DynamicDomainParameters
	(*v30.MediatorDomainState)(nil),                             // 76: com.digitalasset.canton.protocol.v30.MediatorDomainState
	(*v30.SequencerDomainState)(nil),                            // 77: com.digitalasset.canton.protocol.v30.SequencerDomainState
	(*v30.PurgeTopologyTransaction)(nil),                        // 78: com.digitalasset.canton.protocol.v30.PurgeTopologyTransaction
}
var file_com_digitalasset_canton_topology_admin_v30_topology_manager_read_service_proto_depIdxs = []int32{
	1,  // 0: com.digitalasset.canton.topology.admin.v30.BaseQuery.filter_store:type_name -> com.digitalasset.canton.topology.admin.v30.Store
	59, // 1: com.digitalasset.canton.topology.admin.v30.BaseQuery.operation:type_name -> com.digitalasset.canton.protocol.v30.Enums.TopologyChangeOp
	60, // 2: com.digitalasset.canton.topology.admin.v30.BaseQuery.snapshot:type_name -> google.protobuf.Timestamp
	61, // 3: com.digitalasset.canton.topology.admin.v30.BaseQuery.head_state:type_name -> google.protobuf.Empty
	41, // 4: com.digitalasset.canton.topology.admin.v30.BaseQuery.range:type_name -> com.digitalasset.canton.topology.admin.v30.BaseQuery.TimeRange
	62, // 5: com.digitalasset.canton.topology.admin.v30.BaseQuery.protocol_version:type_name -> google.protobuf.Int32Value
	42, // 6: com.digitalasset.canton.topology.admin.v30.Store.authorized:type_name -> com.digitalasset.canton.topology.admin.v30.Store.Authorized
	43, // 7: com.digitalasset.canton.topology.admin.v30.Store.domain:type_name -> com.digitalasset.canton.topology.admin.v30.Store.Domain
	1,  // 8: com.digitalasset.canton.topology.admin.v30.BaseResult.store:type_name -> com.digitalasset.canton.topology.admin.v30.Store
	60, // 9: com.digitalasset.canton.topology.admin.v30.BaseResult.sequenced:type_name -> google.protobuf.Timestamp
	60, // 10: com.digitalasset.canton.topology.admin.v30.BaseResult.valid_from:type_name -> google.protobuf.Timestamp
	60, // 11: com.digitalasset.canton.topology.admin.v30.BaseResult.valid_until:type_name -> google.protobuf.Timestamp
	59, // 12: com.digitalasset.canton.topology.admin.v30.BaseResult.operation:type_name -> com.digitalasset.canton.protocol.v30.Enums.TopologyChangeOp
	0,  // 13: com.digitalasset.canton.topology.admin.v30.ListNamespaceDelegationRequest.base_query:type_name -> com.digitalasset.canton.topology.admin.v30.BaseQuery
	44, // 14: com.digitalasset.canton.topology.admin.v30.ListNamespaceDelegationResponse.results:type_name -> com.digitalasset.canton.topology.admin.v30.ListNamespaceDelegationResponse.Result
	0,  // 15: com.digitalasset.canton.topology.admin.v30.ListDecentralizedNamespaceDefinitionRequest.base_query:type_name -> com.digitalasset.canton.topology.admin.v30.BaseQuery
	45, // 16: com.digitalasset.canton.topology.admin.v30.ListDecentralizedNamespaceDefinitionResponse.results:type_name -> com.digitalasset.canton.topology.admin.v30.ListDecentralizedNamespaceDefinitionResponse.Result
	0,  // 17: com.digitalasset.canton.topology.admin.v30.ListIdentifierDelegationRequest.base_query:type_name -> com.digitalasset.canton.topology.admin.v30.BaseQuery
	46, // 18: com.digitalasset.canton.topology.admin.v30.ListIdentifierDelegationResponse.results:type_name -> com.digitalasset.canton.topology.admin.v30.ListIdentifierDelegationResponse.Result
	0,  // 19: com.digitalasset.canton.topology.admin.v30.ListOwnerToKeyMappingRequest.base_query:type_name -> com.digitalasset.canton.topology.admin.v30.BaseQuery
	47, // 20: com.digitalasset.canton.topology.admin.v30.ListOwnerToKeyMappingResponse.results:type_name -> com.digitalasset.canton.topology.admin.v30.ListOwnerToKeyMappingResponse.Result
	0,  // 21: com.digitalasset.canton.topology.admin.v30.ListPartyToKeyMappingRequest.base_query:type_name -> com.digitalasset.canton.topology.admin.v30.BaseQuery
	48, // 22: com.digitalasset.canton.topology.admin.v30.ListPartyToKeyMappingResponse.results:type_name -> com.digitalasset.canton.topology.admin.v30.ListPartyToKeyMappingResponse.Result
	0,  // 23: com.digitalasset.canton.topology.admin.v30.ListDomainTrustCertificateRequest.base_query:type_name -> com.digitalasset.canton.topology.admin.v30.BaseQuery
	49, // 24: com.digitalasset.canton.topology.admin.v30.ListDomainTrustCertificateResponse.results:type_name -> com.digitalasset.canton.topology.admin.v30.ListDomainTrustCertificateResponse.Result
	0,  // 25: com.digitalasset.canton.topology.admin.v30.ListParticipantDomainPermissionRequest.base_query:type_name -> com.digitalasset.canton.topology.admin.v30.BaseQuery
	50, // 26: com.digitalasset.canton.topology.admin.v30.ListParticipantDomainPermissionResponse.results:type_name -> com.digitalasset.canton.topology.admin.v30.ListParticipantDomainPermissionResponse.Result
	0,  // 27: com.digitalasset.canton.topology.admin.v30.ListPartyHostingLimitsRequest.base_query:type_name -> com.digitalasset.canton.topology.admin.v30.BaseQuery
	51, // 28: com.digitalasset.canton.topology.admin.v30.ListPartyHostingLimitsResponse.results:type_name -> com.digitalasset.canton.topology.admin.v30.ListPartyHostingLimitsResponse.Result
	0,  // 29: com.digitalasset.canton.topology.admin.v30.ListVettedPackagesRequest.base_query:type_name -> com.digitalasset.canton.topology.admin.v30.BaseQuery
	52, // 30: com.digitalasset.canton.topology.admin.v30.ListVettedPackagesResponse.results:type_name -> com.digitalasset.canton.topology.admin.v30.ListVettedPackagesResponse.Result
	0,  // 31: com.digitalasset.canton.topology.admin.v30.ListPartyToParticipantRequest.base_query:type_name -> com.digitalasset.canton.topology.admin.v30.BaseQuery
	53, // 32: com.digitalasset.canton.topology.admin.v30.ListPartyToParticipantResponse.results:type_name -> com.digitalasset.canton.topology.admin.v30.ListPartyToParticipantResponse.Result
	0,  // 33: com.digitalasset.canton.topology.admin.v30.ListAuthorityOfRequest.base_query:type_name -> com.digitalasset.canton.topology.admin.v30.BaseQuery
	54, // 34: com.digitalasset.canton.topology.admin.v30.ListAuthorityOfResponse.results:type_name -> com.digitalasset.canton.topology.admin.v30.ListAuthorityOfResponse.Result
	0,  // 35: com.digitalasset.canton.topology.admin.v30.ListDomainParametersStateRequest.base_query:type_name -> com.digitalasset.canton.topology.admin.v30.BaseQuery
	55, // 36: com.digitalasset.canton.topology.admin.v30.ListDomainParametersStateResponse.results:type_name -> com.digitalasset.canton.topology.admin.v30.ListDomainParametersStateResponse.Result
	0,  // 37: com.digitalasset.canton.topology.admin.v30.ListMediatorDomainStateRequest.base_query:type_name -> com.digitalasset.canton.topology.admin.v30.BaseQuery
	56, // 38: com.digitalasset.canton.topology.admin.v30.ListMediatorDomainStateResponse.results:type_name -> com.digitalasset.canton.topology.admin.v30.ListMediatorDomainStateResponse.Result
	0,  // 39: com.digitalasset.canton.topology.admin.v30.ListSequencerDomainStateRequest.base_query:type_name -> com.digitalasset.canton.topology.admin.v30.BaseQuery
	57, // 40: com.digitalasset.canton.topology.admin.v30.ListSequencerDomainStateResponse.results:type_name -> com.digitalasset.canton.topology.admin.v30.ListSequencerDomainStateResponse.Result
	0,  // 41: com.digitalasset.canton.topology.admin.v30.ListPurgeTopologyTransactionRequest.base_query:type_name -> com.digitalasset.canton.topology.admin.v30.BaseQuery
	58, // 42: com.digitalasset.canton.topology.admin.v30.ListPurgeTopologyTransactionResponse.results:type_name -> com.digitalasset.canton.topology.admin.v30.ListPurgeTopologyTransactionResponse.Result
	0,  // 43: com.digitalasset.canton.topology.admin.v30.ListAllRequest.base_query:type_name -> com.digitalasset.canton.topology.admin.v30.BaseQuery
	0,  // 44: com.digitalasset.canton.topology.admin.v30.ExportTopologySnapshotRequest.base_query:type_name -> com.digitalasset.canton.topology.admin.v30.BaseQuery
	63, // 45: com.digitalasset.canton.topology.admin.v30.ListAllResponse.result:type_name -> com.digitalasset.canton.topology.admin.v30.TopologyTransactions
	1,  // 46: com.digitalasset.canton.topology.admin.v30.GenesisStateRequest.filter_domain_store:type_name -> com.digitalasset.canton.topology.admin.v30.Store
	60, // 47: com.digitalasset.canton.topology.admin.v30.GenesisStateRequest.timestamp:type_name -> google.protobuf.Timestamp
	60, // 48: com.digitalasset.canton.topology.admin.v30.BaseQuery.TimeRange.from:type_name -> google.protobuf.Timestamp
	60, // 49: com.digitalasset.canton.topology.admin.v30.BaseQuery.TimeRange.until:type_name -> google.protobuf.Timestamp
	2,  // 50: com.digitalasset.canton.topology.admin.v30.ListNamespaceDelegationResponse.Result.context:type_name -> com.digitalasset.canton.topology.admin.v30.BaseResult
	64, // 51: com.digitalasset.canton.topology.admin.v30.ListNamespaceDelegationResponse.Result.item:type_name -> com.digitalasset.canton.protocol.v30.NamespaceDelegation
	2,  // 52: com.digitalasset.canton.topology.admin.v30.ListDecentralizedNamespaceDefinitionResponse.Result.context:type_name -> com.digitalasset.canton.topology.admin.v30.BaseResult
	65, // 53: com.digitalasset.canton.topology.admin.v30.ListDecentralizedNamespaceDefinitionResponse.Result.item:type_name -> com.digitalasset.canton.protocol.v30.DecentralizedNamespaceDefinition
	2,  // 54: com.digitalasset.canton.topology.admin.v30.ListIdentifierDelegationResponse.Result.context:type_name -> com.digitalasset.canton.topology.admin.v30.BaseResult
	66, // 55: com.digitalasset.canton.topology.admin.v30.ListIdentifierDelegationResponse.Result.item:type_name -> com.digitalasset.canton.protocol.v30.IdentifierDelegation
	2,  // 56: com.digitalasset.canton.topology.admin.v30.ListOwnerToKeyMappingResponse.Result.context:type_name -> com.digitalasset.canton.topology.admin.v30.BaseResult
	67, // 57: com.digitalasset.canton.topology.admin.v30.ListOwnerToKeyMappingResponse.Result.item:type_name -> com.digitalasset.canton.protocol.v30.OwnerToKeyMapping
	2,  // 58: com.digitalasset.canton.topology.admin.v30.ListPartyToKeyMappingResponse.Result.context:type_name -> com.digitalasset.canton.topology.admin.v30.BaseResult
	68, // 59: com.digitalasset.canton.topology.admin.v30.ListPartyToKeyMappingResponse.Result.item:type_name -> com.digitalasset.canton.protocol.v30.PartyToKeyMapping
	2,  // 60: com.digitalasset.canton.topology.admin.v30.ListDomainTrustCertificateResponse.Result.context:type_name -> com.digitalasset.canton.topology.admin.v30.BaseResult
	69, // 61: com.digitalasset.canton.topology.admin.v30.ListDomainTrustCertificateResponse.Result.item:type_name -> com.digitalasset.canton.protocol.v30.DomainTrustCertificate
	2,  // 62: com.digitalasset.canton.topology.admin.v30.ListParticipantDomainPermissionResponse.Result.context:type_name -> com.digitalasset.canton.topology.admin.v30.BaseResult
	70, // 63: com.digitalasset.canton.topology.admin.v30.ListParticipantDomainPermissionResponse.Result.item:type_name -> com.digitalasset.canton.protocol.v30.ParticipantDomainPermission
	2,  // 64: com.digitalasset.canton.topology.admin.v30.ListPartyHostingLimitsResponse.Result.context:type_name -> com.digitalasset.canton.topology.admin.v30.BaseResult
	71, // 65: com.digitalasset.canton.topology.admin.v30.ListPartyHostingLimitsResponse.Result.item:type_name -> com.digitalasset.canton.protocol.v30.PartyHostingLimits
	2,  // 66: com.digitalasset.canton.topology.admin.v30.ListVettedPackagesResponse.Result.context:type_name -> com.digitalasset.canton.topology.admin.v30.BaseResult
	72, // 67: com.digitalasset.canton.topology.admin.v30.ListVettedPackagesResponse.Result.item:type_name -> com.digitalasset.canton.protocol.v30.VettedPackages
	2,  // 68: com.digitalasset.canton.topology.admin.v30.ListPartyToParticipantResponse.Result.context:type_name -> com.digitalasset.canton.topology.admin.v30.BaseResult
	73, // 69: com.digitalasset.canton.topology.admin.v30.ListPartyToParticipantResponse.Result.item:type_name -> com.digitalasset.canton.protocol.v30.PartyToParticipant
	2,  // 70: com.digitalasset.canton.topology.admin.v30.ListAuthorityOfResponse.Result.context:type_name -> com.digitalasset.canton.topology.admin.v30.BaseResult
	74, // 71: com.digitalasset.canton.topology.admin.v30.ListAuthorityOfResponse.Result.item:type_name -> com.digitalasset.canton.protocol.v30.AuthorityOf
	2,  // 72: com.digitalasset.canton.topology.admin.v30.ListDomainParametersStateResponse.Result.context:type_name -> com.digitalasset.canton.topology.admin.v30.BaseResult
	75, // 73: com.digitalasset.canton.topology.admin.v30.ListDomainParametersStateResponse.Result.item:type_name -> com.digitalasset.canton.protocol.v30.DynamicDomainParameters
	2,  // 74: com.digitalasset.canton.topology.admin.v30.ListMediatorDomainStateResponse.Result.context:type_name -> com.digitalasset.canton.topology.admin.v30.BaseResult
	76, // 75: com.digitalasset.canton.topology.admin.v30.ListMediatorDomainStateResponse.Result.item:type_name -> com.digitalasset.canton.protocol.v30.MediatorDomainState
	2,  // 76: com.digitalasset.canton.topology.admin.v30.ListSequencerDomainStateResponse.Result.context:type_name -> com.digitalasset.canton.topology.admin.v30.BaseResult
	77, // 77: com.digitalasset.canton.topology.admin.v30.ListSequencerDomainStateResponse.Result.item:type_name -> com.digitalasset.canton.protocol.v30.SequencerDomainState
	2,  // 78: com.digitalasset.canton.topology.admin.v30.ListPurgeTopologyTransactionResponse.Result.context:type_name -> com.digitalasset.canton.topology.admin.v30.BaseResult
	78, // 79: com.digitalasset.canton.topology.admin.v30.ListPurgeTopologyTransactionResponse.Result.item:type_name -> com.digitalasset.canton.protocol.v30.PurgeTopologyTransaction
	3,  // 80: com.digitalasset.canton.topology.admin.v30.TopologyManagerReadService.ListNamespaceDelegation:input_type -> com.digitalasset.canton.topology.admin.v30.ListNamespaceDelegationRequest
	5,  // 81: com.digitalasset.canton.topology.admin.v30.TopologyManagerReadService.ListDecentralizedNamespaceDefinition:input_type -> com.digitalasset.canton.topology.admin.v30.ListDecentralizedNamespaceDefinitionRequest
	7,  // 82: com.digitalasset.canton.topology.admin.v30.TopologyManagerReadService.ListIdentifierDelegation:input_type -> com.digitalasset.canton.topology.admin.v30.ListIdentifierDelegationRequest
	9,  // 83: com.digitalasset.canton.topology.admin.v30.TopologyManagerReadService.ListOwnerToKeyMapping:input_type -> com.digitalasset.canton.topology.admin.v30.ListOwnerToKeyMappingRequest
	11, // 84: com.digitalasset.canton.topology.admin.v30.TopologyManagerReadService.ListPartyToKeyMapping:input_type -> com.digitalasset.canton.topology.admin.v30.ListPartyToKeyMappingRequest
	13, // 85: com.digitalasset.canton.topology.admin.v30.TopologyManagerReadService.ListDomainTrustCertificate:input_type -> com.digitalasset.canton.topology.admin.v30.ListDomainTrustCertificateRequest
	15, // 86: com.digitalasset.canton.topology.admin.v30.TopologyManagerReadService.ListParticipantDomainPermission:input_type -> com.digitalasset.canton.topology.admin.v30.ListParticipantDomainPermissionRequest
	17, // 87: com.digitalasset.canton.topology.admin.v30.TopologyManagerReadService.ListPartyHostingLimits:input_type -> com.digitalasset.canton.topology.admin.v30.ListPartyHostingLimitsRequest
	19, // 88: com.digitalasset.canton.topology.admin.v30.TopologyManagerReadService.ListVettedPackages:input_type -> com.digitalasset.canton.topology.admin.v30.ListVettedPackagesRequest
	21, // 89: com.digitalasset.canton.topology.admin.v30.TopologyManagerReadService.ListPartyToParticipant:input_type -> com.digitalasset.canton.topology.admin.v30.ListPartyToParticipantRequest
	23, // 90: com.digitalasset.canton.topology.admin.v30.TopologyManagerReadService.ListAuthorityOf:input_type -> com.digitalasset.canton.topology.admin.v30.ListAuthorityOfRequest
	25, // 91: com.digitalasset.canton.topology.admin.v30.TopologyManagerReadService.ListDomainParametersState:input_type -> com.digitalasset.canton.topology.admin.v30.ListDomainParametersStateRequest
	27, // 92: com.digitalasset.canton.topology.admin.v30.TopologyManagerReadService.ListMediatorDomainState:input_type -> com.digitalasset.canton.topology.admin.v30.ListMediatorDomainStateRequest
	29, // 93: com.digitalasset.canton.topology.admin.v30.TopologyManagerReadService.ListSequencerDomainState:input_type -> com.digitalasset.canton.topology.admin.v30.ListSequencerDomainStateRequest
	31, // 94: com.digitalasset.canton.topology.admin.v30.TopologyManagerReadService.ListPurgeTopologyTransaction:input_type -> com.digitalasset.canton.topology.admin.v30.ListPurgeTopologyTransactionRequest
	33, // 95: com.digitalasset.canton.topology.admin.v30.TopologyManagerReadService.ListAvailableStores:input_type -> com.digitalasset.canton.topology.admin.v30.ListAvailableStoresRequest
	35, // 96: com.digitalasset.canton.topology.admin.v30.TopologyManagerReadService.ListAll:input_type -> com.digitalasset.canton.topology.admin.v30.ListAllRequest
	36, // 97: com.digitalasset.canton.topology.admin.v30.TopologyManagerReadService.ExportTopologySnapshot:input_type -> com.digitalasset.canton.topology.admin.v30.ExportTopologySnapshotRequest
	39, // 98: com.digitalasset.canton.topology.admin.v30.TopologyManagerReadService.GenesisState:input_type -> com.digitalasset.canton.topology.admin.v30.GenesisStateRequest
	4,  // 99: com.digitalasset.canton.topology.admin.v30.TopologyManagerReadService.ListNamespaceDelegation:output_type -> com.digitalasset.canton.topology.admin.v30.ListNamespaceDelegationResponse
	6,  // 100: com.digitalasset.canton.topology.admin.v30.TopologyManagerReadService.ListDecentralizedNamespaceDefinition:output_type -> com.digitalasset.canton.topology.admin.v30.ListDecentralizedNamespaceDefinitionResponse
	8,  // 101: com.digitalasset.canton.topology.admin.v30.TopologyManagerReadService.ListIdentifierDelegation:output_type -> com.digitalasset.canton.topology.admin.v30.ListIdentifierDelegationResponse
	10, // 102: com.digitalasset.canton.topology.admin.v30.TopologyManagerReadService.ListOwnerToKeyMapping:output_type -> com.digitalasset.canton.topology.admin.v30.ListOwnerToKeyMappingResponse
	12, // 103: com.digitalasset.canton.topology.admin.v30.TopologyManagerReadService.ListPartyToKeyMapping:output_type -> com.digitalasset.canton.topology.admin.v30.ListPartyToKeyMappingResponse
	14, // 104: com.digitalasset.canton.topology.admin.v30.TopologyManagerReadService.ListDomainTrustCertificate:output_type -> com.digitalasset.canton.topology.admin.v30.ListDomainTrustCertificateResponse
	16, // 105: com.digitalasset.canton.topology.admin.v30.TopologyManagerReadService.ListParticipantDomainPermission:output_type -> com.digitalasset.canton.topology.admin.v30.ListParticipantDomainPermissionResponse
	18, // 106: com.digitalasset.canton.topology.admin.v30.TopologyManagerReadService.ListPartyHostingLimits:output_type -> com.digitalasset.canton.topology.admin.v30.ListPartyHostingLimitsResponse
	20, // 107: com.digitalasset.canton.topology.admin.v30.TopologyManagerReadService.ListVettedPackages:output_type -> com.digitalasset.canton.topology.admin.v30.ListVettedPackagesResponse
	22, // 108: com.digitalasset.canton.topology.admin.v30.TopologyManagerReadService.ListPartyToParticipant:output_type -> com.digitalasset.canton.topology.admin.v30.ListPartyToParticipantResponse
	24, // 109: com.digitalasset.canton.topology.admin.v30.TopologyManagerReadService.ListAuthorityOf:output_type -> com.digitalasset.canton.topology.admin.v30.ListAuthorityOfResponse
	26, // 110: com.digitalasset.canton.topology.admin.v30.TopologyManagerReadService.ListDomainParametersState:output_type -> com.digitalasset.canton.topology.admin.v30.ListDomainParametersStateResponse
	28, // 111: com.digitalasset.canton.topology.admin.v30.TopologyManagerReadService.ListMediatorDomainState:output_type -> com.digitalasset.canton.topology.admin.v30.ListMediatorDomainStateResponse
	30, // 112: com.digitalasset.canton.topology.admin.v30.TopologyManagerReadService.ListSequencerDomainState:output_type -> com.digitalasset.canton.topology.admin.v30.ListSequencerDomainStateResponse
	32, // 113: com.digitalasset.canton.topology.admin.v30.TopologyManagerReadService.ListPurgeTopologyTransaction:output_type -> com.digitalasset.canton.topology.admin.v30.ListPurgeTopologyTransactionResponse
	34, // 114: com.digitalasset.canton.topology.admin.v30.TopologyManagerReadService.ListAvailableStores:output_type -> com.digitalasset.canton.topology.admin.v30.ListAvailableStoresResponse
	37, // 115: com.digitalasset.canton.topology.admin.v30.TopologyManagerReadService.ListAll:output_type -> com.digitalasset.canton.topology.admin.v30.ListAllResponse
	38, // 116: com.digitalasset.canton.topology.admin.v30.TopologyManagerReadService.ExportTopologySnapshot:output_type -> com.digitalasset.canton.topology.admin.v30.ExportTopologySnapshotResponse
	40, // 117: com.digitalasset.canton.topology.admin.v30.TopologyManagerReadService.GenesisState:output_type -> com.digitalasset.canton.topology.admin.v30.GenesisStateResponse
	99, // [99:118] is the sub-list for method output_type
	80, // [80:99] is the sub-list for method input_type
	80, // [80:80] is the sub-list for extension type_name
	80, // [80:80] is the sub-list for extension extendee
	0,  // [0:80] is the sub-list for field type_name
}

func init() {
	file_com_digitalasset_canton_topology_admin_v30_topology_manager_read_service_proto_init()
}
func file_com_digitalasset_canton_topology_admin_v30_topology_manager_read_service_proto_init() {
	if File_com_digitalasset_canton_topology_admin_v30_topology_manager_read_service_proto != nil {
		return
	}
	file_com_digitalasset_canton_topology_admin_v30_topology_ext_proto_init()
	file_com_digitalasset_canton_topology_admin_v30_topology_manager_read_service_proto_msgTypes[0].OneofWrappers = []any{
		(*BaseQuery_Snapshot)(nil),
		(*BaseQuery_HeadState)(nil),
		(*BaseQuery_Range)(nil),
	}
	file_com_digitalasset_canton_topology_admin_v30_topology_manager_read_service_proto_msgTypes[1].OneofWrappers = []any{
		(*Store_Authorized_)(nil),
		(*Store_Domain_)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_com_digitalasset_canton_topology_admin_v30_topology_manager_read_service_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   59,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_com_digitalasset_canton_topology_admin_v30_topology_manager_read_service_proto_goTypes,
		DependencyIndexes: file_com_digitalasset_canton_topology_admin_v30_topology_manager_read_service_proto_depIdxs,
		MessageInfos:      file_com_digitalasset_canton_topology_admin_v30_topology_manager_read_service_proto_msgTypes,
	}.Build()
	File_com_digitalasset_canton_topology_admin_v30_topology_manager_read_service_proto = out.File
	file_com_digitalasset_canton_topology_admin_v30_topology_manager_read_service_proto_rawDesc = nil
	file_com_digitalasset_canton_topology_admin_v30_topology_manager_read_service_proto_goTypes = nil
	file_com_digitalasset_canton_topology_admin_v30_topology_manager_read_service_proto_depIdxs = nil
}
