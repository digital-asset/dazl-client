// Copyright (c) 2017-2025 Digital Asset (Switzerland) GmbH and/or its affiliates. All rights reserved.
// SPDX-License-Identifier: Apache-2.0
// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.35.2
// 	protoc        v5.27.2
// source: com/digitalasset/canton/topology/admin/v0/topology_manager_write_service.proto

package v0

import (
	v01 "github.com/digital-asset/dazl-client/v8/go/api/com/digitalasset/canton/crypto/v0"
	v0 "github.com/digital-asset/dazl-client/v8/go/api/com/digitalasset/canton/protocol/v0"
	v1 "github.com/digital-asset/dazl-client/v8/go/api/com/digitalasset/canton/protocol/v1"
	v2 "github.com/digital-asset/dazl-client/v8/go/api/com/digitalasset/canton/protocol/v2"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type AuthorizationSuccess struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Serialized []byte `protobuf:"bytes,1,opt,name=serialized,proto3" json:"serialized,omitempty"`
}

func (x *AuthorizationSuccess) Reset() {
	*x = AuthorizationSuccess{}
	mi := &file_com_digitalasset_canton_topology_admin_v0_topology_manager_write_service_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AuthorizationSuccess) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AuthorizationSuccess) ProtoMessage() {}

func (x *AuthorizationSuccess) ProtoReflect() protoreflect.Message {
	mi := &file_com_digitalasset_canton_topology_admin_v0_topology_manager_write_service_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AuthorizationSuccess.ProtoReflect.Descriptor instead.
func (*AuthorizationSuccess) Descriptor() ([]byte, []int) {
	return file_com_digitalasset_canton_topology_admin_v0_topology_manager_write_service_proto_rawDescGZIP(), []int{0}
}

func (x *AuthorizationSuccess) GetSerialized() []byte {
	if x != nil {
		return x.Serialized
	}
	return nil
}

type AdditionSuccess struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *AdditionSuccess) Reset() {
	*x = AdditionSuccess{}
	mi := &file_com_digitalasset_canton_topology_admin_v0_topology_manager_write_service_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AdditionSuccess) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AdditionSuccess) ProtoMessage() {}

func (x *AdditionSuccess) ProtoReflect() protoreflect.Message {
	mi := &file_com_digitalasset_canton_topology_admin_v0_topology_manager_write_service_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AdditionSuccess.ProtoReflect.Descriptor instead.
func (*AdditionSuccess) Descriptor() ([]byte, []int) {
	return file_com_digitalasset_canton_topology_admin_v0_topology_manager_write_service_proto_rawDescGZIP(), []int{1}
}

type SignedTopologyTransactionAddition struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Serialized []byte `protobuf:"bytes,1,opt,name=serialized,proto3" json:"serialized,omitempty"`
}

func (x *SignedTopologyTransactionAddition) Reset() {
	*x = SignedTopologyTransactionAddition{}
	mi := &file_com_digitalasset_canton_topology_admin_v0_topology_manager_write_service_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SignedTopologyTransactionAddition) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SignedTopologyTransactionAddition) ProtoMessage() {}

func (x *SignedTopologyTransactionAddition) ProtoReflect() protoreflect.Message {
	mi := &file_com_digitalasset_canton_topology_admin_v0_topology_manager_write_service_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SignedTopologyTransactionAddition.ProtoReflect.Descriptor instead.
func (*SignedTopologyTransactionAddition) Descriptor() ([]byte, []int) {
	return file_com_digitalasset_canton_topology_admin_v0_topology_manager_write_service_proto_rawDescGZIP(), []int{2}
}

func (x *SignedTopologyTransactionAddition) GetSerialized() []byte {
	if x != nil {
		return x.Serialized
	}
	return nil
}

type AuthorizationData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Change          v0.TopologyChangeOp `protobuf:"varint,1,opt,name=change,proto3,enum=com.digitalasset.canton.protocol.v0.TopologyChangeOp" json:"change,omitempty"`
	SignedBy        string              `protobuf:"bytes,2,opt,name=signed_by,json=signedBy,proto3" json:"signed_by,omitempty"`
	ReplaceExisting bool                `protobuf:"varint,3,opt,name=replace_existing,json=replaceExisting,proto3" json:"replace_existing,omitempty"`
	ForceChange     bool                `protobuf:"varint,4,opt,name=force_change,json=forceChange,proto3" json:"force_change,omitempty"`
}

func (x *AuthorizationData) Reset() {
	*x = AuthorizationData{}
	mi := &file_com_digitalasset_canton_topology_admin_v0_topology_manager_write_service_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AuthorizationData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AuthorizationData) ProtoMessage() {}

func (x *AuthorizationData) ProtoReflect() protoreflect.Message {
	mi := &file_com_digitalasset_canton_topology_admin_v0_topology_manager_write_service_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AuthorizationData.ProtoReflect.Descriptor instead.
func (*AuthorizationData) Descriptor() ([]byte, []int) {
	return file_com_digitalasset_canton_topology_admin_v0_topology_manager_write_service_proto_rawDescGZIP(), []int{3}
}

func (x *AuthorizationData) GetChange() v0.TopologyChangeOp {
	if x != nil {
		return x.Change
	}
	return v0.TopologyChangeOp(0)
}

func (x *AuthorizationData) GetSignedBy() string {
	if x != nil {
		return x.SignedBy
	}
	return ""
}

func (x *AuthorizationData) GetReplaceExisting() bool {
	if x != nil {
		return x.ReplaceExisting
	}
	return false
}

func (x *AuthorizationData) GetForceChange() bool {
	if x != nil {
		return x.ForceChange
	}
	return false
}

type NamespaceDelegationAuthorization struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Authorization              *AuthorizationData `protobuf:"bytes,1,opt,name=authorization,proto3" json:"authorization,omitempty"`
	Namespace                  string             `protobuf:"bytes,2,opt,name=namespace,proto3" json:"namespace,omitempty"`
	FingerprintOfAuthorizedKey string             `protobuf:"bytes,3,opt,name=fingerprint_of_authorized_key,json=fingerprintOfAuthorizedKey,proto3" json:"fingerprint_of_authorized_key,omitempty"`
	IsRootDelegation           bool               `protobuf:"varint,4,opt,name=is_root_delegation,json=isRootDelegation,proto3" json:"is_root_delegation,omitempty"`
}

func (x *NamespaceDelegationAuthorization) Reset() {
	*x = NamespaceDelegationAuthorization{}
	mi := &file_com_digitalasset_canton_topology_admin_v0_topology_manager_write_service_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *NamespaceDelegationAuthorization) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NamespaceDelegationAuthorization) ProtoMessage() {}

func (x *NamespaceDelegationAuthorization) ProtoReflect() protoreflect.Message {
	mi := &file_com_digitalasset_canton_topology_admin_v0_topology_manager_write_service_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NamespaceDelegationAuthorization.ProtoReflect.Descriptor instead.
func (*NamespaceDelegationAuthorization) Descriptor() ([]byte, []int) {
	return file_com_digitalasset_canton_topology_admin_v0_topology_manager_write_service_proto_rawDescGZIP(), []int{4}
}

func (x *NamespaceDelegationAuthorization) GetAuthorization() *AuthorizationData {
	if x != nil {
		return x.Authorization
	}
	return nil
}

func (x *NamespaceDelegationAuthorization) GetNamespace() string {
	if x != nil {
		return x.Namespace
	}
	return ""
}

func (x *NamespaceDelegationAuthorization) GetFingerprintOfAuthorizedKey() string {
	if x != nil {
		return x.FingerprintOfAuthorizedKey
	}
	return ""
}

func (x *NamespaceDelegationAuthorization) GetIsRootDelegation() bool {
	if x != nil {
		return x.IsRootDelegation
	}
	return false
}

type IdentifierDelegationAuthorization struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Authorization              *AuthorizationData `protobuf:"bytes,1,opt,name=authorization,proto3" json:"authorization,omitempty"`
	Identifier                 string             `protobuf:"bytes,2,opt,name=identifier,proto3" json:"identifier,omitempty"`
	FingerprintOfAuthorizedKey string             `protobuf:"bytes,3,opt,name=fingerprint_of_authorized_key,json=fingerprintOfAuthorizedKey,proto3" json:"fingerprint_of_authorized_key,omitempty"`
}

func (x *IdentifierDelegationAuthorization) Reset() {
	*x = IdentifierDelegationAuthorization{}
	mi := &file_com_digitalasset_canton_topology_admin_v0_topology_manager_write_service_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *IdentifierDelegationAuthorization) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IdentifierDelegationAuthorization) ProtoMessage() {}

func (x *IdentifierDelegationAuthorization) ProtoReflect() protoreflect.Message {
	mi := &file_com_digitalasset_canton_topology_admin_v0_topology_manager_write_service_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IdentifierDelegationAuthorization.ProtoReflect.Descriptor instead.
func (*IdentifierDelegationAuthorization) Descriptor() ([]byte, []int) {
	return file_com_digitalasset_canton_topology_admin_v0_topology_manager_write_service_proto_rawDescGZIP(), []int{5}
}

func (x *IdentifierDelegationAuthorization) GetAuthorization() *AuthorizationData {
	if x != nil {
		return x.Authorization
	}
	return nil
}

func (x *IdentifierDelegationAuthorization) GetIdentifier() string {
	if x != nil {
		return x.Identifier
	}
	return ""
}

func (x *IdentifierDelegationAuthorization) GetFingerprintOfAuthorizedKey() string {
	if x != nil {
		return x.FingerprintOfAuthorizedKey
	}
	return ""
}

type PartyToParticipantAuthorization struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Authorization *AuthorizationData       `protobuf:"bytes,1,opt,name=authorization,proto3" json:"authorization,omitempty"`
	Side          v0.RequestSide           `protobuf:"varint,2,opt,name=side,proto3,enum=com.digitalasset.canton.protocol.v0.RequestSide" json:"side,omitempty"`
	Party         string                   `protobuf:"bytes,3,opt,name=party,proto3" json:"party,omitempty"`
	Participant   string                   `protobuf:"bytes,4,opt,name=participant,proto3" json:"participant,omitempty"`
	Permission    v0.ParticipantPermission `protobuf:"varint,5,opt,name=permission,proto3,enum=com.digitalasset.canton.protocol.v0.ParticipantPermission" json:"permission,omitempty"`
}

func (x *PartyToParticipantAuthorization) Reset() {
	*x = PartyToParticipantAuthorization{}
	mi := &file_com_digitalasset_canton_topology_admin_v0_topology_manager_write_service_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PartyToParticipantAuthorization) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PartyToParticipantAuthorization) ProtoMessage() {}

func (x *PartyToParticipantAuthorization) ProtoReflect() protoreflect.Message {
	mi := &file_com_digitalasset_canton_topology_admin_v0_topology_manager_write_service_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PartyToParticipantAuthorization.ProtoReflect.Descriptor instead.
func (*PartyToParticipantAuthorization) Descriptor() ([]byte, []int) {
	return file_com_digitalasset_canton_topology_admin_v0_topology_manager_write_service_proto_rawDescGZIP(), []int{6}
}

func (x *PartyToParticipantAuthorization) GetAuthorization() *AuthorizationData {
	if x != nil {
		return x.Authorization
	}
	return nil
}

func (x *PartyToParticipantAuthorization) GetSide() v0.RequestSide {
	if x != nil {
		return x.Side
	}
	return v0.RequestSide(0)
}

func (x *PartyToParticipantAuthorization) GetParty() string {
	if x != nil {
		return x.Party
	}
	return ""
}

func (x *PartyToParticipantAuthorization) GetParticipant() string {
	if x != nil {
		return x.Participant
	}
	return ""
}

func (x *PartyToParticipantAuthorization) GetPermission() v0.ParticipantPermission {
	if x != nil {
		return x.Permission
	}
	return v0.ParticipantPermission(0)
}

type OwnerToKeyMappingAuthorization struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Authorization    *AuthorizationData `protobuf:"bytes,1,opt,name=authorization,proto3" json:"authorization,omitempty"`
	KeyOwner         string             `protobuf:"bytes,2,opt,name=key_owner,json=keyOwner,proto3" json:"key_owner,omitempty"`
	FingerprintOfKey string             `protobuf:"bytes,3,opt,name=fingerprint_of_key,json=fingerprintOfKey,proto3" json:"fingerprint_of_key,omitempty"`
	KeyPurpose       v01.KeyPurpose     `protobuf:"varint,4,opt,name=key_purpose,json=keyPurpose,proto3,enum=com.digitalasset.canton.crypto.v0.KeyPurpose" json:"key_purpose,omitempty"`
}

func (x *OwnerToKeyMappingAuthorization) Reset() {
	*x = OwnerToKeyMappingAuthorization{}
	mi := &file_com_digitalasset_canton_topology_admin_v0_topology_manager_write_service_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *OwnerToKeyMappingAuthorization) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OwnerToKeyMappingAuthorization) ProtoMessage() {}

func (x *OwnerToKeyMappingAuthorization) ProtoReflect() protoreflect.Message {
	mi := &file_com_digitalasset_canton_topology_admin_v0_topology_manager_write_service_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OwnerToKeyMappingAuthorization.ProtoReflect.Descriptor instead.
func (*OwnerToKeyMappingAuthorization) Descriptor() ([]byte, []int) {
	return file_com_digitalasset_canton_topology_admin_v0_topology_manager_write_service_proto_rawDescGZIP(), []int{7}
}

func (x *OwnerToKeyMappingAuthorization) GetAuthorization() *AuthorizationData {
	if x != nil {
		return x.Authorization
	}
	return nil
}

func (x *OwnerToKeyMappingAuthorization) GetKeyOwner() string {
	if x != nil {
		return x.KeyOwner
	}
	return ""
}

func (x *OwnerToKeyMappingAuthorization) GetFingerprintOfKey() string {
	if x != nil {
		return x.FingerprintOfKey
	}
	return ""
}

func (x *OwnerToKeyMappingAuthorization) GetKeyPurpose() v01.KeyPurpose {
	if x != nil {
		return x.KeyPurpose
	}
	return v01.KeyPurpose(0)
}

type ParticipantDomainStateAuthorization struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Authorization *AuthorizationData       `protobuf:"bytes,1,opt,name=authorization,proto3" json:"authorization,omitempty"`
	Side          v0.RequestSide           `protobuf:"varint,2,opt,name=side,proto3,enum=com.digitalasset.canton.protocol.v0.RequestSide" json:"side,omitempty"`
	Domain        string                   `protobuf:"bytes,3,opt,name=domain,proto3" json:"domain,omitempty"`
	Participant   string                   `protobuf:"bytes,4,opt,name=participant,proto3" json:"participant,omitempty"`
	Permission    v0.ParticipantPermission `protobuf:"varint,5,opt,name=permission,proto3,enum=com.digitalasset.canton.protocol.v0.ParticipantPermission" json:"permission,omitempty"`
	TrustLevel    v0.TrustLevel            `protobuf:"varint,6,opt,name=trust_level,json=trustLevel,proto3,enum=com.digitalasset.canton.protocol.v0.TrustLevel" json:"trust_level,omitempty"`
}

func (x *ParticipantDomainStateAuthorization) Reset() {
	*x = ParticipantDomainStateAuthorization{}
	mi := &file_com_digitalasset_canton_topology_admin_v0_topology_manager_write_service_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ParticipantDomainStateAuthorization) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ParticipantDomainStateAuthorization) ProtoMessage() {}

func (x *ParticipantDomainStateAuthorization) ProtoReflect() protoreflect.Message {
	mi := &file_com_digitalasset_canton_topology_admin_v0_topology_manager_write_service_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ParticipantDomainStateAuthorization.ProtoReflect.Descriptor instead.
func (*ParticipantDomainStateAuthorization) Descriptor() ([]byte, []int) {
	return file_com_digitalasset_canton_topology_admin_v0_topology_manager_write_service_proto_rawDescGZIP(), []int{8}
}

func (x *ParticipantDomainStateAuthorization) GetAuthorization() *AuthorizationData {
	if x != nil {
		return x.Authorization
	}
	return nil
}

func (x *ParticipantDomainStateAuthorization) GetSide() v0.RequestSide {
	if x != nil {
		return x.Side
	}
	return v0.RequestSide(0)
}

func (x *ParticipantDomainStateAuthorization) GetDomain() string {
	if x != nil {
		return x.Domain
	}
	return ""
}

func (x *ParticipantDomainStateAuthorization) GetParticipant() string {
	if x != nil {
		return x.Participant
	}
	return ""
}

func (x *ParticipantDomainStateAuthorization) GetPermission() v0.ParticipantPermission {
	if x != nil {
		return x.Permission
	}
	return v0.ParticipantPermission(0)
}

func (x *ParticipantDomainStateAuthorization) GetTrustLevel() v0.TrustLevel {
	if x != nil {
		return x.TrustLevel
	}
	return v0.TrustLevel(0)
}

type MediatorDomainStateAuthorization struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Authorization *AuthorizationData `protobuf:"bytes,1,opt,name=authorization,proto3" json:"authorization,omitempty"`
	Side          v0.RequestSide     `protobuf:"varint,2,opt,name=side,proto3,enum=com.digitalasset.canton.protocol.v0.RequestSide" json:"side,omitempty"`
	Domain        string             `protobuf:"bytes,3,opt,name=domain,proto3" json:"domain,omitempty"`
	Mediator      string             `protobuf:"bytes,4,opt,name=mediator,proto3" json:"mediator,omitempty"`
}

func (x *MediatorDomainStateAuthorization) Reset() {
	*x = MediatorDomainStateAuthorization{}
	mi := &file_com_digitalasset_canton_topology_admin_v0_topology_manager_write_service_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *MediatorDomainStateAuthorization) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MediatorDomainStateAuthorization) ProtoMessage() {}

func (x *MediatorDomainStateAuthorization) ProtoReflect() protoreflect.Message {
	mi := &file_com_digitalasset_canton_topology_admin_v0_topology_manager_write_service_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MediatorDomainStateAuthorization.ProtoReflect.Descriptor instead.
func (*MediatorDomainStateAuthorization) Descriptor() ([]byte, []int) {
	return file_com_digitalasset_canton_topology_admin_v0_topology_manager_write_service_proto_rawDescGZIP(), []int{9}
}

func (x *MediatorDomainStateAuthorization) GetAuthorization() *AuthorizationData {
	if x != nil {
		return x.Authorization
	}
	return nil
}

func (x *MediatorDomainStateAuthorization) GetSide() v0.RequestSide {
	if x != nil {
		return x.Side
	}
	return v0.RequestSide(0)
}

func (x *MediatorDomainStateAuthorization) GetDomain() string {
	if x != nil {
		return x.Domain
	}
	return ""
}

func (x *MediatorDomainStateAuthorization) GetMediator() string {
	if x != nil {
		return x.Mediator
	}
	return ""
}

type VettedPackagesAuthorization struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Authorization *AuthorizationData `protobuf:"bytes,1,opt,name=authorization,proto3" json:"authorization,omitempty"`
	Participant   string             `protobuf:"bytes,2,opt,name=participant,proto3" json:"participant,omitempty"`
	PackageIds    []string           `protobuf:"bytes,3,rep,name=package_ids,json=packageIds,proto3" json:"package_ids,omitempty"`
}

func (x *VettedPackagesAuthorization) Reset() {
	*x = VettedPackagesAuthorization{}
	mi := &file_com_digitalasset_canton_topology_admin_v0_topology_manager_write_service_proto_msgTypes[10]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *VettedPackagesAuthorization) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VettedPackagesAuthorization) ProtoMessage() {}

func (x *VettedPackagesAuthorization) ProtoReflect() protoreflect.Message {
	mi := &file_com_digitalasset_canton_topology_admin_v0_topology_manager_write_service_proto_msgTypes[10]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VettedPackagesAuthorization.ProtoReflect.Descriptor instead.
func (*VettedPackagesAuthorization) Descriptor() ([]byte, []int) {
	return file_com_digitalasset_canton_topology_admin_v0_topology_manager_write_service_proto_rawDescGZIP(), []int{10}
}

func (x *VettedPackagesAuthorization) GetAuthorization() *AuthorizationData {
	if x != nil {
		return x.Authorization
	}
	return nil
}

func (x *VettedPackagesAuthorization) GetParticipant() string {
	if x != nil {
		return x.Participant
	}
	return ""
}

func (x *VettedPackagesAuthorization) GetPackageIds() []string {
	if x != nil {
		return x.PackageIds
	}
	return nil
}

type DomainParametersChangeAuthorization struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Authorization *AuthorizationData `protobuf:"bytes,1,opt,name=authorization,proto3" json:"authorization,omitempty"`
	Domain        string             `protobuf:"bytes,2,opt,name=domain,proto3" json:"domain,omitempty"`
	// Types that are assignable to Parameters:
	//
	//	*DomainParametersChangeAuthorization_ParametersV0
	//	*DomainParametersChangeAuthorization_ParametersV1
	//	*DomainParametersChangeAuthorization_ParametersV2
	Parameters isDomainParametersChangeAuthorization_Parameters `protobuf_oneof:"parameters"`
}

func (x *DomainParametersChangeAuthorization) Reset() {
	*x = DomainParametersChangeAuthorization{}
	mi := &file_com_digitalasset_canton_topology_admin_v0_topology_manager_write_service_proto_msgTypes[11]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DomainParametersChangeAuthorization) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DomainParametersChangeAuthorization) ProtoMessage() {}

func (x *DomainParametersChangeAuthorization) ProtoReflect() protoreflect.Message {
	mi := &file_com_digitalasset_canton_topology_admin_v0_topology_manager_write_service_proto_msgTypes[11]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DomainParametersChangeAuthorization.ProtoReflect.Descriptor instead.
func (*DomainParametersChangeAuthorization) Descriptor() ([]byte, []int) {
	return file_com_digitalasset_canton_topology_admin_v0_topology_manager_write_service_proto_rawDescGZIP(), []int{11}
}

func (x *DomainParametersChangeAuthorization) GetAuthorization() *AuthorizationData {
	if x != nil {
		return x.Authorization
	}
	return nil
}

func (x *DomainParametersChangeAuthorization) GetDomain() string {
	if x != nil {
		return x.Domain
	}
	return ""
}

func (m *DomainParametersChangeAuthorization) GetParameters() isDomainParametersChangeAuthorization_Parameters {
	if m != nil {
		return m.Parameters
	}
	return nil
}

func (x *DomainParametersChangeAuthorization) GetParametersV0() *v0.DynamicDomainParameters {
	if x, ok := x.GetParameters().(*DomainParametersChangeAuthorization_ParametersV0); ok {
		return x.ParametersV0
	}
	return nil
}

func (x *DomainParametersChangeAuthorization) GetParametersV1() *v1.DynamicDomainParameters {
	if x, ok := x.GetParameters().(*DomainParametersChangeAuthorization_ParametersV1); ok {
		return x.ParametersV1
	}
	return nil
}

func (x *DomainParametersChangeAuthorization) GetParametersV2() *v2.DynamicDomainParameters {
	if x, ok := x.GetParameters().(*DomainParametersChangeAuthorization_ParametersV2); ok {
		return x.ParametersV2
	}
	return nil
}

type isDomainParametersChangeAuthorization_Parameters interface {
	isDomainParametersChangeAuthorization_Parameters()
}

type DomainParametersChangeAuthorization_ParametersV0 struct {
	ParametersV0 *v0.DynamicDomainParameters `protobuf:"bytes,3,opt,name=parameters_v0,json=parametersV0,proto3,oneof"`
}

type DomainParametersChangeAuthorization_ParametersV1 struct {
	ParametersV1 *v1.DynamicDomainParameters `protobuf:"bytes,4,opt,name=parameters_v1,json=parametersV1,proto3,oneof"`
}

type DomainParametersChangeAuthorization_ParametersV2 struct {
	ParametersV2 *v2.DynamicDomainParameters `protobuf:"bytes,5,opt,name=parameters_v2,json=parametersV2,proto3,oneof"`
}

func (*DomainParametersChangeAuthorization_ParametersV0) isDomainParametersChangeAuthorization_Parameters() {
}

func (*DomainParametersChangeAuthorization_ParametersV1) isDomainParametersChangeAuthorization_Parameters() {
}

func (*DomainParametersChangeAuthorization_ParametersV2) isDomainParametersChangeAuthorization_Parameters() {
}

var File_com_digitalasset_canton_topology_admin_v0_topology_manager_write_service_proto protoreflect.FileDescriptor

var file_com_digitalasset_canton_topology_admin_v0_topology_manager_write_service_proto_rawDesc = []byte{
	0x0a, 0x4e, 0x63, 0x6f, 0x6d, 0x2f, 0x64, 0x69, 0x67, 0x69, 0x74, 0x61, 0x6c, 0x61, 0x73, 0x73,
	0x65, 0x74, 0x2f, 0x63, 0x61, 0x6e, 0x74, 0x6f, 0x6e, 0x2f, 0x74, 0x6f, 0x70, 0x6f, 0x6c, 0x6f,
	0x67, 0x79, 0x2f, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2f, 0x76, 0x30, 0x2f, 0x74, 0x6f, 0x70, 0x6f,
	0x6c, 0x6f, 0x67, 0x79, 0x5f, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x5f, 0x77, 0x72, 0x69,
	0x74, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x12, 0x29, 0x63, 0x6f, 0x6d, 0x2e, 0x64, 0x69, 0x67, 0x69, 0x74, 0x61, 0x6c, 0x61, 0x73, 0x73,
	0x65, 0x74, 0x2e, 0x63, 0x61, 0x6e, 0x74, 0x6f, 0x6e, 0x2e, 0x74, 0x6f, 0x70, 0x6f, 0x6c, 0x6f,
	0x67, 0x79, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x76, 0x30, 0x1a, 0x2e, 0x63, 0x6f, 0x6d,
	0x2f, 0x64, 0x69, 0x67, 0x69, 0x74, 0x61, 0x6c, 0x61, 0x73, 0x73, 0x65, 0x74, 0x2f, 0x63, 0x61,
	0x6e, 0x74, 0x6f, 0x6e, 0x2f, 0x63, 0x72, 0x79, 0x70, 0x74, 0x6f, 0x2f, 0x76, 0x30, 0x2f, 0x63,
	0x72, 0x79, 0x70, 0x74, 0x6f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x34, 0x63, 0x6f, 0x6d,
	0x2f, 0x64, 0x69, 0x67, 0x69, 0x74, 0x61, 0x6c, 0x61, 0x73, 0x73, 0x65, 0x74, 0x2f, 0x63, 0x61,
	0x6e, 0x74, 0x6f, 0x6e, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2f, 0x76, 0x30,
	0x2f, 0x73, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x69, 0x6e, 0x67, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x1a, 0x32, 0x63, 0x6f, 0x6d, 0x2f, 0x64, 0x69, 0x67, 0x69, 0x74, 0x61, 0x6c, 0x61, 0x73,
	0x73, 0x65, 0x74, 0x2f, 0x63, 0x61, 0x6e, 0x74, 0x6f, 0x6e, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x63, 0x6f, 0x6c, 0x2f, 0x76, 0x30, 0x2f, 0x74, 0x6f, 0x70, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x34, 0x63, 0x6f, 0x6d, 0x2f, 0x64, 0x69, 0x67, 0x69, 0x74,
	0x61, 0x6c, 0x61, 0x73, 0x73, 0x65, 0x74, 0x2f, 0x63, 0x61, 0x6e, 0x74, 0x6f, 0x6e, 0x2f, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2f, 0x76, 0x31, 0x2f, 0x73, 0x65, 0x71, 0x75, 0x65,
	0x6e, 0x63, 0x69, 0x6e, 0x67, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x37, 0x63, 0x6f, 0x6d,
	0x2f, 0x64, 0x69, 0x67, 0x69, 0x74, 0x61, 0x6c, 0x61, 0x73, 0x73, 0x65, 0x74, 0x2f, 0x63, 0x61,
	0x6e, 0x74, 0x6f, 0x6e, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2f, 0x76, 0x32,
	0x2f, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x5f, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x22, 0x36, 0x0a, 0x14, 0x41, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x12, 0x1e, 0x0a, 0x0a,
	0x73, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c,
	0x52, 0x0a, 0x73, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x64, 0x22, 0x11, 0x0a, 0x0f,
	0x41, 0x64, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x22,
	0x43, 0x0a, 0x21, 0x53, 0x69, 0x67, 0x6e, 0x65, 0x64, 0x54, 0x6f, 0x70, 0x6f, 0x6c, 0x6f, 0x67,
	0x79, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x64, 0x64, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1e, 0x0a, 0x0a, 0x73, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x69, 0x7a,
	0x65, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0a, 0x73, 0x65, 0x72, 0x69, 0x61, 0x6c,
	0x69, 0x7a, 0x65, 0x64, 0x22, 0xcd, 0x01, 0x0a, 0x11, 0x41, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69,
	0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x61, 0x74, 0x61, 0x12, 0x4d, 0x0a, 0x06, 0x63, 0x68,
	0x61, 0x6e, 0x67, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x35, 0x2e, 0x63, 0x6f, 0x6d,
	0x2e, 0x64, 0x69, 0x67, 0x69, 0x74, 0x61, 0x6c, 0x61, 0x73, 0x73, 0x65, 0x74, 0x2e, 0x63, 0x61,
	0x6e, 0x74, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x76, 0x30,
	0x2e, 0x54, 0x6f, 0x70, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x4f,
	0x70, 0x52, 0x06, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x73, 0x69, 0x67,
	0x6e, 0x65, 0x64, 0x5f, 0x62, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x73, 0x69,
	0x67, 0x6e, 0x65, 0x64, 0x42, 0x79, 0x12, 0x29, 0x0a, 0x10, 0x72, 0x65, 0x70, 0x6c, 0x61, 0x63,
	0x65, 0x5f, 0x65, 0x78, 0x69, 0x73, 0x74, 0x69, 0x6e, 0x67, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x0f, 0x72, 0x65, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x45, 0x78, 0x69, 0x73, 0x74, 0x69, 0x6e,
	0x67, 0x12, 0x21, 0x0a, 0x0c, 0x66, 0x6f, 0x72, 0x63, 0x65, 0x5f, 0x63, 0x68, 0x61, 0x6e, 0x67,
	0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x66, 0x6f, 0x72, 0x63, 0x65, 0x43, 0x68,
	0x61, 0x6e, 0x67, 0x65, 0x22, 0x95, 0x02, 0x0a, 0x20, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61,
	0x63, 0x65, 0x44, 0x65, 0x6c, 0x65, 0x67, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x75, 0x74, 0x68,
	0x6f, 0x72, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x62, 0x0a, 0x0d, 0x61, 0x75, 0x74,
	0x68, 0x6f, 0x72, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x3c, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x64, 0x69, 0x67, 0x69, 0x74, 0x61, 0x6c, 0x61, 0x73,
	0x73, 0x65, 0x74, 0x2e, 0x63, 0x61, 0x6e, 0x74, 0x6f, 0x6e, 0x2e, 0x74, 0x6f, 0x70, 0x6f, 0x6c,
	0x6f, 0x67, 0x79, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x76, 0x30, 0x2e, 0x41, 0x75, 0x74,
	0x68, 0x6f, 0x72, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x61, 0x74, 0x61, 0x52, 0x0d,
	0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1c, 0x0a,
	0x09, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x09, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x12, 0x41, 0x0a, 0x1d, 0x66,
	0x69, 0x6e, 0x67, 0x65, 0x72, 0x70, 0x72, 0x69, 0x6e, 0x74, 0x5f, 0x6f, 0x66, 0x5f, 0x61, 0x75,
	0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x65, 0x64, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x1a, 0x66, 0x69, 0x6e, 0x67, 0x65, 0x72, 0x70, 0x72, 0x69, 0x6e, 0x74, 0x4f,
	0x66, 0x41, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x65, 0x64, 0x4b, 0x65, 0x79, 0x12, 0x2c,
	0x0a, 0x12, 0x69, 0x73, 0x5f, 0x72, 0x6f, 0x6f, 0x74, 0x5f, 0x64, 0x65, 0x6c, 0x65, 0x67, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x10, 0x69, 0x73, 0x52, 0x6f,
	0x6f, 0x74, 0x44, 0x65, 0x6c, 0x65, 0x67, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0xea, 0x01, 0x0a,
	0x21, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x44, 0x65, 0x6c, 0x65, 0x67,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x62, 0x0a, 0x0d, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3c, 0x2e, 0x63, 0x6f, 0x6d, 0x2e,
	0x64, 0x69, 0x67, 0x69, 0x74, 0x61, 0x6c, 0x61, 0x73, 0x73, 0x65, 0x74, 0x2e, 0x63, 0x61, 0x6e,
	0x74, 0x6f, 0x6e, 0x2e, 0x74, 0x6f, 0x70, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x2e, 0x61, 0x64, 0x6d,
	0x69, 0x6e, 0x2e, 0x76, 0x30, 0x2e, 0x41, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x44, 0x61, 0x74, 0x61, 0x52, 0x0d, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69,
	0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1e, 0x0a, 0x0a, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69,
	0x66, 0x69, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x69, 0x64, 0x65, 0x6e,
	0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x12, 0x41, 0x0a, 0x1d, 0x66, 0x69, 0x6e, 0x67, 0x65, 0x72,
	0x70, 0x72, 0x69, 0x6e, 0x74, 0x5f, 0x6f, 0x66, 0x5f, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69,
	0x7a, 0x65, 0x64, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x1a, 0x66,
	0x69, 0x6e, 0x67, 0x65, 0x72, 0x70, 0x72, 0x69, 0x6e, 0x74, 0x4f, 0x66, 0x41, 0x75, 0x74, 0x68,
	0x6f, 0x72, 0x69, 0x7a, 0x65, 0x64, 0x4b, 0x65, 0x79, 0x22, 0xdf, 0x02, 0x0a, 0x1f, 0x50, 0x61,
	0x72, 0x74, 0x79, 0x54, 0x6f, 0x50, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6e, 0x74,
	0x41, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x62, 0x0a,
	0x0d, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x3c, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x64, 0x69, 0x67, 0x69, 0x74,
	0x61, 0x6c, 0x61, 0x73, 0x73, 0x65, 0x74, 0x2e, 0x63, 0x61, 0x6e, 0x74, 0x6f, 0x6e, 0x2e, 0x74,
	0x6f, 0x70, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x76, 0x30,
	0x2e, 0x41, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x61,
	0x74, 0x61, 0x52, 0x0d, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x44, 0x0a, 0x04, 0x73, 0x69, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x30, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x64, 0x69, 0x67, 0x69, 0x74, 0x61, 0x6c, 0x61, 0x73, 0x73,
	0x65, 0x74, 0x2e, 0x63, 0x61, 0x6e, 0x74, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63,
	0x6f, 0x6c, 0x2e, 0x76, 0x30, 0x2e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x53, 0x69, 0x64,
	0x65, 0x52, 0x04, 0x73, 0x69, 0x64, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x70, 0x61, 0x72, 0x74, 0x79,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x70, 0x61, 0x72, 0x74, 0x79, 0x12, 0x20, 0x0a,
	0x0b, 0x70, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0b, 0x70, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x12,
	0x5a, 0x0a, 0x0a, 0x70, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x3a, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x64, 0x69, 0x67, 0x69, 0x74, 0x61,
	0x6c, 0x61, 0x73, 0x73, 0x65, 0x74, 0x2e, 0x63, 0x61, 0x6e, 0x74, 0x6f, 0x6e, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x76, 0x30, 0x2e, 0x50, 0x61, 0x72, 0x74, 0x69, 0x63,
	0x69, 0x70, 0x61, 0x6e, 0x74, 0x50, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52,
	0x0a, 0x70, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x22, 0x9f, 0x02, 0x0a, 0x1e,
	0x4f, 0x77, 0x6e, 0x65, 0x72, 0x54, 0x6f, 0x4b, 0x65, 0x79, 0x4d, 0x61, 0x70, 0x70, 0x69, 0x6e,
	0x67, 0x41, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x62,
	0x0a, 0x0d, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3c, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x64, 0x69, 0x67, 0x69,
	0x74, 0x61, 0x6c, 0x61, 0x73, 0x73, 0x65, 0x74, 0x2e, 0x63, 0x61, 0x6e, 0x74, 0x6f, 0x6e, 0x2e,
	0x74, 0x6f, 0x70, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x76,
	0x30, 0x2e, 0x41, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x44,
	0x61, 0x74, 0x61, 0x52, 0x0d, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x1b, 0x0a, 0x09, 0x6b, 0x65, 0x79, 0x5f, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6b, 0x65, 0x79, 0x4f, 0x77, 0x6e, 0x65, 0x72, 0x12,
	0x2c, 0x0a, 0x12, 0x66, 0x69, 0x6e, 0x67, 0x65, 0x72, 0x70, 0x72, 0x69, 0x6e, 0x74, 0x5f, 0x6f,
	0x66, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x66, 0x69, 0x6e,
	0x67, 0x65, 0x72, 0x70, 0x72, 0x69, 0x6e, 0x74, 0x4f, 0x66, 0x4b, 0x65, 0x79, 0x12, 0x4e, 0x0a,
	0x0b, 0x6b, 0x65, 0x79, 0x5f, 0x70, 0x75, 0x72, 0x70, 0x6f, 0x73, 0x65, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x2d, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x64, 0x69, 0x67, 0x69, 0x74, 0x61, 0x6c,
	0x61, 0x73, 0x73, 0x65, 0x74, 0x2e, 0x63, 0x61, 0x6e, 0x74, 0x6f, 0x6e, 0x2e, 0x63, 0x72, 0x79,
	0x70, 0x74, 0x6f, 0x2e, 0x76, 0x30, 0x2e, 0x4b, 0x65, 0x79, 0x50, 0x75, 0x72, 0x70, 0x6f, 0x73,
	0x65, 0x52, 0x0a, 0x6b, 0x65, 0x79, 0x50, 0x75, 0x72, 0x70, 0x6f, 0x73, 0x65, 0x22, 0xb7, 0x03,
	0x0a, 0x23, 0x50, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x44, 0x6f, 0x6d,
	0x61, 0x69, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x41, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x62, 0x0a, 0x0d, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69,
	0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3c, 0x2e, 0x63,
	0x6f, 0x6d, 0x2e, 0x64, 0x69, 0x67, 0x69, 0x74, 0x61, 0x6c, 0x61, 0x73, 0x73, 0x65, 0x74, 0x2e,
	0x63, 0x61, 0x6e, 0x74, 0x6f, 0x6e, 0x2e, 0x74, 0x6f, 0x70, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x2e,
	0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x76, 0x30, 0x2e, 0x41, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69,
	0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x61, 0x74, 0x61, 0x52, 0x0d, 0x61, 0x75, 0x74, 0x68,
	0x6f, 0x72, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x44, 0x0a, 0x04, 0x73, 0x69, 0x64,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x30, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x64, 0x69,
	0x67, 0x69, 0x74, 0x61, 0x6c, 0x61, 0x73, 0x73, 0x65, 0x74, 0x2e, 0x63, 0x61, 0x6e, 0x74, 0x6f,
	0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x76, 0x30, 0x2e, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x53, 0x69, 0x64, 0x65, 0x52, 0x04, 0x73, 0x69, 0x64, 0x65, 0x12,
	0x16, 0x0a, 0x06, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x06, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x12, 0x20, 0x0a, 0x0b, 0x70, 0x61, 0x72, 0x74, 0x69,
	0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x70, 0x61,
	0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x12, 0x5a, 0x0a, 0x0a, 0x70, 0x65, 0x72,
	0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x3a, 0x2e,
	0x63, 0x6f, 0x6d, 0x2e, 0x64, 0x69, 0x67, 0x69, 0x74, 0x61, 0x6c, 0x61, 0x73, 0x73, 0x65, 0x74,
	0x2e, 0x63, 0x61, 0x6e, 0x74, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c,
	0x2e, 0x76, 0x30, 0x2e, 0x50, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x50,
	0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x0a, 0x70, 0x65, 0x72, 0x6d, 0x69,
	0x73, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x50, 0x0a, 0x0b, 0x74, 0x72, 0x75, 0x73, 0x74, 0x5f, 0x6c,
	0x65, 0x76, 0x65, 0x6c, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2f, 0x2e, 0x63, 0x6f, 0x6d,
	0x2e, 0x64, 0x69, 0x67, 0x69, 0x74, 0x61, 0x6c, 0x61, 0x73, 0x73, 0x65, 0x74, 0x2e, 0x63, 0x61,
	0x6e, 0x74, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x76, 0x30,
	0x2e, 0x54, 0x72, 0x75, 0x73, 0x74, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x52, 0x0a, 0x74, 0x72, 0x75,
	0x73, 0x74, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x22, 0x80, 0x02, 0x0a, 0x20, 0x4d, 0x65, 0x64, 0x69,
	0x61, 0x74, 0x6f, 0x72, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x41,
	0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x62, 0x0a, 0x0d,
	0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x3c, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x64, 0x69, 0x67, 0x69, 0x74, 0x61,
	0x6c, 0x61, 0x73, 0x73, 0x65, 0x74, 0x2e, 0x63, 0x61, 0x6e, 0x74, 0x6f, 0x6e, 0x2e, 0x74, 0x6f,
	0x70, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x76, 0x30, 0x2e,
	0x41, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x61, 0x74,
	0x61, 0x52, 0x0d, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x44, 0x0a, 0x04, 0x73, 0x69, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x30,
	0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x64, 0x69, 0x67, 0x69, 0x74, 0x61, 0x6c, 0x61, 0x73, 0x73, 0x65,
	0x74, 0x2e, 0x63, 0x61, 0x6e, 0x74, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f,
	0x6c, 0x2e, 0x76, 0x30, 0x2e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x53, 0x69, 0x64, 0x65,
	0x52, 0x04, 0x73, 0x69, 0x64, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x12, 0x1a,
	0x0a, 0x08, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x74, 0x6f, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x74, 0x6f, 0x72, 0x22, 0xc4, 0x01, 0x0a, 0x1b, 0x56,
	0x65, 0x74, 0x74, 0x65, 0x64, 0x50, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x73, 0x41, 0x75, 0x74,
	0x68, 0x6f, 0x72, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x62, 0x0a, 0x0d, 0x61, 0x75,
	0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x3c, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x64, 0x69, 0x67, 0x69, 0x74, 0x61, 0x6c, 0x61,
	0x73, 0x73, 0x65, 0x74, 0x2e, 0x63, 0x61, 0x6e, 0x74, 0x6f, 0x6e, 0x2e, 0x74, 0x6f, 0x70, 0x6f,
	0x6c, 0x6f, 0x67, 0x79, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x76, 0x30, 0x2e, 0x41, 0x75,
	0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x61, 0x74, 0x61, 0x52,
	0x0d, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x20,
	0x0a, 0x0b, 0x70, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0b, 0x70, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6e, 0x74,
	0x12, 0x1f, 0x0a, 0x0b, 0x70, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x5f, 0x69, 0x64, 0x73, 0x18,
	0x03, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0a, 0x70, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x49, 0x64,
	0x73, 0x22, 0xde, 0x03, 0x0a, 0x23, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x50, 0x61, 0x72, 0x61,
	0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x41, 0x75, 0x74, 0x68,
	0x6f, 0x72, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x62, 0x0a, 0x0d, 0x61, 0x75, 0x74,
	0x68, 0x6f, 0x72, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x3c, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x64, 0x69, 0x67, 0x69, 0x74, 0x61, 0x6c, 0x61, 0x73,
	0x73, 0x65, 0x74, 0x2e, 0x63, 0x61, 0x6e, 0x74, 0x6f, 0x6e, 0x2e, 0x74, 0x6f, 0x70, 0x6f, 0x6c,
	0x6f, 0x67, 0x79, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x76, 0x30, 0x2e, 0x41, 0x75, 0x74,
	0x68, 0x6f, 0x72, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x61, 0x74, 0x61, 0x52, 0x0d,
	0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x16, 0x0a,
	0x06, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x64,
	0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x12, 0x63, 0x0a, 0x0d, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74,
	0x65, 0x72, 0x73, 0x5f, 0x76, 0x30, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3c, 0x2e, 0x63,
	0x6f, 0x6d, 0x2e, 0x64, 0x69, 0x67, 0x69, 0x74, 0x61, 0x6c, 0x61, 0x73, 0x73, 0x65, 0x74, 0x2e,
	0x63, 0x61, 0x6e, 0x74, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e,
	0x76, 0x30, 0x2e, 0x44, 0x79, 0x6e, 0x61, 0x6d, 0x69, 0x63, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e,
	0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x48, 0x00, 0x52, 0x0c, 0x70, 0x61,
	0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x56, 0x30, 0x12, 0x63, 0x0a, 0x0d, 0x70, 0x61,
	0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x5f, 0x76, 0x31, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x3c, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x64, 0x69, 0x67, 0x69, 0x74, 0x61, 0x6c, 0x61,
	0x73, 0x73, 0x65, 0x74, 0x2e, 0x63, 0x61, 0x6e, 0x74, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x79, 0x6e, 0x61, 0x6d, 0x69, 0x63, 0x44,
	0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x48,
	0x00, 0x52, 0x0c, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x56, 0x31, 0x12,
	0x63, 0x0a, 0x0d, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x5f, 0x76, 0x32,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3c, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x64, 0x69, 0x67,
	0x69, 0x74, 0x61, 0x6c, 0x61, 0x73, 0x73, 0x65, 0x74, 0x2e, 0x63, 0x61, 0x6e, 0x74, 0x6f, 0x6e,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x76, 0x32, 0x2e, 0x44, 0x79, 0x6e,
	0x61, 0x6d, 0x69, 0x63, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65,
	0x74, 0x65, 0x72, 0x73, 0x48, 0x00, 0x52, 0x0c, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65,
	0x72, 0x73, 0x56, 0x32, 0x42, 0x0c, 0x0a, 0x0a, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65,
	0x72, 0x73, 0x32, 0xbe, 0x0c, 0x0a, 0x1b, 0x54, 0x6f, 0x70, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x4d,
	0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x57, 0x72, 0x69, 0x74, 0x65, 0x53, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x12, 0xaa, 0x01, 0x0a, 0x1b, 0x41, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x65,
	0x50, 0x61, 0x72, 0x74, 0x79, 0x54, 0x6f, 0x50, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61,
	0x6e, 0x74, 0x12, 0x4a, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x64, 0x69, 0x67, 0x69, 0x74, 0x61, 0x6c,
	0x61, 0x73, 0x73, 0x65, 0x74, 0x2e, 0x63, 0x61, 0x6e, 0x74, 0x6f, 0x6e, 0x2e, 0x74, 0x6f, 0x70,
	0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x76, 0x30, 0x2e, 0x50,
	0x61, 0x72, 0x74, 0x79, 0x54, 0x6f, 0x50, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6e,
	0x74, 0x41, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x1a, 0x3f,
	0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x64, 0x69, 0x67, 0x69, 0x74, 0x61, 0x6c, 0x61, 0x73, 0x73, 0x65,
	0x74, 0x2e, 0x63, 0x61, 0x6e, 0x74, 0x6f, 0x6e, 0x2e, 0x74, 0x6f, 0x70, 0x6f, 0x6c, 0x6f, 0x67,
	0x79, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x76, 0x30, 0x2e, 0x41, 0x75, 0x74, 0x68, 0x6f,
	0x72, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x12,
	0xa8, 0x01, 0x0a, 0x1a, 0x41, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x65, 0x4f, 0x77, 0x6e,
	0x65, 0x72, 0x54, 0x6f, 0x4b, 0x65, 0x79, 0x4d, 0x61, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x12, 0x49,
	0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x64, 0x69, 0x67, 0x69, 0x74, 0x61, 0x6c, 0x61, 0x73, 0x73, 0x65,
	0x74, 0x2e, 0x63, 0x61, 0x6e, 0x74, 0x6f, 0x6e, 0x2e, 0x74, 0x6f, 0x70, 0x6f, 0x6c, 0x6f, 0x67,
	0x79, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x76, 0x30, 0x2e, 0x4f, 0x77, 0x6e, 0x65, 0x72,
	0x54, 0x6f, 0x4b, 0x65, 0x79, 0x4d, 0x61, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x41, 0x75, 0x74, 0x68,
	0x6f, 0x72, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x1a, 0x3f, 0x2e, 0x63, 0x6f, 0x6d, 0x2e,
	0x64, 0x69, 0x67, 0x69, 0x74, 0x61, 0x6c, 0x61, 0x73, 0x73, 0x65, 0x74, 0x2e, 0x63, 0x61, 0x6e,
	0x74, 0x6f, 0x6e, 0x2e, 0x74, 0x6f, 0x70, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x2e, 0x61, 0x64, 0x6d,
	0x69, 0x6e, 0x2e, 0x76, 0x30, 0x2e, 0x41, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x53, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x12, 0xac, 0x01, 0x0a, 0x1c, 0x41,
	0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63,
	0x65, 0x44, 0x65, 0x6c, 0x65, 0x67, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x4b, 0x2e, 0x63, 0x6f,
	0x6d, 0x2e, 0x64, 0x69, 0x67, 0x69, 0x74, 0x61, 0x6c, 0x61, 0x73, 0x73, 0x65, 0x74, 0x2e, 0x63,
	0x61, 0x6e, 0x74, 0x6f, 0x6e, 0x2e, 0x74, 0x6f, 0x70, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x2e, 0x61,
	0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x76, 0x30, 0x2e, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63,
	0x65, 0x44, 0x65, 0x6c, 0x65, 0x67, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x75, 0x74, 0x68, 0x6f,
	0x72, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x1a, 0x3f, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x64,
	0x69, 0x67, 0x69, 0x74, 0x61, 0x6c, 0x61, 0x73, 0x73, 0x65, 0x74, 0x2e, 0x63, 0x61, 0x6e, 0x74,
	0x6f, 0x6e, 0x2e, 0x74, 0x6f, 0x70, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x2e, 0x61, 0x64, 0x6d, 0x69,
	0x6e, 0x2e, 0x76, 0x30, 0x2e, 0x41, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x53, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x12, 0xae, 0x01, 0x0a, 0x1d, 0x41, 0x75,
	0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x65, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65,
	0x72, 0x44, 0x65, 0x6c, 0x65, 0x67, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x4c, 0x2e, 0x63, 0x6f,
	0x6d, 0x2e, 0x64, 0x69, 0x67, 0x69, 0x74, 0x61, 0x6c, 0x61, 0x73, 0x73, 0x65, 0x74, 0x2e, 0x63,
	0x61, 0x6e, 0x74, 0x6f, 0x6e, 0x2e, 0x74, 0x6f, 0x70, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x2e, 0x61,
	0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x76, 0x30, 0x2e, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69,
	0x65, 0x72, 0x44, 0x65, 0x6c, 0x65, 0x67, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x75, 0x74, 0x68,
	0x6f, 0x72, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x1a, 0x3f, 0x2e, 0x63, 0x6f, 0x6d, 0x2e,
	0x64, 0x69, 0x67, 0x69, 0x74, 0x61, 0x6c, 0x61, 0x73, 0x73, 0x65, 0x74, 0x2e, 0x63, 0x61, 0x6e,
	0x74, 0x6f, 0x6e, 0x2e, 0x74, 0x6f, 0x70, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x2e, 0x61, 0x64, 0x6d,
	0x69, 0x6e, 0x2e, 0x76, 0x30, 0x2e, 0x41, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x53, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x12, 0xa2, 0x01, 0x0a, 0x17, 0x41,
	0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x65, 0x56, 0x65, 0x74, 0x74, 0x65, 0x64, 0x50, 0x61,
	0x63, 0x6b, 0x61, 0x67, 0x65, 0x73, 0x12, 0x46, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x64, 0x69, 0x67,
	0x69, 0x74, 0x61, 0x6c, 0x61, 0x73, 0x73, 0x65, 0x74, 0x2e, 0x63, 0x61, 0x6e, 0x74, 0x6f, 0x6e,
	0x2e, 0x74, 0x6f, 0x70, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e,
	0x76, 0x30, 0x2e, 0x56, 0x65, 0x74, 0x74, 0x65, 0x64, 0x50, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65,
	0x73, 0x41, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x1a, 0x3f,
	0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x64, 0x69, 0x67, 0x69, 0x74, 0x61, 0x6c, 0x61, 0x73, 0x73, 0x65,
	0x74, 0x2e, 0x63, 0x61, 0x6e, 0x74, 0x6f, 0x6e, 0x2e, 0x74, 0x6f, 0x70, 0x6f, 0x6c, 0x6f, 0x67,
	0x79, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x76, 0x30, 0x2e, 0x41, 0x75, 0x74, 0x68, 0x6f,
	0x72, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x12,
	0xb2, 0x01, 0x0a, 0x1f, 0x41, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x65, 0x44, 0x6f, 0x6d,
	0x61, 0x69, 0x6e, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x43, 0x68, 0x61,
	0x6e, 0x67, 0x65, 0x12, 0x4e, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x64, 0x69, 0x67, 0x69, 0x74, 0x61,
	0x6c, 0x61, 0x73, 0x73, 0x65, 0x74, 0x2e, 0x63, 0x61, 0x6e, 0x74, 0x6f, 0x6e, 0x2e, 0x74, 0x6f,
	0x70, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x76, 0x30, 0x2e,
	0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73,
	0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x41, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x1a, 0x3f, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x64, 0x69, 0x67, 0x69, 0x74, 0x61,
	0x6c, 0x61, 0x73, 0x73, 0x65, 0x74, 0x2e, 0x63, 0x61, 0x6e, 0x74, 0x6f, 0x6e, 0x2e, 0x74, 0x6f,
	0x70, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x76, 0x30, 0x2e,
	0x41, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x75, 0x63,
	0x63, 0x65, 0x73, 0x73, 0x12, 0xb2, 0x01, 0x0a, 0x1f, 0x41, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69,
	0x7a, 0x65, 0x50, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x44, 0x6f, 0x6d,
	0x61, 0x69, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x4e, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x64,
	0x69, 0x67, 0x69, 0x74, 0x61, 0x6c, 0x61, 0x73, 0x73, 0x65, 0x74, 0x2e, 0x63, 0x61, 0x6e, 0x74,
	0x6f, 0x6e, 0x2e, 0x74, 0x6f, 0x70, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x2e, 0x61, 0x64, 0x6d, 0x69,
	0x6e, 0x2e, 0x76, 0x30, 0x2e, 0x50, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6e, 0x74,
	0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x41, 0x75, 0x74, 0x68, 0x6f,
	0x72, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x1a, 0x3f, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x64,
	0x69, 0x67, 0x69, 0x74, 0x61, 0x6c, 0x61, 0x73, 0x73, 0x65, 0x74, 0x2e, 0x63, 0x61, 0x6e, 0x74,
	0x6f, 0x6e, 0x2e, 0x74, 0x6f, 0x70, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x2e, 0x61, 0x64, 0x6d, 0x69,
	0x6e, 0x2e, 0x76, 0x30, 0x2e, 0x41, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x53, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x12, 0xac, 0x01, 0x0a, 0x1c, 0x41, 0x75,
	0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x65, 0x4d, 0x65, 0x64, 0x69, 0x61, 0x74, 0x6f, 0x72, 0x44,
	0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x4b, 0x2e, 0x63, 0x6f, 0x6d,
	0x2e, 0x64, 0x69, 0x67, 0x69, 0x74, 0x61, 0x6c, 0x61, 0x73, 0x73, 0x65, 0x74, 0x2e, 0x63, 0x61,
	0x6e, 0x74, 0x6f, 0x6e, 0x2e, 0x74, 0x6f, 0x70, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x2e, 0x61, 0x64,
	0x6d, 0x69, 0x6e, 0x2e, 0x76, 0x30, 0x2e, 0x4d, 0x65, 0x64, 0x69, 0x61, 0x74, 0x6f, 0x72, 0x44,
	0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x41, 0x75, 0x74, 0x68, 0x6f, 0x72,
	0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x1a, 0x3f, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x64, 0x69,
	0x67, 0x69, 0x74, 0x61, 0x6c, 0x61, 0x73, 0x73, 0x65, 0x74, 0x2e, 0x63, 0x61, 0x6e, 0x74, 0x6f,
	0x6e, 0x2e, 0x74, 0x6f, 0x70, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e,
	0x2e, 0x76, 0x30, 0x2e, 0x41, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x53, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x12, 0xa8, 0x01, 0x0a, 0x1c, 0x41, 0x64, 0x64,
	0x53, 0x69, 0x67, 0x6e, 0x65, 0x64, 0x54, 0x6f, 0x70, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x54, 0x72,
	0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x4c, 0x2e, 0x63, 0x6f, 0x6d, 0x2e,
	0x64, 0x69, 0x67, 0x69, 0x74, 0x61, 0x6c, 0x61, 0x73, 0x73, 0x65, 0x74, 0x2e, 0x63, 0x61, 0x6e,
	0x74, 0x6f, 0x6e, 0x2e, 0x74, 0x6f, 0x70, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x2e, 0x61, 0x64, 0x6d,
	0x69, 0x6e, 0x2e, 0x76, 0x30, 0x2e, 0x53, 0x69, 0x67, 0x6e, 0x65, 0x64, 0x54, 0x6f, 0x70, 0x6f,
	0x6c, 0x6f, 0x67, 0x79, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x41,
	0x64, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x1a, 0x3a, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x64, 0x69,
	0x67, 0x69, 0x74, 0x61, 0x6c, 0x61, 0x73, 0x73, 0x65, 0x74, 0x2e, 0x63, 0x61, 0x6e, 0x74, 0x6f,
	0x6e, 0x2e, 0x74, 0x6f, 0x70, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e,
	0x2e, 0x76, 0x30, 0x2e, 0x41, 0x64, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x75, 0x63, 0x63,
	0x65, 0x73, 0x73, 0x42, 0x5a, 0x5a, 0x58, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f,
	0x6d, 0x2f, 0x64, 0x69, 0x67, 0x69, 0x74, 0x61, 0x6c, 0x2d, 0x61, 0x73, 0x73, 0x65, 0x74, 0x2f,
	0x64, 0x61, 0x7a, 0x6c, 0x2d, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2f, 0x76, 0x38, 0x2f, 0x67,
	0x6f, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x63, 0x6f, 0x6d, 0x2f, 0x64, 0x69, 0x67, 0x69, 0x74, 0x61,
	0x6c, 0x61, 0x73, 0x73, 0x65, 0x74, 0x2f, 0x63, 0x61, 0x6e, 0x74, 0x6f, 0x6e, 0x2f, 0x74, 0x6f,
	0x70, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x2f, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2f, 0x76, 0x30, 0x62,
	0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_com_digitalasset_canton_topology_admin_v0_topology_manager_write_service_proto_rawDescOnce sync.Once
	file_com_digitalasset_canton_topology_admin_v0_topology_manager_write_service_proto_rawDescData = file_com_digitalasset_canton_topology_admin_v0_topology_manager_write_service_proto_rawDesc
)

func file_com_digitalasset_canton_topology_admin_v0_topology_manager_write_service_proto_rawDescGZIP() []byte {
	file_com_digitalasset_canton_topology_admin_v0_topology_manager_write_service_proto_rawDescOnce.Do(func() {
		file_com_digitalasset_canton_topology_admin_v0_topology_manager_write_service_proto_rawDescData = protoimpl.X.CompressGZIP(file_com_digitalasset_canton_topology_admin_v0_topology_manager_write_service_proto_rawDescData)
	})
	return file_com_digitalasset_canton_topology_admin_v0_topology_manager_write_service_proto_rawDescData
}

var file_com_digitalasset_canton_topology_admin_v0_topology_manager_write_service_proto_msgTypes = make([]protoimpl.MessageInfo, 12)
var file_com_digitalasset_canton_topology_admin_v0_topology_manager_write_service_proto_goTypes = []any{
	(*AuthorizationSuccess)(nil),                // 0: com.digitalasset.canton.topology.admin.v0.AuthorizationSuccess
	(*AdditionSuccess)(nil),                     // 1: com.digitalasset.canton.topology.admin.v0.AdditionSuccess
	(*SignedTopologyTransactionAddition)(nil),   // 2: com.digitalasset.canton.topology.admin.v0.SignedTopologyTransactionAddition
	(*AuthorizationData)(nil),                   // 3: com.digitalasset.canton.topology.admin.v0.AuthorizationData
	(*NamespaceDelegationAuthorization)(nil),    // 4: com.digitalasset.canton.topology.admin.v0.NamespaceDelegationAuthorization
	(*IdentifierDelegationAuthorization)(nil),   // 5: com.digitalasset.canton.topology.admin.v0.IdentifierDelegationAuthorization
	(*PartyToParticipantAuthorization)(nil),     // 6: com.digitalasset.canton.topology.admin.v0.PartyToParticipantAuthorization
	(*OwnerToKeyMappingAuthorization)(nil),      // 7: com.digitalasset.canton.topology.admin.v0.OwnerToKeyMappingAuthorization
	(*ParticipantDomainStateAuthorization)(nil), // 8: com.digitalasset.canton.topology.admin.v0.ParticipantDomainStateAuthorization
	(*MediatorDomainStateAuthorization)(nil),    // 9: com.digitalasset.canton.topology.admin.v0.MediatorDomainStateAuthorization
	(*VettedPackagesAuthorization)(nil),         // 10: com.digitalasset.canton.topology.admin.v0.VettedPackagesAuthorization
	(*DomainParametersChangeAuthorization)(nil), // 11: com.digitalasset.canton.topology.admin.v0.DomainParametersChangeAuthorization
	(v0.TopologyChangeOp)(0),                    // 12: com.digitalasset.canton.protocol.v0.TopologyChangeOp
	(v0.RequestSide)(0),                         // 13: com.digitalasset.canton.protocol.v0.RequestSide
	(v0.ParticipantPermission)(0),               // 14: com.digitalasset.canton.protocol.v0.ParticipantPermission
	(v01.KeyPurpose)(0),                         // 15: com.digitalasset.canton.crypto.v0.KeyPurpose
	(v0.TrustLevel)(0),                          // 16: com.digitalasset.canton.protocol.v0.TrustLevel
	(*v0.DynamicDomainParameters)(nil),          // 17: com.digitalasset.canton.protocol.v0.DynamicDomainParameters
	(*v1.DynamicDomainParameters)(nil),          // 18: com.digitalasset.canton.protocol.v1.DynamicDomainParameters
	(*v2.DynamicDomainParameters)(nil),          // 19: com.digitalasset.canton.protocol.v2.DynamicDomainParameters
}
var file_com_digitalasset_canton_topology_admin_v0_topology_manager_write_service_proto_depIdxs = []int32{
	12, // 0: com.digitalasset.canton.topology.admin.v0.AuthorizationData.change:type_name -> com.digitalasset.canton.protocol.v0.TopologyChangeOp
	3,  // 1: com.digitalasset.canton.topology.admin.v0.NamespaceDelegationAuthorization.authorization:type_name -> com.digitalasset.canton.topology.admin.v0.AuthorizationData
	3,  // 2: com.digitalasset.canton.topology.admin.v0.IdentifierDelegationAuthorization.authorization:type_name -> com.digitalasset.canton.topology.admin.v0.AuthorizationData
	3,  // 3: com.digitalasset.canton.topology.admin.v0.PartyToParticipantAuthorization.authorization:type_name -> com.digitalasset.canton.topology.admin.v0.AuthorizationData
	13, // 4: com.digitalasset.canton.topology.admin.v0.PartyToParticipantAuthorization.side:type_name -> com.digitalasset.canton.protocol.v0.RequestSide
	14, // 5: com.digitalasset.canton.topology.admin.v0.PartyToParticipantAuthorization.permission:type_name -> com.digitalasset.canton.protocol.v0.ParticipantPermission
	3,  // 6: com.digitalasset.canton.topology.admin.v0.OwnerToKeyMappingAuthorization.authorization:type_name -> com.digitalasset.canton.topology.admin.v0.AuthorizationData
	15, // 7: com.digitalasset.canton.topology.admin.v0.OwnerToKeyMappingAuthorization.key_purpose:type_name -> com.digitalasset.canton.crypto.v0.KeyPurpose
	3,  // 8: com.digitalasset.canton.topology.admin.v0.ParticipantDomainStateAuthorization.authorization:type_name -> com.digitalasset.canton.topology.admin.v0.AuthorizationData
	13, // 9: com.digitalasset.canton.topology.admin.v0.ParticipantDomainStateAuthorization.side:type_name -> com.digitalasset.canton.protocol.v0.RequestSide
	14, // 10: com.digitalasset.canton.topology.admin.v0.ParticipantDomainStateAuthorization.permission:type_name -> com.digitalasset.canton.protocol.v0.ParticipantPermission
	16, // 11: com.digitalasset.canton.topology.admin.v0.ParticipantDomainStateAuthorization.trust_level:type_name -> com.digitalasset.canton.protocol.v0.TrustLevel
	3,  // 12: com.digitalasset.canton.topology.admin.v0.MediatorDomainStateAuthorization.authorization:type_name -> com.digitalasset.canton.topology.admin.v0.AuthorizationData
	13, // 13: com.digitalasset.canton.topology.admin.v0.MediatorDomainStateAuthorization.side:type_name -> com.digitalasset.canton.protocol.v0.RequestSide
	3,  // 14: com.digitalasset.canton.topology.admin.v0.VettedPackagesAuthorization.authorization:type_name -> com.digitalasset.canton.topology.admin.v0.AuthorizationData
	3,  // 15: com.digitalasset.canton.topology.admin.v0.DomainParametersChangeAuthorization.authorization:type_name -> com.digitalasset.canton.topology.admin.v0.AuthorizationData
	17, // 16: com.digitalasset.canton.topology.admin.v0.DomainParametersChangeAuthorization.parameters_v0:type_name -> com.digitalasset.canton.protocol.v0.DynamicDomainParameters
	18, // 17: com.digitalasset.canton.topology.admin.v0.DomainParametersChangeAuthorization.parameters_v1:type_name -> com.digitalasset.canton.protocol.v1.DynamicDomainParameters
	19, // 18: com.digitalasset.canton.topology.admin.v0.DomainParametersChangeAuthorization.parameters_v2:type_name -> com.digitalasset.canton.protocol.v2.DynamicDomainParameters
	6,  // 19: com.digitalasset.canton.topology.admin.v0.TopologyManagerWriteService.AuthorizePartyToParticipant:input_type -> com.digitalasset.canton.topology.admin.v0.PartyToParticipantAuthorization
	7,  // 20: com.digitalasset.canton.topology.admin.v0.TopologyManagerWriteService.AuthorizeOwnerToKeyMapping:input_type -> com.digitalasset.canton.topology.admin.v0.OwnerToKeyMappingAuthorization
	4,  // 21: com.digitalasset.canton.topology.admin.v0.TopologyManagerWriteService.AuthorizeNamespaceDelegation:input_type -> com.digitalasset.canton.topology.admin.v0.NamespaceDelegationAuthorization
	5,  // 22: com.digitalasset.canton.topology.admin.v0.TopologyManagerWriteService.AuthorizeIdentifierDelegation:input_type -> com.digitalasset.canton.topology.admin.v0.IdentifierDelegationAuthorization
	10, // 23: com.digitalasset.canton.topology.admin.v0.TopologyManagerWriteService.AuthorizeVettedPackages:input_type -> com.digitalasset.canton.topology.admin.v0.VettedPackagesAuthorization
	11, // 24: com.digitalasset.canton.topology.admin.v0.TopologyManagerWriteService.AuthorizeDomainParametersChange:input_type -> com.digitalasset.canton.topology.admin.v0.DomainParametersChangeAuthorization
	8,  // 25: com.digitalasset.canton.topology.admin.v0.TopologyManagerWriteService.AuthorizeParticipantDomainState:input_type -> com.digitalasset.canton.topology.admin.v0.ParticipantDomainStateAuthorization
	9,  // 26: com.digitalasset.canton.topology.admin.v0.TopologyManagerWriteService.AuthorizeMediatorDomainState:input_type -> com.digitalasset.canton.topology.admin.v0.MediatorDomainStateAuthorization
	2,  // 27: com.digitalasset.canton.topology.admin.v0.TopologyManagerWriteService.AddSignedTopologyTransaction:input_type -> com.digitalasset.canton.topology.admin.v0.SignedTopologyTransactionAddition
	0,  // 28: com.digitalasset.canton.topology.admin.v0.TopologyManagerWriteService.AuthorizePartyToParticipant:output_type -> com.digitalasset.canton.topology.admin.v0.AuthorizationSuccess
	0,  // 29: com.digitalasset.canton.topology.admin.v0.TopologyManagerWriteService.AuthorizeOwnerToKeyMapping:output_type -> com.digitalasset.canton.topology.admin.v0.AuthorizationSuccess
	0,  // 30: com.digitalasset.canton.topology.admin.v0.TopologyManagerWriteService.AuthorizeNamespaceDelegation:output_type -> com.digitalasset.canton.topology.admin.v0.AuthorizationSuccess
	0,  // 31: com.digitalasset.canton.topology.admin.v0.TopologyManagerWriteService.AuthorizeIdentifierDelegation:output_type -> com.digitalasset.canton.topology.admin.v0.AuthorizationSuccess
	0,  // 32: com.digitalasset.canton.topology.admin.v0.TopologyManagerWriteService.AuthorizeVettedPackages:output_type -> com.digitalasset.canton.topology.admin.v0.AuthorizationSuccess
	0,  // 33: com.digitalasset.canton.topology.admin.v0.TopologyManagerWriteService.AuthorizeDomainParametersChange:output_type -> com.digitalasset.canton.topology.admin.v0.AuthorizationSuccess
	0,  // 34: com.digitalasset.canton.topology.admin.v0.TopologyManagerWriteService.AuthorizeParticipantDomainState:output_type -> com.digitalasset.canton.topology.admin.v0.AuthorizationSuccess
	0,  // 35: com.digitalasset.canton.topology.admin.v0.TopologyManagerWriteService.AuthorizeMediatorDomainState:output_type -> com.digitalasset.canton.topology.admin.v0.AuthorizationSuccess
	1,  // 36: com.digitalasset.canton.topology.admin.v0.TopologyManagerWriteService.AddSignedTopologyTransaction:output_type -> com.digitalasset.canton.topology.admin.v0.AdditionSuccess
	28, // [28:37] is the sub-list for method output_type
	19, // [19:28] is the sub-list for method input_type
	19, // [19:19] is the sub-list for extension type_name
	19, // [19:19] is the sub-list for extension extendee
	0,  // [0:19] is the sub-list for field type_name
}

func init() {
	file_com_digitalasset_canton_topology_admin_v0_topology_manager_write_service_proto_init()
}
func file_com_digitalasset_canton_topology_admin_v0_topology_manager_write_service_proto_init() {
	if File_com_digitalasset_canton_topology_admin_v0_topology_manager_write_service_proto != nil {
		return
	}
	file_com_digitalasset_canton_topology_admin_v0_topology_manager_write_service_proto_msgTypes[11].OneofWrappers = []any{
		(*DomainParametersChangeAuthorization_ParametersV0)(nil),
		(*DomainParametersChangeAuthorization_ParametersV1)(nil),
		(*DomainParametersChangeAuthorization_ParametersV2)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_com_digitalasset_canton_topology_admin_v0_topology_manager_write_service_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   12,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_com_digitalasset_canton_topology_admin_v0_topology_manager_write_service_proto_goTypes,
		DependencyIndexes: file_com_digitalasset_canton_topology_admin_v0_topology_manager_write_service_proto_depIdxs,
		MessageInfos:      file_com_digitalasset_canton_topology_admin_v0_topology_manager_write_service_proto_msgTypes,
	}.Build()
	File_com_digitalasset_canton_topology_admin_v0_topology_manager_write_service_proto = out.File
	file_com_digitalasset_canton_topology_admin_v0_topology_manager_write_service_proto_rawDesc = nil
	file_com_digitalasset_canton_topology_admin_v0_topology_manager_write_service_proto_goTypes = nil
	file_com_digitalasset_canton_topology_admin_v0_topology_manager_write_service_proto_depIdxs = nil
}
