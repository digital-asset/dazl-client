// Copyright (c) 2017-2025 Digital Asset (Switzerland) GmbH and/or its affiliates. All rights reserved.
// SPDX-License-Identifier: Apache-2.0
// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v6.30.0
// source: com/digitalasset/canton/synchronizer/sequencing/sequencer/bftordering/v30/bft_ordering_service.proto

package v30

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	BftOrderingService_Ping_FullMethodName    = "/com.digitalasset.canton.synchronizer.sequencing.sequencer.bftordering.v30.BftOrderingService/Ping"
	BftOrderingService_Receive_FullMethodName = "/com.digitalasset.canton.synchronizer.sequencing.sequencer.bftordering.v30.BftOrderingService/Receive"
)

// BftOrderingServiceClient is the client API for BftOrderingService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type BftOrderingServiceClient interface {
	Ping(ctx context.Context, in *PingRequest, opts ...grpc.CallOption) (*PingResponse, error)
	Receive(ctx context.Context, opts ...grpc.CallOption) (grpc.BidiStreamingClient[BftOrderingServiceReceiveRequest, BftOrderingServiceReceiveResponse], error)
}

type bftOrderingServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewBftOrderingServiceClient(cc grpc.ClientConnInterface) BftOrderingServiceClient {
	return &bftOrderingServiceClient{cc}
}

func (c *bftOrderingServiceClient) Ping(ctx context.Context, in *PingRequest, opts ...grpc.CallOption) (*PingResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(PingResponse)
	err := c.cc.Invoke(ctx, BftOrderingService_Ping_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bftOrderingServiceClient) Receive(ctx context.Context, opts ...grpc.CallOption) (grpc.BidiStreamingClient[BftOrderingServiceReceiveRequest, BftOrderingServiceReceiveResponse], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &BftOrderingService_ServiceDesc.Streams[0], BftOrderingService_Receive_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[BftOrderingServiceReceiveRequest, BftOrderingServiceReceiveResponse]{ClientStream: stream}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type BftOrderingService_ReceiveClient = grpc.BidiStreamingClient[BftOrderingServiceReceiveRequest, BftOrderingServiceReceiveResponse]

// BftOrderingServiceServer is the server API for BftOrderingService service.
// All implementations must embed UnimplementedBftOrderingServiceServer
// for forward compatibility.
type BftOrderingServiceServer interface {
	Ping(context.Context, *PingRequest) (*PingResponse, error)
	Receive(grpc.BidiStreamingServer[BftOrderingServiceReceiveRequest, BftOrderingServiceReceiveResponse]) error
	mustEmbedUnimplementedBftOrderingServiceServer()
}

// UnimplementedBftOrderingServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedBftOrderingServiceServer struct{}

func (UnimplementedBftOrderingServiceServer) Ping(context.Context, *PingRequest) (*PingResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Ping not implemented")
}
func (UnimplementedBftOrderingServiceServer) Receive(grpc.BidiStreamingServer[BftOrderingServiceReceiveRequest, BftOrderingServiceReceiveResponse]) error {
	return status.Errorf(codes.Unimplemented, "method Receive not implemented")
}
func (UnimplementedBftOrderingServiceServer) mustEmbedUnimplementedBftOrderingServiceServer() {}
func (UnimplementedBftOrderingServiceServer) testEmbeddedByValue()                            {}

// UnsafeBftOrderingServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to BftOrderingServiceServer will
// result in compilation errors.
type UnsafeBftOrderingServiceServer interface {
	mustEmbedUnimplementedBftOrderingServiceServer()
}

func RegisterBftOrderingServiceServer(s grpc.ServiceRegistrar, srv BftOrderingServiceServer) {
	// If the following call pancis, it indicates UnimplementedBftOrderingServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&BftOrderingService_ServiceDesc, srv)
}

func _BftOrderingService_Ping_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PingRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BftOrderingServiceServer).Ping(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BftOrderingService_Ping_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BftOrderingServiceServer).Ping(ctx, req.(*PingRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BftOrderingService_Receive_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(BftOrderingServiceServer).Receive(&grpc.GenericServerStream[BftOrderingServiceReceiveRequest, BftOrderingServiceReceiveResponse]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type BftOrderingService_ReceiveServer = grpc.BidiStreamingServer[BftOrderingServiceReceiveRequest, BftOrderingServiceReceiveResponse]

// BftOrderingService_ServiceDesc is the grpc.ServiceDesc for BftOrderingService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var BftOrderingService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "com.digitalasset.canton.synchronizer.sequencing.sequencer.bftordering.v30.BftOrderingService",
	HandlerType: (*BftOrderingServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Ping",
			Handler:    _BftOrderingService_Ping_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Receive",
			Handler:       _BftOrderingService_Receive_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "com/digitalasset/canton/synchronizer/sequencing/sequencer/bftordering/v30/bft_ordering_service.proto",
}
