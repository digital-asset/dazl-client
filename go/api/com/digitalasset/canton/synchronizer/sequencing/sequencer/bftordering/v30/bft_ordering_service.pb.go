// Copyright (c) 2017-2025 Digital Asset (Switzerland) GmbH and/or its affiliates. All rights reserved.
// SPDX-License-Identifier: Apache-2.0
// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.6
// 	protoc        v6.30.0
// source: com/digitalasset/canton/synchronizer/sequencing/sequencer/bftordering/v30/bft_ordering_service.proto

package v30

import (
	v30 "github.com/digital-asset/dazl-client/v8/go/api/com/digitalasset/canton/crypto/v30"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type PingRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *PingRequest) Reset() {
	*x = PingRequest{}
	mi := &file_com_digitalasset_canton_synchronizer_sequencing_sequencer_bftordering_v30_bft_ordering_service_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PingRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PingRequest) ProtoMessage() {}

func (x *PingRequest) ProtoReflect() protoreflect.Message {
	mi := &file_com_digitalasset_canton_synchronizer_sequencing_sequencer_bftordering_v30_bft_ordering_service_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PingRequest.ProtoReflect.Descriptor instead.
func (*PingRequest) Descriptor() ([]byte, []int) {
	return file_com_digitalasset_canton_synchronizer_sequencing_sequencer_bftordering_v30_bft_ordering_service_proto_rawDescGZIP(), []int{0}
}

type PingResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *PingResponse) Reset() {
	*x = PingResponse{}
	mi := &file_com_digitalasset_canton_synchronizer_sequencing_sequencer_bftordering_v30_bft_ordering_service_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PingResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PingResponse) ProtoMessage() {}

func (x *PingResponse) ProtoReflect() protoreflect.Message {
	mi := &file_com_digitalasset_canton_synchronizer_sequencing_sequencer_bftordering_v30_bft_ordering_service_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PingResponse.ProtoReflect.Descriptor instead.
func (*PingResponse) Descriptor() ([]byte, []int) {
	return file_com_digitalasset_canton_synchronizer_sequencing_sequencer_bftordering_v30_bft_ordering_service_proto_rawDescGZIP(), []int{1}
}

type BftOrderingServiceReceiveRequest struct {
	state         protoimpl.MessageState  `protogen:"open.v1"`
	TraceContext  string                  `protobuf:"bytes,1,opt,name=trace_context,json=traceContext,proto3" json:"trace_context,omitempty"`
	Body          *BftOrderingMessageBody `protobuf:"bytes,2,opt,name=body,proto3" json:"body,omitempty"`
	SentBy        string                  `protobuf:"bytes,3,opt,name=sent_by,json=sentBy,proto3" json:"sent_by,omitempty"`
	SentAt        *timestamppb.Timestamp  `protobuf:"bytes,4,opt,name=sent_at,json=sentAt,proto3" json:"sent_at,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *BftOrderingServiceReceiveRequest) Reset() {
	*x = BftOrderingServiceReceiveRequest{}
	mi := &file_com_digitalasset_canton_synchronizer_sequencing_sequencer_bftordering_v30_bft_ordering_service_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *BftOrderingServiceReceiveRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BftOrderingServiceReceiveRequest) ProtoMessage() {}

func (x *BftOrderingServiceReceiveRequest) ProtoReflect() protoreflect.Message {
	mi := &file_com_digitalasset_canton_synchronizer_sequencing_sequencer_bftordering_v30_bft_ordering_service_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BftOrderingServiceReceiveRequest.ProtoReflect.Descriptor instead.
func (*BftOrderingServiceReceiveRequest) Descriptor() ([]byte, []int) {
	return file_com_digitalasset_canton_synchronizer_sequencing_sequencer_bftordering_v30_bft_ordering_service_proto_rawDescGZIP(), []int{2}
}

func (x *BftOrderingServiceReceiveRequest) GetTraceContext() string {
	if x != nil {
		return x.TraceContext
	}
	return ""
}

func (x *BftOrderingServiceReceiveRequest) GetBody() *BftOrderingMessageBody {
	if x != nil {
		return x.Body
	}
	return nil
}

func (x *BftOrderingServiceReceiveRequest) GetSentBy() string {
	if x != nil {
		return x.SentBy
	}
	return ""
}

func (x *BftOrderingServiceReceiveRequest) GetSentAt() *timestamppb.Timestamp {
	if x != nil {
		return x.SentAt
	}
	return nil
}

type BftOrderingServiceReceiveResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	From          string                 `protobuf:"bytes,1,opt,name=from,proto3" json:"from,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *BftOrderingServiceReceiveResponse) Reset() {
	*x = BftOrderingServiceReceiveResponse{}
	mi := &file_com_digitalasset_canton_synchronizer_sequencing_sequencer_bftordering_v30_bft_ordering_service_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *BftOrderingServiceReceiveResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BftOrderingServiceReceiveResponse) ProtoMessage() {}

func (x *BftOrderingServiceReceiveResponse) ProtoReflect() protoreflect.Message {
	mi := &file_com_digitalasset_canton_synchronizer_sequencing_sequencer_bftordering_v30_bft_ordering_service_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BftOrderingServiceReceiveResponse.ProtoReflect.Descriptor instead.
func (*BftOrderingServiceReceiveResponse) Descriptor() ([]byte, []int) {
	return file_com_digitalasset_canton_synchronizer_sequencing_sequencer_bftordering_v30_bft_ordering_service_proto_rawDescGZIP(), []int{3}
}

func (x *BftOrderingServiceReceiveResponse) GetFrom() string {
	if x != nil {
		return x.From
	}
	return ""
}

type BftOrderingMessageBody struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Types that are valid to be assigned to Message:
	//
	//	*BftOrderingMessageBody_AvailabilityMessage
	//	*BftOrderingMessageBody_ConsensusMessage
	//	*BftOrderingMessageBody_StateTransferMessage
	//	*BftOrderingMessageBody_RetransmissionMessage
	Message       isBftOrderingMessageBody_Message `protobuf_oneof:"message"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *BftOrderingMessageBody) Reset() {
	*x = BftOrderingMessageBody{}
	mi := &file_com_digitalasset_canton_synchronizer_sequencing_sequencer_bftordering_v30_bft_ordering_service_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *BftOrderingMessageBody) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BftOrderingMessageBody) ProtoMessage() {}

func (x *BftOrderingMessageBody) ProtoReflect() protoreflect.Message {
	mi := &file_com_digitalasset_canton_synchronizer_sequencing_sequencer_bftordering_v30_bft_ordering_service_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BftOrderingMessageBody.ProtoReflect.Descriptor instead.
func (*BftOrderingMessageBody) Descriptor() ([]byte, []int) {
	return file_com_digitalasset_canton_synchronizer_sequencing_sequencer_bftordering_v30_bft_ordering_service_proto_rawDescGZIP(), []int{4}
}

func (x *BftOrderingMessageBody) GetMessage() isBftOrderingMessageBody_Message {
	if x != nil {
		return x.Message
	}
	return nil
}

func (x *BftOrderingMessageBody) GetAvailabilityMessage() *SignedMessage {
	if x != nil {
		if x, ok := x.Message.(*BftOrderingMessageBody_AvailabilityMessage); ok {
			return x.AvailabilityMessage
		}
	}
	return nil
}

func (x *BftOrderingMessageBody) GetConsensusMessage() *SignedMessage {
	if x != nil {
		if x, ok := x.Message.(*BftOrderingMessageBody_ConsensusMessage); ok {
			return x.ConsensusMessage
		}
	}
	return nil
}

func (x *BftOrderingMessageBody) GetStateTransferMessage() *SignedMessage {
	if x != nil {
		if x, ok := x.Message.(*BftOrderingMessageBody_StateTransferMessage); ok {
			return x.StateTransferMessage
		}
	}
	return nil
}

func (x *BftOrderingMessageBody) GetRetransmissionMessage() *SignedMessage {
	if x != nil {
		if x, ok := x.Message.(*BftOrderingMessageBody_RetransmissionMessage); ok {
			return x.RetransmissionMessage
		}
	}
	return nil
}

type isBftOrderingMessageBody_Message interface {
	isBftOrderingMessageBody_Message()
}

type BftOrderingMessageBody_AvailabilityMessage struct {
	AvailabilityMessage *SignedMessage `protobuf:"bytes,1,opt,name=availability_message,json=availabilityMessage,proto3,oneof"`
}

type BftOrderingMessageBody_ConsensusMessage struct {
	ConsensusMessage *SignedMessage `protobuf:"bytes,2,opt,name=consensus_message,json=consensusMessage,proto3,oneof"`
}

type BftOrderingMessageBody_StateTransferMessage struct {
	StateTransferMessage *SignedMessage `protobuf:"bytes,3,opt,name=state_transfer_message,json=stateTransferMessage,proto3,oneof"`
}

type BftOrderingMessageBody_RetransmissionMessage struct {
	RetransmissionMessage *SignedMessage `protobuf:"bytes,4,opt,name=retransmission_message,json=retransmissionMessage,proto3,oneof"`
}

func (*BftOrderingMessageBody_AvailabilityMessage) isBftOrderingMessageBody_Message() {}

func (*BftOrderingMessageBody_ConsensusMessage) isBftOrderingMessageBody_Message() {}

func (*BftOrderingMessageBody_StateTransferMessage) isBftOrderingMessageBody_Message() {}

func (*BftOrderingMessageBody_RetransmissionMessage) isBftOrderingMessageBody_Message() {}

type SignedMessage struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Message       []byte                 `protobuf:"bytes,1,opt,name=message,proto3" json:"message,omitempty"`
	From          string                 `protobuf:"bytes,2,opt,name=from,proto3" json:"from,omitempty"`
	Signature     *v30.Signature         `protobuf:"bytes,3,opt,name=signature,proto3" json:"signature,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SignedMessage) Reset() {
	*x = SignedMessage{}
	mi := &file_com_digitalasset_canton_synchronizer_sequencing_sequencer_bftordering_v30_bft_ordering_service_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SignedMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SignedMessage) ProtoMessage() {}

func (x *SignedMessage) ProtoReflect() protoreflect.Message {
	mi := &file_com_digitalasset_canton_synchronizer_sequencing_sequencer_bftordering_v30_bft_ordering_service_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SignedMessage.ProtoReflect.Descriptor instead.
func (*SignedMessage) Descriptor() ([]byte, []int) {
	return file_com_digitalasset_canton_synchronizer_sequencing_sequencer_bftordering_v30_bft_ordering_service_proto_rawDescGZIP(), []int{5}
}

func (x *SignedMessage) GetMessage() []byte {
	if x != nil {
		return x.Message
	}
	return nil
}

func (x *SignedMessage) GetFrom() string {
	if x != nil {
		return x.From
	}
	return ""
}

func (x *SignedMessage) GetSignature() *v30.Signature {
	if x != nil {
		return x.Signature
	}
	return nil
}

type AvailabilityMessage struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Types that are valid to be assigned to Message:
	//
	//	*AvailabilityMessage_Ping
	//	*AvailabilityMessage_StoreRequest
	//	*AvailabilityMessage_StoreResponse
	//	*AvailabilityMessage_BatchRequest
	//	*AvailabilityMessage_BatchResponse
	Message       isAvailabilityMessage_Message `protobuf_oneof:"message"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *AvailabilityMessage) Reset() {
	*x = AvailabilityMessage{}
	mi := &file_com_digitalasset_canton_synchronizer_sequencing_sequencer_bftordering_v30_bft_ordering_service_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AvailabilityMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AvailabilityMessage) ProtoMessage() {}

func (x *AvailabilityMessage) ProtoReflect() protoreflect.Message {
	mi := &file_com_digitalasset_canton_synchronizer_sequencing_sequencer_bftordering_v30_bft_ordering_service_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AvailabilityMessage.ProtoReflect.Descriptor instead.
func (*AvailabilityMessage) Descriptor() ([]byte, []int) {
	return file_com_digitalasset_canton_synchronizer_sequencing_sequencer_bftordering_v30_bft_ordering_service_proto_rawDescGZIP(), []int{6}
}

func (x *AvailabilityMessage) GetMessage() isAvailabilityMessage_Message {
	if x != nil {
		return x.Message
	}
	return nil
}

func (x *AvailabilityMessage) GetPing() *emptypb.Empty {
	if x != nil {
		if x, ok := x.Message.(*AvailabilityMessage_Ping); ok {
			return x.Ping
		}
	}
	return nil
}

func (x *AvailabilityMessage) GetStoreRequest() *StoreRequest {
	if x != nil {
		if x, ok := x.Message.(*AvailabilityMessage_StoreRequest); ok {
			return x.StoreRequest
		}
	}
	return nil
}

func (x *AvailabilityMessage) GetStoreResponse() *StoreResponse {
	if x != nil {
		if x, ok := x.Message.(*AvailabilityMessage_StoreResponse); ok {
			return x.StoreResponse
		}
	}
	return nil
}

func (x *AvailabilityMessage) GetBatchRequest() *BatchRequest {
	if x != nil {
		if x, ok := x.Message.(*AvailabilityMessage_BatchRequest); ok {
			return x.BatchRequest
		}
	}
	return nil
}

func (x *AvailabilityMessage) GetBatchResponse() *BatchResponse {
	if x != nil {
		if x, ok := x.Message.(*AvailabilityMessage_BatchResponse); ok {
			return x.BatchResponse
		}
	}
	return nil
}

type isAvailabilityMessage_Message interface {
	isAvailabilityMessage_Message()
}

type AvailabilityMessage_Ping struct {
	Ping *emptypb.Empty `protobuf:"bytes,1,opt,name=ping,proto3,oneof"`
}

type AvailabilityMessage_StoreRequest struct {
	StoreRequest *StoreRequest `protobuf:"bytes,2,opt,name=store_request,json=storeRequest,proto3,oneof"`
}

type AvailabilityMessage_StoreResponse struct {
	StoreResponse *StoreResponse `protobuf:"bytes,3,opt,name=store_response,json=storeResponse,proto3,oneof"`
}

type AvailabilityMessage_BatchRequest struct {
	BatchRequest *BatchRequest `protobuf:"bytes,4,opt,name=batch_request,json=batchRequest,proto3,oneof"`
}

type AvailabilityMessage_BatchResponse struct {
	BatchResponse *BatchResponse `protobuf:"bytes,5,opt,name=batch_response,json=batchResponse,proto3,oneof"`
}

func (*AvailabilityMessage_Ping) isAvailabilityMessage_Message() {}

func (*AvailabilityMessage_StoreRequest) isAvailabilityMessage_Message() {}

func (*AvailabilityMessage_StoreResponse) isAvailabilityMessage_Message() {}

func (*AvailabilityMessage_BatchRequest) isAvailabilityMessage_Message() {}

func (*AvailabilityMessage_BatchResponse) isAvailabilityMessage_Message() {}

type StoreRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	BatchId       []byte                 `protobuf:"bytes,1,opt,name=batch_id,json=batchId,proto3" json:"batch_id,omitempty"`
	Batch         *Batch                 `protobuf:"bytes,2,opt,name=batch,proto3" json:"batch,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *StoreRequest) Reset() {
	*x = StoreRequest{}
	mi := &file_com_digitalasset_canton_synchronizer_sequencing_sequencer_bftordering_v30_bft_ordering_service_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *StoreRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StoreRequest) ProtoMessage() {}

func (x *StoreRequest) ProtoReflect() protoreflect.Message {
	mi := &file_com_digitalasset_canton_synchronizer_sequencing_sequencer_bftordering_v30_bft_ordering_service_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StoreRequest.ProtoReflect.Descriptor instead.
func (*StoreRequest) Descriptor() ([]byte, []int) {
	return file_com_digitalasset_canton_synchronizer_sequencing_sequencer_bftordering_v30_bft_ordering_service_proto_rawDescGZIP(), []int{7}
}

func (x *StoreRequest) GetBatchId() []byte {
	if x != nil {
		return x.BatchId
	}
	return nil
}

func (x *StoreRequest) GetBatch() *Batch {
	if x != nil {
		return x.Batch
	}
	return nil
}

type Batch struct {
	state            protoimpl.MessageState `protogen:"open.v1"`
	OrderingRequests []*OrderingRequest     `protobuf:"bytes,1,rep,name=ordering_requests,json=orderingRequests,proto3" json:"ordering_requests,omitempty"`
	EpochNumber      int64                  `protobuf:"varint,2,opt,name=epoch_number,json=epochNumber,proto3" json:"epoch_number,omitempty"`
	unknownFields    protoimpl.UnknownFields
	sizeCache        protoimpl.SizeCache
}

func (x *Batch) Reset() {
	*x = Batch{}
	mi := &file_com_digitalasset_canton_synchronizer_sequencing_sequencer_bftordering_v30_bft_ordering_service_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Batch) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Batch) ProtoMessage() {}

func (x *Batch) ProtoReflect() protoreflect.Message {
	mi := &file_com_digitalasset_canton_synchronizer_sequencing_sequencer_bftordering_v30_bft_ordering_service_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Batch.ProtoReflect.Descriptor instead.
func (*Batch) Descriptor() ([]byte, []int) {
	return file_com_digitalasset_canton_synchronizer_sequencing_sequencer_bftordering_v30_bft_ordering_service_proto_rawDescGZIP(), []int{8}
}

func (x *Batch) GetOrderingRequests() []*OrderingRequest {
	if x != nil {
		return x.OrderingRequests
	}
	return nil
}

func (x *Batch) GetEpochNumber() int64 {
	if x != nil {
		return x.EpochNumber
	}
	return 0
}

type OrderingRequest struct {
	state                protoimpl.MessageState `protogen:"open.v1"`
	TraceContext         string                 `protobuf:"bytes,1,opt,name=trace_context,json=traceContext,proto3" json:"trace_context,omitempty"`
	Tag                  string                 `protobuf:"bytes,2,opt,name=tag,proto3" json:"tag,omitempty"`
	Payload              []byte                 `protobuf:"bytes,3,opt,name=payload,proto3" json:"payload,omitempty"`
	OrderingStartInstant *timestamppb.Timestamp `protobuf:"bytes,4,opt,name=ordering_start_instant,json=orderingStartInstant,proto3" json:"ordering_start_instant,omitempty"`
	unknownFields        protoimpl.UnknownFields
	sizeCache            protoimpl.SizeCache
}

func (x *OrderingRequest) Reset() {
	*x = OrderingRequest{}
	mi := &file_com_digitalasset_canton_synchronizer_sequencing_sequencer_bftordering_v30_bft_ordering_service_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *OrderingRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OrderingRequest) ProtoMessage() {}

func (x *OrderingRequest) ProtoReflect() protoreflect.Message {
	mi := &file_com_digitalasset_canton_synchronizer_sequencing_sequencer_bftordering_v30_bft_ordering_service_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OrderingRequest.ProtoReflect.Descriptor instead.
func (*OrderingRequest) Descriptor() ([]byte, []int) {
	return file_com_digitalasset_canton_synchronizer_sequencing_sequencer_bftordering_v30_bft_ordering_service_proto_rawDescGZIP(), []int{9}
}

func (x *OrderingRequest) GetTraceContext() string {
	if x != nil {
		return x.TraceContext
	}
	return ""
}

func (x *OrderingRequest) GetTag() string {
	if x != nil {
		return x.Tag
	}
	return ""
}

func (x *OrderingRequest) GetPayload() []byte {
	if x != nil {
		return x.Payload
	}
	return nil
}

func (x *OrderingRequest) GetOrderingStartInstant() *timestamppb.Timestamp {
	if x != nil {
		return x.OrderingStartInstant
	}
	return nil
}

type StoreResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	BatchId       []byte                 `protobuf:"bytes,1,opt,name=batch_id,json=batchId,proto3" json:"batch_id,omitempty"`
	Signature     *v30.Signature         `protobuf:"bytes,2,opt,name=signature,proto3" json:"signature,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *StoreResponse) Reset() {
	*x = StoreResponse{}
	mi := &file_com_digitalasset_canton_synchronizer_sequencing_sequencer_bftordering_v30_bft_ordering_service_proto_msgTypes[10]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *StoreResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StoreResponse) ProtoMessage() {}

func (x *StoreResponse) ProtoReflect() protoreflect.Message {
	mi := &file_com_digitalasset_canton_synchronizer_sequencing_sequencer_bftordering_v30_bft_ordering_service_proto_msgTypes[10]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StoreResponse.ProtoReflect.Descriptor instead.
func (*StoreResponse) Descriptor() ([]byte, []int) {
	return file_com_digitalasset_canton_synchronizer_sequencing_sequencer_bftordering_v30_bft_ordering_service_proto_rawDescGZIP(), []int{10}
}

func (x *StoreResponse) GetBatchId() []byte {
	if x != nil {
		return x.BatchId
	}
	return nil
}

func (x *StoreResponse) GetSignature() *v30.Signature {
	if x != nil {
		return x.Signature
	}
	return nil
}

type BatchRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	BatchId       []byte                 `protobuf:"bytes,1,opt,name=batch_id,json=batchId,proto3" json:"batch_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *BatchRequest) Reset() {
	*x = BatchRequest{}
	mi := &file_com_digitalasset_canton_synchronizer_sequencing_sequencer_bftordering_v30_bft_ordering_service_proto_msgTypes[11]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *BatchRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BatchRequest) ProtoMessage() {}

func (x *BatchRequest) ProtoReflect() protoreflect.Message {
	mi := &file_com_digitalasset_canton_synchronizer_sequencing_sequencer_bftordering_v30_bft_ordering_service_proto_msgTypes[11]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BatchRequest.ProtoReflect.Descriptor instead.
func (*BatchRequest) Descriptor() ([]byte, []int) {
	return file_com_digitalasset_canton_synchronizer_sequencing_sequencer_bftordering_v30_bft_ordering_service_proto_rawDescGZIP(), []int{11}
}

func (x *BatchRequest) GetBatchId() []byte {
	if x != nil {
		return x.BatchId
	}
	return nil
}

type BatchResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	BatchId       []byte                 `protobuf:"bytes,1,opt,name=batch_id,json=batchId,proto3" json:"batch_id,omitempty"`
	Batch         *Batch                 `protobuf:"bytes,2,opt,name=batch,proto3" json:"batch,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *BatchResponse) Reset() {
	*x = BatchResponse{}
	mi := &file_com_digitalasset_canton_synchronizer_sequencing_sequencer_bftordering_v30_bft_ordering_service_proto_msgTypes[12]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *BatchResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BatchResponse) ProtoMessage() {}

func (x *BatchResponse) ProtoReflect() protoreflect.Message {
	mi := &file_com_digitalasset_canton_synchronizer_sequencing_sequencer_bftordering_v30_bft_ordering_service_proto_msgTypes[12]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BatchResponse.ProtoReflect.Descriptor instead.
func (*BatchResponse) Descriptor() ([]byte, []int) {
	return file_com_digitalasset_canton_synchronizer_sequencing_sequencer_bftordering_v30_bft_ordering_service_proto_rawDescGZIP(), []int{12}
}

func (x *BatchResponse) GetBatchId() []byte {
	if x != nil {
		return x.BatchId
	}
	return nil
}

func (x *BatchResponse) GetBatch() *Batch {
	if x != nil {
		return x.Batch
	}
	return nil
}

type OrderingBlock struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Proofs        []*ProofOfAvailability `protobuf:"bytes,1,rep,name=proofs,proto3" json:"proofs,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *OrderingBlock) Reset() {
	*x = OrderingBlock{}
	mi := &file_com_digitalasset_canton_synchronizer_sequencing_sequencer_bftordering_v30_bft_ordering_service_proto_msgTypes[13]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *OrderingBlock) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OrderingBlock) ProtoMessage() {}

func (x *OrderingBlock) ProtoReflect() protoreflect.Message {
	mi := &file_com_digitalasset_canton_synchronizer_sequencing_sequencer_bftordering_v30_bft_ordering_service_proto_msgTypes[13]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OrderingBlock.ProtoReflect.Descriptor instead.
func (*OrderingBlock) Descriptor() ([]byte, []int) {
	return file_com_digitalasset_canton_synchronizer_sequencing_sequencer_bftordering_v30_bft_ordering_service_proto_rawDescGZIP(), []int{13}
}

func (x *OrderingBlock) GetProofs() []*ProofOfAvailability {
	if x != nil {
		return x.Proofs
	}
	return nil
}

type ProofOfAvailability struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	BatchId       []byte                 `protobuf:"bytes,1,opt,name=batch_id,json=batchId,proto3" json:"batch_id,omitempty"`
	Acks          []*AvailabilityAck     `protobuf:"bytes,2,rep,name=acks,proto3" json:"acks,omitempty"`
	EpochNumber   int64                  `protobuf:"varint,3,opt,name=epoch_number,json=epochNumber,proto3" json:"epoch_number,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ProofOfAvailability) Reset() {
	*x = ProofOfAvailability{}
	mi := &file_com_digitalasset_canton_synchronizer_sequencing_sequencer_bftordering_v30_bft_ordering_service_proto_msgTypes[14]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ProofOfAvailability) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProofOfAvailability) ProtoMessage() {}

func (x *ProofOfAvailability) ProtoReflect() protoreflect.Message {
	mi := &file_com_digitalasset_canton_synchronizer_sequencing_sequencer_bftordering_v30_bft_ordering_service_proto_msgTypes[14]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProofOfAvailability.ProtoReflect.Descriptor instead.
func (*ProofOfAvailability) Descriptor() ([]byte, []int) {
	return file_com_digitalasset_canton_synchronizer_sequencing_sequencer_bftordering_v30_bft_ordering_service_proto_rawDescGZIP(), []int{14}
}

func (x *ProofOfAvailability) GetBatchId() []byte {
	if x != nil {
		return x.BatchId
	}
	return nil
}

func (x *ProofOfAvailability) GetAcks() []*AvailabilityAck {
	if x != nil {
		return x.Acks
	}
	return nil
}

func (x *ProofOfAvailability) GetEpochNumber() int64 {
	if x != nil {
		return x.EpochNumber
	}
	return 0
}

type AvailabilityAck struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	From          string                 `protobuf:"bytes,1,opt,name=from,proto3" json:"from,omitempty"`
	Signature     *v30.Signature         `protobuf:"bytes,2,opt,name=signature,proto3" json:"signature,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *AvailabilityAck) Reset() {
	*x = AvailabilityAck{}
	mi := &file_com_digitalasset_canton_synchronizer_sequencing_sequencer_bftordering_v30_bft_ordering_service_proto_msgTypes[15]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AvailabilityAck) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AvailabilityAck) ProtoMessage() {}

func (x *AvailabilityAck) ProtoReflect() protoreflect.Message {
	mi := &file_com_digitalasset_canton_synchronizer_sequencing_sequencer_bftordering_v30_bft_ordering_service_proto_msgTypes[15]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AvailabilityAck.ProtoReflect.Descriptor instead.
func (*AvailabilityAck) Descriptor() ([]byte, []int) {
	return file_com_digitalasset_canton_synchronizer_sequencing_sequencer_bftordering_v30_bft_ordering_service_proto_rawDescGZIP(), []int{15}
}

func (x *AvailabilityAck) GetFrom() string {
	if x != nil {
		return x.From
	}
	return ""
}

func (x *AvailabilityAck) GetSignature() *v30.Signature {
	if x != nil {
		return x.Signature
	}
	return nil
}

type ConsensusMessage struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	BlockMetadata *BlockMetadata         `protobuf:"bytes,1,opt,name=block_metadata,json=blockMetadata,proto3" json:"block_metadata,omitempty"`
	ViewNumber    int64                  `protobuf:"varint,2,opt,name=view_number,json=viewNumber,proto3" json:"view_number,omitempty"`
	From          string                 `protobuf:"bytes,3,opt,name=from,proto3" json:"from,omitempty"`
	// Types that are valid to be assigned to Message:
	//
	//	*ConsensusMessage_PrePrepare
	//	*ConsensusMessage_Prepare
	//	*ConsensusMessage_Commit
	//	*ConsensusMessage_ViewChange
	//	*ConsensusMessage_NewView
	Message       isConsensusMessage_Message `protobuf_oneof:"message"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ConsensusMessage) Reset() {
	*x = ConsensusMessage{}
	mi := &file_com_digitalasset_canton_synchronizer_sequencing_sequencer_bftordering_v30_bft_ordering_service_proto_msgTypes[16]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ConsensusMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConsensusMessage) ProtoMessage() {}

func (x *ConsensusMessage) ProtoReflect() protoreflect.Message {
	mi := &file_com_digitalasset_canton_synchronizer_sequencing_sequencer_bftordering_v30_bft_ordering_service_proto_msgTypes[16]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConsensusMessage.ProtoReflect.Descriptor instead.
func (*ConsensusMessage) Descriptor() ([]byte, []int) {
	return file_com_digitalasset_canton_synchronizer_sequencing_sequencer_bftordering_v30_bft_ordering_service_proto_rawDescGZIP(), []int{16}
}

func (x *ConsensusMessage) GetBlockMetadata() *BlockMetadata {
	if x != nil {
		return x.BlockMetadata
	}
	return nil
}

func (x *ConsensusMessage) GetViewNumber() int64 {
	if x != nil {
		return x.ViewNumber
	}
	return 0
}

func (x *ConsensusMessage) GetFrom() string {
	if x != nil {
		return x.From
	}
	return ""
}

func (x *ConsensusMessage) GetMessage() isConsensusMessage_Message {
	if x != nil {
		return x.Message
	}
	return nil
}

func (x *ConsensusMessage) GetPrePrepare() *PrePrepare {
	if x != nil {
		if x, ok := x.Message.(*ConsensusMessage_PrePrepare); ok {
			return x.PrePrepare
		}
	}
	return nil
}

func (x *ConsensusMessage) GetPrepare() *Prepare {
	if x != nil {
		if x, ok := x.Message.(*ConsensusMessage_Prepare); ok {
			return x.Prepare
		}
	}
	return nil
}

func (x *ConsensusMessage) GetCommit() *Commit {
	if x != nil {
		if x, ok := x.Message.(*ConsensusMessage_Commit); ok {
			return x.Commit
		}
	}
	return nil
}

func (x *ConsensusMessage) GetViewChange() *ViewChange {
	if x != nil {
		if x, ok := x.Message.(*ConsensusMessage_ViewChange); ok {
			return x.ViewChange
		}
	}
	return nil
}

func (x *ConsensusMessage) GetNewView() *NewView {
	if x != nil {
		if x, ok := x.Message.(*ConsensusMessage_NewView); ok {
			return x.NewView
		}
	}
	return nil
}

type isConsensusMessage_Message interface {
	isConsensusMessage_Message()
}

type ConsensusMessage_PrePrepare struct {
	PrePrepare *PrePrepare `protobuf:"bytes,4,opt,name=pre_prepare,json=prePrepare,proto3,oneof"`
}

type ConsensusMessage_Prepare struct {
	Prepare *Prepare `protobuf:"bytes,5,opt,name=prepare,proto3,oneof"`
}

type ConsensusMessage_Commit struct {
	Commit *Commit `protobuf:"bytes,6,opt,name=commit,proto3,oneof"`
}

type ConsensusMessage_ViewChange struct {
	ViewChange *ViewChange `protobuf:"bytes,7,opt,name=view_change,json=viewChange,proto3,oneof"`
}

type ConsensusMessage_NewView struct {
	NewView *NewView `protobuf:"bytes,8,opt,name=new_view,json=newView,proto3,oneof"`
}

func (*ConsensusMessage_PrePrepare) isConsensusMessage_Message() {}

func (*ConsensusMessage_Prepare) isConsensusMessage_Message() {}

func (*ConsensusMessage_Commit) isConsensusMessage_Message() {}

func (*ConsensusMessage_ViewChange) isConsensusMessage_Message() {}

func (*ConsensusMessage_NewView) isConsensusMessage_Message() {}

type BlockMetadata struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	EpochNumber   int64                  `protobuf:"varint,1,opt,name=epoch_number,json=epochNumber,proto3" json:"epoch_number,omitempty"`
	BlockNumber   int64                  `protobuf:"varint,2,opt,name=block_number,json=blockNumber,proto3" json:"block_number,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *BlockMetadata) Reset() {
	*x = BlockMetadata{}
	mi := &file_com_digitalasset_canton_synchronizer_sequencing_sequencer_bftordering_v30_bft_ordering_service_proto_msgTypes[17]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *BlockMetadata) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BlockMetadata) ProtoMessage() {}

func (x *BlockMetadata) ProtoReflect() protoreflect.Message {
	mi := &file_com_digitalasset_canton_synchronizer_sequencing_sequencer_bftordering_v30_bft_ordering_service_proto_msgTypes[17]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BlockMetadata.ProtoReflect.Descriptor instead.
func (*BlockMetadata) Descriptor() ([]byte, []int) {
	return file_com_digitalasset_canton_synchronizer_sequencing_sequencer_bftordering_v30_bft_ordering_service_proto_rawDescGZIP(), []int{17}
}

func (x *BlockMetadata) GetEpochNumber() int64 {
	if x != nil {
		return x.EpochNumber
	}
	return 0
}

func (x *BlockMetadata) GetBlockNumber() int64 {
	if x != nil {
		return x.BlockNumber
	}
	return 0
}

type PrePrepare struct {
	state                     protoimpl.MessageState `protogen:"open.v1"`
	Block                     *OrderingBlock         `protobuf:"bytes,1,opt,name=block,proto3" json:"block,omitempty"`
	BftTimeCanonicalCommitSet *CanonicalCommitSet    `protobuf:"bytes,2,opt,name=bft_time_canonical_commit_set,json=bftTimeCanonicalCommitSet,proto3" json:"bft_time_canonical_commit_set,omitempty"`
	unknownFields             protoimpl.UnknownFields
	sizeCache                 protoimpl.SizeCache
}

func (x *PrePrepare) Reset() {
	*x = PrePrepare{}
	mi := &file_com_digitalasset_canton_synchronizer_sequencing_sequencer_bftordering_v30_bft_ordering_service_proto_msgTypes[18]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PrePrepare) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PrePrepare) ProtoMessage() {}

func (x *PrePrepare) ProtoReflect() protoreflect.Message {
	mi := &file_com_digitalasset_canton_synchronizer_sequencing_sequencer_bftordering_v30_bft_ordering_service_proto_msgTypes[18]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PrePrepare.ProtoReflect.Descriptor instead.
func (*PrePrepare) Descriptor() ([]byte, []int) {
	return file_com_digitalasset_canton_synchronizer_sequencing_sequencer_bftordering_v30_bft_ordering_service_proto_rawDescGZIP(), []int{18}
}

func (x *PrePrepare) GetBlock() *OrderingBlock {
	if x != nil {
		return x.Block
	}
	return nil
}

func (x *PrePrepare) GetBftTimeCanonicalCommitSet() *CanonicalCommitSet {
	if x != nil {
		return x.BftTimeCanonicalCommitSet
	}
	return nil
}

type Prepare struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	BlockHash     []byte                 `protobuf:"bytes,1,opt,name=block_hash,json=blockHash,proto3" json:"block_hash,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Prepare) Reset() {
	*x = Prepare{}
	mi := &file_com_digitalasset_canton_synchronizer_sequencing_sequencer_bftordering_v30_bft_ordering_service_proto_msgTypes[19]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Prepare) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Prepare) ProtoMessage() {}

func (x *Prepare) ProtoReflect() protoreflect.Message {
	mi := &file_com_digitalasset_canton_synchronizer_sequencing_sequencer_bftordering_v30_bft_ordering_service_proto_msgTypes[19]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Prepare.ProtoReflect.Descriptor instead.
func (*Prepare) Descriptor() ([]byte, []int) {
	return file_com_digitalasset_canton_synchronizer_sequencing_sequencer_bftordering_v30_bft_ordering_service_proto_rawDescGZIP(), []int{19}
}

func (x *Prepare) GetBlockHash() []byte {
	if x != nil {
		return x.BlockHash
	}
	return nil
}

type Commit struct {
	state          protoimpl.MessageState `protogen:"open.v1"`
	BlockHash      []byte                 `protobuf:"bytes,1,opt,name=block_hash,json=blockHash,proto3" json:"block_hash,omitempty"`
	LocalTimestamp int64                  `protobuf:"varint,2,opt,name=local_timestamp,json=localTimestamp,proto3" json:"local_timestamp,omitempty"`
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *Commit) Reset() {
	*x = Commit{}
	mi := &file_com_digitalasset_canton_synchronizer_sequencing_sequencer_bftordering_v30_bft_ordering_service_proto_msgTypes[20]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Commit) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Commit) ProtoMessage() {}

func (x *Commit) ProtoReflect() protoreflect.Message {
	mi := &file_com_digitalasset_canton_synchronizer_sequencing_sequencer_bftordering_v30_bft_ordering_service_proto_msgTypes[20]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Commit.ProtoReflect.Descriptor instead.
func (*Commit) Descriptor() ([]byte, []int) {
	return file_com_digitalasset_canton_synchronizer_sequencing_sequencer_bftordering_v30_bft_ordering_service_proto_rawDescGZIP(), []int{20}
}

func (x *Commit) GetBlockHash() []byte {
	if x != nil {
		return x.BlockHash
	}
	return nil
}

func (x *Commit) GetLocalTimestamp() int64 {
	if x != nil {
		return x.LocalTimestamp
	}
	return 0
}

type ViewChange struct {
	state          protoimpl.MessageState  `protogen:"open.v1"`
	ConsensusCerts []*ConsensusCertificate `protobuf:"bytes,2,rep,name=consensus_certs,json=consensusCerts,proto3" json:"consensus_certs,omitempty"`
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *ViewChange) Reset() {
	*x = ViewChange{}
	mi := &file_com_digitalasset_canton_synchronizer_sequencing_sequencer_bftordering_v30_bft_ordering_service_proto_msgTypes[21]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ViewChange) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ViewChange) ProtoMessage() {}

func (x *ViewChange) ProtoReflect() protoreflect.Message {
	mi := &file_com_digitalasset_canton_synchronizer_sequencing_sequencer_bftordering_v30_bft_ordering_service_proto_msgTypes[21]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ViewChange.ProtoReflect.Descriptor instead.
func (*ViewChange) Descriptor() ([]byte, []int) {
	return file_com_digitalasset_canton_synchronizer_sequencing_sequencer_bftordering_v30_bft_ordering_service_proto_rawDescGZIP(), []int{21}
}

func (x *ViewChange) GetConsensusCerts() []*ConsensusCertificate {
	if x != nil {
		return x.ConsensusCerts
	}
	return nil
}

type NewView struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	ViewChanges   []*SignedMessage       `protobuf:"bytes,2,rep,name=view_changes,json=viewChanges,proto3" json:"view_changes,omitempty"`
	PrePrepares   []*SignedMessage       `protobuf:"bytes,3,rep,name=pre_prepares,json=prePrepares,proto3" json:"pre_prepares,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *NewView) Reset() {
	*x = NewView{}
	mi := &file_com_digitalasset_canton_synchronizer_sequencing_sequencer_bftordering_v30_bft_ordering_service_proto_msgTypes[22]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *NewView) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NewView) ProtoMessage() {}

func (x *NewView) ProtoReflect() protoreflect.Message {
	mi := &file_com_digitalasset_canton_synchronizer_sequencing_sequencer_bftordering_v30_bft_ordering_service_proto_msgTypes[22]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NewView.ProtoReflect.Descriptor instead.
func (*NewView) Descriptor() ([]byte, []int) {
	return file_com_digitalasset_canton_synchronizer_sequencing_sequencer_bftordering_v30_bft_ordering_service_proto_rawDescGZIP(), []int{22}
}

func (x *NewView) GetViewChanges() []*SignedMessage {
	if x != nil {
		return x.ViewChanges
	}
	return nil
}

func (x *NewView) GetPrePrepares() []*SignedMessage {
	if x != nil {
		return x.PrePrepares
	}
	return nil
}

type CanonicalCommitSet struct {
	state            protoimpl.MessageState `protogen:"open.v1"`
	CanonicalCommits []*SignedMessage       `protobuf:"bytes,1,rep,name=canonical_commits,json=canonicalCommits,proto3" json:"canonical_commits,omitempty"`
	unknownFields    protoimpl.UnknownFields
	sizeCache        protoimpl.SizeCache
}

func (x *CanonicalCommitSet) Reset() {
	*x = CanonicalCommitSet{}
	mi := &file_com_digitalasset_canton_synchronizer_sequencing_sequencer_bftordering_v30_bft_ordering_service_proto_msgTypes[23]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CanonicalCommitSet) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CanonicalCommitSet) ProtoMessage() {}

func (x *CanonicalCommitSet) ProtoReflect() protoreflect.Message {
	mi := &file_com_digitalasset_canton_synchronizer_sequencing_sequencer_bftordering_v30_bft_ordering_service_proto_msgTypes[23]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CanonicalCommitSet.ProtoReflect.Descriptor instead.
func (*CanonicalCommitSet) Descriptor() ([]byte, []int) {
	return file_com_digitalasset_canton_synchronizer_sequencing_sequencer_bftordering_v30_bft_ordering_service_proto_rawDescGZIP(), []int{23}
}

func (x *CanonicalCommitSet) GetCanonicalCommits() []*SignedMessage {
	if x != nil {
		return x.CanonicalCommits
	}
	return nil
}

type ConsensusCertificate struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Types that are valid to be assigned to Certificate:
	//
	//	*ConsensusCertificate_PrepareCertificate
	//	*ConsensusCertificate_CommitCertificate
	Certificate   isConsensusCertificate_Certificate `protobuf_oneof:"certificate"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ConsensusCertificate) Reset() {
	*x = ConsensusCertificate{}
	mi := &file_com_digitalasset_canton_synchronizer_sequencing_sequencer_bftordering_v30_bft_ordering_service_proto_msgTypes[24]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ConsensusCertificate) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConsensusCertificate) ProtoMessage() {}

func (x *ConsensusCertificate) ProtoReflect() protoreflect.Message {
	mi := &file_com_digitalasset_canton_synchronizer_sequencing_sequencer_bftordering_v30_bft_ordering_service_proto_msgTypes[24]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConsensusCertificate.ProtoReflect.Descriptor instead.
func (*ConsensusCertificate) Descriptor() ([]byte, []int) {
	return file_com_digitalasset_canton_synchronizer_sequencing_sequencer_bftordering_v30_bft_ordering_service_proto_rawDescGZIP(), []int{24}
}

func (x *ConsensusCertificate) GetCertificate() isConsensusCertificate_Certificate {
	if x != nil {
		return x.Certificate
	}
	return nil
}

func (x *ConsensusCertificate) GetPrepareCertificate() *PrepareCertificate {
	if x != nil {
		if x, ok := x.Certificate.(*ConsensusCertificate_PrepareCertificate); ok {
			return x.PrepareCertificate
		}
	}
	return nil
}

func (x *ConsensusCertificate) GetCommitCertificate() *CommitCertificate {
	if x != nil {
		if x, ok := x.Certificate.(*ConsensusCertificate_CommitCertificate); ok {
			return x.CommitCertificate
		}
	}
	return nil
}

type isConsensusCertificate_Certificate interface {
	isConsensusCertificate_Certificate()
}

type ConsensusCertificate_PrepareCertificate struct {
	PrepareCertificate *PrepareCertificate `protobuf:"bytes,1,opt,name=prepare_certificate,json=prepareCertificate,proto3,oneof"`
}

type ConsensusCertificate_CommitCertificate struct {
	CommitCertificate *CommitCertificate `protobuf:"bytes,2,opt,name=commit_certificate,json=commitCertificate,proto3,oneof"`
}

func (*ConsensusCertificate_PrepareCertificate) isConsensusCertificate_Certificate() {}

func (*ConsensusCertificate_CommitCertificate) isConsensusCertificate_Certificate() {}

type PrepareCertificate struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	PrePrepare    *SignedMessage         `protobuf:"bytes,1,opt,name=pre_prepare,json=prePrepare,proto3" json:"pre_prepare,omitempty"`
	Prepares      []*SignedMessage       `protobuf:"bytes,2,rep,name=prepares,proto3" json:"prepares,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *PrepareCertificate) Reset() {
	*x = PrepareCertificate{}
	mi := &file_com_digitalasset_canton_synchronizer_sequencing_sequencer_bftordering_v30_bft_ordering_service_proto_msgTypes[25]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PrepareCertificate) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PrepareCertificate) ProtoMessage() {}

func (x *PrepareCertificate) ProtoReflect() protoreflect.Message {
	mi := &file_com_digitalasset_canton_synchronizer_sequencing_sequencer_bftordering_v30_bft_ordering_service_proto_msgTypes[25]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PrepareCertificate.ProtoReflect.Descriptor instead.
func (*PrepareCertificate) Descriptor() ([]byte, []int) {
	return file_com_digitalasset_canton_synchronizer_sequencing_sequencer_bftordering_v30_bft_ordering_service_proto_rawDescGZIP(), []int{25}
}

func (x *PrepareCertificate) GetPrePrepare() *SignedMessage {
	if x != nil {
		return x.PrePrepare
	}
	return nil
}

func (x *PrepareCertificate) GetPrepares() []*SignedMessage {
	if x != nil {
		return x.Prepares
	}
	return nil
}

type CommitCertificate struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	PrePrepare    *SignedMessage         `protobuf:"bytes,1,opt,name=pre_prepare,json=prePrepare,proto3" json:"pre_prepare,omitempty"`
	Commits       []*SignedMessage       `protobuf:"bytes,2,rep,name=commits,proto3" json:"commits,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CommitCertificate) Reset() {
	*x = CommitCertificate{}
	mi := &file_com_digitalasset_canton_synchronizer_sequencing_sequencer_bftordering_v30_bft_ordering_service_proto_msgTypes[26]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CommitCertificate) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CommitCertificate) ProtoMessage() {}

func (x *CommitCertificate) ProtoReflect() protoreflect.Message {
	mi := &file_com_digitalasset_canton_synchronizer_sequencing_sequencer_bftordering_v30_bft_ordering_service_proto_msgTypes[26]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CommitCertificate.ProtoReflect.Descriptor instead.
func (*CommitCertificate) Descriptor() ([]byte, []int) {
	return file_com_digitalasset_canton_synchronizer_sequencing_sequencer_bftordering_v30_bft_ordering_service_proto_rawDescGZIP(), []int{26}
}

func (x *CommitCertificate) GetPrePrepare() *SignedMessage {
	if x != nil {
		return x.PrePrepare
	}
	return nil
}

func (x *CommitCertificate) GetCommits() []*SignedMessage {
	if x != nil {
		return x.Commits
	}
	return nil
}

type RetransmissionMessage struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Types that are valid to be assigned to Message:
	//
	//	*RetransmissionMessage_RetransmissionRequest
	//	*RetransmissionMessage_RetransmissionResponse
	Message       isRetransmissionMessage_Message `protobuf_oneof:"message"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *RetransmissionMessage) Reset() {
	*x = RetransmissionMessage{}
	mi := &file_com_digitalasset_canton_synchronizer_sequencing_sequencer_bftordering_v30_bft_ordering_service_proto_msgTypes[27]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RetransmissionMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RetransmissionMessage) ProtoMessage() {}

func (x *RetransmissionMessage) ProtoReflect() protoreflect.Message {
	mi := &file_com_digitalasset_canton_synchronizer_sequencing_sequencer_bftordering_v30_bft_ordering_service_proto_msgTypes[27]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RetransmissionMessage.ProtoReflect.Descriptor instead.
func (*RetransmissionMessage) Descriptor() ([]byte, []int) {
	return file_com_digitalasset_canton_synchronizer_sequencing_sequencer_bftordering_v30_bft_ordering_service_proto_rawDescGZIP(), []int{27}
}

func (x *RetransmissionMessage) GetMessage() isRetransmissionMessage_Message {
	if x != nil {
		return x.Message
	}
	return nil
}

func (x *RetransmissionMessage) GetRetransmissionRequest() *EpochStatus {
	if x != nil {
		if x, ok := x.Message.(*RetransmissionMessage_RetransmissionRequest); ok {
			return x.RetransmissionRequest
		}
	}
	return nil
}

func (x *RetransmissionMessage) GetRetransmissionResponse() *RetransmissionResponse {
	if x != nil {
		if x, ok := x.Message.(*RetransmissionMessage_RetransmissionResponse); ok {
			return x.RetransmissionResponse
		}
	}
	return nil
}

type isRetransmissionMessage_Message interface {
	isRetransmissionMessage_Message()
}

type RetransmissionMessage_RetransmissionRequest struct {
	RetransmissionRequest *EpochStatus `protobuf:"bytes,1,opt,name=retransmission_request,json=retransmissionRequest,proto3,oneof"`
}

type RetransmissionMessage_RetransmissionResponse struct {
	RetransmissionResponse *RetransmissionResponse `protobuf:"bytes,2,opt,name=retransmission_response,json=retransmissionResponse,proto3,oneof"`
}

func (*RetransmissionMessage_RetransmissionRequest) isRetransmissionMessage_Message() {}

func (*RetransmissionMessage_RetransmissionResponse) isRetransmissionMessage_Message() {}

type RetransmissionResponse struct {
	state              protoimpl.MessageState `protogen:"open.v1"`
	CommitCertificates []*CommitCertificate   `protobuf:"bytes,1,rep,name=commit_certificates,json=commitCertificates,proto3" json:"commit_certificates,omitempty"`
	unknownFields      protoimpl.UnknownFields
	sizeCache          protoimpl.SizeCache
}

func (x *RetransmissionResponse) Reset() {
	*x = RetransmissionResponse{}
	mi := &file_com_digitalasset_canton_synchronizer_sequencing_sequencer_bftordering_v30_bft_ordering_service_proto_msgTypes[28]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RetransmissionResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RetransmissionResponse) ProtoMessage() {}

func (x *RetransmissionResponse) ProtoReflect() protoreflect.Message {
	mi := &file_com_digitalasset_canton_synchronizer_sequencing_sequencer_bftordering_v30_bft_ordering_service_proto_msgTypes[28]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RetransmissionResponse.ProtoReflect.Descriptor instead.
func (*RetransmissionResponse) Descriptor() ([]byte, []int) {
	return file_com_digitalasset_canton_synchronizer_sequencing_sequencer_bftordering_v30_bft_ordering_service_proto_rawDescGZIP(), []int{28}
}

func (x *RetransmissionResponse) GetCommitCertificates() []*CommitCertificate {
	if x != nil {
		return x.CommitCertificates
	}
	return nil
}

type EpochStatus struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	EpochNumber   int64                  `protobuf:"varint,1,opt,name=epoch_number,json=epochNumber,proto3" json:"epoch_number,omitempty"`
	Segments      []*SegmentStatus       `protobuf:"bytes,2,rep,name=segments,proto3" json:"segments,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *EpochStatus) Reset() {
	*x = EpochStatus{}
	mi := &file_com_digitalasset_canton_synchronizer_sequencing_sequencer_bftordering_v30_bft_ordering_service_proto_msgTypes[29]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *EpochStatus) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EpochStatus) ProtoMessage() {}

func (x *EpochStatus) ProtoReflect() protoreflect.Message {
	mi := &file_com_digitalasset_canton_synchronizer_sequencing_sequencer_bftordering_v30_bft_ordering_service_proto_msgTypes[29]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EpochStatus.ProtoReflect.Descriptor instead.
func (*EpochStatus) Descriptor() ([]byte, []int) {
	return file_com_digitalasset_canton_synchronizer_sequencing_sequencer_bftordering_v30_bft_ordering_service_proto_rawDescGZIP(), []int{29}
}

func (x *EpochStatus) GetEpochNumber() int64 {
	if x != nil {
		return x.EpochNumber
	}
	return 0
}

func (x *EpochStatus) GetSegments() []*SegmentStatus {
	if x != nil {
		return x.Segments
	}
	return nil
}

type SegmentStatus struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Types that are valid to be assigned to Status:
	//
	//	*SegmentStatus_Complete
	//	*SegmentStatus_InViewChange
	//	*SegmentStatus_InProgress
	Status        isSegmentStatus_Status `protobuf_oneof:"status"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SegmentStatus) Reset() {
	*x = SegmentStatus{}
	mi := &file_com_digitalasset_canton_synchronizer_sequencing_sequencer_bftordering_v30_bft_ordering_service_proto_msgTypes[30]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SegmentStatus) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SegmentStatus) ProtoMessage() {}

func (x *SegmentStatus) ProtoReflect() protoreflect.Message {
	mi := &file_com_digitalasset_canton_synchronizer_sequencing_sequencer_bftordering_v30_bft_ordering_service_proto_msgTypes[30]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SegmentStatus.ProtoReflect.Descriptor instead.
func (*SegmentStatus) Descriptor() ([]byte, []int) {
	return file_com_digitalasset_canton_synchronizer_sequencing_sequencer_bftordering_v30_bft_ordering_service_proto_rawDescGZIP(), []int{30}
}

func (x *SegmentStatus) GetStatus() isSegmentStatus_Status {
	if x != nil {
		return x.Status
	}
	return nil
}

func (x *SegmentStatus) GetComplete() *emptypb.Empty {
	if x != nil {
		if x, ok := x.Status.(*SegmentStatus_Complete); ok {
			return x.Complete
		}
	}
	return nil
}

func (x *SegmentStatus) GetInViewChange() *SegmentInViewChange {
	if x != nil {
		if x, ok := x.Status.(*SegmentStatus_InViewChange); ok {
			return x.InViewChange
		}
	}
	return nil
}

func (x *SegmentStatus) GetInProgress() *SegmentInProgress {
	if x != nil {
		if x, ok := x.Status.(*SegmentStatus_InProgress); ok {
			return x.InProgress
		}
	}
	return nil
}

type isSegmentStatus_Status interface {
	isSegmentStatus_Status()
}

type SegmentStatus_Complete struct {
	Complete *emptypb.Empty `protobuf:"bytes,1,opt,name=complete,proto3,oneof"`
}

type SegmentStatus_InViewChange struct {
	InViewChange *SegmentInViewChange `protobuf:"bytes,2,opt,name=in_view_change,json=inViewChange,proto3,oneof"`
}

type SegmentStatus_InProgress struct {
	InProgress *SegmentInProgress `protobuf:"bytes,3,opt,name=in_progress,json=inProgress,proto3,oneof"`
}

func (*SegmentStatus_Complete) isSegmentStatus_Status() {}

func (*SegmentStatus_InViewChange) isSegmentStatus_Status() {}

func (*SegmentStatus_InProgress) isSegmentStatus_Status() {}

type SegmentInViewChange struct {
	state                     protoimpl.MessageState `protogen:"open.v1"`
	ViewNumber                int64                  `protobuf:"varint,1,opt,name=view_number,json=viewNumber,proto3" json:"view_number,omitempty"`
	ViewChangeMessagesPresent []bool                 `protobuf:"varint,2,rep,packed,name=view_change_messages_present,json=viewChangeMessagesPresent,proto3" json:"view_change_messages_present,omitempty"`
	AreBlocksComplete         []bool                 `protobuf:"varint,3,rep,packed,name=are_blocks_complete,json=areBlocksComplete,proto3" json:"are_blocks_complete,omitempty"`
	unknownFields             protoimpl.UnknownFields
	sizeCache                 protoimpl.SizeCache
}

func (x *SegmentInViewChange) Reset() {
	*x = SegmentInViewChange{}
	mi := &file_com_digitalasset_canton_synchronizer_sequencing_sequencer_bftordering_v30_bft_ordering_service_proto_msgTypes[31]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SegmentInViewChange) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SegmentInViewChange) ProtoMessage() {}

func (x *SegmentInViewChange) ProtoReflect() protoreflect.Message {
	mi := &file_com_digitalasset_canton_synchronizer_sequencing_sequencer_bftordering_v30_bft_ordering_service_proto_msgTypes[31]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SegmentInViewChange.ProtoReflect.Descriptor instead.
func (*SegmentInViewChange) Descriptor() ([]byte, []int) {
	return file_com_digitalasset_canton_synchronizer_sequencing_sequencer_bftordering_v30_bft_ordering_service_proto_rawDescGZIP(), []int{31}
}

func (x *SegmentInViewChange) GetViewNumber() int64 {
	if x != nil {
		return x.ViewNumber
	}
	return 0
}

func (x *SegmentInViewChange) GetViewChangeMessagesPresent() []bool {
	if x != nil {
		return x.ViewChangeMessagesPresent
	}
	return nil
}

func (x *SegmentInViewChange) GetAreBlocksComplete() []bool {
	if x != nil {
		return x.AreBlocksComplete
	}
	return nil
}

type SegmentInProgress struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	ViewNumber    int64                  `protobuf:"varint,1,opt,name=view_number,json=viewNumber,proto3" json:"view_number,omitempty"`
	BlockStatuses []*BlockStatus         `protobuf:"bytes,2,rep,name=block_statuses,json=blockStatuses,proto3" json:"block_statuses,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SegmentInProgress) Reset() {
	*x = SegmentInProgress{}
	mi := &file_com_digitalasset_canton_synchronizer_sequencing_sequencer_bftordering_v30_bft_ordering_service_proto_msgTypes[32]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SegmentInProgress) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SegmentInProgress) ProtoMessage() {}

func (x *SegmentInProgress) ProtoReflect() protoreflect.Message {
	mi := &file_com_digitalasset_canton_synchronizer_sequencing_sequencer_bftordering_v30_bft_ordering_service_proto_msgTypes[32]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SegmentInProgress.ProtoReflect.Descriptor instead.
func (*SegmentInProgress) Descriptor() ([]byte, []int) {
	return file_com_digitalasset_canton_synchronizer_sequencing_sequencer_bftordering_v30_bft_ordering_service_proto_rawDescGZIP(), []int{32}
}

func (x *SegmentInProgress) GetViewNumber() int64 {
	if x != nil {
		return x.ViewNumber
	}
	return 0
}

func (x *SegmentInProgress) GetBlockStatuses() []*BlockStatus {
	if x != nil {
		return x.BlockStatuses
	}
	return nil
}

type BlockStatus struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Types that are valid to be assigned to Status:
	//
	//	*BlockStatus_Complete
	//	*BlockStatus_InProgress
	Status        isBlockStatus_Status `protobuf_oneof:"status"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *BlockStatus) Reset() {
	*x = BlockStatus{}
	mi := &file_com_digitalasset_canton_synchronizer_sequencing_sequencer_bftordering_v30_bft_ordering_service_proto_msgTypes[33]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *BlockStatus) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BlockStatus) ProtoMessage() {}

func (x *BlockStatus) ProtoReflect() protoreflect.Message {
	mi := &file_com_digitalasset_canton_synchronizer_sequencing_sequencer_bftordering_v30_bft_ordering_service_proto_msgTypes[33]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BlockStatus.ProtoReflect.Descriptor instead.
func (*BlockStatus) Descriptor() ([]byte, []int) {
	return file_com_digitalasset_canton_synchronizer_sequencing_sequencer_bftordering_v30_bft_ordering_service_proto_rawDescGZIP(), []int{33}
}

func (x *BlockStatus) GetStatus() isBlockStatus_Status {
	if x != nil {
		return x.Status
	}
	return nil
}

func (x *BlockStatus) GetComplete() *emptypb.Empty {
	if x != nil {
		if x, ok := x.Status.(*BlockStatus_Complete); ok {
			return x.Complete
		}
	}
	return nil
}

func (x *BlockStatus) GetInProgress() *BlockInProgress {
	if x != nil {
		if x, ok := x.Status.(*BlockStatus_InProgress); ok {
			return x.InProgress
		}
	}
	return nil
}

type isBlockStatus_Status interface {
	isBlockStatus_Status()
}

type BlockStatus_Complete struct {
	Complete *emptypb.Empty `protobuf:"bytes,1,opt,name=complete,proto3,oneof"`
}

type BlockStatus_InProgress struct {
	InProgress *BlockInProgress `protobuf:"bytes,2,opt,name=in_progress,json=inProgress,proto3,oneof"`
}

func (*BlockStatus_Complete) isBlockStatus_Status() {}

func (*BlockStatus_InProgress) isBlockStatus_Status() {}

type BlockInProgress struct {
	state           protoimpl.MessageState `protogen:"open.v1"`
	PrePrepared     bool                   `protobuf:"varint,1,opt,name=pre_prepared,json=prePrepared,proto3" json:"pre_prepared,omitempty"`
	PreparesPresent []bool                 `protobuf:"varint,2,rep,packed,name=prepares_present,json=preparesPresent,proto3" json:"prepares_present,omitempty"`
	CommitsPresent  []bool                 `protobuf:"varint,3,rep,packed,name=commits_present,json=commitsPresent,proto3" json:"commits_present,omitempty"`
	unknownFields   protoimpl.UnknownFields
	sizeCache       protoimpl.SizeCache
}

func (x *BlockInProgress) Reset() {
	*x = BlockInProgress{}
	mi := &file_com_digitalasset_canton_synchronizer_sequencing_sequencer_bftordering_v30_bft_ordering_service_proto_msgTypes[34]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *BlockInProgress) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BlockInProgress) ProtoMessage() {}

func (x *BlockInProgress) ProtoReflect() protoreflect.Message {
	mi := &file_com_digitalasset_canton_synchronizer_sequencing_sequencer_bftordering_v30_bft_ordering_service_proto_msgTypes[34]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BlockInProgress.ProtoReflect.Descriptor instead.
func (*BlockInProgress) Descriptor() ([]byte, []int) {
	return file_com_digitalasset_canton_synchronizer_sequencing_sequencer_bftordering_v30_bft_ordering_service_proto_rawDescGZIP(), []int{34}
}

func (x *BlockInProgress) GetPrePrepared() bool {
	if x != nil {
		return x.PrePrepared
	}
	return false
}

func (x *BlockInProgress) GetPreparesPresent() []bool {
	if x != nil {
		return x.PreparesPresent
	}
	return nil
}

func (x *BlockInProgress) GetCommitsPresent() []bool {
	if x != nil {
		return x.CommitsPresent
	}
	return nil
}

type StateTransferMessage struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Types that are valid to be assigned to Message:
	//
	//	*StateTransferMessage_BlockRequest
	//	*StateTransferMessage_BlockResponse
	Message       isStateTransferMessage_Message `protobuf_oneof:"message"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *StateTransferMessage) Reset() {
	*x = StateTransferMessage{}
	mi := &file_com_digitalasset_canton_synchronizer_sequencing_sequencer_bftordering_v30_bft_ordering_service_proto_msgTypes[35]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *StateTransferMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StateTransferMessage) ProtoMessage() {}

func (x *StateTransferMessage) ProtoReflect() protoreflect.Message {
	mi := &file_com_digitalasset_canton_synchronizer_sequencing_sequencer_bftordering_v30_bft_ordering_service_proto_msgTypes[35]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StateTransferMessage.ProtoReflect.Descriptor instead.
func (*StateTransferMessage) Descriptor() ([]byte, []int) {
	return file_com_digitalasset_canton_synchronizer_sequencing_sequencer_bftordering_v30_bft_ordering_service_proto_rawDescGZIP(), []int{35}
}

func (x *StateTransferMessage) GetMessage() isStateTransferMessage_Message {
	if x != nil {
		return x.Message
	}
	return nil
}

func (x *StateTransferMessage) GetBlockRequest() *BlockTransferRequest {
	if x != nil {
		if x, ok := x.Message.(*StateTransferMessage_BlockRequest); ok {
			return x.BlockRequest
		}
	}
	return nil
}

func (x *StateTransferMessage) GetBlockResponse() *BlockTransferResponse {
	if x != nil {
		if x, ok := x.Message.(*StateTransferMessage_BlockResponse); ok {
			return x.BlockResponse
		}
	}
	return nil
}

type isStateTransferMessage_Message interface {
	isStateTransferMessage_Message()
}

type StateTransferMessage_BlockRequest struct {
	BlockRequest *BlockTransferRequest `protobuf:"bytes,1,opt,name=block_request,json=blockRequest,proto3,oneof"`
}

type StateTransferMessage_BlockResponse struct {
	BlockResponse *BlockTransferResponse `protobuf:"bytes,2,opt,name=block_response,json=blockResponse,proto3,oneof"`
}

func (*StateTransferMessage_BlockRequest) isStateTransferMessage_Message() {}

func (*StateTransferMessage_BlockResponse) isStateTransferMessage_Message() {}

type BlockTransferRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Epoch         int64                  `protobuf:"varint,1,opt,name=epoch,proto3" json:"epoch,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *BlockTransferRequest) Reset() {
	*x = BlockTransferRequest{}
	mi := &file_com_digitalasset_canton_synchronizer_sequencing_sequencer_bftordering_v30_bft_ordering_service_proto_msgTypes[36]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *BlockTransferRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BlockTransferRequest) ProtoMessage() {}

func (x *BlockTransferRequest) ProtoReflect() protoreflect.Message {
	mi := &file_com_digitalasset_canton_synchronizer_sequencing_sequencer_bftordering_v30_bft_ordering_service_proto_msgTypes[36]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BlockTransferRequest.ProtoReflect.Descriptor instead.
func (*BlockTransferRequest) Descriptor() ([]byte, []int) {
	return file_com_digitalasset_canton_synchronizer_sequencing_sequencer_bftordering_v30_bft_ordering_service_proto_rawDescGZIP(), []int{36}
}

func (x *BlockTransferRequest) GetEpoch() int64 {
	if x != nil {
		return x.Epoch
	}
	return 0
}

type BlockTransferResponse struct {
	state             protoimpl.MessageState `protogen:"open.v1"`
	CommitCertificate *CommitCertificate     `protobuf:"bytes,1,opt,name=commit_certificate,json=commitCertificate,proto3,oneof" json:"commit_certificate,omitempty"`
	unknownFields     protoimpl.UnknownFields
	sizeCache         protoimpl.SizeCache
}

func (x *BlockTransferResponse) Reset() {
	*x = BlockTransferResponse{}
	mi := &file_com_digitalasset_canton_synchronizer_sequencing_sequencer_bftordering_v30_bft_ordering_service_proto_msgTypes[37]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *BlockTransferResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BlockTransferResponse) ProtoMessage() {}

func (x *BlockTransferResponse) ProtoReflect() protoreflect.Message {
	mi := &file_com_digitalasset_canton_synchronizer_sequencing_sequencer_bftordering_v30_bft_ordering_service_proto_msgTypes[37]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BlockTransferResponse.ProtoReflect.Descriptor instead.
func (*BlockTransferResponse) Descriptor() ([]byte, []int) {
	return file_com_digitalasset_canton_synchronizer_sequencing_sequencer_bftordering_v30_bft_ordering_service_proto_rawDescGZIP(), []int{37}
}

func (x *BlockTransferResponse) GetCommitCertificate() *CommitCertificate {
	if x != nil {
		return x.CommitCertificate
	}
	return nil
}

var File_com_digitalasset_canton_synchronizer_sequencing_sequencer_bftordering_v30_bft_ordering_service_proto protoreflect.FileDescriptor

const file_com_digitalasset_canton_synchronizer_sequencing_sequencer_bftordering_v30_bft_ordering_service_proto_rawDesc = "" +
	"\n" +
	"dcom/digitalasset/canton/synchronizer/sequencing/sequencer/bftordering/v30/bft_ordering_service.proto\x12Icom.digitalasset.canton.synchronizer.sequencing.sequencer.bftordering.v30\x1a/com/digitalasset/canton/crypto/v30/crypto.proto\x1a\x1bgoogle/protobuf/empty.proto\x1a\x1fgoogle/protobuf/timestamp.proto\"\r\n" +
	"\vPingRequest\"\x0e\n" +
	"\fPingResponse\"\x8c\x02\n" +
	" BftOrderingServiceReceiveRequest\x12#\n" +
	"\rtrace_context\x18\x01 \x01(\tR\ftraceContext\x12u\n" +
	"\x04body\x18\x02 \x01(\v2a.com.digitalasset.canton.synchronizer.sequencing.sequencer.bftordering.v30.BftOrderingMessageBodyR\x04body\x12\x17\n" +
	"\asent_by\x18\x03 \x01(\tR\x06sentBy\x123\n" +
	"\asent_at\x18\x04 \x01(\v2\x1a.google.protobuf.TimestampR\x06sentAt\"7\n" +
	"!BftOrderingServiceReceiveResponse\x12\x12\n" +
	"\x04from\x18\x01 \x01(\tR\x04from\"\xe4\x04\n" +
	"\x16BftOrderingMessageBody\x12\x8d\x01\n" +
	"\x14availability_message\x18\x01 \x01(\v2X.com.digitalasset.canton.synchronizer.sequencing.sequencer.bftordering.v30.SignedMessageH\x00R\x13availabilityMessage\x12\x87\x01\n" +
	"\x11consensus_message\x18\x02 \x01(\v2X.com.digitalasset.canton.synchronizer.sequencing.sequencer.bftordering.v30.SignedMessageH\x00R\x10consensusMessage\x12\x90\x01\n" +
	"\x16state_transfer_message\x18\x03 \x01(\v2X.com.digitalasset.canton.synchronizer.sequencing.sequencer.bftordering.v30.SignedMessageH\x00R\x14stateTransferMessage\x12\x91\x01\n" +
	"\x16retransmission_message\x18\x04 \x01(\v2X.com.digitalasset.canton.synchronizer.sequencing.sequencer.bftordering.v30.SignedMessageH\x00R\x15retransmissionMessageB\t\n" +
	"\amessage\"\x8a\x01\n" +
	"\rSignedMessage\x12\x18\n" +
	"\amessage\x18\x01 \x01(\fR\amessage\x12\x12\n" +
	"\x04from\x18\x02 \x01(\tR\x04from\x12K\n" +
	"\tsignature\x18\x03 \x01(\v2-.com.digitalasset.canton.crypto.v30.SignatureR\tsignature\"\xd6\x04\n" +
	"\x13AvailabilityMessage\x12,\n" +
	"\x04ping\x18\x01 \x01(\v2\x16.google.protobuf.EmptyH\x00R\x04ping\x12~\n" +
	"\rstore_request\x18\x02 \x01(\v2W.com.digitalasset.canton.synchronizer.sequencing.sequencer.bftordering.v30.StoreRequestH\x00R\fstoreRequest\x12\x81\x01\n" +
	"\x0estore_response\x18\x03 \x01(\v2X.com.digitalasset.canton.synchronizer.sequencing.sequencer.bftordering.v30.StoreResponseH\x00R\rstoreResponse\x12~\n" +
	"\rbatch_request\x18\x04 \x01(\v2W.com.digitalasset.canton.synchronizer.sequencing.sequencer.bftordering.v30.BatchRequestH\x00R\fbatchRequest\x12\x81\x01\n" +
	"\x0ebatch_response\x18\x05 \x01(\v2X.com.digitalasset.canton.synchronizer.sequencing.sequencer.bftordering.v30.BatchResponseH\x00R\rbatchResponseB\t\n" +
	"\amessage\"\x91\x01\n" +
	"\fStoreRequest\x12\x19\n" +
	"\bbatch_id\x18\x01 \x01(\fR\abatchId\x12f\n" +
	"\x05batch\x18\x02 \x01(\v2P.com.digitalasset.canton.synchronizer.sequencing.sequencer.bftordering.v30.BatchR\x05batch\"\xb4\x01\n" +
	"\x05Batch\x12\x87\x01\n" +
	"\x11ordering_requests\x18\x01 \x03(\v2Z.com.digitalasset.canton.synchronizer.sequencing.sequencer.bftordering.v30.OrderingRequestR\x10orderingRequests\x12!\n" +
	"\fepoch_number\x18\x02 \x01(\x03R\vepochNumber\"\xb4\x01\n" +
	"\x0fOrderingRequest\x12#\n" +
	"\rtrace_context\x18\x01 \x01(\tR\ftraceContext\x12\x10\n" +
	"\x03tag\x18\x02 \x01(\tR\x03tag\x12\x18\n" +
	"\apayload\x18\x03 \x01(\fR\apayload\x12P\n" +
	"\x16ordering_start_instant\x18\x04 \x01(\v2\x1a.google.protobuf.TimestampR\x14orderingStartInstant\"w\n" +
	"\rStoreResponse\x12\x19\n" +
	"\bbatch_id\x18\x01 \x01(\fR\abatchId\x12K\n" +
	"\tsignature\x18\x02 \x01(\v2-.com.digitalasset.canton.crypto.v30.SignatureR\tsignature\")\n" +
	"\fBatchRequest\x12\x19\n" +
	"\bbatch_id\x18\x01 \x01(\fR\abatchId\"\x92\x01\n" +
	"\rBatchResponse\x12\x19\n" +
	"\bbatch_id\x18\x01 \x01(\fR\abatchId\x12f\n" +
	"\x05batch\x18\x02 \x01(\v2P.com.digitalasset.canton.synchronizer.sequencing.sequencer.bftordering.v30.BatchR\x05batch\"\x87\x01\n" +
	"\rOrderingBlock\x12v\n" +
	"\x06proofs\x18\x01 \x03(\v2^.com.digitalasset.canton.synchronizer.sequencing.sequencer.bftordering.v30.ProofOfAvailabilityR\x06proofs\"\xc3\x01\n" +
	"\x13ProofOfAvailability\x12\x19\n" +
	"\bbatch_id\x18\x01 \x01(\fR\abatchId\x12n\n" +
	"\x04acks\x18\x02 \x03(\v2Z.com.digitalasset.canton.synchronizer.sequencing.sequencer.bftordering.v30.AvailabilityAckR\x04acks\x12!\n" +
	"\fepoch_number\x18\x03 \x01(\x03R\vepochNumber\"r\n" +
	"\x0fAvailabilityAck\x12\x12\n" +
	"\x04from\x18\x01 \x01(\tR\x04from\x12K\n" +
	"\tsignature\x18\x02 \x01(\v2-.com.digitalasset.canton.crypto.v30.SignatureR\tsignature\"\x95\x06\n" +
	"\x10ConsensusMessage\x12\x7f\n" +
	"\x0eblock_metadata\x18\x01 \x01(\v2X.com.digitalasset.canton.synchronizer.sequencing.sequencer.bftordering.v30.BlockMetadataR\rblockMetadata\x12\x1f\n" +
	"\vview_number\x18\x02 \x01(\x03R\n" +
	"viewNumber\x12\x12\n" +
	"\x04from\x18\x03 \x01(\tR\x04from\x12x\n" +
	"\vpre_prepare\x18\x04 \x01(\v2U.com.digitalasset.canton.synchronizer.sequencing.sequencer.bftordering.v30.PrePrepareH\x00R\n" +
	"prePrepare\x12n\n" +
	"\aprepare\x18\x05 \x01(\v2R.com.digitalasset.canton.synchronizer.sequencing.sequencer.bftordering.v30.PrepareH\x00R\aprepare\x12k\n" +
	"\x06commit\x18\x06 \x01(\v2Q.com.digitalasset.canton.synchronizer.sequencing.sequencer.bftordering.v30.CommitH\x00R\x06commit\x12x\n" +
	"\vview_change\x18\a \x01(\v2U.com.digitalasset.canton.synchronizer.sequencing.sequencer.bftordering.v30.ViewChangeH\x00R\n" +
	"viewChange\x12o\n" +
	"\bnew_view\x18\b \x01(\v2R.com.digitalasset.canton.synchronizer.sequencing.sequencer.bftordering.v30.NewViewH\x00R\anewViewB\t\n" +
	"\amessage\"U\n" +
	"\rBlockMetadata\x12!\n" +
	"\fepoch_number\x18\x01 \x01(\x03R\vepochNumber\x12!\n" +
	"\fblock_number\x18\x02 \x01(\x03R\vblockNumber\"\x9e\x02\n" +
	"\n" +
	"PrePrepare\x12n\n" +
	"\x05block\x18\x01 \x01(\v2X.com.digitalasset.canton.synchronizer.sequencing.sequencer.bftordering.v30.OrderingBlockR\x05block\x12\x9f\x01\n" +
	"\x1dbft_time_canonical_commit_set\x18\x02 \x01(\v2].com.digitalasset.canton.synchronizer.sequencing.sequencer.bftordering.v30.CanonicalCommitSetR\x19bftTimeCanonicalCommitSet\"(\n" +
	"\aPrepare\x12\x1d\n" +
	"\n" +
	"block_hash\x18\x01 \x01(\fR\tblockHash\"P\n" +
	"\x06Commit\x12\x1d\n" +
	"\n" +
	"block_hash\x18\x01 \x01(\fR\tblockHash\x12'\n" +
	"\x0flocal_timestamp\x18\x02 \x01(\x03R\x0elocalTimestamp\"\x97\x01\n" +
	"\n" +
	"ViewChange\x12\x88\x01\n" +
	"\x0fconsensus_certs\x18\x02 \x03(\v2_.com.digitalasset.canton.synchronizer.sequencing.sequencer.bftordering.v30.ConsensusCertificateR\x0econsensusCerts\"\x83\x02\n" +
	"\aNewView\x12{\n" +
	"\fview_changes\x18\x02 \x03(\v2X.com.digitalasset.canton.synchronizer.sequencing.sequencer.bftordering.v30.SignedMessageR\vviewChanges\x12{\n" +
	"\fpre_prepares\x18\x03 \x03(\v2X.com.digitalasset.canton.synchronizer.sequencing.sequencer.bftordering.v30.SignedMessageR\vprePrepares\"\x9c\x01\n" +
	"\x12CanonicalCommitSet\x12\x85\x01\n" +
	"\x11canonical_commits\x18\x01 \x03(\v2X.com.digitalasset.canton.synchronizer.sequencing.sequencer.bftordering.v30.SignedMessageR\x10canonicalCommits\"\xc8\x02\n" +
	"\x14ConsensusCertificate\x12\x90\x01\n" +
	"\x13prepare_certificate\x18\x01 \x01(\v2].com.digitalasset.canton.synchronizer.sequencing.sequencer.bftordering.v30.PrepareCertificateH\x00R\x12prepareCertificate\x12\x8d\x01\n" +
	"\x12commit_certificate\x18\x02 \x01(\v2\\.com.digitalasset.canton.synchronizer.sequencing.sequencer.bftordering.v30.CommitCertificateH\x00R\x11commitCertificateB\r\n" +
	"\vcertificate\"\x85\x02\n" +
	"\x12PrepareCertificate\x12y\n" +
	"\vpre_prepare\x18\x01 \x01(\v2X.com.digitalasset.canton.synchronizer.sequencing.sequencer.bftordering.v30.SignedMessageR\n" +
	"prePrepare\x12t\n" +
	"\bprepares\x18\x02 \x03(\v2X.com.digitalasset.canton.synchronizer.sequencing.sequencer.bftordering.v30.SignedMessageR\bprepares\"\x82\x02\n" +
	"\x11CommitCertificate\x12y\n" +
	"\vpre_prepare\x18\x01 \x01(\v2X.com.digitalasset.canton.synchronizer.sequencing.sequencer.bftordering.v30.SignedMessageR\n" +
	"prePrepare\x12r\n" +
	"\acommits\x18\x02 \x03(\v2X.com.digitalasset.canton.synchronizer.sequencing.sequencer.bftordering.v30.SignedMessageR\acommits\"\xd3\x02\n" +
	"\x15RetransmissionMessage\x12\x8f\x01\n" +
	"\x16retransmission_request\x18\x01 \x01(\v2V.com.digitalasset.canton.synchronizer.sequencing.sequencer.bftordering.v30.EpochStatusH\x00R\x15retransmissionRequest\x12\x9c\x01\n" +
	"\x17retransmission_response\x18\x02 \x01(\v2a.com.digitalasset.canton.synchronizer.sequencing.sequencer.bftordering.v30.RetransmissionResponseH\x00R\x16retransmissionResponseB\t\n" +
	"\amessage\"\xa8\x01\n" +
	"\x16RetransmissionResponse\x12\x8d\x01\n" +
	"\x13commit_certificates\x18\x01 \x03(\v2\\.com.digitalasset.canton.synchronizer.sequencing.sequencer.bftordering.v30.CommitCertificateR\x12commitCertificates\"\xa6\x01\n" +
	"\vEpochStatus\x12!\n" +
	"\fepoch_number\x18\x01 \x01(\x03R\vepochNumber\x12t\n" +
	"\bsegments\x18\x02 \x03(\v2X.com.digitalasset.canton.synchronizer.sequencing.sequencer.bftordering.v30.SegmentStatusR\bsegments\"\xd9\x02\n" +
	"\rSegmentStatus\x124\n" +
	"\bcomplete\x18\x01 \x01(\v2\x16.google.protobuf.EmptyH\x00R\bcomplete\x12\x86\x01\n" +
	"\x0ein_view_change\x18\x02 \x01(\v2^.com.digitalasset.canton.synchronizer.sequencing.sequencer.bftordering.v30.SegmentInViewChangeH\x00R\finViewChange\x12\x7f\n" +
	"\vin_progress\x18\x03 \x01(\v2\\.com.digitalasset.canton.synchronizer.sequencing.sequencer.bftordering.v30.SegmentInProgressH\x00R\n" +
	"inProgressB\b\n" +
	"\x06status\"\xa7\x01\n" +
	"\x13SegmentInViewChange\x12\x1f\n" +
	"\vview_number\x18\x01 \x01(\x03R\n" +
	"viewNumber\x12?\n" +
	"\x1cview_change_messages_present\x18\x02 \x03(\bR\x19viewChangeMessagesPresent\x12.\n" +
	"\x13are_blocks_complete\x18\x03 \x03(\bR\x11areBlocksComplete\"\xb3\x01\n" +
	"\x11SegmentInProgress\x12\x1f\n" +
	"\vview_number\x18\x01 \x01(\x03R\n" +
	"viewNumber\x12}\n" +
	"\x0eblock_statuses\x18\x02 \x03(\v2V.com.digitalasset.canton.synchronizer.sequencing.sequencer.bftordering.v30.BlockStatusR\rblockStatuses\"\xcc\x01\n" +
	"\vBlockStatus\x124\n" +
	"\bcomplete\x18\x01 \x01(\v2\x16.google.protobuf.EmptyH\x00R\bcomplete\x12}\n" +
	"\vin_progress\x18\x02 \x01(\v2Z.com.digitalasset.canton.synchronizer.sequencing.sequencer.bftordering.v30.BlockInProgressH\x00R\n" +
	"inProgressB\b\n" +
	"\x06status\"\x88\x01\n" +
	"\x0fBlockInProgress\x12!\n" +
	"\fpre_prepared\x18\x01 \x01(\bR\vprePrepared\x12)\n" +
	"\x10prepares_present\x18\x02 \x03(\bR\x0fpreparesPresent\x12'\n" +
	"\x0fcommits_present\x18\x03 \x03(\bR\x0ecommitsPresent\"\xb6\x02\n" +
	"\x14StateTransferMessage\x12\x86\x01\n" +
	"\rblock_request\x18\x01 \x01(\v2_.com.digitalasset.canton.synchronizer.sequencing.sequencer.bftordering.v30.BlockTransferRequestH\x00R\fblockRequest\x12\x89\x01\n" +
	"\x0eblock_response\x18\x02 \x01(\v2`.com.digitalasset.canton.synchronizer.sequencing.sequencer.bftordering.v30.BlockTransferResponseH\x00R\rblockResponseB\t\n" +
	"\amessage\",\n" +
	"\x14BlockTransferRequest\x12\x14\n" +
	"\x05epoch\x18\x01 \x01(\x03R\x05epoch\"\xc1\x01\n" +
	"\x15BlockTransferResponse\x12\x90\x01\n" +
	"\x12commit_certificate\x18\x01 \x01(\v2\\.com.digitalasset.canton.synchronizer.sequencing.sequencer.bftordering.v30.CommitCertificateH\x00R\x11commitCertificate\x88\x01\x01B\x15\n" +
	"\x13_commit_certificate2\xb9\x03\n" +
	"\x12BftOrderingService\x12\xb7\x01\n" +
	"\x04Ping\x12V.com.digitalasset.canton.synchronizer.sequencing.sequencer.bftordering.v30.PingRequest\x1aW.com.digitalasset.canton.synchronizer.sequencing.sequencer.bftordering.v30.PingResponse\x12\xe8\x01\n" +
	"\aReceive\x12k.com.digitalasset.canton.synchronizer.sequencing.sequencer.bftordering.v30.BftOrderingServiceReceiveRequest\x1al.com.digitalasset.canton.synchronizer.sequencing.sequencer.bftordering.v30.BftOrderingServiceReceiveResponse(\x010\x01BzZxgithub.com/digital-asset/dazl-client/v8/go/api/com/digitalasset/canton/synchronizer/sequencing/sequencer/bftordering/v30b\x06proto3"

var (
	file_com_digitalasset_canton_synchronizer_sequencing_sequencer_bftordering_v30_bft_ordering_service_proto_rawDescOnce sync.Once
	file_com_digitalasset_canton_synchronizer_sequencing_sequencer_bftordering_v30_bft_ordering_service_proto_rawDescData []byte
)

func file_com_digitalasset_canton_synchronizer_sequencing_sequencer_bftordering_v30_bft_ordering_service_proto_rawDescGZIP() []byte {
	file_com_digitalasset_canton_synchronizer_sequencing_sequencer_bftordering_v30_bft_ordering_service_proto_rawDescOnce.Do(func() {
		file_com_digitalasset_canton_synchronizer_sequencing_sequencer_bftordering_v30_bft_ordering_service_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_com_digitalasset_canton_synchronizer_sequencing_sequencer_bftordering_v30_bft_ordering_service_proto_rawDesc), len(file_com_digitalasset_canton_synchronizer_sequencing_sequencer_bftordering_v30_bft_ordering_service_proto_rawDesc)))
	})
	return file_com_digitalasset_canton_synchronizer_sequencing_sequencer_bftordering_v30_bft_ordering_service_proto_rawDescData
}

var file_com_digitalasset_canton_synchronizer_sequencing_sequencer_bftordering_v30_bft_ordering_service_proto_msgTypes = make([]protoimpl.MessageInfo, 38)
var file_com_digitalasset_canton_synchronizer_sequencing_sequencer_bftordering_v30_bft_ordering_service_proto_goTypes = []any{
	(*PingRequest)(nil),                       // 0: com.digitalasset.canton.synchronizer.sequencing.sequencer.bftordering.v30.PingRequest
	(*PingResponse)(nil),                      // 1: com.digitalasset.canton.synchronizer.sequencing.sequencer.bftordering.v30.PingResponse
	(*BftOrderingServiceReceiveRequest)(nil),  // 2: com.digitalasset.canton.synchronizer.sequencing.sequencer.bftordering.v30.BftOrderingServiceReceiveRequest
	(*BftOrderingServiceReceiveResponse)(nil), // 3: com.digitalasset.canton.synchronizer.sequencing.sequencer.bftordering.v30.BftOrderingServiceReceiveResponse
	(*BftOrderingMessageBody)(nil),            // 4: com.digitalasset.canton.synchronizer.sequencing.sequencer.bftordering.v30.BftOrderingMessageBody
	(*SignedMessage)(nil),                     // 5: com.digitalasset.canton.synchronizer.sequencing.sequencer.bftordering.v30.SignedMessage
	(*AvailabilityMessage)(nil),               // 6: com.digitalasset.canton.synchronizer.sequencing.sequencer.bftordering.v30.AvailabilityMessage
	(*StoreRequest)(nil),                      // 7: com.digitalasset.canton.synchronizer.sequencing.sequencer.bftordering.v30.StoreRequest
	(*Batch)(nil),                             // 8: com.digitalasset.canton.synchronizer.sequencing.sequencer.bftordering.v30.Batch
	(*OrderingRequest)(nil),                   // 9: com.digitalasset.canton.synchronizer.sequencing.sequencer.bftordering.v30.OrderingRequest
	(*StoreResponse)(nil),                     // 10: com.digitalasset.canton.synchronizer.sequencing.sequencer.bftordering.v30.StoreResponse
	(*BatchRequest)(nil),                      // 11: com.digitalasset.canton.synchronizer.sequencing.sequencer.bftordering.v30.BatchRequest
	(*BatchResponse)(nil),                     // 12: com.digitalasset.canton.synchronizer.sequencing.sequencer.bftordering.v30.BatchResponse
	(*OrderingBlock)(nil),                     // 13: com.digitalasset.canton.synchronizer.sequencing.sequencer.bftordering.v30.OrderingBlock
	(*ProofOfAvailability)(nil),               // 14: com.digitalasset.canton.synchronizer.sequencing.sequencer.bftordering.v30.ProofOfAvailability
	(*AvailabilityAck)(nil),                   // 15: com.digitalasset.canton.synchronizer.sequencing.sequencer.bftordering.v30.AvailabilityAck
	(*ConsensusMessage)(nil),                  // 16: com.digitalasset.canton.synchronizer.sequencing.sequencer.bftordering.v30.ConsensusMessage
	(*BlockMetadata)(nil),                     // 17: com.digitalasset.canton.synchronizer.sequencing.sequencer.bftordering.v30.BlockMetadata
	(*PrePrepare)(nil),                        // 18: com.digitalasset.canton.synchronizer.sequencing.sequencer.bftordering.v30.PrePrepare
	(*Prepare)(nil),                           // 19: com.digitalasset.canton.synchronizer.sequencing.sequencer.bftordering.v30.Prepare
	(*Commit)(nil),                            // 20: com.digitalasset.canton.synchronizer.sequencing.sequencer.bftordering.v30.Commit
	(*ViewChange)(nil),                        // 21: com.digitalasset.canton.synchronizer.sequencing.sequencer.bftordering.v30.ViewChange
	(*NewView)(nil),                           // 22: com.digitalasset.canton.synchronizer.sequencing.sequencer.bftordering.v30.NewView
	(*CanonicalCommitSet)(nil),                // 23: com.digitalasset.canton.synchronizer.sequencing.sequencer.bftordering.v30.CanonicalCommitSet
	(*ConsensusCertificate)(nil),              // 24: com.digitalasset.canton.synchronizer.sequencing.sequencer.bftordering.v30.ConsensusCertificate
	(*PrepareCertificate)(nil),                // 25: com.digitalasset.canton.synchronizer.sequencing.sequencer.bftordering.v30.PrepareCertificate
	(*CommitCertificate)(nil),                 // 26: com.digitalasset.canton.synchronizer.sequencing.sequencer.bftordering.v30.CommitCertificate
	(*RetransmissionMessage)(nil),             // 27: com.digitalasset.canton.synchronizer.sequencing.sequencer.bftordering.v30.RetransmissionMessage
	(*RetransmissionResponse)(nil),            // 28: com.digitalasset.canton.synchronizer.sequencing.sequencer.bftordering.v30.RetransmissionResponse
	(*EpochStatus)(nil),                       // 29: com.digitalasset.canton.synchronizer.sequencing.sequencer.bftordering.v30.EpochStatus
	(*SegmentStatus)(nil),                     // 30: com.digitalasset.canton.synchronizer.sequencing.sequencer.bftordering.v30.SegmentStatus
	(*SegmentInViewChange)(nil),               // 31: com.digitalasset.canton.synchronizer.sequencing.sequencer.bftordering.v30.SegmentInViewChange
	(*SegmentInProgress)(nil),                 // 32: com.digitalasset.canton.synchronizer.sequencing.sequencer.bftordering.v30.SegmentInProgress
	(*BlockStatus)(nil),                       // 33: com.digitalasset.canton.synchronizer.sequencing.sequencer.bftordering.v30.BlockStatus
	(*BlockInProgress)(nil),                   // 34: com.digitalasset.canton.synchronizer.sequencing.sequencer.bftordering.v30.BlockInProgress
	(*StateTransferMessage)(nil),              // 35: com.digitalasset.canton.synchronizer.sequencing.sequencer.bftordering.v30.StateTransferMessage
	(*BlockTransferRequest)(nil),              // 36: com.digitalasset.canton.synchronizer.sequencing.sequencer.bftordering.v30.BlockTransferRequest
	(*BlockTransferResponse)(nil),             // 37: com.digitalasset.canton.synchronizer.sequencing.sequencer.bftordering.v30.BlockTransferResponse
	(*timestamppb.Timestamp)(nil),             // 38: google.protobuf.Timestamp
	(*v30.Signature)(nil),                     // 39: com.digitalasset.canton.crypto.v30.Signature
	(*emptypb.Empty)(nil),                     // 40: google.protobuf.Empty
}
var file_com_digitalasset_canton_synchronizer_sequencing_sequencer_bftordering_v30_bft_ordering_service_proto_depIdxs = []int32{
	4,  // 0: com.digitalasset.canton.synchronizer.sequencing.sequencer.bftordering.v30.BftOrderingServiceReceiveRequest.body:type_name -> com.digitalasset.canton.synchronizer.sequencing.sequencer.bftordering.v30.BftOrderingMessageBody
	38, // 1: com.digitalasset.canton.synchronizer.sequencing.sequencer.bftordering.v30.BftOrderingServiceReceiveRequest.sent_at:type_name -> google.protobuf.Timestamp
	5,  // 2: com.digitalasset.canton.synchronizer.sequencing.sequencer.bftordering.v30.BftOrderingMessageBody.availability_message:type_name -> com.digitalasset.canton.synchronizer.sequencing.sequencer.bftordering.v30.SignedMessage
	5,  // 3: com.digitalasset.canton.synchronizer.sequencing.sequencer.bftordering.v30.BftOrderingMessageBody.consensus_message:type_name -> com.digitalasset.canton.synchronizer.sequencing.sequencer.bftordering.v30.SignedMessage
	5,  // 4: com.digitalasset.canton.synchronizer.sequencing.sequencer.bftordering.v30.BftOrderingMessageBody.state_transfer_message:type_name -> com.digitalasset.canton.synchronizer.sequencing.sequencer.bftordering.v30.SignedMessage
	5,  // 5: com.digitalasset.canton.synchronizer.sequencing.sequencer.bftordering.v30.BftOrderingMessageBody.retransmission_message:type_name -> com.digitalasset.canton.synchronizer.sequencing.sequencer.bftordering.v30.SignedMessage
	39, // 6: com.digitalasset.canton.synchronizer.sequencing.sequencer.bftordering.v30.SignedMessage.signature:type_name -> com.digitalasset.canton.crypto.v30.Signature
	40, // 7: com.digitalasset.canton.synchronizer.sequencing.sequencer.bftordering.v30.AvailabilityMessage.ping:type_name -> google.protobuf.Empty
	7,  // 8: com.digitalasset.canton.synchronizer.sequencing.sequencer.bftordering.v30.AvailabilityMessage.store_request:type_name -> com.digitalasset.canton.synchronizer.sequencing.sequencer.bftordering.v30.StoreRequest
	10, // 9: com.digitalasset.canton.synchronizer.sequencing.sequencer.bftordering.v30.AvailabilityMessage.store_response:type_name -> com.digitalasset.canton.synchronizer.sequencing.sequencer.bftordering.v30.StoreResponse
	11, // 10: com.digitalasset.canton.synchronizer.sequencing.sequencer.bftordering.v30.AvailabilityMessage.batch_request:type_name -> com.digitalasset.canton.synchronizer.sequencing.sequencer.bftordering.v30.BatchRequest
	12, // 11: com.digitalasset.canton.synchronizer.sequencing.sequencer.bftordering.v30.AvailabilityMessage.batch_response:type_name -> com.digitalasset.canton.synchronizer.sequencing.sequencer.bftordering.v30.BatchResponse
	8,  // 12: com.digitalasset.canton.synchronizer.sequencing.sequencer.bftordering.v30.StoreRequest.batch:type_name -> com.digitalasset.canton.synchronizer.sequencing.sequencer.bftordering.v30.Batch
	9,  // 13: com.digitalasset.canton.synchronizer.sequencing.sequencer.bftordering.v30.Batch.ordering_requests:type_name -> com.digitalasset.canton.synchronizer.sequencing.sequencer.bftordering.v30.OrderingRequest
	38, // 14: com.digitalasset.canton.synchronizer.sequencing.sequencer.bftordering.v30.OrderingRequest.ordering_start_instant:type_name -> google.protobuf.Timestamp
	39, // 15: com.digitalasset.canton.synchronizer.sequencing.sequencer.bftordering.v30.StoreResponse.signature:type_name -> com.digitalasset.canton.crypto.v30.Signature
	8,  // 16: com.digitalasset.canton.synchronizer.sequencing.sequencer.bftordering.v30.BatchResponse.batch:type_name -> com.digitalasset.canton.synchronizer.sequencing.sequencer.bftordering.v30.Batch
	14, // 17: com.digitalasset.canton.synchronizer.sequencing.sequencer.bftordering.v30.OrderingBlock.proofs:type_name -> com.digitalasset.canton.synchronizer.sequencing.sequencer.bftordering.v30.ProofOfAvailability
	15, // 18: com.digitalasset.canton.synchronizer.sequencing.sequencer.bftordering.v30.ProofOfAvailability.acks:type_name -> com.digitalasset.canton.synchronizer.sequencing.sequencer.bftordering.v30.AvailabilityAck
	39, // 19: com.digitalasset.canton.synchronizer.sequencing.sequencer.bftordering.v30.AvailabilityAck.signature:type_name -> com.digitalasset.canton.crypto.v30.Signature
	17, // 20: com.digitalasset.canton.synchronizer.sequencing.sequencer.bftordering.v30.ConsensusMessage.block_metadata:type_name -> com.digitalasset.canton.synchronizer.sequencing.sequencer.bftordering.v30.BlockMetadata
	18, // 21: com.digitalasset.canton.synchronizer.sequencing.sequencer.bftordering.v30.ConsensusMessage.pre_prepare:type_name -> com.digitalasset.canton.synchronizer.sequencing.sequencer.bftordering.v30.PrePrepare
	19, // 22: com.digitalasset.canton.synchronizer.sequencing.sequencer.bftordering.v30.ConsensusMessage.prepare:type_name -> com.digitalasset.canton.synchronizer.sequencing.sequencer.bftordering.v30.Prepare
	20, // 23: com.digitalasset.canton.synchronizer.sequencing.sequencer.bftordering.v30.ConsensusMessage.commit:type_name -> com.digitalasset.canton.synchronizer.sequencing.sequencer.bftordering.v30.Commit
	21, // 24: com.digitalasset.canton.synchronizer.sequencing.sequencer.bftordering.v30.ConsensusMessage.view_change:type_name -> com.digitalasset.canton.synchronizer.sequencing.sequencer.bftordering.v30.ViewChange
	22, // 25: com.digitalasset.canton.synchronizer.sequencing.sequencer.bftordering.v30.ConsensusMessage.new_view:type_name -> com.digitalasset.canton.synchronizer.sequencing.sequencer.bftordering.v30.NewView
	13, // 26: com.digitalasset.canton.synchronizer.sequencing.sequencer.bftordering.v30.PrePrepare.block:type_name -> com.digitalasset.canton.synchronizer.sequencing.sequencer.bftordering.v30.OrderingBlock
	23, // 27: com.digitalasset.canton.synchronizer.sequencing.sequencer.bftordering.v30.PrePrepare.bft_time_canonical_commit_set:type_name -> com.digitalasset.canton.synchronizer.sequencing.sequencer.bftordering.v30.CanonicalCommitSet
	24, // 28: com.digitalasset.canton.synchronizer.sequencing.sequencer.bftordering.v30.ViewChange.consensus_certs:type_name -> com.digitalasset.canton.synchronizer.sequencing.sequencer.bftordering.v30.ConsensusCertificate
	5,  // 29: com.digitalasset.canton.synchronizer.sequencing.sequencer.bftordering.v30.NewView.view_changes:type_name -> com.digitalasset.canton.synchronizer.sequencing.sequencer.bftordering.v30.SignedMessage
	5,  // 30: com.digitalasset.canton.synchronizer.sequencing.sequencer.bftordering.v30.NewView.pre_prepares:type_name -> com.digitalasset.canton.synchronizer.sequencing.sequencer.bftordering.v30.SignedMessage
	5,  // 31: com.digitalasset.canton.synchronizer.sequencing.sequencer.bftordering.v30.CanonicalCommitSet.canonical_commits:type_name -> com.digitalasset.canton.synchronizer.sequencing.sequencer.bftordering.v30.SignedMessage
	25, // 32: com.digitalasset.canton.synchronizer.sequencing.sequencer.bftordering.v30.ConsensusCertificate.prepare_certificate:type_name -> com.digitalasset.canton.synchronizer.sequencing.sequencer.bftordering.v30.PrepareCertificate
	26, // 33: com.digitalasset.canton.synchronizer.sequencing.sequencer.bftordering.v30.ConsensusCertificate.commit_certificate:type_name -> com.digitalasset.canton.synchronizer.sequencing.sequencer.bftordering.v30.CommitCertificate
	5,  // 34: com.digitalasset.canton.synchronizer.sequencing.sequencer.bftordering.v30.PrepareCertificate.pre_prepare:type_name -> com.digitalasset.canton.synchronizer.sequencing.sequencer.bftordering.v30.SignedMessage
	5,  // 35: com.digitalasset.canton.synchronizer.sequencing.sequencer.bftordering.v30.PrepareCertificate.prepares:type_name -> com.digitalasset.canton.synchronizer.sequencing.sequencer.bftordering.v30.SignedMessage
	5,  // 36: com.digitalasset.canton.synchronizer.sequencing.sequencer.bftordering.v30.CommitCertificate.pre_prepare:type_name -> com.digitalasset.canton.synchronizer.sequencing.sequencer.bftordering.v30.SignedMessage
	5,  // 37: com.digitalasset.canton.synchronizer.sequencing.sequencer.bftordering.v30.CommitCertificate.commits:type_name -> com.digitalasset.canton.synchronizer.sequencing.sequencer.bftordering.v30.SignedMessage
	29, // 38: com.digitalasset.canton.synchronizer.sequencing.sequencer.bftordering.v30.RetransmissionMessage.retransmission_request:type_name -> com.digitalasset.canton.synchronizer.sequencing.sequencer.bftordering.v30.EpochStatus
	28, // 39: com.digitalasset.canton.synchronizer.sequencing.sequencer.bftordering.v30.RetransmissionMessage.retransmission_response:type_name -> com.digitalasset.canton.synchronizer.sequencing.sequencer.bftordering.v30.RetransmissionResponse
	26, // 40: com.digitalasset.canton.synchronizer.sequencing.sequencer.bftordering.v30.RetransmissionResponse.commit_certificates:type_name -> com.digitalasset.canton.synchronizer.sequencing.sequencer.bftordering.v30.CommitCertificate
	30, // 41: com.digitalasset.canton.synchronizer.sequencing.sequencer.bftordering.v30.EpochStatus.segments:type_name -> com.digitalasset.canton.synchronizer.sequencing.sequencer.bftordering.v30.SegmentStatus
	40, // 42: com.digitalasset.canton.synchronizer.sequencing.sequencer.bftordering.v30.SegmentStatus.complete:type_name -> google.protobuf.Empty
	31, // 43: com.digitalasset.canton.synchronizer.sequencing.sequencer.bftordering.v30.SegmentStatus.in_view_change:type_name -> com.digitalasset.canton.synchronizer.sequencing.sequencer.bftordering.v30.SegmentInViewChange
	32, // 44: com.digitalasset.canton.synchronizer.sequencing.sequencer.bftordering.v30.SegmentStatus.in_progress:type_name -> com.digitalasset.canton.synchronizer.sequencing.sequencer.bftordering.v30.SegmentInProgress
	33, // 45: com.digitalasset.canton.synchronizer.sequencing.sequencer.bftordering.v30.SegmentInProgress.block_statuses:type_name -> com.digitalasset.canton.synchronizer.sequencing.sequencer.bftordering.v30.BlockStatus
	40, // 46: com.digitalasset.canton.synchronizer.sequencing.sequencer.bftordering.v30.BlockStatus.complete:type_name -> google.protobuf.Empty
	34, // 47: com.digitalasset.canton.synchronizer.sequencing.sequencer.bftordering.v30.BlockStatus.in_progress:type_name -> com.digitalasset.canton.synchronizer.sequencing.sequencer.bftordering.v30.BlockInProgress
	36, // 48: com.digitalasset.canton.synchronizer.sequencing.sequencer.bftordering.v30.StateTransferMessage.block_request:type_name -> com.digitalasset.canton.synchronizer.sequencing.sequencer.bftordering.v30.BlockTransferRequest
	37, // 49: com.digitalasset.canton.synchronizer.sequencing.sequencer.bftordering.v30.StateTransferMessage.block_response:type_name -> com.digitalasset.canton.synchronizer.sequencing.sequencer.bftordering.v30.BlockTransferResponse
	26, // 50: com.digitalasset.canton.synchronizer.sequencing.sequencer.bftordering.v30.BlockTransferResponse.commit_certificate:type_name -> com.digitalasset.canton.synchronizer.sequencing.sequencer.bftordering.v30.CommitCertificate
	0,  // 51: com.digitalasset.canton.synchronizer.sequencing.sequencer.bftordering.v30.BftOrderingService.Ping:input_type -> com.digitalasset.canton.synchronizer.sequencing.sequencer.bftordering.v30.PingRequest
	2,  // 52: com.digitalasset.canton.synchronizer.sequencing.sequencer.bftordering.v30.BftOrderingService.Receive:input_type -> com.digitalasset.canton.synchronizer.sequencing.sequencer.bftordering.v30.BftOrderingServiceReceiveRequest
	1,  // 53: com.digitalasset.canton.synchronizer.sequencing.sequencer.bftordering.v30.BftOrderingService.Ping:output_type -> com.digitalasset.canton.synchronizer.sequencing.sequencer.bftordering.v30.PingResponse
	3,  // 54: com.digitalasset.canton.synchronizer.sequencing.sequencer.bftordering.v30.BftOrderingService.Receive:output_type -> com.digitalasset.canton.synchronizer.sequencing.sequencer.bftordering.v30.BftOrderingServiceReceiveResponse
	53, // [53:55] is the sub-list for method output_type
	51, // [51:53] is the sub-list for method input_type
	51, // [51:51] is the sub-list for extension type_name
	51, // [51:51] is the sub-list for extension extendee
	0,  // [0:51] is the sub-list for field type_name
}

func init() {
	file_com_digitalasset_canton_synchronizer_sequencing_sequencer_bftordering_v30_bft_ordering_service_proto_init()
}
func file_com_digitalasset_canton_synchronizer_sequencing_sequencer_bftordering_v30_bft_ordering_service_proto_init() {
	if File_com_digitalasset_canton_synchronizer_sequencing_sequencer_bftordering_v30_bft_ordering_service_proto != nil {
		return
	}
	file_com_digitalasset_canton_synchronizer_sequencing_sequencer_bftordering_v30_bft_ordering_service_proto_msgTypes[4].OneofWrappers = []any{
		(*BftOrderingMessageBody_AvailabilityMessage)(nil),
		(*BftOrderingMessageBody_ConsensusMessage)(nil),
		(*BftOrderingMessageBody_StateTransferMessage)(nil),
		(*BftOrderingMessageBody_RetransmissionMessage)(nil),
	}
	file_com_digitalasset_canton_synchronizer_sequencing_sequencer_bftordering_v30_bft_ordering_service_proto_msgTypes[6].OneofWrappers = []any{
		(*AvailabilityMessage_Ping)(nil),
		(*AvailabilityMessage_StoreRequest)(nil),
		(*AvailabilityMessage_StoreResponse)(nil),
		(*AvailabilityMessage_BatchRequest)(nil),
		(*AvailabilityMessage_BatchResponse)(nil),
	}
	file_com_digitalasset_canton_synchronizer_sequencing_sequencer_bftordering_v30_bft_ordering_service_proto_msgTypes[16].OneofWrappers = []any{
		(*ConsensusMessage_PrePrepare)(nil),
		(*ConsensusMessage_Prepare)(nil),
		(*ConsensusMessage_Commit)(nil),
		(*ConsensusMessage_ViewChange)(nil),
		(*ConsensusMessage_NewView)(nil),
	}
	file_com_digitalasset_canton_synchronizer_sequencing_sequencer_bftordering_v30_bft_ordering_service_proto_msgTypes[24].OneofWrappers = []any{
		(*ConsensusCertificate_PrepareCertificate)(nil),
		(*ConsensusCertificate_CommitCertificate)(nil),
	}
	file_com_digitalasset_canton_synchronizer_sequencing_sequencer_bftordering_v30_bft_ordering_service_proto_msgTypes[27].OneofWrappers = []any{
		(*RetransmissionMessage_RetransmissionRequest)(nil),
		(*RetransmissionMessage_RetransmissionResponse)(nil),
	}
	file_com_digitalasset_canton_synchronizer_sequencing_sequencer_bftordering_v30_bft_ordering_service_proto_msgTypes[30].OneofWrappers = []any{
		(*SegmentStatus_Complete)(nil),
		(*SegmentStatus_InViewChange)(nil),
		(*SegmentStatus_InProgress)(nil),
	}
	file_com_digitalasset_canton_synchronizer_sequencing_sequencer_bftordering_v30_bft_ordering_service_proto_msgTypes[33].OneofWrappers = []any{
		(*BlockStatus_Complete)(nil),
		(*BlockStatus_InProgress)(nil),
	}
	file_com_digitalasset_canton_synchronizer_sequencing_sequencer_bftordering_v30_bft_ordering_service_proto_msgTypes[35].OneofWrappers = []any{
		(*StateTransferMessage_BlockRequest)(nil),
		(*StateTransferMessage_BlockResponse)(nil),
	}
	file_com_digitalasset_canton_synchronizer_sequencing_sequencer_bftordering_v30_bft_ordering_service_proto_msgTypes[37].OneofWrappers = []any{}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_com_digitalasset_canton_synchronizer_sequencing_sequencer_bftordering_v30_bft_ordering_service_proto_rawDesc), len(file_com_digitalasset_canton_synchronizer_sequencing_sequencer_bftordering_v30_bft_ordering_service_proto_rawDesc)),
			NumEnums:      0,
			NumMessages:   38,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_com_digitalasset_canton_synchronizer_sequencing_sequencer_bftordering_v30_bft_ordering_service_proto_goTypes,
		DependencyIndexes: file_com_digitalasset_canton_synchronizer_sequencing_sequencer_bftordering_v30_bft_ordering_service_proto_depIdxs,
		MessageInfos:      file_com_digitalasset_canton_synchronizer_sequencing_sequencer_bftordering_v30_bft_ordering_service_proto_msgTypes,
	}.Build()
	File_com_digitalasset_canton_synchronizer_sequencing_sequencer_bftordering_v30_bft_ordering_service_proto = out.File
	file_com_digitalasset_canton_synchronizer_sequencing_sequencer_bftordering_v30_bft_ordering_service_proto_goTypes = nil
	file_com_digitalasset_canton_synchronizer_sequencing_sequencer_bftordering_v30_bft_ordering_service_proto_depIdxs = nil
}
