// Copyright (c) 2017-2025 Digital Asset (Switzerland) GmbH and/or its affiliates. All rights reserved.
// SPDX-License-Identifier: Apache-2.0
// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.6
// 	protoc        v6.30.0
// source: com/digitalasset/canton/protocol/v30/topology.proto

package v30

import (
	v30 "github.com/digital-asset/dazl-client/v8/go/api/com/digitalasset/canton/crypto/v30"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type Enums_TopologyChangeOp int32

const (
	Enums_TOPOLOGY_CHANGE_OP_UNSPECIFIED Enums_TopologyChangeOp = 0
	Enums_TOPOLOGY_CHANGE_OP_ADD_REPLACE Enums_TopologyChangeOp = 1
	Enums_TOPOLOGY_CHANGE_OP_REMOVE      Enums_TopologyChangeOp = 2
)

// Enum value maps for Enums_TopologyChangeOp.
var (
	Enums_TopologyChangeOp_name = map[int32]string{
		0: "TOPOLOGY_CHANGE_OP_UNSPECIFIED",
		1: "TOPOLOGY_CHANGE_OP_ADD_REPLACE",
		2: "TOPOLOGY_CHANGE_OP_REMOVE",
	}
	Enums_TopologyChangeOp_value = map[string]int32{
		"TOPOLOGY_CHANGE_OP_UNSPECIFIED": 0,
		"TOPOLOGY_CHANGE_OP_ADD_REPLACE": 1,
		"TOPOLOGY_CHANGE_OP_REMOVE":      2,
	}
)

func (x Enums_TopologyChangeOp) Enum() *Enums_TopologyChangeOp {
	p := new(Enums_TopologyChangeOp)
	*p = x
	return p
}

func (x Enums_TopologyChangeOp) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Enums_TopologyChangeOp) Descriptor() protoreflect.EnumDescriptor {
	return file_com_digitalasset_canton_protocol_v30_topology_proto_enumTypes[0].Descriptor()
}

func (Enums_TopologyChangeOp) Type() protoreflect.EnumType {
	return &file_com_digitalasset_canton_protocol_v30_topology_proto_enumTypes[0]
}

func (x Enums_TopologyChangeOp) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Enums_TopologyChangeOp.Descriptor instead.
func (Enums_TopologyChangeOp) EnumDescriptor() ([]byte, []int) {
	return file_com_digitalasset_canton_protocol_v30_topology_proto_rawDescGZIP(), []int{0, 0}
}

type Enums_ParticipantPermission int32

const (
	Enums_PARTICIPANT_PERMISSION_UNSPECIFIED  Enums_ParticipantPermission = 0
	Enums_PARTICIPANT_PERMISSION_SUBMISSION   Enums_ParticipantPermission = 1
	Enums_PARTICIPANT_PERMISSION_CONFIRMATION Enums_ParticipantPermission = 2
	Enums_PARTICIPANT_PERMISSION_OBSERVATION  Enums_ParticipantPermission = 3
)

// Enum value maps for Enums_ParticipantPermission.
var (
	Enums_ParticipantPermission_name = map[int32]string{
		0: "PARTICIPANT_PERMISSION_UNSPECIFIED",
		1: "PARTICIPANT_PERMISSION_SUBMISSION",
		2: "PARTICIPANT_PERMISSION_CONFIRMATION",
		3: "PARTICIPANT_PERMISSION_OBSERVATION",
	}
	Enums_ParticipantPermission_value = map[string]int32{
		"PARTICIPANT_PERMISSION_UNSPECIFIED":  0,
		"PARTICIPANT_PERMISSION_SUBMISSION":   1,
		"PARTICIPANT_PERMISSION_CONFIRMATION": 2,
		"PARTICIPANT_PERMISSION_OBSERVATION":  3,
	}
)

func (x Enums_ParticipantPermission) Enum() *Enums_ParticipantPermission {
	p := new(Enums_ParticipantPermission)
	*p = x
	return p
}

func (x Enums_ParticipantPermission) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Enums_ParticipantPermission) Descriptor() protoreflect.EnumDescriptor {
	return file_com_digitalasset_canton_protocol_v30_topology_proto_enumTypes[1].Descriptor()
}

func (Enums_ParticipantPermission) Type() protoreflect.EnumType {
	return &file_com_digitalasset_canton_protocol_v30_topology_proto_enumTypes[1]
}

func (x Enums_ParticipantPermission) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Enums_ParticipantPermission.Descriptor instead.
func (Enums_ParticipantPermission) EnumDescriptor() ([]byte, []int) {
	return file_com_digitalasset_canton_protocol_v30_topology_proto_rawDescGZIP(), []int{0, 1}
}

type Enums_TopologyMappingCode int32

const (
	Enums_TOPOLOGY_MAPPING_CODE_UNSPECIFIED                         Enums_TopologyMappingCode = 0
	Enums_TOPOLOGY_MAPPING_CODE_NAMESPACE_DELEGATION                Enums_TopologyMappingCode = 1
	Enums_TOPOLOGY_MAPPING_CODE_DECENTRALIZED_NAMESPACE_DEFINITION  Enums_TopologyMappingCode = 3
	Enums_TOPOLOGY_MAPPING_CODE_OWNER_TO_KEY_MAPPING                Enums_TopologyMappingCode = 4
	Enums_TOPOLOGY_MAPPING_CODE_SYNCHRONIZER_TRUST_CERTIFICATE      Enums_TopologyMappingCode = 5
	Enums_TOPOLOGY_MAPPING_CODE_PARTICIPANT_PERMISSION              Enums_TopologyMappingCode = 6
	Enums_TOPOLOGY_MAPPING_CODE_PARTY_HOSTING_LIMITS                Enums_TopologyMappingCode = 7
	Enums_TOPOLOGY_MAPPING_CODE_VETTED_PACKAGES                     Enums_TopologyMappingCode = 8
	Enums_TOPOLOGY_MAPPING_CODE_PARTY_TO_PARTICIPANT                Enums_TopologyMappingCode = 9
	Enums_TOPOLOGY_MAPPING_CODE_SYNCHRONIZER_PARAMETERS_STATE       Enums_TopologyMappingCode = 11
	Enums_TOPOLOGY_MAPPING_CODE_MEDIATOR_SYNCHRONIZER_STATE         Enums_TopologyMappingCode = 12
	Enums_TOPOLOGY_MAPPING_CODE_SEQUENCER_SYNCHRONIZER_STATE        Enums_TopologyMappingCode = 13
	Enums_TOPOLOGY_MAPPING_CODE_PURGE_TOPOLOGY_TXS                  Enums_TopologyMappingCode = 15
	Enums_TOPOLOGY_MAPPING_CODE_SEQUENCING_DYNAMIC_PARAMETERS_STATE Enums_TopologyMappingCode = 17
	Enums_TOPOLOGY_MAPPING_CODE_PARTY_TO_KEY_MAPPING                Enums_TopologyMappingCode = 18
)

// Enum value maps for Enums_TopologyMappingCode.
var (
	Enums_TopologyMappingCode_name = map[int32]string{
		0:  "TOPOLOGY_MAPPING_CODE_UNSPECIFIED",
		1:  "TOPOLOGY_MAPPING_CODE_NAMESPACE_DELEGATION",
		3:  "TOPOLOGY_MAPPING_CODE_DECENTRALIZED_NAMESPACE_DEFINITION",
		4:  "TOPOLOGY_MAPPING_CODE_OWNER_TO_KEY_MAPPING",
		5:  "TOPOLOGY_MAPPING_CODE_SYNCHRONIZER_TRUST_CERTIFICATE",
		6:  "TOPOLOGY_MAPPING_CODE_PARTICIPANT_PERMISSION",
		7:  "TOPOLOGY_MAPPING_CODE_PARTY_HOSTING_LIMITS",
		8:  "TOPOLOGY_MAPPING_CODE_VETTED_PACKAGES",
		9:  "TOPOLOGY_MAPPING_CODE_PARTY_TO_PARTICIPANT",
		11: "TOPOLOGY_MAPPING_CODE_SYNCHRONIZER_PARAMETERS_STATE",
		12: "TOPOLOGY_MAPPING_CODE_MEDIATOR_SYNCHRONIZER_STATE",
		13: "TOPOLOGY_MAPPING_CODE_SEQUENCER_SYNCHRONIZER_STATE",
		15: "TOPOLOGY_MAPPING_CODE_PURGE_TOPOLOGY_TXS",
		17: "TOPOLOGY_MAPPING_CODE_SEQUENCING_DYNAMIC_PARAMETERS_STATE",
		18: "TOPOLOGY_MAPPING_CODE_PARTY_TO_KEY_MAPPING",
	}
	Enums_TopologyMappingCode_value = map[string]int32{
		"TOPOLOGY_MAPPING_CODE_UNSPECIFIED":                         0,
		"TOPOLOGY_MAPPING_CODE_NAMESPACE_DELEGATION":                1,
		"TOPOLOGY_MAPPING_CODE_DECENTRALIZED_NAMESPACE_DEFINITION":  3,
		"TOPOLOGY_MAPPING_CODE_OWNER_TO_KEY_MAPPING":                4,
		"TOPOLOGY_MAPPING_CODE_SYNCHRONIZER_TRUST_CERTIFICATE":      5,
		"TOPOLOGY_MAPPING_CODE_PARTICIPANT_PERMISSION":              6,
		"TOPOLOGY_MAPPING_CODE_PARTY_HOSTING_LIMITS":                7,
		"TOPOLOGY_MAPPING_CODE_VETTED_PACKAGES":                     8,
		"TOPOLOGY_MAPPING_CODE_PARTY_TO_PARTICIPANT":                9,
		"TOPOLOGY_MAPPING_CODE_SYNCHRONIZER_PARAMETERS_STATE":       11,
		"TOPOLOGY_MAPPING_CODE_MEDIATOR_SYNCHRONIZER_STATE":         12,
		"TOPOLOGY_MAPPING_CODE_SEQUENCER_SYNCHRONIZER_STATE":        13,
		"TOPOLOGY_MAPPING_CODE_PURGE_TOPOLOGY_TXS":                  15,
		"TOPOLOGY_MAPPING_CODE_SEQUENCING_DYNAMIC_PARAMETERS_STATE": 17,
		"TOPOLOGY_MAPPING_CODE_PARTY_TO_KEY_MAPPING":                18,
	}
)

func (x Enums_TopologyMappingCode) Enum() *Enums_TopologyMappingCode {
	p := new(Enums_TopologyMappingCode)
	*p = x
	return p
}

func (x Enums_TopologyMappingCode) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Enums_TopologyMappingCode) Descriptor() protoreflect.EnumDescriptor {
	return file_com_digitalasset_canton_protocol_v30_topology_proto_enumTypes[2].Descriptor()
}

func (Enums_TopologyMappingCode) Type() protoreflect.EnumType {
	return &file_com_digitalasset_canton_protocol_v30_topology_proto_enumTypes[2]
}

func (x Enums_TopologyMappingCode) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Enums_TopologyMappingCode.Descriptor instead.
func (Enums_TopologyMappingCode) EnumDescriptor() ([]byte, []int) {
	return file_com_digitalasset_canton_protocol_v30_topology_proto_rawDescGZIP(), []int{0, 2}
}

type Enums struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Enums) Reset() {
	*x = Enums{}
	mi := &file_com_digitalasset_canton_protocol_v30_topology_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Enums) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Enums) ProtoMessage() {}

func (x *Enums) ProtoReflect() protoreflect.Message {
	mi := &file_com_digitalasset_canton_protocol_v30_topology_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Enums.ProtoReflect.Descriptor instead.
func (*Enums) Descriptor() ([]byte, []int) {
	return file_com_digitalasset_canton_protocol_v30_topology_proto_rawDescGZIP(), []int{0}
}

type NamespaceDelegation struct {
	state     protoimpl.MessageState `protogen:"open.v1"`
	Namespace string                 `protobuf:"bytes,1,opt,name=namespace,proto3" json:"namespace,omitempty"`
	TargetKey *v30.SigningPublicKey  `protobuf:"bytes,2,opt,name=target_key,json=targetKey,proto3" json:"target_key,omitempty"`
	// Deprecated: Marked as deprecated in com/digitalasset/canton/protocol/v30/topology.proto.
	IsRootDelegation bool `protobuf:"varint,3,opt,name=is_root_delegation,json=isRootDelegation,proto3" json:"is_root_delegation,omitempty"`
	// Types that are valid to be assigned to Restriction:
	//
	//	*NamespaceDelegation_CanSignAllMappings_
	//	*NamespaceDelegation_CanSignAllButNamespaceDelegations_
	//	*NamespaceDelegation_CanSignSpecificMapings
	Restriction   isNamespaceDelegation_Restriction `protobuf_oneof:"restriction"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *NamespaceDelegation) Reset() {
	*x = NamespaceDelegation{}
	mi := &file_com_digitalasset_canton_protocol_v30_topology_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *NamespaceDelegation) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NamespaceDelegation) ProtoMessage() {}

func (x *NamespaceDelegation) ProtoReflect() protoreflect.Message {
	mi := &file_com_digitalasset_canton_protocol_v30_topology_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NamespaceDelegation.ProtoReflect.Descriptor instead.
func (*NamespaceDelegation) Descriptor() ([]byte, []int) {
	return file_com_digitalasset_canton_protocol_v30_topology_proto_rawDescGZIP(), []int{1}
}

func (x *NamespaceDelegation) GetNamespace() string {
	if x != nil {
		return x.Namespace
	}
	return ""
}

func (x *NamespaceDelegation) GetTargetKey() *v30.SigningPublicKey {
	if x != nil {
		return x.TargetKey
	}
	return nil
}

// Deprecated: Marked as deprecated in com/digitalasset/canton/protocol/v30/topology.proto.
func (x *NamespaceDelegation) GetIsRootDelegation() bool {
	if x != nil {
		return x.IsRootDelegation
	}
	return false
}

func (x *NamespaceDelegation) GetRestriction() isNamespaceDelegation_Restriction {
	if x != nil {
		return x.Restriction
	}
	return nil
}

func (x *NamespaceDelegation) GetCanSignAllMappings() *NamespaceDelegation_CanSignAllMappings {
	if x != nil {
		if x, ok := x.Restriction.(*NamespaceDelegation_CanSignAllMappings_); ok {
			return x.CanSignAllMappings
		}
	}
	return nil
}

func (x *NamespaceDelegation) GetCanSignAllButNamespaceDelegations() *NamespaceDelegation_CanSignAllButNamespaceDelegations {
	if x != nil {
		if x, ok := x.Restriction.(*NamespaceDelegation_CanSignAllButNamespaceDelegations_); ok {
			return x.CanSignAllButNamespaceDelegations
		}
	}
	return nil
}

func (x *NamespaceDelegation) GetCanSignSpecificMapings() *NamespaceDelegation_CanSignSpecificMappings {
	if x != nil {
		if x, ok := x.Restriction.(*NamespaceDelegation_CanSignSpecificMapings); ok {
			return x.CanSignSpecificMapings
		}
	}
	return nil
}

type isNamespaceDelegation_Restriction interface {
	isNamespaceDelegation_Restriction()
}

type NamespaceDelegation_CanSignAllMappings_ struct {
	CanSignAllMappings *NamespaceDelegation_CanSignAllMappings `protobuf:"bytes,4,opt,name=can_sign_all_mappings,json=canSignAllMappings,proto3,oneof"`
}

type NamespaceDelegation_CanSignAllButNamespaceDelegations_ struct {
	CanSignAllButNamespaceDelegations *NamespaceDelegation_CanSignAllButNamespaceDelegations `protobuf:"bytes,5,opt,name=can_sign_all_but_namespace_delegations,json=canSignAllButNamespaceDelegations,proto3,oneof"`
}

type NamespaceDelegation_CanSignSpecificMapings struct {
	CanSignSpecificMapings *NamespaceDelegation_CanSignSpecificMappings `protobuf:"bytes,6,opt,name=can_sign_specific_mapings,json=canSignSpecificMapings,proto3,oneof"`
}

func (*NamespaceDelegation_CanSignAllMappings_) isNamespaceDelegation_Restriction() {}

func (*NamespaceDelegation_CanSignAllButNamespaceDelegations_) isNamespaceDelegation_Restriction() {}

func (*NamespaceDelegation_CanSignSpecificMapings) isNamespaceDelegation_Restriction() {}

type DecentralizedNamespaceDefinition struct {
	state                  protoimpl.MessageState `protogen:"open.v1"`
	DecentralizedNamespace string                 `protobuf:"bytes,1,opt,name=decentralized_namespace,json=decentralizedNamespace,proto3" json:"decentralized_namespace,omitempty"`
	Threshold              int32                  `protobuf:"varint,2,opt,name=threshold,proto3" json:"threshold,omitempty"`
	Owners                 []string               `protobuf:"bytes,3,rep,name=owners,proto3" json:"owners,omitempty"`
	unknownFields          protoimpl.UnknownFields
	sizeCache              protoimpl.SizeCache
}

func (x *DecentralizedNamespaceDefinition) Reset() {
	*x = DecentralizedNamespaceDefinition{}
	mi := &file_com_digitalasset_canton_protocol_v30_topology_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DecentralizedNamespaceDefinition) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DecentralizedNamespaceDefinition) ProtoMessage() {}

func (x *DecentralizedNamespaceDefinition) ProtoReflect() protoreflect.Message {
	mi := &file_com_digitalasset_canton_protocol_v30_topology_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DecentralizedNamespaceDefinition.ProtoReflect.Descriptor instead.
func (*DecentralizedNamespaceDefinition) Descriptor() ([]byte, []int) {
	return file_com_digitalasset_canton_protocol_v30_topology_proto_rawDescGZIP(), []int{2}
}

func (x *DecentralizedNamespaceDefinition) GetDecentralizedNamespace() string {
	if x != nil {
		return x.DecentralizedNamespace
	}
	return ""
}

func (x *DecentralizedNamespaceDefinition) GetThreshold() int32 {
	if x != nil {
		return x.Threshold
	}
	return 0
}

func (x *DecentralizedNamespaceDefinition) GetOwners() []string {
	if x != nil {
		return x.Owners
	}
	return nil
}

type OwnerToKeyMapping struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Member        string                 `protobuf:"bytes,1,opt,name=member,proto3" json:"member,omitempty"`
	PublicKeys    []*v30.PublicKey       `protobuf:"bytes,2,rep,name=public_keys,json=publicKeys,proto3" json:"public_keys,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *OwnerToKeyMapping) Reset() {
	*x = OwnerToKeyMapping{}
	mi := &file_com_digitalasset_canton_protocol_v30_topology_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *OwnerToKeyMapping) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OwnerToKeyMapping) ProtoMessage() {}

func (x *OwnerToKeyMapping) ProtoReflect() protoreflect.Message {
	mi := &file_com_digitalasset_canton_protocol_v30_topology_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OwnerToKeyMapping.ProtoReflect.Descriptor instead.
func (*OwnerToKeyMapping) Descriptor() ([]byte, []int) {
	return file_com_digitalasset_canton_protocol_v30_topology_proto_rawDescGZIP(), []int{3}
}

func (x *OwnerToKeyMapping) GetMember() string {
	if x != nil {
		return x.Member
	}
	return ""
}

func (x *OwnerToKeyMapping) GetPublicKeys() []*v30.PublicKey {
	if x != nil {
		return x.PublicKeys
	}
	return nil
}

type PartyToKeyMapping struct {
	state         protoimpl.MessageState  `protogen:"open.v1"`
	Party         string                  `protobuf:"bytes,1,opt,name=party,proto3" json:"party,omitempty"`
	Threshold     uint32                  `protobuf:"varint,3,opt,name=threshold,proto3" json:"threshold,omitempty"`
	SigningKeys   []*v30.SigningPublicKey `protobuf:"bytes,4,rep,name=signing_keys,json=signingKeys,proto3" json:"signing_keys,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *PartyToKeyMapping) Reset() {
	*x = PartyToKeyMapping{}
	mi := &file_com_digitalasset_canton_protocol_v30_topology_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PartyToKeyMapping) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PartyToKeyMapping) ProtoMessage() {}

func (x *PartyToKeyMapping) ProtoReflect() protoreflect.Message {
	mi := &file_com_digitalasset_canton_protocol_v30_topology_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PartyToKeyMapping.ProtoReflect.Descriptor instead.
func (*PartyToKeyMapping) Descriptor() ([]byte, []int) {
	return file_com_digitalasset_canton_protocol_v30_topology_proto_rawDescGZIP(), []int{4}
}

func (x *PartyToKeyMapping) GetParty() string {
	if x != nil {
		return x.Party
	}
	return ""
}

func (x *PartyToKeyMapping) GetThreshold() uint32 {
	if x != nil {
		return x.Threshold
	}
	return 0
}

func (x *PartyToKeyMapping) GetSigningKeys() []*v30.SigningPublicKey {
	if x != nil {
		return x.SigningKeys
	}
	return nil
}

type SynchronizerTrustCertificate struct {
	state          protoimpl.MessageState `protogen:"open.v1"`
	ParticipantUid string                 `protobuf:"bytes,1,opt,name=participant_uid,json=participantUid,proto3" json:"participant_uid,omitempty"`
	SynchronizerId string                 `protobuf:"bytes,2,opt,name=synchronizer_id,json=synchronizerId,proto3" json:"synchronizer_id,omitempty"`
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *SynchronizerTrustCertificate) Reset() {
	*x = SynchronizerTrustCertificate{}
	mi := &file_com_digitalasset_canton_protocol_v30_topology_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SynchronizerTrustCertificate) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SynchronizerTrustCertificate) ProtoMessage() {}

func (x *SynchronizerTrustCertificate) ProtoReflect() protoreflect.Message {
	mi := &file_com_digitalasset_canton_protocol_v30_topology_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SynchronizerTrustCertificate.ProtoReflect.Descriptor instead.
func (*SynchronizerTrustCertificate) Descriptor() ([]byte, []int) {
	return file_com_digitalasset_canton_protocol_v30_topology_proto_rawDescGZIP(), []int{5}
}

func (x *SynchronizerTrustCertificate) GetParticipantUid() string {
	if x != nil {
		return x.ParticipantUid
	}
	return ""
}

func (x *SynchronizerTrustCertificate) GetSynchronizerId() string {
	if x != nil {
		return x.SynchronizerId
	}
	return ""
}

type ParticipantSynchronizerPermission struct {
	state          protoimpl.MessageState         `protogen:"open.v1"`
	SynchronizerId string                         `protobuf:"bytes,1,opt,name=synchronizer_id,json=synchronizerId,proto3" json:"synchronizer_id,omitempty"`
	ParticipantUid string                         `protobuf:"bytes,2,opt,name=participant_uid,json=participantUid,proto3" json:"participant_uid,omitempty"`
	Permission     Enums_ParticipantPermission    `protobuf:"varint,3,opt,name=permission,proto3,enum=com.digitalasset.canton.protocol.v30.Enums_ParticipantPermission" json:"permission,omitempty"`
	Limits         *ParticipantSynchronizerLimits `protobuf:"bytes,4,opt,name=limits,proto3" json:"limits,omitempty"`
	LoginAfter     *int64                         `protobuf:"varint,5,opt,name=login_after,json=loginAfter,proto3,oneof" json:"login_after,omitempty"`
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *ParticipantSynchronizerPermission) Reset() {
	*x = ParticipantSynchronizerPermission{}
	mi := &file_com_digitalasset_canton_protocol_v30_topology_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ParticipantSynchronizerPermission) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ParticipantSynchronizerPermission) ProtoMessage() {}

func (x *ParticipantSynchronizerPermission) ProtoReflect() protoreflect.Message {
	mi := &file_com_digitalasset_canton_protocol_v30_topology_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ParticipantSynchronizerPermission.ProtoReflect.Descriptor instead.
func (*ParticipantSynchronizerPermission) Descriptor() ([]byte, []int) {
	return file_com_digitalasset_canton_protocol_v30_topology_proto_rawDescGZIP(), []int{6}
}

func (x *ParticipantSynchronizerPermission) GetSynchronizerId() string {
	if x != nil {
		return x.SynchronizerId
	}
	return ""
}

func (x *ParticipantSynchronizerPermission) GetParticipantUid() string {
	if x != nil {
		return x.ParticipantUid
	}
	return ""
}

func (x *ParticipantSynchronizerPermission) GetPermission() Enums_ParticipantPermission {
	if x != nil {
		return x.Permission
	}
	return Enums_PARTICIPANT_PERMISSION_UNSPECIFIED
}

func (x *ParticipantSynchronizerPermission) GetLimits() *ParticipantSynchronizerLimits {
	if x != nil {
		return x.Limits
	}
	return nil
}

func (x *ParticipantSynchronizerPermission) GetLoginAfter() int64 {
	if x != nil && x.LoginAfter != nil {
		return *x.LoginAfter
	}
	return 0
}

type PartyHostingLimits struct {
	state          protoimpl.MessageState `protogen:"open.v1"`
	SynchronizerId string                 `protobuf:"bytes,1,opt,name=synchronizer_id,json=synchronizerId,proto3" json:"synchronizer_id,omitempty"`
	Party          string                 `protobuf:"bytes,2,opt,name=party,proto3" json:"party,omitempty"`
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *PartyHostingLimits) Reset() {
	*x = PartyHostingLimits{}
	mi := &file_com_digitalasset_canton_protocol_v30_topology_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PartyHostingLimits) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PartyHostingLimits) ProtoMessage() {}

func (x *PartyHostingLimits) ProtoReflect() protoreflect.Message {
	mi := &file_com_digitalasset_canton_protocol_v30_topology_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PartyHostingLimits.ProtoReflect.Descriptor instead.
func (*PartyHostingLimits) Descriptor() ([]byte, []int) {
	return file_com_digitalasset_canton_protocol_v30_topology_proto_rawDescGZIP(), []int{7}
}

func (x *PartyHostingLimits) GetSynchronizerId() string {
	if x != nil {
		return x.SynchronizerId
	}
	return ""
}

func (x *PartyHostingLimits) GetParty() string {
	if x != nil {
		return x.Party
	}
	return ""
}

type VettedPackages struct {
	state          protoimpl.MessageState `protogen:"open.v1"`
	ParticipantUid string                 `protobuf:"bytes,1,opt,name=participant_uid,json=participantUid,proto3" json:"participant_uid,omitempty"`
	// Deprecated: Marked as deprecated in com/digitalasset/canton/protocol/v30/topology.proto.
	PackageIds    []string                        `protobuf:"bytes,2,rep,name=package_ids,json=packageIds,proto3" json:"package_ids,omitempty"`
	Packages      []*VettedPackages_VettedPackage `protobuf:"bytes,4,rep,name=packages,proto3" json:"packages,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *VettedPackages) Reset() {
	*x = VettedPackages{}
	mi := &file_com_digitalasset_canton_protocol_v30_topology_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *VettedPackages) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VettedPackages) ProtoMessage() {}

func (x *VettedPackages) ProtoReflect() protoreflect.Message {
	mi := &file_com_digitalasset_canton_protocol_v30_topology_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VettedPackages.ProtoReflect.Descriptor instead.
func (*VettedPackages) Descriptor() ([]byte, []int) {
	return file_com_digitalasset_canton_protocol_v30_topology_proto_rawDescGZIP(), []int{8}
}

func (x *VettedPackages) GetParticipantUid() string {
	if x != nil {
		return x.ParticipantUid
	}
	return ""
}

// Deprecated: Marked as deprecated in com/digitalasset/canton/protocol/v30/topology.proto.
func (x *VettedPackages) GetPackageIds() []string {
	if x != nil {
		return x.PackageIds
	}
	return nil
}

func (x *VettedPackages) GetPackages() []*VettedPackages_VettedPackage {
	if x != nil {
		return x.Packages
	}
	return nil
}

type PartyToParticipant struct {
	state         protoimpl.MessageState                   `protogen:"open.v1"`
	Party         string                                   `protobuf:"bytes,1,opt,name=party,proto3" json:"party,omitempty"`
	Threshold     uint32                                   `protobuf:"varint,2,opt,name=threshold,proto3" json:"threshold,omitempty"`
	Participants  []*PartyToParticipant_HostingParticipant `protobuf:"bytes,3,rep,name=participants,proto3" json:"participants,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *PartyToParticipant) Reset() {
	*x = PartyToParticipant{}
	mi := &file_com_digitalasset_canton_protocol_v30_topology_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PartyToParticipant) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PartyToParticipant) ProtoMessage() {}

func (x *PartyToParticipant) ProtoReflect() protoreflect.Message {
	mi := &file_com_digitalasset_canton_protocol_v30_topology_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PartyToParticipant.ProtoReflect.Descriptor instead.
func (*PartyToParticipant) Descriptor() ([]byte, []int) {
	return file_com_digitalasset_canton_protocol_v30_topology_proto_rawDescGZIP(), []int{9}
}

func (x *PartyToParticipant) GetParty() string {
	if x != nil {
		return x.Party
	}
	return ""
}

func (x *PartyToParticipant) GetThreshold() uint32 {
	if x != nil {
		return x.Threshold
	}
	return 0
}

func (x *PartyToParticipant) GetParticipants() []*PartyToParticipant_HostingParticipant {
	if x != nil {
		return x.Participants
	}
	return nil
}

type SynchronizerParametersState struct {
	state                  protoimpl.MessageState         `protogen:"open.v1"`
	SynchronizerId         string                         `protobuf:"bytes,1,opt,name=synchronizer_id,json=synchronizerId,proto3" json:"synchronizer_id,omitempty"`
	SynchronizerParameters *DynamicSynchronizerParameters `protobuf:"bytes,2,opt,name=synchronizer_parameters,json=synchronizerParameters,proto3" json:"synchronizer_parameters,omitempty"`
	unknownFields          protoimpl.UnknownFields
	sizeCache              protoimpl.SizeCache
}

func (x *SynchronizerParametersState) Reset() {
	*x = SynchronizerParametersState{}
	mi := &file_com_digitalasset_canton_protocol_v30_topology_proto_msgTypes[10]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SynchronizerParametersState) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SynchronizerParametersState) ProtoMessage() {}

func (x *SynchronizerParametersState) ProtoReflect() protoreflect.Message {
	mi := &file_com_digitalasset_canton_protocol_v30_topology_proto_msgTypes[10]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SynchronizerParametersState.ProtoReflect.Descriptor instead.
func (*SynchronizerParametersState) Descriptor() ([]byte, []int) {
	return file_com_digitalasset_canton_protocol_v30_topology_proto_rawDescGZIP(), []int{10}
}

func (x *SynchronizerParametersState) GetSynchronizerId() string {
	if x != nil {
		return x.SynchronizerId
	}
	return ""
}

func (x *SynchronizerParametersState) GetSynchronizerParameters() *DynamicSynchronizerParameters {
	if x != nil {
		return x.SynchronizerParameters
	}
	return nil
}

type DynamicSequencingParametersState struct {
	state                protoimpl.MessageState       `protogen:"open.v1"`
	SynchronizerId       string                       `protobuf:"bytes,1,opt,name=synchronizer_id,json=synchronizerId,proto3" json:"synchronizer_id,omitempty"`
	SequencingParameters *DynamicSequencingParameters `protobuf:"bytes,2,opt,name=sequencing_parameters,json=sequencingParameters,proto3" json:"sequencing_parameters,omitempty"`
	unknownFields        protoimpl.UnknownFields
	sizeCache            protoimpl.SizeCache
}

func (x *DynamicSequencingParametersState) Reset() {
	*x = DynamicSequencingParametersState{}
	mi := &file_com_digitalasset_canton_protocol_v30_topology_proto_msgTypes[11]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DynamicSequencingParametersState) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DynamicSequencingParametersState) ProtoMessage() {}

func (x *DynamicSequencingParametersState) ProtoReflect() protoreflect.Message {
	mi := &file_com_digitalasset_canton_protocol_v30_topology_proto_msgTypes[11]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DynamicSequencingParametersState.ProtoReflect.Descriptor instead.
func (*DynamicSequencingParametersState) Descriptor() ([]byte, []int) {
	return file_com_digitalasset_canton_protocol_v30_topology_proto_rawDescGZIP(), []int{11}
}

func (x *DynamicSequencingParametersState) GetSynchronizerId() string {
	if x != nil {
		return x.SynchronizerId
	}
	return ""
}

func (x *DynamicSequencingParametersState) GetSequencingParameters() *DynamicSequencingParameters {
	if x != nil {
		return x.SequencingParameters
	}
	return nil
}

type MediatorSynchronizerState struct {
	state          protoimpl.MessageState `protogen:"open.v1"`
	SynchronizerId string                 `protobuf:"bytes,1,opt,name=synchronizer_id,json=synchronizerId,proto3" json:"synchronizer_id,omitempty"`
	Group          uint32                 `protobuf:"varint,2,opt,name=group,proto3" json:"group,omitempty"`
	Threshold      uint32                 `protobuf:"varint,3,opt,name=threshold,proto3" json:"threshold,omitempty"`
	Active         []string               `protobuf:"bytes,4,rep,name=active,proto3" json:"active,omitempty"`
	Observers      []string               `protobuf:"bytes,5,rep,name=observers,proto3" json:"observers,omitempty"`
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *MediatorSynchronizerState) Reset() {
	*x = MediatorSynchronizerState{}
	mi := &file_com_digitalasset_canton_protocol_v30_topology_proto_msgTypes[12]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *MediatorSynchronizerState) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MediatorSynchronizerState) ProtoMessage() {}

func (x *MediatorSynchronizerState) ProtoReflect() protoreflect.Message {
	mi := &file_com_digitalasset_canton_protocol_v30_topology_proto_msgTypes[12]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MediatorSynchronizerState.ProtoReflect.Descriptor instead.
func (*MediatorSynchronizerState) Descriptor() ([]byte, []int) {
	return file_com_digitalasset_canton_protocol_v30_topology_proto_rawDescGZIP(), []int{12}
}

func (x *MediatorSynchronizerState) GetSynchronizerId() string {
	if x != nil {
		return x.SynchronizerId
	}
	return ""
}

func (x *MediatorSynchronizerState) GetGroup() uint32 {
	if x != nil {
		return x.Group
	}
	return 0
}

func (x *MediatorSynchronizerState) GetThreshold() uint32 {
	if x != nil {
		return x.Threshold
	}
	return 0
}

func (x *MediatorSynchronizerState) GetActive() []string {
	if x != nil {
		return x.Active
	}
	return nil
}

func (x *MediatorSynchronizerState) GetObservers() []string {
	if x != nil {
		return x.Observers
	}
	return nil
}

type SequencerSynchronizerState struct {
	state          protoimpl.MessageState `protogen:"open.v1"`
	SynchronizerId string                 `protobuf:"bytes,1,opt,name=synchronizer_id,json=synchronizerId,proto3" json:"synchronizer_id,omitempty"`
	Threshold      uint32                 `protobuf:"varint,2,opt,name=threshold,proto3" json:"threshold,omitempty"`
	Active         []string               `protobuf:"bytes,3,rep,name=active,proto3" json:"active,omitempty"`
	Observers      []string               `protobuf:"bytes,4,rep,name=observers,proto3" json:"observers,omitempty"`
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *SequencerSynchronizerState) Reset() {
	*x = SequencerSynchronizerState{}
	mi := &file_com_digitalasset_canton_protocol_v30_topology_proto_msgTypes[13]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SequencerSynchronizerState) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SequencerSynchronizerState) ProtoMessage() {}

func (x *SequencerSynchronizerState) ProtoReflect() protoreflect.Message {
	mi := &file_com_digitalasset_canton_protocol_v30_topology_proto_msgTypes[13]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SequencerSynchronizerState.ProtoReflect.Descriptor instead.
func (*SequencerSynchronizerState) Descriptor() ([]byte, []int) {
	return file_com_digitalasset_canton_protocol_v30_topology_proto_rawDescGZIP(), []int{13}
}

func (x *SequencerSynchronizerState) GetSynchronizerId() string {
	if x != nil {
		return x.SynchronizerId
	}
	return ""
}

func (x *SequencerSynchronizerState) GetThreshold() uint32 {
	if x != nil {
		return x.Threshold
	}
	return 0
}

func (x *SequencerSynchronizerState) GetActive() []string {
	if x != nil {
		return x.Active
	}
	return nil
}

func (x *SequencerSynchronizerState) GetObservers() []string {
	if x != nil {
		return x.Observers
	}
	return nil
}

type PurgeTopologyTransaction struct {
	state          protoimpl.MessageState `protogen:"open.v1"`
	SynchronizerId string                 `protobuf:"bytes,1,opt,name=synchronizer_id,json=synchronizerId,proto3" json:"synchronizer_id,omitempty"`
	Mappings       []*TopologyMapping     `protobuf:"bytes,2,rep,name=mappings,proto3" json:"mappings,omitempty"`
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *PurgeTopologyTransaction) Reset() {
	*x = PurgeTopologyTransaction{}
	mi := &file_com_digitalasset_canton_protocol_v30_topology_proto_msgTypes[14]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PurgeTopologyTransaction) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PurgeTopologyTransaction) ProtoMessage() {}

func (x *PurgeTopologyTransaction) ProtoReflect() protoreflect.Message {
	mi := &file_com_digitalasset_canton_protocol_v30_topology_proto_msgTypes[14]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PurgeTopologyTransaction.ProtoReflect.Descriptor instead.
func (*PurgeTopologyTransaction) Descriptor() ([]byte, []int) {
	return file_com_digitalasset_canton_protocol_v30_topology_proto_rawDescGZIP(), []int{14}
}

func (x *PurgeTopologyTransaction) GetSynchronizerId() string {
	if x != nil {
		return x.SynchronizerId
	}
	return ""
}

func (x *PurgeTopologyTransaction) GetMappings() []*TopologyMapping {
	if x != nil {
		return x.Mappings
	}
	return nil
}

type TopologyMapping struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Types that are valid to be assigned to Mapping:
	//
	//	*TopologyMapping_NamespaceDelegation
	//	*TopologyMapping_DecentralizedNamespaceDefinition
	//	*TopologyMapping_OwnerToKeyMapping
	//	*TopologyMapping_SynchronizerTrustCertificate
	//	*TopologyMapping_ParticipantPermission
	//	*TopologyMapping_PartyHostingLimits
	//	*TopologyMapping_VettedPackages
	//	*TopologyMapping_PartyToParticipant
	//	*TopologyMapping_SynchronizerParametersState
	//	*TopologyMapping_MediatorSynchronizerState
	//	*TopologyMapping_SequencerSynchronizerState
	//	*TopologyMapping_PurgeTopologyTxs
	//	*TopologyMapping_SequencingDynamicParametersState
	//	*TopologyMapping_PartyToKeyMapping
	Mapping       isTopologyMapping_Mapping `protobuf_oneof:"mapping"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TopologyMapping) Reset() {
	*x = TopologyMapping{}
	mi := &file_com_digitalasset_canton_protocol_v30_topology_proto_msgTypes[15]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TopologyMapping) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TopologyMapping) ProtoMessage() {}

func (x *TopologyMapping) ProtoReflect() protoreflect.Message {
	mi := &file_com_digitalasset_canton_protocol_v30_topology_proto_msgTypes[15]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TopologyMapping.ProtoReflect.Descriptor instead.
func (*TopologyMapping) Descriptor() ([]byte, []int) {
	return file_com_digitalasset_canton_protocol_v30_topology_proto_rawDescGZIP(), []int{15}
}

func (x *TopologyMapping) GetMapping() isTopologyMapping_Mapping {
	if x != nil {
		return x.Mapping
	}
	return nil
}

func (x *TopologyMapping) GetNamespaceDelegation() *NamespaceDelegation {
	if x != nil {
		if x, ok := x.Mapping.(*TopologyMapping_NamespaceDelegation); ok {
			return x.NamespaceDelegation
		}
	}
	return nil
}

func (x *TopologyMapping) GetDecentralizedNamespaceDefinition() *DecentralizedNamespaceDefinition {
	if x != nil {
		if x, ok := x.Mapping.(*TopologyMapping_DecentralizedNamespaceDefinition); ok {
			return x.DecentralizedNamespaceDefinition
		}
	}
	return nil
}

func (x *TopologyMapping) GetOwnerToKeyMapping() *OwnerToKeyMapping {
	if x != nil {
		if x, ok := x.Mapping.(*TopologyMapping_OwnerToKeyMapping); ok {
			return x.OwnerToKeyMapping
		}
	}
	return nil
}

func (x *TopologyMapping) GetSynchronizerTrustCertificate() *SynchronizerTrustCertificate {
	if x != nil {
		if x, ok := x.Mapping.(*TopologyMapping_SynchronizerTrustCertificate); ok {
			return x.SynchronizerTrustCertificate
		}
	}
	return nil
}

func (x *TopologyMapping) GetParticipantPermission() *ParticipantSynchronizerPermission {
	if x != nil {
		if x, ok := x.Mapping.(*TopologyMapping_ParticipantPermission); ok {
			return x.ParticipantPermission
		}
	}
	return nil
}

func (x *TopologyMapping) GetPartyHostingLimits() *PartyHostingLimits {
	if x != nil {
		if x, ok := x.Mapping.(*TopologyMapping_PartyHostingLimits); ok {
			return x.PartyHostingLimits
		}
	}
	return nil
}

func (x *TopologyMapping) GetVettedPackages() *VettedPackages {
	if x != nil {
		if x, ok := x.Mapping.(*TopologyMapping_VettedPackages); ok {
			return x.VettedPackages
		}
	}
	return nil
}

func (x *TopologyMapping) GetPartyToParticipant() *PartyToParticipant {
	if x != nil {
		if x, ok := x.Mapping.(*TopologyMapping_PartyToParticipant); ok {
			return x.PartyToParticipant
		}
	}
	return nil
}

func (x *TopologyMapping) GetSynchronizerParametersState() *SynchronizerParametersState {
	if x != nil {
		if x, ok := x.Mapping.(*TopologyMapping_SynchronizerParametersState); ok {
			return x.SynchronizerParametersState
		}
	}
	return nil
}

func (x *TopologyMapping) GetMediatorSynchronizerState() *MediatorSynchronizerState {
	if x != nil {
		if x, ok := x.Mapping.(*TopologyMapping_MediatorSynchronizerState); ok {
			return x.MediatorSynchronizerState
		}
	}
	return nil
}

func (x *TopologyMapping) GetSequencerSynchronizerState() *SequencerSynchronizerState {
	if x != nil {
		if x, ok := x.Mapping.(*TopologyMapping_SequencerSynchronizerState); ok {
			return x.SequencerSynchronizerState
		}
	}
	return nil
}

func (x *TopologyMapping) GetPurgeTopologyTxs() *PurgeTopologyTransaction {
	if x != nil {
		if x, ok := x.Mapping.(*TopologyMapping_PurgeTopologyTxs); ok {
			return x.PurgeTopologyTxs
		}
	}
	return nil
}

func (x *TopologyMapping) GetSequencingDynamicParametersState() *DynamicSequencingParametersState {
	if x != nil {
		if x, ok := x.Mapping.(*TopologyMapping_SequencingDynamicParametersState); ok {
			return x.SequencingDynamicParametersState
		}
	}
	return nil
}

func (x *TopologyMapping) GetPartyToKeyMapping() *PartyToKeyMapping {
	if x != nil {
		if x, ok := x.Mapping.(*TopologyMapping_PartyToKeyMapping); ok {
			return x.PartyToKeyMapping
		}
	}
	return nil
}

type isTopologyMapping_Mapping interface {
	isTopologyMapping_Mapping()
}

type TopologyMapping_NamespaceDelegation struct {
	NamespaceDelegation *NamespaceDelegation `protobuf:"bytes,1,opt,name=namespace_delegation,json=namespaceDelegation,proto3,oneof"`
}

type TopologyMapping_DecentralizedNamespaceDefinition struct {
	DecentralizedNamespaceDefinition *DecentralizedNamespaceDefinition `protobuf:"bytes,3,opt,name=decentralized_namespace_definition,json=decentralizedNamespaceDefinition,proto3,oneof"`
}

type TopologyMapping_OwnerToKeyMapping struct {
	OwnerToKeyMapping *OwnerToKeyMapping `protobuf:"bytes,4,opt,name=owner_to_key_mapping,json=ownerToKeyMapping,proto3,oneof"`
}

type TopologyMapping_SynchronizerTrustCertificate struct {
	SynchronizerTrustCertificate *SynchronizerTrustCertificate `protobuf:"bytes,5,opt,name=synchronizer_trust_certificate,json=synchronizerTrustCertificate,proto3,oneof"`
}

type TopologyMapping_ParticipantPermission struct {
	ParticipantPermission *ParticipantSynchronizerPermission `protobuf:"bytes,6,opt,name=participant_permission,json=participantPermission,proto3,oneof"`
}

type TopologyMapping_PartyHostingLimits struct {
	PartyHostingLimits *PartyHostingLimits `protobuf:"bytes,7,opt,name=party_hosting_limits,json=partyHostingLimits,proto3,oneof"`
}

type TopologyMapping_VettedPackages struct {
	VettedPackages *VettedPackages `protobuf:"bytes,8,opt,name=vetted_packages,json=vettedPackages,proto3,oneof"`
}

type TopologyMapping_PartyToParticipant struct {
	PartyToParticipant *PartyToParticipant `protobuf:"bytes,9,opt,name=party_to_participant,json=partyToParticipant,proto3,oneof"`
}

type TopologyMapping_SynchronizerParametersState struct {
	SynchronizerParametersState *SynchronizerParametersState `protobuf:"bytes,11,opt,name=synchronizer_parameters_state,json=synchronizerParametersState,proto3,oneof"`
}

type TopologyMapping_MediatorSynchronizerState struct {
	MediatorSynchronizerState *MediatorSynchronizerState `protobuf:"bytes,12,opt,name=mediator_synchronizer_state,json=mediatorSynchronizerState,proto3,oneof"`
}

type TopologyMapping_SequencerSynchronizerState struct {
	SequencerSynchronizerState *SequencerSynchronizerState `protobuf:"bytes,13,opt,name=sequencer_synchronizer_state,json=sequencerSynchronizerState,proto3,oneof"`
}

type TopologyMapping_PurgeTopologyTxs struct {
	PurgeTopologyTxs *PurgeTopologyTransaction `protobuf:"bytes,14,opt,name=purge_topology_txs,json=purgeTopologyTxs,proto3,oneof"`
}

type TopologyMapping_SequencingDynamicParametersState struct {
	SequencingDynamicParametersState *DynamicSequencingParametersState `protobuf:"bytes,15,opt,name=sequencing_dynamic_parameters_state,json=sequencingDynamicParametersState,proto3,oneof"`
}

type TopologyMapping_PartyToKeyMapping struct {
	PartyToKeyMapping *PartyToKeyMapping `protobuf:"bytes,16,opt,name=party_to_key_mapping,json=partyToKeyMapping,proto3,oneof"`
}

func (*TopologyMapping_NamespaceDelegation) isTopologyMapping_Mapping() {}

func (*TopologyMapping_DecentralizedNamespaceDefinition) isTopologyMapping_Mapping() {}

func (*TopologyMapping_OwnerToKeyMapping) isTopologyMapping_Mapping() {}

func (*TopologyMapping_SynchronizerTrustCertificate) isTopologyMapping_Mapping() {}

func (*TopologyMapping_ParticipantPermission) isTopologyMapping_Mapping() {}

func (*TopologyMapping_PartyHostingLimits) isTopologyMapping_Mapping() {}

func (*TopologyMapping_VettedPackages) isTopologyMapping_Mapping() {}

func (*TopologyMapping_PartyToParticipant) isTopologyMapping_Mapping() {}

func (*TopologyMapping_SynchronizerParametersState) isTopologyMapping_Mapping() {}

func (*TopologyMapping_MediatorSynchronizerState) isTopologyMapping_Mapping() {}

func (*TopologyMapping_SequencerSynchronizerState) isTopologyMapping_Mapping() {}

func (*TopologyMapping_PurgeTopologyTxs) isTopologyMapping_Mapping() {}

func (*TopologyMapping_SequencingDynamicParametersState) isTopologyMapping_Mapping() {}

func (*TopologyMapping_PartyToKeyMapping) isTopologyMapping_Mapping() {}

type TopologyTransaction struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Operation     Enums_TopologyChangeOp `protobuf:"varint,1,opt,name=operation,proto3,enum=com.digitalasset.canton.protocol.v30.Enums_TopologyChangeOp" json:"operation,omitempty"`
	Serial        uint32                 `protobuf:"varint,2,opt,name=serial,proto3" json:"serial,omitempty"`
	Mapping       *TopologyMapping       `protobuf:"bytes,3,opt,name=mapping,proto3" json:"mapping,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TopologyTransaction) Reset() {
	*x = TopologyTransaction{}
	mi := &file_com_digitalasset_canton_protocol_v30_topology_proto_msgTypes[16]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TopologyTransaction) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TopologyTransaction) ProtoMessage() {}

func (x *TopologyTransaction) ProtoReflect() protoreflect.Message {
	mi := &file_com_digitalasset_canton_protocol_v30_topology_proto_msgTypes[16]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TopologyTransaction.ProtoReflect.Descriptor instead.
func (*TopologyTransaction) Descriptor() ([]byte, []int) {
	return file_com_digitalasset_canton_protocol_v30_topology_proto_rawDescGZIP(), []int{16}
}

func (x *TopologyTransaction) GetOperation() Enums_TopologyChangeOp {
	if x != nil {
		return x.Operation
	}
	return Enums_TOPOLOGY_CHANGE_OP_UNSPECIFIED
}

func (x *TopologyTransaction) GetSerial() uint32 {
	if x != nil {
		return x.Serial
	}
	return 0
}

func (x *TopologyTransaction) GetMapping() *TopologyMapping {
	if x != nil {
		return x.Mapping
	}
	return nil
}

type MultiTransactionSignatures struct {
	state             protoimpl.MessageState `protogen:"open.v1"`
	TransactionHashes [][]byte               `protobuf:"bytes,1,rep,name=transaction_hashes,json=transactionHashes,proto3" json:"transaction_hashes,omitempty"`
	Signatures        []*v30.Signature       `protobuf:"bytes,2,rep,name=signatures,proto3" json:"signatures,omitempty"`
	unknownFields     protoimpl.UnknownFields
	sizeCache         protoimpl.SizeCache
}

func (x *MultiTransactionSignatures) Reset() {
	*x = MultiTransactionSignatures{}
	mi := &file_com_digitalasset_canton_protocol_v30_topology_proto_msgTypes[17]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *MultiTransactionSignatures) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MultiTransactionSignatures) ProtoMessage() {}

func (x *MultiTransactionSignatures) ProtoReflect() protoreflect.Message {
	mi := &file_com_digitalasset_canton_protocol_v30_topology_proto_msgTypes[17]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MultiTransactionSignatures.ProtoReflect.Descriptor instead.
func (*MultiTransactionSignatures) Descriptor() ([]byte, []int) {
	return file_com_digitalasset_canton_protocol_v30_topology_proto_rawDescGZIP(), []int{17}
}

func (x *MultiTransactionSignatures) GetTransactionHashes() [][]byte {
	if x != nil {
		return x.TransactionHashes
	}
	return nil
}

func (x *MultiTransactionSignatures) GetSignatures() []*v30.Signature {
	if x != nil {
		return x.Signatures
	}
	return nil
}

type SignedTopologyTransaction struct {
	state                      protoimpl.MessageState        `protogen:"open.v1"`
	Transaction                []byte                        `protobuf:"bytes,1,opt,name=transaction,proto3" json:"transaction,omitempty"`
	Signatures                 []*v30.Signature              `protobuf:"bytes,2,rep,name=signatures,proto3" json:"signatures,omitempty"`
	Proposal                   bool                          `protobuf:"varint,3,opt,name=proposal,proto3" json:"proposal,omitempty"`
	MultiTransactionSignatures []*MultiTransactionSignatures `protobuf:"bytes,4,rep,name=multi_transaction_signatures,json=multiTransactionSignatures,proto3" json:"multi_transaction_signatures,omitempty"`
	unknownFields              protoimpl.UnknownFields
	sizeCache                  protoimpl.SizeCache
}

func (x *SignedTopologyTransaction) Reset() {
	*x = SignedTopologyTransaction{}
	mi := &file_com_digitalasset_canton_protocol_v30_topology_proto_msgTypes[18]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SignedTopologyTransaction) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SignedTopologyTransaction) ProtoMessage() {}

func (x *SignedTopologyTransaction) ProtoReflect() protoreflect.Message {
	mi := &file_com_digitalasset_canton_protocol_v30_topology_proto_msgTypes[18]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SignedTopologyTransaction.ProtoReflect.Descriptor instead.
func (*SignedTopologyTransaction) Descriptor() ([]byte, []int) {
	return file_com_digitalasset_canton_protocol_v30_topology_proto_rawDescGZIP(), []int{18}
}

func (x *SignedTopologyTransaction) GetTransaction() []byte {
	if x != nil {
		return x.Transaction
	}
	return nil
}

func (x *SignedTopologyTransaction) GetSignatures() []*v30.Signature {
	if x != nil {
		return x.Signatures
	}
	return nil
}

func (x *SignedTopologyTransaction) GetProposal() bool {
	if x != nil {
		return x.Proposal
	}
	return false
}

func (x *SignedTopologyTransaction) GetMultiTransactionSignatures() []*MultiTransactionSignatures {
	if x != nil {
		return x.MultiTransactionSignatures
	}
	return nil
}

type SignedTopologyTransactions struct {
	state             protoimpl.MessageState `protogen:"open.v1"`
	SignedTransaction [][]byte               `protobuf:"bytes,1,rep,name=signed_transaction,json=signedTransaction,proto3" json:"signed_transaction,omitempty"`
	unknownFields     protoimpl.UnknownFields
	sizeCache         protoimpl.SizeCache
}

func (x *SignedTopologyTransactions) Reset() {
	*x = SignedTopologyTransactions{}
	mi := &file_com_digitalasset_canton_protocol_v30_topology_proto_msgTypes[19]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SignedTopologyTransactions) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SignedTopologyTransactions) ProtoMessage() {}

func (x *SignedTopologyTransactions) ProtoReflect() protoreflect.Message {
	mi := &file_com_digitalasset_canton_protocol_v30_topology_proto_msgTypes[19]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SignedTopologyTransactions.ProtoReflect.Descriptor instead.
func (*SignedTopologyTransactions) Descriptor() ([]byte, []int) {
	return file_com_digitalasset_canton_protocol_v30_topology_proto_rawDescGZIP(), []int{19}
}

func (x *SignedTopologyTransactions) GetSignedTransaction() [][]byte {
	if x != nil {
		return x.SignedTransaction
	}
	return nil
}

type TopologyTransactionsBroadcast struct {
	state              protoimpl.MessageState      `protogen:"open.v1"`
	SynchronizerId     string                      `protobuf:"bytes,1,opt,name=synchronizer_id,json=synchronizerId,proto3" json:"synchronizer_id,omitempty"`
	SignedTransactions *SignedTopologyTransactions `protobuf:"bytes,2,opt,name=signed_transactions,json=signedTransactions,proto3" json:"signed_transactions,omitempty"`
	unknownFields      protoimpl.UnknownFields
	sizeCache          protoimpl.SizeCache
}

func (x *TopologyTransactionsBroadcast) Reset() {
	*x = TopologyTransactionsBroadcast{}
	mi := &file_com_digitalasset_canton_protocol_v30_topology_proto_msgTypes[20]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TopologyTransactionsBroadcast) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TopologyTransactionsBroadcast) ProtoMessage() {}

func (x *TopologyTransactionsBroadcast) ProtoReflect() protoreflect.Message {
	mi := &file_com_digitalasset_canton_protocol_v30_topology_proto_msgTypes[20]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TopologyTransactionsBroadcast.ProtoReflect.Descriptor instead.
func (*TopologyTransactionsBroadcast) Descriptor() ([]byte, []int) {
	return file_com_digitalasset_canton_protocol_v30_topology_proto_rawDescGZIP(), []int{20}
}

func (x *TopologyTransactionsBroadcast) GetSynchronizerId() string {
	if x != nil {
		return x.SynchronizerId
	}
	return ""
}

func (x *TopologyTransactionsBroadcast) GetSignedTransactions() *SignedTopologyTransactions {
	if x != nil {
		return x.SignedTransactions
	}
	return nil
}

type NamespaceDelegation_CanSignAllMappings struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *NamespaceDelegation_CanSignAllMappings) Reset() {
	*x = NamespaceDelegation_CanSignAllMappings{}
	mi := &file_com_digitalasset_canton_protocol_v30_topology_proto_msgTypes[21]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *NamespaceDelegation_CanSignAllMappings) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NamespaceDelegation_CanSignAllMappings) ProtoMessage() {}

func (x *NamespaceDelegation_CanSignAllMappings) ProtoReflect() protoreflect.Message {
	mi := &file_com_digitalasset_canton_protocol_v30_topology_proto_msgTypes[21]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NamespaceDelegation_CanSignAllMappings.ProtoReflect.Descriptor instead.
func (*NamespaceDelegation_CanSignAllMappings) Descriptor() ([]byte, []int) {
	return file_com_digitalasset_canton_protocol_v30_topology_proto_rawDescGZIP(), []int{1, 0}
}

type NamespaceDelegation_CanSignAllButNamespaceDelegations struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *NamespaceDelegation_CanSignAllButNamespaceDelegations) Reset() {
	*x = NamespaceDelegation_CanSignAllButNamespaceDelegations{}
	mi := &file_com_digitalasset_canton_protocol_v30_topology_proto_msgTypes[22]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *NamespaceDelegation_CanSignAllButNamespaceDelegations) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NamespaceDelegation_CanSignAllButNamespaceDelegations) ProtoMessage() {}

func (x *NamespaceDelegation_CanSignAllButNamespaceDelegations) ProtoReflect() protoreflect.Message {
	mi := &file_com_digitalasset_canton_protocol_v30_topology_proto_msgTypes[22]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NamespaceDelegation_CanSignAllButNamespaceDelegations.ProtoReflect.Descriptor instead.
func (*NamespaceDelegation_CanSignAllButNamespaceDelegations) Descriptor() ([]byte, []int) {
	return file_com_digitalasset_canton_protocol_v30_topology_proto_rawDescGZIP(), []int{1, 1}
}

type NamespaceDelegation_CanSignSpecificMappings struct {
	state         protoimpl.MessageState      `protogen:"open.v1"`
	Mappings      []Enums_TopologyMappingCode `protobuf:"varint,1,rep,packed,name=mappings,proto3,enum=com.digitalasset.canton.protocol.v30.Enums_TopologyMappingCode" json:"mappings,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *NamespaceDelegation_CanSignSpecificMappings) Reset() {
	*x = NamespaceDelegation_CanSignSpecificMappings{}
	mi := &file_com_digitalasset_canton_protocol_v30_topology_proto_msgTypes[23]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *NamespaceDelegation_CanSignSpecificMappings) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NamespaceDelegation_CanSignSpecificMappings) ProtoMessage() {}

func (x *NamespaceDelegation_CanSignSpecificMappings) ProtoReflect() protoreflect.Message {
	mi := &file_com_digitalasset_canton_protocol_v30_topology_proto_msgTypes[23]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NamespaceDelegation_CanSignSpecificMappings.ProtoReflect.Descriptor instead.
func (*NamespaceDelegation_CanSignSpecificMappings) Descriptor() ([]byte, []int) {
	return file_com_digitalasset_canton_protocol_v30_topology_proto_rawDescGZIP(), []int{1, 2}
}

func (x *NamespaceDelegation_CanSignSpecificMappings) GetMappings() []Enums_TopologyMappingCode {
	if x != nil {
		return x.Mappings
	}
	return nil
}

type VettedPackages_VettedPackage struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	PackageId     string                 `protobuf:"bytes,1,opt,name=package_id,json=packageId,proto3" json:"package_id,omitempty"`
	ValidFrom     *timestamppb.Timestamp `protobuf:"bytes,2,opt,name=valid_from,json=validFrom,proto3" json:"valid_from,omitempty"`
	ValidUntil    *timestamppb.Timestamp `protobuf:"bytes,3,opt,name=valid_until,json=validUntil,proto3" json:"valid_until,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *VettedPackages_VettedPackage) Reset() {
	*x = VettedPackages_VettedPackage{}
	mi := &file_com_digitalasset_canton_protocol_v30_topology_proto_msgTypes[24]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *VettedPackages_VettedPackage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VettedPackages_VettedPackage) ProtoMessage() {}

func (x *VettedPackages_VettedPackage) ProtoReflect() protoreflect.Message {
	mi := &file_com_digitalasset_canton_protocol_v30_topology_proto_msgTypes[24]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VettedPackages_VettedPackage.ProtoReflect.Descriptor instead.
func (*VettedPackages_VettedPackage) Descriptor() ([]byte, []int) {
	return file_com_digitalasset_canton_protocol_v30_topology_proto_rawDescGZIP(), []int{8, 0}
}

func (x *VettedPackages_VettedPackage) GetPackageId() string {
	if x != nil {
		return x.PackageId
	}
	return ""
}

func (x *VettedPackages_VettedPackage) GetValidFrom() *timestamppb.Timestamp {
	if x != nil {
		return x.ValidFrom
	}
	return nil
}

func (x *VettedPackages_VettedPackage) GetValidUntil() *timestamppb.Timestamp {
	if x != nil {
		return x.ValidUntil
	}
	return nil
}

type PartyToParticipant_HostingParticipant struct {
	state          protoimpl.MessageState      `protogen:"open.v1"`
	ParticipantUid string                      `protobuf:"bytes,1,opt,name=participant_uid,json=participantUid,proto3" json:"participant_uid,omitempty"`
	Permission     Enums_ParticipantPermission `protobuf:"varint,2,opt,name=permission,proto3,enum=com.digitalasset.canton.protocol.v30.Enums_ParticipantPermission" json:"permission,omitempty"`
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *PartyToParticipant_HostingParticipant) Reset() {
	*x = PartyToParticipant_HostingParticipant{}
	mi := &file_com_digitalasset_canton_protocol_v30_topology_proto_msgTypes[25]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PartyToParticipant_HostingParticipant) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PartyToParticipant_HostingParticipant) ProtoMessage() {}

func (x *PartyToParticipant_HostingParticipant) ProtoReflect() protoreflect.Message {
	mi := &file_com_digitalasset_canton_protocol_v30_topology_proto_msgTypes[25]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PartyToParticipant_HostingParticipant.ProtoReflect.Descriptor instead.
func (*PartyToParticipant_HostingParticipant) Descriptor() ([]byte, []int) {
	return file_com_digitalasset_canton_protocol_v30_topology_proto_rawDescGZIP(), []int{9, 0}
}

func (x *PartyToParticipant_HostingParticipant) GetParticipantUid() string {
	if x != nil {
		return x.ParticipantUid
	}
	return ""
}

func (x *PartyToParticipant_HostingParticipant) GetPermission() Enums_ParticipantPermission {
	if x != nil {
		return x.Permission
	}
	return Enums_PARTICIPANT_PERMISSION_UNSPECIFIED
}

var File_com_digitalasset_canton_protocol_v30_topology_proto protoreflect.FileDescriptor

const file_com_digitalasset_canton_protocol_v30_topology_proto_rawDesc = "" +
	"\n" +
	"3com/digitalasset/canton/protocol/v30/topology.proto\x12$com.digitalasset.canton.protocol.v30\x1a/com/digitalasset/canton/crypto/v30/crypto.proto\x1a@com/digitalasset/canton/protocol/v30/sequencing_parameters.proto\x1aBcom/digitalasset/canton/protocol/v30/synchronizer_parameters.proto\x1a\x1fgoogle/protobuf/timestamp.proto\"\xed\b\n" +
	"\x05Enums\"y\n" +
	"\x10TopologyChangeOp\x12\"\n" +
	"\x1eTOPOLOGY_CHANGE_OP_UNSPECIFIED\x10\x00\x12\"\n" +
	"\x1eTOPOLOGY_CHANGE_OP_ADD_REPLACE\x10\x01\x12\x1d\n" +
	"\x19TOPOLOGY_CHANGE_OP_REMOVE\x10\x02\"\xb7\x01\n" +
	"\x15ParticipantPermission\x12&\n" +
	"\"PARTICIPANT_PERMISSION_UNSPECIFIED\x10\x00\x12%\n" +
	"!PARTICIPANT_PERMISSION_SUBMISSION\x10\x01\x12'\n" +
	"#PARTICIPANT_PERMISSION_CONFIRMATION\x10\x02\x12&\n" +
	"\"PARTICIPANT_PERMISSION_OBSERVATION\x10\x03\"\xae\x06\n" +
	"\x13TopologyMappingCode\x12%\n" +
	"!TOPOLOGY_MAPPING_CODE_UNSPECIFIED\x10\x00\x12.\n" +
	"*TOPOLOGY_MAPPING_CODE_NAMESPACE_DELEGATION\x10\x01\x12<\n" +
	"8TOPOLOGY_MAPPING_CODE_DECENTRALIZED_NAMESPACE_DEFINITION\x10\x03\x12.\n" +
	"*TOPOLOGY_MAPPING_CODE_OWNER_TO_KEY_MAPPING\x10\x04\x128\n" +
	"4TOPOLOGY_MAPPING_CODE_SYNCHRONIZER_TRUST_CERTIFICATE\x10\x05\x120\n" +
	",TOPOLOGY_MAPPING_CODE_PARTICIPANT_PERMISSION\x10\x06\x12.\n" +
	"*TOPOLOGY_MAPPING_CODE_PARTY_HOSTING_LIMITS\x10\a\x12)\n" +
	"%TOPOLOGY_MAPPING_CODE_VETTED_PACKAGES\x10\b\x12.\n" +
	"*TOPOLOGY_MAPPING_CODE_PARTY_TO_PARTICIPANT\x10\t\x127\n" +
	"3TOPOLOGY_MAPPING_CODE_SYNCHRONIZER_PARAMETERS_STATE\x10\v\x125\n" +
	"1TOPOLOGY_MAPPING_CODE_MEDIATOR_SYNCHRONIZER_STATE\x10\f\x126\n" +
	"2TOPOLOGY_MAPPING_CODE_SEQUENCER_SYNCHRONIZER_STATE\x10\r\x12,\n" +
	"(TOPOLOGY_MAPPING_CODE_PURGE_TOPOLOGY_TXS\x10\x0f\x12=\n" +
	"9TOPOLOGY_MAPPING_CODE_SEQUENCING_DYNAMIC_PARAMETERS_STATE\x10\x11\x12.\n" +
	"*TOPOLOGY_MAPPING_CODE_PARTY_TO_KEY_MAPPING\x10\x12\"\x04\b\x02\x10\x02\"\x04\b\n" +
	"\x10\n" +
	"\"\x04\b\x0e\x10\x0e\"\x04\b\x10\x10\x10\"\xc4\x06\n" +
	"\x13NamespaceDelegation\x12\x1c\n" +
	"\tnamespace\x18\x01 \x01(\tR\tnamespace\x12S\n" +
	"\n" +
	"target_key\x18\x02 \x01(\v24.com.digitalasset.canton.crypto.v30.SigningPublicKeyR\ttargetKey\x120\n" +
	"\x12is_root_delegation\x18\x03 \x01(\bB\x02\x18\x01R\x10isRootDelegation\x12\x81\x01\n" +
	"\x15can_sign_all_mappings\x18\x04 \x01(\v2L.com.digitalasset.canton.protocol.v30.NamespaceDelegation.CanSignAllMappingsH\x00R\x12canSignAllMappings\x12\xb0\x01\n" +
	"&can_sign_all_but_namespace_delegations\x18\x05 \x01(\v2[.com.digitalasset.canton.protocol.v30.NamespaceDelegation.CanSignAllButNamespaceDelegationsH\x00R!canSignAllButNamespaceDelegations\x12\x8e\x01\n" +
	"\x19can_sign_specific_mapings\x18\x06 \x01(\v2Q.com.digitalasset.canton.protocol.v30.NamespaceDelegation.CanSignSpecificMappingsH\x00R\x16canSignSpecificMapings\x1a\x14\n" +
	"\x12CanSignAllMappings\x1a#\n" +
	"!CanSignAllButNamespaceDelegations\x1av\n" +
	"\x17CanSignSpecificMappings\x12[\n" +
	"\bmappings\x18\x01 \x03(\x0e2?.com.digitalasset.canton.protocol.v30.Enums.TopologyMappingCodeR\bmappingsB\r\n" +
	"\vrestriction\"\x91\x01\n" +
	" DecentralizedNamespaceDefinition\x127\n" +
	"\x17decentralized_namespace\x18\x01 \x01(\tR\x16decentralizedNamespace\x12\x1c\n" +
	"\tthreshold\x18\x02 \x01(\x05R\tthreshold\x12\x16\n" +
	"\x06owners\x18\x03 \x03(\tR\x06owners\"\x81\x01\n" +
	"\x11OwnerToKeyMapping\x12\x16\n" +
	"\x06member\x18\x01 \x01(\tR\x06member\x12N\n" +
	"\vpublic_keys\x18\x02 \x03(\v2-.com.digitalasset.canton.crypto.v30.PublicKeyR\n" +
	"publicKeysJ\x04\b\x03\x10\x04\"\xa6\x01\n" +
	"\x11PartyToKeyMapping\x12\x14\n" +
	"\x05party\x18\x01 \x01(\tR\x05party\x12\x1c\n" +
	"\tthreshold\x18\x03 \x01(\rR\tthreshold\x12W\n" +
	"\fsigning_keys\x18\x04 \x03(\v24.com.digitalasset.canton.crypto.v30.SigningPublicKeyR\vsigningKeysJ\x04\b\x02\x10\x03\"|\n" +
	"\x1cSynchronizerTrustCertificate\x12'\n" +
	"\x0fparticipant_uid\x18\x01 \x01(\tR\x0eparticipantUid\x12'\n" +
	"\x0fsynchronizer_id\x18\x02 \x01(\tR\x0esynchronizerIdJ\x04\b\x03\x10\x04J\x04\b\x04\x10\x05\"\xeb\x02\n" +
	"!ParticipantSynchronizerPermission\x12'\n" +
	"\x0fsynchronizer_id\x18\x01 \x01(\tR\x0esynchronizerId\x12'\n" +
	"\x0fparticipant_uid\x18\x02 \x01(\tR\x0eparticipantUid\x12a\n" +
	"\n" +
	"permission\x18\x03 \x01(\x0e2A.com.digitalasset.canton.protocol.v30.Enums.ParticipantPermissionR\n" +
	"permission\x12[\n" +
	"\x06limits\x18\x04 \x01(\v2C.com.digitalasset.canton.protocol.v30.ParticipantSynchronizerLimitsR\x06limits\x12$\n" +
	"\vlogin_after\x18\x05 \x01(\x03H\x00R\n" +
	"loginAfter\x88\x01\x01B\x0e\n" +
	"\f_login_after\"Y\n" +
	"\x12PartyHostingLimits\x12'\n" +
	"\x0fsynchronizer_id\x18\x01 \x01(\tR\x0esynchronizerId\x12\x14\n" +
	"\x05party\x18\x02 \x01(\tR\x05partyJ\x04\b\x03\x10\x04\"\xed\x02\n" +
	"\x0eVettedPackages\x12'\n" +
	"\x0fparticipant_uid\x18\x01 \x01(\tR\x0eparticipantUid\x12#\n" +
	"\vpackage_ids\x18\x02 \x03(\tB\x02\x18\x01R\n" +
	"packageIds\x12^\n" +
	"\bpackages\x18\x04 \x03(\v2B.com.digitalasset.canton.protocol.v30.VettedPackages.VettedPackageR\bpackages\x1a\xa6\x01\n" +
	"\rVettedPackage\x12\x1d\n" +
	"\n" +
	"package_id\x18\x01 \x01(\tR\tpackageId\x129\n" +
	"\n" +
	"valid_from\x18\x02 \x01(\v2\x1a.google.protobuf.TimestampR\tvalidFrom\x12;\n" +
	"\vvalid_until\x18\x03 \x01(\v2\x1a.google.protobuf.TimestampR\n" +
	"validUntilJ\x04\b\x03\x10\x04\"\xe8\x02\n" +
	"\x12PartyToParticipant\x12\x14\n" +
	"\x05party\x18\x01 \x01(\tR\x05party\x12\x1c\n" +
	"\tthreshold\x18\x02 \x01(\rR\tthreshold\x12o\n" +
	"\fparticipants\x18\x03 \x03(\v2K.com.digitalasset.canton.protocol.v30.PartyToParticipant.HostingParticipantR\fparticipants\x1a\xa0\x01\n" +
	"\x12HostingParticipant\x12'\n" +
	"\x0fparticipant_uid\x18\x01 \x01(\tR\x0eparticipantUid\x12a\n" +
	"\n" +
	"permission\x18\x02 \x01(\x0e2A.com.digitalasset.canton.protocol.v30.Enums.ParticipantPermissionR\n" +
	"permissionJ\x04\b\x04\x10\x05J\x04\b\x05\x10\x06\"\xc4\x01\n" +
	"\x1bSynchronizerParametersState\x12'\n" +
	"\x0fsynchronizer_id\x18\x01 \x01(\tR\x0esynchronizerId\x12|\n" +
	"\x17synchronizer_parameters\x18\x02 \x01(\v2C.com.digitalasset.canton.protocol.v30.DynamicSynchronizerParametersR\x16synchronizerParameters\"\xc3\x01\n" +
	" DynamicSequencingParametersState\x12'\n" +
	"\x0fsynchronizer_id\x18\x01 \x01(\tR\x0esynchronizerId\x12v\n" +
	"\x15sequencing_parameters\x18\x02 \x01(\v2A.com.digitalasset.canton.protocol.v30.DynamicSequencingParametersR\x14sequencingParameters\"\xae\x01\n" +
	"\x19MediatorSynchronizerState\x12'\n" +
	"\x0fsynchronizer_id\x18\x01 \x01(\tR\x0esynchronizerId\x12\x14\n" +
	"\x05group\x18\x02 \x01(\rR\x05group\x12\x1c\n" +
	"\tthreshold\x18\x03 \x01(\rR\tthreshold\x12\x16\n" +
	"\x06active\x18\x04 \x03(\tR\x06active\x12\x1c\n" +
	"\tobservers\x18\x05 \x03(\tR\tobservers\"\x99\x01\n" +
	"\x1aSequencerSynchronizerState\x12'\n" +
	"\x0fsynchronizer_id\x18\x01 \x01(\tR\x0esynchronizerId\x12\x1c\n" +
	"\tthreshold\x18\x02 \x01(\rR\tthreshold\x12\x16\n" +
	"\x06active\x18\x03 \x03(\tR\x06active\x12\x1c\n" +
	"\tobservers\x18\x04 \x03(\tR\tobservers\"\x96\x01\n" +
	"\x18PurgeTopologyTransaction\x12'\n" +
	"\x0fsynchronizer_id\x18\x01 \x01(\tR\x0esynchronizerId\x12Q\n" +
	"\bmappings\x18\x02 \x03(\v25.com.digitalasset.canton.protocol.v30.TopologyMappingR\bmappings\"\xf5\r\n" +
	"\x0fTopologyMapping\x12n\n" +
	"\x14namespace_delegation\x18\x01 \x01(\v29.com.digitalasset.canton.protocol.v30.NamespaceDelegationH\x00R\x13namespaceDelegation\x12\x96\x01\n" +
	"\"decentralized_namespace_definition\x18\x03 \x01(\v2F.com.digitalasset.canton.protocol.v30.DecentralizedNamespaceDefinitionH\x00R decentralizedNamespaceDefinition\x12j\n" +
	"\x14owner_to_key_mapping\x18\x04 \x01(\v27.com.digitalasset.canton.protocol.v30.OwnerToKeyMappingH\x00R\x11ownerToKeyMapping\x12\x8a\x01\n" +
	"\x1esynchronizer_trust_certificate\x18\x05 \x01(\v2B.com.digitalasset.canton.protocol.v30.SynchronizerTrustCertificateH\x00R\x1csynchronizerTrustCertificate\x12\x80\x01\n" +
	"\x16participant_permission\x18\x06 \x01(\v2G.com.digitalasset.canton.protocol.v30.ParticipantSynchronizerPermissionH\x00R\x15participantPermission\x12l\n" +
	"\x14party_hosting_limits\x18\a \x01(\v28.com.digitalasset.canton.protocol.v30.PartyHostingLimitsH\x00R\x12partyHostingLimits\x12_\n" +
	"\x0fvetted_packages\x18\b \x01(\v24.com.digitalasset.canton.protocol.v30.VettedPackagesH\x00R\x0evettedPackages\x12l\n" +
	"\x14party_to_participant\x18\t \x01(\v28.com.digitalasset.canton.protocol.v30.PartyToParticipantH\x00R\x12partyToParticipant\x12\x87\x01\n" +
	"\x1dsynchronizer_parameters_state\x18\v \x01(\v2A.com.digitalasset.canton.protocol.v30.SynchronizerParametersStateH\x00R\x1bsynchronizerParametersState\x12\x81\x01\n" +
	"\x1bmediator_synchronizer_state\x18\f \x01(\v2?.com.digitalasset.canton.protocol.v30.MediatorSynchronizerStateH\x00R\x19mediatorSynchronizerState\x12\x84\x01\n" +
	"\x1csequencer_synchronizer_state\x18\r \x01(\v2@.com.digitalasset.canton.protocol.v30.SequencerSynchronizerStateH\x00R\x1asequencerSynchronizerState\x12n\n" +
	"\x12purge_topology_txs\x18\x0e \x01(\v2>.com.digitalasset.canton.protocol.v30.PurgeTopologyTransactionH\x00R\x10purgeTopologyTxs\x12\x97\x01\n" +
	"#sequencing_dynamic_parameters_state\x18\x0f \x01(\v2F.com.digitalasset.canton.protocol.v30.DynamicSequencingParametersStateH\x00R sequencingDynamicParametersState\x12j\n" +
	"\x14party_to_key_mapping\x18\x10 \x01(\v27.com.digitalasset.canton.protocol.v30.PartyToKeyMappingH\x00R\x11partyToKeyMappingB\t\n" +
	"\amappingJ\x04\b\x02\x10\x03J\x04\b\n" +
	"\x10\v\"\xda\x01\n" +
	"\x13TopologyTransaction\x12Z\n" +
	"\toperation\x18\x01 \x01(\x0e2<.com.digitalasset.canton.protocol.v30.Enums.TopologyChangeOpR\toperation\x12\x16\n" +
	"\x06serial\x18\x02 \x01(\rR\x06serial\x12O\n" +
	"\amapping\x18\x03 \x01(\v25.com.digitalasset.canton.protocol.v30.TopologyMappingR\amapping\"\x9a\x01\n" +
	"\x1aMultiTransactionSignatures\x12-\n" +
	"\x12transaction_hashes\x18\x01 \x03(\fR\x11transactionHashes\x12M\n" +
	"\n" +
	"signatures\x18\x02 \x03(\v2-.com.digitalasset.canton.crypto.v30.SignatureR\n" +
	"signatures\"\xad\x02\n" +
	"\x19SignedTopologyTransaction\x12 \n" +
	"\vtransaction\x18\x01 \x01(\fR\vtransaction\x12M\n" +
	"\n" +
	"signatures\x18\x02 \x03(\v2-.com.digitalasset.canton.crypto.v30.SignatureR\n" +
	"signatures\x12\x1a\n" +
	"\bproposal\x18\x03 \x01(\bR\bproposal\x12\x82\x01\n" +
	"\x1cmulti_transaction_signatures\x18\x04 \x03(\v2@.com.digitalasset.canton.protocol.v30.MultiTransactionSignaturesR\x1amultiTransactionSignatures\"K\n" +
	"\x1aSignedTopologyTransactions\x12-\n" +
	"\x12signed_transaction\x18\x01 \x03(\fR\x11signedTransaction\"\xbb\x01\n" +
	"\x1dTopologyTransactionsBroadcast\x12'\n" +
	"\x0fsynchronizer_id\x18\x01 \x01(\tR\x0esynchronizerId\x12q\n" +
	"\x13signed_transactions\x18\x02 \x01(\v2@.com.digitalasset.canton.protocol.v30.SignedTopologyTransactionsR\x12signedTransactionsBUZSgithub.com/digital-asset/dazl-client/v8/go/api/com/digitalasset/canton/protocol/v30b\x06proto3"

var (
	file_com_digitalasset_canton_protocol_v30_topology_proto_rawDescOnce sync.Once
	file_com_digitalasset_canton_protocol_v30_topology_proto_rawDescData []byte
)

func file_com_digitalasset_canton_protocol_v30_topology_proto_rawDescGZIP() []byte {
	file_com_digitalasset_canton_protocol_v30_topology_proto_rawDescOnce.Do(func() {
		file_com_digitalasset_canton_protocol_v30_topology_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_com_digitalasset_canton_protocol_v30_topology_proto_rawDesc), len(file_com_digitalasset_canton_protocol_v30_topology_proto_rawDesc)))
	})
	return file_com_digitalasset_canton_protocol_v30_topology_proto_rawDescData
}

var file_com_digitalasset_canton_protocol_v30_topology_proto_enumTypes = make([]protoimpl.EnumInfo, 3)
var file_com_digitalasset_canton_protocol_v30_topology_proto_msgTypes = make([]protoimpl.MessageInfo, 26)
var file_com_digitalasset_canton_protocol_v30_topology_proto_goTypes = []any{
	(Enums_TopologyChangeOp)(0),                                   // 0: com.digitalasset.canton.protocol.v30.Enums.TopologyChangeOp
	(Enums_ParticipantPermission)(0),                              // 1: com.digitalasset.canton.protocol.v30.Enums.ParticipantPermission
	(Enums_TopologyMappingCode)(0),                                // 2: com.digitalasset.canton.protocol.v30.Enums.TopologyMappingCode
	(*Enums)(nil),                                                 // 3: com.digitalasset.canton.protocol.v30.Enums
	(*NamespaceDelegation)(nil),                                   // 4: com.digitalasset.canton.protocol.v30.NamespaceDelegation
	(*DecentralizedNamespaceDefinition)(nil),                      // 5: com.digitalasset.canton.protocol.v30.DecentralizedNamespaceDefinition
	(*OwnerToKeyMapping)(nil),                                     // 6: com.digitalasset.canton.protocol.v30.OwnerToKeyMapping
	(*PartyToKeyMapping)(nil),                                     // 7: com.digitalasset.canton.protocol.v30.PartyToKeyMapping
	(*SynchronizerTrustCertificate)(nil),                          // 8: com.digitalasset.canton.protocol.v30.SynchronizerTrustCertificate
	(*ParticipantSynchronizerPermission)(nil),                     // 9: com.digitalasset.canton.protocol.v30.ParticipantSynchronizerPermission
	(*PartyHostingLimits)(nil),                                    // 10: com.digitalasset.canton.protocol.v30.PartyHostingLimits
	(*VettedPackages)(nil),                                        // 11: com.digitalasset.canton.protocol.v30.VettedPackages
	(*PartyToParticipant)(nil),                                    // 12: com.digitalasset.canton.protocol.v30.PartyToParticipant
	(*SynchronizerParametersState)(nil),                           // 13: com.digitalasset.canton.protocol.v30.SynchronizerParametersState
	(*DynamicSequencingParametersState)(nil),                      // 14: com.digitalasset.canton.protocol.v30.DynamicSequencingParametersState
	(*MediatorSynchronizerState)(nil),                             // 15: com.digitalasset.canton.protocol.v30.MediatorSynchronizerState
	(*SequencerSynchronizerState)(nil),                            // 16: com.digitalasset.canton.protocol.v30.SequencerSynchronizerState
	(*PurgeTopologyTransaction)(nil),                              // 17: com.digitalasset.canton.protocol.v30.PurgeTopologyTransaction
	(*TopologyMapping)(nil),                                       // 18: com.digitalasset.canton.protocol.v30.TopologyMapping
	(*TopologyTransaction)(nil),                                   // 19: com.digitalasset.canton.protocol.v30.TopologyTransaction
	(*MultiTransactionSignatures)(nil),                            // 20: com.digitalasset.canton.protocol.v30.MultiTransactionSignatures
	(*SignedTopologyTransaction)(nil),                             // 21: com.digitalasset.canton.protocol.v30.SignedTopologyTransaction
	(*SignedTopologyTransactions)(nil),                            // 22: com.digitalasset.canton.protocol.v30.SignedTopologyTransactions
	(*TopologyTransactionsBroadcast)(nil),                         // 23: com.digitalasset.canton.protocol.v30.TopologyTransactionsBroadcast
	(*NamespaceDelegation_CanSignAllMappings)(nil),                // 24: com.digitalasset.canton.protocol.v30.NamespaceDelegation.CanSignAllMappings
	(*NamespaceDelegation_CanSignAllButNamespaceDelegations)(nil), // 25: com.digitalasset.canton.protocol.v30.NamespaceDelegation.CanSignAllButNamespaceDelegations
	(*NamespaceDelegation_CanSignSpecificMappings)(nil),           // 26: com.digitalasset.canton.protocol.v30.NamespaceDelegation.CanSignSpecificMappings
	(*VettedPackages_VettedPackage)(nil),                          // 27: com.digitalasset.canton.protocol.v30.VettedPackages.VettedPackage
	(*PartyToParticipant_HostingParticipant)(nil),                 // 28: com.digitalasset.canton.protocol.v30.PartyToParticipant.HostingParticipant
	(*v30.SigningPublicKey)(nil),                                  // 29: com.digitalasset.canton.crypto.v30.SigningPublicKey
	(*v30.PublicKey)(nil),                                         // 30: com.digitalasset.canton.crypto.v30.PublicKey
	(*ParticipantSynchronizerLimits)(nil),                         // 31: com.digitalasset.canton.protocol.v30.ParticipantSynchronizerLimits
	(*DynamicSynchronizerParameters)(nil),                         // 32: com.digitalasset.canton.protocol.v30.DynamicSynchronizerParameters
	(*DynamicSequencingParameters)(nil),                           // 33: com.digitalasset.canton.protocol.v30.DynamicSequencingParameters
	(*v30.Signature)(nil),                                         // 34: com.digitalasset.canton.crypto.v30.Signature
	(*timestamppb.Timestamp)(nil),                                 // 35: google.protobuf.Timestamp
}
var file_com_digitalasset_canton_protocol_v30_topology_proto_depIdxs = []int32{
	29, // 0: com.digitalasset.canton.protocol.v30.NamespaceDelegation.target_key:type_name -> com.digitalasset.canton.crypto.v30.SigningPublicKey
	24, // 1: com.digitalasset.canton.protocol.v30.NamespaceDelegation.can_sign_all_mappings:type_name -> com.digitalasset.canton.protocol.v30.NamespaceDelegation.CanSignAllMappings
	25, // 2: com.digitalasset.canton.protocol.v30.NamespaceDelegation.can_sign_all_but_namespace_delegations:type_name -> com.digitalasset.canton.protocol.v30.NamespaceDelegation.CanSignAllButNamespaceDelegations
	26, // 3: com.digitalasset.canton.protocol.v30.NamespaceDelegation.can_sign_specific_mapings:type_name -> com.digitalasset.canton.protocol.v30.NamespaceDelegation.CanSignSpecificMappings
	30, // 4: com.digitalasset.canton.protocol.v30.OwnerToKeyMapping.public_keys:type_name -> com.digitalasset.canton.crypto.v30.PublicKey
	29, // 5: com.digitalasset.canton.protocol.v30.PartyToKeyMapping.signing_keys:type_name -> com.digitalasset.canton.crypto.v30.SigningPublicKey
	1,  // 6: com.digitalasset.canton.protocol.v30.ParticipantSynchronizerPermission.permission:type_name -> com.digitalasset.canton.protocol.v30.Enums.ParticipantPermission
	31, // 7: com.digitalasset.canton.protocol.v30.ParticipantSynchronizerPermission.limits:type_name -> com.digitalasset.canton.protocol.v30.ParticipantSynchronizerLimits
	27, // 8: com.digitalasset.canton.protocol.v30.VettedPackages.packages:type_name -> com.digitalasset.canton.protocol.v30.VettedPackages.VettedPackage
	28, // 9: com.digitalasset.canton.protocol.v30.PartyToParticipant.participants:type_name -> com.digitalasset.canton.protocol.v30.PartyToParticipant.HostingParticipant
	32, // 10: com.digitalasset.canton.protocol.v30.SynchronizerParametersState.synchronizer_parameters:type_name -> com.digitalasset.canton.protocol.v30.DynamicSynchronizerParameters
	33, // 11: com.digitalasset.canton.protocol.v30.DynamicSequencingParametersState.sequencing_parameters:type_name -> com.digitalasset.canton.protocol.v30.DynamicSequencingParameters
	18, // 12: com.digitalasset.canton.protocol.v30.PurgeTopologyTransaction.mappings:type_name -> com.digitalasset.canton.protocol.v30.TopologyMapping
	4,  // 13: com.digitalasset.canton.protocol.v30.TopologyMapping.namespace_delegation:type_name -> com.digitalasset.canton.protocol.v30.NamespaceDelegation
	5,  // 14: com.digitalasset.canton.protocol.v30.TopologyMapping.decentralized_namespace_definition:type_name -> com.digitalasset.canton.protocol.v30.DecentralizedNamespaceDefinition
	6,  // 15: com.digitalasset.canton.protocol.v30.TopologyMapping.owner_to_key_mapping:type_name -> com.digitalasset.canton.protocol.v30.OwnerToKeyMapping
	8,  // 16: com.digitalasset.canton.protocol.v30.TopologyMapping.synchronizer_trust_certificate:type_name -> com.digitalasset.canton.protocol.v30.SynchronizerTrustCertificate
	9,  // 17: com.digitalasset.canton.protocol.v30.TopologyMapping.participant_permission:type_name -> com.digitalasset.canton.protocol.v30.ParticipantSynchronizerPermission
	10, // 18: com.digitalasset.canton.protocol.v30.TopologyMapping.party_hosting_limits:type_name -> com.digitalasset.canton.protocol.v30.PartyHostingLimits
	11, // 19: com.digitalasset.canton.protocol.v30.TopologyMapping.vetted_packages:type_name -> com.digitalasset.canton.protocol.v30.VettedPackages
	12, // 20: com.digitalasset.canton.protocol.v30.TopologyMapping.party_to_participant:type_name -> com.digitalasset.canton.protocol.v30.PartyToParticipant
	13, // 21: com.digitalasset.canton.protocol.v30.TopologyMapping.synchronizer_parameters_state:type_name -> com.digitalasset.canton.protocol.v30.SynchronizerParametersState
	15, // 22: com.digitalasset.canton.protocol.v30.TopologyMapping.mediator_synchronizer_state:type_name -> com.digitalasset.canton.protocol.v30.MediatorSynchronizerState
	16, // 23: com.digitalasset.canton.protocol.v30.TopologyMapping.sequencer_synchronizer_state:type_name -> com.digitalasset.canton.protocol.v30.SequencerSynchronizerState
	17, // 24: com.digitalasset.canton.protocol.v30.TopologyMapping.purge_topology_txs:type_name -> com.digitalasset.canton.protocol.v30.PurgeTopologyTransaction
	14, // 25: com.digitalasset.canton.protocol.v30.TopologyMapping.sequencing_dynamic_parameters_state:type_name -> com.digitalasset.canton.protocol.v30.DynamicSequencingParametersState
	7,  // 26: com.digitalasset.canton.protocol.v30.TopologyMapping.party_to_key_mapping:type_name -> com.digitalasset.canton.protocol.v30.PartyToKeyMapping
	0,  // 27: com.digitalasset.canton.protocol.v30.TopologyTransaction.operation:type_name -> com.digitalasset.canton.protocol.v30.Enums.TopologyChangeOp
	18, // 28: com.digitalasset.canton.protocol.v30.TopologyTransaction.mapping:type_name -> com.digitalasset.canton.protocol.v30.TopologyMapping
	34, // 29: com.digitalasset.canton.protocol.v30.MultiTransactionSignatures.signatures:type_name -> com.digitalasset.canton.crypto.v30.Signature
	34, // 30: com.digitalasset.canton.protocol.v30.SignedTopologyTransaction.signatures:type_name -> com.digitalasset.canton.crypto.v30.Signature
	20, // 31: com.digitalasset.canton.protocol.v30.SignedTopologyTransaction.multi_transaction_signatures:type_name -> com.digitalasset.canton.protocol.v30.MultiTransactionSignatures
	22, // 32: com.digitalasset.canton.protocol.v30.TopologyTransactionsBroadcast.signed_transactions:type_name -> com.digitalasset.canton.protocol.v30.SignedTopologyTransactions
	2,  // 33: com.digitalasset.canton.protocol.v30.NamespaceDelegation.CanSignSpecificMappings.mappings:type_name -> com.digitalasset.canton.protocol.v30.Enums.TopologyMappingCode
	35, // 34: com.digitalasset.canton.protocol.v30.VettedPackages.VettedPackage.valid_from:type_name -> google.protobuf.Timestamp
	35, // 35: com.digitalasset.canton.protocol.v30.VettedPackages.VettedPackage.valid_until:type_name -> google.protobuf.Timestamp
	1,  // 36: com.digitalasset.canton.protocol.v30.PartyToParticipant.HostingParticipant.permission:type_name -> com.digitalasset.canton.protocol.v30.Enums.ParticipantPermission
	37, // [37:37] is the sub-list for method output_type
	37, // [37:37] is the sub-list for method input_type
	37, // [37:37] is the sub-list for extension type_name
	37, // [37:37] is the sub-list for extension extendee
	0,  // [0:37] is the sub-list for field type_name
}

func init() { file_com_digitalasset_canton_protocol_v30_topology_proto_init() }
func file_com_digitalasset_canton_protocol_v30_topology_proto_init() {
	if File_com_digitalasset_canton_protocol_v30_topology_proto != nil {
		return
	}
	file_com_digitalasset_canton_protocol_v30_sequencing_parameters_proto_init()
	file_com_digitalasset_canton_protocol_v30_synchronizer_parameters_proto_init()
	file_com_digitalasset_canton_protocol_v30_topology_proto_msgTypes[1].OneofWrappers = []any{
		(*NamespaceDelegation_CanSignAllMappings_)(nil),
		(*NamespaceDelegation_CanSignAllButNamespaceDelegations_)(nil),
		(*NamespaceDelegation_CanSignSpecificMapings)(nil),
	}
	file_com_digitalasset_canton_protocol_v30_topology_proto_msgTypes[6].OneofWrappers = []any{}
	file_com_digitalasset_canton_protocol_v30_topology_proto_msgTypes[15].OneofWrappers = []any{
		(*TopologyMapping_NamespaceDelegation)(nil),
		(*TopologyMapping_DecentralizedNamespaceDefinition)(nil),
		(*TopologyMapping_OwnerToKeyMapping)(nil),
		(*TopologyMapping_SynchronizerTrustCertificate)(nil),
		(*TopologyMapping_ParticipantPermission)(nil),
		(*TopologyMapping_PartyHostingLimits)(nil),
		(*TopologyMapping_VettedPackages)(nil),
		(*TopologyMapping_PartyToParticipant)(nil),
		(*TopologyMapping_SynchronizerParametersState)(nil),
		(*TopologyMapping_MediatorSynchronizerState)(nil),
		(*TopologyMapping_SequencerSynchronizerState)(nil),
		(*TopologyMapping_PurgeTopologyTxs)(nil),
		(*TopologyMapping_SequencingDynamicParametersState)(nil),
		(*TopologyMapping_PartyToKeyMapping)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_com_digitalasset_canton_protocol_v30_topology_proto_rawDesc), len(file_com_digitalasset_canton_protocol_v30_topology_proto_rawDesc)),
			NumEnums:      3,
			NumMessages:   26,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_com_digitalasset_canton_protocol_v30_topology_proto_goTypes,
		DependencyIndexes: file_com_digitalasset_canton_protocol_v30_topology_proto_depIdxs,
		EnumInfos:         file_com_digitalasset_canton_protocol_v30_topology_proto_enumTypes,
		MessageInfos:      file_com_digitalasset_canton_protocol_v30_topology_proto_msgTypes,
	}.Build()
	File_com_digitalasset_canton_protocol_v30_topology_proto = out.File
	file_com_digitalasset_canton_protocol_v30_topology_proto_goTypes = nil
	file_com_digitalasset_canton_protocol_v30_topology_proto_depIdxs = nil
}
