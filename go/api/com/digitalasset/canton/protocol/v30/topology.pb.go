// Copyright (c) 2017-2025 Digital Asset (Switzerland) GmbH and/or its affiliates. All rights reserved.
// SPDX-License-Identifier: Apache-2.0
// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.35.2
// 	protoc        v5.27.2
// source: com/digitalasset/canton/protocol/v30/topology.proto

package v30

import (
	v30 "github.com/digital-asset/dazl-client/v8/go/api/com/digitalasset/canton/crypto/v30"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	wrapperspb "google.golang.org/protobuf/types/known/wrapperspb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type Enums_TopologyChangeOp int32

const (
	Enums_TOPOLOGY_CHANGE_OP_UNSPECIFIED Enums_TopologyChangeOp = 0
	Enums_TOPOLOGY_CHANGE_OP_ADD_REPLACE Enums_TopologyChangeOp = 1
	Enums_TOPOLOGY_CHANGE_OP_REMOVE      Enums_TopologyChangeOp = 2
)

// Enum value maps for Enums_TopologyChangeOp.
var (
	Enums_TopologyChangeOp_name = map[int32]string{
		0: "TOPOLOGY_CHANGE_OP_UNSPECIFIED",
		1: "TOPOLOGY_CHANGE_OP_ADD_REPLACE",
		2: "TOPOLOGY_CHANGE_OP_REMOVE",
	}
	Enums_TopologyChangeOp_value = map[string]int32{
		"TOPOLOGY_CHANGE_OP_UNSPECIFIED": 0,
		"TOPOLOGY_CHANGE_OP_ADD_REPLACE": 1,
		"TOPOLOGY_CHANGE_OP_REMOVE":      2,
	}
)

func (x Enums_TopologyChangeOp) Enum() *Enums_TopologyChangeOp {
	p := new(Enums_TopologyChangeOp)
	*p = x
	return p
}

func (x Enums_TopologyChangeOp) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Enums_TopologyChangeOp) Descriptor() protoreflect.EnumDescriptor {
	return file_com_digitalasset_canton_protocol_v30_topology_proto_enumTypes[0].Descriptor()
}

func (Enums_TopologyChangeOp) Type() protoreflect.EnumType {
	return &file_com_digitalasset_canton_protocol_v30_topology_proto_enumTypes[0]
}

func (x Enums_TopologyChangeOp) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Enums_TopologyChangeOp.Descriptor instead.
func (Enums_TopologyChangeOp) EnumDescriptor() ([]byte, []int) {
	return file_com_digitalasset_canton_protocol_v30_topology_proto_rawDescGZIP(), []int{0, 0}
}

type Enums_ParticipantPermission int32

const (
	Enums_PARTICIPANT_PERMISSION_UNSPECIFIED  Enums_ParticipantPermission = 0
	Enums_PARTICIPANT_PERMISSION_SUBMISSION   Enums_ParticipantPermission = 1
	Enums_PARTICIPANT_PERMISSION_CONFIRMATION Enums_ParticipantPermission = 2
	Enums_PARTICIPANT_PERMISSION_OBSERVATION  Enums_ParticipantPermission = 3
)

// Enum value maps for Enums_ParticipantPermission.
var (
	Enums_ParticipantPermission_name = map[int32]string{
		0: "PARTICIPANT_PERMISSION_UNSPECIFIED",
		1: "PARTICIPANT_PERMISSION_SUBMISSION",
		2: "PARTICIPANT_PERMISSION_CONFIRMATION",
		3: "PARTICIPANT_PERMISSION_OBSERVATION",
	}
	Enums_ParticipantPermission_value = map[string]int32{
		"PARTICIPANT_PERMISSION_UNSPECIFIED":  0,
		"PARTICIPANT_PERMISSION_SUBMISSION":   1,
		"PARTICIPANT_PERMISSION_CONFIRMATION": 2,
		"PARTICIPANT_PERMISSION_OBSERVATION":  3,
	}
)

func (x Enums_ParticipantPermission) Enum() *Enums_ParticipantPermission {
	p := new(Enums_ParticipantPermission)
	*p = x
	return p
}

func (x Enums_ParticipantPermission) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Enums_ParticipantPermission) Descriptor() protoreflect.EnumDescriptor {
	return file_com_digitalasset_canton_protocol_v30_topology_proto_enumTypes[1].Descriptor()
}

func (Enums_ParticipantPermission) Type() protoreflect.EnumType {
	return &file_com_digitalasset_canton_protocol_v30_topology_proto_enumTypes[1]
}

func (x Enums_ParticipantPermission) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Enums_ParticipantPermission.Descriptor instead.
func (Enums_ParticipantPermission) EnumDescriptor() ([]byte, []int) {
	return file_com_digitalasset_canton_protocol_v30_topology_proto_rawDescGZIP(), []int{0, 1}
}

type Enums struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *Enums) Reset() {
	*x = Enums{}
	mi := &file_com_digitalasset_canton_protocol_v30_topology_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Enums) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Enums) ProtoMessage() {}

func (x *Enums) ProtoReflect() protoreflect.Message {
	mi := &file_com_digitalasset_canton_protocol_v30_topology_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Enums.ProtoReflect.Descriptor instead.
func (*Enums) Descriptor() ([]byte, []int) {
	return file_com_digitalasset_canton_protocol_v30_topology_proto_rawDescGZIP(), []int{0}
}

type NamespaceDelegation struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Namespace        string                `protobuf:"bytes,1,opt,name=namespace,proto3" json:"namespace,omitempty"`
	TargetKey        *v30.SigningPublicKey `protobuf:"bytes,2,opt,name=target_key,json=targetKey,proto3" json:"target_key,omitempty"`
	IsRootDelegation bool                  `protobuf:"varint,3,opt,name=is_root_delegation,json=isRootDelegation,proto3" json:"is_root_delegation,omitempty"`
}

func (x *NamespaceDelegation) Reset() {
	*x = NamespaceDelegation{}
	mi := &file_com_digitalasset_canton_protocol_v30_topology_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *NamespaceDelegation) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NamespaceDelegation) ProtoMessage() {}

func (x *NamespaceDelegation) ProtoReflect() protoreflect.Message {
	mi := &file_com_digitalasset_canton_protocol_v30_topology_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NamespaceDelegation.ProtoReflect.Descriptor instead.
func (*NamespaceDelegation) Descriptor() ([]byte, []int) {
	return file_com_digitalasset_canton_protocol_v30_topology_proto_rawDescGZIP(), []int{1}
}

func (x *NamespaceDelegation) GetNamespace() string {
	if x != nil {
		return x.Namespace
	}
	return ""
}

func (x *NamespaceDelegation) GetTargetKey() *v30.SigningPublicKey {
	if x != nil {
		return x.TargetKey
	}
	return nil
}

func (x *NamespaceDelegation) GetIsRootDelegation() bool {
	if x != nil {
		return x.IsRootDelegation
	}
	return false
}

type DecentralizedNamespaceDefinition struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DecentralizedNamespace string   `protobuf:"bytes,1,opt,name=decentralized_namespace,json=decentralizedNamespace,proto3" json:"decentralized_namespace,omitempty"`
	Threshold              int32    `protobuf:"varint,2,opt,name=threshold,proto3" json:"threshold,omitempty"`
	Owners                 []string `protobuf:"bytes,3,rep,name=owners,proto3" json:"owners,omitempty"`
}

func (x *DecentralizedNamespaceDefinition) Reset() {
	*x = DecentralizedNamespaceDefinition{}
	mi := &file_com_digitalasset_canton_protocol_v30_topology_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DecentralizedNamespaceDefinition) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DecentralizedNamespaceDefinition) ProtoMessage() {}

func (x *DecentralizedNamespaceDefinition) ProtoReflect() protoreflect.Message {
	mi := &file_com_digitalasset_canton_protocol_v30_topology_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DecentralizedNamespaceDefinition.ProtoReflect.Descriptor instead.
func (*DecentralizedNamespaceDefinition) Descriptor() ([]byte, []int) {
	return file_com_digitalasset_canton_protocol_v30_topology_proto_rawDescGZIP(), []int{2}
}

func (x *DecentralizedNamespaceDefinition) GetDecentralizedNamespace() string {
	if x != nil {
		return x.DecentralizedNamespace
	}
	return ""
}

func (x *DecentralizedNamespaceDefinition) GetThreshold() int32 {
	if x != nil {
		return x.Threshold
	}
	return 0
}

func (x *DecentralizedNamespaceDefinition) GetOwners() []string {
	if x != nil {
		return x.Owners
	}
	return nil
}

type IdentifierDelegation struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UniqueIdentifier string                `protobuf:"bytes,1,opt,name=unique_identifier,json=uniqueIdentifier,proto3" json:"unique_identifier,omitempty"`
	TargetKey        *v30.SigningPublicKey `protobuf:"bytes,2,opt,name=target_key,json=targetKey,proto3" json:"target_key,omitempty"`
}

func (x *IdentifierDelegation) Reset() {
	*x = IdentifierDelegation{}
	mi := &file_com_digitalasset_canton_protocol_v30_topology_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *IdentifierDelegation) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IdentifierDelegation) ProtoMessage() {}

func (x *IdentifierDelegation) ProtoReflect() protoreflect.Message {
	mi := &file_com_digitalasset_canton_protocol_v30_topology_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IdentifierDelegation.ProtoReflect.Descriptor instead.
func (*IdentifierDelegation) Descriptor() ([]byte, []int) {
	return file_com_digitalasset_canton_protocol_v30_topology_proto_rawDescGZIP(), []int{3}
}

func (x *IdentifierDelegation) GetUniqueIdentifier() string {
	if x != nil {
		return x.UniqueIdentifier
	}
	return ""
}

func (x *IdentifierDelegation) GetTargetKey() *v30.SigningPublicKey {
	if x != nil {
		return x.TargetKey
	}
	return nil
}

type OwnerToKeyMapping struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Member     string           `protobuf:"bytes,1,opt,name=member,proto3" json:"member,omitempty"`
	PublicKeys []*v30.PublicKey `protobuf:"bytes,2,rep,name=public_keys,json=publicKeys,proto3" json:"public_keys,omitempty"`
	Domain     string           `protobuf:"bytes,3,opt,name=domain,proto3" json:"domain,omitempty"`
}

func (x *OwnerToKeyMapping) Reset() {
	*x = OwnerToKeyMapping{}
	mi := &file_com_digitalasset_canton_protocol_v30_topology_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *OwnerToKeyMapping) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OwnerToKeyMapping) ProtoMessage() {}

func (x *OwnerToKeyMapping) ProtoReflect() protoreflect.Message {
	mi := &file_com_digitalasset_canton_protocol_v30_topology_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OwnerToKeyMapping.ProtoReflect.Descriptor instead.
func (*OwnerToKeyMapping) Descriptor() ([]byte, []int) {
	return file_com_digitalasset_canton_protocol_v30_topology_proto_rawDescGZIP(), []int{4}
}

func (x *OwnerToKeyMapping) GetMember() string {
	if x != nil {
		return x.Member
	}
	return ""
}

func (x *OwnerToKeyMapping) GetPublicKeys() []*v30.PublicKey {
	if x != nil {
		return x.PublicKeys
	}
	return nil
}

func (x *OwnerToKeyMapping) GetDomain() string {
	if x != nil {
		return x.Domain
	}
	return ""
}

type PartyToKeyMapping struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Party       string                  `protobuf:"bytes,1,opt,name=party,proto3" json:"party,omitempty"`
	Domain      string                  `protobuf:"bytes,2,opt,name=domain,proto3" json:"domain,omitempty"`
	Threshold   uint32                  `protobuf:"varint,3,opt,name=threshold,proto3" json:"threshold,omitempty"`
	SigningKeys []*v30.SigningPublicKey `protobuf:"bytes,4,rep,name=signing_keys,json=signingKeys,proto3" json:"signing_keys,omitempty"`
}

func (x *PartyToKeyMapping) Reset() {
	*x = PartyToKeyMapping{}
	mi := &file_com_digitalasset_canton_protocol_v30_topology_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PartyToKeyMapping) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PartyToKeyMapping) ProtoMessage() {}

func (x *PartyToKeyMapping) ProtoReflect() protoreflect.Message {
	mi := &file_com_digitalasset_canton_protocol_v30_topology_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PartyToKeyMapping.ProtoReflect.Descriptor instead.
func (*PartyToKeyMapping) Descriptor() ([]byte, []int) {
	return file_com_digitalasset_canton_protocol_v30_topology_proto_rawDescGZIP(), []int{5}
}

func (x *PartyToKeyMapping) GetParty() string {
	if x != nil {
		return x.Party
	}
	return ""
}

func (x *PartyToKeyMapping) GetDomain() string {
	if x != nil {
		return x.Domain
	}
	return ""
}

func (x *PartyToKeyMapping) GetThreshold() uint32 {
	if x != nil {
		return x.Threshold
	}
	return 0
}

func (x *PartyToKeyMapping) GetSigningKeys() []*v30.SigningPublicKey {
	if x != nil {
		return x.SigningKeys
	}
	return nil
}

type DomainTrustCertificate struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ParticipantUid                   string   `protobuf:"bytes,1,opt,name=participant_uid,json=participantUid,proto3" json:"participant_uid,omitempty"`
	Domain                           string   `protobuf:"bytes,2,opt,name=domain,proto3" json:"domain,omitempty"`
	TransferOnlyToGivenTargetDomains bool     `protobuf:"varint,3,opt,name=transfer_only_to_given_target_domains,json=transferOnlyToGivenTargetDomains,proto3" json:"transfer_only_to_given_target_domains,omitempty"`
	TargetDomains                    []string `protobuf:"bytes,4,rep,name=target_domains,json=targetDomains,proto3" json:"target_domains,omitempty"`
}

func (x *DomainTrustCertificate) Reset() {
	*x = DomainTrustCertificate{}
	mi := &file_com_digitalasset_canton_protocol_v30_topology_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DomainTrustCertificate) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DomainTrustCertificate) ProtoMessage() {}

func (x *DomainTrustCertificate) ProtoReflect() protoreflect.Message {
	mi := &file_com_digitalasset_canton_protocol_v30_topology_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DomainTrustCertificate.ProtoReflect.Descriptor instead.
func (*DomainTrustCertificate) Descriptor() ([]byte, []int) {
	return file_com_digitalasset_canton_protocol_v30_topology_proto_rawDescGZIP(), []int{6}
}

func (x *DomainTrustCertificate) GetParticipantUid() string {
	if x != nil {
		return x.ParticipantUid
	}
	return ""
}

func (x *DomainTrustCertificate) GetDomain() string {
	if x != nil {
		return x.Domain
	}
	return ""
}

func (x *DomainTrustCertificate) GetTransferOnlyToGivenTargetDomains() bool {
	if x != nil {
		return x.TransferOnlyToGivenTargetDomains
	}
	return false
}

func (x *DomainTrustCertificate) GetTargetDomains() []string {
	if x != nil {
		return x.TargetDomains
	}
	return nil
}

type ParticipantDomainPermission struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Domain         string                      `protobuf:"bytes,1,opt,name=domain,proto3" json:"domain,omitempty"`
	ParticipantUid string                      `protobuf:"bytes,2,opt,name=participant_uid,json=participantUid,proto3" json:"participant_uid,omitempty"`
	Permission     Enums_ParticipantPermission `protobuf:"varint,3,opt,name=permission,proto3,enum=com.digitalasset.canton.protocol.v30.Enums_ParticipantPermission" json:"permission,omitempty"`
	Limits         *ParticipantDomainLimits    `protobuf:"bytes,4,opt,name=limits,proto3" json:"limits,omitempty"`
	LoginAfter     *wrapperspb.Int64Value      `protobuf:"bytes,5,opt,name=login_after,json=loginAfter,proto3" json:"login_after,omitempty"`
}

func (x *ParticipantDomainPermission) Reset() {
	*x = ParticipantDomainPermission{}
	mi := &file_com_digitalasset_canton_protocol_v30_topology_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ParticipantDomainPermission) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ParticipantDomainPermission) ProtoMessage() {}

func (x *ParticipantDomainPermission) ProtoReflect() protoreflect.Message {
	mi := &file_com_digitalasset_canton_protocol_v30_topology_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ParticipantDomainPermission.ProtoReflect.Descriptor instead.
func (*ParticipantDomainPermission) Descriptor() ([]byte, []int) {
	return file_com_digitalasset_canton_protocol_v30_topology_proto_rawDescGZIP(), []int{7}
}

func (x *ParticipantDomainPermission) GetDomain() string {
	if x != nil {
		return x.Domain
	}
	return ""
}

func (x *ParticipantDomainPermission) GetParticipantUid() string {
	if x != nil {
		return x.ParticipantUid
	}
	return ""
}

func (x *ParticipantDomainPermission) GetPermission() Enums_ParticipantPermission {
	if x != nil {
		return x.Permission
	}
	return Enums_PARTICIPANT_PERMISSION_UNSPECIFIED
}

func (x *ParticipantDomainPermission) GetLimits() *ParticipantDomainLimits {
	if x != nil {
		return x.Limits
	}
	return nil
}

func (x *ParticipantDomainPermission) GetLoginAfter() *wrapperspb.Int64Value {
	if x != nil {
		return x.LoginAfter
	}
	return nil
}

type PartyHostingLimits struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Domain string `protobuf:"bytes,1,opt,name=domain,proto3" json:"domain,omitempty"`
	Party  string `protobuf:"bytes,2,opt,name=party,proto3" json:"party,omitempty"`
	Quota  uint32 `protobuf:"varint,3,opt,name=quota,proto3" json:"quota,omitempty"`
}

func (x *PartyHostingLimits) Reset() {
	*x = PartyHostingLimits{}
	mi := &file_com_digitalasset_canton_protocol_v30_topology_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PartyHostingLimits) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PartyHostingLimits) ProtoMessage() {}

func (x *PartyHostingLimits) ProtoReflect() protoreflect.Message {
	mi := &file_com_digitalasset_canton_protocol_v30_topology_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PartyHostingLimits.ProtoReflect.Descriptor instead.
func (*PartyHostingLimits) Descriptor() ([]byte, []int) {
	return file_com_digitalasset_canton_protocol_v30_topology_proto_rawDescGZIP(), []int{8}
}

func (x *PartyHostingLimits) GetDomain() string {
	if x != nil {
		return x.Domain
	}
	return ""
}

func (x *PartyHostingLimits) GetParty() string {
	if x != nil {
		return x.Party
	}
	return ""
}

func (x *PartyHostingLimits) GetQuota() uint32 {
	if x != nil {
		return x.Quota
	}
	return 0
}

type VettedPackages struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ParticipantUid string   `protobuf:"bytes,1,opt,name=participant_uid,json=participantUid,proto3" json:"participant_uid,omitempty"`
	PackageIds     []string `protobuf:"bytes,2,rep,name=package_ids,json=packageIds,proto3" json:"package_ids,omitempty"`
	Domain         string   `protobuf:"bytes,3,opt,name=domain,proto3" json:"domain,omitempty"`
}

func (x *VettedPackages) Reset() {
	*x = VettedPackages{}
	mi := &file_com_digitalasset_canton_protocol_v30_topology_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *VettedPackages) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VettedPackages) ProtoMessage() {}

func (x *VettedPackages) ProtoReflect() protoreflect.Message {
	mi := &file_com_digitalasset_canton_protocol_v30_topology_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VettedPackages.ProtoReflect.Descriptor instead.
func (*VettedPackages) Descriptor() ([]byte, []int) {
	return file_com_digitalasset_canton_protocol_v30_topology_proto_rawDescGZIP(), []int{9}
}

func (x *VettedPackages) GetParticipantUid() string {
	if x != nil {
		return x.ParticipantUid
	}
	return ""
}

func (x *VettedPackages) GetPackageIds() []string {
	if x != nil {
		return x.PackageIds
	}
	return nil
}

func (x *VettedPackages) GetDomain() string {
	if x != nil {
		return x.Domain
	}
	return ""
}

type PartyToParticipant struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Party           string                                   `protobuf:"bytes,1,opt,name=party,proto3" json:"party,omitempty"`
	Threshold       uint32                                   `protobuf:"varint,2,opt,name=threshold,proto3" json:"threshold,omitempty"`
	Participants    []*PartyToParticipant_HostingParticipant `protobuf:"bytes,3,rep,name=participants,proto3" json:"participants,omitempty"`
	GroupAddressing bool                                     `protobuf:"varint,4,opt,name=group_addressing,json=groupAddressing,proto3" json:"group_addressing,omitempty"`
	Domain          string                                   `protobuf:"bytes,5,opt,name=domain,proto3" json:"domain,omitempty"`
}

func (x *PartyToParticipant) Reset() {
	*x = PartyToParticipant{}
	mi := &file_com_digitalasset_canton_protocol_v30_topology_proto_msgTypes[10]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PartyToParticipant) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PartyToParticipant) ProtoMessage() {}

func (x *PartyToParticipant) ProtoReflect() protoreflect.Message {
	mi := &file_com_digitalasset_canton_protocol_v30_topology_proto_msgTypes[10]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PartyToParticipant.ProtoReflect.Descriptor instead.
func (*PartyToParticipant) Descriptor() ([]byte, []int) {
	return file_com_digitalasset_canton_protocol_v30_topology_proto_rawDescGZIP(), []int{10}
}

func (x *PartyToParticipant) GetParty() string {
	if x != nil {
		return x.Party
	}
	return ""
}

func (x *PartyToParticipant) GetThreshold() uint32 {
	if x != nil {
		return x.Threshold
	}
	return 0
}

func (x *PartyToParticipant) GetParticipants() []*PartyToParticipant_HostingParticipant {
	if x != nil {
		return x.Participants
	}
	return nil
}

func (x *PartyToParticipant) GetGroupAddressing() bool {
	if x != nil {
		return x.GroupAddressing
	}
	return false
}

func (x *PartyToParticipant) GetDomain() string {
	if x != nil {
		return x.Domain
	}
	return ""
}

type AuthorityOf struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Party     string   `protobuf:"bytes,1,opt,name=party,proto3" json:"party,omitempty"`
	Threshold uint32   `protobuf:"varint,2,opt,name=threshold,proto3" json:"threshold,omitempty"`
	Parties   []string `protobuf:"bytes,3,rep,name=parties,proto3" json:"parties,omitempty"`
	Domain    string   `protobuf:"bytes,4,opt,name=domain,proto3" json:"domain,omitempty"`
}

func (x *AuthorityOf) Reset() {
	*x = AuthorityOf{}
	mi := &file_com_digitalasset_canton_protocol_v30_topology_proto_msgTypes[11]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AuthorityOf) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AuthorityOf) ProtoMessage() {}

func (x *AuthorityOf) ProtoReflect() protoreflect.Message {
	mi := &file_com_digitalasset_canton_protocol_v30_topology_proto_msgTypes[11]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AuthorityOf.ProtoReflect.Descriptor instead.
func (*AuthorityOf) Descriptor() ([]byte, []int) {
	return file_com_digitalasset_canton_protocol_v30_topology_proto_rawDescGZIP(), []int{11}
}

func (x *AuthorityOf) GetParty() string {
	if x != nil {
		return x.Party
	}
	return ""
}

func (x *AuthorityOf) GetThreshold() uint32 {
	if x != nil {
		return x.Threshold
	}
	return 0
}

func (x *AuthorityOf) GetParties() []string {
	if x != nil {
		return x.Parties
	}
	return nil
}

func (x *AuthorityOf) GetDomain() string {
	if x != nil {
		return x.Domain
	}
	return ""
}

type DomainParametersState struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Domain           string                   `protobuf:"bytes,1,opt,name=domain,proto3" json:"domain,omitempty"`
	DomainParameters *DynamicDomainParameters `protobuf:"bytes,2,opt,name=domain_parameters,json=domainParameters,proto3" json:"domain_parameters,omitempty"`
}

func (x *DomainParametersState) Reset() {
	*x = DomainParametersState{}
	mi := &file_com_digitalasset_canton_protocol_v30_topology_proto_msgTypes[12]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DomainParametersState) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DomainParametersState) ProtoMessage() {}

func (x *DomainParametersState) ProtoReflect() protoreflect.Message {
	mi := &file_com_digitalasset_canton_protocol_v30_topology_proto_msgTypes[12]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DomainParametersState.ProtoReflect.Descriptor instead.
func (*DomainParametersState) Descriptor() ([]byte, []int) {
	return file_com_digitalasset_canton_protocol_v30_topology_proto_rawDescGZIP(), []int{12}
}

func (x *DomainParametersState) GetDomain() string {
	if x != nil {
		return x.Domain
	}
	return ""
}

func (x *DomainParametersState) GetDomainParameters() *DynamicDomainParameters {
	if x != nil {
		return x.DomainParameters
	}
	return nil
}

type DynamicSequencingParametersState struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Domain               string                       `protobuf:"bytes,1,opt,name=domain,proto3" json:"domain,omitempty"`
	SequencingParameters *DynamicSequencingParameters `protobuf:"bytes,2,opt,name=sequencing_parameters,json=sequencingParameters,proto3" json:"sequencing_parameters,omitempty"`
}

func (x *DynamicSequencingParametersState) Reset() {
	*x = DynamicSequencingParametersState{}
	mi := &file_com_digitalasset_canton_protocol_v30_topology_proto_msgTypes[13]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DynamicSequencingParametersState) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DynamicSequencingParametersState) ProtoMessage() {}

func (x *DynamicSequencingParametersState) ProtoReflect() protoreflect.Message {
	mi := &file_com_digitalasset_canton_protocol_v30_topology_proto_msgTypes[13]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DynamicSequencingParametersState.ProtoReflect.Descriptor instead.
func (*DynamicSequencingParametersState) Descriptor() ([]byte, []int) {
	return file_com_digitalasset_canton_protocol_v30_topology_proto_rawDescGZIP(), []int{13}
}

func (x *DynamicSequencingParametersState) GetDomain() string {
	if x != nil {
		return x.Domain
	}
	return ""
}

func (x *DynamicSequencingParametersState) GetSequencingParameters() *DynamicSequencingParameters {
	if x != nil {
		return x.SequencingParameters
	}
	return nil
}

type MediatorDomainState struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Domain    string   `protobuf:"bytes,1,opt,name=domain,proto3" json:"domain,omitempty"`
	Group     uint32   `protobuf:"varint,2,opt,name=group,proto3" json:"group,omitempty"`
	Threshold uint32   `protobuf:"varint,3,opt,name=threshold,proto3" json:"threshold,omitempty"`
	Active    []string `protobuf:"bytes,4,rep,name=active,proto3" json:"active,omitempty"`
	Observers []string `protobuf:"bytes,5,rep,name=observers,proto3" json:"observers,omitempty"`
}

func (x *MediatorDomainState) Reset() {
	*x = MediatorDomainState{}
	mi := &file_com_digitalasset_canton_protocol_v30_topology_proto_msgTypes[14]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *MediatorDomainState) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MediatorDomainState) ProtoMessage() {}

func (x *MediatorDomainState) ProtoReflect() protoreflect.Message {
	mi := &file_com_digitalasset_canton_protocol_v30_topology_proto_msgTypes[14]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MediatorDomainState.ProtoReflect.Descriptor instead.
func (*MediatorDomainState) Descriptor() ([]byte, []int) {
	return file_com_digitalasset_canton_protocol_v30_topology_proto_rawDescGZIP(), []int{14}
}

func (x *MediatorDomainState) GetDomain() string {
	if x != nil {
		return x.Domain
	}
	return ""
}

func (x *MediatorDomainState) GetGroup() uint32 {
	if x != nil {
		return x.Group
	}
	return 0
}

func (x *MediatorDomainState) GetThreshold() uint32 {
	if x != nil {
		return x.Threshold
	}
	return 0
}

func (x *MediatorDomainState) GetActive() []string {
	if x != nil {
		return x.Active
	}
	return nil
}

func (x *MediatorDomainState) GetObservers() []string {
	if x != nil {
		return x.Observers
	}
	return nil
}

type SequencerDomainState struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Domain    string   `protobuf:"bytes,1,opt,name=domain,proto3" json:"domain,omitempty"`
	Threshold uint32   `protobuf:"varint,2,opt,name=threshold,proto3" json:"threshold,omitempty"`
	Active    []string `protobuf:"bytes,3,rep,name=active,proto3" json:"active,omitempty"`
	Observers []string `protobuf:"bytes,4,rep,name=observers,proto3" json:"observers,omitempty"`
}

func (x *SequencerDomainState) Reset() {
	*x = SequencerDomainState{}
	mi := &file_com_digitalasset_canton_protocol_v30_topology_proto_msgTypes[15]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SequencerDomainState) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SequencerDomainState) ProtoMessage() {}

func (x *SequencerDomainState) ProtoReflect() protoreflect.Message {
	mi := &file_com_digitalasset_canton_protocol_v30_topology_proto_msgTypes[15]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SequencerDomainState.ProtoReflect.Descriptor instead.
func (*SequencerDomainState) Descriptor() ([]byte, []int) {
	return file_com_digitalasset_canton_protocol_v30_topology_proto_rawDescGZIP(), []int{15}
}

func (x *SequencerDomainState) GetDomain() string {
	if x != nil {
		return x.Domain
	}
	return ""
}

func (x *SequencerDomainState) GetThreshold() uint32 {
	if x != nil {
		return x.Threshold
	}
	return 0
}

func (x *SequencerDomainState) GetActive() []string {
	if x != nil {
		return x.Active
	}
	return nil
}

func (x *SequencerDomainState) GetObservers() []string {
	if x != nil {
		return x.Observers
	}
	return nil
}

type PurgeTopologyTransaction struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Domain   string             `protobuf:"bytes,1,opt,name=domain,proto3" json:"domain,omitempty"`
	Mappings []*TopologyMapping `protobuf:"bytes,2,rep,name=mappings,proto3" json:"mappings,omitempty"`
}

func (x *PurgeTopologyTransaction) Reset() {
	*x = PurgeTopologyTransaction{}
	mi := &file_com_digitalasset_canton_protocol_v30_topology_proto_msgTypes[16]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PurgeTopologyTransaction) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PurgeTopologyTransaction) ProtoMessage() {}

func (x *PurgeTopologyTransaction) ProtoReflect() protoreflect.Message {
	mi := &file_com_digitalasset_canton_protocol_v30_topology_proto_msgTypes[16]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PurgeTopologyTransaction.ProtoReflect.Descriptor instead.
func (*PurgeTopologyTransaction) Descriptor() ([]byte, []int) {
	return file_com_digitalasset_canton_protocol_v30_topology_proto_rawDescGZIP(), []int{16}
}

func (x *PurgeTopologyTransaction) GetDomain() string {
	if x != nil {
		return x.Domain
	}
	return ""
}

func (x *PurgeTopologyTransaction) GetMappings() []*TopologyMapping {
	if x != nil {
		return x.Mappings
	}
	return nil
}

type TopologyMapping struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Mapping:
	//
	//	*TopologyMapping_NamespaceDelegation
	//	*TopologyMapping_IdentifierDelegation
	//	*TopologyMapping_DecentralizedNamespaceDefinition
	//	*TopologyMapping_OwnerToKeyMapping
	//	*TopologyMapping_DomainTrustCertificate
	//	*TopologyMapping_ParticipantPermission
	//	*TopologyMapping_PartyHostingLimits
	//	*TopologyMapping_VettedPackages
	//	*TopologyMapping_PartyToParticipant
	//	*TopologyMapping_AuthorityOf
	//	*TopologyMapping_DomainParametersState
	//	*TopologyMapping_MediatorDomainState
	//	*TopologyMapping_SequencerDomainState
	//	*TopologyMapping_PurgeTopologyTxs
	//	*TopologyMapping_SequencingDynamicParametersState
	//	*TopologyMapping_PartyToKeyMapping
	Mapping isTopologyMapping_Mapping `protobuf_oneof:"mapping"`
}

func (x *TopologyMapping) Reset() {
	*x = TopologyMapping{}
	mi := &file_com_digitalasset_canton_protocol_v30_topology_proto_msgTypes[17]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TopologyMapping) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TopologyMapping) ProtoMessage() {}

func (x *TopologyMapping) ProtoReflect() protoreflect.Message {
	mi := &file_com_digitalasset_canton_protocol_v30_topology_proto_msgTypes[17]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TopologyMapping.ProtoReflect.Descriptor instead.
func (*TopologyMapping) Descriptor() ([]byte, []int) {
	return file_com_digitalasset_canton_protocol_v30_topology_proto_rawDescGZIP(), []int{17}
}

func (m *TopologyMapping) GetMapping() isTopologyMapping_Mapping {
	if m != nil {
		return m.Mapping
	}
	return nil
}

func (x *TopologyMapping) GetNamespaceDelegation() *NamespaceDelegation {
	if x, ok := x.GetMapping().(*TopologyMapping_NamespaceDelegation); ok {
		return x.NamespaceDelegation
	}
	return nil
}

func (x *TopologyMapping) GetIdentifierDelegation() *IdentifierDelegation {
	if x, ok := x.GetMapping().(*TopologyMapping_IdentifierDelegation); ok {
		return x.IdentifierDelegation
	}
	return nil
}

func (x *TopologyMapping) GetDecentralizedNamespaceDefinition() *DecentralizedNamespaceDefinition {
	if x, ok := x.GetMapping().(*TopologyMapping_DecentralizedNamespaceDefinition); ok {
		return x.DecentralizedNamespaceDefinition
	}
	return nil
}

func (x *TopologyMapping) GetOwnerToKeyMapping() *OwnerToKeyMapping {
	if x, ok := x.GetMapping().(*TopologyMapping_OwnerToKeyMapping); ok {
		return x.OwnerToKeyMapping
	}
	return nil
}

func (x *TopologyMapping) GetDomainTrustCertificate() *DomainTrustCertificate {
	if x, ok := x.GetMapping().(*TopologyMapping_DomainTrustCertificate); ok {
		return x.DomainTrustCertificate
	}
	return nil
}

func (x *TopologyMapping) GetParticipantPermission() *ParticipantDomainPermission {
	if x, ok := x.GetMapping().(*TopologyMapping_ParticipantPermission); ok {
		return x.ParticipantPermission
	}
	return nil
}

func (x *TopologyMapping) GetPartyHostingLimits() *PartyHostingLimits {
	if x, ok := x.GetMapping().(*TopologyMapping_PartyHostingLimits); ok {
		return x.PartyHostingLimits
	}
	return nil
}

func (x *TopologyMapping) GetVettedPackages() *VettedPackages {
	if x, ok := x.GetMapping().(*TopologyMapping_VettedPackages); ok {
		return x.VettedPackages
	}
	return nil
}

func (x *TopologyMapping) GetPartyToParticipant() *PartyToParticipant {
	if x, ok := x.GetMapping().(*TopologyMapping_PartyToParticipant); ok {
		return x.PartyToParticipant
	}
	return nil
}

func (x *TopologyMapping) GetAuthorityOf() *AuthorityOf {
	if x, ok := x.GetMapping().(*TopologyMapping_AuthorityOf); ok {
		return x.AuthorityOf
	}
	return nil
}

func (x *TopologyMapping) GetDomainParametersState() *DomainParametersState {
	if x, ok := x.GetMapping().(*TopologyMapping_DomainParametersState); ok {
		return x.DomainParametersState
	}
	return nil
}

func (x *TopologyMapping) GetMediatorDomainState() *MediatorDomainState {
	if x, ok := x.GetMapping().(*TopologyMapping_MediatorDomainState); ok {
		return x.MediatorDomainState
	}
	return nil
}

func (x *TopologyMapping) GetSequencerDomainState() *SequencerDomainState {
	if x, ok := x.GetMapping().(*TopologyMapping_SequencerDomainState); ok {
		return x.SequencerDomainState
	}
	return nil
}

func (x *TopologyMapping) GetPurgeTopologyTxs() *PurgeTopologyTransaction {
	if x, ok := x.GetMapping().(*TopologyMapping_PurgeTopologyTxs); ok {
		return x.PurgeTopologyTxs
	}
	return nil
}

func (x *TopologyMapping) GetSequencingDynamicParametersState() *DynamicSequencingParametersState {
	if x, ok := x.GetMapping().(*TopologyMapping_SequencingDynamicParametersState); ok {
		return x.SequencingDynamicParametersState
	}
	return nil
}

func (x *TopologyMapping) GetPartyToKeyMapping() *PartyToKeyMapping {
	if x, ok := x.GetMapping().(*TopologyMapping_PartyToKeyMapping); ok {
		return x.PartyToKeyMapping
	}
	return nil
}

type isTopologyMapping_Mapping interface {
	isTopologyMapping_Mapping()
}

type TopologyMapping_NamespaceDelegation struct {
	NamespaceDelegation *NamespaceDelegation `protobuf:"bytes,1,opt,name=namespace_delegation,json=namespaceDelegation,proto3,oneof"`
}

type TopologyMapping_IdentifierDelegation struct {
	IdentifierDelegation *IdentifierDelegation `protobuf:"bytes,2,opt,name=identifier_delegation,json=identifierDelegation,proto3,oneof"`
}

type TopologyMapping_DecentralizedNamespaceDefinition struct {
	DecentralizedNamespaceDefinition *DecentralizedNamespaceDefinition `protobuf:"bytes,3,opt,name=decentralized_namespace_definition,json=decentralizedNamespaceDefinition,proto3,oneof"`
}

type TopologyMapping_OwnerToKeyMapping struct {
	OwnerToKeyMapping *OwnerToKeyMapping `protobuf:"bytes,4,opt,name=owner_to_key_mapping,json=ownerToKeyMapping,proto3,oneof"`
}

type TopologyMapping_DomainTrustCertificate struct {
	DomainTrustCertificate *DomainTrustCertificate `protobuf:"bytes,5,opt,name=domain_trust_certificate,json=domainTrustCertificate,proto3,oneof"`
}

type TopologyMapping_ParticipantPermission struct {
	ParticipantPermission *ParticipantDomainPermission `protobuf:"bytes,6,opt,name=participant_permission,json=participantPermission,proto3,oneof"`
}

type TopologyMapping_PartyHostingLimits struct {
	PartyHostingLimits *PartyHostingLimits `protobuf:"bytes,7,opt,name=party_hosting_limits,json=partyHostingLimits,proto3,oneof"`
}

type TopologyMapping_VettedPackages struct {
	VettedPackages *VettedPackages `protobuf:"bytes,8,opt,name=vetted_packages,json=vettedPackages,proto3,oneof"`
}

type TopologyMapping_PartyToParticipant struct {
	PartyToParticipant *PartyToParticipant `protobuf:"bytes,9,opt,name=party_to_participant,json=partyToParticipant,proto3,oneof"`
}

type TopologyMapping_AuthorityOf struct {
	AuthorityOf *AuthorityOf `protobuf:"bytes,10,opt,name=authority_of,json=authorityOf,proto3,oneof"`
}

type TopologyMapping_DomainParametersState struct {
	DomainParametersState *DomainParametersState `protobuf:"bytes,11,opt,name=domain_parameters_state,json=domainParametersState,proto3,oneof"`
}

type TopologyMapping_MediatorDomainState struct {
	MediatorDomainState *MediatorDomainState `protobuf:"bytes,12,opt,name=mediator_domain_state,json=mediatorDomainState,proto3,oneof"`
}

type TopologyMapping_SequencerDomainState struct {
	SequencerDomainState *SequencerDomainState `protobuf:"bytes,13,opt,name=sequencer_domain_state,json=sequencerDomainState,proto3,oneof"`
}

type TopologyMapping_PurgeTopologyTxs struct {
	PurgeTopologyTxs *PurgeTopologyTransaction `protobuf:"bytes,14,opt,name=purge_topology_txs,json=purgeTopologyTxs,proto3,oneof"`
}

type TopologyMapping_SequencingDynamicParametersState struct {
	SequencingDynamicParametersState *DynamicSequencingParametersState `protobuf:"bytes,15,opt,name=sequencing_dynamic_parameters_state,json=sequencingDynamicParametersState,proto3,oneof"`
}

type TopologyMapping_PartyToKeyMapping struct {
	PartyToKeyMapping *PartyToKeyMapping `protobuf:"bytes,16,opt,name=party_to_key_mapping,json=partyToKeyMapping,proto3,oneof"`
}

func (*TopologyMapping_NamespaceDelegation) isTopologyMapping_Mapping() {}

func (*TopologyMapping_IdentifierDelegation) isTopologyMapping_Mapping() {}

func (*TopologyMapping_DecentralizedNamespaceDefinition) isTopologyMapping_Mapping() {}

func (*TopologyMapping_OwnerToKeyMapping) isTopologyMapping_Mapping() {}

func (*TopologyMapping_DomainTrustCertificate) isTopologyMapping_Mapping() {}

func (*TopologyMapping_ParticipantPermission) isTopologyMapping_Mapping() {}

func (*TopologyMapping_PartyHostingLimits) isTopologyMapping_Mapping() {}

func (*TopologyMapping_VettedPackages) isTopologyMapping_Mapping() {}

func (*TopologyMapping_PartyToParticipant) isTopologyMapping_Mapping() {}

func (*TopologyMapping_AuthorityOf) isTopologyMapping_Mapping() {}

func (*TopologyMapping_DomainParametersState) isTopologyMapping_Mapping() {}

func (*TopologyMapping_MediatorDomainState) isTopologyMapping_Mapping() {}

func (*TopologyMapping_SequencerDomainState) isTopologyMapping_Mapping() {}

func (*TopologyMapping_PurgeTopologyTxs) isTopologyMapping_Mapping() {}

func (*TopologyMapping_SequencingDynamicParametersState) isTopologyMapping_Mapping() {}

func (*TopologyMapping_PartyToKeyMapping) isTopologyMapping_Mapping() {}

type TopologyTransaction struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Operation Enums_TopologyChangeOp `protobuf:"varint,1,opt,name=operation,proto3,enum=com.digitalasset.canton.protocol.v30.Enums_TopologyChangeOp" json:"operation,omitempty"`
	Serial    uint32                 `protobuf:"varint,2,opt,name=serial,proto3" json:"serial,omitempty"`
	Mapping   *TopologyMapping       `protobuf:"bytes,3,opt,name=mapping,proto3" json:"mapping,omitempty"`
}

func (x *TopologyTransaction) Reset() {
	*x = TopologyTransaction{}
	mi := &file_com_digitalasset_canton_protocol_v30_topology_proto_msgTypes[18]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TopologyTransaction) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TopologyTransaction) ProtoMessage() {}

func (x *TopologyTransaction) ProtoReflect() protoreflect.Message {
	mi := &file_com_digitalasset_canton_protocol_v30_topology_proto_msgTypes[18]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TopologyTransaction.ProtoReflect.Descriptor instead.
func (*TopologyTransaction) Descriptor() ([]byte, []int) {
	return file_com_digitalasset_canton_protocol_v30_topology_proto_rawDescGZIP(), []int{18}
}

func (x *TopologyTransaction) GetOperation() Enums_TopologyChangeOp {
	if x != nil {
		return x.Operation
	}
	return Enums_TOPOLOGY_CHANGE_OP_UNSPECIFIED
}

func (x *TopologyTransaction) GetSerial() uint32 {
	if x != nil {
		return x.Serial
	}
	return 0
}

func (x *TopologyTransaction) GetMapping() *TopologyMapping {
	if x != nil {
		return x.Mapping
	}
	return nil
}

type SignedTopologyTransaction struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Transaction []byte           `protobuf:"bytes,1,opt,name=transaction,proto3" json:"transaction,omitempty"`
	Signatures  []*v30.Signature `protobuf:"bytes,2,rep,name=signatures,proto3" json:"signatures,omitempty"`
	Proposal    bool             `protobuf:"varint,3,opt,name=proposal,proto3" json:"proposal,omitempty"`
}

func (x *SignedTopologyTransaction) Reset() {
	*x = SignedTopologyTransaction{}
	mi := &file_com_digitalasset_canton_protocol_v30_topology_proto_msgTypes[19]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SignedTopologyTransaction) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SignedTopologyTransaction) ProtoMessage() {}

func (x *SignedTopologyTransaction) ProtoReflect() protoreflect.Message {
	mi := &file_com_digitalasset_canton_protocol_v30_topology_proto_msgTypes[19]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SignedTopologyTransaction.ProtoReflect.Descriptor instead.
func (*SignedTopologyTransaction) Descriptor() ([]byte, []int) {
	return file_com_digitalasset_canton_protocol_v30_topology_proto_rawDescGZIP(), []int{19}
}

func (x *SignedTopologyTransaction) GetTransaction() []byte {
	if x != nil {
		return x.Transaction
	}
	return nil
}

func (x *SignedTopologyTransaction) GetSignatures() []*v30.Signature {
	if x != nil {
		return x.Signatures
	}
	return nil
}

func (x *SignedTopologyTransaction) GetProposal() bool {
	if x != nil {
		return x.Proposal
	}
	return false
}

type TopologyTransactionsBroadcast struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Domain     string                                     `protobuf:"bytes,1,opt,name=domain,proto3" json:"domain,omitempty"`
	Broadcasts []*TopologyTransactionsBroadcast_Broadcast `protobuf:"bytes,2,rep,name=broadcasts,proto3" json:"broadcasts,omitempty"`
}

func (x *TopologyTransactionsBroadcast) Reset() {
	*x = TopologyTransactionsBroadcast{}
	mi := &file_com_digitalasset_canton_protocol_v30_topology_proto_msgTypes[20]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TopologyTransactionsBroadcast) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TopologyTransactionsBroadcast) ProtoMessage() {}

func (x *TopologyTransactionsBroadcast) ProtoReflect() protoreflect.Message {
	mi := &file_com_digitalasset_canton_protocol_v30_topology_proto_msgTypes[20]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TopologyTransactionsBroadcast.ProtoReflect.Descriptor instead.
func (*TopologyTransactionsBroadcast) Descriptor() ([]byte, []int) {
	return file_com_digitalasset_canton_protocol_v30_topology_proto_rawDescGZIP(), []int{20}
}

func (x *TopologyTransactionsBroadcast) GetDomain() string {
	if x != nil {
		return x.Domain
	}
	return ""
}

func (x *TopologyTransactionsBroadcast) GetBroadcasts() []*TopologyTransactionsBroadcast_Broadcast {
	if x != nil {
		return x.Broadcasts
	}
	return nil
}

type PartyToParticipant_HostingParticipant struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ParticipantUid string                      `protobuf:"bytes,1,opt,name=participant_uid,json=participantUid,proto3" json:"participant_uid,omitempty"`
	Permission     Enums_ParticipantPermission `protobuf:"varint,2,opt,name=permission,proto3,enum=com.digitalasset.canton.protocol.v30.Enums_ParticipantPermission" json:"permission,omitempty"`
}

func (x *PartyToParticipant_HostingParticipant) Reset() {
	*x = PartyToParticipant_HostingParticipant{}
	mi := &file_com_digitalasset_canton_protocol_v30_topology_proto_msgTypes[21]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PartyToParticipant_HostingParticipant) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PartyToParticipant_HostingParticipant) ProtoMessage() {}

func (x *PartyToParticipant_HostingParticipant) ProtoReflect() protoreflect.Message {
	mi := &file_com_digitalasset_canton_protocol_v30_topology_proto_msgTypes[21]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PartyToParticipant_HostingParticipant.ProtoReflect.Descriptor instead.
func (*PartyToParticipant_HostingParticipant) Descriptor() ([]byte, []int) {
	return file_com_digitalasset_canton_protocol_v30_topology_proto_rawDescGZIP(), []int{10, 0}
}

func (x *PartyToParticipant_HostingParticipant) GetParticipantUid() string {
	if x != nil {
		return x.ParticipantUid
	}
	return ""
}

func (x *PartyToParticipant_HostingParticipant) GetPermission() Enums_ParticipantPermission {
	if x != nil {
		return x.Permission
	}
	return Enums_PARTICIPANT_PERMISSION_UNSPECIFIED
}

type TopologyTransactionsBroadcast_Broadcast struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BroadcastId  string                       `protobuf:"bytes,1,opt,name=broadcast_id,json=broadcastId,proto3" json:"broadcast_id,omitempty"`
	Transactions []*SignedTopologyTransaction `protobuf:"bytes,2,rep,name=transactions,proto3" json:"transactions,omitempty"`
}

func (x *TopologyTransactionsBroadcast_Broadcast) Reset() {
	*x = TopologyTransactionsBroadcast_Broadcast{}
	mi := &file_com_digitalasset_canton_protocol_v30_topology_proto_msgTypes[22]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TopologyTransactionsBroadcast_Broadcast) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TopologyTransactionsBroadcast_Broadcast) ProtoMessage() {}

func (x *TopologyTransactionsBroadcast_Broadcast) ProtoReflect() protoreflect.Message {
	mi := &file_com_digitalasset_canton_protocol_v30_topology_proto_msgTypes[22]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TopologyTransactionsBroadcast_Broadcast.ProtoReflect.Descriptor instead.
func (*TopologyTransactionsBroadcast_Broadcast) Descriptor() ([]byte, []int) {
	return file_com_digitalasset_canton_protocol_v30_topology_proto_rawDescGZIP(), []int{20, 0}
}

func (x *TopologyTransactionsBroadcast_Broadcast) GetBroadcastId() string {
	if x != nil {
		return x.BroadcastId
	}
	return ""
}

func (x *TopologyTransactionsBroadcast_Broadcast) GetTransactions() []*SignedTopologyTransaction {
	if x != nil {
		return x.Transactions
	}
	return nil
}

var File_com_digitalasset_canton_protocol_v30_topology_proto protoreflect.FileDescriptor

var file_com_digitalasset_canton_protocol_v30_topology_proto_rawDesc = []byte{
	0x0a, 0x33, 0x63, 0x6f, 0x6d, 0x2f, 0x64, 0x69, 0x67, 0x69, 0x74, 0x61, 0x6c, 0x61, 0x73, 0x73,
	0x65, 0x74, 0x2f, 0x63, 0x61, 0x6e, 0x74, 0x6f, 0x6e, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63,
	0x6f, 0x6c, 0x2f, 0x76, 0x33, 0x30, 0x2f, 0x74, 0x6f, 0x70, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x24, 0x63, 0x6f, 0x6d, 0x2e, 0x64, 0x69, 0x67, 0x69, 0x74,
	0x61, 0x6c, 0x61, 0x73, 0x73, 0x65, 0x74, 0x2e, 0x63, 0x61, 0x6e, 0x74, 0x6f, 0x6e, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x76, 0x33, 0x30, 0x1a, 0x2f, 0x63, 0x6f, 0x6d,
	0x2f, 0x64, 0x69, 0x67, 0x69, 0x74, 0x61, 0x6c, 0x61, 0x73, 0x73, 0x65, 0x74, 0x2f, 0x63, 0x61,
	0x6e, 0x74, 0x6f, 0x6e, 0x2f, 0x63, 0x72, 0x79, 0x70, 0x74, 0x6f, 0x2f, 0x76, 0x33, 0x30, 0x2f,
	0x63, 0x72, 0x79, 0x70, 0x74, 0x6f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x3c, 0x63, 0x6f,
	0x6d, 0x2f, 0x64, 0x69, 0x67, 0x69, 0x74, 0x61, 0x6c, 0x61, 0x73, 0x73, 0x65, 0x74, 0x2f, 0x63,
	0x61, 0x6e, 0x74, 0x6f, 0x6e, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2f, 0x76,
	0x33, 0x30, 0x2f, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x5f, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x65,
	0x74, 0x65, 0x72, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x40, 0x63, 0x6f, 0x6d, 0x2f,
	0x64, 0x69, 0x67, 0x69, 0x74, 0x61, 0x6c, 0x61, 0x73, 0x73, 0x65, 0x74, 0x2f, 0x63, 0x61, 0x6e,
	0x74, 0x6f, 0x6e, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2f, 0x76, 0x33, 0x30,
	0x2f, 0x73, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x69, 0x6e, 0x67, 0x5f, 0x70, 0x61, 0x72, 0x61,
	0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x77, 0x72,
	0x61, 0x70, 0x70, 0x65, 0x72, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xbc, 0x02, 0x0a,
	0x05, 0x45, 0x6e, 0x75, 0x6d, 0x73, 0x22, 0x79, 0x0a, 0x10, 0x54, 0x6f, 0x70, 0x6f, 0x6c, 0x6f,
	0x67, 0x79, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x4f, 0x70, 0x12, 0x22, 0x0a, 0x1e, 0x54, 0x4f,
	0x50, 0x4f, 0x4c, 0x4f, 0x47, 0x59, 0x5f, 0x43, 0x48, 0x41, 0x4e, 0x47, 0x45, 0x5f, 0x4f, 0x50,
	0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x22,
	0x0a, 0x1e, 0x54, 0x4f, 0x50, 0x4f, 0x4c, 0x4f, 0x47, 0x59, 0x5f, 0x43, 0x48, 0x41, 0x4e, 0x47,
	0x45, 0x5f, 0x4f, 0x50, 0x5f, 0x41, 0x44, 0x44, 0x5f, 0x52, 0x45, 0x50, 0x4c, 0x41, 0x43, 0x45,
	0x10, 0x01, 0x12, 0x1d, 0x0a, 0x19, 0x54, 0x4f, 0x50, 0x4f, 0x4c, 0x4f, 0x47, 0x59, 0x5f, 0x43,
	0x48, 0x41, 0x4e, 0x47, 0x45, 0x5f, 0x4f, 0x50, 0x5f, 0x52, 0x45, 0x4d, 0x4f, 0x56, 0x45, 0x10,
	0x02, 0x22, 0xb7, 0x01, 0x0a, 0x15, 0x50, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6e,
	0x74, 0x50, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x26, 0x0a, 0x22, 0x50,
	0x41, 0x52, 0x54, 0x49, 0x43, 0x49, 0x50, 0x41, 0x4e, 0x54, 0x5f, 0x50, 0x45, 0x52, 0x4d, 0x49,
	0x53, 0x53, 0x49, 0x4f, 0x4e, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45,
	0x44, 0x10, 0x00, 0x12, 0x25, 0x0a, 0x21, 0x50, 0x41, 0x52, 0x54, 0x49, 0x43, 0x49, 0x50, 0x41,
	0x4e, 0x54, 0x5f, 0x50, 0x45, 0x52, 0x4d, 0x49, 0x53, 0x53, 0x49, 0x4f, 0x4e, 0x5f, 0x53, 0x55,
	0x42, 0x4d, 0x49, 0x53, 0x53, 0x49, 0x4f, 0x4e, 0x10, 0x01, 0x12, 0x27, 0x0a, 0x23, 0x50, 0x41,
	0x52, 0x54, 0x49, 0x43, 0x49, 0x50, 0x41, 0x4e, 0x54, 0x5f, 0x50, 0x45, 0x52, 0x4d, 0x49, 0x53,
	0x53, 0x49, 0x4f, 0x4e, 0x5f, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x52, 0x4d, 0x41, 0x54, 0x49, 0x4f,
	0x4e, 0x10, 0x02, 0x12, 0x26, 0x0a, 0x22, 0x50, 0x41, 0x52, 0x54, 0x49, 0x43, 0x49, 0x50, 0x41,
	0x4e, 0x54, 0x5f, 0x50, 0x45, 0x52, 0x4d, 0x49, 0x53, 0x53, 0x49, 0x4f, 0x4e, 0x5f, 0x4f, 0x42,
	0x53, 0x45, 0x52, 0x56, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x03, 0x22, 0xb6, 0x01, 0x0a, 0x13,
	0x4e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x44, 0x65, 0x6c, 0x65, 0x67, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x1c, 0x0a, 0x09, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63,
	0x65, 0x12, 0x53, 0x0a, 0x0a, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x5f, 0x6b, 0x65, 0x79, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x34, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x64, 0x69, 0x67, 0x69,
	0x74, 0x61, 0x6c, 0x61, 0x73, 0x73, 0x65, 0x74, 0x2e, 0x63, 0x61, 0x6e, 0x74, 0x6f, 0x6e, 0x2e,
	0x63, 0x72, 0x79, 0x70, 0x74, 0x6f, 0x2e, 0x76, 0x33, 0x30, 0x2e, 0x53, 0x69, 0x67, 0x6e, 0x69,
	0x6e, 0x67, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x4b, 0x65, 0x79, 0x52, 0x09, 0x74, 0x61, 0x72,
	0x67, 0x65, 0x74, 0x4b, 0x65, 0x79, 0x12, 0x2c, 0x0a, 0x12, 0x69, 0x73, 0x5f, 0x72, 0x6f, 0x6f,
	0x74, 0x5f, 0x64, 0x65, 0x6c, 0x65, 0x67, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x10, 0x69, 0x73, 0x52, 0x6f, 0x6f, 0x74, 0x44, 0x65, 0x6c, 0x65, 0x67, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x22, 0x91, 0x01, 0x0a, 0x20, 0x44, 0x65, 0x63, 0x65, 0x6e, 0x74, 0x72,
	0x61, 0x6c, 0x69, 0x7a, 0x65, 0x64, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x44,
	0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x37, 0x0a, 0x17, 0x64, 0x65, 0x63,
	0x65, 0x6e, 0x74, 0x72, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x64, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x73,
	0x70, 0x61, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x16, 0x64, 0x65, 0x63, 0x65,
	0x6e, 0x74, 0x72, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x64, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61,
	0x63, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x74, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x74, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64,
	0x12, 0x16, 0x0a, 0x06, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x09,
	0x52, 0x06, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x73, 0x22, 0x98, 0x01, 0x0a, 0x14, 0x49, 0x64, 0x65,
	0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x44, 0x65, 0x6c, 0x65, 0x67, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x2b, 0x0a, 0x11, 0x75, 0x6e, 0x69, 0x71, 0x75, 0x65, 0x5f, 0x69, 0x64, 0x65, 0x6e,
	0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x75, 0x6e,
	0x69, 0x71, 0x75, 0x65, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x12, 0x53,
	0x0a, 0x0a, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x34, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x64, 0x69, 0x67, 0x69, 0x74, 0x61, 0x6c,
	0x61, 0x73, 0x73, 0x65, 0x74, 0x2e, 0x63, 0x61, 0x6e, 0x74, 0x6f, 0x6e, 0x2e, 0x63, 0x72, 0x79,
	0x70, 0x74, 0x6f, 0x2e, 0x76, 0x33, 0x30, 0x2e, 0x53, 0x69, 0x67, 0x6e, 0x69, 0x6e, 0x67, 0x50,
	0x75, 0x62, 0x6c, 0x69, 0x63, 0x4b, 0x65, 0x79, 0x52, 0x09, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74,
	0x4b, 0x65, 0x79, 0x22, 0x93, 0x01, 0x0a, 0x11, 0x4f, 0x77, 0x6e, 0x65, 0x72, 0x54, 0x6f, 0x4b,
	0x65, 0x79, 0x4d, 0x61, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x12, 0x16, 0x0a, 0x06, 0x6d, 0x65, 0x6d,
	0x62, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x6d, 0x65, 0x6d, 0x62, 0x65,
	0x72, 0x12, 0x4e, 0x0a, 0x0b, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x5f, 0x6b, 0x65, 0x79, 0x73,
	0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x64, 0x69, 0x67,
	0x69, 0x74, 0x61, 0x6c, 0x61, 0x73, 0x73, 0x65, 0x74, 0x2e, 0x63, 0x61, 0x6e, 0x74, 0x6f, 0x6e,
	0x2e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x6f, 0x2e, 0x76, 0x33, 0x30, 0x2e, 0x50, 0x75, 0x62, 0x6c,
	0x69, 0x63, 0x4b, 0x65, 0x79, 0x52, 0x0a, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x4b, 0x65, 0x79,
	0x73, 0x12, 0x16, 0x0a, 0x06, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x06, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x22, 0xb8, 0x01, 0x0a, 0x11, 0x50, 0x61,
	0x72, 0x74, 0x79, 0x54, 0x6f, 0x4b, 0x65, 0x79, 0x4d, 0x61, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x12,
	0x14, 0x0a, 0x05, 0x70, 0x61, 0x72, 0x74, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05,
	0x70, 0x61, 0x72, 0x74, 0x79, 0x12, 0x16, 0x0a, 0x06, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x12, 0x1c, 0x0a,
	0x09, 0x74, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x09, 0x74, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x12, 0x57, 0x0a, 0x0c, 0x73,
	0x69, 0x67, 0x6e, 0x69, 0x6e, 0x67, 0x5f, 0x6b, 0x65, 0x79, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x34, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x64, 0x69, 0x67, 0x69, 0x74, 0x61, 0x6c, 0x61,
	0x73, 0x73, 0x65, 0x74, 0x2e, 0x63, 0x61, 0x6e, 0x74, 0x6f, 0x6e, 0x2e, 0x63, 0x72, 0x79, 0x70,
	0x74, 0x6f, 0x2e, 0x76, 0x33, 0x30, 0x2e, 0x53, 0x69, 0x67, 0x6e, 0x69, 0x6e, 0x67, 0x50, 0x75,
	0x62, 0x6c, 0x69, 0x63, 0x4b, 0x65, 0x79, 0x52, 0x0b, 0x73, 0x69, 0x67, 0x6e, 0x69, 0x6e, 0x67,
	0x4b, 0x65, 0x79, 0x73, 0x22, 0xd1, 0x01, 0x0a, 0x16, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x54,
	0x72, 0x75, 0x73, 0x74, 0x43, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x12,
	0x27, 0x0a, 0x0f, 0x70, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x5f, 0x75,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x70, 0x61, 0x72, 0x74, 0x69, 0x63,
	0x69, 0x70, 0x61, 0x6e, 0x74, 0x55, 0x69, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x64, 0x6f, 0x6d, 0x61,
	0x69, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e,
	0x12, 0x4f, 0x0a, 0x25, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x5f, 0x6f, 0x6e, 0x6c,
	0x79, 0x5f, 0x74, 0x6f, 0x5f, 0x67, 0x69, 0x76, 0x65, 0x6e, 0x5f, 0x74, 0x61, 0x72, 0x67, 0x65,
	0x74, 0x5f, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x20, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x4f, 0x6e, 0x6c, 0x79, 0x54, 0x6f, 0x47,
	0x69, 0x76, 0x65, 0x6e, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e,
	0x73, 0x12, 0x25, 0x0a, 0x0e, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x5f, 0x64, 0x6f, 0x6d, 0x61,
	0x69, 0x6e, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0d, 0x74, 0x61, 0x72, 0x67, 0x65,
	0x74, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x73, 0x22, 0xd6, 0x02, 0x0a, 0x1b, 0x50, 0x61, 0x72,
	0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x50, 0x65,
	0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x16, 0x0a, 0x06, 0x64, 0x6f, 0x6d, 0x61,
	0x69, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e,
	0x12, 0x27, 0x0a, 0x0f, 0x70, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x5f,
	0x75, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x70, 0x61, 0x72, 0x74, 0x69,
	0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x55, 0x69, 0x64, 0x12, 0x61, 0x0a, 0x0a, 0x70, 0x65, 0x72,
	0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x41, 0x2e,
	0x63, 0x6f, 0x6d, 0x2e, 0x64, 0x69, 0x67, 0x69, 0x74, 0x61, 0x6c, 0x61, 0x73, 0x73, 0x65, 0x74,
	0x2e, 0x63, 0x61, 0x6e, 0x74, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c,
	0x2e, 0x76, 0x33, 0x30, 0x2e, 0x45, 0x6e, 0x75, 0x6d, 0x73, 0x2e, 0x50, 0x61, 0x72, 0x74, 0x69,
	0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x50, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e,
	0x52, 0x0a, 0x70, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x55, 0x0a, 0x06,
	0x6c, 0x69, 0x6d, 0x69, 0x74, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3d, 0x2e, 0x63,
	0x6f, 0x6d, 0x2e, 0x64, 0x69, 0x67, 0x69, 0x74, 0x61, 0x6c, 0x61, 0x73, 0x73, 0x65, 0x74, 0x2e,
	0x63, 0x61, 0x6e, 0x74, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e,
	0x76, 0x33, 0x30, 0x2e, 0x50, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x44,
	0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x73, 0x52, 0x06, 0x6c, 0x69, 0x6d,
	0x69, 0x74, 0x73, 0x12, 0x3c, 0x0a, 0x0b, 0x6c, 0x6f, 0x67, 0x69, 0x6e, 0x5f, 0x61, 0x66, 0x74,
	0x65, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x49, 0x6e, 0x74, 0x36, 0x34,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0a, 0x6c, 0x6f, 0x67, 0x69, 0x6e, 0x41, 0x66, 0x74, 0x65,
	0x72, 0x22, 0x58, 0x0a, 0x12, 0x50, 0x61, 0x72, 0x74, 0x79, 0x48, 0x6f, 0x73, 0x74, 0x69, 0x6e,
	0x67, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x64, 0x6f, 0x6d, 0x61, 0x69,
	0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x12,
	0x14, 0x0a, 0x05, 0x70, 0x61, 0x72, 0x74, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05,
	0x70, 0x61, 0x72, 0x74, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x71, 0x75, 0x6f, 0x74, 0x61, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x71, 0x75, 0x6f, 0x74, 0x61, 0x22, 0x72, 0x0a, 0x0e, 0x56,
	0x65, 0x74, 0x74, 0x65, 0x64, 0x50, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x73, 0x12, 0x27, 0x0a,
	0x0f, 0x70, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x5f, 0x75, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x70, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70,
	0x61, 0x6e, 0x74, 0x55, 0x69, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x70, 0x61, 0x63, 0x6b, 0x61, 0x67,
	0x65, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0a, 0x70, 0x61, 0x63,
	0x6b, 0x61, 0x67, 0x65, 0x49, 0x64, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x64, 0x6f, 0x6d, 0x61, 0x69,
	0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x22,
	0x9f, 0x03, 0x0a, 0x12, 0x50, 0x61, 0x72, 0x74, 0x79, 0x54, 0x6f, 0x50, 0x61, 0x72, 0x74, 0x69,
	0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x70, 0x61, 0x72, 0x74, 0x79, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x70, 0x61, 0x72, 0x74, 0x79, 0x12, 0x1c, 0x0a, 0x09,
	0x74, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x09, 0x74, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x12, 0x6f, 0x0a, 0x0c, 0x70, 0x61,
	0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x4b, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x64, 0x69, 0x67, 0x69, 0x74, 0x61, 0x6c, 0x61, 0x73,
	0x73, 0x65, 0x74, 0x2e, 0x63, 0x61, 0x6e, 0x74, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x63, 0x6f, 0x6c, 0x2e, 0x76, 0x33, 0x30, 0x2e, 0x50, 0x61, 0x72, 0x74, 0x79, 0x54, 0x6f, 0x50,
	0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x2e, 0x48, 0x6f, 0x73, 0x74, 0x69,
	0x6e, 0x67, 0x50, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x52, 0x0c, 0x70,
	0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x73, 0x12, 0x29, 0x0a, 0x10, 0x67,
	0x72, 0x6f, 0x75, 0x70, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6e, 0x67, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x41, 0x64, 0x64, 0x72,
	0x65, 0x73, 0x73, 0x69, 0x6e, 0x67, 0x12, 0x16, 0x0a, 0x06, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x1a, 0xa0,
	0x01, 0x0a, 0x12, 0x48, 0x6f, 0x73, 0x74, 0x69, 0x6e, 0x67, 0x50, 0x61, 0x72, 0x74, 0x69, 0x63,
	0x69, 0x70, 0x61, 0x6e, 0x74, 0x12, 0x27, 0x0a, 0x0f, 0x70, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69,
	0x70, 0x61, 0x6e, 0x74, 0x5f, 0x75, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e,
	0x70, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x55, 0x69, 0x64, 0x12, 0x61,
	0x0a, 0x0a, 0x70, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x41, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x64, 0x69, 0x67, 0x69, 0x74, 0x61, 0x6c,
	0x61, 0x73, 0x73, 0x65, 0x74, 0x2e, 0x63, 0x61, 0x6e, 0x74, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x76, 0x33, 0x30, 0x2e, 0x45, 0x6e, 0x75, 0x6d, 0x73, 0x2e,
	0x50, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x50, 0x65, 0x72, 0x6d, 0x69,
	0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x0a, 0x70, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f,
	0x6e, 0x22, 0x73, 0x0a, 0x0b, 0x41, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x4f, 0x66,
	0x12, 0x14, 0x0a, 0x05, 0x70, 0x61, 0x72, 0x74, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x05, 0x70, 0x61, 0x72, 0x74, 0x79, 0x12, 0x1c, 0x0a, 0x09, 0x74, 0x68, 0x72, 0x65, 0x73, 0x68,
	0x6f, 0x6c, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x74, 0x68, 0x72, 0x65, 0x73,
	0x68, 0x6f, 0x6c, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x70, 0x61, 0x72, 0x74, 0x69, 0x65, 0x73, 0x18,
	0x03, 0x20, 0x03, 0x28, 0x09, 0x52, 0x07, 0x70, 0x61, 0x72, 0x74, 0x69, 0x65, 0x73, 0x12, 0x16,
	0x0a, 0x06, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06,
	0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x22, 0x9b, 0x01, 0x0a, 0x15, 0x44, 0x6f, 0x6d, 0x61, 0x69,
	0x6e, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x53, 0x74, 0x61, 0x74, 0x65,
	0x12, 0x16, 0x0a, 0x06, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x06, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x12, 0x6a, 0x0a, 0x11, 0x64, 0x6f, 0x6d, 0x61,
	0x69, 0x6e, 0x5f, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x3d, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x64, 0x69, 0x67, 0x69, 0x74, 0x61,
	0x6c, 0x61, 0x73, 0x73, 0x65, 0x74, 0x2e, 0x63, 0x61, 0x6e, 0x74, 0x6f, 0x6e, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x76, 0x33, 0x30, 0x2e, 0x44, 0x79, 0x6e, 0x61, 0x6d,
	0x69, 0x63, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65,
	0x72, 0x73, 0x52, 0x10, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65,
	0x74, 0x65, 0x72, 0x73, 0x22, 0xb2, 0x01, 0x0a, 0x20, 0x44, 0x79, 0x6e, 0x61, 0x6d, 0x69, 0x63,
	0x53, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x69, 0x6e, 0x67, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65,
	0x74, 0x65, 0x72, 0x73, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x64, 0x6f, 0x6d,
	0x61, 0x69, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x64, 0x6f, 0x6d, 0x61, 0x69,
	0x6e, 0x12, 0x76, 0x0a, 0x15, 0x73, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x69, 0x6e, 0x67, 0x5f,
	0x70, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x41, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x64, 0x69, 0x67, 0x69, 0x74, 0x61, 0x6c, 0x61, 0x73,
	0x73, 0x65, 0x74, 0x2e, 0x63, 0x61, 0x6e, 0x74, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x63, 0x6f, 0x6c, 0x2e, 0x76, 0x33, 0x30, 0x2e, 0x44, 0x79, 0x6e, 0x61, 0x6d, 0x69, 0x63, 0x53,
	0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x69, 0x6e, 0x67, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74,
	0x65, 0x72, 0x73, 0x52, 0x14, 0x73, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x69, 0x6e, 0x67, 0x50,
	0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x22, 0x97, 0x01, 0x0a, 0x13, 0x4d, 0x65,
	0x64, 0x69, 0x61, 0x74, 0x6f, 0x72, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x53, 0x74, 0x61, 0x74,
	0x65, 0x12, 0x16, 0x0a, 0x06, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x06, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x12, 0x14, 0x0a, 0x05, 0x67, 0x72, 0x6f,
	0x75, 0x70, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x12,
	0x1c, 0x0a, 0x09, 0x74, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x09, 0x74, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x12, 0x16, 0x0a,
	0x06, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x18, 0x04, 0x20, 0x03, 0x28, 0x09, 0x52, 0x06, 0x61,
	0x63, 0x74, 0x69, 0x76, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x6f, 0x62, 0x73, 0x65, 0x72, 0x76, 0x65,
	0x72, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x09, 0x52, 0x09, 0x6f, 0x62, 0x73, 0x65, 0x72, 0x76,
	0x65, 0x72, 0x73, 0x22, 0x82, 0x01, 0x0a, 0x14, 0x53, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65,
	0x72, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x16, 0x0a, 0x06,
	0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x64, 0x6f,
	0x6d, 0x61, 0x69, 0x6e, 0x12, 0x1c, 0x0a, 0x09, 0x74, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c,
	0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x74, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f,
	0x6c, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x18, 0x03, 0x20, 0x03,
	0x28, 0x09, 0x52, 0x06, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x6f, 0x62,
	0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x09, 0x52, 0x09, 0x6f,
	0x62, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x73, 0x22, 0x85, 0x01, 0x0a, 0x18, 0x50, 0x75, 0x72,
	0x67, 0x65, 0x54, 0x6f, 0x70, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x16, 0x0a, 0x06, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x12, 0x51, 0x0a,
	0x08, 0x6d, 0x61, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x35, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x64, 0x69, 0x67, 0x69, 0x74, 0x61, 0x6c, 0x61, 0x73, 0x73,
	0x65, 0x74, 0x2e, 0x63, 0x61, 0x6e, 0x74, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63,
	0x6f, 0x6c, 0x2e, 0x76, 0x33, 0x30, 0x2e, 0x54, 0x6f, 0x70, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x4d,
	0x61, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x52, 0x08, 0x6d, 0x61, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x73,
	0x22, 0xe1, 0x0e, 0x0a, 0x0f, 0x54, 0x6f, 0x70, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x4d, 0x61, 0x70,
	0x70, 0x69, 0x6e, 0x67, 0x12, 0x6e, 0x0a, 0x14, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63,
	0x65, 0x5f, 0x64, 0x65, 0x6c, 0x65, 0x67, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x39, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x64, 0x69, 0x67, 0x69, 0x74, 0x61, 0x6c,
	0x61, 0x73, 0x73, 0x65, 0x74, 0x2e, 0x63, 0x61, 0x6e, 0x74, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x76, 0x33, 0x30, 0x2e, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x70,
	0x61, 0x63, 0x65, 0x44, 0x65, 0x6c, 0x65, 0x67, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x00, 0x52,
	0x13, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x44, 0x65, 0x6c, 0x65, 0x67, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x71, 0x0a, 0x15, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69,
	0x65, 0x72, 0x5f, 0x64, 0x65, 0x6c, 0x65, 0x67, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x3a, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x64, 0x69, 0x67, 0x69, 0x74, 0x61,
	0x6c, 0x61, 0x73, 0x73, 0x65, 0x74, 0x2e, 0x63, 0x61, 0x6e, 0x74, 0x6f, 0x6e, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x76, 0x33, 0x30, 0x2e, 0x49, 0x64, 0x65, 0x6e, 0x74,
	0x69, 0x66, 0x69, 0x65, 0x72, 0x44, 0x65, 0x6c, 0x65, 0x67, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x48,
	0x00, 0x52, 0x14, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x44, 0x65, 0x6c,
	0x65, 0x67, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x96, 0x01, 0x0a, 0x22, 0x64, 0x65, 0x63, 0x65,
	0x6e, 0x74, 0x72, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x64, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70,
	0x61, 0x63, 0x65, 0x5f, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x46, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x64, 0x69, 0x67, 0x69, 0x74,
	0x61, 0x6c, 0x61, 0x73, 0x73, 0x65, 0x74, 0x2e, 0x63, 0x61, 0x6e, 0x74, 0x6f, 0x6e, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x76, 0x33, 0x30, 0x2e, 0x44, 0x65, 0x63, 0x65,
	0x6e, 0x74, 0x72, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x64, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61,
	0x63, 0x65, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x00, 0x52, 0x20,
	0x64, 0x65, 0x63, 0x65, 0x6e, 0x74, 0x72, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x64, 0x4e, 0x61, 0x6d,
	0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x6a, 0x0a, 0x14, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x5f, 0x74, 0x6f, 0x5f, 0x6b, 0x65, 0x79,
	0x5f, 0x6d, 0x61, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x37,
	0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x64, 0x69, 0x67, 0x69, 0x74, 0x61, 0x6c, 0x61, 0x73, 0x73, 0x65,
	0x74, 0x2e, 0x63, 0x61, 0x6e, 0x74, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f,
	0x6c, 0x2e, 0x76, 0x33, 0x30, 0x2e, 0x4f, 0x77, 0x6e, 0x65, 0x72, 0x54, 0x6f, 0x4b, 0x65, 0x79,
	0x4d, 0x61, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x48, 0x00, 0x52, 0x11, 0x6f, 0x77, 0x6e, 0x65, 0x72,
	0x54, 0x6f, 0x4b, 0x65, 0x79, 0x4d, 0x61, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x12, 0x78, 0x0a, 0x18,
	0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x5f, 0x74, 0x72, 0x75, 0x73, 0x74, 0x5f, 0x63, 0x65, 0x72,
	0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3c,
	0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x64, 0x69, 0x67, 0x69, 0x74, 0x61, 0x6c, 0x61, 0x73, 0x73, 0x65,
	0x74, 0x2e, 0x63, 0x61, 0x6e, 0x74, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f,
	0x6c, 0x2e, 0x76, 0x33, 0x30, 0x2e, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x54, 0x72, 0x75, 0x73,
	0x74, 0x43, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x48, 0x00, 0x52, 0x16,
	0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x54, 0x72, 0x75, 0x73, 0x74, 0x43, 0x65, 0x72, 0x74, 0x69,
	0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x12, 0x7a, 0x0a, 0x16, 0x70, 0x61, 0x72, 0x74, 0x69, 0x63,
	0x69, 0x70, 0x61, 0x6e, 0x74, 0x5f, 0x70, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x41, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x64, 0x69, 0x67,
	0x69, 0x74, 0x61, 0x6c, 0x61, 0x73, 0x73, 0x65, 0x74, 0x2e, 0x63, 0x61, 0x6e, 0x74, 0x6f, 0x6e,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x76, 0x33, 0x30, 0x2e, 0x50, 0x61,
	0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x50,
	0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x48, 0x00, 0x52, 0x15, 0x70, 0x61, 0x72,
	0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x50, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69,
	0x6f, 0x6e, 0x12, 0x6c, 0x0a, 0x14, 0x70, 0x61, 0x72, 0x74, 0x79, 0x5f, 0x68, 0x6f, 0x73, 0x74,
	0x69, 0x6e, 0x67, 0x5f, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x38, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x64, 0x69, 0x67, 0x69, 0x74, 0x61, 0x6c, 0x61, 0x73,
	0x73, 0x65, 0x74, 0x2e, 0x63, 0x61, 0x6e, 0x74, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x63, 0x6f, 0x6c, 0x2e, 0x76, 0x33, 0x30, 0x2e, 0x50, 0x61, 0x72, 0x74, 0x79, 0x48, 0x6f, 0x73,
	0x74, 0x69, 0x6e, 0x67, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x73, 0x48, 0x00, 0x52, 0x12, 0x70, 0x61,
	0x72, 0x74, 0x79, 0x48, 0x6f, 0x73, 0x74, 0x69, 0x6e, 0x67, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x73,
	0x12, 0x5f, 0x0a, 0x0f, 0x76, 0x65, 0x74, 0x74, 0x65, 0x64, 0x5f, 0x70, 0x61, 0x63, 0x6b, 0x61,
	0x67, 0x65, 0x73, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x34, 0x2e, 0x63, 0x6f, 0x6d, 0x2e,
	0x64, 0x69, 0x67, 0x69, 0x74, 0x61, 0x6c, 0x61, 0x73, 0x73, 0x65, 0x74, 0x2e, 0x63, 0x61, 0x6e,
	0x74, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x76, 0x33, 0x30,
	0x2e, 0x56, 0x65, 0x74, 0x74, 0x65, 0x64, 0x50, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x73, 0x48,
	0x00, 0x52, 0x0e, 0x76, 0x65, 0x74, 0x74, 0x65, 0x64, 0x50, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65,
	0x73, 0x12, 0x6c, 0x0a, 0x14, 0x70, 0x61, 0x72, 0x74, 0x79, 0x5f, 0x74, 0x6f, 0x5f, 0x70, 0x61,
	0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x38, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x64, 0x69, 0x67, 0x69, 0x74, 0x61, 0x6c, 0x61, 0x73, 0x73,
	0x65, 0x74, 0x2e, 0x63, 0x61, 0x6e, 0x74, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63,
	0x6f, 0x6c, 0x2e, 0x76, 0x33, 0x30, 0x2e, 0x50, 0x61, 0x72, 0x74, 0x79, 0x54, 0x6f, 0x50, 0x61,
	0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x48, 0x00, 0x52, 0x12, 0x70, 0x61, 0x72,
	0x74, 0x79, 0x54, 0x6f, 0x50, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x12,
	0x56, 0x0a, 0x0c, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x5f, 0x6f, 0x66, 0x18,
	0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x31, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x64, 0x69, 0x67, 0x69,
	0x74, 0x61, 0x6c, 0x61, 0x73, 0x73, 0x65, 0x74, 0x2e, 0x63, 0x61, 0x6e, 0x74, 0x6f, 0x6e, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x76, 0x33, 0x30, 0x2e, 0x41, 0x75, 0x74,
	0x68, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x4f, 0x66, 0x48, 0x00, 0x52, 0x0b, 0x61, 0x75, 0x74, 0x68,
	0x6f, 0x72, 0x69, 0x74, 0x79, 0x4f, 0x66, 0x12, 0x75, 0x0a, 0x17, 0x64, 0x6f, 0x6d, 0x61, 0x69,
	0x6e, 0x5f, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x5f, 0x73, 0x74, 0x61,
	0x74, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3b, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x64,
	0x69, 0x67, 0x69, 0x74, 0x61, 0x6c, 0x61, 0x73, 0x73, 0x65, 0x74, 0x2e, 0x63, 0x61, 0x6e, 0x74,
	0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x76, 0x33, 0x30, 0x2e,
	0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73,
	0x53, 0x74, 0x61, 0x74, 0x65, 0x48, 0x00, 0x52, 0x15, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x50,
	0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x6f,
	0x0a, 0x15, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x74, 0x6f, 0x72, 0x5f, 0x64, 0x6f, 0x6d, 0x61, 0x69,
	0x6e, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x39, 0x2e,
	0x63, 0x6f, 0x6d, 0x2e, 0x64, 0x69, 0x67, 0x69, 0x74, 0x61, 0x6c, 0x61, 0x73, 0x73, 0x65, 0x74,
	0x2e, 0x63, 0x61, 0x6e, 0x74, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c,
	0x2e, 0x76, 0x33, 0x30, 0x2e, 0x4d, 0x65, 0x64, 0x69, 0x61, 0x74, 0x6f, 0x72, 0x44, 0x6f, 0x6d,
	0x61, 0x69, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x48, 0x00, 0x52, 0x13, 0x6d, 0x65, 0x64, 0x69,
	0x61, 0x74, 0x6f, 0x72, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12,
	0x72, 0x0a, 0x16, 0x73, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x72, 0x5f, 0x64, 0x6f, 0x6d,
	0x61, 0x69, 0x6e, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x3a, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x64, 0x69, 0x67, 0x69, 0x74, 0x61, 0x6c, 0x61, 0x73, 0x73,
	0x65, 0x74, 0x2e, 0x63, 0x61, 0x6e, 0x74, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63,
	0x6f, 0x6c, 0x2e, 0x76, 0x33, 0x30, 0x2e, 0x53, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x72,
	0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x48, 0x00, 0x52, 0x14, 0x73,
	0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x72, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x53, 0x74,
	0x61, 0x74, 0x65, 0x12, 0x6e, 0x0a, 0x12, 0x70, 0x75, 0x72, 0x67, 0x65, 0x5f, 0x74, 0x6f, 0x70,
	0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x5f, 0x74, 0x78, 0x73, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x3e, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x64, 0x69, 0x67, 0x69, 0x74, 0x61, 0x6c, 0x61, 0x73, 0x73,
	0x65, 0x74, 0x2e, 0x63, 0x61, 0x6e, 0x74, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63,
	0x6f, 0x6c, 0x2e, 0x76, 0x33, 0x30, 0x2e, 0x50, 0x75, 0x72, 0x67, 0x65, 0x54, 0x6f, 0x70, 0x6f,
	0x6c, 0x6f, 0x67, 0x79, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x48,
	0x00, 0x52, 0x10, 0x70, 0x75, 0x72, 0x67, 0x65, 0x54, 0x6f, 0x70, 0x6f, 0x6c, 0x6f, 0x67, 0x79,
	0x54, 0x78, 0x73, 0x12, 0x97, 0x01, 0x0a, 0x23, 0x73, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x69,
	0x6e, 0x67, 0x5f, 0x64, 0x79, 0x6e, 0x61, 0x6d, 0x69, 0x63, 0x5f, 0x70, 0x61, 0x72, 0x61, 0x6d,
	0x65, 0x74, 0x65, 0x72, 0x73, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x0f, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x46, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x64, 0x69, 0x67, 0x69, 0x74, 0x61, 0x6c, 0x61,
	0x73, 0x73, 0x65, 0x74, 0x2e, 0x63, 0x61, 0x6e, 0x74, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x76, 0x33, 0x30, 0x2e, 0x44, 0x79, 0x6e, 0x61, 0x6d, 0x69, 0x63,
	0x53, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x69, 0x6e, 0x67, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65,
	0x74, 0x65, 0x72, 0x73, 0x53, 0x74, 0x61, 0x74, 0x65, 0x48, 0x00, 0x52, 0x20, 0x73, 0x65, 0x71,
	0x75, 0x65, 0x6e, 0x63, 0x69, 0x6e, 0x67, 0x44, 0x79, 0x6e, 0x61, 0x6d, 0x69, 0x63, 0x50, 0x61,
	0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x6a, 0x0a,
	0x14, 0x70, 0x61, 0x72, 0x74, 0x79, 0x5f, 0x74, 0x6f, 0x5f, 0x6b, 0x65, 0x79, 0x5f, 0x6d, 0x61,
	0x70, 0x70, 0x69, 0x6e, 0x67, 0x18, 0x10, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x37, 0x2e, 0x63, 0x6f,
	0x6d, 0x2e, 0x64, 0x69, 0x67, 0x69, 0x74, 0x61, 0x6c, 0x61, 0x73, 0x73, 0x65, 0x74, 0x2e, 0x63,
	0x61, 0x6e, 0x74, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x76,
	0x33, 0x30, 0x2e, 0x50, 0x61, 0x72, 0x74, 0x79, 0x54, 0x6f, 0x4b, 0x65, 0x79, 0x4d, 0x61, 0x70,
	0x70, 0x69, 0x6e, 0x67, 0x48, 0x00, 0x52, 0x11, 0x70, 0x61, 0x72, 0x74, 0x79, 0x54, 0x6f, 0x4b,
	0x65, 0x79, 0x4d, 0x61, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x42, 0x09, 0x0a, 0x07, 0x6d, 0x61, 0x70,
	0x70, 0x69, 0x6e, 0x67, 0x22, 0xda, 0x01, 0x0a, 0x13, 0x54, 0x6f, 0x70, 0x6f, 0x6c, 0x6f, 0x67,
	0x79, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x5a, 0x0a, 0x09,
	0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x3c, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x64, 0x69, 0x67, 0x69, 0x74, 0x61, 0x6c, 0x61, 0x73, 0x73,
	0x65, 0x74, 0x2e, 0x63, 0x61, 0x6e, 0x74, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63,
	0x6f, 0x6c, 0x2e, 0x76, 0x33, 0x30, 0x2e, 0x45, 0x6e, 0x75, 0x6d, 0x73, 0x2e, 0x54, 0x6f, 0x70,
	0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x4f, 0x70, 0x52, 0x09, 0x6f,
	0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x65, 0x72, 0x69,
	0x61, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x73, 0x65, 0x72, 0x69, 0x61, 0x6c,
	0x12, 0x4f, 0x0a, 0x07, 0x6d, 0x61, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x35, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x64, 0x69, 0x67, 0x69, 0x74, 0x61, 0x6c, 0x61,
	0x73, 0x73, 0x65, 0x74, 0x2e, 0x63, 0x61, 0x6e, 0x74, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x76, 0x33, 0x30, 0x2e, 0x54, 0x6f, 0x70, 0x6f, 0x6c, 0x6f, 0x67,
	0x79, 0x4d, 0x61, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x52, 0x07, 0x6d, 0x61, 0x70, 0x70, 0x69, 0x6e,
	0x67, 0x22, 0xa8, 0x01, 0x0a, 0x19, 0x53, 0x69, 0x67, 0x6e, 0x65, 0x64, 0x54, 0x6f, 0x70, 0x6f,
	0x6c, 0x6f, 0x67, 0x79, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x20, 0x0a, 0x0b, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0c, 0x52, 0x0b, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x4d, 0x0a, 0x0a, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x73, 0x18,
	0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x64, 0x69, 0x67, 0x69,
	0x74, 0x61, 0x6c, 0x61, 0x73, 0x73, 0x65, 0x74, 0x2e, 0x63, 0x61, 0x6e, 0x74, 0x6f, 0x6e, 0x2e,
	0x63, 0x72, 0x79, 0x70, 0x74, 0x6f, 0x2e, 0x76, 0x33, 0x30, 0x2e, 0x53, 0x69, 0x67, 0x6e, 0x61,
	0x74, 0x75, 0x72, 0x65, 0x52, 0x0a, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x73,
	0x12, 0x1a, 0x0a, 0x08, 0x70, 0x72, 0x6f, 0x70, 0x6f, 0x73, 0x61, 0x6c, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x08, 0x70, 0x72, 0x6f, 0x70, 0x6f, 0x73, 0x61, 0x6c, 0x22, 0xbc, 0x02, 0x0a,
	0x1d, 0x54, 0x6f, 0x70, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x42, 0x72, 0x6f, 0x61, 0x64, 0x63, 0x61, 0x73, 0x74, 0x12, 0x16,
	0x0a, 0x06, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06,
	0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x12, 0x6d, 0x0a, 0x0a, 0x62, 0x72, 0x6f, 0x61, 0x64, 0x63,
	0x61, 0x73, 0x74, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x4d, 0x2e, 0x63, 0x6f, 0x6d,
	0x2e, 0x64, 0x69, 0x67, 0x69, 0x74, 0x61, 0x6c, 0x61, 0x73, 0x73, 0x65, 0x74, 0x2e, 0x63, 0x61,
	0x6e, 0x74, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x76, 0x33,
	0x30, 0x2e, 0x54, 0x6f, 0x70, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x42, 0x72, 0x6f, 0x61, 0x64, 0x63, 0x61, 0x73, 0x74, 0x2e,
	0x42, 0x72, 0x6f, 0x61, 0x64, 0x63, 0x61, 0x73, 0x74, 0x52, 0x0a, 0x62, 0x72, 0x6f, 0x61, 0x64,
	0x63, 0x61, 0x73, 0x74, 0x73, 0x1a, 0x93, 0x01, 0x0a, 0x09, 0x42, 0x72, 0x6f, 0x61, 0x64, 0x63,
	0x61, 0x73, 0x74, 0x12, 0x21, 0x0a, 0x0c, 0x62, 0x72, 0x6f, 0x61, 0x64, 0x63, 0x61, 0x73, 0x74,
	0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x62, 0x72, 0x6f, 0x61, 0x64,
	0x63, 0x61, 0x73, 0x74, 0x49, 0x64, 0x12, 0x63, 0x0a, 0x0c, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x3f, 0x2e, 0x63,
	0x6f, 0x6d, 0x2e, 0x64, 0x69, 0x67, 0x69, 0x74, 0x61, 0x6c, 0x61, 0x73, 0x73, 0x65, 0x74, 0x2e,
	0x63, 0x61, 0x6e, 0x74, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e,
	0x76, 0x33, 0x30, 0x2e, 0x53, 0x69, 0x67, 0x6e, 0x65, 0x64, 0x54, 0x6f, 0x70, 0x6f, 0x6c, 0x6f,
	0x67, 0x79, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0c, 0x74,
	0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x42, 0x55, 0x5a, 0x53, 0x67,
	0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x64, 0x69, 0x67, 0x69, 0x74, 0x61,
	0x6c, 0x2d, 0x61, 0x73, 0x73, 0x65, 0x74, 0x2f, 0x64, 0x61, 0x7a, 0x6c, 0x2d, 0x63, 0x6c, 0x69,
	0x65, 0x6e, 0x74, 0x2f, 0x76, 0x38, 0x2f, 0x67, 0x6f, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x63, 0x6f,
	0x6d, 0x2f, 0x64, 0x69, 0x67, 0x69, 0x74, 0x61, 0x6c, 0x61, 0x73, 0x73, 0x65, 0x74, 0x2f, 0x63,
	0x61, 0x6e, 0x74, 0x6f, 0x6e, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2f, 0x76,
	0x33, 0x30, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_com_digitalasset_canton_protocol_v30_topology_proto_rawDescOnce sync.Once
	file_com_digitalasset_canton_protocol_v30_topology_proto_rawDescData = file_com_digitalasset_canton_protocol_v30_topology_proto_rawDesc
)

func file_com_digitalasset_canton_protocol_v30_topology_proto_rawDescGZIP() []byte {
	file_com_digitalasset_canton_protocol_v30_topology_proto_rawDescOnce.Do(func() {
		file_com_digitalasset_canton_protocol_v30_topology_proto_rawDescData = protoimpl.X.CompressGZIP(file_com_digitalasset_canton_protocol_v30_topology_proto_rawDescData)
	})
	return file_com_digitalasset_canton_protocol_v30_topology_proto_rawDescData
}

var file_com_digitalasset_canton_protocol_v30_topology_proto_enumTypes = make([]protoimpl.EnumInfo, 2)
var file_com_digitalasset_canton_protocol_v30_topology_proto_msgTypes = make([]protoimpl.MessageInfo, 23)
var file_com_digitalasset_canton_protocol_v30_topology_proto_goTypes = []any{
	(Enums_TopologyChangeOp)(0),                     // 0: com.digitalasset.canton.protocol.v30.Enums.TopologyChangeOp
	(Enums_ParticipantPermission)(0),                // 1: com.digitalasset.canton.protocol.v30.Enums.ParticipantPermission
	(*Enums)(nil),                                   // 2: com.digitalasset.canton.protocol.v30.Enums
	(*NamespaceDelegation)(nil),                     // 3: com.digitalasset.canton.protocol.v30.NamespaceDelegation
	(*DecentralizedNamespaceDefinition)(nil),        // 4: com.digitalasset.canton.protocol.v30.DecentralizedNamespaceDefinition
	(*IdentifierDelegation)(nil),                    // 5: com.digitalasset.canton.protocol.v30.IdentifierDelegation
	(*OwnerToKeyMapping)(nil),                       // 6: com.digitalasset.canton.protocol.v30.OwnerToKeyMapping
	(*PartyToKeyMapping)(nil),                       // 7: com.digitalasset.canton.protocol.v30.PartyToKeyMapping
	(*DomainTrustCertificate)(nil),                  // 8: com.digitalasset.canton.protocol.v30.DomainTrustCertificate
	(*ParticipantDomainPermission)(nil),             // 9: com.digitalasset.canton.protocol.v30.ParticipantDomainPermission
	(*PartyHostingLimits)(nil),                      // 10: com.digitalasset.canton.protocol.v30.PartyHostingLimits
	(*VettedPackages)(nil),                          // 11: com.digitalasset.canton.protocol.v30.VettedPackages
	(*PartyToParticipant)(nil),                      // 12: com.digitalasset.canton.protocol.v30.PartyToParticipant
	(*AuthorityOf)(nil),                             // 13: com.digitalasset.canton.protocol.v30.AuthorityOf
	(*DomainParametersState)(nil),                   // 14: com.digitalasset.canton.protocol.v30.DomainParametersState
	(*DynamicSequencingParametersState)(nil),        // 15: com.digitalasset.canton.protocol.v30.DynamicSequencingParametersState
	(*MediatorDomainState)(nil),                     // 16: com.digitalasset.canton.protocol.v30.MediatorDomainState
	(*SequencerDomainState)(nil),                    // 17: com.digitalasset.canton.protocol.v30.SequencerDomainState
	(*PurgeTopologyTransaction)(nil),                // 18: com.digitalasset.canton.protocol.v30.PurgeTopologyTransaction
	(*TopologyMapping)(nil),                         // 19: com.digitalasset.canton.protocol.v30.TopologyMapping
	(*TopologyTransaction)(nil),                     // 20: com.digitalasset.canton.protocol.v30.TopologyTransaction
	(*SignedTopologyTransaction)(nil),               // 21: com.digitalasset.canton.protocol.v30.SignedTopologyTransaction
	(*TopologyTransactionsBroadcast)(nil),           // 22: com.digitalasset.canton.protocol.v30.TopologyTransactionsBroadcast
	(*PartyToParticipant_HostingParticipant)(nil),   // 23: com.digitalasset.canton.protocol.v30.PartyToParticipant.HostingParticipant
	(*TopologyTransactionsBroadcast_Broadcast)(nil), // 24: com.digitalasset.canton.protocol.v30.TopologyTransactionsBroadcast.Broadcast
	(*v30.SigningPublicKey)(nil),                    // 25: com.digitalasset.canton.crypto.v30.SigningPublicKey
	(*v30.PublicKey)(nil),                           // 26: com.digitalasset.canton.crypto.v30.PublicKey
	(*ParticipantDomainLimits)(nil),                 // 27: com.digitalasset.canton.protocol.v30.ParticipantDomainLimits
	(*wrapperspb.Int64Value)(nil),                   // 28: google.protobuf.Int64Value
	(*DynamicDomainParameters)(nil),                 // 29: com.digitalasset.canton.protocol.v30.DynamicDomainParameters
	(*DynamicSequencingParameters)(nil),             // 30: com.digitalasset.canton.protocol.v30.DynamicSequencingParameters
	(*v30.Signature)(nil),                           // 31: com.digitalasset.canton.crypto.v30.Signature
}
var file_com_digitalasset_canton_protocol_v30_topology_proto_depIdxs = []int32{
	25, // 0: com.digitalasset.canton.protocol.v30.NamespaceDelegation.target_key:type_name -> com.digitalasset.canton.crypto.v30.SigningPublicKey
	25, // 1: com.digitalasset.canton.protocol.v30.IdentifierDelegation.target_key:type_name -> com.digitalasset.canton.crypto.v30.SigningPublicKey
	26, // 2: com.digitalasset.canton.protocol.v30.OwnerToKeyMapping.public_keys:type_name -> com.digitalasset.canton.crypto.v30.PublicKey
	25, // 3: com.digitalasset.canton.protocol.v30.PartyToKeyMapping.signing_keys:type_name -> com.digitalasset.canton.crypto.v30.SigningPublicKey
	1,  // 4: com.digitalasset.canton.protocol.v30.ParticipantDomainPermission.permission:type_name -> com.digitalasset.canton.protocol.v30.Enums.ParticipantPermission
	27, // 5: com.digitalasset.canton.protocol.v30.ParticipantDomainPermission.limits:type_name -> com.digitalasset.canton.protocol.v30.ParticipantDomainLimits
	28, // 6: com.digitalasset.canton.protocol.v30.ParticipantDomainPermission.login_after:type_name -> google.protobuf.Int64Value
	23, // 7: com.digitalasset.canton.protocol.v30.PartyToParticipant.participants:type_name -> com.digitalasset.canton.protocol.v30.PartyToParticipant.HostingParticipant
	29, // 8: com.digitalasset.canton.protocol.v30.DomainParametersState.domain_parameters:type_name -> com.digitalasset.canton.protocol.v30.DynamicDomainParameters
	30, // 9: com.digitalasset.canton.protocol.v30.DynamicSequencingParametersState.sequencing_parameters:type_name -> com.digitalasset.canton.protocol.v30.DynamicSequencingParameters
	19, // 10: com.digitalasset.canton.protocol.v30.PurgeTopologyTransaction.mappings:type_name -> com.digitalasset.canton.protocol.v30.TopologyMapping
	3,  // 11: com.digitalasset.canton.protocol.v30.TopologyMapping.namespace_delegation:type_name -> com.digitalasset.canton.protocol.v30.NamespaceDelegation
	5,  // 12: com.digitalasset.canton.protocol.v30.TopologyMapping.identifier_delegation:type_name -> com.digitalasset.canton.protocol.v30.IdentifierDelegation
	4,  // 13: com.digitalasset.canton.protocol.v30.TopologyMapping.decentralized_namespace_definition:type_name -> com.digitalasset.canton.protocol.v30.DecentralizedNamespaceDefinition
	6,  // 14: com.digitalasset.canton.protocol.v30.TopologyMapping.owner_to_key_mapping:type_name -> com.digitalasset.canton.protocol.v30.OwnerToKeyMapping
	8,  // 15: com.digitalasset.canton.protocol.v30.TopologyMapping.domain_trust_certificate:type_name -> com.digitalasset.canton.protocol.v30.DomainTrustCertificate
	9,  // 16: com.digitalasset.canton.protocol.v30.TopologyMapping.participant_permission:type_name -> com.digitalasset.canton.protocol.v30.ParticipantDomainPermission
	10, // 17: com.digitalasset.canton.protocol.v30.TopologyMapping.party_hosting_limits:type_name -> com.digitalasset.canton.protocol.v30.PartyHostingLimits
	11, // 18: com.digitalasset.canton.protocol.v30.TopologyMapping.vetted_packages:type_name -> com.digitalasset.canton.protocol.v30.VettedPackages
	12, // 19: com.digitalasset.canton.protocol.v30.TopologyMapping.party_to_participant:type_name -> com.digitalasset.canton.protocol.v30.PartyToParticipant
	13, // 20: com.digitalasset.canton.protocol.v30.TopologyMapping.authority_of:type_name -> com.digitalasset.canton.protocol.v30.AuthorityOf
	14, // 21: com.digitalasset.canton.protocol.v30.TopologyMapping.domain_parameters_state:type_name -> com.digitalasset.canton.protocol.v30.DomainParametersState
	16, // 22: com.digitalasset.canton.protocol.v30.TopologyMapping.mediator_domain_state:type_name -> com.digitalasset.canton.protocol.v30.MediatorDomainState
	17, // 23: com.digitalasset.canton.protocol.v30.TopologyMapping.sequencer_domain_state:type_name -> com.digitalasset.canton.protocol.v30.SequencerDomainState
	18, // 24: com.digitalasset.canton.protocol.v30.TopologyMapping.purge_topology_txs:type_name -> com.digitalasset.canton.protocol.v30.PurgeTopologyTransaction
	15, // 25: com.digitalasset.canton.protocol.v30.TopologyMapping.sequencing_dynamic_parameters_state:type_name -> com.digitalasset.canton.protocol.v30.DynamicSequencingParametersState
	7,  // 26: com.digitalasset.canton.protocol.v30.TopologyMapping.party_to_key_mapping:type_name -> com.digitalasset.canton.protocol.v30.PartyToKeyMapping
	0,  // 27: com.digitalasset.canton.protocol.v30.TopologyTransaction.operation:type_name -> com.digitalasset.canton.protocol.v30.Enums.TopologyChangeOp
	19, // 28: com.digitalasset.canton.protocol.v30.TopologyTransaction.mapping:type_name -> com.digitalasset.canton.protocol.v30.TopologyMapping
	31, // 29: com.digitalasset.canton.protocol.v30.SignedTopologyTransaction.signatures:type_name -> com.digitalasset.canton.crypto.v30.Signature
	24, // 30: com.digitalasset.canton.protocol.v30.TopologyTransactionsBroadcast.broadcasts:type_name -> com.digitalasset.canton.protocol.v30.TopologyTransactionsBroadcast.Broadcast
	1,  // 31: com.digitalasset.canton.protocol.v30.PartyToParticipant.HostingParticipant.permission:type_name -> com.digitalasset.canton.protocol.v30.Enums.ParticipantPermission
	21, // 32: com.digitalasset.canton.protocol.v30.TopologyTransactionsBroadcast.Broadcast.transactions:type_name -> com.digitalasset.canton.protocol.v30.SignedTopologyTransaction
	33, // [33:33] is the sub-list for method output_type
	33, // [33:33] is the sub-list for method input_type
	33, // [33:33] is the sub-list for extension type_name
	33, // [33:33] is the sub-list for extension extendee
	0,  // [0:33] is the sub-list for field type_name
}

func init() { file_com_digitalasset_canton_protocol_v30_topology_proto_init() }
func file_com_digitalasset_canton_protocol_v30_topology_proto_init() {
	if File_com_digitalasset_canton_protocol_v30_topology_proto != nil {
		return
	}
	file_com_digitalasset_canton_protocol_v30_domain_parameters_proto_init()
	file_com_digitalasset_canton_protocol_v30_sequencing_parameters_proto_init()
	file_com_digitalasset_canton_protocol_v30_topology_proto_msgTypes[17].OneofWrappers = []any{
		(*TopologyMapping_NamespaceDelegation)(nil),
		(*TopologyMapping_IdentifierDelegation)(nil),
		(*TopologyMapping_DecentralizedNamespaceDefinition)(nil),
		(*TopologyMapping_OwnerToKeyMapping)(nil),
		(*TopologyMapping_DomainTrustCertificate)(nil),
		(*TopologyMapping_ParticipantPermission)(nil),
		(*TopologyMapping_PartyHostingLimits)(nil),
		(*TopologyMapping_VettedPackages)(nil),
		(*TopologyMapping_PartyToParticipant)(nil),
		(*TopologyMapping_AuthorityOf)(nil),
		(*TopologyMapping_DomainParametersState)(nil),
		(*TopologyMapping_MediatorDomainState)(nil),
		(*TopologyMapping_SequencerDomainState)(nil),
		(*TopologyMapping_PurgeTopologyTxs)(nil),
		(*TopologyMapping_SequencingDynamicParametersState)(nil),
		(*TopologyMapping_PartyToKeyMapping)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_com_digitalasset_canton_protocol_v30_topology_proto_rawDesc,
			NumEnums:      2,
			NumMessages:   23,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_com_digitalasset_canton_protocol_v30_topology_proto_goTypes,
		DependencyIndexes: file_com_digitalasset_canton_protocol_v30_topology_proto_depIdxs,
		EnumInfos:         file_com_digitalasset_canton_protocol_v30_topology_proto_enumTypes,
		MessageInfos:      file_com_digitalasset_canton_protocol_v30_topology_proto_msgTypes,
	}.Build()
	File_com_digitalasset_canton_protocol_v30_topology_proto = out.File
	file_com_digitalasset_canton_protocol_v30_topology_proto_rawDesc = nil
	file_com_digitalasset_canton_protocol_v30_topology_proto_goTypes = nil
	file_com_digitalasset_canton_protocol_v30_topology_proto_depIdxs = nil
}
