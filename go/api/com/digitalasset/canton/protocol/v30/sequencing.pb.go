// Copyright (c) 2017-2025 Digital Asset (Switzerland) GmbH and/or its affiliates. All rights reserved.
// SPDX-License-Identifier: Apache-2.0
// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.6
// 	protoc        v6.30.0
// source: com/digitalasset/canton/protocol/v30/sequencing.proto

package v30

import (
	v301 "github.com/digital-asset/dazl-client/v8/go/api/com/digitalasset/canton/crypto/v30"
	v30 "github.com/digital-asset/dazl-client/v8/go/api/com/digitalasset/canton/v30"
	status "google.golang.org/genproto/googleapis/rpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type CompressedBatch_CompressionAlgorithm int32

const (
	CompressedBatch_COMPRESSION_ALGORITHM_UNSPECIFIED CompressedBatch_CompressionAlgorithm = 0
	CompressedBatch_COMPRESSION_ALGORITHM_GZIP        CompressedBatch_CompressionAlgorithm = 1
)

// Enum value maps for CompressedBatch_CompressionAlgorithm.
var (
	CompressedBatch_CompressionAlgorithm_name = map[int32]string{
		0: "COMPRESSION_ALGORITHM_UNSPECIFIED",
		1: "COMPRESSION_ALGORITHM_GZIP",
	}
	CompressedBatch_CompressionAlgorithm_value = map[string]int32{
		"COMPRESSION_ALGORITHM_UNSPECIFIED": 0,
		"COMPRESSION_ALGORITHM_GZIP":        1,
	}
)

func (x CompressedBatch_CompressionAlgorithm) Enum() *CompressedBatch_CompressionAlgorithm {
	p := new(CompressedBatch_CompressionAlgorithm)
	*p = x
	return p
}

func (x CompressedBatch_CompressionAlgorithm) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CompressedBatch_CompressionAlgorithm) Descriptor() protoreflect.EnumDescriptor {
	return file_com_digitalasset_canton_protocol_v30_sequencing_proto_enumTypes[0].Descriptor()
}

func (CompressedBatch_CompressionAlgorithm) Type() protoreflect.EnumType {
	return &file_com_digitalasset_canton_protocol_v30_sequencing_proto_enumTypes[0]
}

func (x CompressedBatch_CompressionAlgorithm) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use CompressedBatch_CompressionAlgorithm.Descriptor instead.
func (CompressedBatch_CompressionAlgorithm) EnumDescriptor() ([]byte, []int) {
	return file_com_digitalasset_canton_protocol_v30_sequencing_proto_rawDescGZIP(), []int{8, 0}
}

type PossiblyIgnoredSequencedEvent struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Counter       int64                  `protobuf:"varint,1,opt,name=counter,proto3" json:"counter,omitempty"`
	Timestamp     int64                  `protobuf:"varint,2,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	TraceContext  *v30.TraceContext      `protobuf:"bytes,3,opt,name=trace_context,json=traceContext,proto3" json:"trace_context,omitempty"`
	IsIgnored     bool                   `protobuf:"varint,4,opt,name=is_ignored,json=isIgnored,proto3" json:"is_ignored,omitempty"`
	Underlying    []byte                 `protobuf:"bytes,5,opt,name=underlying,proto3,oneof" json:"underlying,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *PossiblyIgnoredSequencedEvent) Reset() {
	*x = PossiblyIgnoredSequencedEvent{}
	mi := &file_com_digitalasset_canton_protocol_v30_sequencing_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PossiblyIgnoredSequencedEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PossiblyIgnoredSequencedEvent) ProtoMessage() {}

func (x *PossiblyIgnoredSequencedEvent) ProtoReflect() protoreflect.Message {
	mi := &file_com_digitalasset_canton_protocol_v30_sequencing_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PossiblyIgnoredSequencedEvent.ProtoReflect.Descriptor instead.
func (*PossiblyIgnoredSequencedEvent) Descriptor() ([]byte, []int) {
	return file_com_digitalasset_canton_protocol_v30_sequencing_proto_rawDescGZIP(), []int{0}
}

func (x *PossiblyIgnoredSequencedEvent) GetCounter() int64 {
	if x != nil {
		return x.Counter
	}
	return 0
}

func (x *PossiblyIgnoredSequencedEvent) GetTimestamp() int64 {
	if x != nil {
		return x.Timestamp
	}
	return 0
}

func (x *PossiblyIgnoredSequencedEvent) GetTraceContext() *v30.TraceContext {
	if x != nil {
		return x.TraceContext
	}
	return nil
}

func (x *PossiblyIgnoredSequencedEvent) GetIsIgnored() bool {
	if x != nil {
		return x.IsIgnored
	}
	return false
}

func (x *PossiblyIgnoredSequencedEvent) GetUnderlying() []byte {
	if x != nil {
		return x.Underlying
	}
	return nil
}

type RecipientsTree struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Recipients    []string               `protobuf:"bytes,1,rep,name=recipients,proto3" json:"recipients,omitempty"`
	Children      []*RecipientsTree      `protobuf:"bytes,2,rep,name=children,proto3" json:"children,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *RecipientsTree) Reset() {
	*x = RecipientsTree{}
	mi := &file_com_digitalasset_canton_protocol_v30_sequencing_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RecipientsTree) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RecipientsTree) ProtoMessage() {}

func (x *RecipientsTree) ProtoReflect() protoreflect.Message {
	mi := &file_com_digitalasset_canton_protocol_v30_sequencing_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RecipientsTree.ProtoReflect.Descriptor instead.
func (*RecipientsTree) Descriptor() ([]byte, []int) {
	return file_com_digitalasset_canton_protocol_v30_sequencing_proto_rawDescGZIP(), []int{1}
}

func (x *RecipientsTree) GetRecipients() []string {
	if x != nil {
		return x.Recipients
	}
	return nil
}

func (x *RecipientsTree) GetChildren() []*RecipientsTree {
	if x != nil {
		return x.Children
	}
	return nil
}

type Recipients struct {
	state          protoimpl.MessageState `protogen:"open.v1"`
	RecipientsTree []*RecipientsTree      `protobuf:"bytes,1,rep,name=recipients_tree,json=recipientsTree,proto3" json:"recipients_tree,omitempty"`
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *Recipients) Reset() {
	*x = Recipients{}
	mi := &file_com_digitalasset_canton_protocol_v30_sequencing_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Recipients) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Recipients) ProtoMessage() {}

func (x *Recipients) ProtoReflect() protoreflect.Message {
	mi := &file_com_digitalasset_canton_protocol_v30_sequencing_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Recipients.ProtoReflect.Descriptor instead.
func (*Recipients) Descriptor() ([]byte, []int) {
	return file_com_digitalasset_canton_protocol_v30_sequencing_proto_rawDescGZIP(), []int{2}
}

func (x *Recipients) GetRecipientsTree() []*RecipientsTree {
	if x != nil {
		return x.RecipientsTree
	}
	return nil
}

type ServiceAgreement struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Id            string                 `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	LegalText     string                 `protobuf:"bytes,2,opt,name=legal_text,json=legalText,proto3" json:"legal_text,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ServiceAgreement) Reset() {
	*x = ServiceAgreement{}
	mi := &file_com_digitalasset_canton_protocol_v30_sequencing_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ServiceAgreement) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ServiceAgreement) ProtoMessage() {}

func (x *ServiceAgreement) ProtoReflect() protoreflect.Message {
	mi := &file_com_digitalasset_canton_protocol_v30_sequencing_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ServiceAgreement.ProtoReflect.Descriptor instead.
func (*ServiceAgreement) Descriptor() ([]byte, []int) {
	return file_com_digitalasset_canton_protocol_v30_sequencing_proto_rawDescGZIP(), []int{3}
}

func (x *ServiceAgreement) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *ServiceAgreement) GetLegalText() string {
	if x != nil {
		return x.LegalText
	}
	return ""
}

type SequencingSubmissionCost struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Cost          int64                  `protobuf:"varint,1,opt,name=cost,proto3" json:"cost,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SequencingSubmissionCost) Reset() {
	*x = SequencingSubmissionCost{}
	mi := &file_com_digitalasset_canton_protocol_v30_sequencing_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SequencingSubmissionCost) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SequencingSubmissionCost) ProtoMessage() {}

func (x *SequencingSubmissionCost) ProtoReflect() protoreflect.Message {
	mi := &file_com_digitalasset_canton_protocol_v30_sequencing_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SequencingSubmissionCost.ProtoReflect.Descriptor instead.
func (*SequencingSubmissionCost) Descriptor() ([]byte, []int) {
	return file_com_digitalasset_canton_protocol_v30_sequencing_proto_rawDescGZIP(), []int{4}
}

func (x *SequencingSubmissionCost) GetCost() int64 {
	if x != nil {
		return x.Cost
	}
	return 0
}

type StaticSynchronizerParameters struct {
	state                       protoimpl.MessageState        `protogen:"open.v1"`
	RequiredSigningSpecs        *v301.RequiredSigningSpecs    `protobuf:"bytes,1,opt,name=required_signing_specs,json=requiredSigningSpecs,proto3" json:"required_signing_specs,omitempty"`
	RequiredEncryptionSpecs     *v301.RequiredEncryptionSpecs `protobuf:"bytes,2,opt,name=required_encryption_specs,json=requiredEncryptionSpecs,proto3" json:"required_encryption_specs,omitempty"`
	RequiredSymmetricKeySchemes []v301.SymmetricKeyScheme     `protobuf:"varint,3,rep,packed,name=required_symmetric_key_schemes,json=requiredSymmetricKeySchemes,proto3,enum=com.digitalasset.canton.crypto.v30.SymmetricKeyScheme" json:"required_symmetric_key_schemes,omitempty"`
	RequiredHashAlgorithms      []v301.HashAlgorithm          `protobuf:"varint,4,rep,packed,name=required_hash_algorithms,json=requiredHashAlgorithms,proto3,enum=com.digitalasset.canton.crypto.v30.HashAlgorithm" json:"required_hash_algorithms,omitempty"`
	RequiredCryptoKeyFormats    []v301.CryptoKeyFormat        `protobuf:"varint,5,rep,packed,name=required_crypto_key_formats,json=requiredCryptoKeyFormats,proto3,enum=com.digitalasset.canton.crypto.v30.CryptoKeyFormat" json:"required_crypto_key_formats,omitempty"`
	RequiredSignatureFormats    []v301.SignatureFormat        `protobuf:"varint,6,rep,packed,name=required_signature_formats,json=requiredSignatureFormats,proto3,enum=com.digitalasset.canton.crypto.v30.SignatureFormat" json:"required_signature_formats,omitempty"`
	ProtocolVersion             int32                         `protobuf:"varint,7,opt,name=protocol_version,json=protocolVersion,proto3" json:"protocol_version,omitempty"`
	unknownFields               protoimpl.UnknownFields
	sizeCache                   protoimpl.SizeCache
}

func (x *StaticSynchronizerParameters) Reset() {
	*x = StaticSynchronizerParameters{}
	mi := &file_com_digitalasset_canton_protocol_v30_sequencing_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *StaticSynchronizerParameters) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StaticSynchronizerParameters) ProtoMessage() {}

func (x *StaticSynchronizerParameters) ProtoReflect() protoreflect.Message {
	mi := &file_com_digitalasset_canton_protocol_v30_sequencing_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StaticSynchronizerParameters.ProtoReflect.Descriptor instead.
func (*StaticSynchronizerParameters) Descriptor() ([]byte, []int) {
	return file_com_digitalasset_canton_protocol_v30_sequencing_proto_rawDescGZIP(), []int{5}
}

func (x *StaticSynchronizerParameters) GetRequiredSigningSpecs() *v301.RequiredSigningSpecs {
	if x != nil {
		return x.RequiredSigningSpecs
	}
	return nil
}

func (x *StaticSynchronizerParameters) GetRequiredEncryptionSpecs() *v301.RequiredEncryptionSpecs {
	if x != nil {
		return x.RequiredEncryptionSpecs
	}
	return nil
}

func (x *StaticSynchronizerParameters) GetRequiredSymmetricKeySchemes() []v301.SymmetricKeyScheme {
	if x != nil {
		return x.RequiredSymmetricKeySchemes
	}
	return nil
}

func (x *StaticSynchronizerParameters) GetRequiredHashAlgorithms() []v301.HashAlgorithm {
	if x != nil {
		return x.RequiredHashAlgorithms
	}
	return nil
}

func (x *StaticSynchronizerParameters) GetRequiredCryptoKeyFormats() []v301.CryptoKeyFormat {
	if x != nil {
		return x.RequiredCryptoKeyFormats
	}
	return nil
}

func (x *StaticSynchronizerParameters) GetRequiredSignatureFormats() []v301.SignatureFormat {
	if x != nil {
		return x.RequiredSignatureFormats
	}
	return nil
}

func (x *StaticSynchronizerParameters) GetProtocolVersion() int32 {
	if x != nil {
		return x.ProtocolVersion
	}
	return 0
}

type Envelope struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Content       []byte                 `protobuf:"bytes,1,opt,name=content,proto3" json:"content,omitempty"`
	Recipients    *Recipients            `protobuf:"bytes,2,opt,name=recipients,proto3" json:"recipients,omitempty"`
	Signatures    []*v301.Signature      `protobuf:"bytes,3,rep,name=signatures,proto3" json:"signatures,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Envelope) Reset() {
	*x = Envelope{}
	mi := &file_com_digitalasset_canton_protocol_v30_sequencing_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Envelope) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Envelope) ProtoMessage() {}

func (x *Envelope) ProtoReflect() protoreflect.Message {
	mi := &file_com_digitalasset_canton_protocol_v30_sequencing_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Envelope.ProtoReflect.Descriptor instead.
func (*Envelope) Descriptor() ([]byte, []int) {
	return file_com_digitalasset_canton_protocol_v30_sequencing_proto_rawDescGZIP(), []int{6}
}

func (x *Envelope) GetContent() []byte {
	if x != nil {
		return x.Content
	}
	return nil
}

func (x *Envelope) GetRecipients() *Recipients {
	if x != nil {
		return x.Recipients
	}
	return nil
}

func (x *Envelope) GetSignatures() []*v301.Signature {
	if x != nil {
		return x.Signatures
	}
	return nil
}

type Batch struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Envelopes     []*Envelope            `protobuf:"bytes,1,rep,name=envelopes,proto3" json:"envelopes,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Batch) Reset() {
	*x = Batch{}
	mi := &file_com_digitalasset_canton_protocol_v30_sequencing_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Batch) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Batch) ProtoMessage() {}

func (x *Batch) ProtoReflect() protoreflect.Message {
	mi := &file_com_digitalasset_canton_protocol_v30_sequencing_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Batch.ProtoReflect.Descriptor instead.
func (*Batch) Descriptor() ([]byte, []int) {
	return file_com_digitalasset_canton_protocol_v30_sequencing_proto_rawDescGZIP(), []int{7}
}

func (x *Batch) GetEnvelopes() []*Envelope {
	if x != nil {
		return x.Envelopes
	}
	return nil
}

type CompressedBatch struct {
	state           protoimpl.MessageState               `protogen:"open.v1"`
	Algorithm       CompressedBatch_CompressionAlgorithm `protobuf:"varint,1,opt,name=algorithm,proto3,enum=com.digitalasset.canton.protocol.v30.CompressedBatch_CompressionAlgorithm" json:"algorithm,omitempty"`
	CompressedBatch []byte                               `protobuf:"bytes,2,opt,name=compressed_batch,json=compressedBatch,proto3" json:"compressed_batch,omitempty"`
	unknownFields   protoimpl.UnknownFields
	sizeCache       protoimpl.SizeCache
}

func (x *CompressedBatch) Reset() {
	*x = CompressedBatch{}
	mi := &file_com_digitalasset_canton_protocol_v30_sequencing_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CompressedBatch) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CompressedBatch) ProtoMessage() {}

func (x *CompressedBatch) ProtoReflect() protoreflect.Message {
	mi := &file_com_digitalasset_canton_protocol_v30_sequencing_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CompressedBatch.ProtoReflect.Descriptor instead.
func (*CompressedBatch) Descriptor() ([]byte, []int) {
	return file_com_digitalasset_canton_protocol_v30_sequencing_proto_rawDescGZIP(), []int{8}
}

func (x *CompressedBatch) GetAlgorithm() CompressedBatch_CompressionAlgorithm {
	if x != nil {
		return x.Algorithm
	}
	return CompressedBatch_COMPRESSION_ALGORITHM_UNSPECIFIED
}

func (x *CompressedBatch) GetCompressedBatch() []byte {
	if x != nil {
		return x.CompressedBatch
	}
	return nil
}

type SequencedEvent struct {
	state              protoimpl.MessageState `protogen:"open.v1"`
	PreviousTimestamp  *int64                 `protobuf:"varint,9,opt,name=previous_timestamp,json=previousTimestamp,proto3,oneof" json:"previous_timestamp,omitempty"`
	Timestamp          int64                  `protobuf:"varint,2,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	SynchronizerId     string                 `protobuf:"bytes,3,opt,name=synchronizer_id,json=synchronizerId,proto3" json:"synchronizer_id,omitempty"`
	MessageId          *string                `protobuf:"bytes,4,opt,name=message_id,json=messageId,proto3,oneof" json:"message_id,omitempty"`
	Batch              *CompressedBatch       `protobuf:"bytes,5,opt,name=batch,proto3" json:"batch,omitempty"`
	DeliverErrorReason *status.Status         `protobuf:"bytes,6,opt,name=deliver_error_reason,json=deliverErrorReason,proto3" json:"deliver_error_reason,omitempty"`
	TopologyTimestamp  *int64                 `protobuf:"varint,7,opt,name=topology_timestamp,json=topologyTimestamp,proto3,oneof" json:"topology_timestamp,omitempty"`
	TrafficReceipt     *TrafficReceipt        `protobuf:"bytes,8,opt,name=traffic_receipt,json=trafficReceipt,proto3" json:"traffic_receipt,omitempty"`
	unknownFields      protoimpl.UnknownFields
	sizeCache          protoimpl.SizeCache
}

func (x *SequencedEvent) Reset() {
	*x = SequencedEvent{}
	mi := &file_com_digitalasset_canton_protocol_v30_sequencing_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SequencedEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SequencedEvent) ProtoMessage() {}

func (x *SequencedEvent) ProtoReflect() protoreflect.Message {
	mi := &file_com_digitalasset_canton_protocol_v30_sequencing_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SequencedEvent.ProtoReflect.Descriptor instead.
func (*SequencedEvent) Descriptor() ([]byte, []int) {
	return file_com_digitalasset_canton_protocol_v30_sequencing_proto_rawDescGZIP(), []int{9}
}

func (x *SequencedEvent) GetPreviousTimestamp() int64 {
	if x != nil && x.PreviousTimestamp != nil {
		return *x.PreviousTimestamp
	}
	return 0
}

func (x *SequencedEvent) GetTimestamp() int64 {
	if x != nil {
		return x.Timestamp
	}
	return 0
}

func (x *SequencedEvent) GetSynchronizerId() string {
	if x != nil {
		return x.SynchronizerId
	}
	return ""
}

func (x *SequencedEvent) GetMessageId() string {
	if x != nil && x.MessageId != nil {
		return *x.MessageId
	}
	return ""
}

func (x *SequencedEvent) GetBatch() *CompressedBatch {
	if x != nil {
		return x.Batch
	}
	return nil
}

func (x *SequencedEvent) GetDeliverErrorReason() *status.Status {
	if x != nil {
		return x.DeliverErrorReason
	}
	return nil
}

func (x *SequencedEvent) GetTopologyTimestamp() int64 {
	if x != nil && x.TopologyTimestamp != nil {
		return *x.TopologyTimestamp
	}
	return 0
}

func (x *SequencedEvent) GetTrafficReceipt() *TrafficReceipt {
	if x != nil {
		return x.TrafficReceipt
	}
	return nil
}

type SubmissionRequest struct {
	state             protoimpl.MessageState    `protogen:"open.v1"`
	Sender            string                    `protobuf:"bytes,1,opt,name=sender,proto3" json:"sender,omitempty"`
	MessageId         string                    `protobuf:"bytes,2,opt,name=message_id,json=messageId,proto3" json:"message_id,omitempty"`
	Batch             *CompressedBatch          `protobuf:"bytes,4,opt,name=batch,proto3" json:"batch,omitempty"`
	MaxSequencingTime int64                     `protobuf:"varint,5,opt,name=max_sequencing_time,json=maxSequencingTime,proto3" json:"max_sequencing_time,omitempty"`
	TopologyTimestamp *int64                    `protobuf:"varint,6,opt,name=topology_timestamp,json=topologyTimestamp,proto3,oneof" json:"topology_timestamp,omitempty"`
	AggregationRule   *AggregationRule          `protobuf:"bytes,7,opt,name=aggregation_rule,json=aggregationRule,proto3" json:"aggregation_rule,omitempty"`
	SubmissionCost    *SequencingSubmissionCost `protobuf:"bytes,8,opt,name=submission_cost,json=submissionCost,proto3" json:"submission_cost,omitempty"`
	unknownFields     protoimpl.UnknownFields
	sizeCache         protoimpl.SizeCache
}

func (x *SubmissionRequest) Reset() {
	*x = SubmissionRequest{}
	mi := &file_com_digitalasset_canton_protocol_v30_sequencing_proto_msgTypes[10]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SubmissionRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SubmissionRequest) ProtoMessage() {}

func (x *SubmissionRequest) ProtoReflect() protoreflect.Message {
	mi := &file_com_digitalasset_canton_protocol_v30_sequencing_proto_msgTypes[10]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SubmissionRequest.ProtoReflect.Descriptor instead.
func (*SubmissionRequest) Descriptor() ([]byte, []int) {
	return file_com_digitalasset_canton_protocol_v30_sequencing_proto_rawDescGZIP(), []int{10}
}

func (x *SubmissionRequest) GetSender() string {
	if x != nil {
		return x.Sender
	}
	return ""
}

func (x *SubmissionRequest) GetMessageId() string {
	if x != nil {
		return x.MessageId
	}
	return ""
}

func (x *SubmissionRequest) GetBatch() *CompressedBatch {
	if x != nil {
		return x.Batch
	}
	return nil
}

func (x *SubmissionRequest) GetMaxSequencingTime() int64 {
	if x != nil {
		return x.MaxSequencingTime
	}
	return 0
}

func (x *SubmissionRequest) GetTopologyTimestamp() int64 {
	if x != nil && x.TopologyTimestamp != nil {
		return *x.TopologyTimestamp
	}
	return 0
}

func (x *SubmissionRequest) GetAggregationRule() *AggregationRule {
	if x != nil {
		return x.AggregationRule
	}
	return nil
}

func (x *SubmissionRequest) GetSubmissionCost() *SequencingSubmissionCost {
	if x != nil {
		return x.SubmissionCost
	}
	return nil
}

var File_com_digitalasset_canton_protocol_v30_sequencing_proto protoreflect.FileDescriptor

const file_com_digitalasset_canton_protocol_v30_sequencing_proto_rawDesc = "" +
	"\n" +
	"5com/digitalasset/canton/protocol/v30/sequencing.proto\x12$com.digitalasset.canton.protocol.v30\x1a/com/digitalasset/canton/crypto/v30/crypto.proto\x1a8com/digitalasset/canton/protocol/v30/common_stable.proto\x1aEcom/digitalasset/canton/protocol/v30/traffic_control_parameters.proto\x1a/com/digitalasset/canton/v30/trace_context.proto\x1a\x17google/rpc/status.proto\"\xfa\x01\n" +
	"\x1dPossiblyIgnoredSequencedEvent\x12\x18\n" +
	"\acounter\x18\x01 \x01(\x03R\acounter\x12\x1c\n" +
	"\ttimestamp\x18\x02 \x01(\x03R\ttimestamp\x12N\n" +
	"\rtrace_context\x18\x03 \x01(\v2).com.digitalasset.canton.v30.TraceContextR\ftraceContext\x12\x1d\n" +
	"\n" +
	"is_ignored\x18\x04 \x01(\bR\tisIgnored\x12#\n" +
	"\n" +
	"underlying\x18\x05 \x01(\fH\x00R\n" +
	"underlying\x88\x01\x01B\r\n" +
	"\v_underlying\"\x82\x01\n" +
	"\x0eRecipientsTree\x12\x1e\n" +
	"\n" +
	"recipients\x18\x01 \x03(\tR\n" +
	"recipients\x12P\n" +
	"\bchildren\x18\x02 \x03(\v24.com.digitalasset.canton.protocol.v30.RecipientsTreeR\bchildren\"k\n" +
	"\n" +
	"Recipients\x12]\n" +
	"\x0frecipients_tree\x18\x01 \x03(\v24.com.digitalasset.canton.protocol.v30.RecipientsTreeR\x0erecipientsTree\"A\n" +
	"\x10ServiceAgreement\x12\x0e\n" +
	"\x02id\x18\x01 \x01(\tR\x02id\x12\x1d\n" +
	"\n" +
	"legal_text\x18\x02 \x01(\tR\tlegalText\".\n" +
	"\x18SequencingSubmissionCost\x12\x12\n" +
	"\x04cost\x18\x01 \x01(\x03R\x04cost\"\x83\x06\n" +
	"\x1cStaticSynchronizerParameters\x12n\n" +
	"\x16required_signing_specs\x18\x01 \x01(\v28.com.digitalasset.canton.crypto.v30.RequiredSigningSpecsR\x14requiredSigningSpecs\x12w\n" +
	"\x19required_encryption_specs\x18\x02 \x01(\v2;.com.digitalasset.canton.crypto.v30.RequiredEncryptionSpecsR\x17requiredEncryptionSpecs\x12{\n" +
	"\x1erequired_symmetric_key_schemes\x18\x03 \x03(\x0e26.com.digitalasset.canton.crypto.v30.SymmetricKeySchemeR\x1brequiredSymmetricKeySchemes\x12k\n" +
	"\x18required_hash_algorithms\x18\x04 \x03(\x0e21.com.digitalasset.canton.crypto.v30.HashAlgorithmR\x16requiredHashAlgorithms\x12r\n" +
	"\x1brequired_crypto_key_formats\x18\x05 \x03(\x0e23.com.digitalasset.canton.crypto.v30.CryptoKeyFormatR\x18requiredCryptoKeyFormats\x12q\n" +
	"\x1arequired_signature_formats\x18\x06 \x03(\x0e23.com.digitalasset.canton.crypto.v30.SignatureFormatR\x18requiredSignatureFormats\x12)\n" +
	"\x10protocol_version\x18\a \x01(\x05R\x0fprotocolVersion\"\xc5\x01\n" +
	"\bEnvelope\x12\x18\n" +
	"\acontent\x18\x01 \x01(\fR\acontent\x12P\n" +
	"\n" +
	"recipients\x18\x02 \x01(\v20.com.digitalasset.canton.protocol.v30.RecipientsR\n" +
	"recipients\x12M\n" +
	"\n" +
	"signatures\x18\x03 \x03(\v2-.com.digitalasset.canton.crypto.v30.SignatureR\n" +
	"signatures\"U\n" +
	"\x05Batch\x12L\n" +
	"\tenvelopes\x18\x01 \x03(\v2..com.digitalasset.canton.protocol.v30.EnvelopeR\tenvelopes\"\x85\x02\n" +
	"\x0fCompressedBatch\x12h\n" +
	"\talgorithm\x18\x01 \x01(\x0e2J.com.digitalasset.canton.protocol.v30.CompressedBatch.CompressionAlgorithmR\talgorithm\x12)\n" +
	"\x10compressed_batch\x18\x02 \x01(\fR\x0fcompressedBatch\"]\n" +
	"\x14CompressionAlgorithm\x12%\n" +
	"!COMPRESSION_ALGORITHM_UNSPECIFIED\x10\x00\x12\x1e\n" +
	"\x1aCOMPRESSION_ALGORITHM_GZIP\x10\x01\"\x98\x04\n" +
	"\x0eSequencedEvent\x122\n" +
	"\x12previous_timestamp\x18\t \x01(\x03H\x00R\x11previousTimestamp\x88\x01\x01\x12\x1c\n" +
	"\ttimestamp\x18\x02 \x01(\x03R\ttimestamp\x12'\n" +
	"\x0fsynchronizer_id\x18\x03 \x01(\tR\x0esynchronizerId\x12\"\n" +
	"\n" +
	"message_id\x18\x04 \x01(\tH\x01R\tmessageId\x88\x01\x01\x12K\n" +
	"\x05batch\x18\x05 \x01(\v25.com.digitalasset.canton.protocol.v30.CompressedBatchR\x05batch\x12D\n" +
	"\x14deliver_error_reason\x18\x06 \x01(\v2\x12.google.rpc.StatusR\x12deliverErrorReason\x122\n" +
	"\x12topology_timestamp\x18\a \x01(\x03H\x02R\x11topologyTimestamp\x88\x01\x01\x12]\n" +
	"\x0ftraffic_receipt\x18\b \x01(\v24.com.digitalasset.canton.protocol.v30.TrafficReceiptR\x0etrafficReceiptB\x15\n" +
	"\x13_previous_timestampB\r\n" +
	"\v_message_idB\x15\n" +
	"\x13_topology_timestampJ\x04\b\x01\x10\x02\"\xdd\x03\n" +
	"\x11SubmissionRequest\x12\x16\n" +
	"\x06sender\x18\x01 \x01(\tR\x06sender\x12\x1d\n" +
	"\n" +
	"message_id\x18\x02 \x01(\tR\tmessageId\x12K\n" +
	"\x05batch\x18\x04 \x01(\v25.com.digitalasset.canton.protocol.v30.CompressedBatchR\x05batch\x12.\n" +
	"\x13max_sequencing_time\x18\x05 \x01(\x03R\x11maxSequencingTime\x122\n" +
	"\x12topology_timestamp\x18\x06 \x01(\x03H\x00R\x11topologyTimestamp\x88\x01\x01\x12`\n" +
	"\x10aggregation_rule\x18\a \x01(\v25.com.digitalasset.canton.protocol.v30.AggregationRuleR\x0faggregationRule\x12g\n" +
	"\x0fsubmission_cost\x18\b \x01(\v2>.com.digitalasset.canton.protocol.v30.SequencingSubmissionCostR\x0esubmissionCostB\x15\n" +
	"\x13_topology_timestampBUZSgithub.com/digital-asset/dazl-client/v8/go/api/com/digitalasset/canton/protocol/v30b\x06proto3"

var (
	file_com_digitalasset_canton_protocol_v30_sequencing_proto_rawDescOnce sync.Once
	file_com_digitalasset_canton_protocol_v30_sequencing_proto_rawDescData []byte
)

func file_com_digitalasset_canton_protocol_v30_sequencing_proto_rawDescGZIP() []byte {
	file_com_digitalasset_canton_protocol_v30_sequencing_proto_rawDescOnce.Do(func() {
		file_com_digitalasset_canton_protocol_v30_sequencing_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_com_digitalasset_canton_protocol_v30_sequencing_proto_rawDesc), len(file_com_digitalasset_canton_protocol_v30_sequencing_proto_rawDesc)))
	})
	return file_com_digitalasset_canton_protocol_v30_sequencing_proto_rawDescData
}

var file_com_digitalasset_canton_protocol_v30_sequencing_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_com_digitalasset_canton_protocol_v30_sequencing_proto_msgTypes = make([]protoimpl.MessageInfo, 11)
var file_com_digitalasset_canton_protocol_v30_sequencing_proto_goTypes = []any{
	(CompressedBatch_CompressionAlgorithm)(0), // 0: com.digitalasset.canton.protocol.v30.CompressedBatch.CompressionAlgorithm
	(*PossiblyIgnoredSequencedEvent)(nil),     // 1: com.digitalasset.canton.protocol.v30.PossiblyIgnoredSequencedEvent
	(*RecipientsTree)(nil),                    // 2: com.digitalasset.canton.protocol.v30.RecipientsTree
	(*Recipients)(nil),                        // 3: com.digitalasset.canton.protocol.v30.Recipients
	(*ServiceAgreement)(nil),                  // 4: com.digitalasset.canton.protocol.v30.ServiceAgreement
	(*SequencingSubmissionCost)(nil),          // 5: com.digitalasset.canton.protocol.v30.SequencingSubmissionCost
	(*StaticSynchronizerParameters)(nil),      // 6: com.digitalasset.canton.protocol.v30.StaticSynchronizerParameters
	(*Envelope)(nil),                          // 7: com.digitalasset.canton.protocol.v30.Envelope
	(*Batch)(nil),                             // 8: com.digitalasset.canton.protocol.v30.Batch
	(*CompressedBatch)(nil),                   // 9: com.digitalasset.canton.protocol.v30.CompressedBatch
	(*SequencedEvent)(nil),                    // 10: com.digitalasset.canton.protocol.v30.SequencedEvent
	(*SubmissionRequest)(nil),                 // 11: com.digitalasset.canton.protocol.v30.SubmissionRequest
	(*v30.TraceContext)(nil),                  // 12: com.digitalasset.canton.v30.TraceContext
	(*v301.RequiredSigningSpecs)(nil),         // 13: com.digitalasset.canton.crypto.v30.RequiredSigningSpecs
	(*v301.RequiredEncryptionSpecs)(nil),      // 14: com.digitalasset.canton.crypto.v30.RequiredEncryptionSpecs
	(v301.SymmetricKeyScheme)(0),              // 15: com.digitalasset.canton.crypto.v30.SymmetricKeyScheme
	(v301.HashAlgorithm)(0),                   // 16: com.digitalasset.canton.crypto.v30.HashAlgorithm
	(v301.CryptoKeyFormat)(0),                 // 17: com.digitalasset.canton.crypto.v30.CryptoKeyFormat
	(v301.SignatureFormat)(0),                 // 18: com.digitalasset.canton.crypto.v30.SignatureFormat
	(*v301.Signature)(nil),                    // 19: com.digitalasset.canton.crypto.v30.Signature
	(*status.Status)(nil),                     // 20: google.rpc.Status
	(*TrafficReceipt)(nil),                    // 21: com.digitalasset.canton.protocol.v30.TrafficReceipt
	(*AggregationRule)(nil),                   // 22: com.digitalasset.canton.protocol.v30.AggregationRule
}
var file_com_digitalasset_canton_protocol_v30_sequencing_proto_depIdxs = []int32{
	12, // 0: com.digitalasset.canton.protocol.v30.PossiblyIgnoredSequencedEvent.trace_context:type_name -> com.digitalasset.canton.v30.TraceContext
	2,  // 1: com.digitalasset.canton.protocol.v30.RecipientsTree.children:type_name -> com.digitalasset.canton.protocol.v30.RecipientsTree
	2,  // 2: com.digitalasset.canton.protocol.v30.Recipients.recipients_tree:type_name -> com.digitalasset.canton.protocol.v30.RecipientsTree
	13, // 3: com.digitalasset.canton.protocol.v30.StaticSynchronizerParameters.required_signing_specs:type_name -> com.digitalasset.canton.crypto.v30.RequiredSigningSpecs
	14, // 4: com.digitalasset.canton.protocol.v30.StaticSynchronizerParameters.required_encryption_specs:type_name -> com.digitalasset.canton.crypto.v30.RequiredEncryptionSpecs
	15, // 5: com.digitalasset.canton.protocol.v30.StaticSynchronizerParameters.required_symmetric_key_schemes:type_name -> com.digitalasset.canton.crypto.v30.SymmetricKeyScheme
	16, // 6: com.digitalasset.canton.protocol.v30.StaticSynchronizerParameters.required_hash_algorithms:type_name -> com.digitalasset.canton.crypto.v30.HashAlgorithm
	17, // 7: com.digitalasset.canton.protocol.v30.StaticSynchronizerParameters.required_crypto_key_formats:type_name -> com.digitalasset.canton.crypto.v30.CryptoKeyFormat
	18, // 8: com.digitalasset.canton.protocol.v30.StaticSynchronizerParameters.required_signature_formats:type_name -> com.digitalasset.canton.crypto.v30.SignatureFormat
	3,  // 9: com.digitalasset.canton.protocol.v30.Envelope.recipients:type_name -> com.digitalasset.canton.protocol.v30.Recipients
	19, // 10: com.digitalasset.canton.protocol.v30.Envelope.signatures:type_name -> com.digitalasset.canton.crypto.v30.Signature
	7,  // 11: com.digitalasset.canton.protocol.v30.Batch.envelopes:type_name -> com.digitalasset.canton.protocol.v30.Envelope
	0,  // 12: com.digitalasset.canton.protocol.v30.CompressedBatch.algorithm:type_name -> com.digitalasset.canton.protocol.v30.CompressedBatch.CompressionAlgorithm
	9,  // 13: com.digitalasset.canton.protocol.v30.SequencedEvent.batch:type_name -> com.digitalasset.canton.protocol.v30.CompressedBatch
	20, // 14: com.digitalasset.canton.protocol.v30.SequencedEvent.deliver_error_reason:type_name -> google.rpc.Status
	21, // 15: com.digitalasset.canton.protocol.v30.SequencedEvent.traffic_receipt:type_name -> com.digitalasset.canton.protocol.v30.TrafficReceipt
	9,  // 16: com.digitalasset.canton.protocol.v30.SubmissionRequest.batch:type_name -> com.digitalasset.canton.protocol.v30.CompressedBatch
	22, // 17: com.digitalasset.canton.protocol.v30.SubmissionRequest.aggregation_rule:type_name -> com.digitalasset.canton.protocol.v30.AggregationRule
	5,  // 18: com.digitalasset.canton.protocol.v30.SubmissionRequest.submission_cost:type_name -> com.digitalasset.canton.protocol.v30.SequencingSubmissionCost
	19, // [19:19] is the sub-list for method output_type
	19, // [19:19] is the sub-list for method input_type
	19, // [19:19] is the sub-list for extension type_name
	19, // [19:19] is the sub-list for extension extendee
	0,  // [0:19] is the sub-list for field type_name
}

func init() { file_com_digitalasset_canton_protocol_v30_sequencing_proto_init() }
func file_com_digitalasset_canton_protocol_v30_sequencing_proto_init() {
	if File_com_digitalasset_canton_protocol_v30_sequencing_proto != nil {
		return
	}
	file_com_digitalasset_canton_protocol_v30_common_stable_proto_init()
	file_com_digitalasset_canton_protocol_v30_traffic_control_parameters_proto_init()
	file_com_digitalasset_canton_protocol_v30_sequencing_proto_msgTypes[0].OneofWrappers = []any{}
	file_com_digitalasset_canton_protocol_v30_sequencing_proto_msgTypes[9].OneofWrappers = []any{}
	file_com_digitalasset_canton_protocol_v30_sequencing_proto_msgTypes[10].OneofWrappers = []any{}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_com_digitalasset_canton_protocol_v30_sequencing_proto_rawDesc), len(file_com_digitalasset_canton_protocol_v30_sequencing_proto_rawDesc)),
			NumEnums:      1,
			NumMessages:   11,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_com_digitalasset_canton_protocol_v30_sequencing_proto_goTypes,
		DependencyIndexes: file_com_digitalasset_canton_protocol_v30_sequencing_proto_depIdxs,
		EnumInfos:         file_com_digitalasset_canton_protocol_v30_sequencing_proto_enumTypes,
		MessageInfos:      file_com_digitalasset_canton_protocol_v30_sequencing_proto_msgTypes,
	}.Build()
	File_com_digitalasset_canton_protocol_v30_sequencing_proto = out.File
	file_com_digitalasset_canton_protocol_v30_sequencing_proto_goTypes = nil
	file_com_digitalasset_canton_protocol_v30_sequencing_proto_depIdxs = nil
}
