// Copyright (c) 2017-2025 Digital Asset (Switzerland) GmbH and/or its affiliates. All rights reserved.
// SPDX-License-Identifier: Apache-2.0
// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.35.2
// 	protoc        v5.27.2
// source: com/digitalasset/canton/protocol/v30/participant_transfer.proto

package v30

import (
	v30 "github.com/digital-asset/dazl-client/v8/go/api/com/digitalasset/canton/crypto/v30"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type TransferId struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SourceDomain string `protobuf:"bytes,1,opt,name=source_domain,json=sourceDomain,proto3" json:"source_domain,omitempty"`
	Timestamp    int64  `protobuf:"varint,2,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
}

func (x *TransferId) Reset() {
	*x = TransferId{}
	mi := &file_com_digitalasset_canton_protocol_v30_participant_transfer_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TransferId) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TransferId) ProtoMessage() {}

func (x *TransferId) ProtoReflect() protoreflect.Message {
	mi := &file_com_digitalasset_canton_protocol_v30_participant_transfer_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TransferId.ProtoReflect.Descriptor instead.
func (*TransferId) Descriptor() ([]byte, []int) {
	return file_com_digitalasset_canton_protocol_v30_participant_transfer_proto_rawDescGZIP(), []int{0}
}

func (x *TransferId) GetSourceDomain() string {
	if x != nil {
		return x.SourceDomain
	}
	return ""
}

func (x *TransferId) GetTimestamp() int64 {
	if x != nil {
		return x.Timestamp
	}
	return 0
}

type TransferOutCommonData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Salt                *v30.Salt                  `protobuf:"bytes,1,opt,name=salt,proto3" json:"salt,omitempty"`
	SourceDomain        string                     `protobuf:"bytes,2,opt,name=source_domain,json=sourceDomain,proto3" json:"source_domain,omitempty"`
	Stakeholders        []string                   `protobuf:"bytes,3,rep,name=stakeholders,proto3" json:"stakeholders,omitempty"`
	AdminParties        []string                   `protobuf:"bytes,4,rep,name=admin_parties,json=adminParties,proto3" json:"admin_parties,omitempty"`
	Uuid                string                     `protobuf:"bytes,5,opt,name=uuid,proto3" json:"uuid,omitempty"`
	SourceMediatorGroup int32                      `protobuf:"varint,6,opt,name=source_mediator_group,json=sourceMediatorGroup,proto3" json:"source_mediator_group,omitempty"`
	SubmitterMetadata   *TransferSubmitterMetadata `protobuf:"bytes,7,opt,name=submitter_metadata,json=submitterMetadata,proto3" json:"submitter_metadata,omitempty"`
}

func (x *TransferOutCommonData) Reset() {
	*x = TransferOutCommonData{}
	mi := &file_com_digitalasset_canton_protocol_v30_participant_transfer_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TransferOutCommonData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TransferOutCommonData) ProtoMessage() {}

func (x *TransferOutCommonData) ProtoReflect() protoreflect.Message {
	mi := &file_com_digitalasset_canton_protocol_v30_participant_transfer_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TransferOutCommonData.ProtoReflect.Descriptor instead.
func (*TransferOutCommonData) Descriptor() ([]byte, []int) {
	return file_com_digitalasset_canton_protocol_v30_participant_transfer_proto_rawDescGZIP(), []int{1}
}

func (x *TransferOutCommonData) GetSalt() *v30.Salt {
	if x != nil {
		return x.Salt
	}
	return nil
}

func (x *TransferOutCommonData) GetSourceDomain() string {
	if x != nil {
		return x.SourceDomain
	}
	return ""
}

func (x *TransferOutCommonData) GetStakeholders() []string {
	if x != nil {
		return x.Stakeholders
	}
	return nil
}

func (x *TransferOutCommonData) GetAdminParties() []string {
	if x != nil {
		return x.AdminParties
	}
	return nil
}

func (x *TransferOutCommonData) GetUuid() string {
	if x != nil {
		return x.Uuid
	}
	return ""
}

func (x *TransferOutCommonData) GetSourceMediatorGroup() int32 {
	if x != nil {
		return x.SourceMediatorGroup
	}
	return 0
}

func (x *TransferOutCommonData) GetSubmitterMetadata() *TransferSubmitterMetadata {
	if x != nil {
		return x.SubmitterMetadata
	}
	return nil
}

type TransferViewTree struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CommonData      []byte         `protobuf:"bytes,1,opt,name=common_data,json=commonData,proto3" json:"common_data,omitempty"`
	ParticipantData *BlindableNode `protobuf:"bytes,2,opt,name=participant_data,json=participantData,proto3" json:"participant_data,omitempty"`
}

func (x *TransferViewTree) Reset() {
	*x = TransferViewTree{}
	mi := &file_com_digitalasset_canton_protocol_v30_participant_transfer_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TransferViewTree) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TransferViewTree) ProtoMessage() {}

func (x *TransferViewTree) ProtoReflect() protoreflect.Message {
	mi := &file_com_digitalasset_canton_protocol_v30_participant_transfer_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TransferViewTree.ProtoReflect.Descriptor instead.
func (*TransferViewTree) Descriptor() ([]byte, []int) {
	return file_com_digitalasset_canton_protocol_v30_participant_transfer_proto_rawDescGZIP(), []int{2}
}

func (x *TransferViewTree) GetCommonData() []byte {
	if x != nil {
		return x.CommonData
	}
	return nil
}

func (x *TransferViewTree) GetParticipantData() *BlindableNode {
	if x != nil {
		return x.ParticipantData
	}
	return nil
}

type TransferInMediatorMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Tree                           *TransferViewTree `protobuf:"bytes,1,opt,name=tree,proto3" json:"tree,omitempty"`
	SubmittingParticipantSignature *v30.Signature    `protobuf:"bytes,2,opt,name=submitting_participant_signature,json=submittingParticipantSignature,proto3" json:"submitting_participant_signature,omitempty"`
}

func (x *TransferInMediatorMessage) Reset() {
	*x = TransferInMediatorMessage{}
	mi := &file_com_digitalasset_canton_protocol_v30_participant_transfer_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TransferInMediatorMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TransferInMediatorMessage) ProtoMessage() {}

func (x *TransferInMediatorMessage) ProtoReflect() protoreflect.Message {
	mi := &file_com_digitalasset_canton_protocol_v30_participant_transfer_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TransferInMediatorMessage.ProtoReflect.Descriptor instead.
func (*TransferInMediatorMessage) Descriptor() ([]byte, []int) {
	return file_com_digitalasset_canton_protocol_v30_participant_transfer_proto_rawDescGZIP(), []int{3}
}

func (x *TransferInMediatorMessage) GetTree() *TransferViewTree {
	if x != nil {
		return x.Tree
	}
	return nil
}

func (x *TransferInMediatorMessage) GetSubmittingParticipantSignature() *v30.Signature {
	if x != nil {
		return x.SubmittingParticipantSignature
	}
	return nil
}

type TransferOutMediatorMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Tree                           *TransferViewTree `protobuf:"bytes,1,opt,name=tree,proto3" json:"tree,omitempty"`
	SubmittingParticipantSignature *v30.Signature    `protobuf:"bytes,2,opt,name=submitting_participant_signature,json=submittingParticipantSignature,proto3" json:"submitting_participant_signature,omitempty"`
}

func (x *TransferOutMediatorMessage) Reset() {
	*x = TransferOutMediatorMessage{}
	mi := &file_com_digitalasset_canton_protocol_v30_participant_transfer_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TransferOutMediatorMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TransferOutMediatorMessage) ProtoMessage() {}

func (x *TransferOutMediatorMessage) ProtoReflect() protoreflect.Message {
	mi := &file_com_digitalasset_canton_protocol_v30_participant_transfer_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TransferOutMediatorMessage.ProtoReflect.Descriptor instead.
func (*TransferOutMediatorMessage) Descriptor() ([]byte, []int) {
	return file_com_digitalasset_canton_protocol_v30_participant_transfer_proto_rawDescGZIP(), []int{4}
}

func (x *TransferOutMediatorMessage) GetTree() *TransferViewTree {
	if x != nil {
		return x.Tree
	}
	return nil
}

func (x *TransferOutMediatorMessage) GetSubmittingParticipantSignature() *v30.Signature {
	if x != nil {
		return x.SubmittingParticipantSignature
	}
	return nil
}

type TransferInCommonData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Salt                *v30.Salt                  `protobuf:"bytes,1,opt,name=salt,proto3" json:"salt,omitempty"`
	TargetDomain        string                     `protobuf:"bytes,2,opt,name=target_domain,json=targetDomain,proto3" json:"target_domain,omitempty"`
	Stakeholders        []string                   `protobuf:"bytes,3,rep,name=stakeholders,proto3" json:"stakeholders,omitempty"`
	Uuid                string                     `protobuf:"bytes,4,opt,name=uuid,proto3" json:"uuid,omitempty"`
	TargetMediatorGroup int32                      `protobuf:"varint,6,opt,name=target_mediator_group,json=targetMediatorGroup,proto3" json:"target_mediator_group,omitempty"`
	SubmitterMetadata   *TransferSubmitterMetadata `protobuf:"bytes,7,opt,name=submitter_metadata,json=submitterMetadata,proto3" json:"submitter_metadata,omitempty"`
}

func (x *TransferInCommonData) Reset() {
	*x = TransferInCommonData{}
	mi := &file_com_digitalasset_canton_protocol_v30_participant_transfer_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TransferInCommonData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TransferInCommonData) ProtoMessage() {}

func (x *TransferInCommonData) ProtoReflect() protoreflect.Message {
	mi := &file_com_digitalasset_canton_protocol_v30_participant_transfer_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TransferInCommonData.ProtoReflect.Descriptor instead.
func (*TransferInCommonData) Descriptor() ([]byte, []int) {
	return file_com_digitalasset_canton_protocol_v30_participant_transfer_proto_rawDescGZIP(), []int{5}
}

func (x *TransferInCommonData) GetSalt() *v30.Salt {
	if x != nil {
		return x.Salt
	}
	return nil
}

func (x *TransferInCommonData) GetTargetDomain() string {
	if x != nil {
		return x.TargetDomain
	}
	return ""
}

func (x *TransferInCommonData) GetStakeholders() []string {
	if x != nil {
		return x.Stakeholders
	}
	return nil
}

func (x *TransferInCommonData) GetUuid() string {
	if x != nil {
		return x.Uuid
	}
	return ""
}

func (x *TransferInCommonData) GetTargetMediatorGroup() int32 {
	if x != nil {
		return x.TargetMediatorGroup
	}
	return 0
}

func (x *TransferInCommonData) GetSubmitterMetadata() *TransferSubmitterMetadata {
	if x != nil {
		return x.SubmitterMetadata
	}
	return nil
}

type TransferSubmitterMetadata struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Submitter                string `protobuf:"bytes,1,opt,name=submitter,proto3" json:"submitter,omitempty"`
	SubmittingParticipantUid string `protobuf:"bytes,2,opt,name=submitting_participant_uid,json=submittingParticipantUid,proto3" json:"submitting_participant_uid,omitempty"`
	CommandId                string `protobuf:"bytes,3,opt,name=command_id,json=commandId,proto3" json:"command_id,omitempty"`
	SubmissionId             string `protobuf:"bytes,4,opt,name=submission_id,json=submissionId,proto3" json:"submission_id,omitempty"`
	ApplicationId            string `protobuf:"bytes,5,opt,name=application_id,json=applicationId,proto3" json:"application_id,omitempty"`
	WorkflowId               string `protobuf:"bytes,6,opt,name=workflow_id,json=workflowId,proto3" json:"workflow_id,omitempty"`
}

func (x *TransferSubmitterMetadata) Reset() {
	*x = TransferSubmitterMetadata{}
	mi := &file_com_digitalasset_canton_protocol_v30_participant_transfer_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TransferSubmitterMetadata) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TransferSubmitterMetadata) ProtoMessage() {}

func (x *TransferSubmitterMetadata) ProtoReflect() protoreflect.Message {
	mi := &file_com_digitalasset_canton_protocol_v30_participant_transfer_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TransferSubmitterMetadata.ProtoReflect.Descriptor instead.
func (*TransferSubmitterMetadata) Descriptor() ([]byte, []int) {
	return file_com_digitalasset_canton_protocol_v30_participant_transfer_proto_rawDescGZIP(), []int{6}
}

func (x *TransferSubmitterMetadata) GetSubmitter() string {
	if x != nil {
		return x.Submitter
	}
	return ""
}

func (x *TransferSubmitterMetadata) GetSubmittingParticipantUid() string {
	if x != nil {
		return x.SubmittingParticipantUid
	}
	return ""
}

func (x *TransferSubmitterMetadata) GetCommandId() string {
	if x != nil {
		return x.CommandId
	}
	return ""
}

func (x *TransferSubmitterMetadata) GetSubmissionId() string {
	if x != nil {
		return x.SubmissionId
	}
	return ""
}

func (x *TransferSubmitterMetadata) GetApplicationId() string {
	if x != nil {
		return x.ApplicationId
	}
	return ""
}

func (x *TransferSubmitterMetadata) GetWorkflowId() string {
	if x != nil {
		return x.WorkflowId
	}
	return ""
}

type TransferOutView struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Salt                  *v30.Salt             `protobuf:"bytes,1,opt,name=salt,proto3" json:"salt,omitempty"`
	TargetDomain          string                `protobuf:"bytes,3,opt,name=target_domain,json=targetDomain,proto3" json:"target_domain,omitempty"`
	TargetTimeProof       *TimeProof            `protobuf:"bytes,4,opt,name=target_time_proof,json=targetTimeProof,proto3" json:"target_time_proof,omitempty"`
	TargetProtocolVersion int32                 `protobuf:"varint,5,opt,name=target_protocol_version,json=targetProtocolVersion,proto3" json:"target_protocol_version,omitempty"`
	TransferCounter       int64                 `protobuf:"varint,11,opt,name=transfer_counter,json=transferCounter,proto3" json:"transfer_counter,omitempty"`
	CreatingTransactionId []byte                `protobuf:"bytes,12,opt,name=creating_transaction_id,json=creatingTransactionId,proto3" json:"creating_transaction_id,omitempty"`
	Contract              *SerializableContract `protobuf:"bytes,13,opt,name=contract,proto3" json:"contract,omitempty"`
}

func (x *TransferOutView) Reset() {
	*x = TransferOutView{}
	mi := &file_com_digitalasset_canton_protocol_v30_participant_transfer_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TransferOutView) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TransferOutView) ProtoMessage() {}

func (x *TransferOutView) ProtoReflect() protoreflect.Message {
	mi := &file_com_digitalasset_canton_protocol_v30_participant_transfer_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TransferOutView.ProtoReflect.Descriptor instead.
func (*TransferOutView) Descriptor() ([]byte, []int) {
	return file_com_digitalasset_canton_protocol_v30_participant_transfer_proto_rawDescGZIP(), []int{7}
}

func (x *TransferOutView) GetSalt() *v30.Salt {
	if x != nil {
		return x.Salt
	}
	return nil
}

func (x *TransferOutView) GetTargetDomain() string {
	if x != nil {
		return x.TargetDomain
	}
	return ""
}

func (x *TransferOutView) GetTargetTimeProof() *TimeProof {
	if x != nil {
		return x.TargetTimeProof
	}
	return nil
}

func (x *TransferOutView) GetTargetProtocolVersion() int32 {
	if x != nil {
		return x.TargetProtocolVersion
	}
	return 0
}

func (x *TransferOutView) GetTransferCounter() int64 {
	if x != nil {
		return x.TransferCounter
	}
	return 0
}

func (x *TransferOutView) GetCreatingTransactionId() []byte {
	if x != nil {
		return x.CreatingTransactionId
	}
	return nil
}

func (x *TransferOutView) GetContract() *SerializableContract {
	if x != nil {
		return x.Contract
	}
	return nil
}

type TransferInView struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Salt                   *v30.Salt             `protobuf:"bytes,1,opt,name=salt,proto3" json:"salt,omitempty"`
	Contract               *SerializableContract `protobuf:"bytes,3,opt,name=contract,proto3" json:"contract,omitempty"`
	TransferOutResultEvent []byte                `protobuf:"bytes,4,opt,name=transfer_out_result_event,json=transferOutResultEvent,proto3" json:"transfer_out_result_event,omitempty"`
	CreatingTransactionId  []byte                `protobuf:"bytes,5,opt,name=creating_transaction_id,json=creatingTransactionId,proto3" json:"creating_transaction_id,omitempty"`
	SourceProtocolVersion  int32                 `protobuf:"varint,6,opt,name=source_protocol_version,json=sourceProtocolVersion,proto3" json:"source_protocol_version,omitempty"`
	TransferCounter        int64                 `protobuf:"varint,12,opt,name=transfer_counter,json=transferCounter,proto3" json:"transfer_counter,omitempty"`
}

func (x *TransferInView) Reset() {
	*x = TransferInView{}
	mi := &file_com_digitalasset_canton_protocol_v30_participant_transfer_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TransferInView) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TransferInView) ProtoMessage() {}

func (x *TransferInView) ProtoReflect() protoreflect.Message {
	mi := &file_com_digitalasset_canton_protocol_v30_participant_transfer_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TransferInView.ProtoReflect.Descriptor instead.
func (*TransferInView) Descriptor() ([]byte, []int) {
	return file_com_digitalasset_canton_protocol_v30_participant_transfer_proto_rawDescGZIP(), []int{8}
}

func (x *TransferInView) GetSalt() *v30.Salt {
	if x != nil {
		return x.Salt
	}
	return nil
}

func (x *TransferInView) GetContract() *SerializableContract {
	if x != nil {
		return x.Contract
	}
	return nil
}

func (x *TransferInView) GetTransferOutResultEvent() []byte {
	if x != nil {
		return x.TransferOutResultEvent
	}
	return nil
}

func (x *TransferInView) GetCreatingTransactionId() []byte {
	if x != nil {
		return x.CreatingTransactionId
	}
	return nil
}

func (x *TransferInView) GetSourceProtocolVersion() int32 {
	if x != nil {
		return x.SourceProtocolVersion
	}
	return 0
}

func (x *TransferInView) GetTransferCounter() int64 {
	if x != nil {
		return x.TransferCounter
	}
	return 0
}

var File_com_digitalasset_canton_protocol_v30_participant_transfer_proto protoreflect.FileDescriptor

var file_com_digitalasset_canton_protocol_v30_participant_transfer_proto_rawDesc = []byte{
	0x0a, 0x3f, 0x63, 0x6f, 0x6d, 0x2f, 0x64, 0x69, 0x67, 0x69, 0x74, 0x61, 0x6c, 0x61, 0x73, 0x73,
	0x65, 0x74, 0x2f, 0x63, 0x61, 0x6e, 0x74, 0x6f, 0x6e, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63,
	0x6f, 0x6c, 0x2f, 0x76, 0x33, 0x30, 0x2f, 0x70, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61,
	0x6e, 0x74, 0x5f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x12, 0x24, 0x63, 0x6f, 0x6d, 0x2e, 0x64, 0x69, 0x67, 0x69, 0x74, 0x61, 0x6c, 0x61, 0x73,
	0x73, 0x65, 0x74, 0x2e, 0x63, 0x61, 0x6e, 0x74, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x63, 0x6f, 0x6c, 0x2e, 0x76, 0x33, 0x30, 0x1a, 0x2f, 0x63, 0x6f, 0x6d, 0x2f, 0x64, 0x69, 0x67,
	0x69, 0x74, 0x61, 0x6c, 0x61, 0x73, 0x73, 0x65, 0x74, 0x2f, 0x63, 0x61, 0x6e, 0x74, 0x6f, 0x6e,
	0x2f, 0x63, 0x72, 0x79, 0x70, 0x74, 0x6f, 0x2f, 0x76, 0x33, 0x30, 0x2f, 0x63, 0x72, 0x79, 0x70,
	0x74, 0x6f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x38, 0x63, 0x6f, 0x6d, 0x2f, 0x64, 0x69,
	0x67, 0x69, 0x74, 0x61, 0x6c, 0x61, 0x73, 0x73, 0x65, 0x74, 0x2f, 0x63, 0x61, 0x6e, 0x74, 0x6f,
	0x6e, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2f, 0x76, 0x33, 0x30, 0x2f, 0x63,
	0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x5f, 0x73, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x1a, 0x31, 0x63, 0x6f, 0x6d, 0x2f, 0x64, 0x69, 0x67, 0x69, 0x74, 0x61, 0x6c, 0x61,
	0x73, 0x73, 0x65, 0x74, 0x2f, 0x63, 0x61, 0x6e, 0x74, 0x6f, 0x6e, 0x2f, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x63, 0x6f, 0x6c, 0x2f, 0x76, 0x33, 0x30, 0x2f, 0x6d, 0x65, 0x72, 0x6b, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x31, 0x63, 0x6f, 0x6d, 0x2f, 0x64, 0x69, 0x67, 0x69, 0x74,
	0x61, 0x6c, 0x61, 0x73, 0x73, 0x65, 0x74, 0x2f, 0x63, 0x61, 0x6e, 0x74, 0x6f, 0x6e, 0x2f, 0x74,
	0x69, 0x6d, 0x65, 0x2f, 0x76, 0x33, 0x30, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x70, 0x72, 0x6f,
	0x6f, 0x66, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x4f, 0x0a, 0x0a, 0x54, 0x72, 0x61, 0x6e,
	0x73, 0x66, 0x65, 0x72, 0x49, 0x64, 0x12, 0x23, 0x0a, 0x0d, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x5f, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x73,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x12, 0x1c, 0x0a, 0x09, 0x74,
	0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09,
	0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x22, 0xfb, 0x02, 0x0a, 0x15, 0x54, 0x72,
	0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x4f, 0x75, 0x74, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x44,
	0x61, 0x74, 0x61, 0x12, 0x3c, 0x0a, 0x04, 0x73, 0x61, 0x6c, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x28, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x64, 0x69, 0x67, 0x69, 0x74, 0x61, 0x6c, 0x61,
	0x73, 0x73, 0x65, 0x74, 0x2e, 0x63, 0x61, 0x6e, 0x74, 0x6f, 0x6e, 0x2e, 0x63, 0x72, 0x79, 0x70,
	0x74, 0x6f, 0x2e, 0x76, 0x33, 0x30, 0x2e, 0x53, 0x61, 0x6c, 0x74, 0x52, 0x04, 0x73, 0x61, 0x6c,
	0x74, 0x12, 0x23, 0x0a, 0x0d, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x64, 0x6f, 0x6d, 0x61,
	0x69, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x12, 0x22, 0x0a, 0x0c, 0x73, 0x74, 0x61, 0x6b, 0x65, 0x68,
	0x6f, 0x6c, 0x64, 0x65, 0x72, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0c, 0x73, 0x74,
	0x61, 0x6b, 0x65, 0x68, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x73, 0x12, 0x23, 0x0a, 0x0d, 0x61, 0x64,
	0x6d, 0x69, 0x6e, 0x5f, 0x70, 0x61, 0x72, 0x74, 0x69, 0x65, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28,
	0x09, 0x52, 0x0c, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x50, 0x61, 0x72, 0x74, 0x69, 0x65, 0x73, 0x12,
	0x12, 0x0a, 0x04, 0x75, 0x75, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x75,
	0x75, 0x69, 0x64, 0x12, 0x32, 0x0a, 0x15, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x6d, 0x65,
	0x64, 0x69, 0x61, 0x74, 0x6f, 0x72, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x13, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x4d, 0x65, 0x64, 0x69, 0x61, 0x74,
	0x6f, 0x72, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x12, 0x6e, 0x0a, 0x12, 0x73, 0x75, 0x62, 0x6d, 0x69,
	0x74, 0x74, 0x65, 0x72, 0x5f, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x3f, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x64, 0x69, 0x67, 0x69, 0x74, 0x61,
	0x6c, 0x61, 0x73, 0x73, 0x65, 0x74, 0x2e, 0x63, 0x61, 0x6e, 0x74, 0x6f, 0x6e, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x76, 0x33, 0x30, 0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73,
	0x66, 0x65, 0x72, 0x53, 0x75, 0x62, 0x6d, 0x69, 0x74, 0x74, 0x65, 0x72, 0x4d, 0x65, 0x74, 0x61,
	0x64, 0x61, 0x74, 0x61, 0x52, 0x11, 0x73, 0x75, 0x62, 0x6d, 0x69, 0x74, 0x74, 0x65, 0x72, 0x4d,
	0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x22, 0x93, 0x01, 0x0a, 0x10, 0x54, 0x72, 0x61, 0x6e,
	0x73, 0x66, 0x65, 0x72, 0x56, 0x69, 0x65, 0x77, 0x54, 0x72, 0x65, 0x65, 0x12, 0x1f, 0x0a, 0x0b,
	0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0c, 0x52, 0x0a, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x44, 0x61, 0x74, 0x61, 0x12, 0x5e, 0x0a,
	0x10, 0x70, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x5f, 0x64, 0x61, 0x74,
	0x61, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x33, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x64, 0x69,
	0x67, 0x69, 0x74, 0x61, 0x6c, 0x61, 0x73, 0x73, 0x65, 0x74, 0x2e, 0x63, 0x61, 0x6e, 0x74, 0x6f,
	0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x76, 0x33, 0x30, 0x2e, 0x42,
	0x6c, 0x69, 0x6e, 0x64, 0x61, 0x62, 0x6c, 0x65, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x0f, 0x70, 0x61,
	0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x44, 0x61, 0x74, 0x61, 0x22, 0xe0, 0x01,
	0x0a, 0x19, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x49, 0x6e, 0x4d, 0x65, 0x64, 0x69,
	0x61, 0x74, 0x6f, 0x72, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x4a, 0x0a, 0x04, 0x74,
	0x72, 0x65, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x36, 0x2e, 0x63, 0x6f, 0x6d, 0x2e,
	0x64, 0x69, 0x67, 0x69, 0x74, 0x61, 0x6c, 0x61, 0x73, 0x73, 0x65, 0x74, 0x2e, 0x63, 0x61, 0x6e,
	0x74, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x76, 0x33, 0x30,
	0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x56, 0x69, 0x65, 0x77, 0x54, 0x72, 0x65,
	0x65, 0x52, 0x04, 0x74, 0x72, 0x65, 0x65, 0x12, 0x77, 0x0a, 0x20, 0x73, 0x75, 0x62, 0x6d, 0x69,
	0x74, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x70, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6e,
	0x74, 0x5f, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x2d, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x64, 0x69, 0x67, 0x69, 0x74, 0x61, 0x6c, 0x61,
	0x73, 0x73, 0x65, 0x74, 0x2e, 0x63, 0x61, 0x6e, 0x74, 0x6f, 0x6e, 0x2e, 0x63, 0x72, 0x79, 0x70,
	0x74, 0x6f, 0x2e, 0x76, 0x33, 0x30, 0x2e, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65,
	0x52, 0x1e, 0x73, 0x75, 0x62, 0x6d, 0x69, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x50, 0x61, 0x72, 0x74,
	0x69, 0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65,
	0x22, 0xe1, 0x01, 0x0a, 0x1a, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x4f, 0x75, 0x74,
	0x4d, 0x65, 0x64, 0x69, 0x61, 0x74, 0x6f, 0x72, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12,
	0x4a, 0x0a, 0x04, 0x74, 0x72, 0x65, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x36, 0x2e,
	0x63, 0x6f, 0x6d, 0x2e, 0x64, 0x69, 0x67, 0x69, 0x74, 0x61, 0x6c, 0x61, 0x73, 0x73, 0x65, 0x74,
	0x2e, 0x63, 0x61, 0x6e, 0x74, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c,
	0x2e, 0x76, 0x33, 0x30, 0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x56, 0x69, 0x65,
	0x77, 0x54, 0x72, 0x65, 0x65, 0x52, 0x04, 0x74, 0x72, 0x65, 0x65, 0x12, 0x77, 0x0a, 0x20, 0x73,
	0x75, 0x62, 0x6d, 0x69, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x70, 0x61, 0x72, 0x74, 0x69, 0x63,
	0x69, 0x70, 0x61, 0x6e, 0x74, 0x5f, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x64, 0x69, 0x67, 0x69,
	0x74, 0x61, 0x6c, 0x61, 0x73, 0x73, 0x65, 0x74, 0x2e, 0x63, 0x61, 0x6e, 0x74, 0x6f, 0x6e, 0x2e,
	0x63, 0x72, 0x79, 0x70, 0x74, 0x6f, 0x2e, 0x76, 0x33, 0x30, 0x2e, 0x53, 0x69, 0x67, 0x6e, 0x61,
	0x74, 0x75, 0x72, 0x65, 0x52, 0x1e, 0x73, 0x75, 0x62, 0x6d, 0x69, 0x74, 0x74, 0x69, 0x6e, 0x67,
	0x50, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x53, 0x69, 0x67, 0x6e, 0x61,
	0x74, 0x75, 0x72, 0x65, 0x22, 0xd5, 0x02, 0x0a, 0x14, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65,
	0x72, 0x49, 0x6e, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x44, 0x61, 0x74, 0x61, 0x12, 0x3c, 0x0a,
	0x04, 0x73, 0x61, 0x6c, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x63, 0x6f,
	0x6d, 0x2e, 0x64, 0x69, 0x67, 0x69, 0x74, 0x61, 0x6c, 0x61, 0x73, 0x73, 0x65, 0x74, 0x2e, 0x63,
	0x61, 0x6e, 0x74, 0x6f, 0x6e, 0x2e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x6f, 0x2e, 0x76, 0x33, 0x30,
	0x2e, 0x53, 0x61, 0x6c, 0x74, 0x52, 0x04, 0x73, 0x61, 0x6c, 0x74, 0x12, 0x23, 0x0a, 0x0d, 0x74,
	0x61, 0x72, 0x67, 0x65, 0x74, 0x5f, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0c, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e,
	0x12, 0x22, 0x0a, 0x0c, 0x73, 0x74, 0x61, 0x6b, 0x65, 0x68, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x73,
	0x18, 0x03, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0c, 0x73, 0x74, 0x61, 0x6b, 0x65, 0x68, 0x6f, 0x6c,
	0x64, 0x65, 0x72, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x75, 0x75, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x75, 0x75, 0x69, 0x64, 0x12, 0x32, 0x0a, 0x15, 0x74, 0x61, 0x72, 0x67,
	0x65, 0x74, 0x5f, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x74, 0x6f, 0x72, 0x5f, 0x67, 0x72, 0x6f, 0x75,
	0x70, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x13, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x4d,
	0x65, 0x64, 0x69, 0x61, 0x74, 0x6f, 0x72, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x12, 0x6e, 0x0a, 0x12,
	0x73, 0x75, 0x62, 0x6d, 0x69, 0x74, 0x74, 0x65, 0x72, 0x5f, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61,
	0x74, 0x61, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3f, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x64,
	0x69, 0x67, 0x69, 0x74, 0x61, 0x6c, 0x61, 0x73, 0x73, 0x65, 0x74, 0x2e, 0x63, 0x61, 0x6e, 0x74,
	0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x76, 0x33, 0x30, 0x2e,
	0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x53, 0x75, 0x62, 0x6d, 0x69, 0x74, 0x74, 0x65,
	0x72, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x52, 0x11, 0x73, 0x75, 0x62, 0x6d, 0x69,
	0x74, 0x74, 0x65, 0x72, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x22, 0x83, 0x02, 0x0a,
	0x19, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x53, 0x75, 0x62, 0x6d, 0x69, 0x74, 0x74,
	0x65, 0x72, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x1c, 0x0a, 0x09, 0x73, 0x75,
	0x62, 0x6d, 0x69, 0x74, 0x74, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73,
	0x75, 0x62, 0x6d, 0x69, 0x74, 0x74, 0x65, 0x72, 0x12, 0x3c, 0x0a, 0x1a, 0x73, 0x75, 0x62, 0x6d,
	0x69, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x70, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61,
	0x6e, 0x74, 0x5f, 0x75, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x18, 0x73, 0x75,
	0x62, 0x6d, 0x69, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x50, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70,
	0x61, 0x6e, 0x74, 0x55, 0x69, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e,
	0x64, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x63, 0x6f, 0x6d, 0x6d,
	0x61, 0x6e, 0x64, 0x49, 0x64, 0x12, 0x23, 0x0a, 0x0d, 0x73, 0x75, 0x62, 0x6d, 0x69, 0x73, 0x73,
	0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x73, 0x75,
	0x62, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x25, 0x0a, 0x0e, 0x61, 0x70,
	0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0d, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49,
	0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x77, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x5f, 0x69, 0x64,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x77, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77,
	0x49, 0x64, 0x22, 0xc0, 0x03, 0x0a, 0x0f, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x4f,
	0x75, 0x74, 0x56, 0x69, 0x65, 0x77, 0x12, 0x3c, 0x0a, 0x04, 0x73, 0x61, 0x6c, 0x74, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x64, 0x69, 0x67, 0x69, 0x74,
	0x61, 0x6c, 0x61, 0x73, 0x73, 0x65, 0x74, 0x2e, 0x63, 0x61, 0x6e, 0x74, 0x6f, 0x6e, 0x2e, 0x63,
	0x72, 0x79, 0x70, 0x74, 0x6f, 0x2e, 0x76, 0x33, 0x30, 0x2e, 0x53, 0x61, 0x6c, 0x74, 0x52, 0x04,
	0x73, 0x61, 0x6c, 0x74, 0x12, 0x23, 0x0a, 0x0d, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x5f, 0x64,
	0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x74, 0x61, 0x72,
	0x67, 0x65, 0x74, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x12, 0x57, 0x0a, 0x11, 0x74, 0x61, 0x72,
	0x67, 0x65, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x70, 0x72, 0x6f, 0x6f, 0x66, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x64, 0x69, 0x67, 0x69, 0x74,
	0x61, 0x6c, 0x61, 0x73, 0x73, 0x65, 0x74, 0x2e, 0x63, 0x61, 0x6e, 0x74, 0x6f, 0x6e, 0x2e, 0x74,
	0x69, 0x6d, 0x65, 0x2e, 0x76, 0x33, 0x30, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x50, 0x72, 0x6f, 0x6f,
	0x66, 0x52, 0x0f, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x50, 0x72, 0x6f,
	0x6f, 0x66, 0x12, 0x36, 0x0a, 0x17, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x5f, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x15, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x50, 0x72, 0x6f, 0x74, 0x6f,
	0x63, 0x6f, 0x6c, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x29, 0x0a, 0x10, 0x74, 0x72,
	0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x18, 0x0b,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x0f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x43, 0x6f,
	0x75, 0x6e, 0x74, 0x65, 0x72, 0x12, 0x36, 0x0a, 0x17, 0x63, 0x72, 0x65, 0x61, 0x74, 0x69, 0x6e,
	0x67, 0x5f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64,
	0x18, 0x0c, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x15, 0x63, 0x72, 0x65, 0x61, 0x74, 0x69, 0x6e, 0x67,
	0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x56, 0x0a,
	0x08, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x3a, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x64, 0x69, 0x67, 0x69, 0x74, 0x61, 0x6c, 0x61, 0x73, 0x73,
	0x65, 0x74, 0x2e, 0x63, 0x61, 0x6e, 0x74, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63,
	0x6f, 0x6c, 0x2e, 0x76, 0x33, 0x30, 0x2e, 0x53, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x69, 0x7a, 0x61,
	0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x52, 0x08, 0x63, 0x6f, 0x6e,
	0x74, 0x72, 0x61, 0x63, 0x74, 0x22, 0xfc, 0x02, 0x0a, 0x0e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66,
	0x65, 0x72, 0x49, 0x6e, 0x56, 0x69, 0x65, 0x77, 0x12, 0x3c, 0x0a, 0x04, 0x73, 0x61, 0x6c, 0x74,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x64, 0x69, 0x67,
	0x69, 0x74, 0x61, 0x6c, 0x61, 0x73, 0x73, 0x65, 0x74, 0x2e, 0x63, 0x61, 0x6e, 0x74, 0x6f, 0x6e,
	0x2e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x6f, 0x2e, 0x76, 0x33, 0x30, 0x2e, 0x53, 0x61, 0x6c, 0x74,
	0x52, 0x04, 0x73, 0x61, 0x6c, 0x74, 0x12, 0x56, 0x0a, 0x08, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61,
	0x63, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3a, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x64,
	0x69, 0x67, 0x69, 0x74, 0x61, 0x6c, 0x61, 0x73, 0x73, 0x65, 0x74, 0x2e, 0x63, 0x61, 0x6e, 0x74,
	0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x76, 0x33, 0x30, 0x2e,
	0x53, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x69, 0x7a, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x74,
	0x72, 0x61, 0x63, 0x74, 0x52, 0x08, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x12, 0x39,
	0x0a, 0x19, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x5f, 0x6f, 0x75, 0x74, 0x5f, 0x72,
	0x65, 0x73, 0x75, 0x6c, 0x74, 0x5f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x0c, 0x52, 0x16, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x4f, 0x75, 0x74, 0x52, 0x65,
	0x73, 0x75, 0x6c, 0x74, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x36, 0x0a, 0x17, 0x63, 0x72, 0x65,
	0x61, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x5f, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x15, 0x63, 0x72, 0x65, 0x61,
	0x74, 0x69, 0x6e, 0x67, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49,
	0x64, 0x12, 0x36, 0x0a, 0x17, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x63, 0x6f, 0x6c, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x15, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63,
	0x6f, 0x6c, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x29, 0x0a, 0x10, 0x74, 0x72, 0x61,
	0x6e, 0x73, 0x66, 0x65, 0x72, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x18, 0x0c, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x0f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x43, 0x6f, 0x75,
	0x6e, 0x74, 0x65, 0x72, 0x42, 0x55, 0x5a, 0x53, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63,
	0x6f, 0x6d, 0x2f, 0x64, 0x69, 0x67, 0x69, 0x74, 0x61, 0x6c, 0x2d, 0x61, 0x73, 0x73, 0x65, 0x74,
	0x2f, 0x64, 0x61, 0x7a, 0x6c, 0x2d, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2f, 0x76, 0x38, 0x2f,
	0x67, 0x6f, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x63, 0x6f, 0x6d, 0x2f, 0x64, 0x69, 0x67, 0x69, 0x74,
	0x61, 0x6c, 0x61, 0x73, 0x73, 0x65, 0x74, 0x2f, 0x63, 0x61, 0x6e, 0x74, 0x6f, 0x6e, 0x2f, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2f, 0x76, 0x33, 0x30, 0x62, 0x06, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x33,
}

var (
	file_com_digitalasset_canton_protocol_v30_participant_transfer_proto_rawDescOnce sync.Once
	file_com_digitalasset_canton_protocol_v30_participant_transfer_proto_rawDescData = file_com_digitalasset_canton_protocol_v30_participant_transfer_proto_rawDesc
)

func file_com_digitalasset_canton_protocol_v30_participant_transfer_proto_rawDescGZIP() []byte {
	file_com_digitalasset_canton_protocol_v30_participant_transfer_proto_rawDescOnce.Do(func() {
		file_com_digitalasset_canton_protocol_v30_participant_transfer_proto_rawDescData = protoimpl.X.CompressGZIP(file_com_digitalasset_canton_protocol_v30_participant_transfer_proto_rawDescData)
	})
	return file_com_digitalasset_canton_protocol_v30_participant_transfer_proto_rawDescData
}

var file_com_digitalasset_canton_protocol_v30_participant_transfer_proto_msgTypes = make([]protoimpl.MessageInfo, 9)
var file_com_digitalasset_canton_protocol_v30_participant_transfer_proto_goTypes = []any{
	(*TransferId)(nil),                 // 0: com.digitalasset.canton.protocol.v30.TransferId
	(*TransferOutCommonData)(nil),      // 1: com.digitalasset.canton.protocol.v30.TransferOutCommonData
	(*TransferViewTree)(nil),           // 2: com.digitalasset.canton.protocol.v30.TransferViewTree
	(*TransferInMediatorMessage)(nil),  // 3: com.digitalasset.canton.protocol.v30.TransferInMediatorMessage
	(*TransferOutMediatorMessage)(nil), // 4: com.digitalasset.canton.protocol.v30.TransferOutMediatorMessage
	(*TransferInCommonData)(nil),       // 5: com.digitalasset.canton.protocol.v30.TransferInCommonData
	(*TransferSubmitterMetadata)(nil),  // 6: com.digitalasset.canton.protocol.v30.TransferSubmitterMetadata
	(*TransferOutView)(nil),            // 7: com.digitalasset.canton.protocol.v30.TransferOutView
	(*TransferInView)(nil),             // 8: com.digitalasset.canton.protocol.v30.TransferInView
	(*v30.Salt)(nil),                   // 9: com.digitalasset.canton.crypto.v30.Salt
	(*BlindableNode)(nil),              // 10: com.digitalasset.canton.protocol.v30.BlindableNode
	(*v30.Signature)(nil),              // 11: com.digitalasset.canton.crypto.v30.Signature
	(*TimeProof)(nil),                  // 12: com.digitalasset.canton.time.v30.TimeProof
	(*SerializableContract)(nil),       // 13: com.digitalasset.canton.protocol.v30.SerializableContract
}
var file_com_digitalasset_canton_protocol_v30_participant_transfer_proto_depIdxs = []int32{
	9,  // 0: com.digitalasset.canton.protocol.v30.TransferOutCommonData.salt:type_name -> com.digitalasset.canton.crypto.v30.Salt
	6,  // 1: com.digitalasset.canton.protocol.v30.TransferOutCommonData.submitter_metadata:type_name -> com.digitalasset.canton.protocol.v30.TransferSubmitterMetadata
	10, // 2: com.digitalasset.canton.protocol.v30.TransferViewTree.participant_data:type_name -> com.digitalasset.canton.protocol.v30.BlindableNode
	2,  // 3: com.digitalasset.canton.protocol.v30.TransferInMediatorMessage.tree:type_name -> com.digitalasset.canton.protocol.v30.TransferViewTree
	11, // 4: com.digitalasset.canton.protocol.v30.TransferInMediatorMessage.submitting_participant_signature:type_name -> com.digitalasset.canton.crypto.v30.Signature
	2,  // 5: com.digitalasset.canton.protocol.v30.TransferOutMediatorMessage.tree:type_name -> com.digitalasset.canton.protocol.v30.TransferViewTree
	11, // 6: com.digitalasset.canton.protocol.v30.TransferOutMediatorMessage.submitting_participant_signature:type_name -> com.digitalasset.canton.crypto.v30.Signature
	9,  // 7: com.digitalasset.canton.protocol.v30.TransferInCommonData.salt:type_name -> com.digitalasset.canton.crypto.v30.Salt
	6,  // 8: com.digitalasset.canton.protocol.v30.TransferInCommonData.submitter_metadata:type_name -> com.digitalasset.canton.protocol.v30.TransferSubmitterMetadata
	9,  // 9: com.digitalasset.canton.protocol.v30.TransferOutView.salt:type_name -> com.digitalasset.canton.crypto.v30.Salt
	12, // 10: com.digitalasset.canton.protocol.v30.TransferOutView.target_time_proof:type_name -> com.digitalasset.canton.time.v30.TimeProof
	13, // 11: com.digitalasset.canton.protocol.v30.TransferOutView.contract:type_name -> com.digitalasset.canton.protocol.v30.SerializableContract
	9,  // 12: com.digitalasset.canton.protocol.v30.TransferInView.salt:type_name -> com.digitalasset.canton.crypto.v30.Salt
	13, // 13: com.digitalasset.canton.protocol.v30.TransferInView.contract:type_name -> com.digitalasset.canton.protocol.v30.SerializableContract
	14, // [14:14] is the sub-list for method output_type
	14, // [14:14] is the sub-list for method input_type
	14, // [14:14] is the sub-list for extension type_name
	14, // [14:14] is the sub-list for extension extendee
	0,  // [0:14] is the sub-list for field type_name
}

func init() { file_com_digitalasset_canton_protocol_v30_participant_transfer_proto_init() }
func file_com_digitalasset_canton_protocol_v30_participant_transfer_proto_init() {
	if File_com_digitalasset_canton_protocol_v30_participant_transfer_proto != nil {
		return
	}
	file_com_digitalasset_canton_protocol_v30_common_stable_proto_init()
	file_com_digitalasset_canton_protocol_v30_merkle_proto_init()
	file_com_digitalasset_canton_time_v30_time_proof_proto_init()
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_com_digitalasset_canton_protocol_v30_participant_transfer_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   9,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_com_digitalasset_canton_protocol_v30_participant_transfer_proto_goTypes,
		DependencyIndexes: file_com_digitalasset_canton_protocol_v30_participant_transfer_proto_depIdxs,
		MessageInfos:      file_com_digitalasset_canton_protocol_v30_participant_transfer_proto_msgTypes,
	}.Build()
	File_com_digitalasset_canton_protocol_v30_participant_transfer_proto = out.File
	file_com_digitalasset_canton_protocol_v30_participant_transfer_proto_rawDesc = nil
	file_com_digitalasset_canton_protocol_v30_participant_transfer_proto_goTypes = nil
	file_com_digitalasset_canton_protocol_v30_participant_transfer_proto_depIdxs = nil
}
