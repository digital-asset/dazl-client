// Copyright (c) 2017-2025 Digital Asset (Switzerland) GmbH and/or its affiliates. All rights reserved.
// SPDX-License-Identifier: Apache-2.0
// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.35.2
// 	protoc        v5.27.2
// source: com/digitalasset/canton/protocol/v30/participant_transaction.proto

package v30

import (
	v30 "github.com/digital-asset/dazl-client/v8/go/api/com/digitalasset/canton/crypto/v30"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	durationpb "google.golang.org/protobuf/types/known/durationpb"
	wrapperspb "google.golang.org/protobuf/types/known/wrapperspb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type DeduplicationPeriod struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Period:
	//
	//	*DeduplicationPeriod_Duration
	//	*DeduplicationPeriod_Offset
	Period isDeduplicationPeriod_Period `protobuf_oneof:"period"`
}

func (x *DeduplicationPeriod) Reset() {
	*x = DeduplicationPeriod{}
	mi := &file_com_digitalasset_canton_protocol_v30_participant_transaction_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DeduplicationPeriod) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeduplicationPeriod) ProtoMessage() {}

func (x *DeduplicationPeriod) ProtoReflect() protoreflect.Message {
	mi := &file_com_digitalasset_canton_protocol_v30_participant_transaction_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeduplicationPeriod.ProtoReflect.Descriptor instead.
func (*DeduplicationPeriod) Descriptor() ([]byte, []int) {
	return file_com_digitalasset_canton_protocol_v30_participant_transaction_proto_rawDescGZIP(), []int{0}
}

func (m *DeduplicationPeriod) GetPeriod() isDeduplicationPeriod_Period {
	if m != nil {
		return m.Period
	}
	return nil
}

func (x *DeduplicationPeriod) GetDuration() *durationpb.Duration {
	if x, ok := x.GetPeriod().(*DeduplicationPeriod_Duration); ok {
		return x.Duration
	}
	return nil
}

func (x *DeduplicationPeriod) GetOffset() []byte {
	if x, ok := x.GetPeriod().(*DeduplicationPeriod_Offset); ok {
		return x.Offset
	}
	return nil
}

type isDeduplicationPeriod_Period interface {
	isDeduplicationPeriod_Period()
}

type DeduplicationPeriod_Duration struct {
	Duration *durationpb.Duration `protobuf:"bytes,1,opt,name=duration,proto3,oneof"`
}

type DeduplicationPeriod_Offset struct {
	Offset []byte `protobuf:"bytes,2,opt,name=offset,proto3,oneof"`
}

func (*DeduplicationPeriod_Duration) isDeduplicationPeriod_Period() {}

func (*DeduplicationPeriod_Offset) isDeduplicationPeriod_Period() {}

type ParticipantMetadata struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Salt           *v30.Salt `protobuf:"bytes,1,opt,name=salt,proto3" json:"salt,omitempty"`
	LedgerTime     int64     `protobuf:"varint,2,opt,name=ledger_time,json=ledgerTime,proto3" json:"ledger_time,omitempty"`
	SubmissionTime int64     `protobuf:"varint,3,opt,name=submission_time,json=submissionTime,proto3" json:"submission_time,omitempty"`
	WorkflowId     string    `protobuf:"bytes,4,opt,name=workflow_id,json=workflowId,proto3" json:"workflow_id,omitempty"`
}

func (x *ParticipantMetadata) Reset() {
	*x = ParticipantMetadata{}
	mi := &file_com_digitalasset_canton_protocol_v30_participant_transaction_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ParticipantMetadata) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ParticipantMetadata) ProtoMessage() {}

func (x *ParticipantMetadata) ProtoReflect() protoreflect.Message {
	mi := &file_com_digitalasset_canton_protocol_v30_participant_transaction_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ParticipantMetadata.ProtoReflect.Descriptor instead.
func (*ParticipantMetadata) Descriptor() ([]byte, []int) {
	return file_com_digitalasset_canton_protocol_v30_participant_transaction_proto_rawDescGZIP(), []int{1}
}

func (x *ParticipantMetadata) GetSalt() *v30.Salt {
	if x != nil {
		return x.Salt
	}
	return nil
}

func (x *ParticipantMetadata) GetLedgerTime() int64 {
	if x != nil {
		return x.LedgerTime
	}
	return 0
}

func (x *ParticipantMetadata) GetSubmissionTime() int64 {
	if x != nil {
		return x.SubmissionTime
	}
	return 0
}

func (x *ParticipantMetadata) GetWorkflowId() string {
	if x != nil {
		return x.WorkflowId
	}
	return ""
}

type RootHashMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RootHash               []byte   `protobuf:"bytes,1,opt,name=root_hash,json=rootHash,proto3" json:"root_hash,omitempty"`
	DomainId               string   `protobuf:"bytes,2,opt,name=domain_id,json=domainId,proto3" json:"domain_id,omitempty"`
	ViewType               ViewType `protobuf:"varint,3,opt,name=view_type,json=viewType,proto3,enum=com.digitalasset.canton.protocol.v30.ViewType" json:"view_type,omitempty"`
	SubmissionTopologyTime int64    `protobuf:"varint,4,opt,name=submission_topology_time,json=submissionTopologyTime,proto3" json:"submission_topology_time,omitempty"`
	Payload                []byte   `protobuf:"bytes,5,opt,name=payload,proto3" json:"payload,omitempty"`
}

func (x *RootHashMessage) Reset() {
	*x = RootHashMessage{}
	mi := &file_com_digitalasset_canton_protocol_v30_participant_transaction_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RootHashMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RootHashMessage) ProtoMessage() {}

func (x *RootHashMessage) ProtoReflect() protoreflect.Message {
	mi := &file_com_digitalasset_canton_protocol_v30_participant_transaction_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RootHashMessage.ProtoReflect.Descriptor instead.
func (*RootHashMessage) Descriptor() ([]byte, []int) {
	return file_com_digitalasset_canton_protocol_v30_participant_transaction_proto_rawDescGZIP(), []int{2}
}

func (x *RootHashMessage) GetRootHash() []byte {
	if x != nil {
		return x.RootHash
	}
	return nil
}

func (x *RootHashMessage) GetDomainId() string {
	if x != nil {
		return x.DomainId
	}
	return ""
}

func (x *RootHashMessage) GetViewType() ViewType {
	if x != nil {
		return x.ViewType
	}
	return ViewType_VIEW_TYPE_UNSPECIFIED
}

func (x *RootHashMessage) GetSubmissionTopologyTime() int64 {
	if x != nil {
		return x.SubmissionTopologyTime
	}
	return 0
}

func (x *RootHashMessage) GetPayload() []byte {
	if x != nil {
		return x.Payload
	}
	return nil
}

type ViewNode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ViewCommonData      *BlindableNode `protobuf:"bytes,1,opt,name=view_common_data,json=viewCommonData,proto3" json:"view_common_data,omitempty"`
	ViewParticipantData *BlindableNode `protobuf:"bytes,2,opt,name=view_participant_data,json=viewParticipantData,proto3" json:"view_participant_data,omitempty"`
	Subviews            *MerkleSeq     `protobuf:"bytes,3,opt,name=subviews,proto3" json:"subviews,omitempty"`
}

func (x *ViewNode) Reset() {
	*x = ViewNode{}
	mi := &file_com_digitalasset_canton_protocol_v30_participant_transaction_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ViewNode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ViewNode) ProtoMessage() {}

func (x *ViewNode) ProtoReflect() protoreflect.Message {
	mi := &file_com_digitalasset_canton_protocol_v30_participant_transaction_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ViewNode.ProtoReflect.Descriptor instead.
func (*ViewNode) Descriptor() ([]byte, []int) {
	return file_com_digitalasset_canton_protocol_v30_participant_transaction_proto_rawDescGZIP(), []int{3}
}

func (x *ViewNode) GetViewCommonData() *BlindableNode {
	if x != nil {
		return x.ViewCommonData
	}
	return nil
}

func (x *ViewNode) GetViewParticipantData() *BlindableNode {
	if x != nil {
		return x.ViewParticipantData
	}
	return nil
}

func (x *ViewNode) GetSubviews() *MerkleSeq {
	if x != nil {
		return x.Subviews
	}
	return nil
}

type ViewCommonData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Salt      *v30.Salt `protobuf:"bytes,1,opt,name=salt,proto3" json:"salt,omitempty"`
	Informees []string  `protobuf:"bytes,2,rep,name=informees,proto3" json:"informees,omitempty"`
	Quorums   []*Quorum `protobuf:"bytes,3,rep,name=quorums,proto3" json:"quorums,omitempty"`
}

func (x *ViewCommonData) Reset() {
	*x = ViewCommonData{}
	mi := &file_com_digitalasset_canton_protocol_v30_participant_transaction_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ViewCommonData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ViewCommonData) ProtoMessage() {}

func (x *ViewCommonData) ProtoReflect() protoreflect.Message {
	mi := &file_com_digitalasset_canton_protocol_v30_participant_transaction_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ViewCommonData.ProtoReflect.Descriptor instead.
func (*ViewCommonData) Descriptor() ([]byte, []int) {
	return file_com_digitalasset_canton_protocol_v30_participant_transaction_proto_rawDescGZIP(), []int{4}
}

func (x *ViewCommonData) GetSalt() *v30.Salt {
	if x != nil {
		return x.Salt
	}
	return nil
}

func (x *ViewCommonData) GetInformees() []string {
	if x != nil {
		return x.Informees
	}
	return nil
}

func (x *ViewCommonData) GetQuorums() []*Quorum {
	if x != nil {
		return x.Quorums
	}
	return nil
}

type Informee struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Party  string `protobuf:"bytes,1,opt,name=party,proto3" json:"party,omitempty"`
	Weight int32  `protobuf:"varint,2,opt,name=weight,proto3" json:"weight,omitempty"`
}

func (x *Informee) Reset() {
	*x = Informee{}
	mi := &file_com_digitalasset_canton_protocol_v30_participant_transaction_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Informee) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Informee) ProtoMessage() {}

func (x *Informee) ProtoReflect() protoreflect.Message {
	mi := &file_com_digitalasset_canton_protocol_v30_participant_transaction_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Informee.ProtoReflect.Descriptor instead.
func (*Informee) Descriptor() ([]byte, []int) {
	return file_com_digitalasset_canton_protocol_v30_participant_transaction_proto_rawDescGZIP(), []int{5}
}

func (x *Informee) GetParty() string {
	if x != nil {
		return x.Party
	}
	return ""
}

func (x *Informee) GetWeight() int32 {
	if x != nil {
		return x.Weight
	}
	return 0
}

type ParticipantRandomnessLookup struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Randomness  []byte `protobuf:"bytes,1,opt,name=randomness,proto3" json:"randomness,omitempty"`
	Fingerprint string `protobuf:"bytes,2,opt,name=fingerprint,proto3" json:"fingerprint,omitempty"`
}

func (x *ParticipantRandomnessLookup) Reset() {
	*x = ParticipantRandomnessLookup{}
	mi := &file_com_digitalasset_canton_protocol_v30_participant_transaction_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ParticipantRandomnessLookup) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ParticipantRandomnessLookup) ProtoMessage() {}

func (x *ParticipantRandomnessLookup) ProtoReflect() protoreflect.Message {
	mi := &file_com_digitalasset_canton_protocol_v30_participant_transaction_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ParticipantRandomnessLookup.ProtoReflect.Descriptor instead.
func (*ParticipantRandomnessLookup) Descriptor() ([]byte, []int) {
	return file_com_digitalasset_canton_protocol_v30_participant_transaction_proto_rawDescGZIP(), []int{6}
}

func (x *ParticipantRandomnessLookup) GetRandomness() []byte {
	if x != nil {
		return x.Randomness
	}
	return nil
}

func (x *ParticipantRandomnessLookup) GetFingerprint() string {
	if x != nil {
		return x.Fingerprint
	}
	return ""
}

// Deprecated: Marked as deprecated in com/digitalasset/canton/protocol/v30/participant_transaction.proto.
type ViewParticipantMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *ViewParticipantMessage) Reset() {
	*x = ViewParticipantMessage{}
	mi := &file_com_digitalasset_canton_protocol_v30_participant_transaction_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ViewParticipantMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ViewParticipantMessage) ProtoMessage() {}

func (x *ViewParticipantMessage) ProtoReflect() protoreflect.Message {
	mi := &file_com_digitalasset_canton_protocol_v30_participant_transaction_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ViewParticipantMessage.ProtoReflect.Descriptor instead.
func (*ViewParticipantMessage) Descriptor() ([]byte, []int) {
	return file_com_digitalasset_canton_protocol_v30_participant_transaction_proto_rawDescGZIP(), []int{7}
}

type InformeeMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FullInformeeTree               *FullInformeeTree `protobuf:"bytes,1,opt,name=full_informee_tree,json=fullInformeeTree,proto3" json:"full_informee_tree,omitempty"`
	SubmittingParticipantSignature *v30.Signature    `protobuf:"bytes,2,opt,name=submitting_participant_signature,json=submittingParticipantSignature,proto3" json:"submitting_participant_signature,omitempty"`
}

func (x *InformeeMessage) Reset() {
	*x = InformeeMessage{}
	mi := &file_com_digitalasset_canton_protocol_v30_participant_transaction_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *InformeeMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InformeeMessage) ProtoMessage() {}

func (x *InformeeMessage) ProtoReflect() protoreflect.Message {
	mi := &file_com_digitalasset_canton_protocol_v30_participant_transaction_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InformeeMessage.ProtoReflect.Descriptor instead.
func (*InformeeMessage) Descriptor() ([]byte, []int) {
	return file_com_digitalasset_canton_protocol_v30_participant_transaction_proto_rawDescGZIP(), []int{8}
}

func (x *InformeeMessage) GetFullInformeeTree() *FullInformeeTree {
	if x != nil {
		return x.FullInformeeTree
	}
	return nil
}

func (x *InformeeMessage) GetSubmittingParticipantSignature() *v30.Signature {
	if x != nil {
		return x.SubmittingParticipantSignature
	}
	return nil
}

type LightTransactionViewTree struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Tree          *GenTransactionTree `protobuf:"bytes,1,opt,name=tree,proto3" json:"tree,omitempty"`
	SubviewHashes [][]byte            `protobuf:"bytes,2,rep,name=subview_hashes,json=subviewHashes,proto3" json:"subview_hashes,omitempty"`
}

func (x *LightTransactionViewTree) Reset() {
	*x = LightTransactionViewTree{}
	mi := &file_com_digitalasset_canton_protocol_v30_participant_transaction_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *LightTransactionViewTree) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LightTransactionViewTree) ProtoMessage() {}

func (x *LightTransactionViewTree) ProtoReflect() protoreflect.Message {
	mi := &file_com_digitalasset_canton_protocol_v30_participant_transaction_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LightTransactionViewTree.ProtoReflect.Descriptor instead.
func (*LightTransactionViewTree) Descriptor() ([]byte, []int) {
	return file_com_digitalasset_canton_protocol_v30_participant_transaction_proto_rawDescGZIP(), []int{9}
}

func (x *LightTransactionViewTree) GetTree() *GenTransactionTree {
	if x != nil {
		return x.Tree
	}
	return nil
}

func (x *LightTransactionViewTree) GetSubviewHashes() [][]byte {
	if x != nil {
		return x.SubviewHashes
	}
	return nil
}

type FullInformeeTree struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Tree *GenTransactionTree `protobuf:"bytes,1,opt,name=tree,proto3" json:"tree,omitempty"`
}

func (x *FullInformeeTree) Reset() {
	*x = FullInformeeTree{}
	mi := &file_com_digitalasset_canton_protocol_v30_participant_transaction_proto_msgTypes[10]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *FullInformeeTree) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FullInformeeTree) ProtoMessage() {}

func (x *FullInformeeTree) ProtoReflect() protoreflect.Message {
	mi := &file_com_digitalasset_canton_protocol_v30_participant_transaction_proto_msgTypes[10]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FullInformeeTree.ProtoReflect.Descriptor instead.
func (*FullInformeeTree) Descriptor() ([]byte, []int) {
	return file_com_digitalasset_canton_protocol_v30_participant_transaction_proto_rawDescGZIP(), []int{10}
}

func (x *FullInformeeTree) GetTree() *GenTransactionTree {
	if x != nil {
		return x.Tree
	}
	return nil
}

type CreatedContract struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Contract       *SerializableContract `protobuf:"bytes,1,opt,name=contract,proto3" json:"contract,omitempty"`
	ConsumedInCore bool                  `protobuf:"varint,2,opt,name=consumed_in_core,json=consumedInCore,proto3" json:"consumed_in_core,omitempty"`
	RolledBack     bool                  `protobuf:"varint,3,opt,name=rolled_back,json=rolledBack,proto3" json:"rolled_back,omitempty"`
}

func (x *CreatedContract) Reset() {
	*x = CreatedContract{}
	mi := &file_com_digitalasset_canton_protocol_v30_participant_transaction_proto_msgTypes[11]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreatedContract) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreatedContract) ProtoMessage() {}

func (x *CreatedContract) ProtoReflect() protoreflect.Message {
	mi := &file_com_digitalasset_canton_protocol_v30_participant_transaction_proto_msgTypes[11]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreatedContract.ProtoReflect.Descriptor instead.
func (*CreatedContract) Descriptor() ([]byte, []int) {
	return file_com_digitalasset_canton_protocol_v30_participant_transaction_proto_rawDescGZIP(), []int{11}
}

func (x *CreatedContract) GetContract() *SerializableContract {
	if x != nil {
		return x.Contract
	}
	return nil
}

func (x *CreatedContract) GetConsumedInCore() bool {
	if x != nil {
		return x.ConsumedInCore
	}
	return false
}

func (x *CreatedContract) GetRolledBack() bool {
	if x != nil {
		return x.RolledBack
	}
	return false
}

type InputContract struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Contract *SerializableContract `protobuf:"bytes,1,opt,name=contract,proto3" json:"contract,omitempty"`
	Consumed bool                  `protobuf:"varint,2,opt,name=consumed,proto3" json:"consumed,omitempty"`
}

func (x *InputContract) Reset() {
	*x = InputContract{}
	mi := &file_com_digitalasset_canton_protocol_v30_participant_transaction_proto_msgTypes[12]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *InputContract) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InputContract) ProtoMessage() {}

func (x *InputContract) ProtoReflect() protoreflect.Message {
	mi := &file_com_digitalasset_canton_protocol_v30_participant_transaction_proto_msgTypes[12]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InputContract.ProtoReflect.Descriptor instead.
func (*InputContract) Descriptor() ([]byte, []int) {
	return file_com_digitalasset_canton_protocol_v30_participant_transaction_proto_rawDescGZIP(), []int{12}
}

func (x *InputContract) GetContract() *SerializableContract {
	if x != nil {
		return x.Contract
	}
	return nil
}

func (x *InputContract) GetConsumed() bool {
	if x != nil {
		return x.Consumed
	}
	return false
}

type CommonMetadata struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Salt          *v30.Salt `protobuf:"bytes,1,opt,name=salt,proto3" json:"salt,omitempty"`
	DomainId      string    `protobuf:"bytes,3,opt,name=domain_id,json=domainId,proto3" json:"domain_id,omitempty"`
	Uuid          string    `protobuf:"bytes,4,opt,name=uuid,proto3" json:"uuid,omitempty"`
	MediatorGroup int32     `protobuf:"varint,5,opt,name=mediator_group,json=mediatorGroup,proto3" json:"mediator_group,omitempty"`
}

func (x *CommonMetadata) Reset() {
	*x = CommonMetadata{}
	mi := &file_com_digitalasset_canton_protocol_v30_participant_transaction_proto_msgTypes[13]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CommonMetadata) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CommonMetadata) ProtoMessage() {}

func (x *CommonMetadata) ProtoReflect() protoreflect.Message {
	mi := &file_com_digitalasset_canton_protocol_v30_participant_transaction_proto_msgTypes[13]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CommonMetadata.ProtoReflect.Descriptor instead.
func (*CommonMetadata) Descriptor() ([]byte, []int) {
	return file_com_digitalasset_canton_protocol_v30_participant_transaction_proto_rawDescGZIP(), []int{13}
}

func (x *CommonMetadata) GetSalt() *v30.Salt {
	if x != nil {
		return x.Salt
	}
	return nil
}

func (x *CommonMetadata) GetDomainId() string {
	if x != nil {
		return x.DomainId
	}
	return ""
}

func (x *CommonMetadata) GetUuid() string {
	if x != nil {
		return x.Uuid
	}
	return ""
}

func (x *CommonMetadata) GetMediatorGroup() int32 {
	if x != nil {
		return x.MediatorGroup
	}
	return 0
}

type SubmitterMetadata struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Salt                     *v30.Salt            `protobuf:"bytes,1,opt,name=salt,proto3" json:"salt,omitempty"`
	ActAs                    []string             `protobuf:"bytes,2,rep,name=act_as,json=actAs,proto3" json:"act_as,omitempty"`
	ApplicationId            string               `protobuf:"bytes,3,opt,name=application_id,json=applicationId,proto3" json:"application_id,omitempty"`
	CommandId                string               `protobuf:"bytes,4,opt,name=command_id,json=commandId,proto3" json:"command_id,omitempty"`
	SubmittingParticipantUid string               `protobuf:"bytes,5,opt,name=submitting_participant_uid,json=submittingParticipantUid,proto3" json:"submitting_participant_uid,omitempty"`
	SubmissionId             string               `protobuf:"bytes,6,opt,name=submission_id,json=submissionId,proto3" json:"submission_id,omitempty"`
	DedupPeriod              *DeduplicationPeriod `protobuf:"bytes,7,opt,name=dedup_period,json=dedupPeriod,proto3" json:"dedup_period,omitempty"`
	MaxSequencingTime        int64                `protobuf:"varint,8,opt,name=max_sequencing_time,json=maxSequencingTime,proto3" json:"max_sequencing_time,omitempty"`
}

func (x *SubmitterMetadata) Reset() {
	*x = SubmitterMetadata{}
	mi := &file_com_digitalasset_canton_protocol_v30_participant_transaction_proto_msgTypes[14]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SubmitterMetadata) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SubmitterMetadata) ProtoMessage() {}

func (x *SubmitterMetadata) ProtoReflect() protoreflect.Message {
	mi := &file_com_digitalasset_canton_protocol_v30_participant_transaction_proto_msgTypes[14]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SubmitterMetadata.ProtoReflect.Descriptor instead.
func (*SubmitterMetadata) Descriptor() ([]byte, []int) {
	return file_com_digitalasset_canton_protocol_v30_participant_transaction_proto_rawDescGZIP(), []int{14}
}

func (x *SubmitterMetadata) GetSalt() *v30.Salt {
	if x != nil {
		return x.Salt
	}
	return nil
}

func (x *SubmitterMetadata) GetActAs() []string {
	if x != nil {
		return x.ActAs
	}
	return nil
}

func (x *SubmitterMetadata) GetApplicationId() string {
	if x != nil {
		return x.ApplicationId
	}
	return ""
}

func (x *SubmitterMetadata) GetCommandId() string {
	if x != nil {
		return x.CommandId
	}
	return ""
}

func (x *SubmitterMetadata) GetSubmittingParticipantUid() string {
	if x != nil {
		return x.SubmittingParticipantUid
	}
	return ""
}

func (x *SubmitterMetadata) GetSubmissionId() string {
	if x != nil {
		return x.SubmissionId
	}
	return ""
}

func (x *SubmitterMetadata) GetDedupPeriod() *DeduplicationPeriod {
	if x != nil {
		return x.DedupPeriod
	}
	return nil
}

func (x *SubmitterMetadata) GetMaxSequencingTime() int64 {
	if x != nil {
		return x.MaxSequencingTime
	}
	return 0
}

type SessionKeyLookup struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SessionKeyRandomness    []byte                      `protobuf:"bytes,1,opt,name=session_key_randomness,json=sessionKeyRandomness,proto3" json:"session_key_randomness,omitempty"`
	EncryptionAlgorithmSpec v30.EncryptionAlgorithmSpec `protobuf:"varint,2,opt,name=encryption_algorithm_spec,json=encryptionAlgorithmSpec,proto3,enum=com.digitalasset.canton.crypto.v30.EncryptionAlgorithmSpec" json:"encryption_algorithm_spec,omitempty"`
	Fingerprint             string                      `protobuf:"bytes,3,opt,name=fingerprint,proto3" json:"fingerprint,omitempty"`
}

func (x *SessionKeyLookup) Reset() {
	*x = SessionKeyLookup{}
	mi := &file_com_digitalasset_canton_protocol_v30_participant_transaction_proto_msgTypes[15]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SessionKeyLookup) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SessionKeyLookup) ProtoMessage() {}

func (x *SessionKeyLookup) ProtoReflect() protoreflect.Message {
	mi := &file_com_digitalasset_canton_protocol_v30_participant_transaction_proto_msgTypes[15]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SessionKeyLookup.ProtoReflect.Descriptor instead.
func (*SessionKeyLookup) Descriptor() ([]byte, []int) {
	return file_com_digitalasset_canton_protocol_v30_participant_transaction_proto_rawDescGZIP(), []int{15}
}

func (x *SessionKeyLookup) GetSessionKeyRandomness() []byte {
	if x != nil {
		return x.SessionKeyRandomness
	}
	return nil
}

func (x *SessionKeyLookup) GetEncryptionAlgorithmSpec() v30.EncryptionAlgorithmSpec {
	if x != nil {
		return x.EncryptionAlgorithmSpec
	}
	return v30.EncryptionAlgorithmSpec(0)
}

func (x *SessionKeyLookup) GetFingerprint() string {
	if x != nil {
		return x.Fingerprint
	}
	return ""
}

type EncryptedViewMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ViewTree                       []byte                 `protobuf:"bytes,1,opt,name=view_tree,json=viewTree,proto3" json:"view_tree,omitempty"`
	EncryptionScheme               v30.SymmetricKeyScheme `protobuf:"varint,2,opt,name=encryption_scheme,json=encryptionScheme,proto3,enum=com.digitalasset.canton.crypto.v30.SymmetricKeyScheme" json:"encryption_scheme,omitempty"`
	SubmittingParticipantSignature *v30.Signature         `protobuf:"bytes,3,opt,name=submitting_participant_signature,json=submittingParticipantSignature,proto3" json:"submitting_participant_signature,omitempty"`
	ViewHash                       []byte                 `protobuf:"bytes,4,opt,name=view_hash,json=viewHash,proto3" json:"view_hash,omitempty"`
	Randomness                     []byte                 `protobuf:"bytes,5,opt,name=randomness,proto3" json:"randomness,omitempty"`
	SessionKeyRandomness           []*SessionKeyLookup    `protobuf:"bytes,6,rep,name=session_key_randomness,json=sessionKeyRandomness,proto3" json:"session_key_randomness,omitempty"`
	DomainId                       string                 `protobuf:"bytes,7,opt,name=domain_id,json=domainId,proto3" json:"domain_id,omitempty"`
	ViewType                       ViewType               `protobuf:"varint,8,opt,name=view_type,json=viewType,proto3,enum=com.digitalasset.canton.protocol.v30.ViewType" json:"view_type,omitempty"`
}

func (x *EncryptedViewMessage) Reset() {
	*x = EncryptedViewMessage{}
	mi := &file_com_digitalasset_canton_protocol_v30_participant_transaction_proto_msgTypes[16]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *EncryptedViewMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EncryptedViewMessage) ProtoMessage() {}

func (x *EncryptedViewMessage) ProtoReflect() protoreflect.Message {
	mi := &file_com_digitalasset_canton_protocol_v30_participant_transaction_proto_msgTypes[16]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EncryptedViewMessage.ProtoReflect.Descriptor instead.
func (*EncryptedViewMessage) Descriptor() ([]byte, []int) {
	return file_com_digitalasset_canton_protocol_v30_participant_transaction_proto_rawDescGZIP(), []int{16}
}

func (x *EncryptedViewMessage) GetViewTree() []byte {
	if x != nil {
		return x.ViewTree
	}
	return nil
}

func (x *EncryptedViewMessage) GetEncryptionScheme() v30.SymmetricKeyScheme {
	if x != nil {
		return x.EncryptionScheme
	}
	return v30.SymmetricKeyScheme(0)
}

func (x *EncryptedViewMessage) GetSubmittingParticipantSignature() *v30.Signature {
	if x != nil {
		return x.SubmittingParticipantSignature
	}
	return nil
}

func (x *EncryptedViewMessage) GetViewHash() []byte {
	if x != nil {
		return x.ViewHash
	}
	return nil
}

func (x *EncryptedViewMessage) GetRandomness() []byte {
	if x != nil {
		return x.Randomness
	}
	return nil
}

func (x *EncryptedViewMessage) GetSessionKeyRandomness() []*SessionKeyLookup {
	if x != nil {
		return x.SessionKeyRandomness
	}
	return nil
}

func (x *EncryptedViewMessage) GetDomainId() string {
	if x != nil {
		return x.DomainId
	}
	return ""
}

func (x *EncryptedViewMessage) GetViewType() ViewType {
	if x != nil {
		return x.ViewType
	}
	return ViewType_VIEW_TYPE_UNSPECIFIED
}

type ActionDescription struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Description:
	//
	//	*ActionDescription_Create
	//	*ActionDescription_Exercise
	//	*ActionDescription_Fetch
	//	*ActionDescription_LookupByKey
	Description isActionDescription_Description `protobuf_oneof:"description"`
}

func (x *ActionDescription) Reset() {
	*x = ActionDescription{}
	mi := &file_com_digitalasset_canton_protocol_v30_participant_transaction_proto_msgTypes[17]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ActionDescription) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ActionDescription) ProtoMessage() {}

func (x *ActionDescription) ProtoReflect() protoreflect.Message {
	mi := &file_com_digitalasset_canton_protocol_v30_participant_transaction_proto_msgTypes[17]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ActionDescription.ProtoReflect.Descriptor instead.
func (*ActionDescription) Descriptor() ([]byte, []int) {
	return file_com_digitalasset_canton_protocol_v30_participant_transaction_proto_rawDescGZIP(), []int{17}
}

func (m *ActionDescription) GetDescription() isActionDescription_Description {
	if m != nil {
		return m.Description
	}
	return nil
}

func (x *ActionDescription) GetCreate() *ActionDescription_CreateActionDescription {
	if x, ok := x.GetDescription().(*ActionDescription_Create); ok {
		return x.Create
	}
	return nil
}

func (x *ActionDescription) GetExercise() *ActionDescription_ExerciseActionDescription {
	if x, ok := x.GetDescription().(*ActionDescription_Exercise); ok {
		return x.Exercise
	}
	return nil
}

func (x *ActionDescription) GetFetch() *ActionDescription_FetchActionDescription {
	if x, ok := x.GetDescription().(*ActionDescription_Fetch); ok {
		return x.Fetch
	}
	return nil
}

func (x *ActionDescription) GetLookupByKey() *ActionDescription_LookupByKeyActionDescription {
	if x, ok := x.GetDescription().(*ActionDescription_LookupByKey); ok {
		return x.LookupByKey
	}
	return nil
}

type isActionDescription_Description interface {
	isActionDescription_Description()
}

type ActionDescription_Create struct {
	Create *ActionDescription_CreateActionDescription `protobuf:"bytes,1,opt,name=create,proto3,oneof"`
}

type ActionDescription_Exercise struct {
	Exercise *ActionDescription_ExerciseActionDescription `protobuf:"bytes,2,opt,name=exercise,proto3,oneof"`
}

type ActionDescription_Fetch struct {
	Fetch *ActionDescription_FetchActionDescription `protobuf:"bytes,3,opt,name=fetch,proto3,oneof"`
}

type ActionDescription_LookupByKey struct {
	LookupByKey *ActionDescription_LookupByKeyActionDescription `protobuf:"bytes,4,opt,name=lookup_by_key,json=lookupByKey,proto3,oneof"`
}

func (*ActionDescription_Create) isActionDescription_Description() {}

func (*ActionDescription_Exercise) isActionDescription_Description() {}

func (*ActionDescription_Fetch) isActionDescription_Description() {}

func (*ActionDescription_LookupByKey) isActionDescription_Description() {}

type ViewParticipantData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Salt                           *v30.Salt                            `protobuf:"bytes,1,opt,name=salt,proto3" json:"salt,omitempty"`
	CoreInputs                     []*InputContract                     `protobuf:"bytes,2,rep,name=core_inputs,json=coreInputs,proto3" json:"core_inputs,omitempty"`
	CreatedCore                    []*CreatedContract                   `protobuf:"bytes,3,rep,name=created_core,json=createdCore,proto3" json:"created_core,omitempty"`
	CreatedInSubviewArchivedInCore []string                             `protobuf:"bytes,4,rep,name=created_in_subview_archived_in_core,json=createdInSubviewArchivedInCore,proto3" json:"created_in_subview_archived_in_core,omitempty"`
	ResolvedKeys                   []*ViewParticipantData_ResolvedKey   `protobuf:"bytes,5,rep,name=resolved_keys,json=resolvedKeys,proto3" json:"resolved_keys,omitempty"`
	ActionDescription              *ActionDescription                   `protobuf:"bytes,6,opt,name=action_description,json=actionDescription,proto3" json:"action_description,omitempty"`
	RollbackContext                *ViewParticipantData_RollbackContext `protobuf:"bytes,7,opt,name=rollback_context,json=rollbackContext,proto3" json:"rollback_context,omitempty"`
}

func (x *ViewParticipantData) Reset() {
	*x = ViewParticipantData{}
	mi := &file_com_digitalasset_canton_protocol_v30_participant_transaction_proto_msgTypes[18]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ViewParticipantData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ViewParticipantData) ProtoMessage() {}

func (x *ViewParticipantData) ProtoReflect() protoreflect.Message {
	mi := &file_com_digitalasset_canton_protocol_v30_participant_transaction_proto_msgTypes[18]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ViewParticipantData.ProtoReflect.Descriptor instead.
func (*ViewParticipantData) Descriptor() ([]byte, []int) {
	return file_com_digitalasset_canton_protocol_v30_participant_transaction_proto_rawDescGZIP(), []int{18}
}

func (x *ViewParticipantData) GetSalt() *v30.Salt {
	if x != nil {
		return x.Salt
	}
	return nil
}

func (x *ViewParticipantData) GetCoreInputs() []*InputContract {
	if x != nil {
		return x.CoreInputs
	}
	return nil
}

func (x *ViewParticipantData) GetCreatedCore() []*CreatedContract {
	if x != nil {
		return x.CreatedCore
	}
	return nil
}

func (x *ViewParticipantData) GetCreatedInSubviewArchivedInCore() []string {
	if x != nil {
		return x.CreatedInSubviewArchivedInCore
	}
	return nil
}

func (x *ViewParticipantData) GetResolvedKeys() []*ViewParticipantData_ResolvedKey {
	if x != nil {
		return x.ResolvedKeys
	}
	return nil
}

func (x *ViewParticipantData) GetActionDescription() *ActionDescription {
	if x != nil {
		return x.ActionDescription
	}
	return nil
}

func (x *ViewParticipantData) GetRollbackContext() *ViewParticipantData_RollbackContext {
	if x != nil {
		return x.RollbackContext
	}
	return nil
}

type ActionDescription_CreateActionDescription struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ContractId string `protobuf:"bytes,1,opt,name=contract_id,json=contractId,proto3" json:"contract_id,omitempty"`
	NodeSeed   []byte `protobuf:"bytes,2,opt,name=node_seed,json=nodeSeed,proto3" json:"node_seed,omitempty"`
}

func (x *ActionDescription_CreateActionDescription) Reset() {
	*x = ActionDescription_CreateActionDescription{}
	mi := &file_com_digitalasset_canton_protocol_v30_participant_transaction_proto_msgTypes[19]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ActionDescription_CreateActionDescription) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ActionDescription_CreateActionDescription) ProtoMessage() {}

func (x *ActionDescription_CreateActionDescription) ProtoReflect() protoreflect.Message {
	mi := &file_com_digitalasset_canton_protocol_v30_participant_transaction_proto_msgTypes[19]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ActionDescription_CreateActionDescription.ProtoReflect.Descriptor instead.
func (*ActionDescription_CreateActionDescription) Descriptor() ([]byte, []int) {
	return file_com_digitalasset_canton_protocol_v30_participant_transaction_proto_rawDescGZIP(), []int{17, 0}
}

func (x *ActionDescription_CreateActionDescription) GetContractId() string {
	if x != nil {
		return x.ContractId
	}
	return ""
}

func (x *ActionDescription_CreateActionDescription) GetNodeSeed() []byte {
	if x != nil {
		return x.NodeSeed
	}
	return nil
}

type ActionDescription_ExerciseActionDescription struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	InputContractId   string                  `protobuf:"bytes,1,opt,name=input_contract_id,json=inputContractId,proto3" json:"input_contract_id,omitempty"`
	Choice            string                  `protobuf:"bytes,2,opt,name=choice,proto3" json:"choice,omitempty"`
	ChosenValue       []byte                  `protobuf:"bytes,3,opt,name=chosen_value,json=chosenValue,proto3" json:"chosen_value,omitempty"`
	Actors            []string                `protobuf:"bytes,4,rep,name=actors,proto3" json:"actors,omitempty"`
	ByKey             bool                    `protobuf:"varint,5,opt,name=by_key,json=byKey,proto3" json:"by_key,omitempty"`
	NodeSeed          []byte                  `protobuf:"bytes,6,opt,name=node_seed,json=nodeSeed,proto3" json:"node_seed,omitempty"`
	Failed            bool                    `protobuf:"varint,8,opt,name=failed,proto3" json:"failed,omitempty"`
	InterfaceId       *wrapperspb.StringValue `protobuf:"bytes,9,opt,name=interface_id,json=interfaceId,proto3" json:"interface_id,omitempty"`
	TemplateId        string                  `protobuf:"bytes,10,opt,name=template_id,json=templateId,proto3" json:"template_id,omitempty"`
	PackagePreference []string                `protobuf:"bytes,11,rep,name=package_preference,json=packagePreference,proto3" json:"package_preference,omitempty"`
}

func (x *ActionDescription_ExerciseActionDescription) Reset() {
	*x = ActionDescription_ExerciseActionDescription{}
	mi := &file_com_digitalasset_canton_protocol_v30_participant_transaction_proto_msgTypes[20]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ActionDescription_ExerciseActionDescription) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ActionDescription_ExerciseActionDescription) ProtoMessage() {}

func (x *ActionDescription_ExerciseActionDescription) ProtoReflect() protoreflect.Message {
	mi := &file_com_digitalasset_canton_protocol_v30_participant_transaction_proto_msgTypes[20]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ActionDescription_ExerciseActionDescription.ProtoReflect.Descriptor instead.
func (*ActionDescription_ExerciseActionDescription) Descriptor() ([]byte, []int) {
	return file_com_digitalasset_canton_protocol_v30_participant_transaction_proto_rawDescGZIP(), []int{17, 1}
}

func (x *ActionDescription_ExerciseActionDescription) GetInputContractId() string {
	if x != nil {
		return x.InputContractId
	}
	return ""
}

func (x *ActionDescription_ExerciseActionDescription) GetChoice() string {
	if x != nil {
		return x.Choice
	}
	return ""
}

func (x *ActionDescription_ExerciseActionDescription) GetChosenValue() []byte {
	if x != nil {
		return x.ChosenValue
	}
	return nil
}

func (x *ActionDescription_ExerciseActionDescription) GetActors() []string {
	if x != nil {
		return x.Actors
	}
	return nil
}

func (x *ActionDescription_ExerciseActionDescription) GetByKey() bool {
	if x != nil {
		return x.ByKey
	}
	return false
}

func (x *ActionDescription_ExerciseActionDescription) GetNodeSeed() []byte {
	if x != nil {
		return x.NodeSeed
	}
	return nil
}

func (x *ActionDescription_ExerciseActionDescription) GetFailed() bool {
	if x != nil {
		return x.Failed
	}
	return false
}

func (x *ActionDescription_ExerciseActionDescription) GetInterfaceId() *wrapperspb.StringValue {
	if x != nil {
		return x.InterfaceId
	}
	return nil
}

func (x *ActionDescription_ExerciseActionDescription) GetTemplateId() string {
	if x != nil {
		return x.TemplateId
	}
	return ""
}

func (x *ActionDescription_ExerciseActionDescription) GetPackagePreference() []string {
	if x != nil {
		return x.PackagePreference
	}
	return nil
}

type ActionDescription_FetchActionDescription struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	InputContractId string   `protobuf:"bytes,1,opt,name=input_contract_id,json=inputContractId,proto3" json:"input_contract_id,omitempty"`
	Actors          []string `protobuf:"bytes,2,rep,name=actors,proto3" json:"actors,omitempty"`
	ByKey           bool     `protobuf:"varint,3,opt,name=by_key,json=byKey,proto3" json:"by_key,omitempty"`
	TemplateId      string   `protobuf:"bytes,4,opt,name=template_id,json=templateId,proto3" json:"template_id,omitempty"`
}

func (x *ActionDescription_FetchActionDescription) Reset() {
	*x = ActionDescription_FetchActionDescription{}
	mi := &file_com_digitalasset_canton_protocol_v30_participant_transaction_proto_msgTypes[21]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ActionDescription_FetchActionDescription) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ActionDescription_FetchActionDescription) ProtoMessage() {}

func (x *ActionDescription_FetchActionDescription) ProtoReflect() protoreflect.Message {
	mi := &file_com_digitalasset_canton_protocol_v30_participant_transaction_proto_msgTypes[21]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ActionDescription_FetchActionDescription.ProtoReflect.Descriptor instead.
func (*ActionDescription_FetchActionDescription) Descriptor() ([]byte, []int) {
	return file_com_digitalasset_canton_protocol_v30_participant_transaction_proto_rawDescGZIP(), []int{17, 2}
}

func (x *ActionDescription_FetchActionDescription) GetInputContractId() string {
	if x != nil {
		return x.InputContractId
	}
	return ""
}

func (x *ActionDescription_FetchActionDescription) GetActors() []string {
	if x != nil {
		return x.Actors
	}
	return nil
}

func (x *ActionDescription_FetchActionDescription) GetByKey() bool {
	if x != nil {
		return x.ByKey
	}
	return false
}

func (x *ActionDescription_FetchActionDescription) GetTemplateId() string {
	if x != nil {
		return x.TemplateId
	}
	return ""
}

type ActionDescription_LookupByKeyActionDescription struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Key *GlobalKey `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
}

func (x *ActionDescription_LookupByKeyActionDescription) Reset() {
	*x = ActionDescription_LookupByKeyActionDescription{}
	mi := &file_com_digitalasset_canton_protocol_v30_participant_transaction_proto_msgTypes[22]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ActionDescription_LookupByKeyActionDescription) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ActionDescription_LookupByKeyActionDescription) ProtoMessage() {}

func (x *ActionDescription_LookupByKeyActionDescription) ProtoReflect() protoreflect.Message {
	mi := &file_com_digitalasset_canton_protocol_v30_participant_transaction_proto_msgTypes[22]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ActionDescription_LookupByKeyActionDescription.ProtoReflect.Descriptor instead.
func (*ActionDescription_LookupByKeyActionDescription) Descriptor() ([]byte, []int) {
	return file_com_digitalasset_canton_protocol_v30_participant_transaction_proto_rawDescGZIP(), []int{17, 3}
}

func (x *ActionDescription_LookupByKeyActionDescription) GetKey() *GlobalKey {
	if x != nil {
		return x.Key
	}
	return nil
}

type ViewParticipantData_FreeKey struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Maintainers []string `protobuf:"bytes,1,rep,name=maintainers,proto3" json:"maintainers,omitempty"`
}

func (x *ViewParticipantData_FreeKey) Reset() {
	*x = ViewParticipantData_FreeKey{}
	mi := &file_com_digitalasset_canton_protocol_v30_participant_transaction_proto_msgTypes[23]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ViewParticipantData_FreeKey) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ViewParticipantData_FreeKey) ProtoMessage() {}

func (x *ViewParticipantData_FreeKey) ProtoReflect() protoreflect.Message {
	mi := &file_com_digitalasset_canton_protocol_v30_participant_transaction_proto_msgTypes[23]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ViewParticipantData_FreeKey.ProtoReflect.Descriptor instead.
func (*ViewParticipantData_FreeKey) Descriptor() ([]byte, []int) {
	return file_com_digitalasset_canton_protocol_v30_participant_transaction_proto_rawDescGZIP(), []int{18, 0}
}

func (x *ViewParticipantData_FreeKey) GetMaintainers() []string {
	if x != nil {
		return x.Maintainers
	}
	return nil
}

type ViewParticipantData_ResolvedKey struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Key *GlobalKey `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
	// Types that are assignable to Resolution:
	//
	//	*ViewParticipantData_ResolvedKey_ContractId
	//	*ViewParticipantData_ResolvedKey_Free
	Resolution isViewParticipantData_ResolvedKey_Resolution `protobuf_oneof:"resolution"`
}

func (x *ViewParticipantData_ResolvedKey) Reset() {
	*x = ViewParticipantData_ResolvedKey{}
	mi := &file_com_digitalasset_canton_protocol_v30_participant_transaction_proto_msgTypes[24]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ViewParticipantData_ResolvedKey) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ViewParticipantData_ResolvedKey) ProtoMessage() {}

func (x *ViewParticipantData_ResolvedKey) ProtoReflect() protoreflect.Message {
	mi := &file_com_digitalasset_canton_protocol_v30_participant_transaction_proto_msgTypes[24]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ViewParticipantData_ResolvedKey.ProtoReflect.Descriptor instead.
func (*ViewParticipantData_ResolvedKey) Descriptor() ([]byte, []int) {
	return file_com_digitalasset_canton_protocol_v30_participant_transaction_proto_rawDescGZIP(), []int{18, 1}
}

func (x *ViewParticipantData_ResolvedKey) GetKey() *GlobalKey {
	if x != nil {
		return x.Key
	}
	return nil
}

func (m *ViewParticipantData_ResolvedKey) GetResolution() isViewParticipantData_ResolvedKey_Resolution {
	if m != nil {
		return m.Resolution
	}
	return nil
}

func (x *ViewParticipantData_ResolvedKey) GetContractId() string {
	if x, ok := x.GetResolution().(*ViewParticipantData_ResolvedKey_ContractId); ok {
		return x.ContractId
	}
	return ""
}

func (x *ViewParticipantData_ResolvedKey) GetFree() *ViewParticipantData_FreeKey {
	if x, ok := x.GetResolution().(*ViewParticipantData_ResolvedKey_Free); ok {
		return x.Free
	}
	return nil
}

type isViewParticipantData_ResolvedKey_Resolution interface {
	isViewParticipantData_ResolvedKey_Resolution()
}

type ViewParticipantData_ResolvedKey_ContractId struct {
	ContractId string `protobuf:"bytes,2,opt,name=contract_id,json=contractId,proto3,oneof"`
}

type ViewParticipantData_ResolvedKey_Free struct {
	Free *ViewParticipantData_FreeKey `protobuf:"bytes,3,opt,name=free,proto3,oneof"`
}

func (*ViewParticipantData_ResolvedKey_ContractId) isViewParticipantData_ResolvedKey_Resolution() {}

func (*ViewParticipantData_ResolvedKey_Free) isViewParticipantData_ResolvedKey_Resolution() {}

type ViewParticipantData_RollbackContext struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RollbackScope []int32 `protobuf:"varint,1,rep,packed,name=rollback_scope,json=rollbackScope,proto3" json:"rollback_scope,omitempty"`
	NextChild     int32   `protobuf:"varint,2,opt,name=next_child,json=nextChild,proto3" json:"next_child,omitempty"`
}

func (x *ViewParticipantData_RollbackContext) Reset() {
	*x = ViewParticipantData_RollbackContext{}
	mi := &file_com_digitalasset_canton_protocol_v30_participant_transaction_proto_msgTypes[25]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ViewParticipantData_RollbackContext) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ViewParticipantData_RollbackContext) ProtoMessage() {}

func (x *ViewParticipantData_RollbackContext) ProtoReflect() protoreflect.Message {
	mi := &file_com_digitalasset_canton_protocol_v30_participant_transaction_proto_msgTypes[25]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ViewParticipantData_RollbackContext.ProtoReflect.Descriptor instead.
func (*ViewParticipantData_RollbackContext) Descriptor() ([]byte, []int) {
	return file_com_digitalasset_canton_protocol_v30_participant_transaction_proto_rawDescGZIP(), []int{18, 2}
}

func (x *ViewParticipantData_RollbackContext) GetRollbackScope() []int32 {
	if x != nil {
		return x.RollbackScope
	}
	return nil
}

func (x *ViewParticipantData_RollbackContext) GetNextChild() int32 {
	if x != nil {
		return x.NextChild
	}
	return 0
}

var File_com_digitalasset_canton_protocol_v30_participant_transaction_proto protoreflect.FileDescriptor

var file_com_digitalasset_canton_protocol_v30_participant_transaction_proto_rawDesc = []byte{
	0x0a, 0x42, 0x63, 0x6f, 0x6d, 0x2f, 0x64, 0x69, 0x67, 0x69, 0x74, 0x61, 0x6c, 0x61, 0x73, 0x73,
	0x65, 0x74, 0x2f, 0x63, 0x61, 0x6e, 0x74, 0x6f, 0x6e, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63,
	0x6f, 0x6c, 0x2f, 0x76, 0x33, 0x30, 0x2f, 0x70, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61,
	0x6e, 0x74, 0x5f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x12, 0x24, 0x63, 0x6f, 0x6d, 0x2e, 0x64, 0x69, 0x67, 0x69, 0x74, 0x61,
	0x6c, 0x61, 0x73, 0x73, 0x65, 0x74, 0x2e, 0x63, 0x61, 0x6e, 0x74, 0x6f, 0x6e, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x76, 0x33, 0x30, 0x1a, 0x2f, 0x63, 0x6f, 0x6d, 0x2f,
	0x64, 0x69, 0x67, 0x69, 0x74, 0x61, 0x6c, 0x61, 0x73, 0x73, 0x65, 0x74, 0x2f, 0x63, 0x61, 0x6e,
	0x74, 0x6f, 0x6e, 0x2f, 0x63, 0x72, 0x79, 0x70, 0x74, 0x6f, 0x2f, 0x76, 0x33, 0x30, 0x2f, 0x63,
	0x72, 0x79, 0x70, 0x74, 0x6f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x31, 0x63, 0x6f, 0x6d,
	0x2f, 0x64, 0x69, 0x67, 0x69, 0x74, 0x61, 0x6c, 0x61, 0x73, 0x73, 0x65, 0x74, 0x2f, 0x63, 0x61,
	0x6e, 0x74, 0x6f, 0x6e, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2f, 0x76, 0x33,
	0x30, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x38,
	0x63, 0x6f, 0x6d, 0x2f, 0x64, 0x69, 0x67, 0x69, 0x74, 0x61, 0x6c, 0x61, 0x73, 0x73, 0x65, 0x74,
	0x2f, 0x63, 0x61, 0x6e, 0x74, 0x6f, 0x6e, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c,
	0x2f, 0x76, 0x33, 0x30, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x5f, 0x73, 0x74, 0x61, 0x62,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x31, 0x63, 0x6f, 0x6d, 0x2f, 0x64, 0x69,
	0x67, 0x69, 0x74, 0x61, 0x6c, 0x61, 0x73, 0x73, 0x65, 0x74, 0x2f, 0x63, 0x61, 0x6e, 0x74, 0x6f,
	0x6e, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2f, 0x76, 0x33, 0x30, 0x2f, 0x6d,
	0x65, 0x72, 0x6b, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x31, 0x63, 0x6f, 0x6d,
	0x2f, 0x64, 0x69, 0x67, 0x69, 0x74, 0x61, 0x6c, 0x61, 0x73, 0x73, 0x65, 0x74, 0x2f, 0x63, 0x61,
	0x6e, 0x74, 0x6f, 0x6e, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2f, 0x76, 0x33,
	0x30, 0x2f, 0x71, 0x75, 0x6f, 0x72, 0x75, 0x6d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f,
	0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f,
	0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x72,
	0x0a, 0x13, 0x44, 0x65, 0x64, 0x75, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x50,
	0x65, 0x72, 0x69, 0x6f, 0x64, 0x12, 0x37, 0x0a, 0x08, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x48, 0x00, 0x52, 0x08, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x18,
	0x0a, 0x06, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x48, 0x00,
	0x52, 0x06, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x42, 0x08, 0x0a, 0x06, 0x70, 0x65, 0x72, 0x69,
	0x6f, 0x64, 0x22, 0xbe, 0x01, 0x0a, 0x13, 0x50, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61,
	0x6e, 0x74, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x3c, 0x0a, 0x04, 0x73, 0x61,
	0x6c, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x64,
	0x69, 0x67, 0x69, 0x74, 0x61, 0x6c, 0x61, 0x73, 0x73, 0x65, 0x74, 0x2e, 0x63, 0x61, 0x6e, 0x74,
	0x6f, 0x6e, 0x2e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x6f, 0x2e, 0x76, 0x33, 0x30, 0x2e, 0x53, 0x61,
	0x6c, 0x74, 0x52, 0x04, 0x73, 0x61, 0x6c, 0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x6c, 0x65, 0x64, 0x67,
	0x65, 0x72, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x6c,
	0x65, 0x64, 0x67, 0x65, 0x72, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x27, 0x0a, 0x0f, 0x73, 0x75, 0x62,
	0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x0e, 0x73, 0x75, 0x62, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x54, 0x69,
	0x6d, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x77, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x5f, 0x69,
	0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x77, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f,
	0x77, 0x49, 0x64, 0x22, 0xec, 0x01, 0x0a, 0x0f, 0x52, 0x6f, 0x6f, 0x74, 0x48, 0x61, 0x73, 0x68,
	0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x72, 0x6f, 0x6f, 0x74, 0x5f,
	0x68, 0x61, 0x73, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x08, 0x72, 0x6f, 0x6f, 0x74,
	0x48, 0x61, 0x73, 0x68, 0x12, 0x1b, 0x0a, 0x09, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x5f, 0x69,
	0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x49,
	0x64, 0x12, 0x4b, 0x0a, 0x09, 0x76, 0x69, 0x65, 0x77, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x2e, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x64, 0x69, 0x67, 0x69, 0x74,
	0x61, 0x6c, 0x61, 0x73, 0x73, 0x65, 0x74, 0x2e, 0x63, 0x61, 0x6e, 0x74, 0x6f, 0x6e, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x76, 0x33, 0x30, 0x2e, 0x56, 0x69, 0x65, 0x77,
	0x54, 0x79, 0x70, 0x65, 0x52, 0x08, 0x76, 0x69, 0x65, 0x77, 0x54, 0x79, 0x70, 0x65, 0x12, 0x38,
	0x0a, 0x18, 0x73, 0x75, 0x62, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x6f, 0x70,
	0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x16, 0x73, 0x75, 0x62, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x54, 0x6f, 0x70, 0x6f,
	0x6c, 0x6f, 0x67, 0x79, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x70, 0x61, 0x79, 0x6c,
	0x6f, 0x61, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x07, 0x70, 0x61, 0x79, 0x6c, 0x6f,
	0x61, 0x64, 0x22, 0x9f, 0x02, 0x0a, 0x08, 0x56, 0x69, 0x65, 0x77, 0x4e, 0x6f, 0x64, 0x65, 0x12,
	0x5d, 0x0a, 0x10, 0x76, 0x69, 0x65, 0x77, 0x5f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x5f, 0x64,
	0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x33, 0x2e, 0x63, 0x6f, 0x6d, 0x2e,
	0x64, 0x69, 0x67, 0x69, 0x74, 0x61, 0x6c, 0x61, 0x73, 0x73, 0x65, 0x74, 0x2e, 0x63, 0x61, 0x6e,
	0x74, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x76, 0x33, 0x30,
	0x2e, 0x42, 0x6c, 0x69, 0x6e, 0x64, 0x61, 0x62, 0x6c, 0x65, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x0e,
	0x76, 0x69, 0x65, 0x77, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x44, 0x61, 0x74, 0x61, 0x12, 0x67,
	0x0a, 0x15, 0x76, 0x69, 0x65, 0x77, 0x5f, 0x70, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61,
	0x6e, 0x74, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x33, 0x2e,
	0x63, 0x6f, 0x6d, 0x2e, 0x64, 0x69, 0x67, 0x69, 0x74, 0x61, 0x6c, 0x61, 0x73, 0x73, 0x65, 0x74,
	0x2e, 0x63, 0x61, 0x6e, 0x74, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c,
	0x2e, 0x76, 0x33, 0x30, 0x2e, 0x42, 0x6c, 0x69, 0x6e, 0x64, 0x61, 0x62, 0x6c, 0x65, 0x4e, 0x6f,
	0x64, 0x65, 0x52, 0x13, 0x76, 0x69, 0x65, 0x77, 0x50, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70,
	0x61, 0x6e, 0x74, 0x44, 0x61, 0x74, 0x61, 0x12, 0x4b, 0x0a, 0x08, 0x73, 0x75, 0x62, 0x76, 0x69,
	0x65, 0x77, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x63, 0x6f, 0x6d, 0x2e,
	0x64, 0x69, 0x67, 0x69, 0x74, 0x61, 0x6c, 0x61, 0x73, 0x73, 0x65, 0x74, 0x2e, 0x63, 0x61, 0x6e,
	0x74, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x76, 0x33, 0x30,
	0x2e, 0x4d, 0x65, 0x72, 0x6b, 0x6c, 0x65, 0x53, 0x65, 0x71, 0x52, 0x08, 0x73, 0x75, 0x62, 0x76,
	0x69, 0x65, 0x77, 0x73, 0x22, 0xb4, 0x01, 0x0a, 0x0e, 0x56, 0x69, 0x65, 0x77, 0x43, 0x6f, 0x6d,
	0x6d, 0x6f, 0x6e, 0x44, 0x61, 0x74, 0x61, 0x12, 0x3c, 0x0a, 0x04, 0x73, 0x61, 0x6c, 0x74, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x64, 0x69, 0x67, 0x69,
	0x74, 0x61, 0x6c, 0x61, 0x73, 0x73, 0x65, 0x74, 0x2e, 0x63, 0x61, 0x6e, 0x74, 0x6f, 0x6e, 0x2e,
	0x63, 0x72, 0x79, 0x70, 0x74, 0x6f, 0x2e, 0x76, 0x33, 0x30, 0x2e, 0x53, 0x61, 0x6c, 0x74, 0x52,
	0x04, 0x73, 0x61, 0x6c, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x69, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x65,
	0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x09, 0x69, 0x6e, 0x66, 0x6f, 0x72, 0x6d,
	0x65, 0x65, 0x73, 0x12, 0x46, 0x0a, 0x07, 0x71, 0x75, 0x6f, 0x72, 0x75, 0x6d, 0x73, 0x18, 0x03,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x64, 0x69, 0x67, 0x69, 0x74,
	0x61, 0x6c, 0x61, 0x73, 0x73, 0x65, 0x74, 0x2e, 0x63, 0x61, 0x6e, 0x74, 0x6f, 0x6e, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x76, 0x33, 0x30, 0x2e, 0x51, 0x75, 0x6f, 0x72,
	0x75, 0x6d, 0x52, 0x07, 0x71, 0x75, 0x6f, 0x72, 0x75, 0x6d, 0x73, 0x22, 0x38, 0x0a, 0x08, 0x49,
	0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x65, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x70, 0x61, 0x72, 0x74, 0x79,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x70, 0x61, 0x72, 0x74, 0x79, 0x12, 0x16, 0x0a,
	0x06, 0x77, 0x65, 0x69, 0x67, 0x68, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x77,
	0x65, 0x69, 0x67, 0x68, 0x74, 0x22, 0x5f, 0x0a, 0x1b, 0x50, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69,
	0x70, 0x61, 0x6e, 0x74, 0x52, 0x61, 0x6e, 0x64, 0x6f, 0x6d, 0x6e, 0x65, 0x73, 0x73, 0x4c, 0x6f,
	0x6f, 0x6b, 0x75, 0x70, 0x12, 0x1e, 0x0a, 0x0a, 0x72, 0x61, 0x6e, 0x64, 0x6f, 0x6d, 0x6e, 0x65,
	0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0a, 0x72, 0x61, 0x6e, 0x64, 0x6f, 0x6d,
	0x6e, 0x65, 0x73, 0x73, 0x12, 0x20, 0x0a, 0x0b, 0x66, 0x69, 0x6e, 0x67, 0x65, 0x72, 0x70, 0x72,
	0x69, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x66, 0x69, 0x6e, 0x67, 0x65,
	0x72, 0x70, 0x72, 0x69, 0x6e, 0x74, 0x22, 0x1c, 0x0a, 0x16, 0x56, 0x69, 0x65, 0x77, 0x50, 0x61,
	0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x3a, 0x02, 0x18, 0x01, 0x22, 0xf0, 0x01, 0x0a, 0x0f, 0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x65,
	0x65, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x64, 0x0a, 0x12, 0x66, 0x75, 0x6c, 0x6c,
	0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x65, 0x65, 0x5f, 0x74, 0x72, 0x65, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x36, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x64, 0x69, 0x67, 0x69, 0x74,
	0x61, 0x6c, 0x61, 0x73, 0x73, 0x65, 0x74, 0x2e, 0x63, 0x61, 0x6e, 0x74, 0x6f, 0x6e, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x76, 0x33, 0x30, 0x2e, 0x46, 0x75, 0x6c, 0x6c,
	0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x65, 0x65, 0x54, 0x72, 0x65, 0x65, 0x52, 0x10, 0x66, 0x75,
	0x6c, 0x6c, 0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x65, 0x65, 0x54, 0x72, 0x65, 0x65, 0x12, 0x77,
	0x0a, 0x20, 0x73, 0x75, 0x62, 0x6d, 0x69, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x70, 0x61, 0x72,
	0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x5f, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75,
	0x72, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x64,
	0x69, 0x67, 0x69, 0x74, 0x61, 0x6c, 0x61, 0x73, 0x73, 0x65, 0x74, 0x2e, 0x63, 0x61, 0x6e, 0x74,
	0x6f, 0x6e, 0x2e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x6f, 0x2e, 0x76, 0x33, 0x30, 0x2e, 0x53, 0x69,
	0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x52, 0x1e, 0x73, 0x75, 0x62, 0x6d, 0x69, 0x74, 0x74,
	0x69, 0x6e, 0x67, 0x50, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x53, 0x69,
	0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x22, 0x8f, 0x01, 0x0a, 0x18, 0x4c, 0x69, 0x67, 0x68,
	0x74, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x56, 0x69, 0x65, 0x77,
	0x54, 0x72, 0x65, 0x65, 0x12, 0x4c, 0x0a, 0x04, 0x74, 0x72, 0x65, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x38, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x64, 0x69, 0x67, 0x69, 0x74, 0x61, 0x6c,
	0x61, 0x73, 0x73, 0x65, 0x74, 0x2e, 0x63, 0x61, 0x6e, 0x74, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x76, 0x33, 0x30, 0x2e, 0x47, 0x65, 0x6e, 0x54, 0x72, 0x61,
	0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x72, 0x65, 0x65, 0x52, 0x04, 0x74, 0x72,
	0x65, 0x65, 0x12, 0x25, 0x0a, 0x0e, 0x73, 0x75, 0x62, 0x76, 0x69, 0x65, 0x77, 0x5f, 0x68, 0x61,
	0x73, 0x68, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0c, 0x52, 0x0d, 0x73, 0x75, 0x62, 0x76,
	0x69, 0x65, 0x77, 0x48, 0x61, 0x73, 0x68, 0x65, 0x73, 0x22, 0x60, 0x0a, 0x10, 0x46, 0x75, 0x6c,
	0x6c, 0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x65, 0x65, 0x54, 0x72, 0x65, 0x65, 0x12, 0x4c, 0x0a,
	0x04, 0x74, 0x72, 0x65, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x38, 0x2e, 0x63, 0x6f,
	0x6d, 0x2e, 0x64, 0x69, 0x67, 0x69, 0x74, 0x61, 0x6c, 0x61, 0x73, 0x73, 0x65, 0x74, 0x2e, 0x63,
	0x61, 0x6e, 0x74, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x76,
	0x33, 0x30, 0x2e, 0x47, 0x65, 0x6e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x54, 0x72, 0x65, 0x65, 0x52, 0x04, 0x74, 0x72, 0x65, 0x65, 0x22, 0xb4, 0x01, 0x0a, 0x0f,
	0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x12,
	0x56, 0x0a, 0x08, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x3a, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x64, 0x69, 0x67, 0x69, 0x74, 0x61, 0x6c, 0x61,
	0x73, 0x73, 0x65, 0x74, 0x2e, 0x63, 0x61, 0x6e, 0x74, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x76, 0x33, 0x30, 0x2e, 0x53, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x69,
	0x7a, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x52, 0x08, 0x63,
	0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x12, 0x28, 0x0a, 0x10, 0x63, 0x6f, 0x6e, 0x73, 0x75,
	0x6d, 0x65, 0x64, 0x5f, 0x69, 0x6e, 0x5f, 0x63, 0x6f, 0x72, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x0e, 0x63, 0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x65, 0x64, 0x49, 0x6e, 0x43, 0x6f, 0x72,
	0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x64, 0x5f, 0x62, 0x61, 0x63, 0x6b,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x64, 0x42, 0x61,
	0x63, 0x6b, 0x22, 0x83, 0x01, 0x0a, 0x0d, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x43, 0x6f, 0x6e, 0x74,
	0x72, 0x61, 0x63, 0x74, 0x12, 0x56, 0x0a, 0x08, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3a, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x64, 0x69, 0x67,
	0x69, 0x74, 0x61, 0x6c, 0x61, 0x73, 0x73, 0x65, 0x74, 0x2e, 0x63, 0x61, 0x6e, 0x74, 0x6f, 0x6e,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x76, 0x33, 0x30, 0x2e, 0x53, 0x65,
	0x72, 0x69, 0x61, 0x6c, 0x69, 0x7a, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61,
	0x63, 0x74, 0x52, 0x08, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x12, 0x1a, 0x0a, 0x08,
	0x63, 0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x65, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08,
	0x63, 0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x65, 0x64, 0x22, 0xac, 0x01, 0x0a, 0x0e, 0x43, 0x6f, 0x6d,
	0x6d, 0x6f, 0x6e, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x3c, 0x0a, 0x04, 0x73,
	0x61, 0x6c, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x63, 0x6f, 0x6d, 0x2e,
	0x64, 0x69, 0x67, 0x69, 0x74, 0x61, 0x6c, 0x61, 0x73, 0x73, 0x65, 0x74, 0x2e, 0x63, 0x61, 0x6e,
	0x74, 0x6f, 0x6e, 0x2e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x6f, 0x2e, 0x76, 0x33, 0x30, 0x2e, 0x53,
	0x61, 0x6c, 0x74, 0x52, 0x04, 0x73, 0x61, 0x6c, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x64, 0x6f, 0x6d,
	0x61, 0x69, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x64, 0x6f,
	0x6d, 0x61, 0x69, 0x6e, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x75, 0x75, 0x69, 0x64, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x75, 0x75, 0x69, 0x64, 0x12, 0x25, 0x0a, 0x0e, 0x6d, 0x65,
	0x64, 0x69, 0x61, 0x74, 0x6f, 0x72, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x0d, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x74, 0x6f, 0x72, 0x47, 0x72, 0x6f, 0x75,
	0x70, 0x4a, 0x04, 0x08, 0x02, 0x10, 0x03, 0x22, 0x9f, 0x03, 0x0a, 0x11, 0x53, 0x75, 0x62, 0x6d,
	0x69, 0x74, 0x74, 0x65, 0x72, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x3c, 0x0a,
	0x04, 0x73, 0x61, 0x6c, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x63, 0x6f,
	0x6d, 0x2e, 0x64, 0x69, 0x67, 0x69, 0x74, 0x61, 0x6c, 0x61, 0x73, 0x73, 0x65, 0x74, 0x2e, 0x63,
	0x61, 0x6e, 0x74, 0x6f, 0x6e, 0x2e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x6f, 0x2e, 0x76, 0x33, 0x30,
	0x2e, 0x53, 0x61, 0x6c, 0x74, 0x52, 0x04, 0x73, 0x61, 0x6c, 0x74, 0x12, 0x15, 0x0a, 0x06, 0x61,
	0x63, 0x74, 0x5f, 0x61, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x05, 0x61, 0x63, 0x74,
	0x41, 0x73, 0x12, 0x25, 0x0a, 0x0e, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x61, 0x70, 0x70, 0x6c,
	0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x6f, 0x6d,
	0x6d, 0x61, 0x6e, 0x64, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x63,
	0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x49, 0x64, 0x12, 0x3c, 0x0a, 0x1a, 0x73, 0x75, 0x62, 0x6d,
	0x69, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x70, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61,
	0x6e, 0x74, 0x5f, 0x75, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x18, 0x73, 0x75,
	0x62, 0x6d, 0x69, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x50, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70,
	0x61, 0x6e, 0x74, 0x55, 0x69, 0x64, 0x12, 0x23, 0x0a, 0x0d, 0x73, 0x75, 0x62, 0x6d, 0x69, 0x73,
	0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x73,
	0x75, 0x62, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x5c, 0x0a, 0x0c, 0x64,
	0x65, 0x64, 0x75, 0x70, 0x5f, 0x70, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x39, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x64, 0x69, 0x67, 0x69, 0x74, 0x61, 0x6c, 0x61,
	0x73, 0x73, 0x65, 0x74, 0x2e, 0x63, 0x61, 0x6e, 0x74, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x76, 0x33, 0x30, 0x2e, 0x44, 0x65, 0x64, 0x75, 0x70, 0x6c, 0x69,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x52, 0x0b, 0x64, 0x65,
	0x64, 0x75, 0x70, 0x50, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x12, 0x2e, 0x0a, 0x13, 0x6d, 0x61, 0x78,
	0x5f, 0x73, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x69, 0x6e, 0x67, 0x5f, 0x74, 0x69, 0x6d, 0x65,
	0x18, 0x08, 0x20, 0x01, 0x28, 0x03, 0x52, 0x11, 0x6d, 0x61, 0x78, 0x53, 0x65, 0x71, 0x75, 0x65,
	0x6e, 0x63, 0x69, 0x6e, 0x67, 0x54, 0x69, 0x6d, 0x65, 0x22, 0xe3, 0x01, 0x0a, 0x10, 0x53, 0x65,
	0x73, 0x73, 0x69, 0x6f, 0x6e, 0x4b, 0x65, 0x79, 0x4c, 0x6f, 0x6f, 0x6b, 0x75, 0x70, 0x12, 0x34,
	0x0a, 0x16, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x6b, 0x65, 0x79, 0x5f, 0x72, 0x61,
	0x6e, 0x64, 0x6f, 0x6d, 0x6e, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x14,
	0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x4b, 0x65, 0x79, 0x52, 0x61, 0x6e, 0x64, 0x6f, 0x6d,
	0x6e, 0x65, 0x73, 0x73, 0x12, 0x77, 0x0a, 0x19, 0x65, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x5f, 0x61, 0x6c, 0x67, 0x6f, 0x72, 0x69, 0x74, 0x68, 0x6d, 0x5f, 0x73, 0x70, 0x65,
	0x63, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x3b, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x64, 0x69,
	0x67, 0x69, 0x74, 0x61, 0x6c, 0x61, 0x73, 0x73, 0x65, 0x74, 0x2e, 0x63, 0x61, 0x6e, 0x74, 0x6f,
	0x6e, 0x2e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x6f, 0x2e, 0x76, 0x33, 0x30, 0x2e, 0x45, 0x6e, 0x63,
	0x72, 0x79, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x6c, 0x67, 0x6f, 0x72, 0x69, 0x74, 0x68, 0x6d,
	0x53, 0x70, 0x65, 0x63, 0x52, 0x17, 0x65, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x41, 0x6c, 0x67, 0x6f, 0x72, 0x69, 0x74, 0x68, 0x6d, 0x53, 0x70, 0x65, 0x63, 0x12, 0x20, 0x0a,
	0x0b, 0x66, 0x69, 0x6e, 0x67, 0x65, 0x72, 0x70, 0x72, 0x69, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0b, 0x66, 0x69, 0x6e, 0x67, 0x65, 0x72, 0x70, 0x72, 0x69, 0x6e, 0x74, 0x22,
	0xa6, 0x04, 0x0a, 0x14, 0x45, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x65, 0x64, 0x56, 0x69, 0x65,
	0x77, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x76, 0x69, 0x65, 0x77,
	0x5f, 0x74, 0x72, 0x65, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x08, 0x76, 0x69, 0x65,
	0x77, 0x54, 0x72, 0x65, 0x65, 0x12, 0x63, 0x0a, 0x11, 0x65, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x5f, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x36, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x64, 0x69, 0x67, 0x69, 0x74, 0x61, 0x6c, 0x61, 0x73,
	0x73, 0x65, 0x74, 0x2e, 0x63, 0x61, 0x6e, 0x74, 0x6f, 0x6e, 0x2e, 0x63, 0x72, 0x79, 0x70, 0x74,
	0x6f, 0x2e, 0x76, 0x33, 0x30, 0x2e, 0x53, 0x79, 0x6d, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x4b,
	0x65, 0x79, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x65, 0x52, 0x10, 0x65, 0x6e, 0x63, 0x72, 0x79, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x65, 0x12, 0x77, 0x0a, 0x20, 0x73, 0x75,
	0x62, 0x6d, 0x69, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x70, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69,
	0x70, 0x61, 0x6e, 0x74, 0x5f, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x64, 0x69, 0x67, 0x69, 0x74,
	0x61, 0x6c, 0x61, 0x73, 0x73, 0x65, 0x74, 0x2e, 0x63, 0x61, 0x6e, 0x74, 0x6f, 0x6e, 0x2e, 0x63,
	0x72, 0x79, 0x70, 0x74, 0x6f, 0x2e, 0x76, 0x33, 0x30, 0x2e, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x74,
	0x75, 0x72, 0x65, 0x52, 0x1e, 0x73, 0x75, 0x62, 0x6d, 0x69, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x50,
	0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x74,
	0x75, 0x72, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x76, 0x69, 0x65, 0x77, 0x5f, 0x68, 0x61, 0x73, 0x68,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x08, 0x76, 0x69, 0x65, 0x77, 0x48, 0x61, 0x73, 0x68,
	0x12, 0x1e, 0x0a, 0x0a, 0x72, 0x61, 0x6e, 0x64, 0x6f, 0x6d, 0x6e, 0x65, 0x73, 0x73, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x0c, 0x52, 0x0a, 0x72, 0x61, 0x6e, 0x64, 0x6f, 0x6d, 0x6e, 0x65, 0x73, 0x73,
	0x12, 0x6c, 0x0a, 0x16, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x6b, 0x65, 0x79, 0x5f,
	0x72, 0x61, 0x6e, 0x64, 0x6f, 0x6d, 0x6e, 0x65, 0x73, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x36, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x64, 0x69, 0x67, 0x69, 0x74, 0x61, 0x6c, 0x61, 0x73,
	0x73, 0x65, 0x74, 0x2e, 0x63, 0x61, 0x6e, 0x74, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x63, 0x6f, 0x6c, 0x2e, 0x76, 0x33, 0x30, 0x2e, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x4b,
	0x65, 0x79, 0x4c, 0x6f, 0x6f, 0x6b, 0x75, 0x70, 0x52, 0x14, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f,
	0x6e, 0x4b, 0x65, 0x79, 0x52, 0x61, 0x6e, 0x64, 0x6f, 0x6d, 0x6e, 0x65, 0x73, 0x73, 0x12, 0x1b,
	0x0a, 0x09, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x08, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x49, 0x64, 0x12, 0x4b, 0x0a, 0x09, 0x76,
	0x69, 0x65, 0x77, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2e,
	0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x64, 0x69, 0x67, 0x69, 0x74, 0x61, 0x6c, 0x61, 0x73, 0x73, 0x65,
	0x74, 0x2e, 0x63, 0x61, 0x6e, 0x74, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f,
	0x6c, 0x2e, 0x76, 0x33, 0x30, 0x2e, 0x56, 0x69, 0x65, 0x77, 0x54, 0x79, 0x70, 0x65, 0x52, 0x08,
	0x76, 0x69, 0x65, 0x77, 0x54, 0x79, 0x70, 0x65, 0x22, 0xaf, 0x09, 0x0a, 0x11, 0x41, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x69,
	0x0a, 0x06, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x4f,
	0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x64, 0x69, 0x67, 0x69, 0x74, 0x61, 0x6c, 0x61, 0x73, 0x73, 0x65,
	0x74, 0x2e, 0x63, 0x61, 0x6e, 0x74, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f,
	0x6c, 0x2e, 0x76, 0x33, 0x30, 0x2e, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x65, 0x73, 0x63,
	0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x41, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x48,
	0x00, 0x52, 0x06, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x12, 0x6f, 0x0a, 0x08, 0x65, 0x78, 0x65,
	0x72, 0x63, 0x69, 0x73, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x51, 0x2e, 0x63, 0x6f,
	0x6d, 0x2e, 0x64, 0x69, 0x67, 0x69, 0x74, 0x61, 0x6c, 0x61, 0x73, 0x73, 0x65, 0x74, 0x2e, 0x63,
	0x61, 0x6e, 0x74, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x76,
	0x33, 0x30, 0x2e, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x45, 0x78, 0x65, 0x72, 0x63, 0x69, 0x73, 0x65, 0x41, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x00,
	0x52, 0x08, 0x65, 0x78, 0x65, 0x72, 0x63, 0x69, 0x73, 0x65, 0x12, 0x66, 0x0a, 0x05, 0x66, 0x65,
	0x74, 0x63, 0x68, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x4e, 0x2e, 0x63, 0x6f, 0x6d, 0x2e,
	0x64, 0x69, 0x67, 0x69, 0x74, 0x61, 0x6c, 0x61, 0x73, 0x73, 0x65, 0x74, 0x2e, 0x63, 0x61, 0x6e,
	0x74, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x76, 0x33, 0x30,
	0x2e, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x2e, 0x46, 0x65, 0x74, 0x63, 0x68, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x65,
	0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x00, 0x52, 0x05, 0x66, 0x65, 0x74,
	0x63, 0x68, 0x12, 0x7a, 0x0a, 0x0d, 0x6c, 0x6f, 0x6f, 0x6b, 0x75, 0x70, 0x5f, 0x62, 0x79, 0x5f,
	0x6b, 0x65, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x54, 0x2e, 0x63, 0x6f, 0x6d, 0x2e,
	0x64, 0x69, 0x67, 0x69, 0x74, 0x61, 0x6c, 0x61, 0x73, 0x73, 0x65, 0x74, 0x2e, 0x63, 0x61, 0x6e,
	0x74, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x76, 0x33, 0x30,
	0x2e, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x2e, 0x4c, 0x6f, 0x6f, 0x6b, 0x75, 0x70, 0x42, 0x79, 0x4b, 0x65, 0x79, 0x41, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x48,
	0x00, 0x52, 0x0b, 0x6c, 0x6f, 0x6f, 0x6b, 0x75, 0x70, 0x42, 0x79, 0x4b, 0x65, 0x79, 0x1a, 0x57,
	0x0a, 0x17, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x65,
	0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1f, 0x0a, 0x0b, 0x63, 0x6f, 0x6e,
	0x74, 0x72, 0x61, 0x63, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a,
	0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x6e, 0x6f,
	0x64, 0x65, 0x5f, 0x73, 0x65, 0x65, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x08, 0x6e,
	0x6f, 0x64, 0x65, 0x53, 0x65, 0x65, 0x64, 0x1a, 0xf7, 0x02, 0x0a, 0x19, 0x45, 0x78, 0x65, 0x72,
	0x63, 0x69, 0x73, 0x65, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x2a, 0x0a, 0x11, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x5f, 0x63,
	0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0f, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x49,
	0x64, 0x12, 0x16, 0x0a, 0x06, 0x63, 0x68, 0x6f, 0x69, 0x63, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x06, 0x63, 0x68, 0x6f, 0x69, 0x63, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x63, 0x68, 0x6f,
	0x73, 0x65, 0x6e, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0c, 0x52,
	0x0b, 0x63, 0x68, 0x6f, 0x73, 0x65, 0x6e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x16, 0x0a, 0x06,
	0x61, 0x63, 0x74, 0x6f, 0x72, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x09, 0x52, 0x06, 0x61, 0x63,
	0x74, 0x6f, 0x72, 0x73, 0x12, 0x15, 0x0a, 0x06, 0x62, 0x79, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x05, 0x62, 0x79, 0x4b, 0x65, 0x79, 0x12, 0x1b, 0x0a, 0x09, 0x6e,
	0x6f, 0x64, 0x65, 0x5f, 0x73, 0x65, 0x65, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x08,
	0x6e, 0x6f, 0x64, 0x65, 0x53, 0x65, 0x65, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x66, 0x61, 0x69, 0x6c,
	0x65, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x66, 0x61, 0x69, 0x6c, 0x65, 0x64,
	0x12, 0x3f, 0x0a, 0x0c, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x5f, 0x69, 0x64,
	0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x52, 0x0b, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x49,
	0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x74, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x5f, 0x69, 0x64,
	0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x74, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65,
	0x49, 0x64, 0x12, 0x2d, 0x0a, 0x12, 0x70, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x5f, 0x70, 0x72,
	0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x18, 0x0b, 0x20, 0x03, 0x28, 0x09, 0x52, 0x11,
	0x70, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x50, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63,
	0x65, 0x1a, 0x94, 0x01, 0x0a, 0x16, 0x46, 0x65, 0x74, 0x63, 0x68, 0x41, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x2a, 0x0a, 0x11,
	0x69, 0x6e, 0x70, 0x75, 0x74, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x5f, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x43, 0x6f,
	0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x63, 0x74, 0x6f,
	0x72, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x06, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x73,
	0x12, 0x15, 0x0a, 0x06, 0x62, 0x79, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x05, 0x62, 0x79, 0x4b, 0x65, 0x79, 0x12, 0x1f, 0x0a, 0x0b, 0x74, 0x65, 0x6d, 0x70, 0x6c,
	0x61, 0x74, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x74, 0x65,
	0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x49, 0x64, 0x1a, 0x61, 0x0a, 0x1c, 0x4c, 0x6f, 0x6f, 0x6b,
	0x75, 0x70, 0x42, 0x79, 0x4b, 0x65, 0x79, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x65, 0x73,
	0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x41, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x64, 0x69, 0x67, 0x69,
	0x74, 0x61, 0x6c, 0x61, 0x73, 0x73, 0x65, 0x74, 0x2e, 0x63, 0x61, 0x6e, 0x74, 0x6f, 0x6e, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x76, 0x33, 0x30, 0x2e, 0x47, 0x6c, 0x6f,
	0x62, 0x61, 0x6c, 0x4b, 0x65, 0x79, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x42, 0x0d, 0x0a, 0x0b, 0x64,
	0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0xfd, 0x07, 0x0a, 0x13, 0x56,
	0x69, 0x65, 0x77, 0x50, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x44, 0x61,
	0x74, 0x61, 0x12, 0x3c, 0x0a, 0x04, 0x73, 0x61, 0x6c, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x28, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x64, 0x69, 0x67, 0x69, 0x74, 0x61, 0x6c, 0x61, 0x73,
	0x73, 0x65, 0x74, 0x2e, 0x63, 0x61, 0x6e, 0x74, 0x6f, 0x6e, 0x2e, 0x63, 0x72, 0x79, 0x70, 0x74,
	0x6f, 0x2e, 0x76, 0x33, 0x30, 0x2e, 0x53, 0x61, 0x6c, 0x74, 0x52, 0x04, 0x73, 0x61, 0x6c, 0x74,
	0x12, 0x54, 0x0a, 0x0b, 0x63, 0x6f, 0x72, 0x65, 0x5f, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x73, 0x18,
	0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x33, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x64, 0x69, 0x67, 0x69,
	0x74, 0x61, 0x6c, 0x61, 0x73, 0x73, 0x65, 0x74, 0x2e, 0x63, 0x61, 0x6e, 0x74, 0x6f, 0x6e, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x76, 0x33, 0x30, 0x2e, 0x49, 0x6e, 0x70,
	0x75, 0x74, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x52, 0x0a, 0x63, 0x6f, 0x72, 0x65,
	0x49, 0x6e, 0x70, 0x75, 0x74, 0x73, 0x12, 0x58, 0x0a, 0x0c, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x64, 0x5f, 0x63, 0x6f, 0x72, 0x65, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x35, 0x2e, 0x63,
	0x6f, 0x6d, 0x2e, 0x64, 0x69, 0x67, 0x69, 0x74, 0x61, 0x6c, 0x61, 0x73, 0x73, 0x65, 0x74, 0x2e,
	0x63, 0x61, 0x6e, 0x74, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e,
	0x76, 0x33, 0x30, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x43, 0x6f, 0x6e, 0x74, 0x72,
	0x61, 0x63, 0x74, 0x52, 0x0b, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x43, 0x6f, 0x72, 0x65,
	0x12, 0x4b, 0x0a, 0x23, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x69, 0x6e, 0x5f, 0x73,
	0x75, 0x62, 0x76, 0x69, 0x65, 0x77, 0x5f, 0x61, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x64, 0x5f,
	0x69, 0x6e, 0x5f, 0x63, 0x6f, 0x72, 0x65, 0x18, 0x04, 0x20, 0x03, 0x28, 0x09, 0x52, 0x1e, 0x63,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x49, 0x6e, 0x53, 0x75, 0x62, 0x76, 0x69, 0x65, 0x77, 0x41,
	0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x64, 0x49, 0x6e, 0x43, 0x6f, 0x72, 0x65, 0x12, 0x6a, 0x0a,
	0x0d, 0x72, 0x65, 0x73, 0x6f, 0x6c, 0x76, 0x65, 0x64, 0x5f, 0x6b, 0x65, 0x79, 0x73, 0x18, 0x05,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x45, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x64, 0x69, 0x67, 0x69, 0x74,
	0x61, 0x6c, 0x61, 0x73, 0x73, 0x65, 0x74, 0x2e, 0x63, 0x61, 0x6e, 0x74, 0x6f, 0x6e, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x76, 0x33, 0x30, 0x2e, 0x56, 0x69, 0x65, 0x77,
	0x50, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x44, 0x61, 0x74, 0x61, 0x2e,
	0x52, 0x65, 0x73, 0x6f, 0x6c, 0x76, 0x65, 0x64, 0x4b, 0x65, 0x79, 0x52, 0x0c, 0x72, 0x65, 0x73,
	0x6f, 0x6c, 0x76, 0x65, 0x64, 0x4b, 0x65, 0x79, 0x73, 0x12, 0x66, 0x0a, 0x12, 0x61, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x5f, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x37, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x64, 0x69, 0x67, 0x69,
	0x74, 0x61, 0x6c, 0x61, 0x73, 0x73, 0x65, 0x74, 0x2e, 0x63, 0x61, 0x6e, 0x74, 0x6f, 0x6e, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x76, 0x33, 0x30, 0x2e, 0x41, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x11,
	0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x74, 0x0a, 0x10, 0x72, 0x6f, 0x6c, 0x6c, 0x62, 0x61, 0x63, 0x6b, 0x5f, 0x63, 0x6f,
	0x6e, 0x74, 0x65, 0x78, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x49, 0x2e, 0x63, 0x6f,
	0x6d, 0x2e, 0x64, 0x69, 0x67, 0x69, 0x74, 0x61, 0x6c, 0x61, 0x73, 0x73, 0x65, 0x74, 0x2e, 0x63,
	0x61, 0x6e, 0x74, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x76,
	0x33, 0x30, 0x2e, 0x56, 0x69, 0x65, 0x77, 0x50, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61,
	0x6e, 0x74, 0x44, 0x61, 0x74, 0x61, 0x2e, 0x52, 0x6f, 0x6c, 0x6c, 0x62, 0x61, 0x63, 0x6b, 0x43,
	0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x52, 0x0f, 0x72, 0x6f, 0x6c, 0x6c, 0x62, 0x61, 0x63, 0x6b,
	0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x1a, 0x2b, 0x0a, 0x07, 0x46, 0x72, 0x65, 0x65, 0x4b,
	0x65, 0x79, 0x12, 0x20, 0x0a, 0x0b, 0x6d, 0x61, 0x69, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72,
	0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0b, 0x6d, 0x61, 0x69, 0x6e, 0x74, 0x61, 0x69,
	0x6e, 0x65, 0x72, 0x73, 0x1a, 0xda, 0x01, 0x0a, 0x0b, 0x52, 0x65, 0x73, 0x6f, 0x6c, 0x76, 0x65,
	0x64, 0x4b, 0x65, 0x79, 0x12, 0x41, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x2f, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x64, 0x69, 0x67, 0x69, 0x74, 0x61, 0x6c, 0x61,
	0x73, 0x73, 0x65, 0x74, 0x2e, 0x63, 0x61, 0x6e, 0x74, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x76, 0x33, 0x30, 0x2e, 0x47, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x4b,
	0x65, 0x79, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x21, 0x0a, 0x0b, 0x63, 0x6f, 0x6e, 0x74, 0x72,
	0x61, 0x63, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x0a,
	0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x49, 0x64, 0x12, 0x57, 0x0a, 0x04, 0x66, 0x72,
	0x65, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x41, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x64,
	0x69, 0x67, 0x69, 0x74, 0x61, 0x6c, 0x61, 0x73, 0x73, 0x65, 0x74, 0x2e, 0x63, 0x61, 0x6e, 0x74,
	0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x76, 0x33, 0x30, 0x2e,
	0x56, 0x69, 0x65, 0x77, 0x50, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x44,
	0x61, 0x74, 0x61, 0x2e, 0x46, 0x72, 0x65, 0x65, 0x4b, 0x65, 0x79, 0x48, 0x00, 0x52, 0x04, 0x66,
	0x72, 0x65, 0x65, 0x42, 0x0c, 0x0a, 0x0a, 0x72, 0x65, 0x73, 0x6f, 0x6c, 0x75, 0x74, 0x69, 0x6f,
	0x6e, 0x1a, 0x57, 0x0a, 0x0f, 0x52, 0x6f, 0x6c, 0x6c, 0x62, 0x61, 0x63, 0x6b, 0x43, 0x6f, 0x6e,
	0x74, 0x65, 0x78, 0x74, 0x12, 0x25, 0x0a, 0x0e, 0x72, 0x6f, 0x6c, 0x6c, 0x62, 0x61, 0x63, 0x6b,
	0x5f, 0x73, 0x63, 0x6f, 0x70, 0x65, 0x18, 0x01, 0x20, 0x03, 0x28, 0x05, 0x52, 0x0d, 0x72, 0x6f,
	0x6c, 0x6c, 0x62, 0x61, 0x63, 0x6b, 0x53, 0x63, 0x6f, 0x70, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x6e,
	0x65, 0x78, 0x74, 0x5f, 0x63, 0x68, 0x69, 0x6c, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x09, 0x6e, 0x65, 0x78, 0x74, 0x43, 0x68, 0x69, 0x6c, 0x64, 0x42, 0x55, 0x5a, 0x53, 0x67, 0x69,
	0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x64, 0x69, 0x67, 0x69, 0x74, 0x61, 0x6c,
	0x2d, 0x61, 0x73, 0x73, 0x65, 0x74, 0x2f, 0x64, 0x61, 0x7a, 0x6c, 0x2d, 0x63, 0x6c, 0x69, 0x65,
	0x6e, 0x74, 0x2f, 0x76, 0x38, 0x2f, 0x67, 0x6f, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x63, 0x6f, 0x6d,
	0x2f, 0x64, 0x69, 0x67, 0x69, 0x74, 0x61, 0x6c, 0x61, 0x73, 0x73, 0x65, 0x74, 0x2f, 0x63, 0x61,
	0x6e, 0x74, 0x6f, 0x6e, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2f, 0x76, 0x33,
	0x30, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_com_digitalasset_canton_protocol_v30_participant_transaction_proto_rawDescOnce sync.Once
	file_com_digitalasset_canton_protocol_v30_participant_transaction_proto_rawDescData = file_com_digitalasset_canton_protocol_v30_participant_transaction_proto_rawDesc
)

func file_com_digitalasset_canton_protocol_v30_participant_transaction_proto_rawDescGZIP() []byte {
	file_com_digitalasset_canton_protocol_v30_participant_transaction_proto_rawDescOnce.Do(func() {
		file_com_digitalasset_canton_protocol_v30_participant_transaction_proto_rawDescData = protoimpl.X.CompressGZIP(file_com_digitalasset_canton_protocol_v30_participant_transaction_proto_rawDescData)
	})
	return file_com_digitalasset_canton_protocol_v30_participant_transaction_proto_rawDescData
}

var file_com_digitalasset_canton_protocol_v30_participant_transaction_proto_msgTypes = make([]protoimpl.MessageInfo, 26)
var file_com_digitalasset_canton_protocol_v30_participant_transaction_proto_goTypes = []any{
	(*DeduplicationPeriod)(nil),                            // 0: com.digitalasset.canton.protocol.v30.DeduplicationPeriod
	(*ParticipantMetadata)(nil),                            // 1: com.digitalasset.canton.protocol.v30.ParticipantMetadata
	(*RootHashMessage)(nil),                                // 2: com.digitalasset.canton.protocol.v30.RootHashMessage
	(*ViewNode)(nil),                                       // 3: com.digitalasset.canton.protocol.v30.ViewNode
	(*ViewCommonData)(nil),                                 // 4: com.digitalasset.canton.protocol.v30.ViewCommonData
	(*Informee)(nil),                                       // 5: com.digitalasset.canton.protocol.v30.Informee
	(*ParticipantRandomnessLookup)(nil),                    // 6: com.digitalasset.canton.protocol.v30.ParticipantRandomnessLookup
	(*ViewParticipantMessage)(nil),                         // 7: com.digitalasset.canton.protocol.v30.ViewParticipantMessage
	(*InformeeMessage)(nil),                                // 8: com.digitalasset.canton.protocol.v30.InformeeMessage
	(*LightTransactionViewTree)(nil),                       // 9: com.digitalasset.canton.protocol.v30.LightTransactionViewTree
	(*FullInformeeTree)(nil),                               // 10: com.digitalasset.canton.protocol.v30.FullInformeeTree
	(*CreatedContract)(nil),                                // 11: com.digitalasset.canton.protocol.v30.CreatedContract
	(*InputContract)(nil),                                  // 12: com.digitalasset.canton.protocol.v30.InputContract
	(*CommonMetadata)(nil),                                 // 13: com.digitalasset.canton.protocol.v30.CommonMetadata
	(*SubmitterMetadata)(nil),                              // 14: com.digitalasset.canton.protocol.v30.SubmitterMetadata
	(*SessionKeyLookup)(nil),                               // 15: com.digitalasset.canton.protocol.v30.SessionKeyLookup
	(*EncryptedViewMessage)(nil),                           // 16: com.digitalasset.canton.protocol.v30.EncryptedViewMessage
	(*ActionDescription)(nil),                              // 17: com.digitalasset.canton.protocol.v30.ActionDescription
	(*ViewParticipantData)(nil),                            // 18: com.digitalasset.canton.protocol.v30.ViewParticipantData
	(*ActionDescription_CreateActionDescription)(nil),      // 19: com.digitalasset.canton.protocol.v30.ActionDescription.CreateActionDescription
	(*ActionDescription_ExerciseActionDescription)(nil),    // 20: com.digitalasset.canton.protocol.v30.ActionDescription.ExerciseActionDescription
	(*ActionDescription_FetchActionDescription)(nil),       // 21: com.digitalasset.canton.protocol.v30.ActionDescription.FetchActionDescription
	(*ActionDescription_LookupByKeyActionDescription)(nil), // 22: com.digitalasset.canton.protocol.v30.ActionDescription.LookupByKeyActionDescription
	(*ViewParticipantData_FreeKey)(nil),                    // 23: com.digitalasset.canton.protocol.v30.ViewParticipantData.FreeKey
	(*ViewParticipantData_ResolvedKey)(nil),                // 24: com.digitalasset.canton.protocol.v30.ViewParticipantData.ResolvedKey
	(*ViewParticipantData_RollbackContext)(nil),            // 25: com.digitalasset.canton.protocol.v30.ViewParticipantData.RollbackContext
	(*durationpb.Duration)(nil),                            // 26: google.protobuf.Duration
	(*v30.Salt)(nil),                                       // 27: com.digitalasset.canton.crypto.v30.Salt
	(ViewType)(0),                                          // 28: com.digitalasset.canton.protocol.v30.ViewType
	(*BlindableNode)(nil),                                  // 29: com.digitalasset.canton.protocol.v30.BlindableNode
	(*MerkleSeq)(nil),                                      // 30: com.digitalasset.canton.protocol.v30.MerkleSeq
	(*Quorum)(nil),                                         // 31: com.digitalasset.canton.protocol.v30.Quorum
	(*v30.Signature)(nil),                                  // 32: com.digitalasset.canton.crypto.v30.Signature
	(*GenTransactionTree)(nil),                             // 33: com.digitalasset.canton.protocol.v30.GenTransactionTree
	(*SerializableContract)(nil),                           // 34: com.digitalasset.canton.protocol.v30.SerializableContract
	(v30.EncryptionAlgorithmSpec)(0),                       // 35: com.digitalasset.canton.crypto.v30.EncryptionAlgorithmSpec
	(v30.SymmetricKeyScheme)(0),                            // 36: com.digitalasset.canton.crypto.v30.SymmetricKeyScheme
	(*wrapperspb.StringValue)(nil),                         // 37: google.protobuf.StringValue
	(*GlobalKey)(nil),                                      // 38: com.digitalasset.canton.protocol.v30.GlobalKey
}
var file_com_digitalasset_canton_protocol_v30_participant_transaction_proto_depIdxs = []int32{
	26, // 0: com.digitalasset.canton.protocol.v30.DeduplicationPeriod.duration:type_name -> google.protobuf.Duration
	27, // 1: com.digitalasset.canton.protocol.v30.ParticipantMetadata.salt:type_name -> com.digitalasset.canton.crypto.v30.Salt
	28, // 2: com.digitalasset.canton.protocol.v30.RootHashMessage.view_type:type_name -> com.digitalasset.canton.protocol.v30.ViewType
	29, // 3: com.digitalasset.canton.protocol.v30.ViewNode.view_common_data:type_name -> com.digitalasset.canton.protocol.v30.BlindableNode
	29, // 4: com.digitalasset.canton.protocol.v30.ViewNode.view_participant_data:type_name -> com.digitalasset.canton.protocol.v30.BlindableNode
	30, // 5: com.digitalasset.canton.protocol.v30.ViewNode.subviews:type_name -> com.digitalasset.canton.protocol.v30.MerkleSeq
	27, // 6: com.digitalasset.canton.protocol.v30.ViewCommonData.salt:type_name -> com.digitalasset.canton.crypto.v30.Salt
	31, // 7: com.digitalasset.canton.protocol.v30.ViewCommonData.quorums:type_name -> com.digitalasset.canton.protocol.v30.Quorum
	10, // 8: com.digitalasset.canton.protocol.v30.InformeeMessage.full_informee_tree:type_name -> com.digitalasset.canton.protocol.v30.FullInformeeTree
	32, // 9: com.digitalasset.canton.protocol.v30.InformeeMessage.submitting_participant_signature:type_name -> com.digitalasset.canton.crypto.v30.Signature
	33, // 10: com.digitalasset.canton.protocol.v30.LightTransactionViewTree.tree:type_name -> com.digitalasset.canton.protocol.v30.GenTransactionTree
	33, // 11: com.digitalasset.canton.protocol.v30.FullInformeeTree.tree:type_name -> com.digitalasset.canton.protocol.v30.GenTransactionTree
	34, // 12: com.digitalasset.canton.protocol.v30.CreatedContract.contract:type_name -> com.digitalasset.canton.protocol.v30.SerializableContract
	34, // 13: com.digitalasset.canton.protocol.v30.InputContract.contract:type_name -> com.digitalasset.canton.protocol.v30.SerializableContract
	27, // 14: com.digitalasset.canton.protocol.v30.CommonMetadata.salt:type_name -> com.digitalasset.canton.crypto.v30.Salt
	27, // 15: com.digitalasset.canton.protocol.v30.SubmitterMetadata.salt:type_name -> com.digitalasset.canton.crypto.v30.Salt
	0,  // 16: com.digitalasset.canton.protocol.v30.SubmitterMetadata.dedup_period:type_name -> com.digitalasset.canton.protocol.v30.DeduplicationPeriod
	35, // 17: com.digitalasset.canton.protocol.v30.SessionKeyLookup.encryption_algorithm_spec:type_name -> com.digitalasset.canton.crypto.v30.EncryptionAlgorithmSpec
	36, // 18: com.digitalasset.canton.protocol.v30.EncryptedViewMessage.encryption_scheme:type_name -> com.digitalasset.canton.crypto.v30.SymmetricKeyScheme
	32, // 19: com.digitalasset.canton.protocol.v30.EncryptedViewMessage.submitting_participant_signature:type_name -> com.digitalasset.canton.crypto.v30.Signature
	15, // 20: com.digitalasset.canton.protocol.v30.EncryptedViewMessage.session_key_randomness:type_name -> com.digitalasset.canton.protocol.v30.SessionKeyLookup
	28, // 21: com.digitalasset.canton.protocol.v30.EncryptedViewMessage.view_type:type_name -> com.digitalasset.canton.protocol.v30.ViewType
	19, // 22: com.digitalasset.canton.protocol.v30.ActionDescription.create:type_name -> com.digitalasset.canton.protocol.v30.ActionDescription.CreateActionDescription
	20, // 23: com.digitalasset.canton.protocol.v30.ActionDescription.exercise:type_name -> com.digitalasset.canton.protocol.v30.ActionDescription.ExerciseActionDescription
	21, // 24: com.digitalasset.canton.protocol.v30.ActionDescription.fetch:type_name -> com.digitalasset.canton.protocol.v30.ActionDescription.FetchActionDescription
	22, // 25: com.digitalasset.canton.protocol.v30.ActionDescription.lookup_by_key:type_name -> com.digitalasset.canton.protocol.v30.ActionDescription.LookupByKeyActionDescription
	27, // 26: com.digitalasset.canton.protocol.v30.ViewParticipantData.salt:type_name -> com.digitalasset.canton.crypto.v30.Salt
	12, // 27: com.digitalasset.canton.protocol.v30.ViewParticipantData.core_inputs:type_name -> com.digitalasset.canton.protocol.v30.InputContract
	11, // 28: com.digitalasset.canton.protocol.v30.ViewParticipantData.created_core:type_name -> com.digitalasset.canton.protocol.v30.CreatedContract
	24, // 29: com.digitalasset.canton.protocol.v30.ViewParticipantData.resolved_keys:type_name -> com.digitalasset.canton.protocol.v30.ViewParticipantData.ResolvedKey
	17, // 30: com.digitalasset.canton.protocol.v30.ViewParticipantData.action_description:type_name -> com.digitalasset.canton.protocol.v30.ActionDescription
	25, // 31: com.digitalasset.canton.protocol.v30.ViewParticipantData.rollback_context:type_name -> com.digitalasset.canton.protocol.v30.ViewParticipantData.RollbackContext
	37, // 32: com.digitalasset.canton.protocol.v30.ActionDescription.ExerciseActionDescription.interface_id:type_name -> google.protobuf.StringValue
	38, // 33: com.digitalasset.canton.protocol.v30.ActionDescription.LookupByKeyActionDescription.key:type_name -> com.digitalasset.canton.protocol.v30.GlobalKey
	38, // 34: com.digitalasset.canton.protocol.v30.ViewParticipantData.ResolvedKey.key:type_name -> com.digitalasset.canton.protocol.v30.GlobalKey
	23, // 35: com.digitalasset.canton.protocol.v30.ViewParticipantData.ResolvedKey.free:type_name -> com.digitalasset.canton.protocol.v30.ViewParticipantData.FreeKey
	36, // [36:36] is the sub-list for method output_type
	36, // [36:36] is the sub-list for method input_type
	36, // [36:36] is the sub-list for extension type_name
	36, // [36:36] is the sub-list for extension extendee
	0,  // [0:36] is the sub-list for field type_name
}

func init() { file_com_digitalasset_canton_protocol_v30_participant_transaction_proto_init() }
func file_com_digitalasset_canton_protocol_v30_participant_transaction_proto_init() {
	if File_com_digitalasset_canton_protocol_v30_participant_transaction_proto != nil {
		return
	}
	file_com_digitalasset_canton_protocol_v30_common_proto_init()
	file_com_digitalasset_canton_protocol_v30_common_stable_proto_init()
	file_com_digitalasset_canton_protocol_v30_merkle_proto_init()
	file_com_digitalasset_canton_protocol_v30_quorum_proto_init()
	file_com_digitalasset_canton_protocol_v30_participant_transaction_proto_msgTypes[0].OneofWrappers = []any{
		(*DeduplicationPeriod_Duration)(nil),
		(*DeduplicationPeriod_Offset)(nil),
	}
	file_com_digitalasset_canton_protocol_v30_participant_transaction_proto_msgTypes[17].OneofWrappers = []any{
		(*ActionDescription_Create)(nil),
		(*ActionDescription_Exercise)(nil),
		(*ActionDescription_Fetch)(nil),
		(*ActionDescription_LookupByKey)(nil),
	}
	file_com_digitalasset_canton_protocol_v30_participant_transaction_proto_msgTypes[24].OneofWrappers = []any{
		(*ViewParticipantData_ResolvedKey_ContractId)(nil),
		(*ViewParticipantData_ResolvedKey_Free)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_com_digitalasset_canton_protocol_v30_participant_transaction_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   26,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_com_digitalasset_canton_protocol_v30_participant_transaction_proto_goTypes,
		DependencyIndexes: file_com_digitalasset_canton_protocol_v30_participant_transaction_proto_depIdxs,
		MessageInfos:      file_com_digitalasset_canton_protocol_v30_participant_transaction_proto_msgTypes,
	}.Build()
	File_com_digitalasset_canton_protocol_v30_participant_transaction_proto = out.File
	file_com_digitalasset_canton_protocol_v30_participant_transaction_proto_rawDesc = nil
	file_com_digitalasset_canton_protocol_v30_participant_transaction_proto_goTypes = nil
	file_com_digitalasset_canton_protocol_v30_participant_transaction_proto_depIdxs = nil
}
