// Copyright (c) 2017-2025 Digital Asset (Switzerland) GmbH and/or its affiliates. All rights reserved.
// SPDX-License-Identifier: Apache-2.0
// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.35.2
// 	protoc        v5.27.2
// source: com/digitalasset/canton/protocol/v30/domain_parameters.proto

package v30

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	durationpb "google.golang.org/protobuf/types/known/durationpb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type OnboardingRestriction int32

const (
	OnboardingRestriction_ONBOARDING_RESTRICTION_UNSPECIFIED         OnboardingRestriction = 0
	OnboardingRestriction_ONBOARDING_RESTRICTION_UNRESTRICTED_OPEN   OnboardingRestriction = 1
	OnboardingRestriction_ONBOARDING_RESTRICTION_UNRESTRICTED_LOCKED OnboardingRestriction = 2
	OnboardingRestriction_ONBOARDING_RESTRICTION_RESTRICTED_OPEN     OnboardingRestriction = 3
	OnboardingRestriction_ONBOARDING_RESTRICTION_RESTRICTED_LOCKED   OnboardingRestriction = 4
)

// Enum value maps for OnboardingRestriction.
var (
	OnboardingRestriction_name = map[int32]string{
		0: "ONBOARDING_RESTRICTION_UNSPECIFIED",
		1: "ONBOARDING_RESTRICTION_UNRESTRICTED_OPEN",
		2: "ONBOARDING_RESTRICTION_UNRESTRICTED_LOCKED",
		3: "ONBOARDING_RESTRICTION_RESTRICTED_OPEN",
		4: "ONBOARDING_RESTRICTION_RESTRICTED_LOCKED",
	}
	OnboardingRestriction_value = map[string]int32{
		"ONBOARDING_RESTRICTION_UNSPECIFIED":         0,
		"ONBOARDING_RESTRICTION_UNRESTRICTED_OPEN":   1,
		"ONBOARDING_RESTRICTION_UNRESTRICTED_LOCKED": 2,
		"ONBOARDING_RESTRICTION_RESTRICTED_OPEN":     3,
		"ONBOARDING_RESTRICTION_RESTRICTED_LOCKED":   4,
	}
)

func (x OnboardingRestriction) Enum() *OnboardingRestriction {
	p := new(OnboardingRestriction)
	*p = x
	return p
}

func (x OnboardingRestriction) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (OnboardingRestriction) Descriptor() protoreflect.EnumDescriptor {
	return file_com_digitalasset_canton_protocol_v30_domain_parameters_proto_enumTypes[0].Descriptor()
}

func (OnboardingRestriction) Type() protoreflect.EnumType {
	return &file_com_digitalasset_canton_protocol_v30_domain_parameters_proto_enumTypes[0]
}

func (x OnboardingRestriction) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use OnboardingRestriction.Descriptor instead.
func (OnboardingRestriction) EnumDescriptor() ([]byte, []int) {
	return file_com_digitalasset_canton_protocol_v30_domain_parameters_proto_rawDescGZIP(), []int{0}
}

type AcsCommitmentsCatchUpConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CatchupIntervalSkip         uint32 `protobuf:"varint,1,opt,name=catchup_interval_skip,json=catchupIntervalSkip,proto3" json:"catchup_interval_skip,omitempty"`
	NrIntervalsToTriggerCatchup uint32 `protobuf:"varint,2,opt,name=nr_intervals_to_trigger_catchup,json=nrIntervalsToTriggerCatchup,proto3" json:"nr_intervals_to_trigger_catchup,omitempty"`
}

func (x *AcsCommitmentsCatchUpConfig) Reset() {
	*x = AcsCommitmentsCatchUpConfig{}
	mi := &file_com_digitalasset_canton_protocol_v30_domain_parameters_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AcsCommitmentsCatchUpConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AcsCommitmentsCatchUpConfig) ProtoMessage() {}

func (x *AcsCommitmentsCatchUpConfig) ProtoReflect() protoreflect.Message {
	mi := &file_com_digitalasset_canton_protocol_v30_domain_parameters_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AcsCommitmentsCatchUpConfig.ProtoReflect.Descriptor instead.
func (*AcsCommitmentsCatchUpConfig) Descriptor() ([]byte, []int) {
	return file_com_digitalasset_canton_protocol_v30_domain_parameters_proto_rawDescGZIP(), []int{0}
}

func (x *AcsCommitmentsCatchUpConfig) GetCatchupIntervalSkip() uint32 {
	if x != nil {
		return x.CatchupIntervalSkip
	}
	return 0
}

func (x *AcsCommitmentsCatchUpConfig) GetNrIntervalsToTriggerCatchup() uint32 {
	if x != nil {
		return x.NrIntervalsToTriggerCatchup
	}
	return 0
}

type ParticipantDomainLimits struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ConfirmationRequestsMaxRate uint32 `protobuf:"varint,1,opt,name=confirmation_requests_max_rate,json=confirmationRequestsMaxRate,proto3" json:"confirmation_requests_max_rate,omitempty"`
	MaxNumParties               uint32 `protobuf:"varint,2,opt,name=max_num_parties,json=maxNumParties,proto3" json:"max_num_parties,omitempty"`
	MaxNumPackages              uint32 `protobuf:"varint,3,opt,name=max_num_packages,json=maxNumPackages,proto3" json:"max_num_packages,omitempty"`
}

func (x *ParticipantDomainLimits) Reset() {
	*x = ParticipantDomainLimits{}
	mi := &file_com_digitalasset_canton_protocol_v30_domain_parameters_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ParticipantDomainLimits) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ParticipantDomainLimits) ProtoMessage() {}

func (x *ParticipantDomainLimits) ProtoReflect() protoreflect.Message {
	mi := &file_com_digitalasset_canton_protocol_v30_domain_parameters_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ParticipantDomainLimits.ProtoReflect.Descriptor instead.
func (*ParticipantDomainLimits) Descriptor() ([]byte, []int) {
	return file_com_digitalasset_canton_protocol_v30_domain_parameters_proto_rawDescGZIP(), []int{1}
}

func (x *ParticipantDomainLimits) GetConfirmationRequestsMaxRate() uint32 {
	if x != nil {
		return x.ConfirmationRequestsMaxRate
	}
	return 0
}

func (x *ParticipantDomainLimits) GetMaxNumParties() uint32 {
	if x != nil {
		return x.MaxNumParties
	}
	return 0
}

func (x *ParticipantDomainLimits) GetMaxNumPackages() uint32 {
	if x != nil {
		return x.MaxNumPackages
	}
	return 0
}

type DynamicDomainParameters struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ConfirmationResponseTimeout           *durationpb.Duration         `protobuf:"bytes,1,opt,name=confirmation_response_timeout,json=confirmationResponseTimeout,proto3" json:"confirmation_response_timeout,omitempty"`
	MediatorReactionTimeout               *durationpb.Duration         `protobuf:"bytes,2,opt,name=mediator_reaction_timeout,json=mediatorReactionTimeout,proto3" json:"mediator_reaction_timeout,omitempty"`
	TransferExclusivityTimeout            *durationpb.Duration         `protobuf:"bytes,3,opt,name=transfer_exclusivity_timeout,json=transferExclusivityTimeout,proto3" json:"transfer_exclusivity_timeout,omitempty"`
	TopologyChangeDelay                   *durationpb.Duration         `protobuf:"bytes,4,opt,name=topology_change_delay,json=topologyChangeDelay,proto3" json:"topology_change_delay,omitempty"`
	LedgerTimeRecordTimeTolerance         *durationpb.Duration         `protobuf:"bytes,5,opt,name=ledger_time_record_time_tolerance,json=ledgerTimeRecordTimeTolerance,proto3" json:"ledger_time_record_time_tolerance,omitempty"`
	ReconciliationInterval                *durationpb.Duration         `protobuf:"bytes,6,opt,name=reconciliation_interval,json=reconciliationInterval,proto3" json:"reconciliation_interval,omitempty"`
	MediatorDeduplicationTimeout          *durationpb.Duration         `protobuf:"bytes,7,opt,name=mediator_deduplication_timeout,json=mediatorDeduplicationTimeout,proto3" json:"mediator_deduplication_timeout,omitempty"`
	MaxRequestSize                        uint32                       `protobuf:"varint,8,opt,name=max_request_size,json=maxRequestSize,proto3" json:"max_request_size,omitempty"`
	OnboardingRestriction                 OnboardingRestriction        `protobuf:"varint,9,opt,name=onboarding_restriction,json=onboardingRestriction,proto3,enum=com.digitalasset.canton.protocol.v30.OnboardingRestriction" json:"onboarding_restriction,omitempty"`
	RequiredPackages                      []string                     `protobuf:"bytes,11,rep,name=required_packages,json=requiredPackages,proto3" json:"required_packages,omitempty"`
	OnlyRequiredPackagesPermitted         bool                         `protobuf:"varint,12,opt,name=only_required_packages_permitted,json=onlyRequiredPackagesPermitted,proto3" json:"only_required_packages_permitted,omitempty"`
	DefaultParticipantLimits              *ParticipantDomainLimits     `protobuf:"bytes,13,opt,name=default_participant_limits,json=defaultParticipantLimits,proto3" json:"default_participant_limits,omitempty"`
	DefaultMaxHostingParticipantsPerParty uint32                       `protobuf:"varint,14,opt,name=default_max_hosting_participants_per_party,json=defaultMaxHostingParticipantsPerParty,proto3" json:"default_max_hosting_participants_per_party,omitempty"`
	SequencerAggregateSubmissionTimeout   *durationpb.Duration         `protobuf:"bytes,15,opt,name=sequencer_aggregate_submission_timeout,json=sequencerAggregateSubmissionTimeout,proto3" json:"sequencer_aggregate_submission_timeout,omitempty"`
	TrafficControlParameters              *TrafficControlParameters    `protobuf:"bytes,16,opt,name=traffic_control_parameters,json=trafficControlParameters,proto3" json:"traffic_control_parameters,omitempty"`
	AcsCommitmentsCatchupConfig           *AcsCommitmentsCatchUpConfig `protobuf:"bytes,17,opt,name=acs_commitments_catchup_config,json=acsCommitmentsCatchupConfig,proto3" json:"acs_commitments_catchup_config,omitempty"`
}

func (x *DynamicDomainParameters) Reset() {
	*x = DynamicDomainParameters{}
	mi := &file_com_digitalasset_canton_protocol_v30_domain_parameters_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DynamicDomainParameters) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DynamicDomainParameters) ProtoMessage() {}

func (x *DynamicDomainParameters) ProtoReflect() protoreflect.Message {
	mi := &file_com_digitalasset_canton_protocol_v30_domain_parameters_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DynamicDomainParameters.ProtoReflect.Descriptor instead.
func (*DynamicDomainParameters) Descriptor() ([]byte, []int) {
	return file_com_digitalasset_canton_protocol_v30_domain_parameters_proto_rawDescGZIP(), []int{2}
}

func (x *DynamicDomainParameters) GetConfirmationResponseTimeout() *durationpb.Duration {
	if x != nil {
		return x.ConfirmationResponseTimeout
	}
	return nil
}

func (x *DynamicDomainParameters) GetMediatorReactionTimeout() *durationpb.Duration {
	if x != nil {
		return x.MediatorReactionTimeout
	}
	return nil
}

func (x *DynamicDomainParameters) GetTransferExclusivityTimeout() *durationpb.Duration {
	if x != nil {
		return x.TransferExclusivityTimeout
	}
	return nil
}

func (x *DynamicDomainParameters) GetTopologyChangeDelay() *durationpb.Duration {
	if x != nil {
		return x.TopologyChangeDelay
	}
	return nil
}

func (x *DynamicDomainParameters) GetLedgerTimeRecordTimeTolerance() *durationpb.Duration {
	if x != nil {
		return x.LedgerTimeRecordTimeTolerance
	}
	return nil
}

func (x *DynamicDomainParameters) GetReconciliationInterval() *durationpb.Duration {
	if x != nil {
		return x.ReconciliationInterval
	}
	return nil
}

func (x *DynamicDomainParameters) GetMediatorDeduplicationTimeout() *durationpb.Duration {
	if x != nil {
		return x.MediatorDeduplicationTimeout
	}
	return nil
}

func (x *DynamicDomainParameters) GetMaxRequestSize() uint32 {
	if x != nil {
		return x.MaxRequestSize
	}
	return 0
}

func (x *DynamicDomainParameters) GetOnboardingRestriction() OnboardingRestriction {
	if x != nil {
		return x.OnboardingRestriction
	}
	return OnboardingRestriction_ONBOARDING_RESTRICTION_UNSPECIFIED
}

func (x *DynamicDomainParameters) GetRequiredPackages() []string {
	if x != nil {
		return x.RequiredPackages
	}
	return nil
}

func (x *DynamicDomainParameters) GetOnlyRequiredPackagesPermitted() bool {
	if x != nil {
		return x.OnlyRequiredPackagesPermitted
	}
	return false
}

func (x *DynamicDomainParameters) GetDefaultParticipantLimits() *ParticipantDomainLimits {
	if x != nil {
		return x.DefaultParticipantLimits
	}
	return nil
}

func (x *DynamicDomainParameters) GetDefaultMaxHostingParticipantsPerParty() uint32 {
	if x != nil {
		return x.DefaultMaxHostingParticipantsPerParty
	}
	return 0
}

func (x *DynamicDomainParameters) GetSequencerAggregateSubmissionTimeout() *durationpb.Duration {
	if x != nil {
		return x.SequencerAggregateSubmissionTimeout
	}
	return nil
}

func (x *DynamicDomainParameters) GetTrafficControlParameters() *TrafficControlParameters {
	if x != nil {
		return x.TrafficControlParameters
	}
	return nil
}

func (x *DynamicDomainParameters) GetAcsCommitmentsCatchupConfig() *AcsCommitmentsCatchUpConfig {
	if x != nil {
		return x.AcsCommitmentsCatchupConfig
	}
	return nil
}

var File_com_digitalasset_canton_protocol_v30_domain_parameters_proto protoreflect.FileDescriptor

var file_com_digitalasset_canton_protocol_v30_domain_parameters_proto_rawDesc = []byte{
	0x0a, 0x3c, 0x63, 0x6f, 0x6d, 0x2f, 0x64, 0x69, 0x67, 0x69, 0x74, 0x61, 0x6c, 0x61, 0x73, 0x73,
	0x65, 0x74, 0x2f, 0x63, 0x61, 0x6e, 0x74, 0x6f, 0x6e, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63,
	0x6f, 0x6c, 0x2f, 0x76, 0x33, 0x30, 0x2f, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x5f, 0x70, 0x61,
	0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x24,
	0x63, 0x6f, 0x6d, 0x2e, 0x64, 0x69, 0x67, 0x69, 0x74, 0x61, 0x6c, 0x61, 0x73, 0x73, 0x65, 0x74,
	0x2e, 0x63, 0x61, 0x6e, 0x74, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c,
	0x2e, 0x76, 0x33, 0x30, 0x1a, 0x45, 0x63, 0x6f, 0x6d, 0x2f, 0x64, 0x69, 0x67, 0x69, 0x74, 0x61,
	0x6c, 0x61, 0x73, 0x73, 0x65, 0x74, 0x2f, 0x63, 0x61, 0x6e, 0x74, 0x6f, 0x6e, 0x2f, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2f, 0x76, 0x33, 0x30, 0x2f, 0x74, 0x72, 0x61, 0x66, 0x66,
	0x69, 0x63, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x5f, 0x70, 0x61, 0x72, 0x61, 0x6d,
	0x65, 0x74, 0x65, 0x72, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x64, 0x75, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x97, 0x01, 0x0a, 0x1b,
	0x41, 0x63, 0x73, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x43, 0x61,
	0x74, 0x63, 0x68, 0x55, 0x70, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x32, 0x0a, 0x15, 0x63,
	0x61, 0x74, 0x63, 0x68, 0x75, 0x70, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x5f,
	0x73, 0x6b, 0x69, 0x70, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x13, 0x63, 0x61, 0x74, 0x63,
	0x68, 0x75, 0x70, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x53, 0x6b, 0x69, 0x70, 0x12,
	0x44, 0x0a, 0x1f, 0x6e, 0x72, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x73, 0x5f,
	0x74, 0x6f, 0x5f, 0x74, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x5f, 0x63, 0x61, 0x74, 0x63, 0x68,
	0x75, 0x70, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x1b, 0x6e, 0x72, 0x49, 0x6e, 0x74, 0x65,
	0x72, 0x76, 0x61, 0x6c, 0x73, 0x54, 0x6f, 0x54, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x43, 0x61,
	0x74, 0x63, 0x68, 0x75, 0x70, 0x22, 0xb0, 0x01, 0x0a, 0x17, 0x50, 0x61, 0x72, 0x74, 0x69, 0x63,
	0x69, 0x70, 0x61, 0x6e, 0x74, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x4c, 0x69, 0x6d, 0x69, 0x74,
	0x73, 0x12, 0x43, 0x0a, 0x1e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x73, 0x5f, 0x6d, 0x61, 0x78, 0x5f, 0x72,
	0x61, 0x74, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x1b, 0x63, 0x6f, 0x6e, 0x66, 0x69,
	0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x73, 0x4d,
	0x61, 0x78, 0x52, 0x61, 0x74, 0x65, 0x12, 0x26, 0x0a, 0x0f, 0x6d, 0x61, 0x78, 0x5f, 0x6e, 0x75,
	0x6d, 0x5f, 0x70, 0x61, 0x72, 0x74, 0x69, 0x65, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x0d, 0x6d, 0x61, 0x78, 0x4e, 0x75, 0x6d, 0x50, 0x61, 0x72, 0x74, 0x69, 0x65, 0x73, 0x12, 0x28,
	0x0a, 0x10, 0x6d, 0x61, 0x78, 0x5f, 0x6e, 0x75, 0x6d, 0x5f, 0x70, 0x61, 0x63, 0x6b, 0x61, 0x67,
	0x65, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0e, 0x6d, 0x61, 0x78, 0x4e, 0x75, 0x6d,
	0x50, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x73, 0x22, 0xf8, 0x0b, 0x0a, 0x17, 0x44, 0x79, 0x6e,
	0x61, 0x6d, 0x69, 0x63, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65,
	0x74, 0x65, 0x72, 0x73, 0x12, 0x5d, 0x0a, 0x1d, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x72, 0x6d, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x5f, 0x74, 0x69,
	0x6d, 0x65, 0x6f, 0x75, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44, 0x75,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x1b, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x72, 0x6d, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x54, 0x69, 0x6d, 0x65,
	0x6f, 0x75, 0x74, 0x12, 0x55, 0x0a, 0x19, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x74, 0x6f, 0x72, 0x5f,
	0x72, 0x65, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x52, 0x17, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x74, 0x6f, 0x72, 0x52, 0x65, 0x61, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x12, 0x5b, 0x0a, 0x1c, 0x74, 0x72,
	0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x5f, 0x65, 0x78, 0x63, 0x6c, 0x75, 0x73, 0x69, 0x76, 0x69,
	0x74, 0x79, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x19, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x1a, 0x74, 0x72, 0x61,
	0x6e, 0x73, 0x66, 0x65, 0x72, 0x45, 0x78, 0x63, 0x6c, 0x75, 0x73, 0x69, 0x76, 0x69, 0x74, 0x79,
	0x54, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x12, 0x4d, 0x0a, 0x15, 0x74, 0x6f, 0x70, 0x6f, 0x6c,
	0x6f, 0x67, 0x79, 0x5f, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x5f, 0x64, 0x65, 0x6c, 0x61, 0x79,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x52, 0x13, 0x74, 0x6f, 0x70, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x43, 0x68, 0x61, 0x6e, 0x67,
	0x65, 0x44, 0x65, 0x6c, 0x61, 0x79, 0x12, 0x63, 0x0a, 0x21, 0x6c, 0x65, 0x64, 0x67, 0x65, 0x72,
	0x5f, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x5f, 0x74, 0x69, 0x6d,
	0x65, 0x5f, 0x74, 0x6f, 0x6c, 0x65, 0x72, 0x61, 0x6e, 0x63, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x19, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x1d, 0x6c, 0x65,
	0x64, 0x67, 0x65, 0x72, 0x54, 0x69, 0x6d, 0x65, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x54, 0x69,
	0x6d, 0x65, 0x54, 0x6f, 0x6c, 0x65, 0x72, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x52, 0x0a, 0x17, 0x72,
	0x65, 0x63, 0x6f, 0x6e, 0x63, 0x69, 0x6c, 0x69, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x6e,
	0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44,
	0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x16, 0x72, 0x65, 0x63, 0x6f, 0x6e, 0x63, 0x69,
	0x6c, 0x69, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x12,
	0x5f, 0x0a, 0x1e, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x74, 0x6f, 0x72, 0x5f, 0x64, 0x65, 0x64, 0x75,
	0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75,
	0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x52, 0x1c, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x74, 0x6f, 0x72, 0x44, 0x65, 0x64, 0x75,
	0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74,
	0x12, 0x28, 0x0a, 0x10, 0x6d, 0x61, 0x78, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x5f,
	0x73, 0x69, 0x7a, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0e, 0x6d, 0x61, 0x78, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x72, 0x0a, 0x16, 0x6f, 0x6e,
	0x62, 0x6f, 0x61, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x5f, 0x72, 0x65, 0x73, 0x74, 0x72, 0x69, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x3b, 0x2e, 0x63, 0x6f, 0x6d,
	0x2e, 0x64, 0x69, 0x67, 0x69, 0x74, 0x61, 0x6c, 0x61, 0x73, 0x73, 0x65, 0x74, 0x2e, 0x63, 0x61,
	0x6e, 0x74, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x76, 0x33,
	0x30, 0x2e, 0x4f, 0x6e, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x73, 0x74,
	0x72, 0x69, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x15, 0x6f, 0x6e, 0x62, 0x6f, 0x61, 0x72, 0x64,
	0x69, 0x6e, 0x67, 0x52, 0x65, 0x73, 0x74, 0x72, 0x69, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x2b,
	0x0a, 0x11, 0x72, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x64, 0x5f, 0x70, 0x61, 0x63, 0x6b, 0x61,
	0x67, 0x65, 0x73, 0x18, 0x0b, 0x20, 0x03, 0x28, 0x09, 0x52, 0x10, 0x72, 0x65, 0x71, 0x75, 0x69,
	0x72, 0x65, 0x64, 0x50, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x73, 0x12, 0x47, 0x0a, 0x20, 0x6f,
	0x6e, 0x6c, 0x79, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x64, 0x5f, 0x70, 0x61, 0x63,
	0x6b, 0x61, 0x67, 0x65, 0x73, 0x5f, 0x70, 0x65, 0x72, 0x6d, 0x69, 0x74, 0x74, 0x65, 0x64, 0x18,
	0x0c, 0x20, 0x01, 0x28, 0x08, 0x52, 0x1d, 0x6f, 0x6e, 0x6c, 0x79, 0x52, 0x65, 0x71, 0x75, 0x69,
	0x72, 0x65, 0x64, 0x50, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x73, 0x50, 0x65, 0x72, 0x6d, 0x69,
	0x74, 0x74, 0x65, 0x64, 0x12, 0x7b, 0x0a, 0x1a, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x5f,
	0x70, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x5f, 0x6c, 0x69, 0x6d, 0x69,
	0x74, 0x73, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3d, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x64,
	0x69, 0x67, 0x69, 0x74, 0x61, 0x6c, 0x61, 0x73, 0x73, 0x65, 0x74, 0x2e, 0x63, 0x61, 0x6e, 0x74,
	0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x76, 0x33, 0x30, 0x2e,
	0x50, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x44, 0x6f, 0x6d, 0x61, 0x69,
	0x6e, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x73, 0x52, 0x18, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74,
	0x50, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x4c, 0x69, 0x6d, 0x69, 0x74,
	0x73, 0x12, 0x59, 0x0a, 0x2a, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x5f, 0x6d, 0x61, 0x78,
	0x5f, 0x68, 0x6f, 0x73, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x70, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69,
	0x70, 0x61, 0x6e, 0x74, 0x73, 0x5f, 0x70, 0x65, 0x72, 0x5f, 0x70, 0x61, 0x72, 0x74, 0x79, 0x18,
	0x0e, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x25, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x4d, 0x61,
	0x78, 0x48, 0x6f, 0x73, 0x74, 0x69, 0x6e, 0x67, 0x50, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70,
	0x61, 0x6e, 0x74, 0x73, 0x50, 0x65, 0x72, 0x50, 0x61, 0x72, 0x74, 0x79, 0x12, 0x6e, 0x0a, 0x26,
	0x73, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x72, 0x5f, 0x61, 0x67, 0x67, 0x72, 0x65, 0x67,
	0x61, 0x74, 0x65, 0x5f, 0x73, 0x75, 0x62, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x74,
	0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44,
	0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x23, 0x73, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63,
	0x65, 0x72, 0x41, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x65, 0x53, 0x75, 0x62, 0x6d, 0x69,
	0x73, 0x73, 0x69, 0x6f, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x12, 0x7c, 0x0a, 0x1a,
	0x74, 0x72, 0x61, 0x66, 0x66, 0x69, 0x63, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x5f,
	0x70, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x18, 0x10, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x3e, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x64, 0x69, 0x67, 0x69, 0x74, 0x61, 0x6c, 0x61, 0x73,
	0x73, 0x65, 0x74, 0x2e, 0x63, 0x61, 0x6e, 0x74, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x63, 0x6f, 0x6c, 0x2e, 0x76, 0x33, 0x30, 0x2e, 0x54, 0x72, 0x61, 0x66, 0x66, 0x69, 0x63, 0x43,
	0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73,
	0x52, 0x18, 0x74, 0x72, 0x61, 0x66, 0x66, 0x69, 0x63, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c,
	0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x12, 0x86, 0x01, 0x0a, 0x1e, 0x61,
	0x63, 0x73, 0x5f, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x5f, 0x63,
	0x61, 0x74, 0x63, 0x68, 0x75, 0x70, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x11, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x41, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x64, 0x69, 0x67, 0x69, 0x74, 0x61,
	0x6c, 0x61, 0x73, 0x73, 0x65, 0x74, 0x2e, 0x63, 0x61, 0x6e, 0x74, 0x6f, 0x6e, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x76, 0x33, 0x30, 0x2e, 0x41, 0x63, 0x73, 0x43, 0x6f,
	0x6d, 0x6d, 0x69, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x43, 0x61, 0x74, 0x63, 0x68, 0x55, 0x70,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x1b, 0x61, 0x63, 0x73, 0x43, 0x6f, 0x6d, 0x6d, 0x69,
	0x74, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x43, 0x61, 0x74, 0x63, 0x68, 0x75, 0x70, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x2a, 0xf7, 0x01, 0x0a, 0x15, 0x4f, 0x6e, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x69,
	0x6e, 0x67, 0x52, 0x65, 0x73, 0x74, 0x72, 0x69, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x26, 0x0a,
	0x22, 0x4f, 0x4e, 0x42, 0x4f, 0x41, 0x52, 0x44, 0x49, 0x4e, 0x47, 0x5f, 0x52, 0x45, 0x53, 0x54,
	0x52, 0x49, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46,
	0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x2c, 0x0a, 0x28, 0x4f, 0x4e, 0x42, 0x4f, 0x41, 0x52, 0x44,
	0x49, 0x4e, 0x47, 0x5f, 0x52, 0x45, 0x53, 0x54, 0x52, 0x49, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f,
	0x55, 0x4e, 0x52, 0x45, 0x53, 0x54, 0x52, 0x49, 0x43, 0x54, 0x45, 0x44, 0x5f, 0x4f, 0x50, 0x45,
	0x4e, 0x10, 0x01, 0x12, 0x2e, 0x0a, 0x2a, 0x4f, 0x4e, 0x42, 0x4f, 0x41, 0x52, 0x44, 0x49, 0x4e,
	0x47, 0x5f, 0x52, 0x45, 0x53, 0x54, 0x52, 0x49, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x55, 0x4e,
	0x52, 0x45, 0x53, 0x54, 0x52, 0x49, 0x43, 0x54, 0x45, 0x44, 0x5f, 0x4c, 0x4f, 0x43, 0x4b, 0x45,
	0x44, 0x10, 0x02, 0x12, 0x2a, 0x0a, 0x26, 0x4f, 0x4e, 0x42, 0x4f, 0x41, 0x52, 0x44, 0x49, 0x4e,
	0x47, 0x5f, 0x52, 0x45, 0x53, 0x54, 0x52, 0x49, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x52, 0x45,
	0x53, 0x54, 0x52, 0x49, 0x43, 0x54, 0x45, 0x44, 0x5f, 0x4f, 0x50, 0x45, 0x4e, 0x10, 0x03, 0x12,
	0x2c, 0x0a, 0x28, 0x4f, 0x4e, 0x42, 0x4f, 0x41, 0x52, 0x44, 0x49, 0x4e, 0x47, 0x5f, 0x52, 0x45,
	0x53, 0x54, 0x52, 0x49, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x52, 0x45, 0x53, 0x54, 0x52, 0x49,
	0x43, 0x54, 0x45, 0x44, 0x5f, 0x4c, 0x4f, 0x43, 0x4b, 0x45, 0x44, 0x10, 0x04, 0x42, 0x55, 0x5a,
	0x53, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x64, 0x69, 0x67, 0x69,
	0x74, 0x61, 0x6c, 0x2d, 0x61, 0x73, 0x73, 0x65, 0x74, 0x2f, 0x64, 0x61, 0x7a, 0x6c, 0x2d, 0x63,
	0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2f, 0x76, 0x38, 0x2f, 0x67, 0x6f, 0x2f, 0x61, 0x70, 0x69, 0x2f,
	0x63, 0x6f, 0x6d, 0x2f, 0x64, 0x69, 0x67, 0x69, 0x74, 0x61, 0x6c, 0x61, 0x73, 0x73, 0x65, 0x74,
	0x2f, 0x63, 0x61, 0x6e, 0x74, 0x6f, 0x6e, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c,
	0x2f, 0x76, 0x33, 0x30, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_com_digitalasset_canton_protocol_v30_domain_parameters_proto_rawDescOnce sync.Once
	file_com_digitalasset_canton_protocol_v30_domain_parameters_proto_rawDescData = file_com_digitalasset_canton_protocol_v30_domain_parameters_proto_rawDesc
)

func file_com_digitalasset_canton_protocol_v30_domain_parameters_proto_rawDescGZIP() []byte {
	file_com_digitalasset_canton_protocol_v30_domain_parameters_proto_rawDescOnce.Do(func() {
		file_com_digitalasset_canton_protocol_v30_domain_parameters_proto_rawDescData = protoimpl.X.CompressGZIP(file_com_digitalasset_canton_protocol_v30_domain_parameters_proto_rawDescData)
	})
	return file_com_digitalasset_canton_protocol_v30_domain_parameters_proto_rawDescData
}

var file_com_digitalasset_canton_protocol_v30_domain_parameters_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_com_digitalasset_canton_protocol_v30_domain_parameters_proto_msgTypes = make([]protoimpl.MessageInfo, 3)
var file_com_digitalasset_canton_protocol_v30_domain_parameters_proto_goTypes = []any{
	(OnboardingRestriction)(0),          // 0: com.digitalasset.canton.protocol.v30.OnboardingRestriction
	(*AcsCommitmentsCatchUpConfig)(nil), // 1: com.digitalasset.canton.protocol.v30.AcsCommitmentsCatchUpConfig
	(*ParticipantDomainLimits)(nil),     // 2: com.digitalasset.canton.protocol.v30.ParticipantDomainLimits
	(*DynamicDomainParameters)(nil),     // 3: com.digitalasset.canton.protocol.v30.DynamicDomainParameters
	(*durationpb.Duration)(nil),         // 4: google.protobuf.Duration
	(*TrafficControlParameters)(nil),    // 5: com.digitalasset.canton.protocol.v30.TrafficControlParameters
}
var file_com_digitalasset_canton_protocol_v30_domain_parameters_proto_depIdxs = []int32{
	4,  // 0: com.digitalasset.canton.protocol.v30.DynamicDomainParameters.confirmation_response_timeout:type_name -> google.protobuf.Duration
	4,  // 1: com.digitalasset.canton.protocol.v30.DynamicDomainParameters.mediator_reaction_timeout:type_name -> google.protobuf.Duration
	4,  // 2: com.digitalasset.canton.protocol.v30.DynamicDomainParameters.transfer_exclusivity_timeout:type_name -> google.protobuf.Duration
	4,  // 3: com.digitalasset.canton.protocol.v30.DynamicDomainParameters.topology_change_delay:type_name -> google.protobuf.Duration
	4,  // 4: com.digitalasset.canton.protocol.v30.DynamicDomainParameters.ledger_time_record_time_tolerance:type_name -> google.protobuf.Duration
	4,  // 5: com.digitalasset.canton.protocol.v30.DynamicDomainParameters.reconciliation_interval:type_name -> google.protobuf.Duration
	4,  // 6: com.digitalasset.canton.protocol.v30.DynamicDomainParameters.mediator_deduplication_timeout:type_name -> google.protobuf.Duration
	0,  // 7: com.digitalasset.canton.protocol.v30.DynamicDomainParameters.onboarding_restriction:type_name -> com.digitalasset.canton.protocol.v30.OnboardingRestriction
	2,  // 8: com.digitalasset.canton.protocol.v30.DynamicDomainParameters.default_participant_limits:type_name -> com.digitalasset.canton.protocol.v30.ParticipantDomainLimits
	4,  // 9: com.digitalasset.canton.protocol.v30.DynamicDomainParameters.sequencer_aggregate_submission_timeout:type_name -> google.protobuf.Duration
	5,  // 10: com.digitalasset.canton.protocol.v30.DynamicDomainParameters.traffic_control_parameters:type_name -> com.digitalasset.canton.protocol.v30.TrafficControlParameters
	1,  // 11: com.digitalasset.canton.protocol.v30.DynamicDomainParameters.acs_commitments_catchup_config:type_name -> com.digitalasset.canton.protocol.v30.AcsCommitmentsCatchUpConfig
	12, // [12:12] is the sub-list for method output_type
	12, // [12:12] is the sub-list for method input_type
	12, // [12:12] is the sub-list for extension type_name
	12, // [12:12] is the sub-list for extension extendee
	0,  // [0:12] is the sub-list for field type_name
}

func init() { file_com_digitalasset_canton_protocol_v30_domain_parameters_proto_init() }
func file_com_digitalasset_canton_protocol_v30_domain_parameters_proto_init() {
	if File_com_digitalasset_canton_protocol_v30_domain_parameters_proto != nil {
		return
	}
	file_com_digitalasset_canton_protocol_v30_traffic_control_parameters_proto_init()
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_com_digitalasset_canton_protocol_v30_domain_parameters_proto_rawDesc,
			NumEnums:      1,
			NumMessages:   3,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_com_digitalasset_canton_protocol_v30_domain_parameters_proto_goTypes,
		DependencyIndexes: file_com_digitalasset_canton_protocol_v30_domain_parameters_proto_depIdxs,
		EnumInfos:         file_com_digitalasset_canton_protocol_v30_domain_parameters_proto_enumTypes,
		MessageInfos:      file_com_digitalasset_canton_protocol_v30_domain_parameters_proto_msgTypes,
	}.Build()
	File_com_digitalasset_canton_protocol_v30_domain_parameters_proto = out.File
	file_com_digitalasset_canton_protocol_v30_domain_parameters_proto_rawDesc = nil
	file_com_digitalasset_canton_protocol_v30_domain_parameters_proto_goTypes = nil
	file_com_digitalasset_canton_protocol_v30_domain_parameters_proto_depIdxs = nil
}
