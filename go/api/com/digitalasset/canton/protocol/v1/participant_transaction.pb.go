// Copyright (c) 2017-2025 Digital Asset (Switzerland) GmbH and/or its affiliates. All rights reserved.
// SPDX-License-Identifier: Apache-2.0
// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.35.2
// 	protoc        v5.27.2
// source: com/digitalasset/canton/protocol/v1/participant_transaction.proto

package v1

import (
	v01 "github.com/digital-asset/dazl-client/v8/go/api/com/digitalasset/canton/crypto/v0"
	v0 "github.com/digital-asset/dazl-client/v8/go/api/com/digitalasset/canton/protocol/v0"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type ActionDescription struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Description:
	//
	//	*ActionDescription_Create
	//	*ActionDescription_Exercise
	//	*ActionDescription_Fetch
	//	*ActionDescription_LookupByKey
	Description isActionDescription_Description `protobuf_oneof:"description"`
}

func (x *ActionDescription) Reset() {
	*x = ActionDescription{}
	mi := &file_com_digitalasset_canton_protocol_v1_participant_transaction_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ActionDescription) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ActionDescription) ProtoMessage() {}

func (x *ActionDescription) ProtoReflect() protoreflect.Message {
	mi := &file_com_digitalasset_canton_protocol_v1_participant_transaction_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ActionDescription.ProtoReflect.Descriptor instead.
func (*ActionDescription) Descriptor() ([]byte, []int) {
	return file_com_digitalasset_canton_protocol_v1_participant_transaction_proto_rawDescGZIP(), []int{0}
}

func (m *ActionDescription) GetDescription() isActionDescription_Description {
	if m != nil {
		return m.Description
	}
	return nil
}

func (x *ActionDescription) GetCreate() *v0.ActionDescription_CreateActionDescription {
	if x, ok := x.GetDescription().(*ActionDescription_Create); ok {
		return x.Create
	}
	return nil
}

func (x *ActionDescription) GetExercise() *ActionDescription_ExerciseActionDescription {
	if x, ok := x.GetDescription().(*ActionDescription_Exercise); ok {
		return x.Exercise
	}
	return nil
}

func (x *ActionDescription) GetFetch() *v0.ActionDescription_FetchActionDescription {
	if x, ok := x.GetDescription().(*ActionDescription_Fetch); ok {
		return x.Fetch
	}
	return nil
}

func (x *ActionDescription) GetLookupByKey() *v0.ActionDescription_LookupByKeyActionDescription {
	if x, ok := x.GetDescription().(*ActionDescription_LookupByKey); ok {
		return x.LookupByKey
	}
	return nil
}

type isActionDescription_Description interface {
	isActionDescription_Description()
}

type ActionDescription_Create struct {
	Create *v0.ActionDescription_CreateActionDescription `protobuf:"bytes,1,opt,name=create,proto3,oneof"`
}

type ActionDescription_Exercise struct {
	Exercise *ActionDescription_ExerciseActionDescription `protobuf:"bytes,2,opt,name=exercise,proto3,oneof"`
}

type ActionDescription_Fetch struct {
	Fetch *v0.ActionDescription_FetchActionDescription `protobuf:"bytes,3,opt,name=fetch,proto3,oneof"`
}

type ActionDescription_LookupByKey struct {
	LookupByKey *v0.ActionDescription_LookupByKeyActionDescription `protobuf:"bytes,4,opt,name=lookup_by_key,json=lookupByKey,proto3,oneof"`
}

func (*ActionDescription_Create) isActionDescription_Description() {}

func (*ActionDescription_Exercise) isActionDescription_Description() {}

func (*ActionDescription_Fetch) isActionDescription_Description() {}

func (*ActionDescription_LookupByKey) isActionDescription_Description() {}

type ViewNode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ViewCommonData      *BlindableNode `protobuf:"bytes,1,opt,name=view_common_data,json=viewCommonData,proto3" json:"view_common_data,omitempty"`
	ViewParticipantData *BlindableNode `protobuf:"bytes,2,opt,name=view_participant_data,json=viewParticipantData,proto3" json:"view_participant_data,omitempty"`
	Subviews            *MerkleSeq     `protobuf:"bytes,3,opt,name=subviews,proto3" json:"subviews,omitempty"`
}

func (x *ViewNode) Reset() {
	*x = ViewNode{}
	mi := &file_com_digitalasset_canton_protocol_v1_participant_transaction_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ViewNode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ViewNode) ProtoMessage() {}

func (x *ViewNode) ProtoReflect() protoreflect.Message {
	mi := &file_com_digitalasset_canton_protocol_v1_participant_transaction_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ViewNode.ProtoReflect.Descriptor instead.
func (*ViewNode) Descriptor() ([]byte, []int) {
	return file_com_digitalasset_canton_protocol_v1_participant_transaction_proto_rawDescGZIP(), []int{1}
}

func (x *ViewNode) GetViewCommonData() *BlindableNode {
	if x != nil {
		return x.ViewCommonData
	}
	return nil
}

func (x *ViewNode) GetViewParticipantData() *BlindableNode {
	if x != nil {
		return x.ViewParticipantData
	}
	return nil
}

func (x *ViewNode) GetSubviews() *MerkleSeq {
	if x != nil {
		return x.Subviews
	}
	return nil
}

type ViewCommonData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Salt      *v01.Salt   `protobuf:"bytes,1,opt,name=salt,proto3" json:"salt,omitempty"`
	Informees []*Informee `protobuf:"bytes,2,rep,name=informees,proto3" json:"informees,omitempty"`
	Threshold int32       `protobuf:"varint,3,opt,name=threshold,proto3" json:"threshold,omitempty"`
}

func (x *ViewCommonData) Reset() {
	*x = ViewCommonData{}
	mi := &file_com_digitalasset_canton_protocol_v1_participant_transaction_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ViewCommonData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ViewCommonData) ProtoMessage() {}

func (x *ViewCommonData) ProtoReflect() protoreflect.Message {
	mi := &file_com_digitalasset_canton_protocol_v1_participant_transaction_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ViewCommonData.ProtoReflect.Descriptor instead.
func (*ViewCommonData) Descriptor() ([]byte, []int) {
	return file_com_digitalasset_canton_protocol_v1_participant_transaction_proto_rawDescGZIP(), []int{2}
}

func (x *ViewCommonData) GetSalt() *v01.Salt {
	if x != nil {
		return x.Salt
	}
	return nil
}

func (x *ViewCommonData) GetInformees() []*Informee {
	if x != nil {
		return x.Informees
	}
	return nil
}

func (x *ViewCommonData) GetThreshold() int32 {
	if x != nil {
		return x.Threshold
	}
	return 0
}

type Informee struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Party              string        `protobuf:"bytes,1,opt,name=party,proto3" json:"party,omitempty"`
	Weight             int32         `protobuf:"varint,2,opt,name=weight,proto3" json:"weight,omitempty"`
	RequiredTrustLevel v0.TrustLevel `protobuf:"varint,3,opt,name=required_trust_level,json=requiredTrustLevel,proto3,enum=com.digitalasset.canton.protocol.v0.TrustLevel" json:"required_trust_level,omitempty"`
}

func (x *Informee) Reset() {
	*x = Informee{}
	mi := &file_com_digitalasset_canton_protocol_v1_participant_transaction_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Informee) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Informee) ProtoMessage() {}

func (x *Informee) ProtoReflect() protoreflect.Message {
	mi := &file_com_digitalasset_canton_protocol_v1_participant_transaction_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Informee.ProtoReflect.Descriptor instead.
func (*Informee) Descriptor() ([]byte, []int) {
	return file_com_digitalasset_canton_protocol_v1_participant_transaction_proto_rawDescGZIP(), []int{3}
}

func (x *Informee) GetParty() string {
	if x != nil {
		return x.Party
	}
	return ""
}

func (x *Informee) GetWeight() int32 {
	if x != nil {
		return x.Weight
	}
	return 0
}

func (x *Informee) GetRequiredTrustLevel() v0.TrustLevel {
	if x != nil {
		return x.RequiredTrustLevel
	}
	return v0.TrustLevel(0)
}

type EncryptedViewMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ViewTree                      []byte                         `protobuf:"bytes,1,opt,name=view_tree,json=viewTree,proto3" json:"view_tree,omitempty"`
	EncryptionScheme              v01.SymmetricKeyScheme         `protobuf:"varint,2,opt,name=encryption_scheme,json=encryptionScheme,proto3,enum=com.digitalasset.canton.crypto.v0.SymmetricKeyScheme" json:"encryption_scheme,omitempty"`
	SubmitterParticipantSignature *v01.Signature                 `protobuf:"bytes,3,opt,name=submitter_participant_signature,json=submitterParticipantSignature,proto3" json:"submitter_participant_signature,omitempty"`
	ViewHash                      []byte                         `protobuf:"bytes,4,opt,name=view_hash,json=viewHash,proto3" json:"view_hash,omitempty"`
	Randomness                    []*ParticipantRandomnessLookup `protobuf:"bytes,5,rep,name=randomness,proto3" json:"randomness,omitempty"`
	DomainId                      string                         `protobuf:"bytes,6,opt,name=domain_id,json=domainId,proto3" json:"domain_id,omitempty"`
	ViewType                      v0.ViewType                    `protobuf:"varint,7,opt,name=view_type,json=viewType,proto3,enum=com.digitalasset.canton.protocol.v0.ViewType" json:"view_type,omitempty"`
}

func (x *EncryptedViewMessage) Reset() {
	*x = EncryptedViewMessage{}
	mi := &file_com_digitalasset_canton_protocol_v1_participant_transaction_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *EncryptedViewMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EncryptedViewMessage) ProtoMessage() {}

func (x *EncryptedViewMessage) ProtoReflect() protoreflect.Message {
	mi := &file_com_digitalasset_canton_protocol_v1_participant_transaction_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EncryptedViewMessage.ProtoReflect.Descriptor instead.
func (*EncryptedViewMessage) Descriptor() ([]byte, []int) {
	return file_com_digitalasset_canton_protocol_v1_participant_transaction_proto_rawDescGZIP(), []int{4}
}

func (x *EncryptedViewMessage) GetViewTree() []byte {
	if x != nil {
		return x.ViewTree
	}
	return nil
}

func (x *EncryptedViewMessage) GetEncryptionScheme() v01.SymmetricKeyScheme {
	if x != nil {
		return x.EncryptionScheme
	}
	return v01.SymmetricKeyScheme(0)
}

func (x *EncryptedViewMessage) GetSubmitterParticipantSignature() *v01.Signature {
	if x != nil {
		return x.SubmitterParticipantSignature
	}
	return nil
}

func (x *EncryptedViewMessage) GetViewHash() []byte {
	if x != nil {
		return x.ViewHash
	}
	return nil
}

func (x *EncryptedViewMessage) GetRandomness() []*ParticipantRandomnessLookup {
	if x != nil {
		return x.Randomness
	}
	return nil
}

func (x *EncryptedViewMessage) GetDomainId() string {
	if x != nil {
		return x.DomainId
	}
	return ""
}

func (x *EncryptedViewMessage) GetViewType() v0.ViewType {
	if x != nil {
		return x.ViewType
	}
	return v0.ViewType(0)
}

type ParticipantRandomnessLookup struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Randomness  []byte `protobuf:"bytes,1,opt,name=randomness,proto3" json:"randomness,omitempty"`
	Fingerprint string `protobuf:"bytes,2,opt,name=fingerprint,proto3" json:"fingerprint,omitempty"`
}

func (x *ParticipantRandomnessLookup) Reset() {
	*x = ParticipantRandomnessLookup{}
	mi := &file_com_digitalasset_canton_protocol_v1_participant_transaction_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ParticipantRandomnessLookup) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ParticipantRandomnessLookup) ProtoMessage() {}

func (x *ParticipantRandomnessLookup) ProtoReflect() protoreflect.Message {
	mi := &file_com_digitalasset_canton_protocol_v1_participant_transaction_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ParticipantRandomnessLookup.ProtoReflect.Descriptor instead.
func (*ParticipantRandomnessLookup) Descriptor() ([]byte, []int) {
	return file_com_digitalasset_canton_protocol_v1_participant_transaction_proto_rawDescGZIP(), []int{5}
}

func (x *ParticipantRandomnessLookup) GetRandomness() []byte {
	if x != nil {
		return x.Randomness
	}
	return nil
}

func (x *ParticipantRandomnessLookup) GetFingerprint() string {
	if x != nil {
		return x.Fingerprint
	}
	return ""
}

// Deprecated: Marked as deprecated in com/digitalasset/canton/protocol/v1/participant_transaction.proto.
type ViewParticipantMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *ViewParticipantMessage) Reset() {
	*x = ViewParticipantMessage{}
	mi := &file_com_digitalasset_canton_protocol_v1_participant_transaction_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ViewParticipantMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ViewParticipantMessage) ProtoMessage() {}

func (x *ViewParticipantMessage) ProtoReflect() protoreflect.Message {
	mi := &file_com_digitalasset_canton_protocol_v1_participant_transaction_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ViewParticipantMessage.ProtoReflect.Descriptor instead.
func (*ViewParticipantMessage) Descriptor() ([]byte, []int) {
	return file_com_digitalasset_canton_protocol_v1_participant_transaction_proto_rawDescGZIP(), []int{6}
}

type InformeeMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FullInformeeTree *FullInformeeTree `protobuf:"bytes,1,opt,name=full_informee_tree,json=fullInformeeTree,proto3" json:"full_informee_tree,omitempty"`
	ProtocolVersion  int32             `protobuf:"varint,2,opt,name=protocol_version,json=protocolVersion,proto3" json:"protocol_version,omitempty"`
}

func (x *InformeeMessage) Reset() {
	*x = InformeeMessage{}
	mi := &file_com_digitalasset_canton_protocol_v1_participant_transaction_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *InformeeMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InformeeMessage) ProtoMessage() {}

func (x *InformeeMessage) ProtoReflect() protoreflect.Message {
	mi := &file_com_digitalasset_canton_protocol_v1_participant_transaction_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InformeeMessage.ProtoReflect.Descriptor instead.
func (*InformeeMessage) Descriptor() ([]byte, []int) {
	return file_com_digitalasset_canton_protocol_v1_participant_transaction_proto_rawDescGZIP(), []int{7}
}

func (x *InformeeMessage) GetFullInformeeTree() *FullInformeeTree {
	if x != nil {
		return x.FullInformeeTree
	}
	return nil
}

func (x *InformeeMessage) GetProtocolVersion() int32 {
	if x != nil {
		return x.ProtocolVersion
	}
	return 0
}

type LightTransactionViewTree struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Tree          *GenTransactionTree `protobuf:"bytes,1,opt,name=tree,proto3" json:"tree,omitempty"`
	SubviewHashes [][]byte            `protobuf:"bytes,2,rep,name=subview_hashes,json=subviewHashes,proto3" json:"subview_hashes,omitempty"`
}

func (x *LightTransactionViewTree) Reset() {
	*x = LightTransactionViewTree{}
	mi := &file_com_digitalasset_canton_protocol_v1_participant_transaction_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *LightTransactionViewTree) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LightTransactionViewTree) ProtoMessage() {}

func (x *LightTransactionViewTree) ProtoReflect() protoreflect.Message {
	mi := &file_com_digitalasset_canton_protocol_v1_participant_transaction_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LightTransactionViewTree.ProtoReflect.Descriptor instead.
func (*LightTransactionViewTree) Descriptor() ([]byte, []int) {
	return file_com_digitalasset_canton_protocol_v1_participant_transaction_proto_rawDescGZIP(), []int{8}
}

func (x *LightTransactionViewTree) GetTree() *GenTransactionTree {
	if x != nil {
		return x.Tree
	}
	return nil
}

func (x *LightTransactionViewTree) GetSubviewHashes() [][]byte {
	if x != nil {
		return x.SubviewHashes
	}
	return nil
}

type FullInformeeTree struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Tree *GenTransactionTree `protobuf:"bytes,1,opt,name=tree,proto3" json:"tree,omitempty"`
}

func (x *FullInformeeTree) Reset() {
	*x = FullInformeeTree{}
	mi := &file_com_digitalasset_canton_protocol_v1_participant_transaction_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *FullInformeeTree) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FullInformeeTree) ProtoMessage() {}

func (x *FullInformeeTree) ProtoReflect() protoreflect.Message {
	mi := &file_com_digitalasset_canton_protocol_v1_participant_transaction_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FullInformeeTree.ProtoReflect.Descriptor instead.
func (*FullInformeeTree) Descriptor() ([]byte, []int) {
	return file_com_digitalasset_canton_protocol_v1_participant_transaction_proto_rawDescGZIP(), []int{9}
}

func (x *FullInformeeTree) GetTree() *GenTransactionTree {
	if x != nil {
		return x.Tree
	}
	return nil
}

type CreatedContract struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Contract       *SerializableContract `protobuf:"bytes,1,opt,name=contract,proto3" json:"contract,omitempty"`
	ConsumedInCore bool                  `protobuf:"varint,2,opt,name=consumed_in_core,json=consumedInCore,proto3" json:"consumed_in_core,omitempty"`
	RolledBack     bool                  `protobuf:"varint,3,opt,name=rolled_back,json=rolledBack,proto3" json:"rolled_back,omitempty"`
}

func (x *CreatedContract) Reset() {
	*x = CreatedContract{}
	mi := &file_com_digitalasset_canton_protocol_v1_participant_transaction_proto_msgTypes[10]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreatedContract) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreatedContract) ProtoMessage() {}

func (x *CreatedContract) ProtoReflect() protoreflect.Message {
	mi := &file_com_digitalasset_canton_protocol_v1_participant_transaction_proto_msgTypes[10]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreatedContract.ProtoReflect.Descriptor instead.
func (*CreatedContract) Descriptor() ([]byte, []int) {
	return file_com_digitalasset_canton_protocol_v1_participant_transaction_proto_rawDescGZIP(), []int{10}
}

func (x *CreatedContract) GetContract() *SerializableContract {
	if x != nil {
		return x.Contract
	}
	return nil
}

func (x *CreatedContract) GetConsumedInCore() bool {
	if x != nil {
		return x.ConsumedInCore
	}
	return false
}

func (x *CreatedContract) GetRolledBack() bool {
	if x != nil {
		return x.RolledBack
	}
	return false
}

type InputContract struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Contract *SerializableContract `protobuf:"bytes,1,opt,name=contract,proto3" json:"contract,omitempty"`
	Consumed bool                  `protobuf:"varint,2,opt,name=consumed,proto3" json:"consumed,omitempty"`
}

func (x *InputContract) Reset() {
	*x = InputContract{}
	mi := &file_com_digitalasset_canton_protocol_v1_participant_transaction_proto_msgTypes[11]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *InputContract) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InputContract) ProtoMessage() {}

func (x *InputContract) ProtoReflect() protoreflect.Message {
	mi := &file_com_digitalasset_canton_protocol_v1_participant_transaction_proto_msgTypes[11]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InputContract.ProtoReflect.Descriptor instead.
func (*InputContract) Descriptor() ([]byte, []int) {
	return file_com_digitalasset_canton_protocol_v1_participant_transaction_proto_rawDescGZIP(), []int{11}
}

func (x *InputContract) GetContract() *SerializableContract {
	if x != nil {
		return x.Contract
	}
	return nil
}

func (x *InputContract) GetConsumed() bool {
	if x != nil {
		return x.Consumed
	}
	return false
}

type SubmitterMetadata struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Salt                 *v01.Salt               `protobuf:"bytes,1,opt,name=salt,proto3" json:"salt,omitempty"`
	ActAs                []string                `protobuf:"bytes,2,rep,name=act_as,json=actAs,proto3" json:"act_as,omitempty"`
	ApplicationId        string                  `protobuf:"bytes,3,opt,name=application_id,json=applicationId,proto3" json:"application_id,omitempty"`
	CommandId            string                  `protobuf:"bytes,4,opt,name=command_id,json=commandId,proto3" json:"command_id,omitempty"`
	SubmitterParticipant string                  `protobuf:"bytes,5,opt,name=submitter_participant,json=submitterParticipant,proto3" json:"submitter_participant,omitempty"`
	SubmissionId         string                  `protobuf:"bytes,6,opt,name=submission_id,json=submissionId,proto3" json:"submission_id,omitempty"`
	DedupPeriod          *v0.DeduplicationPeriod `protobuf:"bytes,7,opt,name=dedup_period,json=dedupPeriod,proto3" json:"dedup_period,omitempty"`
	MaxSequencingTime    *timestamppb.Timestamp  `protobuf:"bytes,8,opt,name=max_sequencing_time,json=maxSequencingTime,proto3" json:"max_sequencing_time,omitempty"`
}

func (x *SubmitterMetadata) Reset() {
	*x = SubmitterMetadata{}
	mi := &file_com_digitalasset_canton_protocol_v1_participant_transaction_proto_msgTypes[12]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SubmitterMetadata) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SubmitterMetadata) ProtoMessage() {}

func (x *SubmitterMetadata) ProtoReflect() protoreflect.Message {
	mi := &file_com_digitalasset_canton_protocol_v1_participant_transaction_proto_msgTypes[12]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SubmitterMetadata.ProtoReflect.Descriptor instead.
func (*SubmitterMetadata) Descriptor() ([]byte, []int) {
	return file_com_digitalasset_canton_protocol_v1_participant_transaction_proto_rawDescGZIP(), []int{12}
}

func (x *SubmitterMetadata) GetSalt() *v01.Salt {
	if x != nil {
		return x.Salt
	}
	return nil
}

func (x *SubmitterMetadata) GetActAs() []string {
	if x != nil {
		return x.ActAs
	}
	return nil
}

func (x *SubmitterMetadata) GetApplicationId() string {
	if x != nil {
		return x.ApplicationId
	}
	return ""
}

func (x *SubmitterMetadata) GetCommandId() string {
	if x != nil {
		return x.CommandId
	}
	return ""
}

func (x *SubmitterMetadata) GetSubmitterParticipant() string {
	if x != nil {
		return x.SubmitterParticipant
	}
	return ""
}

func (x *SubmitterMetadata) GetSubmissionId() string {
	if x != nil {
		return x.SubmissionId
	}
	return ""
}

func (x *SubmitterMetadata) GetDedupPeriod() *v0.DeduplicationPeriod {
	if x != nil {
		return x.DedupPeriod
	}
	return nil
}

func (x *SubmitterMetadata) GetMaxSequencingTime() *timestamppb.Timestamp {
	if x != nil {
		return x.MaxSequencingTime
	}
	return nil
}

type ResolvedKey struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Key *GlobalKey `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
	// Types that are assignable to Resolution:
	//
	//	*ResolvedKey_ContractId
	//	*ResolvedKey_Free
	Resolution isResolvedKey_Resolution `protobuf_oneof:"resolution"`
}

func (x *ResolvedKey) Reset() {
	*x = ResolvedKey{}
	mi := &file_com_digitalasset_canton_protocol_v1_participant_transaction_proto_msgTypes[13]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ResolvedKey) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResolvedKey) ProtoMessage() {}

func (x *ResolvedKey) ProtoReflect() protoreflect.Message {
	mi := &file_com_digitalasset_canton_protocol_v1_participant_transaction_proto_msgTypes[13]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResolvedKey.ProtoReflect.Descriptor instead.
func (*ResolvedKey) Descriptor() ([]byte, []int) {
	return file_com_digitalasset_canton_protocol_v1_participant_transaction_proto_rawDescGZIP(), []int{13}
}

func (x *ResolvedKey) GetKey() *GlobalKey {
	if x != nil {
		return x.Key
	}
	return nil
}

func (m *ResolvedKey) GetResolution() isResolvedKey_Resolution {
	if m != nil {
		return m.Resolution
	}
	return nil
}

func (x *ResolvedKey) GetContractId() string {
	if x, ok := x.GetResolution().(*ResolvedKey_ContractId); ok {
		return x.ContractId
	}
	return ""
}

func (x *ResolvedKey) GetFree() *v0.ViewParticipantData_FreeKey {
	if x, ok := x.GetResolution().(*ResolvedKey_Free); ok {
		return x.Free
	}
	return nil
}

type isResolvedKey_Resolution interface {
	isResolvedKey_Resolution()
}

type ResolvedKey_ContractId struct {
	ContractId string `protobuf:"bytes,2,opt,name=contract_id,json=contractId,proto3,oneof"`
}

type ResolvedKey_Free struct {
	Free *v0.ViewParticipantData_FreeKey `protobuf:"bytes,3,opt,name=free,proto3,oneof"`
}

func (*ResolvedKey_ContractId) isResolvedKey_Resolution() {}

func (*ResolvedKey_Free) isResolvedKey_Resolution() {}

type ActionDescription_ExerciseActionDescription struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	InputContractId string   `protobuf:"bytes,1,opt,name=input_contract_id,json=inputContractId,proto3" json:"input_contract_id,omitempty"`
	Choice          string   `protobuf:"bytes,2,opt,name=choice,proto3" json:"choice,omitempty"`
	ChosenValue     []byte   `protobuf:"bytes,3,opt,name=chosen_value,json=chosenValue,proto3" json:"chosen_value,omitempty"`
	Actors          []string `protobuf:"bytes,4,rep,name=actors,proto3" json:"actors,omitempty"`
	ByKey           bool     `protobuf:"varint,5,opt,name=by_key,json=byKey,proto3" json:"by_key,omitempty"`
	NodeSeed        []byte   `protobuf:"bytes,6,opt,name=node_seed,json=nodeSeed,proto3" json:"node_seed,omitempty"`
	Version         string   `protobuf:"bytes,7,opt,name=version,proto3" json:"version,omitempty"`
	Failed          bool     `protobuf:"varint,8,opt,name=failed,proto3" json:"failed,omitempty"`
	InterfaceId     *string  `protobuf:"bytes,9,opt,name=interface_id,json=interfaceId,proto3,oneof" json:"interface_id,omitempty"`
}

func (x *ActionDescription_ExerciseActionDescription) Reset() {
	*x = ActionDescription_ExerciseActionDescription{}
	mi := &file_com_digitalasset_canton_protocol_v1_participant_transaction_proto_msgTypes[14]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ActionDescription_ExerciseActionDescription) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ActionDescription_ExerciseActionDescription) ProtoMessage() {}

func (x *ActionDescription_ExerciseActionDescription) ProtoReflect() protoreflect.Message {
	mi := &file_com_digitalasset_canton_protocol_v1_participant_transaction_proto_msgTypes[14]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ActionDescription_ExerciseActionDescription.ProtoReflect.Descriptor instead.
func (*ActionDescription_ExerciseActionDescription) Descriptor() ([]byte, []int) {
	return file_com_digitalasset_canton_protocol_v1_participant_transaction_proto_rawDescGZIP(), []int{0, 0}
}

func (x *ActionDescription_ExerciseActionDescription) GetInputContractId() string {
	if x != nil {
		return x.InputContractId
	}
	return ""
}

func (x *ActionDescription_ExerciseActionDescription) GetChoice() string {
	if x != nil {
		return x.Choice
	}
	return ""
}

func (x *ActionDescription_ExerciseActionDescription) GetChosenValue() []byte {
	if x != nil {
		return x.ChosenValue
	}
	return nil
}

func (x *ActionDescription_ExerciseActionDescription) GetActors() []string {
	if x != nil {
		return x.Actors
	}
	return nil
}

func (x *ActionDescription_ExerciseActionDescription) GetByKey() bool {
	if x != nil {
		return x.ByKey
	}
	return false
}

func (x *ActionDescription_ExerciseActionDescription) GetNodeSeed() []byte {
	if x != nil {
		return x.NodeSeed
	}
	return nil
}

func (x *ActionDescription_ExerciseActionDescription) GetVersion() string {
	if x != nil {
		return x.Version
	}
	return ""
}

func (x *ActionDescription_ExerciseActionDescription) GetFailed() bool {
	if x != nil {
		return x.Failed
	}
	return false
}

func (x *ActionDescription_ExerciseActionDescription) GetInterfaceId() string {
	if x != nil && x.InterfaceId != nil {
		return *x.InterfaceId
	}
	return ""
}

type ActionDescription_LookupByKeyActionDescription struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Key *GlobalKey `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
}

func (x *ActionDescription_LookupByKeyActionDescription) Reset() {
	*x = ActionDescription_LookupByKeyActionDescription{}
	mi := &file_com_digitalasset_canton_protocol_v1_participant_transaction_proto_msgTypes[15]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ActionDescription_LookupByKeyActionDescription) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ActionDescription_LookupByKeyActionDescription) ProtoMessage() {}

func (x *ActionDescription_LookupByKeyActionDescription) ProtoReflect() protoreflect.Message {
	mi := &file_com_digitalasset_canton_protocol_v1_participant_transaction_proto_msgTypes[15]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ActionDescription_LookupByKeyActionDescription.ProtoReflect.Descriptor instead.
func (*ActionDescription_LookupByKeyActionDescription) Descriptor() ([]byte, []int) {
	return file_com_digitalasset_canton_protocol_v1_participant_transaction_proto_rawDescGZIP(), []int{0, 1}
}

func (x *ActionDescription_LookupByKeyActionDescription) GetKey() *GlobalKey {
	if x != nil {
		return x.Key
	}
	return nil
}

type ActionDescription_FetchActionDescription struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	InputContractId string   `protobuf:"bytes,1,opt,name=input_contract_id,json=inputContractId,proto3" json:"input_contract_id,omitempty"`
	Actors          []string `protobuf:"bytes,2,rep,name=actors,proto3" json:"actors,omitempty"`
	ByKey           bool     `protobuf:"varint,3,opt,name=by_key,json=byKey,proto3" json:"by_key,omitempty"`
	Version         string   `protobuf:"bytes,4,opt,name=version,proto3" json:"version,omitempty"`
	TemplateId      *string  `protobuf:"bytes,5,opt,name=template_id,json=templateId,proto3,oneof" json:"template_id,omitempty"`
}

func (x *ActionDescription_FetchActionDescription) Reset() {
	*x = ActionDescription_FetchActionDescription{}
	mi := &file_com_digitalasset_canton_protocol_v1_participant_transaction_proto_msgTypes[16]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ActionDescription_FetchActionDescription) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ActionDescription_FetchActionDescription) ProtoMessage() {}

func (x *ActionDescription_FetchActionDescription) ProtoReflect() protoreflect.Message {
	mi := &file_com_digitalasset_canton_protocol_v1_participant_transaction_proto_msgTypes[16]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ActionDescription_FetchActionDescription.ProtoReflect.Descriptor instead.
func (*ActionDescription_FetchActionDescription) Descriptor() ([]byte, []int) {
	return file_com_digitalasset_canton_protocol_v1_participant_transaction_proto_rawDescGZIP(), []int{0, 2}
}

func (x *ActionDescription_FetchActionDescription) GetInputContractId() string {
	if x != nil {
		return x.InputContractId
	}
	return ""
}

func (x *ActionDescription_FetchActionDescription) GetActors() []string {
	if x != nil {
		return x.Actors
	}
	return nil
}

func (x *ActionDescription_FetchActionDescription) GetByKey() bool {
	if x != nil {
		return x.ByKey
	}
	return false
}

func (x *ActionDescription_FetchActionDescription) GetVersion() string {
	if x != nil {
		return x.Version
	}
	return ""
}

func (x *ActionDescription_FetchActionDescription) GetTemplateId() string {
	if x != nil && x.TemplateId != nil {
		return *x.TemplateId
	}
	return ""
}

var File_com_digitalasset_canton_protocol_v1_participant_transaction_proto protoreflect.FileDescriptor

var file_com_digitalasset_canton_protocol_v1_participant_transaction_proto_rawDesc = []byte{
	0x0a, 0x41, 0x63, 0x6f, 0x6d, 0x2f, 0x64, 0x69, 0x67, 0x69, 0x74, 0x61, 0x6c, 0x61, 0x73, 0x73,
	0x65, 0x74, 0x2f, 0x63, 0x61, 0x6e, 0x74, 0x6f, 0x6e, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63,
	0x6f, 0x6c, 0x2f, 0x76, 0x31, 0x2f, 0x70, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6e,
	0x74, 0x5f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x12, 0x23, 0x63, 0x6f, 0x6d, 0x2e, 0x64, 0x69, 0x67, 0x69, 0x74, 0x61, 0x6c,
	0x61, 0x73, 0x73, 0x65, 0x74, 0x2e, 0x63, 0x61, 0x6e, 0x74, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x76, 0x31, 0x1a, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x64, 0x69,
	0x67, 0x69, 0x74, 0x61, 0x6c, 0x61, 0x73, 0x73, 0x65, 0x74, 0x2f, 0x63, 0x61, 0x6e, 0x74, 0x6f,
	0x6e, 0x2f, 0x63, 0x72, 0x79, 0x70, 0x74, 0x6f, 0x2f, 0x76, 0x30, 0x2f, 0x63, 0x72, 0x79, 0x70,
	0x74, 0x6f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x30, 0x63, 0x6f, 0x6d, 0x2f, 0x64, 0x69,
	0x67, 0x69, 0x74, 0x61, 0x6c, 0x61, 0x73, 0x73, 0x65, 0x74, 0x2f, 0x63, 0x61, 0x6e, 0x74, 0x6f,
	0x6e, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2f, 0x76, 0x30, 0x2f, 0x63, 0x6f,
	0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x41, 0x63, 0x6f, 0x6d, 0x2f,
	0x64, 0x69, 0x67, 0x69, 0x74, 0x61, 0x6c, 0x61, 0x73, 0x73, 0x65, 0x74, 0x2f, 0x63, 0x61, 0x6e,
	0x74, 0x6f, 0x6e, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2f, 0x76, 0x30, 0x2f,
	0x70, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x5f, 0x74, 0x72, 0x61, 0x6e,
	0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x32, 0x63,
	0x6f, 0x6d, 0x2f, 0x64, 0x69, 0x67, 0x69, 0x74, 0x61, 0x6c, 0x61, 0x73, 0x73, 0x65, 0x74, 0x2f,
	0x63, 0x61, 0x6e, 0x74, 0x6f, 0x6e, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2f,
	0x76, 0x30, 0x2f, 0x74, 0x6f, 0x70, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x1a, 0x30, 0x63, 0x6f, 0x6d, 0x2f, 0x64, 0x69, 0x67, 0x69, 0x74, 0x61, 0x6c, 0x61, 0x73,
	0x73, 0x65, 0x74, 0x2f, 0x63, 0x61, 0x6e, 0x74, 0x6f, 0x6e, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x63, 0x6f, 0x6c, 0x2f, 0x76, 0x31, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x1a, 0x30, 0x63, 0x6f, 0x6d, 0x2f, 0x64, 0x69, 0x67, 0x69, 0x74, 0x61, 0x6c,
	0x61, 0x73, 0x73, 0x65, 0x74, 0x2f, 0x63, 0x61, 0x6e, 0x74, 0x6f, 0x6e, 0x2f, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2f, 0x76, 0x31, 0x2f, 0x6d, 0x65, 0x72, 0x6b, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xc2, 0x08, 0x0a, 0x11, 0x41, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x68, 0x0a, 0x06,
	0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x4e, 0x2e, 0x63,
	0x6f, 0x6d, 0x2e, 0x64, 0x69, 0x67, 0x69, 0x74, 0x61, 0x6c, 0x61, 0x73, 0x73, 0x65, 0x74, 0x2e,
	0x63, 0x61, 0x6e, 0x74, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e,
	0x76, 0x30, 0x2e, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x41, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x00, 0x52, 0x06,
	0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x12, 0x6e, 0x0a, 0x08, 0x65, 0x78, 0x65, 0x72, 0x63, 0x69,
	0x73, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x50, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x64,
	0x69, 0x67, 0x69, 0x74, 0x61, 0x6c, 0x61, 0x73, 0x73, 0x65, 0x74, 0x2e, 0x63, 0x61, 0x6e, 0x74,
	0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x41,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x2e, 0x45, 0x78, 0x65, 0x72, 0x63, 0x69, 0x73, 0x65, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x44,
	0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x00, 0x52, 0x08, 0x65, 0x78,
	0x65, 0x72, 0x63, 0x69, 0x73, 0x65, 0x12, 0x65, 0x0a, 0x05, 0x66, 0x65, 0x74, 0x63, 0x68, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x4d, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x64, 0x69, 0x67, 0x69,
	0x74, 0x61, 0x6c, 0x61, 0x73, 0x73, 0x65, 0x74, 0x2e, 0x63, 0x61, 0x6e, 0x74, 0x6f, 0x6e, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x76, 0x30, 0x2e, 0x41, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x46, 0x65,
	0x74, 0x63, 0x68, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x48, 0x00, 0x52, 0x05, 0x66, 0x65, 0x74, 0x63, 0x68, 0x12, 0x79, 0x0a,
	0x0d, 0x6c, 0x6f, 0x6f, 0x6b, 0x75, 0x70, 0x5f, 0x62, 0x79, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x53, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x64, 0x69, 0x67, 0x69, 0x74,
	0x61, 0x6c, 0x61, 0x73, 0x73, 0x65, 0x74, 0x2e, 0x63, 0x61, 0x6e, 0x74, 0x6f, 0x6e, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x76, 0x30, 0x2e, 0x41, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x4c, 0x6f, 0x6f,
	0x6b, 0x75, 0x70, 0x42, 0x79, 0x4b, 0x65, 0x79, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x65,
	0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x00, 0x52, 0x0b, 0x6c, 0x6f, 0x6f,
	0x6b, 0x75, 0x70, 0x42, 0x79, 0x4b, 0x65, 0x79, 0x1a, 0xb9, 0x02, 0x0a, 0x19, 0x45, 0x78, 0x65,
	0x72, 0x63, 0x69, 0x73, 0x65, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x65, 0x73, 0x63, 0x72,
	0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x2a, 0x0a, 0x11, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x5f,
	0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0f, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74,
	0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x63, 0x68, 0x6f, 0x69, 0x63, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x06, 0x63, 0x68, 0x6f, 0x69, 0x63, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x63, 0x68,
	0x6f, 0x73, 0x65, 0x6e, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0c,
	0x52, 0x0b, 0x63, 0x68, 0x6f, 0x73, 0x65, 0x6e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x16, 0x0a,
	0x06, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x09, 0x52, 0x06, 0x61,
	0x63, 0x74, 0x6f, 0x72, 0x73, 0x12, 0x15, 0x0a, 0x06, 0x62, 0x79, 0x5f, 0x6b, 0x65, 0x79, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x05, 0x62, 0x79, 0x4b, 0x65, 0x79, 0x12, 0x1b, 0x0a, 0x09,
	0x6e, 0x6f, 0x64, 0x65, 0x5f, 0x73, 0x65, 0x65, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0c, 0x52,
	0x08, 0x6e, 0x6f, 0x64, 0x65, 0x53, 0x65, 0x65, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x76, 0x65, 0x72,
	0x73, 0x69, 0x6f, 0x6e, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73,
	0x69, 0x6f, 0x6e, 0x12, 0x16, 0x0a, 0x06, 0x66, 0x61, 0x69, 0x6c, 0x65, 0x64, 0x18, 0x08, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x06, 0x66, 0x61, 0x69, 0x6c, 0x65, 0x64, 0x12, 0x26, 0x0a, 0x0c, 0x69,
	0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x09, 0x20, 0x01, 0x28,
	0x09, 0x48, 0x00, 0x52, 0x0b, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x49, 0x64,
	0x88, 0x01, 0x01, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63,
	0x65, 0x5f, 0x69, 0x64, 0x1a, 0x60, 0x0a, 0x1c, 0x4c, 0x6f, 0x6f, 0x6b, 0x75, 0x70, 0x42, 0x79,
	0x4b, 0x65, 0x79, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x40, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x2e, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x64, 0x69, 0x67, 0x69, 0x74, 0x61, 0x6c, 0x61,
	0x73, 0x73, 0x65, 0x74, 0x2e, 0x63, 0x61, 0x6e, 0x74, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x4b, 0x65,
	0x79, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x1a, 0xc3, 0x01, 0x0a, 0x16, 0x46, 0x65, 0x74, 0x63, 0x68,
	0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x2a, 0x0a, 0x11, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x72,
	0x61, 0x63, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x69, 0x6e,
	0x70, 0x75, 0x74, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x49, 0x64, 0x12, 0x16, 0x0a,
	0x06, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x06, 0x61,
	0x63, 0x74, 0x6f, 0x72, 0x73, 0x12, 0x15, 0x0a, 0x06, 0x62, 0x79, 0x5f, 0x6b, 0x65, 0x79, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x05, 0x62, 0x79, 0x4b, 0x65, 0x79, 0x12, 0x18, 0x0a, 0x07,
	0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x76,
	0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x24, 0x0a, 0x0b, 0x74, 0x65, 0x6d, 0x70, 0x6c, 0x61,
	0x74, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x0a, 0x74,
	0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x49, 0x64, 0x88, 0x01, 0x01, 0x42, 0x0e, 0x0a, 0x0c,
	0x5f, 0x74, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x5f, 0x69, 0x64, 0x42, 0x0d, 0x0a, 0x0b,
	0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x9c, 0x02, 0x0a, 0x08,
	0x56, 0x69, 0x65, 0x77, 0x4e, 0x6f, 0x64, 0x65, 0x12, 0x5c, 0x0a, 0x10, 0x76, 0x69, 0x65, 0x77,
	0x5f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x32, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x64, 0x69, 0x67, 0x69, 0x74, 0x61, 0x6c,
	0x61, 0x73, 0x73, 0x65, 0x74, 0x2e, 0x63, 0x61, 0x6e, 0x74, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x42, 0x6c, 0x69, 0x6e, 0x64, 0x61, 0x62,
	0x6c, 0x65, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x0e, 0x76, 0x69, 0x65, 0x77, 0x43, 0x6f, 0x6d, 0x6d,
	0x6f, 0x6e, 0x44, 0x61, 0x74, 0x61, 0x12, 0x66, 0x0a, 0x15, 0x76, 0x69, 0x65, 0x77, 0x5f, 0x70,
	0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x32, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x64, 0x69, 0x67, 0x69,
	0x74, 0x61, 0x6c, 0x61, 0x73, 0x73, 0x65, 0x74, 0x2e, 0x63, 0x61, 0x6e, 0x74, 0x6f, 0x6e, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x42, 0x6c, 0x69, 0x6e,
	0x64, 0x61, 0x62, 0x6c, 0x65, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x13, 0x76, 0x69, 0x65, 0x77, 0x50,
	0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x44, 0x61, 0x74, 0x61, 0x12, 0x4a,
	0x0a, 0x08, 0x73, 0x75, 0x62, 0x76, 0x69, 0x65, 0x77, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x2e, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x64, 0x69, 0x67, 0x69, 0x74, 0x61, 0x6c, 0x61, 0x73,
	0x73, 0x65, 0x74, 0x2e, 0x63, 0x61, 0x6e, 0x74, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x63, 0x6f, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x65, 0x72, 0x6b, 0x6c, 0x65, 0x53, 0x65, 0x71,
	0x52, 0x08, 0x73, 0x75, 0x62, 0x76, 0x69, 0x65, 0x77, 0x73, 0x22, 0xb8, 0x01, 0x0a, 0x0e, 0x56,
	0x69, 0x65, 0x77, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x44, 0x61, 0x74, 0x61, 0x12, 0x3b, 0x0a,
	0x04, 0x73, 0x61, 0x6c, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x63, 0x6f,
	0x6d, 0x2e, 0x64, 0x69, 0x67, 0x69, 0x74, 0x61, 0x6c, 0x61, 0x73, 0x73, 0x65, 0x74, 0x2e, 0x63,
	0x61, 0x6e, 0x74, 0x6f, 0x6e, 0x2e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x6f, 0x2e, 0x76, 0x30, 0x2e,
	0x53, 0x61, 0x6c, 0x74, 0x52, 0x04, 0x73, 0x61, 0x6c, 0x74, 0x12, 0x4b, 0x0a, 0x09, 0x69, 0x6e,
	0x66, 0x6f, 0x72, 0x6d, 0x65, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2d, 0x2e,
	0x63, 0x6f, 0x6d, 0x2e, 0x64, 0x69, 0x67, 0x69, 0x74, 0x61, 0x6c, 0x61, 0x73, 0x73, 0x65, 0x74,
	0x2e, 0x63, 0x61, 0x6e, 0x74, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c,
	0x2e, 0x76, 0x31, 0x2e, 0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x65, 0x65, 0x52, 0x09, 0x69, 0x6e,
	0x66, 0x6f, 0x72, 0x6d, 0x65, 0x65, 0x73, 0x12, 0x1c, 0x0a, 0x09, 0x74, 0x68, 0x72, 0x65, 0x73,
	0x68, 0x6f, 0x6c, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x74, 0x68, 0x72, 0x65,
	0x73, 0x68, 0x6f, 0x6c, 0x64, 0x22, 0x9b, 0x01, 0x0a, 0x08, 0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d,
	0x65, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x70, 0x61, 0x72, 0x74, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x05, 0x70, 0x61, 0x72, 0x74, 0x79, 0x12, 0x16, 0x0a, 0x06, 0x77, 0x65, 0x69, 0x67,
	0x68, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x77, 0x65, 0x69, 0x67, 0x68, 0x74,
	0x12, 0x61, 0x0a, 0x14, 0x72, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x64, 0x5f, 0x74, 0x72, 0x75,
	0x73, 0x74, 0x5f, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2f,
	0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x64, 0x69, 0x67, 0x69, 0x74, 0x61, 0x6c, 0x61, 0x73, 0x73, 0x65,
	0x74, 0x2e, 0x63, 0x61, 0x6e, 0x74, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f,
	0x6c, 0x2e, 0x76, 0x30, 0x2e, 0x54, 0x72, 0x75, 0x73, 0x74, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x52,
	0x12, 0x72, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x64, 0x54, 0x72, 0x75, 0x73, 0x74, 0x4c, 0x65,
	0x76, 0x65, 0x6c, 0x22, 0xf5, 0x03, 0x0a, 0x14, 0x45, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x65,
	0x64, 0x56, 0x69, 0x65, 0x77, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x1b, 0x0a, 0x09,
	0x76, 0x69, 0x65, 0x77, 0x5f, 0x74, 0x72, 0x65, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52,
	0x08, 0x76, 0x69, 0x65, 0x77, 0x54, 0x72, 0x65, 0x65, 0x12, 0x62, 0x0a, 0x11, 0x65, 0x6e, 0x63,
	0x72, 0x79, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x35, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x64, 0x69, 0x67, 0x69, 0x74,
	0x61, 0x6c, 0x61, 0x73, 0x73, 0x65, 0x74, 0x2e, 0x63, 0x61, 0x6e, 0x74, 0x6f, 0x6e, 0x2e, 0x63,
	0x72, 0x79, 0x70, 0x74, 0x6f, 0x2e, 0x76, 0x30, 0x2e, 0x53, 0x79, 0x6d, 0x6d, 0x65, 0x74, 0x72,
	0x69, 0x63, 0x4b, 0x65, 0x79, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x65, 0x52, 0x10, 0x65, 0x6e, 0x63,
	0x72, 0x79, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x65, 0x12, 0x74, 0x0a,
	0x1f, 0x73, 0x75, 0x62, 0x6d, 0x69, 0x74, 0x74, 0x65, 0x72, 0x5f, 0x70, 0x61, 0x72, 0x74, 0x69,
	0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x5f, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x64, 0x69, 0x67,
	0x69, 0x74, 0x61, 0x6c, 0x61, 0x73, 0x73, 0x65, 0x74, 0x2e, 0x63, 0x61, 0x6e, 0x74, 0x6f, 0x6e,
	0x2e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x6f, 0x2e, 0x76, 0x30, 0x2e, 0x53, 0x69, 0x67, 0x6e, 0x61,
	0x74, 0x75, 0x72, 0x65, 0x52, 0x1d, 0x73, 0x75, 0x62, 0x6d, 0x69, 0x74, 0x74, 0x65, 0x72, 0x50,
	0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x74,
	0x75, 0x72, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x76, 0x69, 0x65, 0x77, 0x5f, 0x68, 0x61, 0x73, 0x68,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x08, 0x76, 0x69, 0x65, 0x77, 0x48, 0x61, 0x73, 0x68,
	0x12, 0x60, 0x0a, 0x0a, 0x72, 0x61, 0x6e, 0x64, 0x6f, 0x6d, 0x6e, 0x65, 0x73, 0x73, 0x18, 0x05,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x40, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x64, 0x69, 0x67, 0x69, 0x74,
	0x61, 0x6c, 0x61, 0x73, 0x73, 0x65, 0x74, 0x2e, 0x63, 0x61, 0x6e, 0x74, 0x6f, 0x6e, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x61, 0x72, 0x74, 0x69,
	0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x52, 0x61, 0x6e, 0x64, 0x6f, 0x6d, 0x6e, 0x65, 0x73, 0x73,
	0x4c, 0x6f, 0x6f, 0x6b, 0x75, 0x70, 0x52, 0x0a, 0x72, 0x61, 0x6e, 0x64, 0x6f, 0x6d, 0x6e, 0x65,
	0x73, 0x73, 0x12, 0x1b, 0x0a, 0x09, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x5f, 0x69, 0x64, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x49, 0x64, 0x12,
	0x4a, 0x0a, 0x09, 0x76, 0x69, 0x65, 0x77, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x2d, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x64, 0x69, 0x67, 0x69, 0x74, 0x61, 0x6c,
	0x61, 0x73, 0x73, 0x65, 0x74, 0x2e, 0x63, 0x61, 0x6e, 0x74, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x76, 0x30, 0x2e, 0x56, 0x69, 0x65, 0x77, 0x54, 0x79, 0x70,
	0x65, 0x52, 0x08, 0x76, 0x69, 0x65, 0x77, 0x54, 0x79, 0x70, 0x65, 0x22, 0x5f, 0x0a, 0x1b, 0x50,
	0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x52, 0x61, 0x6e, 0x64, 0x6f, 0x6d,
	0x6e, 0x65, 0x73, 0x73, 0x4c, 0x6f, 0x6f, 0x6b, 0x75, 0x70, 0x12, 0x1e, 0x0a, 0x0a, 0x72, 0x61,
	0x6e, 0x64, 0x6f, 0x6d, 0x6e, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0a,
	0x72, 0x61, 0x6e, 0x64, 0x6f, 0x6d, 0x6e, 0x65, 0x73, 0x73, 0x12, 0x20, 0x0a, 0x0b, 0x66, 0x69,
	0x6e, 0x67, 0x65, 0x72, 0x70, 0x72, 0x69, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0b, 0x66, 0x69, 0x6e, 0x67, 0x65, 0x72, 0x70, 0x72, 0x69, 0x6e, 0x74, 0x22, 0x1c, 0x0a, 0x16,
	0x56, 0x69, 0x65, 0x77, 0x50, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x4d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x3a, 0x02, 0x18, 0x01, 0x22, 0xa1, 0x01, 0x0a, 0x0f, 0x49,
	0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x65, 0x65, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x63,
	0x0a, 0x12, 0x66, 0x75, 0x6c, 0x6c, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x65, 0x65, 0x5f,
	0x74, 0x72, 0x65, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x35, 0x2e, 0x63, 0x6f, 0x6d,
	0x2e, 0x64, 0x69, 0x67, 0x69, 0x74, 0x61, 0x6c, 0x61, 0x73, 0x73, 0x65, 0x74, 0x2e, 0x63, 0x61,
	0x6e, 0x74, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x76, 0x31,
	0x2e, 0x46, 0x75, 0x6c, 0x6c, 0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x65, 0x65, 0x54, 0x72, 0x65,
	0x65, 0x52, 0x10, 0x66, 0x75, 0x6c, 0x6c, 0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x65, 0x65, 0x54,
	0x72, 0x65, 0x65, 0x12, 0x29, 0x0a, 0x10, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x5f,
	0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0f, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x22, 0x8e,
	0x01, 0x0a, 0x18, 0x4c, 0x69, 0x67, 0x68, 0x74, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x56, 0x69, 0x65, 0x77, 0x54, 0x72, 0x65, 0x65, 0x12, 0x4b, 0x0a, 0x04, 0x74,
	0x72, 0x65, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x37, 0x2e, 0x63, 0x6f, 0x6d, 0x2e,
	0x64, 0x69, 0x67, 0x69, 0x74, 0x61, 0x6c, 0x61, 0x73, 0x73, 0x65, 0x74, 0x2e, 0x63, 0x61, 0x6e,
	0x74, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x76, 0x31, 0x2e,
	0x47, 0x65, 0x6e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x72,
	0x65, 0x65, 0x52, 0x04, 0x74, 0x72, 0x65, 0x65, 0x12, 0x25, 0x0a, 0x0e, 0x73, 0x75, 0x62, 0x76,
	0x69, 0x65, 0x77, 0x5f, 0x68, 0x61, 0x73, 0x68, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0c,
	0x52, 0x0d, 0x73, 0x75, 0x62, 0x76, 0x69, 0x65, 0x77, 0x48, 0x61, 0x73, 0x68, 0x65, 0x73, 0x22,
	0x5f, 0x0a, 0x10, 0x46, 0x75, 0x6c, 0x6c, 0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x65, 0x65, 0x54,
	0x72, 0x65, 0x65, 0x12, 0x4b, 0x0a, 0x04, 0x74, 0x72, 0x65, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x37, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x64, 0x69, 0x67, 0x69, 0x74, 0x61, 0x6c, 0x61,
	0x73, 0x73, 0x65, 0x74, 0x2e, 0x63, 0x61, 0x6e, 0x74, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x6e, 0x54, 0x72, 0x61, 0x6e, 0x73,
	0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x72, 0x65, 0x65, 0x52, 0x04, 0x74, 0x72, 0x65, 0x65,
	0x22, 0xb3, 0x01, 0x0a, 0x0f, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x43, 0x6f, 0x6e, 0x74,
	0x72, 0x61, 0x63, 0x74, 0x12, 0x55, 0x0a, 0x08, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x39, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x64, 0x69, 0x67,
	0x69, 0x74, 0x61, 0x6c, 0x61, 0x73, 0x73, 0x65, 0x74, 0x2e, 0x63, 0x61, 0x6e, 0x74, 0x6f, 0x6e,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x65, 0x72,
	0x69, 0x61, 0x6c, 0x69, 0x7a, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63,
	0x74, 0x52, 0x08, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x12, 0x28, 0x0a, 0x10, 0x63,
	0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x65, 0x64, 0x5f, 0x69, 0x6e, 0x5f, 0x63, 0x6f, 0x72, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0e, 0x63, 0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x65, 0x64, 0x49,
	0x6e, 0x43, 0x6f, 0x72, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x64, 0x5f,
	0x62, 0x61, 0x63, 0x6b, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x72, 0x6f, 0x6c, 0x6c,
	0x65, 0x64, 0x42, 0x61, 0x63, 0x6b, 0x22, 0x82, 0x01, 0x0a, 0x0d, 0x49, 0x6e, 0x70, 0x75, 0x74,
	0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x12, 0x55, 0x0a, 0x08, 0x63, 0x6f, 0x6e, 0x74,
	0x72, 0x61, 0x63, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x39, 0x2e, 0x63, 0x6f, 0x6d,
	0x2e, 0x64, 0x69, 0x67, 0x69, 0x74, 0x61, 0x6c, 0x61, 0x73, 0x73, 0x65, 0x74, 0x2e, 0x63, 0x61,
	0x6e, 0x74, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x76, 0x31,
	0x2e, 0x53, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x69, 0x7a, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6e,
	0x74, 0x72, 0x61, 0x63, 0x74, 0x52, 0x08, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x12,
	0x1a, 0x0a, 0x08, 0x63, 0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x65, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x08, 0x63, 0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x65, 0x64, 0x22, 0xb0, 0x03, 0x0a, 0x11,
	0x53, 0x75, 0x62, 0x6d, 0x69, 0x74, 0x74, 0x65, 0x72, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74,
	0x61, 0x12, 0x3b, 0x0a, 0x04, 0x73, 0x61, 0x6c, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x27, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x64, 0x69, 0x67, 0x69, 0x74, 0x61, 0x6c, 0x61, 0x73, 0x73,
	0x65, 0x74, 0x2e, 0x63, 0x61, 0x6e, 0x74, 0x6f, 0x6e, 0x2e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x6f,
	0x2e, 0x76, 0x30, 0x2e, 0x53, 0x61, 0x6c, 0x74, 0x52, 0x04, 0x73, 0x61, 0x6c, 0x74, 0x12, 0x15,
	0x0a, 0x06, 0x61, 0x63, 0x74, 0x5f, 0x61, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x05,
	0x61, 0x63, 0x74, 0x41, 0x73, 0x12, 0x25, 0x0a, 0x0e, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x61,
	0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a,
	0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x09, 0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x49, 0x64, 0x12, 0x33, 0x0a, 0x15, 0x73,
	0x75, 0x62, 0x6d, 0x69, 0x74, 0x74, 0x65, 0x72, 0x5f, 0x70, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69,
	0x70, 0x61, 0x6e, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x14, 0x73, 0x75, 0x62, 0x6d,
	0x69, 0x74, 0x74, 0x65, 0x72, 0x50, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6e, 0x74,
	0x12, 0x23, 0x0a, 0x0d, 0x73, 0x75, 0x62, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x69,
	0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x73, 0x75, 0x62, 0x6d, 0x69, 0x73, 0x73,
	0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x5b, 0x0a, 0x0c, 0x64, 0x65, 0x64, 0x75, 0x70, 0x5f, 0x70,
	0x65, 0x72, 0x69, 0x6f, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x38, 0x2e, 0x63, 0x6f,
	0x6d, 0x2e, 0x64, 0x69, 0x67, 0x69, 0x74, 0x61, 0x6c, 0x61, 0x73, 0x73, 0x65, 0x74, 0x2e, 0x63,
	0x61, 0x6e, 0x74, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x76,
	0x30, 0x2e, 0x44, 0x65, 0x64, 0x75, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x50,
	0x65, 0x72, 0x69, 0x6f, 0x64, 0x52, 0x0b, 0x64, 0x65, 0x64, 0x75, 0x70, 0x50, 0x65, 0x72, 0x69,
	0x6f, 0x64, 0x12, 0x4a, 0x0a, 0x13, 0x6d, 0x61, 0x78, 0x5f, 0x73, 0x65, 0x71, 0x75, 0x65, 0x6e,
	0x63, 0x69, 0x6e, 0x67, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x11, 0x6d, 0x61, 0x78,
	0x53, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x69, 0x6e, 0x67, 0x54, 0x69, 0x6d, 0x65, 0x22, 0xd8,
	0x01, 0x0a, 0x0b, 0x52, 0x65, 0x73, 0x6f, 0x6c, 0x76, 0x65, 0x64, 0x4b, 0x65, 0x79, 0x12, 0x40,
	0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x63, 0x6f,
	0x6d, 0x2e, 0x64, 0x69, 0x67, 0x69, 0x74, 0x61, 0x6c, 0x61, 0x73, 0x73, 0x65, 0x74, 0x2e, 0x63,
	0x61, 0x6e, 0x74, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x76,
	0x31, 0x2e, 0x47, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x4b, 0x65, 0x79, 0x52, 0x03, 0x6b, 0x65, 0x79,
	0x12, 0x21, 0x0a, 0x0b, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x5f, 0x69, 0x64, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x0a, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63,
	0x74, 0x49, 0x64, 0x12, 0x56, 0x0a, 0x04, 0x66, 0x72, 0x65, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x40, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x64, 0x69, 0x67, 0x69, 0x74, 0x61, 0x6c, 0x61,
	0x73, 0x73, 0x65, 0x74, 0x2e, 0x63, 0x61, 0x6e, 0x74, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x76, 0x30, 0x2e, 0x56, 0x69, 0x65, 0x77, 0x50, 0x61, 0x72, 0x74,
	0x69, 0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x44, 0x61, 0x74, 0x61, 0x2e, 0x46, 0x72, 0x65, 0x65,
	0x4b, 0x65, 0x79, 0x48, 0x00, 0x52, 0x04, 0x66, 0x72, 0x65, 0x65, 0x42, 0x0c, 0x0a, 0x0a, 0x72,
	0x65, 0x73, 0x6f, 0x6c, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x54, 0x5a, 0x52, 0x67, 0x69, 0x74,
	0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x64, 0x69, 0x67, 0x69, 0x74, 0x61, 0x6c, 0x2d,
	0x61, 0x73, 0x73, 0x65, 0x74, 0x2f, 0x64, 0x61, 0x7a, 0x6c, 0x2d, 0x63, 0x6c, 0x69, 0x65, 0x6e,
	0x74, 0x2f, 0x76, 0x38, 0x2f, 0x67, 0x6f, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x63, 0x6f, 0x6d, 0x2f,
	0x64, 0x69, 0x67, 0x69, 0x74, 0x61, 0x6c, 0x61, 0x73, 0x73, 0x65, 0x74, 0x2f, 0x63, 0x61, 0x6e,
	0x74, 0x6f, 0x6e, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2f, 0x76, 0x31, 0x62,
	0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_com_digitalasset_canton_protocol_v1_participant_transaction_proto_rawDescOnce sync.Once
	file_com_digitalasset_canton_protocol_v1_participant_transaction_proto_rawDescData = file_com_digitalasset_canton_protocol_v1_participant_transaction_proto_rawDesc
)

func file_com_digitalasset_canton_protocol_v1_participant_transaction_proto_rawDescGZIP() []byte {
	file_com_digitalasset_canton_protocol_v1_participant_transaction_proto_rawDescOnce.Do(func() {
		file_com_digitalasset_canton_protocol_v1_participant_transaction_proto_rawDescData = protoimpl.X.CompressGZIP(file_com_digitalasset_canton_protocol_v1_participant_transaction_proto_rawDescData)
	})
	return file_com_digitalasset_canton_protocol_v1_participant_transaction_proto_rawDescData
}

var file_com_digitalasset_canton_protocol_v1_participant_transaction_proto_msgTypes = make([]protoimpl.MessageInfo, 17)
var file_com_digitalasset_canton_protocol_v1_participant_transaction_proto_goTypes = []any{
	(*ActionDescription)(nil),                                 // 0: com.digitalasset.canton.protocol.v1.ActionDescription
	(*ViewNode)(nil),                                          // 1: com.digitalasset.canton.protocol.v1.ViewNode
	(*ViewCommonData)(nil),                                    // 2: com.digitalasset.canton.protocol.v1.ViewCommonData
	(*Informee)(nil),                                          // 3: com.digitalasset.canton.protocol.v1.Informee
	(*EncryptedViewMessage)(nil),                              // 4: com.digitalasset.canton.protocol.v1.EncryptedViewMessage
	(*ParticipantRandomnessLookup)(nil),                       // 5: com.digitalasset.canton.protocol.v1.ParticipantRandomnessLookup
	(*ViewParticipantMessage)(nil),                            // 6: com.digitalasset.canton.protocol.v1.ViewParticipantMessage
	(*InformeeMessage)(nil),                                   // 7: com.digitalasset.canton.protocol.v1.InformeeMessage
	(*LightTransactionViewTree)(nil),                          // 8: com.digitalasset.canton.protocol.v1.LightTransactionViewTree
	(*FullInformeeTree)(nil),                                  // 9: com.digitalasset.canton.protocol.v1.FullInformeeTree
	(*CreatedContract)(nil),                                   // 10: com.digitalasset.canton.protocol.v1.CreatedContract
	(*InputContract)(nil),                                     // 11: com.digitalasset.canton.protocol.v1.InputContract
	(*SubmitterMetadata)(nil),                                 // 12: com.digitalasset.canton.protocol.v1.SubmitterMetadata
	(*ResolvedKey)(nil),                                       // 13: com.digitalasset.canton.protocol.v1.ResolvedKey
	(*ActionDescription_ExerciseActionDescription)(nil),       // 14: com.digitalasset.canton.protocol.v1.ActionDescription.ExerciseActionDescription
	(*ActionDescription_LookupByKeyActionDescription)(nil),    // 15: com.digitalasset.canton.protocol.v1.ActionDescription.LookupByKeyActionDescription
	(*ActionDescription_FetchActionDescription)(nil),          // 16: com.digitalasset.canton.protocol.v1.ActionDescription.FetchActionDescription
	(*v0.ActionDescription_CreateActionDescription)(nil),      // 17: com.digitalasset.canton.protocol.v0.ActionDescription.CreateActionDescription
	(*v0.ActionDescription_FetchActionDescription)(nil),       // 18: com.digitalasset.canton.protocol.v0.ActionDescription.FetchActionDescription
	(*v0.ActionDescription_LookupByKeyActionDescription)(nil), // 19: com.digitalasset.canton.protocol.v0.ActionDescription.LookupByKeyActionDescription
	(*BlindableNode)(nil),                                     // 20: com.digitalasset.canton.protocol.v1.BlindableNode
	(*MerkleSeq)(nil),                                         // 21: com.digitalasset.canton.protocol.v1.MerkleSeq
	(*v01.Salt)(nil),                                          // 22: com.digitalasset.canton.crypto.v0.Salt
	(v0.TrustLevel)(0),                                        // 23: com.digitalasset.canton.protocol.v0.TrustLevel
	(v01.SymmetricKeyScheme)(0),                               // 24: com.digitalasset.canton.crypto.v0.SymmetricKeyScheme
	(*v01.Signature)(nil),                                     // 25: com.digitalasset.canton.crypto.v0.Signature
	(v0.ViewType)(0),                                          // 26: com.digitalasset.canton.protocol.v0.ViewType
	(*GenTransactionTree)(nil),                                // 27: com.digitalasset.canton.protocol.v1.GenTransactionTree
	(*SerializableContract)(nil),                              // 28: com.digitalasset.canton.protocol.v1.SerializableContract
	(*v0.DeduplicationPeriod)(nil),                            // 29: com.digitalasset.canton.protocol.v0.DeduplicationPeriod
	(*timestamppb.Timestamp)(nil),                             // 30: google.protobuf.Timestamp
	(*GlobalKey)(nil),                                         // 31: com.digitalasset.canton.protocol.v1.GlobalKey
	(*v0.ViewParticipantData_FreeKey)(nil),                    // 32: com.digitalasset.canton.protocol.v0.ViewParticipantData.FreeKey
}
var file_com_digitalasset_canton_protocol_v1_participant_transaction_proto_depIdxs = []int32{
	17, // 0: com.digitalasset.canton.protocol.v1.ActionDescription.create:type_name -> com.digitalasset.canton.protocol.v0.ActionDescription.CreateActionDescription
	14, // 1: com.digitalasset.canton.protocol.v1.ActionDescription.exercise:type_name -> com.digitalasset.canton.protocol.v1.ActionDescription.ExerciseActionDescription
	18, // 2: com.digitalasset.canton.protocol.v1.ActionDescription.fetch:type_name -> com.digitalasset.canton.protocol.v0.ActionDescription.FetchActionDescription
	19, // 3: com.digitalasset.canton.protocol.v1.ActionDescription.lookup_by_key:type_name -> com.digitalasset.canton.protocol.v0.ActionDescription.LookupByKeyActionDescription
	20, // 4: com.digitalasset.canton.protocol.v1.ViewNode.view_common_data:type_name -> com.digitalasset.canton.protocol.v1.BlindableNode
	20, // 5: com.digitalasset.canton.protocol.v1.ViewNode.view_participant_data:type_name -> com.digitalasset.canton.protocol.v1.BlindableNode
	21, // 6: com.digitalasset.canton.protocol.v1.ViewNode.subviews:type_name -> com.digitalasset.canton.protocol.v1.MerkleSeq
	22, // 7: com.digitalasset.canton.protocol.v1.ViewCommonData.salt:type_name -> com.digitalasset.canton.crypto.v0.Salt
	3,  // 8: com.digitalasset.canton.protocol.v1.ViewCommonData.informees:type_name -> com.digitalasset.canton.protocol.v1.Informee
	23, // 9: com.digitalasset.canton.protocol.v1.Informee.required_trust_level:type_name -> com.digitalasset.canton.protocol.v0.TrustLevel
	24, // 10: com.digitalasset.canton.protocol.v1.EncryptedViewMessage.encryption_scheme:type_name -> com.digitalasset.canton.crypto.v0.SymmetricKeyScheme
	25, // 11: com.digitalasset.canton.protocol.v1.EncryptedViewMessage.submitter_participant_signature:type_name -> com.digitalasset.canton.crypto.v0.Signature
	5,  // 12: com.digitalasset.canton.protocol.v1.EncryptedViewMessage.randomness:type_name -> com.digitalasset.canton.protocol.v1.ParticipantRandomnessLookup
	26, // 13: com.digitalasset.canton.protocol.v1.EncryptedViewMessage.view_type:type_name -> com.digitalasset.canton.protocol.v0.ViewType
	9,  // 14: com.digitalasset.canton.protocol.v1.InformeeMessage.full_informee_tree:type_name -> com.digitalasset.canton.protocol.v1.FullInformeeTree
	27, // 15: com.digitalasset.canton.protocol.v1.LightTransactionViewTree.tree:type_name -> com.digitalasset.canton.protocol.v1.GenTransactionTree
	27, // 16: com.digitalasset.canton.protocol.v1.FullInformeeTree.tree:type_name -> com.digitalasset.canton.protocol.v1.GenTransactionTree
	28, // 17: com.digitalasset.canton.protocol.v1.CreatedContract.contract:type_name -> com.digitalasset.canton.protocol.v1.SerializableContract
	28, // 18: com.digitalasset.canton.protocol.v1.InputContract.contract:type_name -> com.digitalasset.canton.protocol.v1.SerializableContract
	22, // 19: com.digitalasset.canton.protocol.v1.SubmitterMetadata.salt:type_name -> com.digitalasset.canton.crypto.v0.Salt
	29, // 20: com.digitalasset.canton.protocol.v1.SubmitterMetadata.dedup_period:type_name -> com.digitalasset.canton.protocol.v0.DeduplicationPeriod
	30, // 21: com.digitalasset.canton.protocol.v1.SubmitterMetadata.max_sequencing_time:type_name -> google.protobuf.Timestamp
	31, // 22: com.digitalasset.canton.protocol.v1.ResolvedKey.key:type_name -> com.digitalasset.canton.protocol.v1.GlobalKey
	32, // 23: com.digitalasset.canton.protocol.v1.ResolvedKey.free:type_name -> com.digitalasset.canton.protocol.v0.ViewParticipantData.FreeKey
	31, // 24: com.digitalasset.canton.protocol.v1.ActionDescription.LookupByKeyActionDescription.key:type_name -> com.digitalasset.canton.protocol.v1.GlobalKey
	25, // [25:25] is the sub-list for method output_type
	25, // [25:25] is the sub-list for method input_type
	25, // [25:25] is the sub-list for extension type_name
	25, // [25:25] is the sub-list for extension extendee
	0,  // [0:25] is the sub-list for field type_name
}

func init() { file_com_digitalasset_canton_protocol_v1_participant_transaction_proto_init() }
func file_com_digitalasset_canton_protocol_v1_participant_transaction_proto_init() {
	if File_com_digitalasset_canton_protocol_v1_participant_transaction_proto != nil {
		return
	}
	file_com_digitalasset_canton_protocol_v1_common_proto_init()
	file_com_digitalasset_canton_protocol_v1_merkle_proto_init()
	file_com_digitalasset_canton_protocol_v1_participant_transaction_proto_msgTypes[0].OneofWrappers = []any{
		(*ActionDescription_Create)(nil),
		(*ActionDescription_Exercise)(nil),
		(*ActionDescription_Fetch)(nil),
		(*ActionDescription_LookupByKey)(nil),
	}
	file_com_digitalasset_canton_protocol_v1_participant_transaction_proto_msgTypes[13].OneofWrappers = []any{
		(*ResolvedKey_ContractId)(nil),
		(*ResolvedKey_Free)(nil),
	}
	file_com_digitalasset_canton_protocol_v1_participant_transaction_proto_msgTypes[14].OneofWrappers = []any{}
	file_com_digitalasset_canton_protocol_v1_participant_transaction_proto_msgTypes[16].OneofWrappers = []any{}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_com_digitalasset_canton_protocol_v1_participant_transaction_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   17,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_com_digitalasset_canton_protocol_v1_participant_transaction_proto_goTypes,
		DependencyIndexes: file_com_digitalasset_canton_protocol_v1_participant_transaction_proto_depIdxs,
		MessageInfos:      file_com_digitalasset_canton_protocol_v1_participant_transaction_proto_msgTypes,
	}.Build()
	File_com_digitalasset_canton_protocol_v1_participant_transaction_proto = out.File
	file_com_digitalasset_canton_protocol_v1_participant_transaction_proto_rawDesc = nil
	file_com_digitalasset_canton_protocol_v1_participant_transaction_proto_goTypes = nil
	file_com_digitalasset_canton_protocol_v1_participant_transaction_proto_depIdxs = nil
}
