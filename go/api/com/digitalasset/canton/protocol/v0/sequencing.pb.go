// Copyright (c) 2017-2025 Digital Asset (Switzerland) GmbH and/or its affiliates. All rights reserved.
// SPDX-License-Identifier: Apache-2.0
// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.35.2
// 	protoc        v5.27.2
// source: com/digitalasset/canton/protocol/v0/sequencing.proto

package v0

import (
	v01 "github.com/digital-asset/dazl-client/v8/go/api/com/digitalasset/canton/crypto/v0"
	v0 "github.com/digital-asset/dazl-client/v8/go/api/com/digitalasset/canton/v0"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	durationpb "google.golang.org/protobuf/types/known/durationpb"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	wrapperspb "google.golang.org/protobuf/types/known/wrapperspb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type CompressedBatch_CompressionAlgorithm int32

const (
	CompressedBatch_None_ CompressedBatch_CompressionAlgorithm = 0
	CompressedBatch_Gzip  CompressedBatch_CompressionAlgorithm = 1
)

// Enum value maps for CompressedBatch_CompressionAlgorithm.
var (
	CompressedBatch_CompressionAlgorithm_name = map[int32]string{
		0: "None_",
		1: "Gzip",
	}
	CompressedBatch_CompressionAlgorithm_value = map[string]int32{
		"None_": 0,
		"Gzip":  1,
	}
)

func (x CompressedBatch_CompressionAlgorithm) Enum() *CompressedBatch_CompressionAlgorithm {
	p := new(CompressedBatch_CompressionAlgorithm)
	*p = x
	return p
}

func (x CompressedBatch_CompressionAlgorithm) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CompressedBatch_CompressionAlgorithm) Descriptor() protoreflect.EnumDescriptor {
	return file_com_digitalasset_canton_protocol_v0_sequencing_proto_enumTypes[0].Descriptor()
}

func (CompressedBatch_CompressionAlgorithm) Type() protoreflect.EnumType {
	return &file_com_digitalasset_canton_protocol_v0_sequencing_proto_enumTypes[0]
}

func (x CompressedBatch_CompressionAlgorithm) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use CompressedBatch_CompressionAlgorithm.Descriptor instead.
func (CompressedBatch_CompressionAlgorithm) EnumDescriptor() ([]byte, []int) {
	return file_com_digitalasset_canton_protocol_v0_sequencing_proto_rawDescGZIP(), []int{5, 0}
}

type SequencedEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Counter            int64                   `protobuf:"varint,1,opt,name=counter,proto3" json:"counter,omitempty"`
	Timestamp          *timestamppb.Timestamp  `protobuf:"bytes,2,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	DomainId           string                  `protobuf:"bytes,3,opt,name=domain_id,json=domainId,proto3" json:"domain_id,omitempty"`
	MessageId          *wrapperspb.StringValue `protobuf:"bytes,4,opt,name=message_id,json=messageId,proto3" json:"message_id,omitempty"`
	Batch              *CompressedBatch        `protobuf:"bytes,5,opt,name=batch,proto3" json:"batch,omitempty"`
	DeliverErrorReason *DeliverErrorReason     `protobuf:"bytes,6,opt,name=deliver_error_reason,json=deliverErrorReason,proto3" json:"deliver_error_reason,omitempty"`
}

func (x *SequencedEvent) Reset() {
	*x = SequencedEvent{}
	mi := &file_com_digitalasset_canton_protocol_v0_sequencing_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SequencedEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SequencedEvent) ProtoMessage() {}

func (x *SequencedEvent) ProtoReflect() protoreflect.Message {
	mi := &file_com_digitalasset_canton_protocol_v0_sequencing_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SequencedEvent.ProtoReflect.Descriptor instead.
func (*SequencedEvent) Descriptor() ([]byte, []int) {
	return file_com_digitalasset_canton_protocol_v0_sequencing_proto_rawDescGZIP(), []int{0}
}

func (x *SequencedEvent) GetCounter() int64 {
	if x != nil {
		return x.Counter
	}
	return 0
}

func (x *SequencedEvent) GetTimestamp() *timestamppb.Timestamp {
	if x != nil {
		return x.Timestamp
	}
	return nil
}

func (x *SequencedEvent) GetDomainId() string {
	if x != nil {
		return x.DomainId
	}
	return ""
}

func (x *SequencedEvent) GetMessageId() *wrapperspb.StringValue {
	if x != nil {
		return x.MessageId
	}
	return nil
}

func (x *SequencedEvent) GetBatch() *CompressedBatch {
	if x != nil {
		return x.Batch
	}
	return nil
}

func (x *SequencedEvent) GetDeliverErrorReason() *DeliverErrorReason {
	if x != nil {
		return x.DeliverErrorReason
	}
	return nil
}

type PossiblyIgnoredSequencedEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Counter      int64                  `protobuf:"varint,1,opt,name=counter,proto3" json:"counter,omitempty"`
	Timestamp    *timestamppb.Timestamp `protobuf:"bytes,2,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	TraceContext *v0.TraceContext       `protobuf:"bytes,3,opt,name=trace_context,json=traceContext,proto3" json:"trace_context,omitempty"`
	IsIgnored    bool                   `protobuf:"varint,4,opt,name=is_ignored,json=isIgnored,proto3" json:"is_ignored,omitempty"`
	Underlying   *SignedContent         `protobuf:"bytes,5,opt,name=underlying,proto3" json:"underlying,omitempty"`
}

func (x *PossiblyIgnoredSequencedEvent) Reset() {
	*x = PossiblyIgnoredSequencedEvent{}
	mi := &file_com_digitalasset_canton_protocol_v0_sequencing_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PossiblyIgnoredSequencedEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PossiblyIgnoredSequencedEvent) ProtoMessage() {}

func (x *PossiblyIgnoredSequencedEvent) ProtoReflect() protoreflect.Message {
	mi := &file_com_digitalasset_canton_protocol_v0_sequencing_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PossiblyIgnoredSequencedEvent.ProtoReflect.Descriptor instead.
func (*PossiblyIgnoredSequencedEvent) Descriptor() ([]byte, []int) {
	return file_com_digitalasset_canton_protocol_v0_sequencing_proto_rawDescGZIP(), []int{1}
}

func (x *PossiblyIgnoredSequencedEvent) GetCounter() int64 {
	if x != nil {
		return x.Counter
	}
	return 0
}

func (x *PossiblyIgnoredSequencedEvent) GetTimestamp() *timestamppb.Timestamp {
	if x != nil {
		return x.Timestamp
	}
	return nil
}

func (x *PossiblyIgnoredSequencedEvent) GetTraceContext() *v0.TraceContext {
	if x != nil {
		return x.TraceContext
	}
	return nil
}

func (x *PossiblyIgnoredSequencedEvent) GetIsIgnored() bool {
	if x != nil {
		return x.IsIgnored
	}
	return false
}

func (x *PossiblyIgnoredSequencedEvent) GetUnderlying() *SignedContent {
	if x != nil {
		return x.Underlying
	}
	return nil
}

type RecipientsTree struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Recipients []string          `protobuf:"bytes,1,rep,name=recipients,proto3" json:"recipients,omitempty"`
	Children   []*RecipientsTree `protobuf:"bytes,2,rep,name=children,proto3" json:"children,omitempty"`
}

func (x *RecipientsTree) Reset() {
	*x = RecipientsTree{}
	mi := &file_com_digitalasset_canton_protocol_v0_sequencing_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RecipientsTree) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RecipientsTree) ProtoMessage() {}

func (x *RecipientsTree) ProtoReflect() protoreflect.Message {
	mi := &file_com_digitalasset_canton_protocol_v0_sequencing_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RecipientsTree.ProtoReflect.Descriptor instead.
func (*RecipientsTree) Descriptor() ([]byte, []int) {
	return file_com_digitalasset_canton_protocol_v0_sequencing_proto_rawDescGZIP(), []int{2}
}

func (x *RecipientsTree) GetRecipients() []string {
	if x != nil {
		return x.Recipients
	}
	return nil
}

func (x *RecipientsTree) GetChildren() []*RecipientsTree {
	if x != nil {
		return x.Children
	}
	return nil
}

type Recipients struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RecipientsTree []*RecipientsTree `protobuf:"bytes,1,rep,name=recipients_tree,json=recipientsTree,proto3" json:"recipients_tree,omitempty"`
}

func (x *Recipients) Reset() {
	*x = Recipients{}
	mi := &file_com_digitalasset_canton_protocol_v0_sequencing_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Recipients) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Recipients) ProtoMessage() {}

func (x *Recipients) ProtoReflect() protoreflect.Message {
	mi := &file_com_digitalasset_canton_protocol_v0_sequencing_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Recipients.ProtoReflect.Descriptor instead.
func (*Recipients) Descriptor() ([]byte, []int) {
	return file_com_digitalasset_canton_protocol_v0_sequencing_proto_rawDescGZIP(), []int{3}
}

func (x *Recipients) GetRecipientsTree() []*RecipientsTree {
	if x != nil {
		return x.RecipientsTree
	}
	return nil
}

type Envelope struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Content    []byte      `protobuf:"bytes,1,opt,name=content,proto3" json:"content,omitempty"`
	Recipients *Recipients `protobuf:"bytes,2,opt,name=recipients,proto3" json:"recipients,omitempty"`
}

func (x *Envelope) Reset() {
	*x = Envelope{}
	mi := &file_com_digitalasset_canton_protocol_v0_sequencing_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Envelope) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Envelope) ProtoMessage() {}

func (x *Envelope) ProtoReflect() protoreflect.Message {
	mi := &file_com_digitalasset_canton_protocol_v0_sequencing_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Envelope.ProtoReflect.Descriptor instead.
func (*Envelope) Descriptor() ([]byte, []int) {
	return file_com_digitalasset_canton_protocol_v0_sequencing_proto_rawDescGZIP(), []int{4}
}

func (x *Envelope) GetContent() []byte {
	if x != nil {
		return x.Content
	}
	return nil
}

func (x *Envelope) GetRecipients() *Recipients {
	if x != nil {
		return x.Recipients
	}
	return nil
}

type CompressedBatch struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Algorithm       CompressedBatch_CompressionAlgorithm `protobuf:"varint,1,opt,name=algorithm,proto3,enum=com.digitalasset.canton.protocol.v0.CompressedBatch_CompressionAlgorithm" json:"algorithm,omitempty"`
	CompressedBatch []byte                               `protobuf:"bytes,2,opt,name=compressed_batch,json=compressedBatch,proto3" json:"compressed_batch,omitempty"`
}

func (x *CompressedBatch) Reset() {
	*x = CompressedBatch{}
	mi := &file_com_digitalasset_canton_protocol_v0_sequencing_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CompressedBatch) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CompressedBatch) ProtoMessage() {}

func (x *CompressedBatch) ProtoReflect() protoreflect.Message {
	mi := &file_com_digitalasset_canton_protocol_v0_sequencing_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CompressedBatch.ProtoReflect.Descriptor instead.
func (*CompressedBatch) Descriptor() ([]byte, []int) {
	return file_com_digitalasset_canton_protocol_v0_sequencing_proto_rawDescGZIP(), []int{5}
}

func (x *CompressedBatch) GetAlgorithm() CompressedBatch_CompressionAlgorithm {
	if x != nil {
		return x.Algorithm
	}
	return CompressedBatch_None_
}

func (x *CompressedBatch) GetCompressedBatch() []byte {
	if x != nil {
		return x.CompressedBatch
	}
	return nil
}

type Batch struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Envelopes []*Envelope `protobuf:"bytes,1,rep,name=envelopes,proto3" json:"envelopes,omitempty"`
}

func (x *Batch) Reset() {
	*x = Batch{}
	mi := &file_com_digitalasset_canton_protocol_v0_sequencing_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Batch) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Batch) ProtoMessage() {}

func (x *Batch) ProtoReflect() protoreflect.Message {
	mi := &file_com_digitalasset_canton_protocol_v0_sequencing_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Batch.ProtoReflect.Descriptor instead.
func (*Batch) Descriptor() ([]byte, []int) {
	return file_com_digitalasset_canton_protocol_v0_sequencing_proto_rawDescGZIP(), []int{6}
}

func (x *Batch) GetEnvelopes() []*Envelope {
	if x != nil {
		return x.Envelopes
	}
	return nil
}

type SignedContent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Content               *wrapperspb.BytesValue `protobuf:"bytes,1,opt,name=content,proto3" json:"content,omitempty"`
	Signatures            *v01.Signature         `protobuf:"bytes,2,opt,name=signatures,proto3" json:"signatures,omitempty"`
	TimestampOfSigningKey *timestamppb.Timestamp `protobuf:"bytes,3,opt,name=timestamp_of_signing_key,json=timestampOfSigningKey,proto3" json:"timestamp_of_signing_key,omitempty"`
}

func (x *SignedContent) Reset() {
	*x = SignedContent{}
	mi := &file_com_digitalasset_canton_protocol_v0_sequencing_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SignedContent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SignedContent) ProtoMessage() {}

func (x *SignedContent) ProtoReflect() protoreflect.Message {
	mi := &file_com_digitalasset_canton_protocol_v0_sequencing_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SignedContent.ProtoReflect.Descriptor instead.
func (*SignedContent) Descriptor() ([]byte, []int) {
	return file_com_digitalasset_canton_protocol_v0_sequencing_proto_rawDescGZIP(), []int{7}
}

func (x *SignedContent) GetContent() *wrapperspb.BytesValue {
	if x != nil {
		return x.Content
	}
	return nil
}

func (x *SignedContent) GetSignatures() *v01.Signature {
	if x != nil {
		return x.Signatures
	}
	return nil
}

func (x *SignedContent) GetTimestampOfSigningKey() *timestamppb.Timestamp {
	if x != nil {
		return x.TimestampOfSigningKey
	}
	return nil
}

type DeliverErrorReason struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Reason:
	//
	//	*DeliverErrorReason_BatchInvalid
	//	*DeliverErrorReason_BatchRefused
	Reason isDeliverErrorReason_Reason `protobuf_oneof:"reason"`
}

func (x *DeliverErrorReason) Reset() {
	*x = DeliverErrorReason{}
	mi := &file_com_digitalasset_canton_protocol_v0_sequencing_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DeliverErrorReason) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeliverErrorReason) ProtoMessage() {}

func (x *DeliverErrorReason) ProtoReflect() protoreflect.Message {
	mi := &file_com_digitalasset_canton_protocol_v0_sequencing_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeliverErrorReason.ProtoReflect.Descriptor instead.
func (*DeliverErrorReason) Descriptor() ([]byte, []int) {
	return file_com_digitalasset_canton_protocol_v0_sequencing_proto_rawDescGZIP(), []int{8}
}

func (m *DeliverErrorReason) GetReason() isDeliverErrorReason_Reason {
	if m != nil {
		return m.Reason
	}
	return nil
}

func (x *DeliverErrorReason) GetBatchInvalid() string {
	if x, ok := x.GetReason().(*DeliverErrorReason_BatchInvalid); ok {
		return x.BatchInvalid
	}
	return ""
}

func (x *DeliverErrorReason) GetBatchRefused() string {
	if x, ok := x.GetReason().(*DeliverErrorReason_BatchRefused); ok {
		return x.BatchRefused
	}
	return ""
}

type isDeliverErrorReason_Reason interface {
	isDeliverErrorReason_Reason()
}

type DeliverErrorReason_BatchInvalid struct {
	BatchInvalid string `protobuf:"bytes,1,opt,name=batch_invalid,json=batchInvalid,proto3,oneof"`
}

type DeliverErrorReason_BatchRefused struct {
	BatchRefused string `protobuf:"bytes,2,opt,name=batch_refused,json=batchRefused,proto3,oneof"`
}

func (*DeliverErrorReason_BatchInvalid) isDeliverErrorReason_Reason() {}

func (*DeliverErrorReason_BatchRefused) isDeliverErrorReason_Reason() {}

type ServiceAgreement struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id        string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	LegalText string `protobuf:"bytes,2,opt,name=legal_text,json=legalText,proto3" json:"legal_text,omitempty"`
}

func (x *ServiceAgreement) Reset() {
	*x = ServiceAgreement{}
	mi := &file_com_digitalasset_canton_protocol_v0_sequencing_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ServiceAgreement) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ServiceAgreement) ProtoMessage() {}

func (x *ServiceAgreement) ProtoReflect() protoreflect.Message {
	mi := &file_com_digitalasset_canton_protocol_v0_sequencing_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ServiceAgreement.ProtoReflect.Descriptor instead.
func (*ServiceAgreement) Descriptor() ([]byte, []int) {
	return file_com_digitalasset_canton_protocol_v0_sequencing_proto_rawDescGZIP(), []int{9}
}

func (x *ServiceAgreement) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *ServiceAgreement) GetLegalText() string {
	if x != nil {
		return x.LegalText
	}
	return ""
}

type StaticDomainParameters struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ReconciliationInterval       *durationpb.Duration      `protobuf:"bytes,1,opt,name=reconciliation_interval,json=reconciliationInterval,proto3" json:"reconciliation_interval,omitempty"`
	MaxRatePerParticipant        uint32                    `protobuf:"varint,2,opt,name=max_rate_per_participant,json=maxRatePerParticipant,proto3" json:"max_rate_per_participant,omitempty"`
	MaxInboundMessageSize        uint32                    `protobuf:"varint,3,opt,name=max_inbound_message_size,json=maxInboundMessageSize,proto3" json:"max_inbound_message_size,omitempty"`
	UniqueContractKeys           bool                      `protobuf:"varint,4,opt,name=unique_contract_keys,json=uniqueContractKeys,proto3" json:"unique_contract_keys,omitempty"`
	RequiredSigningKeySchemes    []v01.SigningKeyScheme    `protobuf:"varint,5,rep,packed,name=required_signing_key_schemes,json=requiredSigningKeySchemes,proto3,enum=com.digitalasset.canton.crypto.v0.SigningKeyScheme" json:"required_signing_key_schemes,omitempty"`
	RequiredEncryptionKeySchemes []v01.EncryptionKeyScheme `protobuf:"varint,6,rep,packed,name=required_encryption_key_schemes,json=requiredEncryptionKeySchemes,proto3,enum=com.digitalasset.canton.crypto.v0.EncryptionKeyScheme" json:"required_encryption_key_schemes,omitempty"`
	RequiredSymmetricKeySchemes  []v01.SymmetricKeyScheme  `protobuf:"varint,7,rep,packed,name=required_symmetric_key_schemes,json=requiredSymmetricKeySchemes,proto3,enum=com.digitalasset.canton.crypto.v0.SymmetricKeyScheme" json:"required_symmetric_key_schemes,omitempty"`
	RequiredHashAlgorithms       []v01.HashAlgorithm       `protobuf:"varint,8,rep,packed,name=required_hash_algorithms,json=requiredHashAlgorithms,proto3,enum=com.digitalasset.canton.crypto.v0.HashAlgorithm" json:"required_hash_algorithms,omitempty"`
	RequiredCryptoKeyFormats     []v01.CryptoKeyFormat     `protobuf:"varint,9,rep,packed,name=required_crypto_key_formats,json=requiredCryptoKeyFormats,proto3,enum=com.digitalasset.canton.crypto.v0.CryptoKeyFormat" json:"required_crypto_key_formats,omitempty"`
	ProtocolVersion              string                    `protobuf:"bytes,10,opt,name=protocol_version,json=protocolVersion,proto3" json:"protocol_version,omitempty"`
}

func (x *StaticDomainParameters) Reset() {
	*x = StaticDomainParameters{}
	mi := &file_com_digitalasset_canton_protocol_v0_sequencing_proto_msgTypes[10]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *StaticDomainParameters) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StaticDomainParameters) ProtoMessage() {}

func (x *StaticDomainParameters) ProtoReflect() protoreflect.Message {
	mi := &file_com_digitalasset_canton_protocol_v0_sequencing_proto_msgTypes[10]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StaticDomainParameters.ProtoReflect.Descriptor instead.
func (*StaticDomainParameters) Descriptor() ([]byte, []int) {
	return file_com_digitalasset_canton_protocol_v0_sequencing_proto_rawDescGZIP(), []int{10}
}

func (x *StaticDomainParameters) GetReconciliationInterval() *durationpb.Duration {
	if x != nil {
		return x.ReconciliationInterval
	}
	return nil
}

func (x *StaticDomainParameters) GetMaxRatePerParticipant() uint32 {
	if x != nil {
		return x.MaxRatePerParticipant
	}
	return 0
}

func (x *StaticDomainParameters) GetMaxInboundMessageSize() uint32 {
	if x != nil {
		return x.MaxInboundMessageSize
	}
	return 0
}

func (x *StaticDomainParameters) GetUniqueContractKeys() bool {
	if x != nil {
		return x.UniqueContractKeys
	}
	return false
}

func (x *StaticDomainParameters) GetRequiredSigningKeySchemes() []v01.SigningKeyScheme {
	if x != nil {
		return x.RequiredSigningKeySchemes
	}
	return nil
}

func (x *StaticDomainParameters) GetRequiredEncryptionKeySchemes() []v01.EncryptionKeyScheme {
	if x != nil {
		return x.RequiredEncryptionKeySchemes
	}
	return nil
}

func (x *StaticDomainParameters) GetRequiredSymmetricKeySchemes() []v01.SymmetricKeyScheme {
	if x != nil {
		return x.RequiredSymmetricKeySchemes
	}
	return nil
}

func (x *StaticDomainParameters) GetRequiredHashAlgorithms() []v01.HashAlgorithm {
	if x != nil {
		return x.RequiredHashAlgorithms
	}
	return nil
}

func (x *StaticDomainParameters) GetRequiredCryptoKeyFormats() []v01.CryptoKeyFormat {
	if x != nil {
		return x.RequiredCryptoKeyFormats
	}
	return nil
}

func (x *StaticDomainParameters) GetProtocolVersion() string {
	if x != nil {
		return x.ProtocolVersion
	}
	return ""
}

type DynamicDomainParameters struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ParticipantResponseTimeout    *durationpb.Duration `protobuf:"bytes,1,opt,name=participant_response_timeout,json=participantResponseTimeout,proto3" json:"participant_response_timeout,omitempty"`
	MediatorReactionTimeout       *durationpb.Duration `protobuf:"bytes,2,opt,name=mediator_reaction_timeout,json=mediatorReactionTimeout,proto3" json:"mediator_reaction_timeout,omitempty"`
	TransferExclusivityTimeout    *durationpb.Duration `protobuf:"bytes,3,opt,name=transfer_exclusivity_timeout,json=transferExclusivityTimeout,proto3" json:"transfer_exclusivity_timeout,omitempty"`
	TopologyChangeDelay           *durationpb.Duration `protobuf:"bytes,4,opt,name=topology_change_delay,json=topologyChangeDelay,proto3" json:"topology_change_delay,omitempty"`
	LedgerTimeRecordTimeTolerance *durationpb.Duration `protobuf:"bytes,5,opt,name=ledger_time_record_time_tolerance,json=ledgerTimeRecordTimeTolerance,proto3" json:"ledger_time_record_time_tolerance,omitempty"`
}

func (x *DynamicDomainParameters) Reset() {
	*x = DynamicDomainParameters{}
	mi := &file_com_digitalasset_canton_protocol_v0_sequencing_proto_msgTypes[11]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DynamicDomainParameters) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DynamicDomainParameters) ProtoMessage() {}

func (x *DynamicDomainParameters) ProtoReflect() protoreflect.Message {
	mi := &file_com_digitalasset_canton_protocol_v0_sequencing_proto_msgTypes[11]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DynamicDomainParameters.ProtoReflect.Descriptor instead.
func (*DynamicDomainParameters) Descriptor() ([]byte, []int) {
	return file_com_digitalasset_canton_protocol_v0_sequencing_proto_rawDescGZIP(), []int{11}
}

func (x *DynamicDomainParameters) GetParticipantResponseTimeout() *durationpb.Duration {
	if x != nil {
		return x.ParticipantResponseTimeout
	}
	return nil
}

func (x *DynamicDomainParameters) GetMediatorReactionTimeout() *durationpb.Duration {
	if x != nil {
		return x.MediatorReactionTimeout
	}
	return nil
}

func (x *DynamicDomainParameters) GetTransferExclusivityTimeout() *durationpb.Duration {
	if x != nil {
		return x.TransferExclusivityTimeout
	}
	return nil
}

func (x *DynamicDomainParameters) GetTopologyChangeDelay() *durationpb.Duration {
	if x != nil {
		return x.TopologyChangeDelay
	}
	return nil
}

func (x *DynamicDomainParameters) GetLedgerTimeRecordTimeTolerance() *durationpb.Duration {
	if x != nil {
		return x.LedgerTimeRecordTimeTolerance
	}
	return nil
}

type Handshake struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *Handshake) Reset() {
	*x = Handshake{}
	mi := &file_com_digitalasset_canton_protocol_v0_sequencing_proto_msgTypes[12]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Handshake) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Handshake) ProtoMessage() {}

func (x *Handshake) ProtoReflect() protoreflect.Message {
	mi := &file_com_digitalasset_canton_protocol_v0_sequencing_proto_msgTypes[12]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Handshake.ProtoReflect.Descriptor instead.
func (*Handshake) Descriptor() ([]byte, []int) {
	return file_com_digitalasset_canton_protocol_v0_sequencing_proto_rawDescGZIP(), []int{12}
}

type SubmissionRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Sender                string                 `protobuf:"bytes,1,opt,name=sender,proto3" json:"sender,omitempty"`
	MessageId             string                 `protobuf:"bytes,2,opt,name=message_id,json=messageId,proto3" json:"message_id,omitempty"`
	IsRequest             bool                   `protobuf:"varint,3,opt,name=is_request,json=isRequest,proto3" json:"is_request,omitempty"`
	Batch                 *CompressedBatch       `protobuf:"bytes,4,opt,name=batch,proto3" json:"batch,omitempty"`
	MaxSequencingTime     *timestamppb.Timestamp `protobuf:"bytes,5,opt,name=max_sequencing_time,json=maxSequencingTime,proto3" json:"max_sequencing_time,omitempty"`
	TimestampOfSigningKey *timestamppb.Timestamp `protobuf:"bytes,6,opt,name=timestamp_of_signing_key,json=timestampOfSigningKey,proto3" json:"timestamp_of_signing_key,omitempty"`
}

func (x *SubmissionRequest) Reset() {
	*x = SubmissionRequest{}
	mi := &file_com_digitalasset_canton_protocol_v0_sequencing_proto_msgTypes[13]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SubmissionRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SubmissionRequest) ProtoMessage() {}

func (x *SubmissionRequest) ProtoReflect() protoreflect.Message {
	mi := &file_com_digitalasset_canton_protocol_v0_sequencing_proto_msgTypes[13]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SubmissionRequest.ProtoReflect.Descriptor instead.
func (*SubmissionRequest) Descriptor() ([]byte, []int) {
	return file_com_digitalasset_canton_protocol_v0_sequencing_proto_rawDescGZIP(), []int{13}
}

func (x *SubmissionRequest) GetSender() string {
	if x != nil {
		return x.Sender
	}
	return ""
}

func (x *SubmissionRequest) GetMessageId() string {
	if x != nil {
		return x.MessageId
	}
	return ""
}

func (x *SubmissionRequest) GetIsRequest() bool {
	if x != nil {
		return x.IsRequest
	}
	return false
}

func (x *SubmissionRequest) GetBatch() *CompressedBatch {
	if x != nil {
		return x.Batch
	}
	return nil
}

func (x *SubmissionRequest) GetMaxSequencingTime() *timestamppb.Timestamp {
	if x != nil {
		return x.MaxSequencingTime
	}
	return nil
}

func (x *SubmissionRequest) GetTimestampOfSigningKey() *timestamppb.Timestamp {
	if x != nil {
		return x.TimestampOfSigningKey
	}
	return nil
}

type Handshake_Request struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ClientProtocolVersions []string                `protobuf:"bytes,1,rep,name=client_protocol_versions,json=clientProtocolVersions,proto3" json:"client_protocol_versions,omitempty"`
	MinimumProtocolVersion *wrapperspb.StringValue `protobuf:"bytes,2,opt,name=minimum_protocol_version,json=minimumProtocolVersion,proto3" json:"minimum_protocol_version,omitempty"`
}

func (x *Handshake_Request) Reset() {
	*x = Handshake_Request{}
	mi := &file_com_digitalasset_canton_protocol_v0_sequencing_proto_msgTypes[14]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Handshake_Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Handshake_Request) ProtoMessage() {}

func (x *Handshake_Request) ProtoReflect() protoreflect.Message {
	mi := &file_com_digitalasset_canton_protocol_v0_sequencing_proto_msgTypes[14]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Handshake_Request.ProtoReflect.Descriptor instead.
func (*Handshake_Request) Descriptor() ([]byte, []int) {
	return file_com_digitalasset_canton_protocol_v0_sequencing_proto_rawDescGZIP(), []int{12, 0}
}

func (x *Handshake_Request) GetClientProtocolVersions() []string {
	if x != nil {
		return x.ClientProtocolVersions
	}
	return nil
}

func (x *Handshake_Request) GetMinimumProtocolVersion() *wrapperspb.StringValue {
	if x != nil {
		return x.MinimumProtocolVersion
	}
	return nil
}

type Handshake_Response struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ServerProtocolVersion string `protobuf:"bytes,1,opt,name=server_protocol_version,json=serverProtocolVersion,proto3" json:"server_protocol_version,omitempty"`
	// Types that are assignable to Value:
	//
	//	*Handshake_Response_Success
	//	*Handshake_Response_Failure
	Value isHandshake_Response_Value `protobuf_oneof:"value"`
}

func (x *Handshake_Response) Reset() {
	*x = Handshake_Response{}
	mi := &file_com_digitalasset_canton_protocol_v0_sequencing_proto_msgTypes[15]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Handshake_Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Handshake_Response) ProtoMessage() {}

func (x *Handshake_Response) ProtoReflect() protoreflect.Message {
	mi := &file_com_digitalasset_canton_protocol_v0_sequencing_proto_msgTypes[15]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Handshake_Response.ProtoReflect.Descriptor instead.
func (*Handshake_Response) Descriptor() ([]byte, []int) {
	return file_com_digitalasset_canton_protocol_v0_sequencing_proto_rawDescGZIP(), []int{12, 1}
}

func (x *Handshake_Response) GetServerProtocolVersion() string {
	if x != nil {
		return x.ServerProtocolVersion
	}
	return ""
}

func (m *Handshake_Response) GetValue() isHandshake_Response_Value {
	if m != nil {
		return m.Value
	}
	return nil
}

func (x *Handshake_Response) GetSuccess() *Handshake_Success {
	if x, ok := x.GetValue().(*Handshake_Response_Success); ok {
		return x.Success
	}
	return nil
}

func (x *Handshake_Response) GetFailure() *Handshake_Failure {
	if x, ok := x.GetValue().(*Handshake_Response_Failure); ok {
		return x.Failure
	}
	return nil
}

type isHandshake_Response_Value interface {
	isHandshake_Response_Value()
}

type Handshake_Response_Success struct {
	Success *Handshake_Success `protobuf:"bytes,2,opt,name=success,proto3,oneof"`
}

type Handshake_Response_Failure struct {
	Failure *Handshake_Failure `protobuf:"bytes,3,opt,name=failure,proto3,oneof"`
}

func (*Handshake_Response_Success) isHandshake_Response_Value() {}

func (*Handshake_Response_Failure) isHandshake_Response_Value() {}

type Handshake_Success struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *Handshake_Success) Reset() {
	*x = Handshake_Success{}
	mi := &file_com_digitalasset_canton_protocol_v0_sequencing_proto_msgTypes[16]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Handshake_Success) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Handshake_Success) ProtoMessage() {}

func (x *Handshake_Success) ProtoReflect() protoreflect.Message {
	mi := &file_com_digitalasset_canton_protocol_v0_sequencing_proto_msgTypes[16]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Handshake_Success.ProtoReflect.Descriptor instead.
func (*Handshake_Success) Descriptor() ([]byte, []int) {
	return file_com_digitalasset_canton_protocol_v0_sequencing_proto_rawDescGZIP(), []int{12, 2}
}

type Handshake_Failure struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Reason string `protobuf:"bytes,1,opt,name=reason,proto3" json:"reason,omitempty"`
}

func (x *Handshake_Failure) Reset() {
	*x = Handshake_Failure{}
	mi := &file_com_digitalasset_canton_protocol_v0_sequencing_proto_msgTypes[17]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Handshake_Failure) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Handshake_Failure) ProtoMessage() {}

func (x *Handshake_Failure) ProtoReflect() protoreflect.Message {
	mi := &file_com_digitalasset_canton_protocol_v0_sequencing_proto_msgTypes[17]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Handshake_Failure.ProtoReflect.Descriptor instead.
func (*Handshake_Failure) Descriptor() ([]byte, []int) {
	return file_com_digitalasset_canton_protocol_v0_sequencing_proto_rawDescGZIP(), []int{12, 3}
}

func (x *Handshake_Failure) GetReason() string {
	if x != nil {
		return x.Reason
	}
	return ""
}

var File_com_digitalasset_canton_protocol_v0_sequencing_proto protoreflect.FileDescriptor

var file_com_digitalasset_canton_protocol_v0_sequencing_proto_rawDesc = []byte{
	0x0a, 0x34, 0x63, 0x6f, 0x6d, 0x2f, 0x64, 0x69, 0x67, 0x69, 0x74, 0x61, 0x6c, 0x61, 0x73, 0x73,
	0x65, 0x74, 0x2f, 0x63, 0x61, 0x6e, 0x74, 0x6f, 0x6e, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63,
	0x6f, 0x6c, 0x2f, 0x76, 0x30, 0x2f, 0x73, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x69, 0x6e, 0x67,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x23, 0x63, 0x6f, 0x6d, 0x2e, 0x64, 0x69, 0x67, 0x69,
	0x74, 0x61, 0x6c, 0x61, 0x73, 0x73, 0x65, 0x74, 0x2e, 0x63, 0x61, 0x6e, 0x74, 0x6f, 0x6e, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x76, 0x30, 0x1a, 0x2e, 0x63, 0x6f, 0x6d,
	0x2f, 0x64, 0x69, 0x67, 0x69, 0x74, 0x61, 0x6c, 0x61, 0x73, 0x73, 0x65, 0x74, 0x2f, 0x63, 0x61,
	0x6e, 0x74, 0x6f, 0x6e, 0x2f, 0x63, 0x72, 0x79, 0x70, 0x74, 0x6f, 0x2f, 0x76, 0x30, 0x2f, 0x63,
	0x72, 0x79, 0x70, 0x74, 0x6f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x2e, 0x63, 0x6f, 0x6d,
	0x2f, 0x64, 0x69, 0x67, 0x69, 0x74, 0x61, 0x6c, 0x61, 0x73, 0x73, 0x65, 0x74, 0x2f, 0x63, 0x61,
	0x6e, 0x74, 0x6f, 0x6e, 0x2f, 0x76, 0x30, 0x2f, 0x74, 0x72, 0x61, 0x63, 0x65, 0x5f, 0x63, 0x6f,
	0x6e, 0x74, 0x65, 0x78, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x64, 0x75, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1f, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d,
	0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x77, 0x72,
	0x61, 0x70, 0x70, 0x65, 0x72, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xf5, 0x02, 0x0a,
	0x0e, 0x53, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x64, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12,
	0x18, 0x0a, 0x07, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x07, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x12, 0x38, 0x0a, 0x09, 0x74, 0x69, 0x6d,
	0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54,
	0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74,
	0x61, 0x6d, 0x70, 0x12, 0x1b, 0x0a, 0x09, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x5f, 0x69, 0x64,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x49, 0x64,
	0x12, 0x3b, 0x0a, 0x0a, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x52, 0x09, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x49, 0x64, 0x12, 0x4a, 0x0a,
	0x05, 0x62, 0x61, 0x74, 0x63, 0x68, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x34, 0x2e, 0x63,
	0x6f, 0x6d, 0x2e, 0x64, 0x69, 0x67, 0x69, 0x74, 0x61, 0x6c, 0x61, 0x73, 0x73, 0x65, 0x74, 0x2e,
	0x63, 0x61, 0x6e, 0x74, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e,
	0x76, 0x30, 0x2e, 0x43, 0x6f, 0x6d, 0x70, 0x72, 0x65, 0x73, 0x73, 0x65, 0x64, 0x42, 0x61, 0x74,
	0x63, 0x68, 0x52, 0x05, 0x62, 0x61, 0x74, 0x63, 0x68, 0x12, 0x69, 0x0a, 0x14, 0x64, 0x65, 0x6c,
	0x69, 0x76, 0x65, 0x72, 0x5f, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x5f, 0x72, 0x65, 0x61, 0x73, 0x6f,
	0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x37, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x64, 0x69,
	0x67, 0x69, 0x74, 0x61, 0x6c, 0x61, 0x73, 0x73, 0x65, 0x74, 0x2e, 0x63, 0x61, 0x6e, 0x74, 0x6f,
	0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x76, 0x30, 0x2e, 0x44, 0x65,
	0x6c, 0x69, 0x76, 0x65, 0x72, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e,
	0x52, 0x12, 0x64, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x52, 0x65,
	0x61, 0x73, 0x6f, 0x6e, 0x22, 0xb5, 0x02, 0x0a, 0x1d, 0x50, 0x6f, 0x73, 0x73, 0x69, 0x62, 0x6c,
	0x79, 0x49, 0x67, 0x6e, 0x6f, 0x72, 0x65, 0x64, 0x53, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65,
	0x64, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x65,
	0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72,
	0x12, 0x38, 0x0a, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52,
	0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x4d, 0x0a, 0x0d, 0x74, 0x72,
	0x61, 0x63, 0x65, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x28, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x64, 0x69, 0x67, 0x69, 0x74, 0x61, 0x6c, 0x61,
	0x73, 0x73, 0x65, 0x74, 0x2e, 0x63, 0x61, 0x6e, 0x74, 0x6f, 0x6e, 0x2e, 0x76, 0x30, 0x2e, 0x54,
	0x72, 0x61, 0x63, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x52, 0x0c, 0x74, 0x72, 0x61,
	0x63, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x69, 0x73, 0x5f,
	0x69, 0x67, 0x6e, 0x6f, 0x72, 0x65, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x69,
	0x73, 0x49, 0x67, 0x6e, 0x6f, 0x72, 0x65, 0x64, 0x12, 0x52, 0x0a, 0x0a, 0x75, 0x6e, 0x64, 0x65,
	0x72, 0x6c, 0x79, 0x69, 0x6e, 0x67, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x32, 0x2e, 0x63,
	0x6f, 0x6d, 0x2e, 0x64, 0x69, 0x67, 0x69, 0x74, 0x61, 0x6c, 0x61, 0x73, 0x73, 0x65, 0x74, 0x2e,
	0x63, 0x61, 0x6e, 0x74, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e,
	0x76, 0x30, 0x2e, 0x53, 0x69, 0x67, 0x6e, 0x65, 0x64, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74,
	0x52, 0x0a, 0x75, 0x6e, 0x64, 0x65, 0x72, 0x6c, 0x79, 0x69, 0x6e, 0x67, 0x22, 0x81, 0x01, 0x0a,
	0x0e, 0x52, 0x65, 0x63, 0x69, 0x70, 0x69, 0x65, 0x6e, 0x74, 0x73, 0x54, 0x72, 0x65, 0x65, 0x12,
	0x1e, 0x0a, 0x0a, 0x72, 0x65, 0x63, 0x69, 0x70, 0x69, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x01, 0x20,
	0x03, 0x28, 0x09, 0x52, 0x0a, 0x72, 0x65, 0x63, 0x69, 0x70, 0x69, 0x65, 0x6e, 0x74, 0x73, 0x12,
	0x4f, 0x0a, 0x08, 0x63, 0x68, 0x69, 0x6c, 0x64, 0x72, 0x65, 0x6e, 0x18, 0x02, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x33, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x64, 0x69, 0x67, 0x69, 0x74, 0x61, 0x6c, 0x61,
	0x73, 0x73, 0x65, 0x74, 0x2e, 0x63, 0x61, 0x6e, 0x74, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x76, 0x30, 0x2e, 0x52, 0x65, 0x63, 0x69, 0x70, 0x69, 0x65, 0x6e,
	0x74, 0x73, 0x54, 0x72, 0x65, 0x65, 0x52, 0x08, 0x63, 0x68, 0x69, 0x6c, 0x64, 0x72, 0x65, 0x6e,
	0x22, 0x6a, 0x0a, 0x0a, 0x52, 0x65, 0x63, 0x69, 0x70, 0x69, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x5c,
	0x0a, 0x0f, 0x72, 0x65, 0x63, 0x69, 0x70, 0x69, 0x65, 0x6e, 0x74, 0x73, 0x5f, 0x74, 0x72, 0x65,
	0x65, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x33, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x64, 0x69,
	0x67, 0x69, 0x74, 0x61, 0x6c, 0x61, 0x73, 0x73, 0x65, 0x74, 0x2e, 0x63, 0x61, 0x6e, 0x74, 0x6f,
	0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x76, 0x30, 0x2e, 0x52, 0x65,
	0x63, 0x69, 0x70, 0x69, 0x65, 0x6e, 0x74, 0x73, 0x54, 0x72, 0x65, 0x65, 0x52, 0x0e, 0x72, 0x65,
	0x63, 0x69, 0x70, 0x69, 0x65, 0x6e, 0x74, 0x73, 0x54, 0x72, 0x65, 0x65, 0x22, 0x75, 0x0a, 0x08,
	0x45, 0x6e, 0x76, 0x65, 0x6c, 0x6f, 0x70, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x6f, 0x6e, 0x74,
	0x65, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65,
	0x6e, 0x74, 0x12, 0x4f, 0x0a, 0x0a, 0x72, 0x65, 0x63, 0x69, 0x70, 0x69, 0x65, 0x6e, 0x74, 0x73,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x64, 0x69, 0x67,
	0x69, 0x74, 0x61, 0x6c, 0x61, 0x73, 0x73, 0x65, 0x74, 0x2e, 0x63, 0x61, 0x6e, 0x74, 0x6f, 0x6e,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x76, 0x30, 0x2e, 0x52, 0x65, 0x63,
	0x69, 0x70, 0x69, 0x65, 0x6e, 0x74, 0x73, 0x52, 0x0a, 0x72, 0x65, 0x63, 0x69, 0x70, 0x69, 0x65,
	0x6e, 0x74, 0x73, 0x22, 0xd2, 0x01, 0x0a, 0x0f, 0x43, 0x6f, 0x6d, 0x70, 0x72, 0x65, 0x73, 0x73,
	0x65, 0x64, 0x42, 0x61, 0x74, 0x63, 0x68, 0x12, 0x67, 0x0a, 0x09, 0x61, 0x6c, 0x67, 0x6f, 0x72,
	0x69, 0x74, 0x68, 0x6d, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x49, 0x2e, 0x63, 0x6f, 0x6d,
	0x2e, 0x64, 0x69, 0x67, 0x69, 0x74, 0x61, 0x6c, 0x61, 0x73, 0x73, 0x65, 0x74, 0x2e, 0x63, 0x61,
	0x6e, 0x74, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x76, 0x30,
	0x2e, 0x43, 0x6f, 0x6d, 0x70, 0x72, 0x65, 0x73, 0x73, 0x65, 0x64, 0x42, 0x61, 0x74, 0x63, 0x68,
	0x2e, 0x43, 0x6f, 0x6d, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x41, 0x6c, 0x67, 0x6f,
	0x72, 0x69, 0x74, 0x68, 0x6d, 0x52, 0x09, 0x61, 0x6c, 0x67, 0x6f, 0x72, 0x69, 0x74, 0x68, 0x6d,
	0x12, 0x29, 0x0a, 0x10, 0x63, 0x6f, 0x6d, 0x70, 0x72, 0x65, 0x73, 0x73, 0x65, 0x64, 0x5f, 0x62,
	0x61, 0x74, 0x63, 0x68, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0f, 0x63, 0x6f, 0x6d, 0x70,
	0x72, 0x65, 0x73, 0x73, 0x65, 0x64, 0x42, 0x61, 0x74, 0x63, 0x68, 0x22, 0x2b, 0x0a, 0x14, 0x43,
	0x6f, 0x6d, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x41, 0x6c, 0x67, 0x6f, 0x72, 0x69,
	0x74, 0x68, 0x6d, 0x12, 0x09, 0x0a, 0x05, 0x4e, 0x6f, 0x6e, 0x65, 0x5f, 0x10, 0x00, 0x12, 0x08,
	0x0a, 0x04, 0x47, 0x7a, 0x69, 0x70, 0x10, 0x01, 0x22, 0x54, 0x0a, 0x05, 0x42, 0x61, 0x74, 0x63,
	0x68, 0x12, 0x4b, 0x0a, 0x09, 0x65, 0x6e, 0x76, 0x65, 0x6c, 0x6f, 0x70, 0x65, 0x73, 0x18, 0x01,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x64, 0x69, 0x67, 0x69, 0x74,
	0x61, 0x6c, 0x61, 0x73, 0x73, 0x65, 0x74, 0x2e, 0x63, 0x61, 0x6e, 0x74, 0x6f, 0x6e, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x76, 0x30, 0x2e, 0x45, 0x6e, 0x76, 0x65, 0x6c,
	0x6f, 0x70, 0x65, 0x52, 0x09, 0x65, 0x6e, 0x76, 0x65, 0x6c, 0x6f, 0x70, 0x65, 0x73, 0x22, 0xe9,
	0x01, 0x0a, 0x0d, 0x53, 0x69, 0x67, 0x6e, 0x65, 0x64, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74,
	0x12, 0x35, 0x0a, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x42, 0x79, 0x74, 0x65, 0x73, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x07,
	0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x12, 0x4c, 0x0a, 0x0a, 0x73, 0x69, 0x67, 0x6e, 0x61,
	0x74, 0x75, 0x72, 0x65, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x63, 0x6f,
	0x6d, 0x2e, 0x64, 0x69, 0x67, 0x69, 0x74, 0x61, 0x6c, 0x61, 0x73, 0x73, 0x65, 0x74, 0x2e, 0x63,
	0x61, 0x6e, 0x74, 0x6f, 0x6e, 0x2e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x6f, 0x2e, 0x76, 0x30, 0x2e,
	0x53, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x52, 0x0a, 0x73, 0x69, 0x67, 0x6e, 0x61,
	0x74, 0x75, 0x72, 0x65, 0x73, 0x12, 0x53, 0x0a, 0x18, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61,
	0x6d, 0x70, 0x5f, 0x6f, 0x66, 0x5f, 0x73, 0x69, 0x67, 0x6e, 0x69, 0x6e, 0x67, 0x5f, 0x6b, 0x65,
	0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74,
	0x61, 0x6d, 0x70, 0x52, 0x15, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x4f, 0x66,
	0x53, 0x69, 0x67, 0x6e, 0x69, 0x6e, 0x67, 0x4b, 0x65, 0x79, 0x22, 0x6c, 0x0a, 0x12, 0x44, 0x65,
	0x6c, 0x69, 0x76, 0x65, 0x72, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e,
	0x12, 0x25, 0x0a, 0x0d, 0x62, 0x61, 0x74, 0x63, 0x68, 0x5f, 0x69, 0x6e, 0x76, 0x61, 0x6c, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x0c, 0x62, 0x61, 0x74, 0x63, 0x68,
	0x49, 0x6e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x12, 0x25, 0x0a, 0x0d, 0x62, 0x61, 0x74, 0x63, 0x68,
	0x5f, 0x72, 0x65, 0x66, 0x75, 0x73, 0x65, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00,
	0x52, 0x0c, 0x62, 0x61, 0x74, 0x63, 0x68, 0x52, 0x65, 0x66, 0x75, 0x73, 0x65, 0x64, 0x42, 0x08,
	0x0a, 0x06, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x22, 0x41, 0x0a, 0x10, 0x53, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x41, 0x67, 0x72, 0x65, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x0e, 0x0a, 0x02,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x1d, 0x0a, 0x0a,
	0x6c, 0x65, 0x67, 0x61, 0x6c, 0x5f, 0x74, 0x65, 0x78, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x09, 0x6c, 0x65, 0x67, 0x61, 0x6c, 0x54, 0x65, 0x78, 0x74, 0x22, 0x8b, 0x07, 0x0a, 0x16,
	0x53, 0x74, 0x61, 0x74, 0x69, 0x63, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x50, 0x61, 0x72, 0x61,
	0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x12, 0x52, 0x0a, 0x17, 0x72, 0x65, 0x63, 0x6f, 0x6e, 0x63,
	0x69, 0x6c, 0x69, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61,
	0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x52, 0x16, 0x72, 0x65, 0x63, 0x6f, 0x6e, 0x63, 0x69, 0x6c, 0x69, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x12, 0x37, 0x0a, 0x18, 0x6d, 0x61,
	0x78, 0x5f, 0x72, 0x61, 0x74, 0x65, 0x5f, 0x70, 0x65, 0x72, 0x5f, 0x70, 0x61, 0x72, 0x74, 0x69,
	0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x15, 0x6d, 0x61,
	0x78, 0x52, 0x61, 0x74, 0x65, 0x50, 0x65, 0x72, 0x50, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70,
	0x61, 0x6e, 0x74, 0x12, 0x37, 0x0a, 0x18, 0x6d, 0x61, 0x78, 0x5f, 0x69, 0x6e, 0x62, 0x6f, 0x75,
	0x6e, 0x64, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x15, 0x6d, 0x61, 0x78, 0x49, 0x6e, 0x62, 0x6f, 0x75, 0x6e,
	0x64, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x30, 0x0a, 0x14,
	0x75, 0x6e, 0x69, 0x71, 0x75, 0x65, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x5f,
	0x6b, 0x65, 0x79, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x12, 0x75, 0x6e, 0x69, 0x71,
	0x75, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x4b, 0x65, 0x79, 0x73, 0x12, 0x74,
	0x0a, 0x1c, 0x72, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x64, 0x5f, 0x73, 0x69, 0x67, 0x6e, 0x69,
	0x6e, 0x67, 0x5f, 0x6b, 0x65, 0x79, 0x5f, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x65, 0x73, 0x18, 0x05,
	0x20, 0x03, 0x28, 0x0e, 0x32, 0x33, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x64, 0x69, 0x67, 0x69, 0x74,
	0x61, 0x6c, 0x61, 0x73, 0x73, 0x65, 0x74, 0x2e, 0x63, 0x61, 0x6e, 0x74, 0x6f, 0x6e, 0x2e, 0x63,
	0x72, 0x79, 0x70, 0x74, 0x6f, 0x2e, 0x76, 0x30, 0x2e, 0x53, 0x69, 0x67, 0x6e, 0x69, 0x6e, 0x67,
	0x4b, 0x65, 0x79, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x65, 0x52, 0x19, 0x72, 0x65, 0x71, 0x75, 0x69,
	0x72, 0x65, 0x64, 0x53, 0x69, 0x67, 0x6e, 0x69, 0x6e, 0x67, 0x4b, 0x65, 0x79, 0x53, 0x63, 0x68,
	0x65, 0x6d, 0x65, 0x73, 0x12, 0x7d, 0x0a, 0x1f, 0x72, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x64,
	0x5f, 0x65, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6b, 0x65, 0x79, 0x5f,
	0x73, 0x63, 0x68, 0x65, 0x6d, 0x65, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0e, 0x32, 0x36, 0x2e,
	0x63, 0x6f, 0x6d, 0x2e, 0x64, 0x69, 0x67, 0x69, 0x74, 0x61, 0x6c, 0x61, 0x73, 0x73, 0x65, 0x74,
	0x2e, 0x63, 0x61, 0x6e, 0x74, 0x6f, 0x6e, 0x2e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x6f, 0x2e, 0x76,
	0x30, 0x2e, 0x45, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x4b, 0x65, 0x79, 0x53,
	0x63, 0x68, 0x65, 0x6d, 0x65, 0x52, 0x1c, 0x72, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x64, 0x45,
	0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x4b, 0x65, 0x79, 0x53, 0x63, 0x68, 0x65,
	0x6d, 0x65, 0x73, 0x12, 0x7a, 0x0a, 0x1e, 0x72, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x64, 0x5f,
	0x73, 0x79, 0x6d, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x5f, 0x6b, 0x65, 0x79, 0x5f, 0x73, 0x63,
	0x68, 0x65, 0x6d, 0x65, 0x73, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0e, 0x32, 0x35, 0x2e, 0x63, 0x6f,
	0x6d, 0x2e, 0x64, 0x69, 0x67, 0x69, 0x74, 0x61, 0x6c, 0x61, 0x73, 0x73, 0x65, 0x74, 0x2e, 0x63,
	0x61, 0x6e, 0x74, 0x6f, 0x6e, 0x2e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x6f, 0x2e, 0x76, 0x30, 0x2e,
	0x53, 0x79, 0x6d, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x4b, 0x65, 0x79, 0x53, 0x63, 0x68, 0x65,
	0x6d, 0x65, 0x52, 0x1b, 0x72, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x64, 0x53, 0x79, 0x6d, 0x6d,
	0x65, 0x74, 0x72, 0x69, 0x63, 0x4b, 0x65, 0x79, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x65, 0x73, 0x12,
	0x6a, 0x0a, 0x18, 0x72, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x64, 0x5f, 0x68, 0x61, 0x73, 0x68,
	0x5f, 0x61, 0x6c, 0x67, 0x6f, 0x72, 0x69, 0x74, 0x68, 0x6d, 0x73, 0x18, 0x08, 0x20, 0x03, 0x28,
	0x0e, 0x32, 0x30, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x64, 0x69, 0x67, 0x69, 0x74, 0x61, 0x6c, 0x61,
	0x73, 0x73, 0x65, 0x74, 0x2e, 0x63, 0x61, 0x6e, 0x74, 0x6f, 0x6e, 0x2e, 0x63, 0x72, 0x79, 0x70,
	0x74, 0x6f, 0x2e, 0x76, 0x30, 0x2e, 0x48, 0x61, 0x73, 0x68, 0x41, 0x6c, 0x67, 0x6f, 0x72, 0x69,
	0x74, 0x68, 0x6d, 0x52, 0x16, 0x72, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x64, 0x48, 0x61, 0x73,
	0x68, 0x41, 0x6c, 0x67, 0x6f, 0x72, 0x69, 0x74, 0x68, 0x6d, 0x73, 0x12, 0x71, 0x0a, 0x1b, 0x72,
	0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x64, 0x5f, 0x63, 0x72, 0x79, 0x70, 0x74, 0x6f, 0x5f, 0x6b,
	0x65, 0x79, 0x5f, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x73, 0x18, 0x09, 0x20, 0x03, 0x28, 0x0e,
	0x32, 0x32, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x64, 0x69, 0x67, 0x69, 0x74, 0x61, 0x6c, 0x61, 0x73,
	0x73, 0x65, 0x74, 0x2e, 0x63, 0x61, 0x6e, 0x74, 0x6f, 0x6e, 0x2e, 0x63, 0x72, 0x79, 0x70, 0x74,
	0x6f, 0x2e, 0x76, 0x30, 0x2e, 0x43, 0x72, 0x79, 0x70, 0x74, 0x6f, 0x4b, 0x65, 0x79, 0x46, 0x6f,
	0x72, 0x6d, 0x61, 0x74, 0x52, 0x18, 0x72, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x64, 0x43, 0x72,
	0x79, 0x70, 0x74, 0x6f, 0x4b, 0x65, 0x79, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x73, 0x12, 0x29,
	0x0a, 0x10, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69,
	0x6f, 0x6e, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63,
	0x6f, 0x6c, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x22, 0xde, 0x03, 0x0a, 0x17, 0x44, 0x79,
	0x6e, 0x61, 0x6d, 0x69, 0x63, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x50, 0x61, 0x72, 0x61, 0x6d,
	0x65, 0x74, 0x65, 0x72, 0x73, 0x12, 0x5b, 0x0a, 0x1c, 0x70, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69,
	0x70, 0x61, 0x6e, 0x74, 0x5f, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x5f, 0x74, 0x69,
	0x6d, 0x65, 0x6f, 0x75, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44, 0x75,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x1a, 0x70, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70,
	0x61, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x6f,
	0x75, 0x74, 0x12, 0x55, 0x0a, 0x19, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x74, 0x6f, 0x72, 0x5f, 0x72,
	0x65, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x52, 0x17, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x74, 0x6f, 0x72, 0x52, 0x65, 0x61, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x12, 0x5b, 0x0a, 0x1c, 0x74, 0x72, 0x61,
	0x6e, 0x73, 0x66, 0x65, 0x72, 0x5f, 0x65, 0x78, 0x63, 0x6c, 0x75, 0x73, 0x69, 0x76, 0x69, 0x74,
	0x79, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x19, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x1a, 0x74, 0x72, 0x61, 0x6e,
	0x73, 0x66, 0x65, 0x72, 0x45, 0x78, 0x63, 0x6c, 0x75, 0x73, 0x69, 0x76, 0x69, 0x74, 0x79, 0x54,
	0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x12, 0x4d, 0x0a, 0x15, 0x74, 0x6f, 0x70, 0x6f, 0x6c, 0x6f,
	0x67, 0x79, 0x5f, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x5f, 0x64, 0x65, 0x6c, 0x61, 0x79, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x52, 0x13, 0x74, 0x6f, 0x70, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65,
	0x44, 0x65, 0x6c, 0x61, 0x79, 0x12, 0x63, 0x0a, 0x21, 0x6c, 0x65, 0x64, 0x67, 0x65, 0x72, 0x5f,
	0x74, 0x69, 0x6d, 0x65, 0x5f, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65,
	0x5f, 0x74, 0x6f, 0x6c, 0x65, 0x72, 0x61, 0x6e, 0x63, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x19, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x1d, 0x6c, 0x65, 0x64,
	0x67, 0x65, 0x72, 0x54, 0x69, 0x6d, 0x65, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x54, 0x69, 0x6d,
	0x65, 0x54, 0x6f, 0x6c, 0x65, 0x72, 0x61, 0x6e, 0x63, 0x65, 0x22, 0xcd, 0x03, 0x0a, 0x09, 0x48,
	0x61, 0x6e, 0x64, 0x73, 0x68, 0x61, 0x6b, 0x65, 0x1a, 0x9b, 0x01, 0x0a, 0x07, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x38, 0x0a, 0x18, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x73,
	0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x16, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x50, 0x72,
	0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x56,
	0x0a, 0x18, 0x6d, 0x69, 0x6e, 0x69, 0x6d, 0x75, 0x6d, 0x5f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63,
	0x6f, 0x6c, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x16,
	0x6d, 0x69, 0x6e, 0x69, 0x6d, 0x75, 0x6d, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x56,
	0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x1a, 0xf3, 0x01, 0x0a, 0x08, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x36, 0x0a, 0x17, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x5f, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x15, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x50, 0x72, 0x6f, 0x74,
	0x6f, 0x63, 0x6f, 0x6c, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x52, 0x0a, 0x07, 0x73,
	0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x36, 0x2e, 0x63,
	0x6f, 0x6d, 0x2e, 0x64, 0x69, 0x67, 0x69, 0x74, 0x61, 0x6c, 0x61, 0x73, 0x73, 0x65, 0x74, 0x2e,
	0x63, 0x61, 0x6e, 0x74, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e,
	0x76, 0x30, 0x2e, 0x48, 0x61, 0x6e, 0x64, 0x73, 0x68, 0x61, 0x6b, 0x65, 0x2e, 0x53, 0x75, 0x63,
	0x63, 0x65, 0x73, 0x73, 0x48, 0x00, 0x52, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x12,
	0x52, 0x0a, 0x07, 0x66, 0x61, 0x69, 0x6c, 0x75, 0x72, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x36, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x64, 0x69, 0x67, 0x69, 0x74, 0x61, 0x6c, 0x61, 0x73,
	0x73, 0x65, 0x74, 0x2e, 0x63, 0x61, 0x6e, 0x74, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x63, 0x6f, 0x6c, 0x2e, 0x76, 0x30, 0x2e, 0x48, 0x61, 0x6e, 0x64, 0x73, 0x68, 0x61, 0x6b, 0x65,
	0x2e, 0x46, 0x61, 0x69, 0x6c, 0x75, 0x72, 0x65, 0x48, 0x00, 0x52, 0x07, 0x66, 0x61, 0x69, 0x6c,
	0x75, 0x72, 0x65, 0x42, 0x07, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x1a, 0x09, 0x0a, 0x07,
	0x53, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x1a, 0x21, 0x0a, 0x07, 0x46, 0x61, 0x69, 0x6c, 0x75,
	0x72, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x06, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x22, 0xd6, 0x02, 0x0a, 0x11, 0x53,
	0x75, 0x62, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x16, 0x0a, 0x06, 0x73, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x06, 0x73, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x12, 0x1d, 0x0a, 0x0a, 0x6d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x6d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x69, 0x73, 0x5f, 0x72, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x69, 0x73, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x4a, 0x0a, 0x05, 0x62, 0x61, 0x74, 0x63, 0x68, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x34, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x64, 0x69, 0x67, 0x69,
	0x74, 0x61, 0x6c, 0x61, 0x73, 0x73, 0x65, 0x74, 0x2e, 0x63, 0x61, 0x6e, 0x74, 0x6f, 0x6e, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x76, 0x30, 0x2e, 0x43, 0x6f, 0x6d, 0x70,
	0x72, 0x65, 0x73, 0x73, 0x65, 0x64, 0x42, 0x61, 0x74, 0x63, 0x68, 0x52, 0x05, 0x62, 0x61, 0x74,
	0x63, 0x68, 0x12, 0x4a, 0x0a, 0x13, 0x6d, 0x61, 0x78, 0x5f, 0x73, 0x65, 0x71, 0x75, 0x65, 0x6e,
	0x63, 0x69, 0x6e, 0x67, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x11, 0x6d, 0x61, 0x78,
	0x53, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x69, 0x6e, 0x67, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x53,
	0x0a, 0x18, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x5f, 0x6f, 0x66, 0x5f, 0x73,
	0x69, 0x67, 0x6e, 0x69, 0x6e, 0x67, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x15, 0x74, 0x69,
	0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x4f, 0x66, 0x53, 0x69, 0x67, 0x6e, 0x69, 0x6e, 0x67,
	0x4b, 0x65, 0x79, 0x42, 0x54, 0x5a, 0x52, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f,
	0x6d, 0x2f, 0x64, 0x69, 0x67, 0x69, 0x74, 0x61, 0x6c, 0x2d, 0x61, 0x73, 0x73, 0x65, 0x74, 0x2f,
	0x64, 0x61, 0x7a, 0x6c, 0x2d, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2f, 0x76, 0x38, 0x2f, 0x67,
	0x6f, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x63, 0x6f, 0x6d, 0x2f, 0x64, 0x69, 0x67, 0x69, 0x74, 0x61,
	0x6c, 0x61, 0x73, 0x73, 0x65, 0x74, 0x2f, 0x63, 0x61, 0x6e, 0x74, 0x6f, 0x6e, 0x2f, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2f, 0x76, 0x30, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x33,
}

var (
	file_com_digitalasset_canton_protocol_v0_sequencing_proto_rawDescOnce sync.Once
	file_com_digitalasset_canton_protocol_v0_sequencing_proto_rawDescData = file_com_digitalasset_canton_protocol_v0_sequencing_proto_rawDesc
)

func file_com_digitalasset_canton_protocol_v0_sequencing_proto_rawDescGZIP() []byte {
	file_com_digitalasset_canton_protocol_v0_sequencing_proto_rawDescOnce.Do(func() {
		file_com_digitalasset_canton_protocol_v0_sequencing_proto_rawDescData = protoimpl.X.CompressGZIP(file_com_digitalasset_canton_protocol_v0_sequencing_proto_rawDescData)
	})
	return file_com_digitalasset_canton_protocol_v0_sequencing_proto_rawDescData
}

var file_com_digitalasset_canton_protocol_v0_sequencing_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_com_digitalasset_canton_protocol_v0_sequencing_proto_msgTypes = make([]protoimpl.MessageInfo, 18)
var file_com_digitalasset_canton_protocol_v0_sequencing_proto_goTypes = []any{
	(CompressedBatch_CompressionAlgorithm)(0), // 0: com.digitalasset.canton.protocol.v0.CompressedBatch.CompressionAlgorithm
	(*SequencedEvent)(nil),                    // 1: com.digitalasset.canton.protocol.v0.SequencedEvent
	(*PossiblyIgnoredSequencedEvent)(nil),     // 2: com.digitalasset.canton.protocol.v0.PossiblyIgnoredSequencedEvent
	(*RecipientsTree)(nil),                    // 3: com.digitalasset.canton.protocol.v0.RecipientsTree
	(*Recipients)(nil),                        // 4: com.digitalasset.canton.protocol.v0.Recipients
	(*Envelope)(nil),                          // 5: com.digitalasset.canton.protocol.v0.Envelope
	(*CompressedBatch)(nil),                   // 6: com.digitalasset.canton.protocol.v0.CompressedBatch
	(*Batch)(nil),                             // 7: com.digitalasset.canton.protocol.v0.Batch
	(*SignedContent)(nil),                     // 8: com.digitalasset.canton.protocol.v0.SignedContent
	(*DeliverErrorReason)(nil),                // 9: com.digitalasset.canton.protocol.v0.DeliverErrorReason
	(*ServiceAgreement)(nil),                  // 10: com.digitalasset.canton.protocol.v0.ServiceAgreement
	(*StaticDomainParameters)(nil),            // 11: com.digitalasset.canton.protocol.v0.StaticDomainParameters
	(*DynamicDomainParameters)(nil),           // 12: com.digitalasset.canton.protocol.v0.DynamicDomainParameters
	(*Handshake)(nil),                         // 13: com.digitalasset.canton.protocol.v0.Handshake
	(*SubmissionRequest)(nil),                 // 14: com.digitalasset.canton.protocol.v0.SubmissionRequest
	(*Handshake_Request)(nil),                 // 15: com.digitalasset.canton.protocol.v0.Handshake.Request
	(*Handshake_Response)(nil),                // 16: com.digitalasset.canton.protocol.v0.Handshake.Response
	(*Handshake_Success)(nil),                 // 17: com.digitalasset.canton.protocol.v0.Handshake.Success
	(*Handshake_Failure)(nil),                 // 18: com.digitalasset.canton.protocol.v0.Handshake.Failure
	(*timestamppb.Timestamp)(nil),             // 19: google.protobuf.Timestamp
	(*wrapperspb.StringValue)(nil),            // 20: google.protobuf.StringValue
	(*v0.TraceContext)(nil),                   // 21: com.digitalasset.canton.v0.TraceContext
	(*wrapperspb.BytesValue)(nil),             // 22: google.protobuf.BytesValue
	(*v01.Signature)(nil),                     // 23: com.digitalasset.canton.crypto.v0.Signature
	(*durationpb.Duration)(nil),               // 24: google.protobuf.Duration
	(v01.SigningKeyScheme)(0),                 // 25: com.digitalasset.canton.crypto.v0.SigningKeyScheme
	(v01.EncryptionKeyScheme)(0),              // 26: com.digitalasset.canton.crypto.v0.EncryptionKeyScheme
	(v01.SymmetricKeyScheme)(0),               // 27: com.digitalasset.canton.crypto.v0.SymmetricKeyScheme
	(v01.HashAlgorithm)(0),                    // 28: com.digitalasset.canton.crypto.v0.HashAlgorithm
	(v01.CryptoKeyFormat)(0),                  // 29: com.digitalasset.canton.crypto.v0.CryptoKeyFormat
}
var file_com_digitalasset_canton_protocol_v0_sequencing_proto_depIdxs = []int32{
	19, // 0: com.digitalasset.canton.protocol.v0.SequencedEvent.timestamp:type_name -> google.protobuf.Timestamp
	20, // 1: com.digitalasset.canton.protocol.v0.SequencedEvent.message_id:type_name -> google.protobuf.StringValue
	6,  // 2: com.digitalasset.canton.protocol.v0.SequencedEvent.batch:type_name -> com.digitalasset.canton.protocol.v0.CompressedBatch
	9,  // 3: com.digitalasset.canton.protocol.v0.SequencedEvent.deliver_error_reason:type_name -> com.digitalasset.canton.protocol.v0.DeliverErrorReason
	19, // 4: com.digitalasset.canton.protocol.v0.PossiblyIgnoredSequencedEvent.timestamp:type_name -> google.protobuf.Timestamp
	21, // 5: com.digitalasset.canton.protocol.v0.PossiblyIgnoredSequencedEvent.trace_context:type_name -> com.digitalasset.canton.v0.TraceContext
	8,  // 6: com.digitalasset.canton.protocol.v0.PossiblyIgnoredSequencedEvent.underlying:type_name -> com.digitalasset.canton.protocol.v0.SignedContent
	3,  // 7: com.digitalasset.canton.protocol.v0.RecipientsTree.children:type_name -> com.digitalasset.canton.protocol.v0.RecipientsTree
	3,  // 8: com.digitalasset.canton.protocol.v0.Recipients.recipients_tree:type_name -> com.digitalasset.canton.protocol.v0.RecipientsTree
	4,  // 9: com.digitalasset.canton.protocol.v0.Envelope.recipients:type_name -> com.digitalasset.canton.protocol.v0.Recipients
	0,  // 10: com.digitalasset.canton.protocol.v0.CompressedBatch.algorithm:type_name -> com.digitalasset.canton.protocol.v0.CompressedBatch.CompressionAlgorithm
	5,  // 11: com.digitalasset.canton.protocol.v0.Batch.envelopes:type_name -> com.digitalasset.canton.protocol.v0.Envelope
	22, // 12: com.digitalasset.canton.protocol.v0.SignedContent.content:type_name -> google.protobuf.BytesValue
	23, // 13: com.digitalasset.canton.protocol.v0.SignedContent.signatures:type_name -> com.digitalasset.canton.crypto.v0.Signature
	19, // 14: com.digitalasset.canton.protocol.v0.SignedContent.timestamp_of_signing_key:type_name -> google.protobuf.Timestamp
	24, // 15: com.digitalasset.canton.protocol.v0.StaticDomainParameters.reconciliation_interval:type_name -> google.protobuf.Duration
	25, // 16: com.digitalasset.canton.protocol.v0.StaticDomainParameters.required_signing_key_schemes:type_name -> com.digitalasset.canton.crypto.v0.SigningKeyScheme
	26, // 17: com.digitalasset.canton.protocol.v0.StaticDomainParameters.required_encryption_key_schemes:type_name -> com.digitalasset.canton.crypto.v0.EncryptionKeyScheme
	27, // 18: com.digitalasset.canton.protocol.v0.StaticDomainParameters.required_symmetric_key_schemes:type_name -> com.digitalasset.canton.crypto.v0.SymmetricKeyScheme
	28, // 19: com.digitalasset.canton.protocol.v0.StaticDomainParameters.required_hash_algorithms:type_name -> com.digitalasset.canton.crypto.v0.HashAlgorithm
	29, // 20: com.digitalasset.canton.protocol.v0.StaticDomainParameters.required_crypto_key_formats:type_name -> com.digitalasset.canton.crypto.v0.CryptoKeyFormat
	24, // 21: com.digitalasset.canton.protocol.v0.DynamicDomainParameters.participant_response_timeout:type_name -> google.protobuf.Duration
	24, // 22: com.digitalasset.canton.protocol.v0.DynamicDomainParameters.mediator_reaction_timeout:type_name -> google.protobuf.Duration
	24, // 23: com.digitalasset.canton.protocol.v0.DynamicDomainParameters.transfer_exclusivity_timeout:type_name -> google.protobuf.Duration
	24, // 24: com.digitalasset.canton.protocol.v0.DynamicDomainParameters.topology_change_delay:type_name -> google.protobuf.Duration
	24, // 25: com.digitalasset.canton.protocol.v0.DynamicDomainParameters.ledger_time_record_time_tolerance:type_name -> google.protobuf.Duration
	6,  // 26: com.digitalasset.canton.protocol.v0.SubmissionRequest.batch:type_name -> com.digitalasset.canton.protocol.v0.CompressedBatch
	19, // 27: com.digitalasset.canton.protocol.v0.SubmissionRequest.max_sequencing_time:type_name -> google.protobuf.Timestamp
	19, // 28: com.digitalasset.canton.protocol.v0.SubmissionRequest.timestamp_of_signing_key:type_name -> google.protobuf.Timestamp
	20, // 29: com.digitalasset.canton.protocol.v0.Handshake.Request.minimum_protocol_version:type_name -> google.protobuf.StringValue
	17, // 30: com.digitalasset.canton.protocol.v0.Handshake.Response.success:type_name -> com.digitalasset.canton.protocol.v0.Handshake.Success
	18, // 31: com.digitalasset.canton.protocol.v0.Handshake.Response.failure:type_name -> com.digitalasset.canton.protocol.v0.Handshake.Failure
	32, // [32:32] is the sub-list for method output_type
	32, // [32:32] is the sub-list for method input_type
	32, // [32:32] is the sub-list for extension type_name
	32, // [32:32] is the sub-list for extension extendee
	0,  // [0:32] is the sub-list for field type_name
}

func init() { file_com_digitalasset_canton_protocol_v0_sequencing_proto_init() }
func file_com_digitalasset_canton_protocol_v0_sequencing_proto_init() {
	if File_com_digitalasset_canton_protocol_v0_sequencing_proto != nil {
		return
	}
	file_com_digitalasset_canton_protocol_v0_sequencing_proto_msgTypes[8].OneofWrappers = []any{
		(*DeliverErrorReason_BatchInvalid)(nil),
		(*DeliverErrorReason_BatchRefused)(nil),
	}
	file_com_digitalasset_canton_protocol_v0_sequencing_proto_msgTypes[15].OneofWrappers = []any{
		(*Handshake_Response_Success)(nil),
		(*Handshake_Response_Failure)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_com_digitalasset_canton_protocol_v0_sequencing_proto_rawDesc,
			NumEnums:      1,
			NumMessages:   18,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_com_digitalasset_canton_protocol_v0_sequencing_proto_goTypes,
		DependencyIndexes: file_com_digitalasset_canton_protocol_v0_sequencing_proto_depIdxs,
		EnumInfos:         file_com_digitalasset_canton_protocol_v0_sequencing_proto_enumTypes,
		MessageInfos:      file_com_digitalasset_canton_protocol_v0_sequencing_proto_msgTypes,
	}.Build()
	File_com_digitalasset_canton_protocol_v0_sequencing_proto = out.File
	file_com_digitalasset_canton_protocol_v0_sequencing_proto_rawDesc = nil
	file_com_digitalasset_canton_protocol_v0_sequencing_proto_goTypes = nil
	file_com_digitalasset_canton_protocol_v0_sequencing_proto_depIdxs = nil
}
