// Copyright (c) 2017-2025 Digital Asset (Switzerland) GmbH and/or its affiliates. All rights reserved.
// SPDX-License-Identifier: Apache-2.0
// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.35.2
// 	protoc        v5.27.2
// source: com/digitalasset/canton/protocol/v0/topology.proto

package v0

import (
	v0 "github.com/digital-asset/dazl-client/v8/go/api/com/digitalasset/canton/crypto/v0"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type TopologyChangeOp int32

const (
	TopologyChangeOp_Add     TopologyChangeOp = 0
	TopologyChangeOp_Remove  TopologyChangeOp = 1
	TopologyChangeOp_Replace TopologyChangeOp = 2
)

// Enum value maps for TopologyChangeOp.
var (
	TopologyChangeOp_name = map[int32]string{
		0: "Add",
		1: "Remove",
		2: "Replace",
	}
	TopologyChangeOp_value = map[string]int32{
		"Add":     0,
		"Remove":  1,
		"Replace": 2,
	}
)

func (x TopologyChangeOp) Enum() *TopologyChangeOp {
	p := new(TopologyChangeOp)
	*p = x
	return p
}

func (x TopologyChangeOp) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (TopologyChangeOp) Descriptor() protoreflect.EnumDescriptor {
	return file_com_digitalasset_canton_protocol_v0_topology_proto_enumTypes[0].Descriptor()
}

func (TopologyChangeOp) Type() protoreflect.EnumType {
	return &file_com_digitalasset_canton_protocol_v0_topology_proto_enumTypes[0]
}

func (x TopologyChangeOp) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use TopologyChangeOp.Descriptor instead.
func (TopologyChangeOp) EnumDescriptor() ([]byte, []int) {
	return file_com_digitalasset_canton_protocol_v0_topology_proto_rawDescGZIP(), []int{0}
}

type TrustLevel int32

const (
	TrustLevel_MissingTrustLevel TrustLevel = 0
	TrustLevel_Ordinary          TrustLevel = 1
	TrustLevel_Vip               TrustLevel = 2
)

// Enum value maps for TrustLevel.
var (
	TrustLevel_name = map[int32]string{
		0: "MissingTrustLevel",
		1: "Ordinary",
		2: "Vip",
	}
	TrustLevel_value = map[string]int32{
		"MissingTrustLevel": 0,
		"Ordinary":          1,
		"Vip":               2,
	}
)

func (x TrustLevel) Enum() *TrustLevel {
	p := new(TrustLevel)
	*p = x
	return p
}

func (x TrustLevel) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (TrustLevel) Descriptor() protoreflect.EnumDescriptor {
	return file_com_digitalasset_canton_protocol_v0_topology_proto_enumTypes[1].Descriptor()
}

func (TrustLevel) Type() protoreflect.EnumType {
	return &file_com_digitalasset_canton_protocol_v0_topology_proto_enumTypes[1]
}

func (x TrustLevel) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use TrustLevel.Descriptor instead.
func (TrustLevel) EnumDescriptor() ([]byte, []int) {
	return file_com_digitalasset_canton_protocol_v0_topology_proto_rawDescGZIP(), []int{1}
}

type ParticipantPermission int32

const (
	ParticipantPermission_MissingParticipantPermission ParticipantPermission = 0
	ParticipantPermission_Submission                   ParticipantPermission = 1
	ParticipantPermission_Confirmation                 ParticipantPermission = 2
	ParticipantPermission_Observation                  ParticipantPermission = 3
	ParticipantPermission_Disabled                     ParticipantPermission = 4
)

// Enum value maps for ParticipantPermission.
var (
	ParticipantPermission_name = map[int32]string{
		0: "MissingParticipantPermission",
		1: "Submission",
		2: "Confirmation",
		3: "Observation",
		4: "Disabled",
	}
	ParticipantPermission_value = map[string]int32{
		"MissingParticipantPermission": 0,
		"Submission":                   1,
		"Confirmation":                 2,
		"Observation":                  3,
		"Disabled":                     4,
	}
)

func (x ParticipantPermission) Enum() *ParticipantPermission {
	p := new(ParticipantPermission)
	*p = x
	return p
}

func (x ParticipantPermission) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ParticipantPermission) Descriptor() protoreflect.EnumDescriptor {
	return file_com_digitalasset_canton_protocol_v0_topology_proto_enumTypes[2].Descriptor()
}

func (ParticipantPermission) Type() protoreflect.EnumType {
	return &file_com_digitalasset_canton_protocol_v0_topology_proto_enumTypes[2]
}

func (x ParticipantPermission) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ParticipantPermission.Descriptor instead.
func (ParticipantPermission) EnumDescriptor() ([]byte, []int) {
	return file_com_digitalasset_canton_protocol_v0_topology_proto_rawDescGZIP(), []int{2}
}

type RequestSide int32

const (
	RequestSide_MissingRequestSide RequestSide = 0
	RequestSide_Both               RequestSide = 1
	RequestSide_From               RequestSide = 2
	RequestSide_To                 RequestSide = 3
)

// Enum value maps for RequestSide.
var (
	RequestSide_name = map[int32]string{
		0: "MissingRequestSide",
		1: "Both",
		2: "From",
		3: "To",
	}
	RequestSide_value = map[string]int32{
		"MissingRequestSide": 0,
		"Both":               1,
		"From":               2,
		"To":                 3,
	}
)

func (x RequestSide) Enum() *RequestSide {
	p := new(RequestSide)
	*p = x
	return p
}

func (x RequestSide) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (RequestSide) Descriptor() protoreflect.EnumDescriptor {
	return file_com_digitalasset_canton_protocol_v0_topology_proto_enumTypes[3].Descriptor()
}

func (RequestSide) Type() protoreflect.EnumType {
	return &file_com_digitalasset_canton_protocol_v0_topology_proto_enumTypes[3]
}

func (x RequestSide) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use RequestSide.Descriptor instead.
func (RequestSide) EnumDescriptor() ([]byte, []int) {
	return file_com_digitalasset_canton_protocol_v0_topology_proto_rawDescGZIP(), []int{3}
}

type RegisterTopologyTransactionResponse_Result_State int32

const (
	RegisterTopologyTransactionResponse_Result_MISSING_STATE RegisterTopologyTransactionResponse_Result_State = 0
	RegisterTopologyTransactionResponse_Result_REQUESTED     RegisterTopologyTransactionResponse_Result_State = 1
	RegisterTopologyTransactionResponse_Result_FAILED        RegisterTopologyTransactionResponse_Result_State = 2
	RegisterTopologyTransactionResponse_Result_REJECTED      RegisterTopologyTransactionResponse_Result_State = 3
	RegisterTopologyTransactionResponse_Result_ACCEPTED      RegisterTopologyTransactionResponse_Result_State = 4
	RegisterTopologyTransactionResponse_Result_DUPLICATE     RegisterTopologyTransactionResponse_Result_State = 5
	RegisterTopologyTransactionResponse_Result_OBSOLETE      RegisterTopologyTransactionResponse_Result_State = 6
)

// Enum value maps for RegisterTopologyTransactionResponse_Result_State.
var (
	RegisterTopologyTransactionResponse_Result_State_name = map[int32]string{
		0: "MISSING_STATE",
		1: "REQUESTED",
		2: "FAILED",
		3: "REJECTED",
		4: "ACCEPTED",
		5: "DUPLICATE",
		6: "OBSOLETE",
	}
	RegisterTopologyTransactionResponse_Result_State_value = map[string]int32{
		"MISSING_STATE": 0,
		"REQUESTED":     1,
		"FAILED":        2,
		"REJECTED":      3,
		"ACCEPTED":      4,
		"DUPLICATE":     5,
		"OBSOLETE":      6,
	}
)

func (x RegisterTopologyTransactionResponse_Result_State) Enum() *RegisterTopologyTransactionResponse_Result_State {
	p := new(RegisterTopologyTransactionResponse_Result_State)
	*p = x
	return p
}

func (x RegisterTopologyTransactionResponse_Result_State) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (RegisterTopologyTransactionResponse_Result_State) Descriptor() protoreflect.EnumDescriptor {
	return file_com_digitalasset_canton_protocol_v0_topology_proto_enumTypes[4].Descriptor()
}

func (RegisterTopologyTransactionResponse_Result_State) Type() protoreflect.EnumType {
	return &file_com_digitalasset_canton_protocol_v0_topology_proto_enumTypes[4]
}

func (x RegisterTopologyTransactionResponse_Result_State) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use RegisterTopologyTransactionResponse_Result_State.Descriptor instead.
func (RegisterTopologyTransactionResponse_Result_State) EnumDescriptor() ([]byte, []int) {
	return file_com_digitalasset_canton_protocol_v0_topology_proto_rawDescGZIP(), []int{16, 0, 0}
}

type ParticipantState struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Side        RequestSide           `protobuf:"varint,1,opt,name=side,proto3,enum=com.digitalasset.canton.protocol.v0.RequestSide" json:"side,omitempty"`
	Domain      string                `protobuf:"bytes,2,opt,name=domain,proto3" json:"domain,omitempty"`
	Participant string                `protobuf:"bytes,3,opt,name=participant,proto3" json:"participant,omitempty"`
	Permission  ParticipantPermission `protobuf:"varint,4,opt,name=permission,proto3,enum=com.digitalasset.canton.protocol.v0.ParticipantPermission" json:"permission,omitempty"`
	TrustLevel  TrustLevel            `protobuf:"varint,5,opt,name=trust_level,json=trustLevel,proto3,enum=com.digitalasset.canton.protocol.v0.TrustLevel" json:"trust_level,omitempty"`
}

func (x *ParticipantState) Reset() {
	*x = ParticipantState{}
	mi := &file_com_digitalasset_canton_protocol_v0_topology_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ParticipantState) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ParticipantState) ProtoMessage() {}

func (x *ParticipantState) ProtoReflect() protoreflect.Message {
	mi := &file_com_digitalasset_canton_protocol_v0_topology_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ParticipantState.ProtoReflect.Descriptor instead.
func (*ParticipantState) Descriptor() ([]byte, []int) {
	return file_com_digitalasset_canton_protocol_v0_topology_proto_rawDescGZIP(), []int{0}
}

func (x *ParticipantState) GetSide() RequestSide {
	if x != nil {
		return x.Side
	}
	return RequestSide_MissingRequestSide
}

func (x *ParticipantState) GetDomain() string {
	if x != nil {
		return x.Domain
	}
	return ""
}

func (x *ParticipantState) GetParticipant() string {
	if x != nil {
		return x.Participant
	}
	return ""
}

func (x *ParticipantState) GetPermission() ParticipantPermission {
	if x != nil {
		return x.Permission
	}
	return ParticipantPermission_MissingParticipantPermission
}

func (x *ParticipantState) GetTrustLevel() TrustLevel {
	if x != nil {
		return x.TrustLevel
	}
	return TrustLevel_MissingTrustLevel
}

type PartyToParticipant struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Side        RequestSide           `protobuf:"varint,1,opt,name=side,proto3,enum=com.digitalasset.canton.protocol.v0.RequestSide" json:"side,omitempty"`
	Party       string                `protobuf:"bytes,2,opt,name=party,proto3" json:"party,omitempty"`
	Participant string                `protobuf:"bytes,3,opt,name=participant,proto3" json:"participant,omitempty"`
	Permission  ParticipantPermission `protobuf:"varint,4,opt,name=permission,proto3,enum=com.digitalasset.canton.protocol.v0.ParticipantPermission" json:"permission,omitempty"`
}

func (x *PartyToParticipant) Reset() {
	*x = PartyToParticipant{}
	mi := &file_com_digitalasset_canton_protocol_v0_topology_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PartyToParticipant) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PartyToParticipant) ProtoMessage() {}

func (x *PartyToParticipant) ProtoReflect() protoreflect.Message {
	mi := &file_com_digitalasset_canton_protocol_v0_topology_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PartyToParticipant.ProtoReflect.Descriptor instead.
func (*PartyToParticipant) Descriptor() ([]byte, []int) {
	return file_com_digitalasset_canton_protocol_v0_topology_proto_rawDescGZIP(), []int{1}
}

func (x *PartyToParticipant) GetSide() RequestSide {
	if x != nil {
		return x.Side
	}
	return RequestSide_MissingRequestSide
}

func (x *PartyToParticipant) GetParty() string {
	if x != nil {
		return x.Party
	}
	return ""
}

func (x *PartyToParticipant) GetParticipant() string {
	if x != nil {
		return x.Participant
	}
	return ""
}

func (x *PartyToParticipant) GetPermission() ParticipantPermission {
	if x != nil {
		return x.Permission
	}
	return ParticipantPermission_MissingParticipantPermission
}

type MediatorDomainState struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Side     RequestSide `protobuf:"varint,1,opt,name=side,proto3,enum=com.digitalasset.canton.protocol.v0.RequestSide" json:"side,omitempty"`
	Domain   string      `protobuf:"bytes,2,opt,name=domain,proto3" json:"domain,omitempty"`
	Mediator string      `protobuf:"bytes,3,opt,name=mediator,proto3" json:"mediator,omitempty"`
}

func (x *MediatorDomainState) Reset() {
	*x = MediatorDomainState{}
	mi := &file_com_digitalasset_canton_protocol_v0_topology_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *MediatorDomainState) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MediatorDomainState) ProtoMessage() {}

func (x *MediatorDomainState) ProtoReflect() protoreflect.Message {
	mi := &file_com_digitalasset_canton_protocol_v0_topology_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MediatorDomainState.ProtoReflect.Descriptor instead.
func (*MediatorDomainState) Descriptor() ([]byte, []int) {
	return file_com_digitalasset_canton_protocol_v0_topology_proto_rawDescGZIP(), []int{2}
}

func (x *MediatorDomainState) GetSide() RequestSide {
	if x != nil {
		return x.Side
	}
	return RequestSide_MissingRequestSide
}

func (x *MediatorDomainState) GetDomain() string {
	if x != nil {
		return x.Domain
	}
	return ""
}

func (x *MediatorDomainState) GetMediator() string {
	if x != nil {
		return x.Mediator
	}
	return ""
}

type NamespaceDelegation struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Namespace        string               `protobuf:"bytes,1,opt,name=namespace,proto3" json:"namespace,omitempty"`
	TargetKey        *v0.SigningPublicKey `protobuf:"bytes,2,opt,name=target_key,json=targetKey,proto3" json:"target_key,omitempty"`
	IsRootDelegation bool                 `protobuf:"varint,3,opt,name=is_root_delegation,json=isRootDelegation,proto3" json:"is_root_delegation,omitempty"`
}

func (x *NamespaceDelegation) Reset() {
	*x = NamespaceDelegation{}
	mi := &file_com_digitalasset_canton_protocol_v0_topology_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *NamespaceDelegation) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NamespaceDelegation) ProtoMessage() {}

func (x *NamespaceDelegation) ProtoReflect() protoreflect.Message {
	mi := &file_com_digitalasset_canton_protocol_v0_topology_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NamespaceDelegation.ProtoReflect.Descriptor instead.
func (*NamespaceDelegation) Descriptor() ([]byte, []int) {
	return file_com_digitalasset_canton_protocol_v0_topology_proto_rawDescGZIP(), []int{3}
}

func (x *NamespaceDelegation) GetNamespace() string {
	if x != nil {
		return x.Namespace
	}
	return ""
}

func (x *NamespaceDelegation) GetTargetKey() *v0.SigningPublicKey {
	if x != nil {
		return x.TargetKey
	}
	return nil
}

func (x *NamespaceDelegation) GetIsRootDelegation() bool {
	if x != nil {
		return x.IsRootDelegation
	}
	return false
}

type IdentifierDelegation struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UniqueIdentifier string               `protobuf:"bytes,1,opt,name=unique_identifier,json=uniqueIdentifier,proto3" json:"unique_identifier,omitempty"`
	TargetKey        *v0.SigningPublicKey `protobuf:"bytes,2,opt,name=target_key,json=targetKey,proto3" json:"target_key,omitempty"`
}

func (x *IdentifierDelegation) Reset() {
	*x = IdentifierDelegation{}
	mi := &file_com_digitalasset_canton_protocol_v0_topology_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *IdentifierDelegation) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IdentifierDelegation) ProtoMessage() {}

func (x *IdentifierDelegation) ProtoReflect() protoreflect.Message {
	mi := &file_com_digitalasset_canton_protocol_v0_topology_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IdentifierDelegation.ProtoReflect.Descriptor instead.
func (*IdentifierDelegation) Descriptor() ([]byte, []int) {
	return file_com_digitalasset_canton_protocol_v0_topology_proto_rawDescGZIP(), []int{4}
}

func (x *IdentifierDelegation) GetUniqueIdentifier() string {
	if x != nil {
		return x.UniqueIdentifier
	}
	return ""
}

func (x *IdentifierDelegation) GetTargetKey() *v0.SigningPublicKey {
	if x != nil {
		return x.TargetKey
	}
	return nil
}

type OwnerToKeyMapping struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	KeyOwner  string        `protobuf:"bytes,1,opt,name=key_owner,json=keyOwner,proto3" json:"key_owner,omitempty"`
	PublicKey *v0.PublicKey `protobuf:"bytes,2,opt,name=public_key,json=publicKey,proto3" json:"public_key,omitempty"`
}

func (x *OwnerToKeyMapping) Reset() {
	*x = OwnerToKeyMapping{}
	mi := &file_com_digitalasset_canton_protocol_v0_topology_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *OwnerToKeyMapping) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OwnerToKeyMapping) ProtoMessage() {}

func (x *OwnerToKeyMapping) ProtoReflect() protoreflect.Message {
	mi := &file_com_digitalasset_canton_protocol_v0_topology_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OwnerToKeyMapping.ProtoReflect.Descriptor instead.
func (*OwnerToKeyMapping) Descriptor() ([]byte, []int) {
	return file_com_digitalasset_canton_protocol_v0_topology_proto_rawDescGZIP(), []int{5}
}

func (x *OwnerToKeyMapping) GetKeyOwner() string {
	if x != nil {
		return x.KeyOwner
	}
	return ""
}

func (x *OwnerToKeyMapping) GetPublicKey() *v0.PublicKey {
	if x != nil {
		return x.PublicKey
	}
	return nil
}

type SignedLegalIdentityClaim struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Claim     []byte        `protobuf:"bytes,1,opt,name=claim,proto3" json:"claim,omitempty"`
	Signature *v0.Signature `protobuf:"bytes,2,opt,name=signature,proto3" json:"signature,omitempty"`
}

func (x *SignedLegalIdentityClaim) Reset() {
	*x = SignedLegalIdentityClaim{}
	mi := &file_com_digitalasset_canton_protocol_v0_topology_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SignedLegalIdentityClaim) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SignedLegalIdentityClaim) ProtoMessage() {}

func (x *SignedLegalIdentityClaim) ProtoReflect() protoreflect.Message {
	mi := &file_com_digitalasset_canton_protocol_v0_topology_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SignedLegalIdentityClaim.ProtoReflect.Descriptor instead.
func (*SignedLegalIdentityClaim) Descriptor() ([]byte, []int) {
	return file_com_digitalasset_canton_protocol_v0_topology_proto_rawDescGZIP(), []int{6}
}

func (x *SignedLegalIdentityClaim) GetClaim() []byte {
	if x != nil {
		return x.Claim
	}
	return nil
}

func (x *SignedLegalIdentityClaim) GetSignature() *v0.Signature {
	if x != nil {
		return x.Signature
	}
	return nil
}

type LegalIdentityClaim struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UniqueIdentifier string `protobuf:"bytes,1,opt,name=unique_identifier,json=uniqueIdentifier,proto3" json:"unique_identifier,omitempty"`
	// Types that are assignable to Evidence:
	//
	//	*LegalIdentityClaim_X509Cert
	Evidence isLegalIdentityClaim_Evidence `protobuf_oneof:"evidence"`
}

func (x *LegalIdentityClaim) Reset() {
	*x = LegalIdentityClaim{}
	mi := &file_com_digitalasset_canton_protocol_v0_topology_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *LegalIdentityClaim) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LegalIdentityClaim) ProtoMessage() {}

func (x *LegalIdentityClaim) ProtoReflect() protoreflect.Message {
	mi := &file_com_digitalasset_canton_protocol_v0_topology_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LegalIdentityClaim.ProtoReflect.Descriptor instead.
func (*LegalIdentityClaim) Descriptor() ([]byte, []int) {
	return file_com_digitalasset_canton_protocol_v0_topology_proto_rawDescGZIP(), []int{7}
}

func (x *LegalIdentityClaim) GetUniqueIdentifier() string {
	if x != nil {
		return x.UniqueIdentifier
	}
	return ""
}

func (m *LegalIdentityClaim) GetEvidence() isLegalIdentityClaim_Evidence {
	if m != nil {
		return m.Evidence
	}
	return nil
}

func (x *LegalIdentityClaim) GetX509Cert() []byte {
	if x, ok := x.GetEvidence().(*LegalIdentityClaim_X509Cert); ok {
		return x.X509Cert
	}
	return nil
}

type isLegalIdentityClaim_Evidence interface {
	isLegalIdentityClaim_Evidence()
}

type LegalIdentityClaim_X509Cert struct {
	X509Cert []byte `protobuf:"bytes,2,opt,name=x509_cert,json=x509Cert,proto3,oneof"`
}

func (*LegalIdentityClaim_X509Cert) isLegalIdentityClaim_Evidence() {}

type VettedPackages struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Participant string   `protobuf:"bytes,1,opt,name=participant,proto3" json:"participant,omitempty"`
	PackageIds  []string `protobuf:"bytes,2,rep,name=package_ids,json=packageIds,proto3" json:"package_ids,omitempty"`
}

func (x *VettedPackages) Reset() {
	*x = VettedPackages{}
	mi := &file_com_digitalasset_canton_protocol_v0_topology_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *VettedPackages) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VettedPackages) ProtoMessage() {}

func (x *VettedPackages) ProtoReflect() protoreflect.Message {
	mi := &file_com_digitalasset_canton_protocol_v0_topology_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VettedPackages.ProtoReflect.Descriptor instead.
func (*VettedPackages) Descriptor() ([]byte, []int) {
	return file_com_digitalasset_canton_protocol_v0_topology_proto_rawDescGZIP(), []int{8}
}

func (x *VettedPackages) GetParticipant() string {
	if x != nil {
		return x.Participant
	}
	return ""
}

func (x *VettedPackages) GetPackageIds() []string {
	if x != nil {
		return x.PackageIds
	}
	return nil
}

type TopologyStateUpdate struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Operation TopologyChangeOp `protobuf:"varint,1,opt,name=operation,proto3,enum=com.digitalasset.canton.protocol.v0.TopologyChangeOp" json:"operation,omitempty"`
	Id        string           `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
	// Types that are assignable to Mapping:
	//
	//	*TopologyStateUpdate_NamespaceDelegation
	//	*TopologyStateUpdate_IdentifierDelegation
	//	*TopologyStateUpdate_OwnerToKeyMapping
	//	*TopologyStateUpdate_PartyToParticipant
	//	*TopologyStateUpdate_SignedLegalIdentityClaim
	//	*TopologyStateUpdate_ParticipantState
	//	*TopologyStateUpdate_VettedPackages
	//	*TopologyStateUpdate_MediatorDomainState
	Mapping isTopologyStateUpdate_Mapping `protobuf_oneof:"mapping"`
}

func (x *TopologyStateUpdate) Reset() {
	*x = TopologyStateUpdate{}
	mi := &file_com_digitalasset_canton_protocol_v0_topology_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TopologyStateUpdate) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TopologyStateUpdate) ProtoMessage() {}

func (x *TopologyStateUpdate) ProtoReflect() protoreflect.Message {
	mi := &file_com_digitalasset_canton_protocol_v0_topology_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TopologyStateUpdate.ProtoReflect.Descriptor instead.
func (*TopologyStateUpdate) Descriptor() ([]byte, []int) {
	return file_com_digitalasset_canton_protocol_v0_topology_proto_rawDescGZIP(), []int{9}
}

func (x *TopologyStateUpdate) GetOperation() TopologyChangeOp {
	if x != nil {
		return x.Operation
	}
	return TopologyChangeOp_Add
}

func (x *TopologyStateUpdate) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (m *TopologyStateUpdate) GetMapping() isTopologyStateUpdate_Mapping {
	if m != nil {
		return m.Mapping
	}
	return nil
}

func (x *TopologyStateUpdate) GetNamespaceDelegation() *NamespaceDelegation {
	if x, ok := x.GetMapping().(*TopologyStateUpdate_NamespaceDelegation); ok {
		return x.NamespaceDelegation
	}
	return nil
}

func (x *TopologyStateUpdate) GetIdentifierDelegation() *IdentifierDelegation {
	if x, ok := x.GetMapping().(*TopologyStateUpdate_IdentifierDelegation); ok {
		return x.IdentifierDelegation
	}
	return nil
}

func (x *TopologyStateUpdate) GetOwnerToKeyMapping() *OwnerToKeyMapping {
	if x, ok := x.GetMapping().(*TopologyStateUpdate_OwnerToKeyMapping); ok {
		return x.OwnerToKeyMapping
	}
	return nil
}

func (x *TopologyStateUpdate) GetPartyToParticipant() *PartyToParticipant {
	if x, ok := x.GetMapping().(*TopologyStateUpdate_PartyToParticipant); ok {
		return x.PartyToParticipant
	}
	return nil
}

func (x *TopologyStateUpdate) GetSignedLegalIdentityClaim() *SignedLegalIdentityClaim {
	if x, ok := x.GetMapping().(*TopologyStateUpdate_SignedLegalIdentityClaim); ok {
		return x.SignedLegalIdentityClaim
	}
	return nil
}

func (x *TopologyStateUpdate) GetParticipantState() *ParticipantState {
	if x, ok := x.GetMapping().(*TopologyStateUpdate_ParticipantState); ok {
		return x.ParticipantState
	}
	return nil
}

func (x *TopologyStateUpdate) GetVettedPackages() *VettedPackages {
	if x, ok := x.GetMapping().(*TopologyStateUpdate_VettedPackages); ok {
		return x.VettedPackages
	}
	return nil
}

func (x *TopologyStateUpdate) GetMediatorDomainState() *MediatorDomainState {
	if x, ok := x.GetMapping().(*TopologyStateUpdate_MediatorDomainState); ok {
		return x.MediatorDomainState
	}
	return nil
}

type isTopologyStateUpdate_Mapping interface {
	isTopologyStateUpdate_Mapping()
}

type TopologyStateUpdate_NamespaceDelegation struct {
	NamespaceDelegation *NamespaceDelegation `protobuf:"bytes,3,opt,name=namespace_delegation,json=namespaceDelegation,proto3,oneof"`
}

type TopologyStateUpdate_IdentifierDelegation struct {
	IdentifierDelegation *IdentifierDelegation `protobuf:"bytes,4,opt,name=identifier_delegation,json=identifierDelegation,proto3,oneof"`
}

type TopologyStateUpdate_OwnerToKeyMapping struct {
	OwnerToKeyMapping *OwnerToKeyMapping `protobuf:"bytes,5,opt,name=owner_to_key_mapping,json=ownerToKeyMapping,proto3,oneof"`
}

type TopologyStateUpdate_PartyToParticipant struct {
	PartyToParticipant *PartyToParticipant `protobuf:"bytes,6,opt,name=party_to_participant,json=partyToParticipant,proto3,oneof"`
}

type TopologyStateUpdate_SignedLegalIdentityClaim struct {
	SignedLegalIdentityClaim *SignedLegalIdentityClaim `protobuf:"bytes,7,opt,name=signed_legal_identity_claim,json=signedLegalIdentityClaim,proto3,oneof"`
}

type TopologyStateUpdate_ParticipantState struct {
	ParticipantState *ParticipantState `protobuf:"bytes,8,opt,name=participant_state,json=participantState,proto3,oneof"`
}

type TopologyStateUpdate_VettedPackages struct {
	VettedPackages *VettedPackages `protobuf:"bytes,9,opt,name=vetted_packages,json=vettedPackages,proto3,oneof"`
}

type TopologyStateUpdate_MediatorDomainState struct {
	MediatorDomainState *MediatorDomainState `protobuf:"bytes,10,opt,name=mediator_domain_state,json=mediatorDomainState,proto3,oneof"`
}

func (*TopologyStateUpdate_NamespaceDelegation) isTopologyStateUpdate_Mapping() {}

func (*TopologyStateUpdate_IdentifierDelegation) isTopologyStateUpdate_Mapping() {}

func (*TopologyStateUpdate_OwnerToKeyMapping) isTopologyStateUpdate_Mapping() {}

func (*TopologyStateUpdate_PartyToParticipant) isTopologyStateUpdate_Mapping() {}

func (*TopologyStateUpdate_SignedLegalIdentityClaim) isTopologyStateUpdate_Mapping() {}

func (*TopologyStateUpdate_ParticipantState) isTopologyStateUpdate_Mapping() {}

func (*TopologyStateUpdate_VettedPackages) isTopologyStateUpdate_Mapping() {}

func (*TopologyStateUpdate_MediatorDomainState) isTopologyStateUpdate_Mapping() {}

type DomainParametersChange struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Domain           string                   `protobuf:"bytes,1,opt,name=domain,proto3" json:"domain,omitempty"`
	DomainParameters *DynamicDomainParameters `protobuf:"bytes,2,opt,name=domain_parameters,json=domainParameters,proto3" json:"domain_parameters,omitempty"`
}

func (x *DomainParametersChange) Reset() {
	*x = DomainParametersChange{}
	mi := &file_com_digitalasset_canton_protocol_v0_topology_proto_msgTypes[10]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DomainParametersChange) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DomainParametersChange) ProtoMessage() {}

func (x *DomainParametersChange) ProtoReflect() protoreflect.Message {
	mi := &file_com_digitalasset_canton_protocol_v0_topology_proto_msgTypes[10]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DomainParametersChange.ProtoReflect.Descriptor instead.
func (*DomainParametersChange) Descriptor() ([]byte, []int) {
	return file_com_digitalasset_canton_protocol_v0_topology_proto_rawDescGZIP(), []int{10}
}

func (x *DomainParametersChange) GetDomain() string {
	if x != nil {
		return x.Domain
	}
	return ""
}

func (x *DomainParametersChange) GetDomainParameters() *DynamicDomainParameters {
	if x != nil {
		return x.DomainParameters
	}
	return nil
}

type DomainGovernanceTransaction struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Mapping:
	//
	//	*DomainGovernanceTransaction_DomainParametersChange
	Mapping isDomainGovernanceTransaction_Mapping `protobuf_oneof:"mapping"`
}

func (x *DomainGovernanceTransaction) Reset() {
	*x = DomainGovernanceTransaction{}
	mi := &file_com_digitalasset_canton_protocol_v0_topology_proto_msgTypes[11]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DomainGovernanceTransaction) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DomainGovernanceTransaction) ProtoMessage() {}

func (x *DomainGovernanceTransaction) ProtoReflect() protoreflect.Message {
	mi := &file_com_digitalasset_canton_protocol_v0_topology_proto_msgTypes[11]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DomainGovernanceTransaction.ProtoReflect.Descriptor instead.
func (*DomainGovernanceTransaction) Descriptor() ([]byte, []int) {
	return file_com_digitalasset_canton_protocol_v0_topology_proto_rawDescGZIP(), []int{11}
}

func (m *DomainGovernanceTransaction) GetMapping() isDomainGovernanceTransaction_Mapping {
	if m != nil {
		return m.Mapping
	}
	return nil
}

func (x *DomainGovernanceTransaction) GetDomainParametersChange() *DomainParametersChange {
	if x, ok := x.GetMapping().(*DomainGovernanceTransaction_DomainParametersChange); ok {
		return x.DomainParametersChange
	}
	return nil
}

type isDomainGovernanceTransaction_Mapping interface {
	isDomainGovernanceTransaction_Mapping()
}

type DomainGovernanceTransaction_DomainParametersChange struct {
	DomainParametersChange *DomainParametersChange `protobuf:"bytes,1,opt,name=domain_parameters_change,json=domainParametersChange,proto3,oneof"`
}

func (*DomainGovernanceTransaction_DomainParametersChange) isDomainGovernanceTransaction_Mapping() {}

type TopologyTransaction struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Transaction:
	//
	//	*TopologyTransaction_StateUpdate
	//	*TopologyTransaction_DomainGovernance
	Transaction isTopologyTransaction_Transaction `protobuf_oneof:"transaction"`
}

func (x *TopologyTransaction) Reset() {
	*x = TopologyTransaction{}
	mi := &file_com_digitalasset_canton_protocol_v0_topology_proto_msgTypes[12]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TopologyTransaction) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TopologyTransaction) ProtoMessage() {}

func (x *TopologyTransaction) ProtoReflect() protoreflect.Message {
	mi := &file_com_digitalasset_canton_protocol_v0_topology_proto_msgTypes[12]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TopologyTransaction.ProtoReflect.Descriptor instead.
func (*TopologyTransaction) Descriptor() ([]byte, []int) {
	return file_com_digitalasset_canton_protocol_v0_topology_proto_rawDescGZIP(), []int{12}
}

func (m *TopologyTransaction) GetTransaction() isTopologyTransaction_Transaction {
	if m != nil {
		return m.Transaction
	}
	return nil
}

func (x *TopologyTransaction) GetStateUpdate() *TopologyStateUpdate {
	if x, ok := x.GetTransaction().(*TopologyTransaction_StateUpdate); ok {
		return x.StateUpdate
	}
	return nil
}

func (x *TopologyTransaction) GetDomainGovernance() *DomainGovernanceTransaction {
	if x, ok := x.GetTransaction().(*TopologyTransaction_DomainGovernance); ok {
		return x.DomainGovernance
	}
	return nil
}

type isTopologyTransaction_Transaction interface {
	isTopologyTransaction_Transaction()
}

type TopologyTransaction_StateUpdate struct {
	StateUpdate *TopologyStateUpdate `protobuf:"bytes,1,opt,name=state_update,json=stateUpdate,proto3,oneof"`
}

type TopologyTransaction_DomainGovernance struct {
	DomainGovernance *DomainGovernanceTransaction `protobuf:"bytes,2,opt,name=domain_governance,json=domainGovernance,proto3,oneof"`
}

func (*TopologyTransaction_StateUpdate) isTopologyTransaction_Transaction() {}

func (*TopologyTransaction_DomainGovernance) isTopologyTransaction_Transaction() {}

type SignedTopologyTransaction struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Transaction []byte               `protobuf:"bytes,1,opt,name=transaction,proto3" json:"transaction,omitempty"`
	Key         *v0.SigningPublicKey `protobuf:"bytes,2,opt,name=key,proto3" json:"key,omitempty"`
	Signature   *v0.Signature        `protobuf:"bytes,3,opt,name=signature,proto3" json:"signature,omitempty"`
}

func (x *SignedTopologyTransaction) Reset() {
	*x = SignedTopologyTransaction{}
	mi := &file_com_digitalasset_canton_protocol_v0_topology_proto_msgTypes[13]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SignedTopologyTransaction) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SignedTopologyTransaction) ProtoMessage() {}

func (x *SignedTopologyTransaction) ProtoReflect() protoreflect.Message {
	mi := &file_com_digitalasset_canton_protocol_v0_topology_proto_msgTypes[13]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SignedTopologyTransaction.ProtoReflect.Descriptor instead.
func (*SignedTopologyTransaction) Descriptor() ([]byte, []int) {
	return file_com_digitalasset_canton_protocol_v0_topology_proto_rawDescGZIP(), []int{13}
}

func (x *SignedTopologyTransaction) GetTransaction() []byte {
	if x != nil {
		return x.Transaction
	}
	return nil
}

func (x *SignedTopologyTransaction) GetKey() *v0.SigningPublicKey {
	if x != nil {
		return x.Key
	}
	return nil
}

func (x *SignedTopologyTransaction) GetSignature() *v0.Signature {
	if x != nil {
		return x.Signature
	}
	return nil
}

type DomainTopologyTransactionMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Signature    *v0.Signature `protobuf:"bytes,1,opt,name=signature,proto3" json:"signature,omitempty"`
	DomainId     string        `protobuf:"bytes,2,opt,name=domain_id,json=domainId,proto3" json:"domain_id,omitempty"`
	Transactions [][]byte      `protobuf:"bytes,3,rep,name=transactions,proto3" json:"transactions,omitempty"`
}

func (x *DomainTopologyTransactionMessage) Reset() {
	*x = DomainTopologyTransactionMessage{}
	mi := &file_com_digitalasset_canton_protocol_v0_topology_proto_msgTypes[14]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DomainTopologyTransactionMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DomainTopologyTransactionMessage) ProtoMessage() {}

func (x *DomainTopologyTransactionMessage) ProtoReflect() protoreflect.Message {
	mi := &file_com_digitalasset_canton_protocol_v0_topology_proto_msgTypes[14]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DomainTopologyTransactionMessage.ProtoReflect.Descriptor instead.
func (*DomainTopologyTransactionMessage) Descriptor() ([]byte, []int) {
	return file_com_digitalasset_canton_protocol_v0_topology_proto_rawDescGZIP(), []int{14}
}

func (x *DomainTopologyTransactionMessage) GetSignature() *v0.Signature {
	if x != nil {
		return x.Signature
	}
	return nil
}

func (x *DomainTopologyTransactionMessage) GetDomainId() string {
	if x != nil {
		return x.DomainId
	}
	return ""
}

func (x *DomainTopologyTransactionMessage) GetTransactions() [][]byte {
	if x != nil {
		return x.Transactions
	}
	return nil
}

type RegisterTopologyTransactionRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RequestedBy                string   `protobuf:"bytes,1,opt,name=requested_by,json=requestedBy,proto3" json:"requested_by,omitempty"`
	Participant                string   `protobuf:"bytes,2,opt,name=participant,proto3" json:"participant,omitempty"`
	RequestId                  string   `protobuf:"bytes,3,opt,name=request_id,json=requestId,proto3" json:"request_id,omitempty"`
	SignedTopologyTransactions [][]byte `protobuf:"bytes,4,rep,name=signed_topology_transactions,json=signedTopologyTransactions,proto3" json:"signed_topology_transactions,omitempty"`
	DomainId                   string   `protobuf:"bytes,5,opt,name=domain_id,json=domainId,proto3" json:"domain_id,omitempty"`
}

func (x *RegisterTopologyTransactionRequest) Reset() {
	*x = RegisterTopologyTransactionRequest{}
	mi := &file_com_digitalasset_canton_protocol_v0_topology_proto_msgTypes[15]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RegisterTopologyTransactionRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RegisterTopologyTransactionRequest) ProtoMessage() {}

func (x *RegisterTopologyTransactionRequest) ProtoReflect() protoreflect.Message {
	mi := &file_com_digitalasset_canton_protocol_v0_topology_proto_msgTypes[15]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RegisterTopologyTransactionRequest.ProtoReflect.Descriptor instead.
func (*RegisterTopologyTransactionRequest) Descriptor() ([]byte, []int) {
	return file_com_digitalasset_canton_protocol_v0_topology_proto_rawDescGZIP(), []int{15}
}

func (x *RegisterTopologyTransactionRequest) GetRequestedBy() string {
	if x != nil {
		return x.RequestedBy
	}
	return ""
}

func (x *RegisterTopologyTransactionRequest) GetParticipant() string {
	if x != nil {
		return x.Participant
	}
	return ""
}

func (x *RegisterTopologyTransactionRequest) GetRequestId() string {
	if x != nil {
		return x.RequestId
	}
	return ""
}

func (x *RegisterTopologyTransactionRequest) GetSignedTopologyTransactions() [][]byte {
	if x != nil {
		return x.SignedTopologyTransactions
	}
	return nil
}

func (x *RegisterTopologyTransactionRequest) GetDomainId() string {
	if x != nil {
		return x.DomainId
	}
	return ""
}

type RegisterTopologyTransactionResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RequestedBy string                                        `protobuf:"bytes,1,opt,name=requested_by,json=requestedBy,proto3" json:"requested_by,omitempty"`
	Participant string                                        `protobuf:"bytes,2,opt,name=participant,proto3" json:"participant,omitempty"`
	RequestId   string                                        `protobuf:"bytes,3,opt,name=request_id,json=requestId,proto3" json:"request_id,omitempty"`
	Results     []*RegisterTopologyTransactionResponse_Result `protobuf:"bytes,4,rep,name=results,proto3" json:"results,omitempty"`
	DomainId    string                                        `protobuf:"bytes,5,opt,name=domain_id,json=domainId,proto3" json:"domain_id,omitempty"`
}

func (x *RegisterTopologyTransactionResponse) Reset() {
	*x = RegisterTopologyTransactionResponse{}
	mi := &file_com_digitalasset_canton_protocol_v0_topology_proto_msgTypes[16]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RegisterTopologyTransactionResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RegisterTopologyTransactionResponse) ProtoMessage() {}

func (x *RegisterTopologyTransactionResponse) ProtoReflect() protoreflect.Message {
	mi := &file_com_digitalasset_canton_protocol_v0_topology_proto_msgTypes[16]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RegisterTopologyTransactionResponse.ProtoReflect.Descriptor instead.
func (*RegisterTopologyTransactionResponse) Descriptor() ([]byte, []int) {
	return file_com_digitalasset_canton_protocol_v0_topology_proto_rawDescGZIP(), []int{16}
}

func (x *RegisterTopologyTransactionResponse) GetRequestedBy() string {
	if x != nil {
		return x.RequestedBy
	}
	return ""
}

func (x *RegisterTopologyTransactionResponse) GetParticipant() string {
	if x != nil {
		return x.Participant
	}
	return ""
}

func (x *RegisterTopologyTransactionResponse) GetRequestId() string {
	if x != nil {
		return x.RequestId
	}
	return ""
}

func (x *RegisterTopologyTransactionResponse) GetResults() []*RegisterTopologyTransactionResponse_Result {
	if x != nil {
		return x.Results
	}
	return nil
}

func (x *RegisterTopologyTransactionResponse) GetDomainId() string {
	if x != nil {
		return x.DomainId
	}
	return ""
}

type RegisterTopologyTransactionResponse_Result struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UniquePath   string                                           `protobuf:"bytes,1,opt,name=unique_path,json=uniquePath,proto3" json:"unique_path,omitempty"`
	State        RegisterTopologyTransactionResponse_Result_State `protobuf:"varint,2,opt,name=state,proto3,enum=com.digitalasset.canton.protocol.v0.RegisterTopologyTransactionResponse_Result_State" json:"state,omitempty"`
	ErrorMessage string                                           `protobuf:"bytes,3,opt,name=error_message,json=errorMessage,proto3" json:"error_message,omitempty"`
}

func (x *RegisterTopologyTransactionResponse_Result) Reset() {
	*x = RegisterTopologyTransactionResponse_Result{}
	mi := &file_com_digitalasset_canton_protocol_v0_topology_proto_msgTypes[17]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RegisterTopologyTransactionResponse_Result) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RegisterTopologyTransactionResponse_Result) ProtoMessage() {}

func (x *RegisterTopologyTransactionResponse_Result) ProtoReflect() protoreflect.Message {
	mi := &file_com_digitalasset_canton_protocol_v0_topology_proto_msgTypes[17]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RegisterTopologyTransactionResponse_Result.ProtoReflect.Descriptor instead.
func (*RegisterTopologyTransactionResponse_Result) Descriptor() ([]byte, []int) {
	return file_com_digitalasset_canton_protocol_v0_topology_proto_rawDescGZIP(), []int{16, 0}
}

func (x *RegisterTopologyTransactionResponse_Result) GetUniquePath() string {
	if x != nil {
		return x.UniquePath
	}
	return ""
}

func (x *RegisterTopologyTransactionResponse_Result) GetState() RegisterTopologyTransactionResponse_Result_State {
	if x != nil {
		return x.State
	}
	return RegisterTopologyTransactionResponse_Result_MISSING_STATE
}

func (x *RegisterTopologyTransactionResponse_Result) GetErrorMessage() string {
	if x != nil {
		return x.ErrorMessage
	}
	return ""
}

var File_com_digitalasset_canton_protocol_v0_topology_proto protoreflect.FileDescriptor

var file_com_digitalasset_canton_protocol_v0_topology_proto_rawDesc = []byte{
	0x0a, 0x32, 0x63, 0x6f, 0x6d, 0x2f, 0x64, 0x69, 0x67, 0x69, 0x74, 0x61, 0x6c, 0x61, 0x73, 0x73,
	0x65, 0x74, 0x2f, 0x63, 0x61, 0x6e, 0x74, 0x6f, 0x6e, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63,
	0x6f, 0x6c, 0x2f, 0x76, 0x30, 0x2f, 0x74, 0x6f, 0x70, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x12, 0x23, 0x63, 0x6f, 0x6d, 0x2e, 0x64, 0x69, 0x67, 0x69, 0x74, 0x61,
	0x6c, 0x61, 0x73, 0x73, 0x65, 0x74, 0x2e, 0x63, 0x61, 0x6e, 0x74, 0x6f, 0x6e, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x76, 0x30, 0x1a, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x64,
	0x69, 0x67, 0x69, 0x74, 0x61, 0x6c, 0x61, 0x73, 0x73, 0x65, 0x74, 0x2f, 0x63, 0x61, 0x6e, 0x74,
	0x6f, 0x6e, 0x2f, 0x63, 0x72, 0x79, 0x70, 0x74, 0x6f, 0x2f, 0x76, 0x30, 0x2f, 0x63, 0x72, 0x79,
	0x70, 0x74, 0x6f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x34, 0x63, 0x6f, 0x6d, 0x2f, 0x64,
	0x69, 0x67, 0x69, 0x74, 0x61, 0x6c, 0x61, 0x73, 0x73, 0x65, 0x74, 0x2f, 0x63, 0x61, 0x6e, 0x74,
	0x6f, 0x6e, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2f, 0x76, 0x30, 0x2f, 0x73,
	0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x69, 0x6e, 0x67, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22,
	0xc0, 0x02, 0x0a, 0x10, 0x50, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x53,
	0x74, 0x61, 0x74, 0x65, 0x12, 0x44, 0x0a, 0x04, 0x73, 0x69, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x30, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x64, 0x69, 0x67, 0x69, 0x74, 0x61, 0x6c,
	0x61, 0x73, 0x73, 0x65, 0x74, 0x2e, 0x63, 0x61, 0x6e, 0x74, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x76, 0x30, 0x2e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x53, 0x69, 0x64, 0x65, 0x52, 0x04, 0x73, 0x69, 0x64, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x64, 0x6f,
	0x6d, 0x61, 0x69, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x64, 0x6f, 0x6d, 0x61,
	0x69, 0x6e, 0x12, 0x20, 0x0a, 0x0b, 0x70, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6e,
	0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x70, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69,
	0x70, 0x61, 0x6e, 0x74, 0x12, 0x5a, 0x0a, 0x0a, 0x70, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69,
	0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x3a, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x64,
	0x69, 0x67, 0x69, 0x74, 0x61, 0x6c, 0x61, 0x73, 0x73, 0x65, 0x74, 0x2e, 0x63, 0x61, 0x6e, 0x74,
	0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x76, 0x30, 0x2e, 0x50,
	0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x50, 0x65, 0x72, 0x6d, 0x69, 0x73,
	0x73, 0x69, 0x6f, 0x6e, 0x52, 0x0a, 0x70, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e,
	0x12, 0x50, 0x0a, 0x0b, 0x74, 0x72, 0x75, 0x73, 0x74, 0x5f, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2f, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x64, 0x69, 0x67, 0x69,
	0x74, 0x61, 0x6c, 0x61, 0x73, 0x73, 0x65, 0x74, 0x2e, 0x63, 0x61, 0x6e, 0x74, 0x6f, 0x6e, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x76, 0x30, 0x2e, 0x54, 0x72, 0x75, 0x73,
	0x74, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x52, 0x0a, 0x74, 0x72, 0x75, 0x73, 0x74, 0x4c, 0x65, 0x76,
	0x65, 0x6c, 0x22, 0xee, 0x01, 0x0a, 0x12, 0x50, 0x61, 0x72, 0x74, 0x79, 0x54, 0x6f, 0x50, 0x61,
	0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x12, 0x44, 0x0a, 0x04, 0x73, 0x69, 0x64,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x30, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x64, 0x69,
	0x67, 0x69, 0x74, 0x61, 0x6c, 0x61, 0x73, 0x73, 0x65, 0x74, 0x2e, 0x63, 0x61, 0x6e, 0x74, 0x6f,
	0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x76, 0x30, 0x2e, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x53, 0x69, 0x64, 0x65, 0x52, 0x04, 0x73, 0x69, 0x64, 0x65, 0x12,
	0x14, 0x0a, 0x05, 0x70, 0x61, 0x72, 0x74, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05,
	0x70, 0x61, 0x72, 0x74, 0x79, 0x12, 0x20, 0x0a, 0x0b, 0x70, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69,
	0x70, 0x61, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x70, 0x61, 0x72, 0x74,
	0x69, 0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x12, 0x5a, 0x0a, 0x0a, 0x70, 0x65, 0x72, 0x6d, 0x69,
	0x73, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x3a, 0x2e, 0x63, 0x6f,
	0x6d, 0x2e, 0x64, 0x69, 0x67, 0x69, 0x74, 0x61, 0x6c, 0x61, 0x73, 0x73, 0x65, 0x74, 0x2e, 0x63,
	0x61, 0x6e, 0x74, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x76,
	0x30, 0x2e, 0x50, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x50, 0x65, 0x72,
	0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x0a, 0x70, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73,
	0x69, 0x6f, 0x6e, 0x22, 0x8f, 0x01, 0x0a, 0x13, 0x4d, 0x65, 0x64, 0x69, 0x61, 0x74, 0x6f, 0x72,
	0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x44, 0x0a, 0x04, 0x73,
	0x69, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x30, 0x2e, 0x63, 0x6f, 0x6d, 0x2e,
	0x64, 0x69, 0x67, 0x69, 0x74, 0x61, 0x6c, 0x61, 0x73, 0x73, 0x65, 0x74, 0x2e, 0x63, 0x61, 0x6e,
	0x74, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x76, 0x30, 0x2e,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x53, 0x69, 0x64, 0x65, 0x52, 0x04, 0x73, 0x69, 0x64,
	0x65, 0x12, 0x16, 0x0a, 0x06, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x06, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x12, 0x1a, 0x0a, 0x08, 0x6d, 0x65, 0x64,
	0x69, 0x61, 0x74, 0x6f, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6d, 0x65, 0x64,
	0x69, 0x61, 0x74, 0x6f, 0x72, 0x22, 0xb5, 0x01, 0x0a, 0x13, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x70,
	0x61, 0x63, 0x65, 0x44, 0x65, 0x6c, 0x65, 0x67, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1c, 0x0a,
	0x09, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x09, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x12, 0x52, 0x0a, 0x0a, 0x74,
	0x61, 0x72, 0x67, 0x65, 0x74, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x33, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x64, 0x69, 0x67, 0x69, 0x74, 0x61, 0x6c, 0x61, 0x73, 0x73,
	0x65, 0x74, 0x2e, 0x63, 0x61, 0x6e, 0x74, 0x6f, 0x6e, 0x2e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x6f,
	0x2e, 0x76, 0x30, 0x2e, 0x53, 0x69, 0x67, 0x6e, 0x69, 0x6e, 0x67, 0x50, 0x75, 0x62, 0x6c, 0x69,
	0x63, 0x4b, 0x65, 0x79, 0x52, 0x09, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x4b, 0x65, 0x79, 0x12,
	0x2c, 0x0a, 0x12, 0x69, 0x73, 0x5f, 0x72, 0x6f, 0x6f, 0x74, 0x5f, 0x64, 0x65, 0x6c, 0x65, 0x67,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x10, 0x69, 0x73, 0x52,
	0x6f, 0x6f, 0x74, 0x44, 0x65, 0x6c, 0x65, 0x67, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x97, 0x01,
	0x0a, 0x14, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x44, 0x65, 0x6c, 0x65,
	0x67, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x2b, 0x0a, 0x11, 0x75, 0x6e, 0x69, 0x71, 0x75, 0x65,
	0x5f, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x10, 0x75, 0x6e, 0x69, 0x71, 0x75, 0x65, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66,
	0x69, 0x65, 0x72, 0x12, 0x52, 0x0a, 0x0a, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x5f, 0x6b, 0x65,
	0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x33, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x64, 0x69,
	0x67, 0x69, 0x74, 0x61, 0x6c, 0x61, 0x73, 0x73, 0x65, 0x74, 0x2e, 0x63, 0x61, 0x6e, 0x74, 0x6f,
	0x6e, 0x2e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x6f, 0x2e, 0x76, 0x30, 0x2e, 0x53, 0x69, 0x67, 0x6e,
	0x69, 0x6e, 0x67, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x4b, 0x65, 0x79, 0x52, 0x09, 0x74, 0x61,
	0x72, 0x67, 0x65, 0x74, 0x4b, 0x65, 0x79, 0x22, 0x7d, 0x0a, 0x11, 0x4f, 0x77, 0x6e, 0x65, 0x72,
	0x54, 0x6f, 0x4b, 0x65, 0x79, 0x4d, 0x61, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x12, 0x1b, 0x0a, 0x09,
	0x6b, 0x65, 0x79, 0x5f, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x08, 0x6b, 0x65, 0x79, 0x4f, 0x77, 0x6e, 0x65, 0x72, 0x12, 0x4b, 0x0a, 0x0a, 0x70, 0x75, 0x62,
	0x6c, 0x69, 0x63, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2c, 0x2e,
	0x63, 0x6f, 0x6d, 0x2e, 0x64, 0x69, 0x67, 0x69, 0x74, 0x61, 0x6c, 0x61, 0x73, 0x73, 0x65, 0x74,
	0x2e, 0x63, 0x61, 0x6e, 0x74, 0x6f, 0x6e, 0x2e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x6f, 0x2e, 0x76,
	0x30, 0x2e, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x4b, 0x65, 0x79, 0x52, 0x09, 0x70, 0x75, 0x62,
	0x6c, 0x69, 0x63, 0x4b, 0x65, 0x79, 0x22, 0x7c, 0x0a, 0x18, 0x53, 0x69, 0x67, 0x6e, 0x65, 0x64,
	0x4c, 0x65, 0x67, 0x61, 0x6c, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x43, 0x6c, 0x61,
	0x69, 0x6d, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x6c, 0x61, 0x69, 0x6d, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0c, 0x52, 0x05, 0x63, 0x6c, 0x61, 0x69, 0x6d, 0x12, 0x4a, 0x0a, 0x09, 0x73, 0x69, 0x67, 0x6e,
	0x61, 0x74, 0x75, 0x72, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x63, 0x6f,
	0x6d, 0x2e, 0x64, 0x69, 0x67, 0x69, 0x74, 0x61, 0x6c, 0x61, 0x73, 0x73, 0x65, 0x74, 0x2e, 0x63,
	0x61, 0x6e, 0x74, 0x6f, 0x6e, 0x2e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x6f, 0x2e, 0x76, 0x30, 0x2e,
	0x53, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x52, 0x09, 0x73, 0x69, 0x67, 0x6e, 0x61,
	0x74, 0x75, 0x72, 0x65, 0x22, 0x6c, 0x0a, 0x12, 0x4c, 0x65, 0x67, 0x61, 0x6c, 0x49, 0x64, 0x65,
	0x6e, 0x74, 0x69, 0x74, 0x79, 0x43, 0x6c, 0x61, 0x69, 0x6d, 0x12, 0x2b, 0x0a, 0x11, 0x75, 0x6e,
	0x69, 0x71, 0x75, 0x65, 0x5f, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x75, 0x6e, 0x69, 0x71, 0x75, 0x65, 0x49, 0x64, 0x65,
	0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x12, 0x1d, 0x0a, 0x09, 0x78, 0x35, 0x30, 0x39, 0x5f,
	0x63, 0x65, 0x72, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x48, 0x00, 0x52, 0x08, 0x78, 0x35,
	0x30, 0x39, 0x43, 0x65, 0x72, 0x74, 0x42, 0x0a, 0x0a, 0x08, 0x65, 0x76, 0x69, 0x64, 0x65, 0x6e,
	0x63, 0x65, 0x22, 0x53, 0x0a, 0x0e, 0x56, 0x65, 0x74, 0x74, 0x65, 0x64, 0x50, 0x61, 0x63, 0x6b,
	0x61, 0x67, 0x65, 0x73, 0x12, 0x20, 0x0a, 0x0b, 0x70, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70,
	0x61, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x70, 0x61, 0x72, 0x74, 0x69,
	0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x70, 0x61, 0x63, 0x6b, 0x61, 0x67,
	0x65, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0a, 0x70, 0x61, 0x63,
	0x6b, 0x61, 0x67, 0x65, 0x49, 0x64, 0x73, 0x22, 0xf4, 0x07, 0x0a, 0x13, 0x54, 0x6f, 0x70, 0x6f,
	0x6c, 0x6f, 0x67, 0x79, 0x53, 0x74, 0x61, 0x74, 0x65, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x12,
	0x53, 0x0a, 0x09, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x35, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x64, 0x69, 0x67, 0x69, 0x74, 0x61, 0x6c,
	0x61, 0x73, 0x73, 0x65, 0x74, 0x2e, 0x63, 0x61, 0x6e, 0x74, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x76, 0x30, 0x2e, 0x54, 0x6f, 0x70, 0x6f, 0x6c, 0x6f, 0x67,
	0x79, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x4f, 0x70, 0x52, 0x09, 0x6f, 0x70, 0x65, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x02, 0x69, 0x64, 0x12, 0x6d, 0x0a, 0x14, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63,
	0x65, 0x5f, 0x64, 0x65, 0x6c, 0x65, 0x67, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x38, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x64, 0x69, 0x67, 0x69, 0x74, 0x61, 0x6c,
	0x61, 0x73, 0x73, 0x65, 0x74, 0x2e, 0x63, 0x61, 0x6e, 0x74, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x76, 0x30, 0x2e, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61,
	0x63, 0x65, 0x44, 0x65, 0x6c, 0x65, 0x67, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x00, 0x52, 0x13,
	0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x44, 0x65, 0x6c, 0x65, 0x67, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x70, 0x0a, 0x15, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65,
	0x72, 0x5f, 0x64, 0x65, 0x6c, 0x65, 0x67, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x39, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x64, 0x69, 0x67, 0x69, 0x74, 0x61, 0x6c,
	0x61, 0x73, 0x73, 0x65, 0x74, 0x2e, 0x63, 0x61, 0x6e, 0x74, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x76, 0x30, 0x2e, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66,
	0x69, 0x65, 0x72, 0x44, 0x65, 0x6c, 0x65, 0x67, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x00, 0x52,
	0x14, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x44, 0x65, 0x6c, 0x65, 0x67,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x69, 0x0a, 0x14, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x5f, 0x74,
	0x6f, 0x5f, 0x6b, 0x65, 0x79, 0x5f, 0x6d, 0x61, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x36, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x64, 0x69, 0x67, 0x69, 0x74, 0x61,
	0x6c, 0x61, 0x73, 0x73, 0x65, 0x74, 0x2e, 0x63, 0x61, 0x6e, 0x74, 0x6f, 0x6e, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x76, 0x30, 0x2e, 0x4f, 0x77, 0x6e, 0x65, 0x72, 0x54,
	0x6f, 0x4b, 0x65, 0x79, 0x4d, 0x61, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x48, 0x00, 0x52, 0x11, 0x6f,
	0x77, 0x6e, 0x65, 0x72, 0x54, 0x6f, 0x4b, 0x65, 0x79, 0x4d, 0x61, 0x70, 0x70, 0x69, 0x6e, 0x67,
	0x12, 0x6b, 0x0a, 0x14, 0x70, 0x61, 0x72, 0x74, 0x79, 0x5f, 0x74, 0x6f, 0x5f, 0x70, 0x61, 0x72,
	0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x37,
	0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x64, 0x69, 0x67, 0x69, 0x74, 0x61, 0x6c, 0x61, 0x73, 0x73, 0x65,
	0x74, 0x2e, 0x63, 0x61, 0x6e, 0x74, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f,
	0x6c, 0x2e, 0x76, 0x30, 0x2e, 0x50, 0x61, 0x72, 0x74, 0x79, 0x54, 0x6f, 0x50, 0x61, 0x72, 0x74,
	0x69, 0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x48, 0x00, 0x52, 0x12, 0x70, 0x61, 0x72, 0x74, 0x79,
	0x54, 0x6f, 0x50, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x12, 0x7e, 0x0a,
	0x1b, 0x73, 0x69, 0x67, 0x6e, 0x65, 0x64, 0x5f, 0x6c, 0x65, 0x67, 0x61, 0x6c, 0x5f, 0x69, 0x64,
	0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x5f, 0x63, 0x6c, 0x61, 0x69, 0x6d, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x3d, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x64, 0x69, 0x67, 0x69, 0x74, 0x61, 0x6c,
	0x61, 0x73, 0x73, 0x65, 0x74, 0x2e, 0x63, 0x61, 0x6e, 0x74, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x76, 0x30, 0x2e, 0x53, 0x69, 0x67, 0x6e, 0x65, 0x64, 0x4c,
	0x65, 0x67, 0x61, 0x6c, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x43, 0x6c, 0x61, 0x69,
	0x6d, 0x48, 0x00, 0x52, 0x18, 0x73, 0x69, 0x67, 0x6e, 0x65, 0x64, 0x4c, 0x65, 0x67, 0x61, 0x6c,
	0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x43, 0x6c, 0x61, 0x69, 0x6d, 0x12, 0x64, 0x0a,
	0x11, 0x70, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x5f, 0x73, 0x74, 0x61,
	0x74, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x35, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x64,
	0x69, 0x67, 0x69, 0x74, 0x61, 0x6c, 0x61, 0x73, 0x73, 0x65, 0x74, 0x2e, 0x63, 0x61, 0x6e, 0x74,
	0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x76, 0x30, 0x2e, 0x50,
	0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x53, 0x74, 0x61, 0x74, 0x65, 0x48,
	0x00, 0x52, 0x10, 0x70, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x53, 0x74,
	0x61, 0x74, 0x65, 0x12, 0x5e, 0x0a, 0x0f, 0x76, 0x65, 0x74, 0x74, 0x65, 0x64, 0x5f, 0x70, 0x61,
	0x63, 0x6b, 0x61, 0x67, 0x65, 0x73, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x33, 0x2e, 0x63,
	0x6f, 0x6d, 0x2e, 0x64, 0x69, 0x67, 0x69, 0x74, 0x61, 0x6c, 0x61, 0x73, 0x73, 0x65, 0x74, 0x2e,
	0x63, 0x61, 0x6e, 0x74, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e,
	0x76, 0x30, 0x2e, 0x56, 0x65, 0x74, 0x74, 0x65, 0x64, 0x50, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65,
	0x73, 0x48, 0x00, 0x52, 0x0e, 0x76, 0x65, 0x74, 0x74, 0x65, 0x64, 0x50, 0x61, 0x63, 0x6b, 0x61,
	0x67, 0x65, 0x73, 0x12, 0x6e, 0x0a, 0x15, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x74, 0x6f, 0x72, 0x5f,
	0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x0a, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x38, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x64, 0x69, 0x67, 0x69, 0x74, 0x61, 0x6c,
	0x61, 0x73, 0x73, 0x65, 0x74, 0x2e, 0x63, 0x61, 0x6e, 0x74, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x76, 0x30, 0x2e, 0x4d, 0x65, 0x64, 0x69, 0x61, 0x74, 0x6f,
	0x72, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x48, 0x00, 0x52, 0x13,
	0x6d, 0x65, 0x64, 0x69, 0x61, 0x74, 0x6f, 0x72, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x53, 0x74,
	0x61, 0x74, 0x65, 0x42, 0x09, 0x0a, 0x07, 0x6d, 0x61, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x22, 0x9b,
	0x01, 0x0a, 0x16, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74,
	0x65, 0x72, 0x73, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x64, 0x6f, 0x6d,
	0x61, 0x69, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x64, 0x6f, 0x6d, 0x61, 0x69,
	0x6e, 0x12, 0x69, 0x0a, 0x11, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x5f, 0x70, 0x61, 0x72, 0x61,
	0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3c, 0x2e, 0x63,
	0x6f, 0x6d, 0x2e, 0x64, 0x69, 0x67, 0x69, 0x74, 0x61, 0x6c, 0x61, 0x73, 0x73, 0x65, 0x74, 0x2e,
	0x63, 0x61, 0x6e, 0x74, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e,
	0x76, 0x30, 0x2e, 0x44, 0x79, 0x6e, 0x61, 0x6d, 0x69, 0x63, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e,
	0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x52, 0x10, 0x64, 0x6f, 0x6d, 0x61,
	0x69, 0x6e, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x22, 0xa1, 0x01, 0x0a,
	0x1b, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x47, 0x6f, 0x76, 0x65, 0x72, 0x6e, 0x61, 0x6e, 0x63,
	0x65, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x77, 0x0a, 0x18,
	0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x5f, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72,
	0x73, 0x5f, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3b,
	0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x64, 0x69, 0x67, 0x69, 0x74, 0x61, 0x6c, 0x61, 0x73, 0x73, 0x65,
	0x74, 0x2e, 0x63, 0x61, 0x6e, 0x74, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f,
	0x6c, 0x2e, 0x76, 0x30, 0x2e, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x50, 0x61, 0x72, 0x61, 0x6d,
	0x65, 0x74, 0x65, 0x72, 0x73, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x48, 0x00, 0x52, 0x16, 0x64,
	0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x43,
	0x68, 0x61, 0x6e, 0x67, 0x65, 0x42, 0x09, 0x0a, 0x07, 0x6d, 0x61, 0x70, 0x70, 0x69, 0x6e, 0x67,
	0x22, 0xf4, 0x01, 0x0a, 0x13, 0x54, 0x6f, 0x70, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x54, 0x72, 0x61,
	0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x5d, 0x0a, 0x0c, 0x73, 0x74, 0x61, 0x74,
	0x65, 0x5f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x38,
	0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x64, 0x69, 0x67, 0x69, 0x74, 0x61, 0x6c, 0x61, 0x73, 0x73, 0x65,
	0x74, 0x2e, 0x63, 0x61, 0x6e, 0x74, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f,
	0x6c, 0x2e, 0x76, 0x30, 0x2e, 0x54, 0x6f, 0x70, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x53, 0x74, 0x61,
	0x74, 0x65, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x48, 0x00, 0x52, 0x0b, 0x73, 0x74, 0x61, 0x74,
	0x65, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x12, 0x6f, 0x0a, 0x11, 0x64, 0x6f, 0x6d, 0x61, 0x69,
	0x6e, 0x5f, 0x67, 0x6f, 0x76, 0x65, 0x72, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x40, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x64, 0x69, 0x67, 0x69, 0x74, 0x61, 0x6c,
	0x61, 0x73, 0x73, 0x65, 0x74, 0x2e, 0x63, 0x61, 0x6e, 0x74, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x76, 0x30, 0x2e, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x47,
	0x6f, 0x76, 0x65, 0x72, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x48, 0x00, 0x52, 0x10, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x47, 0x6f,
	0x76, 0x65, 0x72, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x42, 0x0d, 0x0a, 0x0b, 0x74, 0x72, 0x61, 0x6e,
	0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0xd0, 0x01, 0x0a, 0x19, 0x53, 0x69, 0x67, 0x6e,
	0x65, 0x64, 0x54, 0x6f, 0x70, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x20, 0x0a, 0x0b, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0b, 0x74, 0x72, 0x61, 0x6e,
	0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x45, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x33, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x64, 0x69, 0x67, 0x69, 0x74,
	0x61, 0x6c, 0x61, 0x73, 0x73, 0x65, 0x74, 0x2e, 0x63, 0x61, 0x6e, 0x74, 0x6f, 0x6e, 0x2e, 0x63,
	0x72, 0x79, 0x70, 0x74, 0x6f, 0x2e, 0x76, 0x30, 0x2e, 0x53, 0x69, 0x67, 0x6e, 0x69, 0x6e, 0x67,
	0x50, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x4b, 0x65, 0x79, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x4a,
	0x0a, 0x09, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x2c, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x64, 0x69, 0x67, 0x69, 0x74, 0x61, 0x6c, 0x61,
	0x73, 0x73, 0x65, 0x74, 0x2e, 0x63, 0x61, 0x6e, 0x74, 0x6f, 0x6e, 0x2e, 0x63, 0x72, 0x79, 0x70,
	0x74, 0x6f, 0x2e, 0x76, 0x30, 0x2e, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x52,
	0x09, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x22, 0xaf, 0x01, 0x0a, 0x20, 0x44,
	0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x54, 0x6f, 0x70, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x54, 0x72, 0x61,
	0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12,
	0x4a, 0x0a, 0x09, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x64, 0x69, 0x67, 0x69, 0x74, 0x61, 0x6c,
	0x61, 0x73, 0x73, 0x65, 0x74, 0x2e, 0x63, 0x61, 0x6e, 0x74, 0x6f, 0x6e, 0x2e, 0x63, 0x72, 0x79,
	0x70, 0x74, 0x6f, 0x2e, 0x76, 0x30, 0x2e, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65,
	0x52, 0x09, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x64,
	0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x49, 0x64, 0x12, 0x22, 0x0a, 0x0c, 0x74, 0x72, 0x61, 0x6e,
	0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0c, 0x52, 0x0c,
	0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x22, 0xe7, 0x01, 0x0a,
	0x22, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x54, 0x6f, 0x70, 0x6f, 0x6c, 0x6f, 0x67,
	0x79, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x21, 0x0a, 0x0c, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x65, 0x64,
	0x5f, 0x62, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x72, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x65, 0x64, 0x42, 0x79, 0x12, 0x20, 0x0a, 0x0b, 0x70, 0x61, 0x72, 0x74, 0x69, 0x63,
	0x69, 0x70, 0x61, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x70, 0x61, 0x72,
	0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x72, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x72, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x64, 0x12, 0x40, 0x0a, 0x1c, 0x73, 0x69, 0x67, 0x6e, 0x65,
	0x64, 0x5f, 0x74, 0x6f, 0x70, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x5f, 0x74, 0x72, 0x61, 0x6e, 0x73,
	0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0c, 0x52, 0x1a, 0x73,
	0x69, 0x67, 0x6e, 0x65, 0x64, 0x54, 0x6f, 0x70, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x54, 0x72, 0x61,
	0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x1b, 0x0a, 0x09, 0x64, 0x6f, 0x6d,
	0x61, 0x69, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x64, 0x6f,
	0x6d, 0x61, 0x69, 0x6e, 0x49, 0x64, 0x22, 0xbf, 0x04, 0x0a, 0x23, 0x52, 0x65, 0x67, 0x69, 0x73,
	0x74, 0x65, 0x72, 0x54, 0x6f, 0x70, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x54, 0x72, 0x61, 0x6e, 0x73,
	0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x21,
	0x0a, 0x0c, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x65, 0x64, 0x5f, 0x62, 0x79, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x65, 0x64, 0x42,
	0x79, 0x12, 0x20, 0x0a, 0x0b, 0x70, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6e, 0x74,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x70, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70,
	0x61, 0x6e, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x69,
	0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x49, 0x64, 0x12, 0x69, 0x0a, 0x07, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x18, 0x04, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x4f, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x64, 0x69, 0x67, 0x69, 0x74, 0x61,
	0x6c, 0x61, 0x73, 0x73, 0x65, 0x74, 0x2e, 0x63, 0x61, 0x6e, 0x74, 0x6f, 0x6e, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x76, 0x30, 0x2e, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74,
	0x65, 0x72, 0x54, 0x6f, 0x70, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x52, 0x65,
	0x73, 0x75, 0x6c, 0x74, 0x52, 0x07, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x12, 0x1b, 0x0a,
	0x09, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x49, 0x64, 0x1a, 0xab, 0x02, 0x0a, 0x06, 0x52,
	0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x75, 0x6e, 0x69, 0x71, 0x75, 0x65, 0x5f,
	0x70, 0x61, 0x74, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x75, 0x6e, 0x69, 0x71,
	0x75, 0x65, 0x50, 0x61, 0x74, 0x68, 0x12, 0x6b, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x55, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x64, 0x69, 0x67, 0x69,
	0x74, 0x61, 0x6c, 0x61, 0x73, 0x73, 0x65, 0x74, 0x2e, 0x63, 0x61, 0x6e, 0x74, 0x6f, 0x6e, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x76, 0x30, 0x2e, 0x52, 0x65, 0x67, 0x69,
	0x73, 0x74, 0x65, 0x72, 0x54, 0x6f, 0x70, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x54, 0x72, 0x61, 0x6e,
	0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e,
	0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x05, 0x73, 0x74,
	0x61, 0x74, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x5f, 0x6d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x65, 0x72, 0x72, 0x6f,
	0x72, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0x6e, 0x0a, 0x05, 0x53, 0x74, 0x61, 0x74,
	0x65, 0x12, 0x11, 0x0a, 0x0d, 0x4d, 0x49, 0x53, 0x53, 0x49, 0x4e, 0x47, 0x5f, 0x53, 0x54, 0x41,
	0x54, 0x45, 0x10, 0x00, 0x12, 0x0d, 0x0a, 0x09, 0x52, 0x45, 0x51, 0x55, 0x45, 0x53, 0x54, 0x45,
	0x44, 0x10, 0x01, 0x12, 0x0a, 0x0a, 0x06, 0x46, 0x41, 0x49, 0x4c, 0x45, 0x44, 0x10, 0x02, 0x12,
	0x0c, 0x0a, 0x08, 0x52, 0x45, 0x4a, 0x45, 0x43, 0x54, 0x45, 0x44, 0x10, 0x03, 0x12, 0x0c, 0x0a,
	0x08, 0x41, 0x43, 0x43, 0x45, 0x50, 0x54, 0x45, 0x44, 0x10, 0x04, 0x12, 0x0d, 0x0a, 0x09, 0x44,
	0x55, 0x50, 0x4c, 0x49, 0x43, 0x41, 0x54, 0x45, 0x10, 0x05, 0x12, 0x0c, 0x0a, 0x08, 0x4f, 0x42,
	0x53, 0x4f, 0x4c, 0x45, 0x54, 0x45, 0x10, 0x06, 0x2a, 0x34, 0x0a, 0x10, 0x54, 0x6f, 0x70, 0x6f,
	0x6c, 0x6f, 0x67, 0x79, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x4f, 0x70, 0x12, 0x07, 0x0a, 0x03,
	0x41, 0x64, 0x64, 0x10, 0x00, 0x12, 0x0a, 0x0a, 0x06, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x10,
	0x01, 0x12, 0x0b, 0x0a, 0x07, 0x52, 0x65, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x10, 0x02, 0x2a, 0x3a,
	0x0a, 0x0a, 0x54, 0x72, 0x75, 0x73, 0x74, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x12, 0x15, 0x0a, 0x11,
	0x4d, 0x69, 0x73, 0x73, 0x69, 0x6e, 0x67, 0x54, 0x72, 0x75, 0x73, 0x74, 0x4c, 0x65, 0x76, 0x65,
	0x6c, 0x10, 0x00, 0x12, 0x0c, 0x0a, 0x08, 0x4f, 0x72, 0x64, 0x69, 0x6e, 0x61, 0x72, 0x79, 0x10,
	0x01, 0x12, 0x07, 0x0a, 0x03, 0x56, 0x69, 0x70, 0x10, 0x02, 0x2a, 0x7a, 0x0a, 0x15, 0x50, 0x61,
	0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x50, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73,
	0x69, 0x6f, 0x6e, 0x12, 0x20, 0x0a, 0x1c, 0x4d, 0x69, 0x73, 0x73, 0x69, 0x6e, 0x67, 0x50, 0x61,
	0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x50, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73,
	0x69, 0x6f, 0x6e, 0x10, 0x00, 0x12, 0x0e, 0x0a, 0x0a, 0x53, 0x75, 0x62, 0x6d, 0x69, 0x73, 0x73,
	0x69, 0x6f, 0x6e, 0x10, 0x01, 0x12, 0x10, 0x0a, 0x0c, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x72, 0x6d,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x10, 0x02, 0x12, 0x0f, 0x0a, 0x0b, 0x4f, 0x62, 0x73, 0x65, 0x72,
	0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x10, 0x03, 0x12, 0x0c, 0x0a, 0x08, 0x44, 0x69, 0x73, 0x61,
	0x62, 0x6c, 0x65, 0x64, 0x10, 0x04, 0x2a, 0x41, 0x0a, 0x0b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x53, 0x69, 0x64, 0x65, 0x12, 0x16, 0x0a, 0x12, 0x4d, 0x69, 0x73, 0x73, 0x69, 0x6e, 0x67,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x53, 0x69, 0x64, 0x65, 0x10, 0x00, 0x12, 0x08, 0x0a,
	0x04, 0x42, 0x6f, 0x74, 0x68, 0x10, 0x01, 0x12, 0x08, 0x0a, 0x04, 0x46, 0x72, 0x6f, 0x6d, 0x10,
	0x02, 0x12, 0x06, 0x0a, 0x02, 0x54, 0x6f, 0x10, 0x03, 0x42, 0x54, 0x5a, 0x52, 0x67, 0x69, 0x74,
	0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x64, 0x69, 0x67, 0x69, 0x74, 0x61, 0x6c, 0x2d,
	0x61, 0x73, 0x73, 0x65, 0x74, 0x2f, 0x64, 0x61, 0x7a, 0x6c, 0x2d, 0x63, 0x6c, 0x69, 0x65, 0x6e,
	0x74, 0x2f, 0x76, 0x38, 0x2f, 0x67, 0x6f, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x63, 0x6f, 0x6d, 0x2f,
	0x64, 0x69, 0x67, 0x69, 0x74, 0x61, 0x6c, 0x61, 0x73, 0x73, 0x65, 0x74, 0x2f, 0x63, 0x61, 0x6e,
	0x74, 0x6f, 0x6e, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2f, 0x76, 0x30, 0x62,
	0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_com_digitalasset_canton_protocol_v0_topology_proto_rawDescOnce sync.Once
	file_com_digitalasset_canton_protocol_v0_topology_proto_rawDescData = file_com_digitalasset_canton_protocol_v0_topology_proto_rawDesc
)

func file_com_digitalasset_canton_protocol_v0_topology_proto_rawDescGZIP() []byte {
	file_com_digitalasset_canton_protocol_v0_topology_proto_rawDescOnce.Do(func() {
		file_com_digitalasset_canton_protocol_v0_topology_proto_rawDescData = protoimpl.X.CompressGZIP(file_com_digitalasset_canton_protocol_v0_topology_proto_rawDescData)
	})
	return file_com_digitalasset_canton_protocol_v0_topology_proto_rawDescData
}

var file_com_digitalasset_canton_protocol_v0_topology_proto_enumTypes = make([]protoimpl.EnumInfo, 5)
var file_com_digitalasset_canton_protocol_v0_topology_proto_msgTypes = make([]protoimpl.MessageInfo, 18)
var file_com_digitalasset_canton_protocol_v0_topology_proto_goTypes = []any{
	(TopologyChangeOp)(0),      // 0: com.digitalasset.canton.protocol.v0.TopologyChangeOp
	(TrustLevel)(0),            // 1: com.digitalasset.canton.protocol.v0.TrustLevel
	(ParticipantPermission)(0), // 2: com.digitalasset.canton.protocol.v0.ParticipantPermission
	(RequestSide)(0),           // 3: com.digitalasset.canton.protocol.v0.RequestSide
	(RegisterTopologyTransactionResponse_Result_State)(0), // 4: com.digitalasset.canton.protocol.v0.RegisterTopologyTransactionResponse.Result.State
	(*ParticipantState)(nil),                              // 5: com.digitalasset.canton.protocol.v0.ParticipantState
	(*PartyToParticipant)(nil),                            // 6: com.digitalasset.canton.protocol.v0.PartyToParticipant
	(*MediatorDomainState)(nil),                           // 7: com.digitalasset.canton.protocol.v0.MediatorDomainState
	(*NamespaceDelegation)(nil),                           // 8: com.digitalasset.canton.protocol.v0.NamespaceDelegation
	(*IdentifierDelegation)(nil),                          // 9: com.digitalasset.canton.protocol.v0.IdentifierDelegation
	(*OwnerToKeyMapping)(nil),                             // 10: com.digitalasset.canton.protocol.v0.OwnerToKeyMapping
	(*SignedLegalIdentityClaim)(nil),                      // 11: com.digitalasset.canton.protocol.v0.SignedLegalIdentityClaim
	(*LegalIdentityClaim)(nil),                            // 12: com.digitalasset.canton.protocol.v0.LegalIdentityClaim
	(*VettedPackages)(nil),                                // 13: com.digitalasset.canton.protocol.v0.VettedPackages
	(*TopologyStateUpdate)(nil),                           // 14: com.digitalasset.canton.protocol.v0.TopologyStateUpdate
	(*DomainParametersChange)(nil),                        // 15: com.digitalasset.canton.protocol.v0.DomainParametersChange
	(*DomainGovernanceTransaction)(nil),                   // 16: com.digitalasset.canton.protocol.v0.DomainGovernanceTransaction
	(*TopologyTransaction)(nil),                           // 17: com.digitalasset.canton.protocol.v0.TopologyTransaction
	(*SignedTopologyTransaction)(nil),                     // 18: com.digitalasset.canton.protocol.v0.SignedTopologyTransaction
	(*DomainTopologyTransactionMessage)(nil),              // 19: com.digitalasset.canton.protocol.v0.DomainTopologyTransactionMessage
	(*RegisterTopologyTransactionRequest)(nil),            // 20: com.digitalasset.canton.protocol.v0.RegisterTopologyTransactionRequest
	(*RegisterTopologyTransactionResponse)(nil),           // 21: com.digitalasset.canton.protocol.v0.RegisterTopologyTransactionResponse
	(*RegisterTopologyTransactionResponse_Result)(nil),    // 22: com.digitalasset.canton.protocol.v0.RegisterTopologyTransactionResponse.Result
	(*v0.SigningPublicKey)(nil),                           // 23: com.digitalasset.canton.crypto.v0.SigningPublicKey
	(*v0.PublicKey)(nil),                                  // 24: com.digitalasset.canton.crypto.v0.PublicKey
	(*v0.Signature)(nil),                                  // 25: com.digitalasset.canton.crypto.v0.Signature
	(*DynamicDomainParameters)(nil),                       // 26: com.digitalasset.canton.protocol.v0.DynamicDomainParameters
}
var file_com_digitalasset_canton_protocol_v0_topology_proto_depIdxs = []int32{
	3,  // 0: com.digitalasset.canton.protocol.v0.ParticipantState.side:type_name -> com.digitalasset.canton.protocol.v0.RequestSide
	2,  // 1: com.digitalasset.canton.protocol.v0.ParticipantState.permission:type_name -> com.digitalasset.canton.protocol.v0.ParticipantPermission
	1,  // 2: com.digitalasset.canton.protocol.v0.ParticipantState.trust_level:type_name -> com.digitalasset.canton.protocol.v0.TrustLevel
	3,  // 3: com.digitalasset.canton.protocol.v0.PartyToParticipant.side:type_name -> com.digitalasset.canton.protocol.v0.RequestSide
	2,  // 4: com.digitalasset.canton.protocol.v0.PartyToParticipant.permission:type_name -> com.digitalasset.canton.protocol.v0.ParticipantPermission
	3,  // 5: com.digitalasset.canton.protocol.v0.MediatorDomainState.side:type_name -> com.digitalasset.canton.protocol.v0.RequestSide
	23, // 6: com.digitalasset.canton.protocol.v0.NamespaceDelegation.target_key:type_name -> com.digitalasset.canton.crypto.v0.SigningPublicKey
	23, // 7: com.digitalasset.canton.protocol.v0.IdentifierDelegation.target_key:type_name -> com.digitalasset.canton.crypto.v0.SigningPublicKey
	24, // 8: com.digitalasset.canton.protocol.v0.OwnerToKeyMapping.public_key:type_name -> com.digitalasset.canton.crypto.v0.PublicKey
	25, // 9: com.digitalasset.canton.protocol.v0.SignedLegalIdentityClaim.signature:type_name -> com.digitalasset.canton.crypto.v0.Signature
	0,  // 10: com.digitalasset.canton.protocol.v0.TopologyStateUpdate.operation:type_name -> com.digitalasset.canton.protocol.v0.TopologyChangeOp
	8,  // 11: com.digitalasset.canton.protocol.v0.TopologyStateUpdate.namespace_delegation:type_name -> com.digitalasset.canton.protocol.v0.NamespaceDelegation
	9,  // 12: com.digitalasset.canton.protocol.v0.TopologyStateUpdate.identifier_delegation:type_name -> com.digitalasset.canton.protocol.v0.IdentifierDelegation
	10, // 13: com.digitalasset.canton.protocol.v0.TopologyStateUpdate.owner_to_key_mapping:type_name -> com.digitalasset.canton.protocol.v0.OwnerToKeyMapping
	6,  // 14: com.digitalasset.canton.protocol.v0.TopologyStateUpdate.party_to_participant:type_name -> com.digitalasset.canton.protocol.v0.PartyToParticipant
	11, // 15: com.digitalasset.canton.protocol.v0.TopologyStateUpdate.signed_legal_identity_claim:type_name -> com.digitalasset.canton.protocol.v0.SignedLegalIdentityClaim
	5,  // 16: com.digitalasset.canton.protocol.v0.TopologyStateUpdate.participant_state:type_name -> com.digitalasset.canton.protocol.v0.ParticipantState
	13, // 17: com.digitalasset.canton.protocol.v0.TopologyStateUpdate.vetted_packages:type_name -> com.digitalasset.canton.protocol.v0.VettedPackages
	7,  // 18: com.digitalasset.canton.protocol.v0.TopologyStateUpdate.mediator_domain_state:type_name -> com.digitalasset.canton.protocol.v0.MediatorDomainState
	26, // 19: com.digitalasset.canton.protocol.v0.DomainParametersChange.domain_parameters:type_name -> com.digitalasset.canton.protocol.v0.DynamicDomainParameters
	15, // 20: com.digitalasset.canton.protocol.v0.DomainGovernanceTransaction.domain_parameters_change:type_name -> com.digitalasset.canton.protocol.v0.DomainParametersChange
	14, // 21: com.digitalasset.canton.protocol.v0.TopologyTransaction.state_update:type_name -> com.digitalasset.canton.protocol.v0.TopologyStateUpdate
	16, // 22: com.digitalasset.canton.protocol.v0.TopologyTransaction.domain_governance:type_name -> com.digitalasset.canton.protocol.v0.DomainGovernanceTransaction
	23, // 23: com.digitalasset.canton.protocol.v0.SignedTopologyTransaction.key:type_name -> com.digitalasset.canton.crypto.v0.SigningPublicKey
	25, // 24: com.digitalasset.canton.protocol.v0.SignedTopologyTransaction.signature:type_name -> com.digitalasset.canton.crypto.v0.Signature
	25, // 25: com.digitalasset.canton.protocol.v0.DomainTopologyTransactionMessage.signature:type_name -> com.digitalasset.canton.crypto.v0.Signature
	22, // 26: com.digitalasset.canton.protocol.v0.RegisterTopologyTransactionResponse.results:type_name -> com.digitalasset.canton.protocol.v0.RegisterTopologyTransactionResponse.Result
	4,  // 27: com.digitalasset.canton.protocol.v0.RegisterTopologyTransactionResponse.Result.state:type_name -> com.digitalasset.canton.protocol.v0.RegisterTopologyTransactionResponse.Result.State
	28, // [28:28] is the sub-list for method output_type
	28, // [28:28] is the sub-list for method input_type
	28, // [28:28] is the sub-list for extension type_name
	28, // [28:28] is the sub-list for extension extendee
	0,  // [0:28] is the sub-list for field type_name
}

func init() { file_com_digitalasset_canton_protocol_v0_topology_proto_init() }
func file_com_digitalasset_canton_protocol_v0_topology_proto_init() {
	if File_com_digitalasset_canton_protocol_v0_topology_proto != nil {
		return
	}
	file_com_digitalasset_canton_protocol_v0_sequencing_proto_init()
	file_com_digitalasset_canton_protocol_v0_topology_proto_msgTypes[7].OneofWrappers = []any{
		(*LegalIdentityClaim_X509Cert)(nil),
	}
	file_com_digitalasset_canton_protocol_v0_topology_proto_msgTypes[9].OneofWrappers = []any{
		(*TopologyStateUpdate_NamespaceDelegation)(nil),
		(*TopologyStateUpdate_IdentifierDelegation)(nil),
		(*TopologyStateUpdate_OwnerToKeyMapping)(nil),
		(*TopologyStateUpdate_PartyToParticipant)(nil),
		(*TopologyStateUpdate_SignedLegalIdentityClaim)(nil),
		(*TopologyStateUpdate_ParticipantState)(nil),
		(*TopologyStateUpdate_VettedPackages)(nil),
		(*TopologyStateUpdate_MediatorDomainState)(nil),
	}
	file_com_digitalasset_canton_protocol_v0_topology_proto_msgTypes[11].OneofWrappers = []any{
		(*DomainGovernanceTransaction_DomainParametersChange)(nil),
	}
	file_com_digitalasset_canton_protocol_v0_topology_proto_msgTypes[12].OneofWrappers = []any{
		(*TopologyTransaction_StateUpdate)(nil),
		(*TopologyTransaction_DomainGovernance)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_com_digitalasset_canton_protocol_v0_topology_proto_rawDesc,
			NumEnums:      5,
			NumMessages:   18,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_com_digitalasset_canton_protocol_v0_topology_proto_goTypes,
		DependencyIndexes: file_com_digitalasset_canton_protocol_v0_topology_proto_depIdxs,
		EnumInfos:         file_com_digitalasset_canton_protocol_v0_topology_proto_enumTypes,
		MessageInfos:      file_com_digitalasset_canton_protocol_v0_topology_proto_msgTypes,
	}.Build()
	File_com_digitalasset_canton_protocol_v0_topology_proto = out.File
	file_com_digitalasset_canton_protocol_v0_topology_proto_rawDesc = nil
	file_com_digitalasset_canton_protocol_v0_topology_proto_goTypes = nil
	file_com_digitalasset_canton_protocol_v0_topology_proto_depIdxs = nil
}
