// Copyright (c) 2017-2025 Digital Asset (Switzerland) GmbH and/or its affiliates. All rights reserved.
// SPDX-License-Identifier: Apache-2.0
// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.35.2
// 	protoc        v5.27.2
// source: com/digitalasset/canton/protocol/v2/participant_transaction.proto

package v2

import (
	v0 "github.com/digital-asset/dazl-client/v8/go/api/com/digitalasset/canton/crypto/v0"
	v01 "github.com/digital-asset/dazl-client/v8/go/api/com/digitalasset/canton/protocol/v0"
	v1 "github.com/digital-asset/dazl-client/v8/go/api/com/digitalasset/canton/protocol/v1"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type ViewCommonData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Salt      *v0.Salt          `protobuf:"bytes,1,opt,name=salt,proto3" json:"salt,omitempty"`
	Informees []*v01.TrustParty `protobuf:"bytes,2,rep,name=informees,proto3" json:"informees,omitempty"`
	Quorums   []*v01.Quorum     `protobuf:"bytes,3,rep,name=quorums,proto3" json:"quorums,omitempty"`
}

func (x *ViewCommonData) Reset() {
	*x = ViewCommonData{}
	mi := &file_com_digitalasset_canton_protocol_v2_participant_transaction_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ViewCommonData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ViewCommonData) ProtoMessage() {}

func (x *ViewCommonData) ProtoReflect() protoreflect.Message {
	mi := &file_com_digitalasset_canton_protocol_v2_participant_transaction_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ViewCommonData.ProtoReflect.Descriptor instead.
func (*ViewCommonData) Descriptor() ([]byte, []int) {
	return file_com_digitalasset_canton_protocol_v2_participant_transaction_proto_rawDescGZIP(), []int{0}
}

func (x *ViewCommonData) GetSalt() *v0.Salt {
	if x != nil {
		return x.Salt
	}
	return nil
}

func (x *ViewCommonData) GetInformees() []*v01.TrustParty {
	if x != nil {
		return x.Informees
	}
	return nil
}

func (x *ViewCommonData) GetQuorums() []*v01.Quorum {
	if x != nil {
		return x.Quorums
	}
	return nil
}

type SessionKeyLookup struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SessionKeyRandomness []byte `protobuf:"bytes,1,opt,name=session_key_randomness,json=sessionKeyRandomness,proto3" json:"session_key_randomness,omitempty"`
	Fingerprint          string `protobuf:"bytes,2,opt,name=fingerprint,proto3" json:"fingerprint,omitempty"`
}

func (x *SessionKeyLookup) Reset() {
	*x = SessionKeyLookup{}
	mi := &file_com_digitalasset_canton_protocol_v2_participant_transaction_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SessionKeyLookup) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SessionKeyLookup) ProtoMessage() {}

func (x *SessionKeyLookup) ProtoReflect() protoreflect.Message {
	mi := &file_com_digitalasset_canton_protocol_v2_participant_transaction_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SessionKeyLookup.ProtoReflect.Descriptor instead.
func (*SessionKeyLookup) Descriptor() ([]byte, []int) {
	return file_com_digitalasset_canton_protocol_v2_participant_transaction_proto_rawDescGZIP(), []int{1}
}

func (x *SessionKeyLookup) GetSessionKeyRandomness() []byte {
	if x != nil {
		return x.SessionKeyRandomness
	}
	return nil
}

func (x *SessionKeyLookup) GetFingerprint() string {
	if x != nil {
		return x.Fingerprint
	}
	return ""
}

type EncryptedViewMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ViewTree                      []byte                `protobuf:"bytes,1,opt,name=view_tree,json=viewTree,proto3" json:"view_tree,omitempty"`
	EncryptionScheme              v0.SymmetricKeyScheme `protobuf:"varint,2,opt,name=encryption_scheme,json=encryptionScheme,proto3,enum=com.digitalasset.canton.crypto.v0.SymmetricKeyScheme" json:"encryption_scheme,omitempty"`
	SubmitterParticipantSignature *v0.Signature         `protobuf:"bytes,3,opt,name=submitter_participant_signature,json=submitterParticipantSignature,proto3" json:"submitter_participant_signature,omitempty"`
	ViewHash                      []byte                `protobuf:"bytes,4,opt,name=view_hash,json=viewHash,proto3" json:"view_hash,omitempty"`
	Randomness                    []byte                `protobuf:"bytes,5,opt,name=randomness,proto3" json:"randomness,omitempty"`
	SessionKeyRandomness          []*SessionKeyLookup   `protobuf:"bytes,6,rep,name=session_key_randomness,json=sessionKeyRandomness,proto3" json:"session_key_randomness,omitempty"`
	DomainId                      string                `protobuf:"bytes,7,opt,name=domain_id,json=domainId,proto3" json:"domain_id,omitempty"`
	ViewType                      v01.ViewType          `protobuf:"varint,8,opt,name=view_type,json=viewType,proto3,enum=com.digitalasset.canton.protocol.v0.ViewType" json:"view_type,omitempty"`
}

func (x *EncryptedViewMessage) Reset() {
	*x = EncryptedViewMessage{}
	mi := &file_com_digitalasset_canton_protocol_v2_participant_transaction_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *EncryptedViewMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EncryptedViewMessage) ProtoMessage() {}

func (x *EncryptedViewMessage) ProtoReflect() protoreflect.Message {
	mi := &file_com_digitalasset_canton_protocol_v2_participant_transaction_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EncryptedViewMessage.ProtoReflect.Descriptor instead.
func (*EncryptedViewMessage) Descriptor() ([]byte, []int) {
	return file_com_digitalasset_canton_protocol_v2_participant_transaction_proto_rawDescGZIP(), []int{2}
}

func (x *EncryptedViewMessage) GetViewTree() []byte {
	if x != nil {
		return x.ViewTree
	}
	return nil
}

func (x *EncryptedViewMessage) GetEncryptionScheme() v0.SymmetricKeyScheme {
	if x != nil {
		return x.EncryptionScheme
	}
	return v0.SymmetricKeyScheme(0)
}

func (x *EncryptedViewMessage) GetSubmitterParticipantSignature() *v0.Signature {
	if x != nil {
		return x.SubmitterParticipantSignature
	}
	return nil
}

func (x *EncryptedViewMessage) GetViewHash() []byte {
	if x != nil {
		return x.ViewHash
	}
	return nil
}

func (x *EncryptedViewMessage) GetRandomness() []byte {
	if x != nil {
		return x.Randomness
	}
	return nil
}

func (x *EncryptedViewMessage) GetSessionKeyRandomness() []*SessionKeyLookup {
	if x != nil {
		return x.SessionKeyRandomness
	}
	return nil
}

func (x *EncryptedViewMessage) GetDomainId() string {
	if x != nil {
		return x.DomainId
	}
	return ""
}

func (x *EncryptedViewMessage) GetViewType() v01.ViewType {
	if x != nil {
		return x.ViewType
	}
	return v01.ViewType(0)
}

type ViewParticipantData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Salt                           *v0.Salt                                 `protobuf:"bytes,1,opt,name=salt,proto3" json:"salt,omitempty"`
	CoreInputs                     []*v1.InputContract                      `protobuf:"bytes,2,rep,name=core_inputs,json=coreInputs,proto3" json:"core_inputs,omitempty"`
	CreatedCore                    []*v1.CreatedContract                    `protobuf:"bytes,3,rep,name=created_core,json=createdCore,proto3" json:"created_core,omitempty"`
	CreatedInSubviewArchivedInCore []string                                 `protobuf:"bytes,4,rep,name=created_in_subview_archived_in_core,json=createdInSubviewArchivedInCore,proto3" json:"created_in_subview_archived_in_core,omitempty"`
	ResolvedKeys                   []*v01.ViewParticipantData_ResolvedKey   `protobuf:"bytes,5,rep,name=resolved_keys,json=resolvedKeys,proto3" json:"resolved_keys,omitempty"`
	ActionDescription              *v1.ActionDescription                    `protobuf:"bytes,6,opt,name=action_description,json=actionDescription,proto3" json:"action_description,omitempty"`
	RollbackContext                *v01.ViewParticipantData_RollbackContext `protobuf:"bytes,7,opt,name=rollback_context,json=rollbackContext,proto3" json:"rollback_context,omitempty"`
}

func (x *ViewParticipantData) Reset() {
	*x = ViewParticipantData{}
	mi := &file_com_digitalasset_canton_protocol_v2_participant_transaction_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ViewParticipantData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ViewParticipantData) ProtoMessage() {}

func (x *ViewParticipantData) ProtoReflect() protoreflect.Message {
	mi := &file_com_digitalasset_canton_protocol_v2_participant_transaction_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ViewParticipantData.ProtoReflect.Descriptor instead.
func (*ViewParticipantData) Descriptor() ([]byte, []int) {
	return file_com_digitalasset_canton_protocol_v2_participant_transaction_proto_rawDescGZIP(), []int{3}
}

func (x *ViewParticipantData) GetSalt() *v0.Salt {
	if x != nil {
		return x.Salt
	}
	return nil
}

func (x *ViewParticipantData) GetCoreInputs() []*v1.InputContract {
	if x != nil {
		return x.CoreInputs
	}
	return nil
}

func (x *ViewParticipantData) GetCreatedCore() []*v1.CreatedContract {
	if x != nil {
		return x.CreatedCore
	}
	return nil
}

func (x *ViewParticipantData) GetCreatedInSubviewArchivedInCore() []string {
	if x != nil {
		return x.CreatedInSubviewArchivedInCore
	}
	return nil
}

func (x *ViewParticipantData) GetResolvedKeys() []*v01.ViewParticipantData_ResolvedKey {
	if x != nil {
		return x.ResolvedKeys
	}
	return nil
}

func (x *ViewParticipantData) GetActionDescription() *v1.ActionDescription {
	if x != nil {
		return x.ActionDescription
	}
	return nil
}

func (x *ViewParticipantData) GetRollbackContext() *v01.ViewParticipantData_RollbackContext {
	if x != nil {
		return x.RollbackContext
	}
	return nil
}

type ActionDescription struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Description:
	//
	//	*ActionDescription_Create
	//	*ActionDescription_Exercise
	//	*ActionDescription_Fetch
	//	*ActionDescription_LookupByKey
	Description isActionDescription_Description `protobuf_oneof:"description"`
}

func (x *ActionDescription) Reset() {
	*x = ActionDescription{}
	mi := &file_com_digitalasset_canton_protocol_v2_participant_transaction_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ActionDescription) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ActionDescription) ProtoMessage() {}

func (x *ActionDescription) ProtoReflect() protoreflect.Message {
	mi := &file_com_digitalasset_canton_protocol_v2_participant_transaction_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ActionDescription.ProtoReflect.Descriptor instead.
func (*ActionDescription) Descriptor() ([]byte, []int) {
	return file_com_digitalasset_canton_protocol_v2_participant_transaction_proto_rawDescGZIP(), []int{4}
}

func (m *ActionDescription) GetDescription() isActionDescription_Description {
	if m != nil {
		return m.Description
	}
	return nil
}

func (x *ActionDescription) GetCreate() *v01.ActionDescription_CreateActionDescription {
	if x, ok := x.GetDescription().(*ActionDescription_Create); ok {
		return x.Create
	}
	return nil
}

func (x *ActionDescription) GetExercise() *ActionDescription_ExerciseActionDescription {
	if x, ok := x.GetDescription().(*ActionDescription_Exercise); ok {
		return x.Exercise
	}
	return nil
}

func (x *ActionDescription) GetFetch() *v01.ActionDescription_FetchActionDescription {
	if x, ok := x.GetDescription().(*ActionDescription_Fetch); ok {
		return x.Fetch
	}
	return nil
}

func (x *ActionDescription) GetLookupByKey() *v01.ActionDescription_LookupByKeyActionDescription {
	if x, ok := x.GetDescription().(*ActionDescription_LookupByKey); ok {
		return x.LookupByKey
	}
	return nil
}

type isActionDescription_Description interface {
	isActionDescription_Description()
}

type ActionDescription_Create struct {
	Create *v01.ActionDescription_CreateActionDescription `protobuf:"bytes,1,opt,name=create,proto3,oneof"`
}

type ActionDescription_Exercise struct {
	Exercise *ActionDescription_ExerciseActionDescription `protobuf:"bytes,2,opt,name=exercise,proto3,oneof"`
}

type ActionDescription_Fetch struct {
	Fetch *v01.ActionDescription_FetchActionDescription `protobuf:"bytes,3,opt,name=fetch,proto3,oneof"`
}

type ActionDescription_LookupByKey struct {
	LookupByKey *v01.ActionDescription_LookupByKeyActionDescription `protobuf:"bytes,4,opt,name=lookup_by_key,json=lookupByKey,proto3,oneof"`
}

func (*ActionDescription_Create) isActionDescription_Description() {}

func (*ActionDescription_Exercise) isActionDescription_Description() {}

func (*ActionDescription_Fetch) isActionDescription_Description() {}

func (*ActionDescription_LookupByKey) isActionDescription_Description() {}

type CreatedContract struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Contract       *SerializableContract `protobuf:"bytes,1,opt,name=contract,proto3" json:"contract,omitempty"`
	ConsumedInCore bool                  `protobuf:"varint,2,opt,name=consumed_in_core,json=consumedInCore,proto3" json:"consumed_in_core,omitempty"`
	RolledBack     bool                  `protobuf:"varint,3,opt,name=rolled_back,json=rolledBack,proto3" json:"rolled_back,omitempty"`
}

func (x *CreatedContract) Reset() {
	*x = CreatedContract{}
	mi := &file_com_digitalasset_canton_protocol_v2_participant_transaction_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreatedContract) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreatedContract) ProtoMessage() {}

func (x *CreatedContract) ProtoReflect() protoreflect.Message {
	mi := &file_com_digitalasset_canton_protocol_v2_participant_transaction_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreatedContract.ProtoReflect.Descriptor instead.
func (*CreatedContract) Descriptor() ([]byte, []int) {
	return file_com_digitalasset_canton_protocol_v2_participant_transaction_proto_rawDescGZIP(), []int{5}
}

func (x *CreatedContract) GetContract() *SerializableContract {
	if x != nil {
		return x.Contract
	}
	return nil
}

func (x *CreatedContract) GetConsumedInCore() bool {
	if x != nil {
		return x.ConsumedInCore
	}
	return false
}

func (x *CreatedContract) GetRolledBack() bool {
	if x != nil {
		return x.RolledBack
	}
	return false
}

type InputContract struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Contract *SerializableContract `protobuf:"bytes,1,opt,name=contract,proto3" json:"contract,omitempty"`
	Consumed bool                  `protobuf:"varint,2,opt,name=consumed,proto3" json:"consumed,omitempty"`
}

func (x *InputContract) Reset() {
	*x = InputContract{}
	mi := &file_com_digitalasset_canton_protocol_v2_participant_transaction_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *InputContract) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InputContract) ProtoMessage() {}

func (x *InputContract) ProtoReflect() protoreflect.Message {
	mi := &file_com_digitalasset_canton_protocol_v2_participant_transaction_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InputContract.ProtoReflect.Descriptor instead.
func (*InputContract) Descriptor() ([]byte, []int) {
	return file_com_digitalasset_canton_protocol_v2_participant_transaction_proto_rawDescGZIP(), []int{6}
}

func (x *InputContract) GetContract() *SerializableContract {
	if x != nil {
		return x.Contract
	}
	return nil
}

func (x *InputContract) GetConsumed() bool {
	if x != nil {
		return x.Consumed
	}
	return false
}

type ActionDescription_ExerciseActionDescription struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	InputContractId string   `protobuf:"bytes,1,opt,name=input_contract_id,json=inputContractId,proto3" json:"input_contract_id,omitempty"`
	Choice          string   `protobuf:"bytes,2,opt,name=choice,proto3" json:"choice,omitempty"`
	ChosenValue     []byte   `protobuf:"bytes,3,opt,name=chosen_value,json=chosenValue,proto3" json:"chosen_value,omitempty"`
	Actors          []string `protobuf:"bytes,4,rep,name=actors,proto3" json:"actors,omitempty"`
	ByKey           bool     `protobuf:"varint,5,opt,name=by_key,json=byKey,proto3" json:"by_key,omitempty"`
	NodeSeed        []byte   `protobuf:"bytes,6,opt,name=node_seed,json=nodeSeed,proto3" json:"node_seed,omitempty"`
	Version         string   `protobuf:"bytes,7,opt,name=version,proto3" json:"version,omitempty"`
	Failed          bool     `protobuf:"varint,8,opt,name=failed,proto3" json:"failed,omitempty"`
	InterfaceId     *string  `protobuf:"bytes,9,opt,name=interface_id,json=interfaceId,proto3,oneof" json:"interface_id,omitempty"`
	TemplateId      *string  `protobuf:"bytes,10,opt,name=template_id,json=templateId,proto3,oneof" json:"template_id,omitempty"`
}

func (x *ActionDescription_ExerciseActionDescription) Reset() {
	*x = ActionDescription_ExerciseActionDescription{}
	mi := &file_com_digitalasset_canton_protocol_v2_participant_transaction_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ActionDescription_ExerciseActionDescription) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ActionDescription_ExerciseActionDescription) ProtoMessage() {}

func (x *ActionDescription_ExerciseActionDescription) ProtoReflect() protoreflect.Message {
	mi := &file_com_digitalasset_canton_protocol_v2_participant_transaction_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ActionDescription_ExerciseActionDescription.ProtoReflect.Descriptor instead.
func (*ActionDescription_ExerciseActionDescription) Descriptor() ([]byte, []int) {
	return file_com_digitalasset_canton_protocol_v2_participant_transaction_proto_rawDescGZIP(), []int{4, 0}
}

func (x *ActionDescription_ExerciseActionDescription) GetInputContractId() string {
	if x != nil {
		return x.InputContractId
	}
	return ""
}

func (x *ActionDescription_ExerciseActionDescription) GetChoice() string {
	if x != nil {
		return x.Choice
	}
	return ""
}

func (x *ActionDescription_ExerciseActionDescription) GetChosenValue() []byte {
	if x != nil {
		return x.ChosenValue
	}
	return nil
}

func (x *ActionDescription_ExerciseActionDescription) GetActors() []string {
	if x != nil {
		return x.Actors
	}
	return nil
}

func (x *ActionDescription_ExerciseActionDescription) GetByKey() bool {
	if x != nil {
		return x.ByKey
	}
	return false
}

func (x *ActionDescription_ExerciseActionDescription) GetNodeSeed() []byte {
	if x != nil {
		return x.NodeSeed
	}
	return nil
}

func (x *ActionDescription_ExerciseActionDescription) GetVersion() string {
	if x != nil {
		return x.Version
	}
	return ""
}

func (x *ActionDescription_ExerciseActionDescription) GetFailed() bool {
	if x != nil {
		return x.Failed
	}
	return false
}

func (x *ActionDescription_ExerciseActionDescription) GetInterfaceId() string {
	if x != nil && x.InterfaceId != nil {
		return *x.InterfaceId
	}
	return ""
}

func (x *ActionDescription_ExerciseActionDescription) GetTemplateId() string {
	if x != nil && x.TemplateId != nil {
		return *x.TemplateId
	}
	return ""
}

var File_com_digitalasset_canton_protocol_v2_participant_transaction_proto protoreflect.FileDescriptor

var file_com_digitalasset_canton_protocol_v2_participant_transaction_proto_rawDesc = []byte{
	0x0a, 0x41, 0x63, 0x6f, 0x6d, 0x2f, 0x64, 0x69, 0x67, 0x69, 0x74, 0x61, 0x6c, 0x61, 0x73, 0x73,
	0x65, 0x74, 0x2f, 0x63, 0x61, 0x6e, 0x74, 0x6f, 0x6e, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63,
	0x6f, 0x6c, 0x2f, 0x76, 0x32, 0x2f, 0x70, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6e,
	0x74, 0x5f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x12, 0x23, 0x63, 0x6f, 0x6d, 0x2e, 0x64, 0x69, 0x67, 0x69, 0x74, 0x61, 0x6c,
	0x61, 0x73, 0x73, 0x65, 0x74, 0x2e, 0x63, 0x61, 0x6e, 0x74, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x76, 0x32, 0x1a, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x64, 0x69,
	0x67, 0x69, 0x74, 0x61, 0x6c, 0x61, 0x73, 0x73, 0x65, 0x74, 0x2f, 0x63, 0x61, 0x6e, 0x74, 0x6f,
	0x6e, 0x2f, 0x63, 0x72, 0x79, 0x70, 0x74, 0x6f, 0x2f, 0x76, 0x30, 0x2f, 0x63, 0x72, 0x79, 0x70,
	0x74, 0x6f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x30, 0x63, 0x6f, 0x6d, 0x2f, 0x64, 0x69,
	0x67, 0x69, 0x74, 0x61, 0x6c, 0x61, 0x73, 0x73, 0x65, 0x74, 0x2f, 0x63, 0x61, 0x6e, 0x74, 0x6f,
	0x6e, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2f, 0x76, 0x30, 0x2f, 0x63, 0x6f,
	0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x41, 0x63, 0x6f, 0x6d, 0x2f,
	0x64, 0x69, 0x67, 0x69, 0x74, 0x61, 0x6c, 0x61, 0x73, 0x73, 0x65, 0x74, 0x2f, 0x63, 0x61, 0x6e,
	0x74, 0x6f, 0x6e, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2f, 0x76, 0x30, 0x2f,
	0x70, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x5f, 0x74, 0x72, 0x61, 0x6e,
	0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x30, 0x63,
	0x6f, 0x6d, 0x2f, 0x64, 0x69, 0x67, 0x69, 0x74, 0x61, 0x6c, 0x61, 0x73, 0x73, 0x65, 0x74, 0x2f,
	0x63, 0x61, 0x6e, 0x74, 0x6f, 0x6e, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2f,
	0x76, 0x30, 0x2f, 0x71, 0x75, 0x6f, 0x72, 0x75, 0x6d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a,
	0x41, 0x63, 0x6f, 0x6d, 0x2f, 0x64, 0x69, 0x67, 0x69, 0x74, 0x61, 0x6c, 0x61, 0x73, 0x73, 0x65,
	0x74, 0x2f, 0x63, 0x61, 0x6e, 0x74, 0x6f, 0x6e, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f,
	0x6c, 0x2f, 0x76, 0x31, 0x2f, 0x70, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6e, 0x74,
	0x5f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x1a, 0x30, 0x63, 0x6f, 0x6d, 0x2f, 0x64, 0x69, 0x67, 0x69, 0x74, 0x61, 0x6c, 0x61,
	0x73, 0x73, 0x65, 0x74, 0x2f, 0x63, 0x61, 0x6e, 0x74, 0x6f, 0x6e, 0x2f, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x63, 0x6f, 0x6c, 0x2f, 0x76, 0x32, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x22, 0xe3, 0x01, 0x0a, 0x0e, 0x56, 0x69, 0x65, 0x77, 0x43, 0x6f, 0x6d,
	0x6d, 0x6f, 0x6e, 0x44, 0x61, 0x74, 0x61, 0x12, 0x3b, 0x0a, 0x04, 0x73, 0x61, 0x6c, 0x74, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x64, 0x69, 0x67, 0x69,
	0x74, 0x61, 0x6c, 0x61, 0x73, 0x73, 0x65, 0x74, 0x2e, 0x63, 0x61, 0x6e, 0x74, 0x6f, 0x6e, 0x2e,
	0x63, 0x72, 0x79, 0x70, 0x74, 0x6f, 0x2e, 0x76, 0x30, 0x2e, 0x53, 0x61, 0x6c, 0x74, 0x52, 0x04,
	0x73, 0x61, 0x6c, 0x74, 0x12, 0x4d, 0x0a, 0x09, 0x69, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x65, 0x65,
	0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x64, 0x69,
	0x67, 0x69, 0x74, 0x61, 0x6c, 0x61, 0x73, 0x73, 0x65, 0x74, 0x2e, 0x63, 0x61, 0x6e, 0x74, 0x6f,
	0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x76, 0x30, 0x2e, 0x54, 0x72,
	0x75, 0x73, 0x74, 0x50, 0x61, 0x72, 0x74, 0x79, 0x52, 0x09, 0x69, 0x6e, 0x66, 0x6f, 0x72, 0x6d,
	0x65, 0x65, 0x73, 0x12, 0x45, 0x0a, 0x07, 0x71, 0x75, 0x6f, 0x72, 0x75, 0x6d, 0x73, 0x18, 0x03,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x64, 0x69, 0x67, 0x69, 0x74,
	0x61, 0x6c, 0x61, 0x73, 0x73, 0x65, 0x74, 0x2e, 0x63, 0x61, 0x6e, 0x74, 0x6f, 0x6e, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x76, 0x30, 0x2e, 0x51, 0x75, 0x6f, 0x72, 0x75,
	0x6d, 0x52, 0x07, 0x71, 0x75, 0x6f, 0x72, 0x75, 0x6d, 0x73, 0x22, 0x6a, 0x0a, 0x10, 0x53, 0x65,
	0x73, 0x73, 0x69, 0x6f, 0x6e, 0x4b, 0x65, 0x79, 0x4c, 0x6f, 0x6f, 0x6b, 0x75, 0x70, 0x12, 0x34,
	0x0a, 0x16, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x6b, 0x65, 0x79, 0x5f, 0x72, 0x61,
	0x6e, 0x64, 0x6f, 0x6d, 0x6e, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x14,
	0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x4b, 0x65, 0x79, 0x52, 0x61, 0x6e, 0x64, 0x6f, 0x6d,
	0x6e, 0x65, 0x73, 0x73, 0x12, 0x20, 0x0a, 0x0b, 0x66, 0x69, 0x6e, 0x67, 0x65, 0x72, 0x70, 0x72,
	0x69, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x66, 0x69, 0x6e, 0x67, 0x65,
	0x72, 0x70, 0x72, 0x69, 0x6e, 0x74, 0x22, 0xa0, 0x04, 0x0a, 0x14, 0x45, 0x6e, 0x63, 0x72, 0x79,
	0x70, 0x74, 0x65, 0x64, 0x56, 0x69, 0x65, 0x77, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12,
	0x1b, 0x0a, 0x09, 0x76, 0x69, 0x65, 0x77, 0x5f, 0x74, 0x72, 0x65, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0c, 0x52, 0x08, 0x76, 0x69, 0x65, 0x77, 0x54, 0x72, 0x65, 0x65, 0x12, 0x62, 0x0a, 0x11,
	0x65, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x73, 0x63, 0x68, 0x65, 0x6d,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x35, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x64, 0x69,
	0x67, 0x69, 0x74, 0x61, 0x6c, 0x61, 0x73, 0x73, 0x65, 0x74, 0x2e, 0x63, 0x61, 0x6e, 0x74, 0x6f,
	0x6e, 0x2e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x6f, 0x2e, 0x76, 0x30, 0x2e, 0x53, 0x79, 0x6d, 0x6d,
	0x65, 0x74, 0x72, 0x69, 0x63, 0x4b, 0x65, 0x79, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x65, 0x52, 0x10,
	0x65, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x65,
	0x12, 0x74, 0x0a, 0x1f, 0x73, 0x75, 0x62, 0x6d, 0x69, 0x74, 0x74, 0x65, 0x72, 0x5f, 0x70, 0x61,
	0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x5f, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74,
	0x75, 0x72, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x63, 0x6f, 0x6d, 0x2e,
	0x64, 0x69, 0x67, 0x69, 0x74, 0x61, 0x6c, 0x61, 0x73, 0x73, 0x65, 0x74, 0x2e, 0x63, 0x61, 0x6e,
	0x74, 0x6f, 0x6e, 0x2e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x6f, 0x2e, 0x76, 0x30, 0x2e, 0x53, 0x69,
	0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x52, 0x1d, 0x73, 0x75, 0x62, 0x6d, 0x69, 0x74, 0x74,
	0x65, 0x72, 0x50, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x53, 0x69, 0x67,
	0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x76, 0x69, 0x65, 0x77, 0x5f, 0x68,
	0x61, 0x73, 0x68, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x08, 0x76, 0x69, 0x65, 0x77, 0x48,
	0x61, 0x73, 0x68, 0x12, 0x1e, 0x0a, 0x0a, 0x72, 0x61, 0x6e, 0x64, 0x6f, 0x6d, 0x6e, 0x65, 0x73,
	0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0a, 0x72, 0x61, 0x6e, 0x64, 0x6f, 0x6d, 0x6e,
	0x65, 0x73, 0x73, 0x12, 0x6b, 0x0a, 0x16, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x6b,
	0x65, 0x79, 0x5f, 0x72, 0x61, 0x6e, 0x64, 0x6f, 0x6d, 0x6e, 0x65, 0x73, 0x73, 0x18, 0x06, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x35, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x64, 0x69, 0x67, 0x69, 0x74, 0x61,
	0x6c, 0x61, 0x73, 0x73, 0x65, 0x74, 0x2e, 0x63, 0x61, 0x6e, 0x74, 0x6f, 0x6e, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x76, 0x32, 0x2e, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f,
	0x6e, 0x4b, 0x65, 0x79, 0x4c, 0x6f, 0x6f, 0x6b, 0x75, 0x70, 0x52, 0x14, 0x73, 0x65, 0x73, 0x73,
	0x69, 0x6f, 0x6e, 0x4b, 0x65, 0x79, 0x52, 0x61, 0x6e, 0x64, 0x6f, 0x6d, 0x6e, 0x65, 0x73, 0x73,
	0x12, 0x1b, 0x0a, 0x09, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x49, 0x64, 0x12, 0x4a, 0x0a,
	0x09, 0x76, 0x69, 0x65, 0x77, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x2d, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x64, 0x69, 0x67, 0x69, 0x74, 0x61, 0x6c, 0x61, 0x73,
	0x73, 0x65, 0x74, 0x2e, 0x63, 0x61, 0x6e, 0x74, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x63, 0x6f, 0x6c, 0x2e, 0x76, 0x30, 0x2e, 0x56, 0x69, 0x65, 0x77, 0x54, 0x79, 0x70, 0x65, 0x52,
	0x08, 0x76, 0x69, 0x65, 0x77, 0x54, 0x79, 0x70, 0x65, 0x22, 0x94, 0x05, 0x0a, 0x13, 0x56, 0x69,
	0x65, 0x77, 0x50, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x44, 0x61, 0x74,
	0x61, 0x12, 0x3b, 0x0a, 0x04, 0x73, 0x61, 0x6c, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x27, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x64, 0x69, 0x67, 0x69, 0x74, 0x61, 0x6c, 0x61, 0x73, 0x73,
	0x65, 0x74, 0x2e, 0x63, 0x61, 0x6e, 0x74, 0x6f, 0x6e, 0x2e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x6f,
	0x2e, 0x76, 0x30, 0x2e, 0x53, 0x61, 0x6c, 0x74, 0x52, 0x04, 0x73, 0x61, 0x6c, 0x74, 0x12, 0x53,
	0x0a, 0x0b, 0x63, 0x6f, 0x72, 0x65, 0x5f, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x73, 0x18, 0x02, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x32, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x64, 0x69, 0x67, 0x69, 0x74, 0x61,
	0x6c, 0x61, 0x73, 0x73, 0x65, 0x74, 0x2e, 0x63, 0x61, 0x6e, 0x74, 0x6f, 0x6e, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x43,
	0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x52, 0x0a, 0x63, 0x6f, 0x72, 0x65, 0x49, 0x6e, 0x70,
	0x75, 0x74, 0x73, 0x12, 0x57, 0x0a, 0x0c, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x63,
	0x6f, 0x72, 0x65, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x34, 0x2e, 0x63, 0x6f, 0x6d, 0x2e,
	0x64, 0x69, 0x67, 0x69, 0x74, 0x61, 0x6c, 0x61, 0x73, 0x73, 0x65, 0x74, 0x2e, 0x63, 0x61, 0x6e,
	0x74, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x76, 0x31, 0x2e,
	0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x52,
	0x0b, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x43, 0x6f, 0x72, 0x65, 0x12, 0x4b, 0x0a, 0x23,
	0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x69, 0x6e, 0x5f, 0x73, 0x75, 0x62, 0x76, 0x69,
	0x65, 0x77, 0x5f, 0x61, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x64, 0x5f, 0x69, 0x6e, 0x5f, 0x63,
	0x6f, 0x72, 0x65, 0x18, 0x04, 0x20, 0x03, 0x28, 0x09, 0x52, 0x1e, 0x63, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x64, 0x49, 0x6e, 0x53, 0x75, 0x62, 0x76, 0x69, 0x65, 0x77, 0x41, 0x72, 0x63, 0x68, 0x69,
	0x76, 0x65, 0x64, 0x49, 0x6e, 0x43, 0x6f, 0x72, 0x65, 0x12, 0x69, 0x0a, 0x0d, 0x72, 0x65, 0x73,
	0x6f, 0x6c, 0x76, 0x65, 0x64, 0x5f, 0x6b, 0x65, 0x79, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x44, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x64, 0x69, 0x67, 0x69, 0x74, 0x61, 0x6c, 0x61, 0x73,
	0x73, 0x65, 0x74, 0x2e, 0x63, 0x61, 0x6e, 0x74, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x63, 0x6f, 0x6c, 0x2e, 0x76, 0x30, 0x2e, 0x56, 0x69, 0x65, 0x77, 0x50, 0x61, 0x72, 0x74, 0x69,
	0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x44, 0x61, 0x74, 0x61, 0x2e, 0x52, 0x65, 0x73, 0x6f, 0x6c,
	0x76, 0x65, 0x64, 0x4b, 0x65, 0x79, 0x52, 0x0c, 0x72, 0x65, 0x73, 0x6f, 0x6c, 0x76, 0x65, 0x64,
	0x4b, 0x65, 0x79, 0x73, 0x12, 0x65, 0x0a, 0x12, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x64,
	0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x36, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x64, 0x69, 0x67, 0x69, 0x74, 0x61, 0x6c, 0x61, 0x73,
	0x73, 0x65, 0x74, 0x2e, 0x63, 0x61, 0x6e, 0x74, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x63, 0x6f, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x65, 0x73,
	0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x11, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x73, 0x0a, 0x10, 0x72,
	0x6f, 0x6c, 0x6c, 0x62, 0x61, 0x63, 0x6b, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x48, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x64, 0x69, 0x67, 0x69,
	0x74, 0x61, 0x6c, 0x61, 0x73, 0x73, 0x65, 0x74, 0x2e, 0x63, 0x61, 0x6e, 0x74, 0x6f, 0x6e, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x76, 0x30, 0x2e, 0x56, 0x69, 0x65, 0x77,
	0x50, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x44, 0x61, 0x74, 0x61, 0x2e,
	0x52, 0x6f, 0x6c, 0x6c, 0x62, 0x61, 0x63, 0x6b, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x52,
	0x0f, 0x72, 0x6f, 0x6c, 0x6c, 0x62, 0x61, 0x63, 0x6b, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74,
	0x22, 0xd0, 0x06, 0x0a, 0x11, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x65, 0x73, 0x63, 0x72,
	0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x68, 0x0a, 0x06, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x4e, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x64, 0x69, 0x67,
	0x69, 0x74, 0x61, 0x6c, 0x61, 0x73, 0x73, 0x65, 0x74, 0x2e, 0x63, 0x61, 0x6e, 0x74, 0x6f, 0x6e,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x76, 0x30, 0x2e, 0x41, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x43,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x65, 0x73, 0x63, 0x72,
	0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x00, 0x52, 0x06, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x12, 0x6e, 0x0a, 0x08, 0x65, 0x78, 0x65, 0x72, 0x63, 0x69, 0x73, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x50, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x64, 0x69, 0x67, 0x69, 0x74, 0x61, 0x6c,
	0x61, 0x73, 0x73, 0x65, 0x74, 0x2e, 0x63, 0x61, 0x6e, 0x74, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x76, 0x32, 0x2e, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x44,
	0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x45, 0x78, 0x65, 0x72, 0x63,
	0x69, 0x73, 0x65, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x48, 0x00, 0x52, 0x08, 0x65, 0x78, 0x65, 0x72, 0x63, 0x69, 0x73, 0x65,
	0x12, 0x65, 0x0a, 0x05, 0x66, 0x65, 0x74, 0x63, 0x68, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x4d, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x64, 0x69, 0x67, 0x69, 0x74, 0x61, 0x6c, 0x61, 0x73, 0x73,
	0x65, 0x74, 0x2e, 0x63, 0x61, 0x6e, 0x74, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63,
	0x6f, 0x6c, 0x2e, 0x76, 0x30, 0x2e, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x65, 0x73, 0x63,
	0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x46, 0x65, 0x74, 0x63, 0x68, 0x41, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x00,
	0x52, 0x05, 0x66, 0x65, 0x74, 0x63, 0x68, 0x12, 0x79, 0x0a, 0x0d, 0x6c, 0x6f, 0x6f, 0x6b, 0x75,
	0x70, 0x5f, 0x62, 0x79, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x53,
	0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x64, 0x69, 0x67, 0x69, 0x74, 0x61, 0x6c, 0x61, 0x73, 0x73, 0x65,
	0x74, 0x2e, 0x63, 0x61, 0x6e, 0x74, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f,
	0x6c, 0x2e, 0x76, 0x30, 0x2e, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x65, 0x73, 0x63, 0x72,
	0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x4c, 0x6f, 0x6f, 0x6b, 0x75, 0x70, 0x42, 0x79, 0x4b,
	0x65, 0x79, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x48, 0x00, 0x52, 0x0b, 0x6c, 0x6f, 0x6f, 0x6b, 0x75, 0x70, 0x42, 0x79, 0x4b,
	0x65, 0x79, 0x1a, 0xef, 0x02, 0x0a, 0x19, 0x45, 0x78, 0x65, 0x72, 0x63, 0x69, 0x73, 0x65, 0x41,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x2a, 0x0a, 0x11, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61,
	0x63, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x69, 0x6e, 0x70,
	0x75, 0x74, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06,
	0x63, 0x68, 0x6f, 0x69, 0x63, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x63, 0x68,
	0x6f, 0x69, 0x63, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x63, 0x68, 0x6f, 0x73, 0x65, 0x6e, 0x5f, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0b, 0x63, 0x68, 0x6f, 0x73,
	0x65, 0x6e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x63, 0x74, 0x6f, 0x72,
	0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x09, 0x52, 0x06, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x73, 0x12,
	0x15, 0x0a, 0x06, 0x62, 0x79, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x05, 0x62, 0x79, 0x4b, 0x65, 0x79, 0x12, 0x1b, 0x0a, 0x09, 0x6e, 0x6f, 0x64, 0x65, 0x5f, 0x73,
	0x65, 0x65, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x08, 0x6e, 0x6f, 0x64, 0x65, 0x53,
	0x65, 0x65, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x16, 0x0a,
	0x06, 0x66, 0x61, 0x69, 0x6c, 0x65, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x66,
	0x61, 0x69, 0x6c, 0x65, 0x64, 0x12, 0x26, 0x0a, 0x0c, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61,
	0x63, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x0b, 0x69,
	0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x49, 0x64, 0x88, 0x01, 0x01, 0x12, 0x24, 0x0a,
	0x0b, 0x74, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x0a, 0x20, 0x01,
	0x28, 0x09, 0x48, 0x01, 0x52, 0x0a, 0x74, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x49, 0x64,
	0x88, 0x01, 0x01, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63,
	0x65, 0x5f, 0x69, 0x64, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x74, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74,
	0x65, 0x5f, 0x69, 0x64, 0x42, 0x0d, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x22, 0xb3, 0x01, 0x0a, 0x0f, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x43,
	0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x12, 0x55, 0x0a, 0x08, 0x63, 0x6f, 0x6e, 0x74, 0x72,
	0x61, 0x63, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x39, 0x2e, 0x63, 0x6f, 0x6d, 0x2e,
	0x64, 0x69, 0x67, 0x69, 0x74, 0x61, 0x6c, 0x61, 0x73, 0x73, 0x65, 0x74, 0x2e, 0x63, 0x61, 0x6e,
	0x74, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x76, 0x32, 0x2e,
	0x53, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x69, 0x7a, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x74,
	0x72, 0x61, 0x63, 0x74, 0x52, 0x08, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x12, 0x28,
	0x0a, 0x10, 0x63, 0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x65, 0x64, 0x5f, 0x69, 0x6e, 0x5f, 0x63, 0x6f,
	0x72, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0e, 0x63, 0x6f, 0x6e, 0x73, 0x75, 0x6d,
	0x65, 0x64, 0x49, 0x6e, 0x43, 0x6f, 0x72, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x72, 0x6f, 0x6c, 0x6c,
	0x65, 0x64, 0x5f, 0x62, 0x61, 0x63, 0x6b, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x72,
	0x6f, 0x6c, 0x6c, 0x65, 0x64, 0x42, 0x61, 0x63, 0x6b, 0x22, 0x82, 0x01, 0x0a, 0x0d, 0x49, 0x6e,
	0x70, 0x75, 0x74, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x12, 0x55, 0x0a, 0x08, 0x63,
	0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x39, 0x2e,
	0x63, 0x6f, 0x6d, 0x2e, 0x64, 0x69, 0x67, 0x69, 0x74, 0x61, 0x6c, 0x61, 0x73, 0x73, 0x65, 0x74,
	0x2e, 0x63, 0x61, 0x6e, 0x74, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c,
	0x2e, 0x76, 0x32, 0x2e, 0x53, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x69, 0x7a, 0x61, 0x62, 0x6c, 0x65,
	0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x52, 0x08, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61,
	0x63, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x63, 0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x65, 0x64, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x63, 0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x65, 0x64, 0x42, 0x54,
	0x5a, 0x52, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x64, 0x69, 0x67,
	0x69, 0x74, 0x61, 0x6c, 0x2d, 0x61, 0x73, 0x73, 0x65, 0x74, 0x2f, 0x64, 0x61, 0x7a, 0x6c, 0x2d,
	0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2f, 0x76, 0x38, 0x2f, 0x67, 0x6f, 0x2f, 0x61, 0x70, 0x69,
	0x2f, 0x63, 0x6f, 0x6d, 0x2f, 0x64, 0x69, 0x67, 0x69, 0x74, 0x61, 0x6c, 0x61, 0x73, 0x73, 0x65,
	0x74, 0x2f, 0x63, 0x61, 0x6e, 0x74, 0x6f, 0x6e, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f,
	0x6c, 0x2f, 0x76, 0x32, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_com_digitalasset_canton_protocol_v2_participant_transaction_proto_rawDescOnce sync.Once
	file_com_digitalasset_canton_protocol_v2_participant_transaction_proto_rawDescData = file_com_digitalasset_canton_protocol_v2_participant_transaction_proto_rawDesc
)

func file_com_digitalasset_canton_protocol_v2_participant_transaction_proto_rawDescGZIP() []byte {
	file_com_digitalasset_canton_protocol_v2_participant_transaction_proto_rawDescOnce.Do(func() {
		file_com_digitalasset_canton_protocol_v2_participant_transaction_proto_rawDescData = protoimpl.X.CompressGZIP(file_com_digitalasset_canton_protocol_v2_participant_transaction_proto_rawDescData)
	})
	return file_com_digitalasset_canton_protocol_v2_participant_transaction_proto_rawDescData
}

var file_com_digitalasset_canton_protocol_v2_participant_transaction_proto_msgTypes = make([]protoimpl.MessageInfo, 8)
var file_com_digitalasset_canton_protocol_v2_participant_transaction_proto_goTypes = []any{
	(*ViewCommonData)(nil),                                     // 0: com.digitalasset.canton.protocol.v2.ViewCommonData
	(*SessionKeyLookup)(nil),                                   // 1: com.digitalasset.canton.protocol.v2.SessionKeyLookup
	(*EncryptedViewMessage)(nil),                               // 2: com.digitalasset.canton.protocol.v2.EncryptedViewMessage
	(*ViewParticipantData)(nil),                                // 3: com.digitalasset.canton.protocol.v2.ViewParticipantData
	(*ActionDescription)(nil),                                  // 4: com.digitalasset.canton.protocol.v2.ActionDescription
	(*CreatedContract)(nil),                                    // 5: com.digitalasset.canton.protocol.v2.CreatedContract
	(*InputContract)(nil),                                      // 6: com.digitalasset.canton.protocol.v2.InputContract
	(*ActionDescription_ExerciseActionDescription)(nil),        // 7: com.digitalasset.canton.protocol.v2.ActionDescription.ExerciseActionDescription
	(*v0.Salt)(nil),                                            // 8: com.digitalasset.canton.crypto.v0.Salt
	(*v01.TrustParty)(nil),                                     // 9: com.digitalasset.canton.protocol.v0.TrustParty
	(*v01.Quorum)(nil),                                         // 10: com.digitalasset.canton.protocol.v0.Quorum
	(v0.SymmetricKeyScheme)(0),                                 // 11: com.digitalasset.canton.crypto.v0.SymmetricKeyScheme
	(*v0.Signature)(nil),                                       // 12: com.digitalasset.canton.crypto.v0.Signature
	(v01.ViewType)(0),                                          // 13: com.digitalasset.canton.protocol.v0.ViewType
	(*v1.InputContract)(nil),                                   // 14: com.digitalasset.canton.protocol.v1.InputContract
	(*v1.CreatedContract)(nil),                                 // 15: com.digitalasset.canton.protocol.v1.CreatedContract
	(*v01.ViewParticipantData_ResolvedKey)(nil),                // 16: com.digitalasset.canton.protocol.v0.ViewParticipantData.ResolvedKey
	(*v1.ActionDescription)(nil),                               // 17: com.digitalasset.canton.protocol.v1.ActionDescription
	(*v01.ViewParticipantData_RollbackContext)(nil),            // 18: com.digitalasset.canton.protocol.v0.ViewParticipantData.RollbackContext
	(*v01.ActionDescription_CreateActionDescription)(nil),      // 19: com.digitalasset.canton.protocol.v0.ActionDescription.CreateActionDescription
	(*v01.ActionDescription_FetchActionDescription)(nil),       // 20: com.digitalasset.canton.protocol.v0.ActionDescription.FetchActionDescription
	(*v01.ActionDescription_LookupByKeyActionDescription)(nil), // 21: com.digitalasset.canton.protocol.v0.ActionDescription.LookupByKeyActionDescription
	(*SerializableContract)(nil),                               // 22: com.digitalasset.canton.protocol.v2.SerializableContract
}
var file_com_digitalasset_canton_protocol_v2_participant_transaction_proto_depIdxs = []int32{
	8,  // 0: com.digitalasset.canton.protocol.v2.ViewCommonData.salt:type_name -> com.digitalasset.canton.crypto.v0.Salt
	9,  // 1: com.digitalasset.canton.protocol.v2.ViewCommonData.informees:type_name -> com.digitalasset.canton.protocol.v0.TrustParty
	10, // 2: com.digitalasset.canton.protocol.v2.ViewCommonData.quorums:type_name -> com.digitalasset.canton.protocol.v0.Quorum
	11, // 3: com.digitalasset.canton.protocol.v2.EncryptedViewMessage.encryption_scheme:type_name -> com.digitalasset.canton.crypto.v0.SymmetricKeyScheme
	12, // 4: com.digitalasset.canton.protocol.v2.EncryptedViewMessage.submitter_participant_signature:type_name -> com.digitalasset.canton.crypto.v0.Signature
	1,  // 5: com.digitalasset.canton.protocol.v2.EncryptedViewMessage.session_key_randomness:type_name -> com.digitalasset.canton.protocol.v2.SessionKeyLookup
	13, // 6: com.digitalasset.canton.protocol.v2.EncryptedViewMessage.view_type:type_name -> com.digitalasset.canton.protocol.v0.ViewType
	8,  // 7: com.digitalasset.canton.protocol.v2.ViewParticipantData.salt:type_name -> com.digitalasset.canton.crypto.v0.Salt
	14, // 8: com.digitalasset.canton.protocol.v2.ViewParticipantData.core_inputs:type_name -> com.digitalasset.canton.protocol.v1.InputContract
	15, // 9: com.digitalasset.canton.protocol.v2.ViewParticipantData.created_core:type_name -> com.digitalasset.canton.protocol.v1.CreatedContract
	16, // 10: com.digitalasset.canton.protocol.v2.ViewParticipantData.resolved_keys:type_name -> com.digitalasset.canton.protocol.v0.ViewParticipantData.ResolvedKey
	17, // 11: com.digitalasset.canton.protocol.v2.ViewParticipantData.action_description:type_name -> com.digitalasset.canton.protocol.v1.ActionDescription
	18, // 12: com.digitalasset.canton.protocol.v2.ViewParticipantData.rollback_context:type_name -> com.digitalasset.canton.protocol.v0.ViewParticipantData.RollbackContext
	19, // 13: com.digitalasset.canton.protocol.v2.ActionDescription.create:type_name -> com.digitalasset.canton.protocol.v0.ActionDescription.CreateActionDescription
	7,  // 14: com.digitalasset.canton.protocol.v2.ActionDescription.exercise:type_name -> com.digitalasset.canton.protocol.v2.ActionDescription.ExerciseActionDescription
	20, // 15: com.digitalasset.canton.protocol.v2.ActionDescription.fetch:type_name -> com.digitalasset.canton.protocol.v0.ActionDescription.FetchActionDescription
	21, // 16: com.digitalasset.canton.protocol.v2.ActionDescription.lookup_by_key:type_name -> com.digitalasset.canton.protocol.v0.ActionDescription.LookupByKeyActionDescription
	22, // 17: com.digitalasset.canton.protocol.v2.CreatedContract.contract:type_name -> com.digitalasset.canton.protocol.v2.SerializableContract
	22, // 18: com.digitalasset.canton.protocol.v2.InputContract.contract:type_name -> com.digitalasset.canton.protocol.v2.SerializableContract
	19, // [19:19] is the sub-list for method output_type
	19, // [19:19] is the sub-list for method input_type
	19, // [19:19] is the sub-list for extension type_name
	19, // [19:19] is the sub-list for extension extendee
	0,  // [0:19] is the sub-list for field type_name
}

func init() { file_com_digitalasset_canton_protocol_v2_participant_transaction_proto_init() }
func file_com_digitalasset_canton_protocol_v2_participant_transaction_proto_init() {
	if File_com_digitalasset_canton_protocol_v2_participant_transaction_proto != nil {
		return
	}
	file_com_digitalasset_canton_protocol_v2_common_proto_init()
	file_com_digitalasset_canton_protocol_v2_participant_transaction_proto_msgTypes[4].OneofWrappers = []any{
		(*ActionDescription_Create)(nil),
		(*ActionDescription_Exercise)(nil),
		(*ActionDescription_Fetch)(nil),
		(*ActionDescription_LookupByKey)(nil),
	}
	file_com_digitalasset_canton_protocol_v2_participant_transaction_proto_msgTypes[7].OneofWrappers = []any{}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_com_digitalasset_canton_protocol_v2_participant_transaction_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   8,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_com_digitalasset_canton_protocol_v2_participant_transaction_proto_goTypes,
		DependencyIndexes: file_com_digitalasset_canton_protocol_v2_participant_transaction_proto_depIdxs,
		MessageInfos:      file_com_digitalasset_canton_protocol_v2_participant_transaction_proto_msgTypes,
	}.Build()
	File_com_digitalasset_canton_protocol_v2_participant_transaction_proto = out.File
	file_com_digitalasset_canton_protocol_v2_participant_transaction_proto_rawDesc = nil
	file_com_digitalasset_canton_protocol_v2_participant_transaction_proto_goTypes = nil
	file_com_digitalasset_canton_protocol_v2_participant_transaction_proto_depIdxs = nil
}
