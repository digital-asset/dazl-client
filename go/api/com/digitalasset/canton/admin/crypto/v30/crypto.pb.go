// Copyright (c) 2017-2025 Digital Asset (Switzerland) GmbH and/or its affiliates. All rights reserved.
// SPDX-License-Identifier: Apache-2.0
// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.35.2
// 	protoc        v5.27.2
// source: com/digitalasset/canton/admin/crypto/v30/crypto.proto

package v30

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type HmacAlgorithm int32

const (
	HmacAlgorithm_HMAC_ALGORITHM_UNSPECIFIED HmacAlgorithm = 0
	HmacAlgorithm_HMAC_ALGORITHM_HMAC_SHA256 HmacAlgorithm = 1
)

// Enum value maps for HmacAlgorithm.
var (
	HmacAlgorithm_name = map[int32]string{
		0: "HMAC_ALGORITHM_UNSPECIFIED",
		1: "HMAC_ALGORITHM_HMAC_SHA256",
	}
	HmacAlgorithm_value = map[string]int32{
		"HMAC_ALGORITHM_UNSPECIFIED": 0,
		"HMAC_ALGORITHM_HMAC_SHA256": 1,
	}
)

func (x HmacAlgorithm) Enum() *HmacAlgorithm {
	p := new(HmacAlgorithm)
	*p = x
	return p
}

func (x HmacAlgorithm) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (HmacAlgorithm) Descriptor() protoreflect.EnumDescriptor {
	return file_com_digitalasset_canton_admin_crypto_v30_crypto_proto_enumTypes[0].Descriptor()
}

func (HmacAlgorithm) Type() protoreflect.EnumType {
	return &file_com_digitalasset_canton_admin_crypto_v30_crypto_proto_enumTypes[0]
}

func (x HmacAlgorithm) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use HmacAlgorithm.Descriptor instead.
func (HmacAlgorithm) EnumDescriptor() ([]byte, []int) {
	return file_com_digitalasset_canton_admin_crypto_v30_crypto_proto_rawDescGZIP(), []int{0}
}

type Salt struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Algorithm:
	//
	//	*Salt_Hmac
	Algorithm isSalt_Algorithm `protobuf_oneof:"algorithm"`
	Salt      []byte           `protobuf:"bytes,2,opt,name=salt,proto3" json:"salt,omitempty"`
}

func (x *Salt) Reset() {
	*x = Salt{}
	mi := &file_com_digitalasset_canton_admin_crypto_v30_crypto_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Salt) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Salt) ProtoMessage() {}

func (x *Salt) ProtoReflect() protoreflect.Message {
	mi := &file_com_digitalasset_canton_admin_crypto_v30_crypto_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Salt.ProtoReflect.Descriptor instead.
func (*Salt) Descriptor() ([]byte, []int) {
	return file_com_digitalasset_canton_admin_crypto_v30_crypto_proto_rawDescGZIP(), []int{0}
}

func (m *Salt) GetAlgorithm() isSalt_Algorithm {
	if m != nil {
		return m.Algorithm
	}
	return nil
}

func (x *Salt) GetHmac() HmacAlgorithm {
	if x, ok := x.GetAlgorithm().(*Salt_Hmac); ok {
		return x.Hmac
	}
	return HmacAlgorithm_HMAC_ALGORITHM_UNSPECIFIED
}

func (x *Salt) GetSalt() []byte {
	if x != nil {
		return x.Salt
	}
	return nil
}

type isSalt_Algorithm interface {
	isSalt_Algorithm()
}

type Salt_Hmac struct {
	Hmac HmacAlgorithm `protobuf:"varint,1,opt,name=hmac,proto3,enum=com.digitalasset.canton.admin.crypto.v30.HmacAlgorithm,oneof"`
}

func (*Salt_Hmac) isSalt_Algorithm() {}

var File_com_digitalasset_canton_admin_crypto_v30_crypto_proto protoreflect.FileDescriptor

var file_com_digitalasset_canton_admin_crypto_v30_crypto_proto_rawDesc = []byte{
	0x0a, 0x35, 0x63, 0x6f, 0x6d, 0x2f, 0x64, 0x69, 0x67, 0x69, 0x74, 0x61, 0x6c, 0x61, 0x73, 0x73,
	0x65, 0x74, 0x2f, 0x63, 0x61, 0x6e, 0x74, 0x6f, 0x6e, 0x2f, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2f,
	0x63, 0x72, 0x79, 0x70, 0x74, 0x6f, 0x2f, 0x76, 0x33, 0x30, 0x2f, 0x63, 0x72, 0x79, 0x70, 0x74,
	0x6f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x28, 0x63, 0x6f, 0x6d, 0x2e, 0x64, 0x69, 0x67,
	0x69, 0x74, 0x61, 0x6c, 0x61, 0x73, 0x73, 0x65, 0x74, 0x2e, 0x63, 0x61, 0x6e, 0x74, 0x6f, 0x6e,
	0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x6f, 0x2e, 0x76, 0x33,
	0x30, 0x22, 0x76, 0x0a, 0x04, 0x53, 0x61, 0x6c, 0x74, 0x12, 0x4d, 0x0a, 0x04, 0x68, 0x6d, 0x61,
	0x63, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x37, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x64, 0x69,
	0x67, 0x69, 0x74, 0x61, 0x6c, 0x61, 0x73, 0x73, 0x65, 0x74, 0x2e, 0x63, 0x61, 0x6e, 0x74, 0x6f,
	0x6e, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x6f, 0x2e, 0x76,
	0x33, 0x30, 0x2e, 0x48, 0x6d, 0x61, 0x63, 0x41, 0x6c, 0x67, 0x6f, 0x72, 0x69, 0x74, 0x68, 0x6d,
	0x48, 0x00, 0x52, 0x04, 0x68, 0x6d, 0x61, 0x63, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x61, 0x6c, 0x74,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x04, 0x73, 0x61, 0x6c, 0x74, 0x42, 0x0b, 0x0a, 0x09,
	0x61, 0x6c, 0x67, 0x6f, 0x72, 0x69, 0x74, 0x68, 0x6d, 0x2a, 0x4f, 0x0a, 0x0d, 0x48, 0x6d, 0x61,
	0x63, 0x41, 0x6c, 0x67, 0x6f, 0x72, 0x69, 0x74, 0x68, 0x6d, 0x12, 0x1e, 0x0a, 0x1a, 0x48, 0x4d,
	0x41, 0x43, 0x5f, 0x41, 0x4c, 0x47, 0x4f, 0x52, 0x49, 0x54, 0x48, 0x4d, 0x5f, 0x55, 0x4e, 0x53,
	0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x1e, 0x0a, 0x1a, 0x48, 0x4d,
	0x41, 0x43, 0x5f, 0x41, 0x4c, 0x47, 0x4f, 0x52, 0x49, 0x54, 0x48, 0x4d, 0x5f, 0x48, 0x4d, 0x41,
	0x43, 0x5f, 0x53, 0x48, 0x41, 0x32, 0x35, 0x36, 0x10, 0x01, 0x42, 0x59, 0x5a, 0x57, 0x67, 0x69,
	0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x64, 0x69, 0x67, 0x69, 0x74, 0x61, 0x6c,
	0x2d, 0x61, 0x73, 0x73, 0x65, 0x74, 0x2f, 0x64, 0x61, 0x7a, 0x6c, 0x2d, 0x63, 0x6c, 0x69, 0x65,
	0x6e, 0x74, 0x2f, 0x76, 0x38, 0x2f, 0x67, 0x6f, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x63, 0x6f, 0x6d,
	0x2f, 0x64, 0x69, 0x67, 0x69, 0x74, 0x61, 0x6c, 0x61, 0x73, 0x73, 0x65, 0x74, 0x2f, 0x63, 0x61,
	0x6e, 0x74, 0x6f, 0x6e, 0x2f, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2f, 0x63, 0x72, 0x79, 0x70, 0x74,
	0x6f, 0x2f, 0x76, 0x33, 0x30, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_com_digitalasset_canton_admin_crypto_v30_crypto_proto_rawDescOnce sync.Once
	file_com_digitalasset_canton_admin_crypto_v30_crypto_proto_rawDescData = file_com_digitalasset_canton_admin_crypto_v30_crypto_proto_rawDesc
)

func file_com_digitalasset_canton_admin_crypto_v30_crypto_proto_rawDescGZIP() []byte {
	file_com_digitalasset_canton_admin_crypto_v30_crypto_proto_rawDescOnce.Do(func() {
		file_com_digitalasset_canton_admin_crypto_v30_crypto_proto_rawDescData = protoimpl.X.CompressGZIP(file_com_digitalasset_canton_admin_crypto_v30_crypto_proto_rawDescData)
	})
	return file_com_digitalasset_canton_admin_crypto_v30_crypto_proto_rawDescData
}

var file_com_digitalasset_canton_admin_crypto_v30_crypto_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_com_digitalasset_canton_admin_crypto_v30_crypto_proto_msgTypes = make([]protoimpl.MessageInfo, 1)
var file_com_digitalasset_canton_admin_crypto_v30_crypto_proto_goTypes = []any{
	(HmacAlgorithm)(0), // 0: com.digitalasset.canton.admin.crypto.v30.HmacAlgorithm
	(*Salt)(nil),       // 1: com.digitalasset.canton.admin.crypto.v30.Salt
}
var file_com_digitalasset_canton_admin_crypto_v30_crypto_proto_depIdxs = []int32{
	0, // 0: com.digitalasset.canton.admin.crypto.v30.Salt.hmac:type_name -> com.digitalasset.canton.admin.crypto.v30.HmacAlgorithm
	1, // [1:1] is the sub-list for method output_type
	1, // [1:1] is the sub-list for method input_type
	1, // [1:1] is the sub-list for extension type_name
	1, // [1:1] is the sub-list for extension extendee
	0, // [0:1] is the sub-list for field type_name
}

func init() { file_com_digitalasset_canton_admin_crypto_v30_crypto_proto_init() }
func file_com_digitalasset_canton_admin_crypto_v30_crypto_proto_init() {
	if File_com_digitalasset_canton_admin_crypto_v30_crypto_proto != nil {
		return
	}
	file_com_digitalasset_canton_admin_crypto_v30_crypto_proto_msgTypes[0].OneofWrappers = []any{
		(*Salt_Hmac)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_com_digitalasset_canton_admin_crypto_v30_crypto_proto_rawDesc,
			NumEnums:      1,
			NumMessages:   1,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_com_digitalasset_canton_admin_crypto_v30_crypto_proto_goTypes,
		DependencyIndexes: file_com_digitalasset_canton_admin_crypto_v30_crypto_proto_depIdxs,
		EnumInfos:         file_com_digitalasset_canton_admin_crypto_v30_crypto_proto_enumTypes,
		MessageInfos:      file_com_digitalasset_canton_admin_crypto_v30_crypto_proto_msgTypes,
	}.Build()
	File_com_digitalasset_canton_admin_crypto_v30_crypto_proto = out.File
	file_com_digitalasset_canton_admin_crypto_v30_crypto_proto_rawDesc = nil
	file_com_digitalasset_canton_admin_crypto_v30_crypto_proto_goTypes = nil
	file_com_digitalasset_canton_admin_crypto_v30_crypto_proto_depIdxs = nil
}
