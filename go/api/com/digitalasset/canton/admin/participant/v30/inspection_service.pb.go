// Copyright (c) 2017-2025 Digital Asset (Switzerland) GmbH and/or its affiliates. All rights reserved.
// SPDX-License-Identifier: Apache-2.0
// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.35.2
// 	protoc        v5.27.2
// source: com/digitalasset/canton/admin/participant/v30/inspection_service.proto

package v30

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type ReceivedCommitmentState int32

const (
	ReceivedCommitmentState_RECEIVED_COMMITMENT_STATE_UNSPECIFIED ReceivedCommitmentState = 0
	ReceivedCommitmentState_RECEIVED_COMMITMENT_STATE_MATCH       ReceivedCommitmentState = 1
	ReceivedCommitmentState_RECEIVED_COMMITMENT_STATE_MISMATCH    ReceivedCommitmentState = 2
	ReceivedCommitmentState_RECEIVED_COMMITMENT_STATE_BUFFERED    ReceivedCommitmentState = 3
	ReceivedCommitmentState_RECEIVED_COMMITMENT_STATE_OUTSTANDING ReceivedCommitmentState = 4
)

// Enum value maps for ReceivedCommitmentState.
var (
	ReceivedCommitmentState_name = map[int32]string{
		0: "RECEIVED_COMMITMENT_STATE_UNSPECIFIED",
		1: "RECEIVED_COMMITMENT_STATE_MATCH",
		2: "RECEIVED_COMMITMENT_STATE_MISMATCH",
		3: "RECEIVED_COMMITMENT_STATE_BUFFERED",
		4: "RECEIVED_COMMITMENT_STATE_OUTSTANDING",
	}
	ReceivedCommitmentState_value = map[string]int32{
		"RECEIVED_COMMITMENT_STATE_UNSPECIFIED": 0,
		"RECEIVED_COMMITMENT_STATE_MATCH":       1,
		"RECEIVED_COMMITMENT_STATE_MISMATCH":    2,
		"RECEIVED_COMMITMENT_STATE_BUFFERED":    3,
		"RECEIVED_COMMITMENT_STATE_OUTSTANDING": 4,
	}
)

func (x ReceivedCommitmentState) Enum() *ReceivedCommitmentState {
	p := new(ReceivedCommitmentState)
	*p = x
	return p
}

func (x ReceivedCommitmentState) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ReceivedCommitmentState) Descriptor() protoreflect.EnumDescriptor {
	return file_com_digitalasset_canton_admin_participant_v30_inspection_service_proto_enumTypes[0].Descriptor()
}

func (ReceivedCommitmentState) Type() protoreflect.EnumType {
	return &file_com_digitalasset_canton_admin_participant_v30_inspection_service_proto_enumTypes[0]
}

func (x ReceivedCommitmentState) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ReceivedCommitmentState.Descriptor instead.
func (ReceivedCommitmentState) EnumDescriptor() ([]byte, []int) {
	return file_com_digitalasset_canton_admin_participant_v30_inspection_service_proto_rawDescGZIP(), []int{0}
}

type SentCommitmentState int32

const (
	SentCommitmentState_SENT_COMMITMENT_STATE_UNSPECIFIED  SentCommitmentState = 0
	SentCommitmentState_SENT_COMMITMENT_STATE_MATCH        SentCommitmentState = 1
	SentCommitmentState_SENT_COMMITMENT_STATE_MISMATCH     SentCommitmentState = 2
	SentCommitmentState_SENT_COMMITMENT_STATE_NOT_COMPARED SentCommitmentState = 3
)

// Enum value maps for SentCommitmentState.
var (
	SentCommitmentState_name = map[int32]string{
		0: "SENT_COMMITMENT_STATE_UNSPECIFIED",
		1: "SENT_COMMITMENT_STATE_MATCH",
		2: "SENT_COMMITMENT_STATE_MISMATCH",
		3: "SENT_COMMITMENT_STATE_NOT_COMPARED",
	}
	SentCommitmentState_value = map[string]int32{
		"SENT_COMMITMENT_STATE_UNSPECIFIED":  0,
		"SENT_COMMITMENT_STATE_MATCH":        1,
		"SENT_COMMITMENT_STATE_MISMATCH":     2,
		"SENT_COMMITMENT_STATE_NOT_COMPARED": 3,
	}
)

func (x SentCommitmentState) Enum() *SentCommitmentState {
	p := new(SentCommitmentState)
	*p = x
	return p
}

func (x SentCommitmentState) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SentCommitmentState) Descriptor() protoreflect.EnumDescriptor {
	return file_com_digitalasset_canton_admin_participant_v30_inspection_service_proto_enumTypes[1].Descriptor()
}

func (SentCommitmentState) Type() protoreflect.EnumType {
	return &file_com_digitalasset_canton_admin_participant_v30_inspection_service_proto_enumTypes[1]
}

func (x SentCommitmentState) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use SentCommitmentState.Descriptor instead.
func (SentCommitmentState) EnumDescriptor() ([]byte, []int) {
	return file_com_digitalasset_canton_admin_participant_v30_inspection_service_proto_rawDescGZIP(), []int{1}
}

type LookupContractDomain struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *LookupContractDomain) Reset() {
	*x = LookupContractDomain{}
	mi := &file_com_digitalasset_canton_admin_participant_v30_inspection_service_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *LookupContractDomain) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LookupContractDomain) ProtoMessage() {}

func (x *LookupContractDomain) ProtoReflect() protoreflect.Message {
	mi := &file_com_digitalasset_canton_admin_participant_v30_inspection_service_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LookupContractDomain.ProtoReflect.Descriptor instead.
func (*LookupContractDomain) Descriptor() ([]byte, []int) {
	return file_com_digitalasset_canton_admin_participant_v30_inspection_service_proto_rawDescGZIP(), []int{0}
}

type LookupTransactionDomain struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *LookupTransactionDomain) Reset() {
	*x = LookupTransactionDomain{}
	mi := &file_com_digitalasset_canton_admin_participant_v30_inspection_service_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *LookupTransactionDomain) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LookupTransactionDomain) ProtoMessage() {}

func (x *LookupTransactionDomain) ProtoReflect() protoreflect.Message {
	mi := &file_com_digitalasset_canton_admin_participant_v30_inspection_service_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LookupTransactionDomain.ProtoReflect.Descriptor instead.
func (*LookupTransactionDomain) Descriptor() ([]byte, []int) {
	return file_com_digitalasset_canton_admin_participant_v30_inspection_service_proto_rawDescGZIP(), []int{1}
}

type LookupOffsetByTime struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *LookupOffsetByTime) Reset() {
	*x = LookupOffsetByTime{}
	mi := &file_com_digitalasset_canton_admin_participant_v30_inspection_service_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *LookupOffsetByTime) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LookupOffsetByTime) ProtoMessage() {}

func (x *LookupOffsetByTime) ProtoReflect() protoreflect.Message {
	mi := &file_com_digitalasset_canton_admin_participant_v30_inspection_service_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LookupOffsetByTime.ProtoReflect.Descriptor instead.
func (*LookupOffsetByTime) Descriptor() ([]byte, []int) {
	return file_com_digitalasset_canton_admin_participant_v30_inspection_service_proto_rawDescGZIP(), []int{2}
}

type LookupOffsetByIndex struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *LookupOffsetByIndex) Reset() {
	*x = LookupOffsetByIndex{}
	mi := &file_com_digitalasset_canton_admin_participant_v30_inspection_service_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *LookupOffsetByIndex) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LookupOffsetByIndex) ProtoMessage() {}

func (x *LookupOffsetByIndex) ProtoReflect() protoreflect.Message {
	mi := &file_com_digitalasset_canton_admin_participant_v30_inspection_service_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LookupOffsetByIndex.ProtoReflect.Descriptor instead.
func (*LookupOffsetByIndex) Descriptor() ([]byte, []int) {
	return file_com_digitalasset_canton_admin_participant_v30_inspection_service_proto_rawDescGZIP(), []int{3}
}

type LookupReceivedAcsCommitments struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *LookupReceivedAcsCommitments) Reset() {
	*x = LookupReceivedAcsCommitments{}
	mi := &file_com_digitalasset_canton_admin_participant_v30_inspection_service_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *LookupReceivedAcsCommitments) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LookupReceivedAcsCommitments) ProtoMessage() {}

func (x *LookupReceivedAcsCommitments) ProtoReflect() protoreflect.Message {
	mi := &file_com_digitalasset_canton_admin_participant_v30_inspection_service_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LookupReceivedAcsCommitments.ProtoReflect.Descriptor instead.
func (*LookupReceivedAcsCommitments) Descriptor() ([]byte, []int) {
	return file_com_digitalasset_canton_admin_participant_v30_inspection_service_proto_rawDescGZIP(), []int{4}
}

type TimeRange struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FromExclusive *timestamppb.Timestamp `protobuf:"bytes,1,opt,name=from_exclusive,json=fromExclusive,proto3" json:"from_exclusive,omitempty"`
	ToInclusive   *timestamppb.Timestamp `protobuf:"bytes,2,opt,name=to_inclusive,json=toInclusive,proto3" json:"to_inclusive,omitempty"`
}

func (x *TimeRange) Reset() {
	*x = TimeRange{}
	mi := &file_com_digitalasset_canton_admin_participant_v30_inspection_service_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TimeRange) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TimeRange) ProtoMessage() {}

func (x *TimeRange) ProtoReflect() protoreflect.Message {
	mi := &file_com_digitalasset_canton_admin_participant_v30_inspection_service_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TimeRange.ProtoReflect.Descriptor instead.
func (*TimeRange) Descriptor() ([]byte, []int) {
	return file_com_digitalasset_canton_admin_participant_v30_inspection_service_proto_rawDescGZIP(), []int{5}
}

func (x *TimeRange) GetFromExclusive() *timestamppb.Timestamp {
	if x != nil {
		return x.FromExclusive
	}
	return nil
}

func (x *TimeRange) GetToInclusive() *timestamppb.Timestamp {
	if x != nil {
		return x.ToInclusive
	}
	return nil
}

type DomainTimeRange struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DomainId string     `protobuf:"bytes,1,opt,name=domain_id,json=domainId,proto3" json:"domain_id,omitempty"`
	Interval *TimeRange `protobuf:"bytes,2,opt,name=interval,proto3,oneof" json:"interval,omitempty"`
}

func (x *DomainTimeRange) Reset() {
	*x = DomainTimeRange{}
	mi := &file_com_digitalasset_canton_admin_participant_v30_inspection_service_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DomainTimeRange) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DomainTimeRange) ProtoMessage() {}

func (x *DomainTimeRange) ProtoReflect() protoreflect.Message {
	mi := &file_com_digitalasset_canton_admin_participant_v30_inspection_service_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DomainTimeRange.ProtoReflect.Descriptor instead.
func (*DomainTimeRange) Descriptor() ([]byte, []int) {
	return file_com_digitalasset_canton_admin_participant_v30_inspection_service_proto_rawDescGZIP(), []int{6}
}

func (x *DomainTimeRange) GetDomainId() string {
	if x != nil {
		return x.DomainId
	}
	return ""
}

func (x *DomainTimeRange) GetInterval() *TimeRange {
	if x != nil {
		return x.Interval
	}
	return nil
}

type Interval struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	StartTickExclusive *timestamppb.Timestamp `protobuf:"bytes,1,opt,name=start_tick_exclusive,json=startTickExclusive,proto3" json:"start_tick_exclusive,omitempty"`
	EndTickInclusive   *timestamppb.Timestamp `protobuf:"bytes,2,opt,name=end_tick_inclusive,json=endTickInclusive,proto3" json:"end_tick_inclusive,omitempty"`
}

func (x *Interval) Reset() {
	*x = Interval{}
	mi := &file_com_digitalasset_canton_admin_participant_v30_inspection_service_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Interval) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Interval) ProtoMessage() {}

func (x *Interval) ProtoReflect() protoreflect.Message {
	mi := &file_com_digitalasset_canton_admin_participant_v30_inspection_service_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Interval.ProtoReflect.Descriptor instead.
func (*Interval) Descriptor() ([]byte, []int) {
	return file_com_digitalasset_canton_admin_participant_v30_inspection_service_proto_rawDescGZIP(), []int{7}
}

func (x *Interval) GetStartTickExclusive() *timestamppb.Timestamp {
	if x != nil {
		return x.StartTickExclusive
	}
	return nil
}

func (x *Interval) GetEndTickInclusive() *timestamppb.Timestamp {
	if x != nil {
		return x.EndTickInclusive
	}
	return nil
}

type ReceivedAcsCommitment struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Interval                    *Interval               `protobuf:"bytes,1,opt,name=interval,proto3" json:"interval,omitempty"`
	OriginCounterParticipantUid string                  `protobuf:"bytes,2,opt,name=origin_counter_participant_uid,json=originCounterParticipantUid,proto3" json:"origin_counter_participant_uid,omitempty"`
	ReceivedCommitment          []byte                  `protobuf:"bytes,3,opt,name=received_commitment,json=receivedCommitment,proto3,oneof" json:"received_commitment,omitempty"`
	OwnCommitment               []byte                  `protobuf:"bytes,4,opt,name=own_commitment,json=ownCommitment,proto3,oneof" json:"own_commitment,omitempty"`
	State                       ReceivedCommitmentState `protobuf:"varint,5,opt,name=state,proto3,enum=com.digitalasset.canton.admin.participant.v30.ReceivedCommitmentState" json:"state,omitempty"`
}

func (x *ReceivedAcsCommitment) Reset() {
	*x = ReceivedAcsCommitment{}
	mi := &file_com_digitalasset_canton_admin_participant_v30_inspection_service_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ReceivedAcsCommitment) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReceivedAcsCommitment) ProtoMessage() {}

func (x *ReceivedAcsCommitment) ProtoReflect() protoreflect.Message {
	mi := &file_com_digitalasset_canton_admin_participant_v30_inspection_service_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReceivedAcsCommitment.ProtoReflect.Descriptor instead.
func (*ReceivedAcsCommitment) Descriptor() ([]byte, []int) {
	return file_com_digitalasset_canton_admin_participant_v30_inspection_service_proto_rawDescGZIP(), []int{8}
}

func (x *ReceivedAcsCommitment) GetInterval() *Interval {
	if x != nil {
		return x.Interval
	}
	return nil
}

func (x *ReceivedAcsCommitment) GetOriginCounterParticipantUid() string {
	if x != nil {
		return x.OriginCounterParticipantUid
	}
	return ""
}

func (x *ReceivedAcsCommitment) GetReceivedCommitment() []byte {
	if x != nil {
		return x.ReceivedCommitment
	}
	return nil
}

func (x *ReceivedAcsCommitment) GetOwnCommitment() []byte {
	if x != nil {
		return x.OwnCommitment
	}
	return nil
}

func (x *ReceivedAcsCommitment) GetState() ReceivedCommitmentState {
	if x != nil {
		return x.State
	}
	return ReceivedCommitmentState_RECEIVED_COMMITMENT_STATE_UNSPECIFIED
}

type ReceivedAcsCommitmentPerDomain struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DomainId string                   `protobuf:"bytes,1,opt,name=domain_id,json=domainId,proto3" json:"domain_id,omitempty"`
	Received []*ReceivedAcsCommitment `protobuf:"bytes,2,rep,name=received,proto3" json:"received,omitempty"`
}

func (x *ReceivedAcsCommitmentPerDomain) Reset() {
	*x = ReceivedAcsCommitmentPerDomain{}
	mi := &file_com_digitalasset_canton_admin_participant_v30_inspection_service_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ReceivedAcsCommitmentPerDomain) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReceivedAcsCommitmentPerDomain) ProtoMessage() {}

func (x *ReceivedAcsCommitmentPerDomain) ProtoReflect() protoreflect.Message {
	mi := &file_com_digitalasset_canton_admin_participant_v30_inspection_service_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReceivedAcsCommitmentPerDomain.ProtoReflect.Descriptor instead.
func (*ReceivedAcsCommitmentPerDomain) Descriptor() ([]byte, []int) {
	return file_com_digitalasset_canton_admin_participant_v30_inspection_service_proto_rawDescGZIP(), []int{9}
}

func (x *ReceivedAcsCommitmentPerDomain) GetDomainId() string {
	if x != nil {
		return x.DomainId
	}
	return ""
}

func (x *ReceivedAcsCommitmentPerDomain) GetReceived() []*ReceivedAcsCommitment {
	if x != nil {
		return x.Received
	}
	return nil
}

type SentAcsCommitment struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Interval                  *Interval           `protobuf:"bytes,1,opt,name=interval,proto3" json:"interval,omitempty"`
	DestCounterParticipantUid string              `protobuf:"bytes,2,opt,name=dest_counter_participant_uid,json=destCounterParticipantUid,proto3" json:"dest_counter_participant_uid,omitempty"`
	OwnCommitment             []byte              `protobuf:"bytes,3,opt,name=own_commitment,json=ownCommitment,proto3,oneof" json:"own_commitment,omitempty"`
	ReceivedCommitment        []byte              `protobuf:"bytes,4,opt,name=received_commitment,json=receivedCommitment,proto3,oneof" json:"received_commitment,omitempty"`
	State                     SentCommitmentState `protobuf:"varint,5,opt,name=state,proto3,enum=com.digitalasset.canton.admin.participant.v30.SentCommitmentState" json:"state,omitempty"`
}

func (x *SentAcsCommitment) Reset() {
	*x = SentAcsCommitment{}
	mi := &file_com_digitalasset_canton_admin_participant_v30_inspection_service_proto_msgTypes[10]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SentAcsCommitment) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SentAcsCommitment) ProtoMessage() {}

func (x *SentAcsCommitment) ProtoReflect() protoreflect.Message {
	mi := &file_com_digitalasset_canton_admin_participant_v30_inspection_service_proto_msgTypes[10]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SentAcsCommitment.ProtoReflect.Descriptor instead.
func (*SentAcsCommitment) Descriptor() ([]byte, []int) {
	return file_com_digitalasset_canton_admin_participant_v30_inspection_service_proto_rawDescGZIP(), []int{10}
}

func (x *SentAcsCommitment) GetInterval() *Interval {
	if x != nil {
		return x.Interval
	}
	return nil
}

func (x *SentAcsCommitment) GetDestCounterParticipantUid() string {
	if x != nil {
		return x.DestCounterParticipantUid
	}
	return ""
}

func (x *SentAcsCommitment) GetOwnCommitment() []byte {
	if x != nil {
		return x.OwnCommitment
	}
	return nil
}

func (x *SentAcsCommitment) GetReceivedCommitment() []byte {
	if x != nil {
		return x.ReceivedCommitment
	}
	return nil
}

func (x *SentAcsCommitment) GetState() SentCommitmentState {
	if x != nil {
		return x.State
	}
	return SentCommitmentState_SENT_COMMITMENT_STATE_UNSPECIFIED
}

type SentAcsCommitmentPerDomain struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DomainId string               `protobuf:"bytes,1,opt,name=domain_id,json=domainId,proto3" json:"domain_id,omitempty"`
	Sent     []*SentAcsCommitment `protobuf:"bytes,2,rep,name=sent,proto3" json:"sent,omitempty"`
}

func (x *SentAcsCommitmentPerDomain) Reset() {
	*x = SentAcsCommitmentPerDomain{}
	mi := &file_com_digitalasset_canton_admin_participant_v30_inspection_service_proto_msgTypes[11]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SentAcsCommitmentPerDomain) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SentAcsCommitmentPerDomain) ProtoMessage() {}

func (x *SentAcsCommitmentPerDomain) ProtoReflect() protoreflect.Message {
	mi := &file_com_digitalasset_canton_admin_participant_v30_inspection_service_proto_msgTypes[11]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SentAcsCommitmentPerDomain.ProtoReflect.Descriptor instead.
func (*SentAcsCommitmentPerDomain) Descriptor() ([]byte, []int) {
	return file_com_digitalasset_canton_admin_participant_v30_inspection_service_proto_rawDescGZIP(), []int{11}
}

func (x *SentAcsCommitmentPerDomain) GetDomainId() string {
	if x != nil {
		return x.DomainId
	}
	return ""
}

func (x *SentAcsCommitmentPerDomain) GetSent() []*SentAcsCommitment {
	if x != nil {
		return x.Sent
	}
	return nil
}

type LookupSentAcsCommitments struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *LookupSentAcsCommitments) Reset() {
	*x = LookupSentAcsCommitments{}
	mi := &file_com_digitalasset_canton_admin_participant_v30_inspection_service_proto_msgTypes[12]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *LookupSentAcsCommitments) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LookupSentAcsCommitments) ProtoMessage() {}

func (x *LookupSentAcsCommitments) ProtoReflect() protoreflect.Message {
	mi := &file_com_digitalasset_canton_admin_participant_v30_inspection_service_proto_msgTypes[12]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LookupSentAcsCommitments.ProtoReflect.Descriptor instead.
func (*LookupSentAcsCommitments) Descriptor() ([]byte, []int) {
	return file_com_digitalasset_canton_admin_participant_v30_inspection_service_proto_rawDescGZIP(), []int{12}
}

type SlowCounterParticipantDomainConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DomainIds                    []string `protobuf:"bytes,1,rep,name=domain_ids,json=domainIds,proto3" json:"domain_ids,omitempty"`
	DistinguishedParticipantUids []string `protobuf:"bytes,2,rep,name=distinguished_participant_uids,json=distinguishedParticipantUids,proto3" json:"distinguished_participant_uids,omitempty"`
	ThresholdDistinguished       uint64   `protobuf:"varint,3,opt,name=threshold_distinguished,json=thresholdDistinguished,proto3" json:"threshold_distinguished,omitempty"`
	ThresholdDefault             uint64   `protobuf:"varint,4,opt,name=threshold_default,json=thresholdDefault,proto3" json:"threshold_default,omitempty"`
	ParticipantUidsMetrics       []string `protobuf:"bytes,5,rep,name=participant_uids_metrics,json=participantUidsMetrics,proto3" json:"participant_uids_metrics,omitempty"`
}

func (x *SlowCounterParticipantDomainConfig) Reset() {
	*x = SlowCounterParticipantDomainConfig{}
	mi := &file_com_digitalasset_canton_admin_participant_v30_inspection_service_proto_msgTypes[13]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SlowCounterParticipantDomainConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SlowCounterParticipantDomainConfig) ProtoMessage() {}

func (x *SlowCounterParticipantDomainConfig) ProtoReflect() protoreflect.Message {
	mi := &file_com_digitalasset_canton_admin_participant_v30_inspection_service_proto_msgTypes[13]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SlowCounterParticipantDomainConfig.ProtoReflect.Descriptor instead.
func (*SlowCounterParticipantDomainConfig) Descriptor() ([]byte, []int) {
	return file_com_digitalasset_canton_admin_participant_v30_inspection_service_proto_rawDescGZIP(), []int{13}
}

func (x *SlowCounterParticipantDomainConfig) GetDomainIds() []string {
	if x != nil {
		return x.DomainIds
	}
	return nil
}

func (x *SlowCounterParticipantDomainConfig) GetDistinguishedParticipantUids() []string {
	if x != nil {
		return x.DistinguishedParticipantUids
	}
	return nil
}

func (x *SlowCounterParticipantDomainConfig) GetThresholdDistinguished() uint64 {
	if x != nil {
		return x.ThresholdDistinguished
	}
	return 0
}

func (x *SlowCounterParticipantDomainConfig) GetThresholdDefault() uint64 {
	if x != nil {
		return x.ThresholdDefault
	}
	return 0
}

func (x *SlowCounterParticipantDomainConfig) GetParticipantUidsMetrics() []string {
	if x != nil {
		return x.ParticipantUidsMetrics
	}
	return nil
}

type SetConfigForSlowCounterParticipants struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *SetConfigForSlowCounterParticipants) Reset() {
	*x = SetConfigForSlowCounterParticipants{}
	mi := &file_com_digitalasset_canton_admin_participant_v30_inspection_service_proto_msgTypes[14]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SetConfigForSlowCounterParticipants) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetConfigForSlowCounterParticipants) ProtoMessage() {}

func (x *SetConfigForSlowCounterParticipants) ProtoReflect() protoreflect.Message {
	mi := &file_com_digitalasset_canton_admin_participant_v30_inspection_service_proto_msgTypes[14]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetConfigForSlowCounterParticipants.ProtoReflect.Descriptor instead.
func (*SetConfigForSlowCounterParticipants) Descriptor() ([]byte, []int) {
	return file_com_digitalasset_canton_admin_participant_v30_inspection_service_proto_rawDescGZIP(), []int{14}
}

type GetConfigForSlowCounterParticipants struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *GetConfigForSlowCounterParticipants) Reset() {
	*x = GetConfigForSlowCounterParticipants{}
	mi := &file_com_digitalasset_canton_admin_participant_v30_inspection_service_proto_msgTypes[15]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetConfigForSlowCounterParticipants) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetConfigForSlowCounterParticipants) ProtoMessage() {}

func (x *GetConfigForSlowCounterParticipants) ProtoReflect() protoreflect.Message {
	mi := &file_com_digitalasset_canton_admin_participant_v30_inspection_service_proto_msgTypes[15]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetConfigForSlowCounterParticipants.ProtoReflect.Descriptor instead.
func (*GetConfigForSlowCounterParticipants) Descriptor() ([]byte, []int) {
	return file_com_digitalasset_canton_admin_participant_v30_inspection_service_proto_rawDescGZIP(), []int{15}
}

type GetIntervalsBehindForCounterParticipants struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *GetIntervalsBehindForCounterParticipants) Reset() {
	*x = GetIntervalsBehindForCounterParticipants{}
	mi := &file_com_digitalasset_canton_admin_participant_v30_inspection_service_proto_msgTypes[16]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetIntervalsBehindForCounterParticipants) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetIntervalsBehindForCounterParticipants) ProtoMessage() {}

func (x *GetIntervalsBehindForCounterParticipants) ProtoReflect() protoreflect.Message {
	mi := &file_com_digitalasset_canton_admin_participant_v30_inspection_service_proto_msgTypes[16]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetIntervalsBehindForCounterParticipants.ProtoReflect.Descriptor instead.
func (*GetIntervalsBehindForCounterParticipants) Descriptor() ([]byte, []int) {
	return file_com_digitalasset_canton_admin_participant_v30_inspection_service_proto_rawDescGZIP(), []int{16}
}

type LookupContractDomain_Request struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ContractId []string `protobuf:"bytes,1,rep,name=contract_id,json=contractId,proto3" json:"contract_id,omitempty"`
}

func (x *LookupContractDomain_Request) Reset() {
	*x = LookupContractDomain_Request{}
	mi := &file_com_digitalasset_canton_admin_participant_v30_inspection_service_proto_msgTypes[17]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *LookupContractDomain_Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LookupContractDomain_Request) ProtoMessage() {}

func (x *LookupContractDomain_Request) ProtoReflect() protoreflect.Message {
	mi := &file_com_digitalasset_canton_admin_participant_v30_inspection_service_proto_msgTypes[17]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LookupContractDomain_Request.ProtoReflect.Descriptor instead.
func (*LookupContractDomain_Request) Descriptor() ([]byte, []int) {
	return file_com_digitalasset_canton_admin_participant_v30_inspection_service_proto_rawDescGZIP(), []int{0, 0}
}

func (x *LookupContractDomain_Request) GetContractId() []string {
	if x != nil {
		return x.ContractId
	}
	return nil
}

type LookupContractDomain_Response struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Results map[string]string `protobuf:"bytes,1,rep,name=results,proto3" json:"results,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *LookupContractDomain_Response) Reset() {
	*x = LookupContractDomain_Response{}
	mi := &file_com_digitalasset_canton_admin_participant_v30_inspection_service_proto_msgTypes[18]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *LookupContractDomain_Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LookupContractDomain_Response) ProtoMessage() {}

func (x *LookupContractDomain_Response) ProtoReflect() protoreflect.Message {
	mi := &file_com_digitalasset_canton_admin_participant_v30_inspection_service_proto_msgTypes[18]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LookupContractDomain_Response.ProtoReflect.Descriptor instead.
func (*LookupContractDomain_Response) Descriptor() ([]byte, []int) {
	return file_com_digitalasset_canton_admin_participant_v30_inspection_service_proto_rawDescGZIP(), []int{0, 1}
}

func (x *LookupContractDomain_Response) GetResults() map[string]string {
	if x != nil {
		return x.Results
	}
	return nil
}

type LookupTransactionDomain_Request struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TransactionId string `protobuf:"bytes,1,opt,name=transaction_id,json=transactionId,proto3" json:"transaction_id,omitempty"`
}

func (x *LookupTransactionDomain_Request) Reset() {
	*x = LookupTransactionDomain_Request{}
	mi := &file_com_digitalasset_canton_admin_participant_v30_inspection_service_proto_msgTypes[20]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *LookupTransactionDomain_Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LookupTransactionDomain_Request) ProtoMessage() {}

func (x *LookupTransactionDomain_Request) ProtoReflect() protoreflect.Message {
	mi := &file_com_digitalasset_canton_admin_participant_v30_inspection_service_proto_msgTypes[20]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LookupTransactionDomain_Request.ProtoReflect.Descriptor instead.
func (*LookupTransactionDomain_Request) Descriptor() ([]byte, []int) {
	return file_com_digitalasset_canton_admin_participant_v30_inspection_service_proto_rawDescGZIP(), []int{1, 0}
}

func (x *LookupTransactionDomain_Request) GetTransactionId() string {
	if x != nil {
		return x.TransactionId
	}
	return ""
}

type LookupTransactionDomain_Response struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DomainId string `protobuf:"bytes,1,opt,name=domain_id,json=domainId,proto3" json:"domain_id,omitempty"`
}

func (x *LookupTransactionDomain_Response) Reset() {
	*x = LookupTransactionDomain_Response{}
	mi := &file_com_digitalasset_canton_admin_participant_v30_inspection_service_proto_msgTypes[21]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *LookupTransactionDomain_Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LookupTransactionDomain_Response) ProtoMessage() {}

func (x *LookupTransactionDomain_Response) ProtoReflect() protoreflect.Message {
	mi := &file_com_digitalasset_canton_admin_participant_v30_inspection_service_proto_msgTypes[21]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LookupTransactionDomain_Response.ProtoReflect.Descriptor instead.
func (*LookupTransactionDomain_Response) Descriptor() ([]byte, []int) {
	return file_com_digitalasset_canton_admin_participant_v30_inspection_service_proto_rawDescGZIP(), []int{1, 1}
}

func (x *LookupTransactionDomain_Response) GetDomainId() string {
	if x != nil {
		return x.DomainId
	}
	return ""
}

type LookupOffsetByTime_Request struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Timestamp *timestamppb.Timestamp `protobuf:"bytes,1,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
}

func (x *LookupOffsetByTime_Request) Reset() {
	*x = LookupOffsetByTime_Request{}
	mi := &file_com_digitalasset_canton_admin_participant_v30_inspection_service_proto_msgTypes[22]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *LookupOffsetByTime_Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LookupOffsetByTime_Request) ProtoMessage() {}

func (x *LookupOffsetByTime_Request) ProtoReflect() protoreflect.Message {
	mi := &file_com_digitalasset_canton_admin_participant_v30_inspection_service_proto_msgTypes[22]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LookupOffsetByTime_Request.ProtoReflect.Descriptor instead.
func (*LookupOffsetByTime_Request) Descriptor() ([]byte, []int) {
	return file_com_digitalasset_canton_admin_participant_v30_inspection_service_proto_rawDescGZIP(), []int{2, 0}
}

func (x *LookupOffsetByTime_Request) GetTimestamp() *timestamppb.Timestamp {
	if x != nil {
		return x.Timestamp
	}
	return nil
}

type LookupOffsetByTime_Response struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Offset string `protobuf:"bytes,1,opt,name=offset,proto3" json:"offset,omitempty"`
}

func (x *LookupOffsetByTime_Response) Reset() {
	*x = LookupOffsetByTime_Response{}
	mi := &file_com_digitalasset_canton_admin_participant_v30_inspection_service_proto_msgTypes[23]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *LookupOffsetByTime_Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LookupOffsetByTime_Response) ProtoMessage() {}

func (x *LookupOffsetByTime_Response) ProtoReflect() protoreflect.Message {
	mi := &file_com_digitalasset_canton_admin_participant_v30_inspection_service_proto_msgTypes[23]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LookupOffsetByTime_Response.ProtoReflect.Descriptor instead.
func (*LookupOffsetByTime_Response) Descriptor() ([]byte, []int) {
	return file_com_digitalasset_canton_admin_participant_v30_inspection_service_proto_rawDescGZIP(), []int{2, 1}
}

func (x *LookupOffsetByTime_Response) GetOffset() string {
	if x != nil {
		return x.Offset
	}
	return ""
}

type LookupOffsetByIndex_Request struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Index int64 `protobuf:"varint,1,opt,name=index,proto3" json:"index,omitempty"`
}

func (x *LookupOffsetByIndex_Request) Reset() {
	*x = LookupOffsetByIndex_Request{}
	mi := &file_com_digitalasset_canton_admin_participant_v30_inspection_service_proto_msgTypes[24]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *LookupOffsetByIndex_Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LookupOffsetByIndex_Request) ProtoMessage() {}

func (x *LookupOffsetByIndex_Request) ProtoReflect() protoreflect.Message {
	mi := &file_com_digitalasset_canton_admin_participant_v30_inspection_service_proto_msgTypes[24]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LookupOffsetByIndex_Request.ProtoReflect.Descriptor instead.
func (*LookupOffsetByIndex_Request) Descriptor() ([]byte, []int) {
	return file_com_digitalasset_canton_admin_participant_v30_inspection_service_proto_rawDescGZIP(), []int{3, 0}
}

func (x *LookupOffsetByIndex_Request) GetIndex() int64 {
	if x != nil {
		return x.Index
	}
	return 0
}

type LookupOffsetByIndex_Response struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Offset string `protobuf:"bytes,1,opt,name=offset,proto3" json:"offset,omitempty"`
}

func (x *LookupOffsetByIndex_Response) Reset() {
	*x = LookupOffsetByIndex_Response{}
	mi := &file_com_digitalasset_canton_admin_participant_v30_inspection_service_proto_msgTypes[25]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *LookupOffsetByIndex_Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LookupOffsetByIndex_Response) ProtoMessage() {}

func (x *LookupOffsetByIndex_Response) ProtoReflect() protoreflect.Message {
	mi := &file_com_digitalasset_canton_admin_participant_v30_inspection_service_proto_msgTypes[25]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LookupOffsetByIndex_Response.ProtoReflect.Descriptor instead.
func (*LookupOffsetByIndex_Response) Descriptor() ([]byte, []int) {
	return file_com_digitalasset_canton_admin_participant_v30_inspection_service_proto_rawDescGZIP(), []int{3, 1}
}

func (x *LookupOffsetByIndex_Response) GetOffset() string {
	if x != nil {
		return x.Offset
	}
	return ""
}

type LookupReceivedAcsCommitments_Request struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TimeRanges             []*DomainTimeRange        `protobuf:"bytes,1,rep,name=time_ranges,json=timeRanges,proto3" json:"time_ranges,omitempty"`
	CounterParticipantUids []string                  `protobuf:"bytes,2,rep,name=counter_participant_uids,json=counterParticipantUids,proto3" json:"counter_participant_uids,omitempty"`
	CommitmentState        []ReceivedCommitmentState `protobuf:"varint,3,rep,packed,name=commitment_state,json=commitmentState,proto3,enum=com.digitalasset.canton.admin.participant.v30.ReceivedCommitmentState" json:"commitment_state,omitempty"`
	Verbose                bool                      `protobuf:"varint,4,opt,name=verbose,proto3" json:"verbose,omitempty"`
}

func (x *LookupReceivedAcsCommitments_Request) Reset() {
	*x = LookupReceivedAcsCommitments_Request{}
	mi := &file_com_digitalasset_canton_admin_participant_v30_inspection_service_proto_msgTypes[26]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *LookupReceivedAcsCommitments_Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LookupReceivedAcsCommitments_Request) ProtoMessage() {}

func (x *LookupReceivedAcsCommitments_Request) ProtoReflect() protoreflect.Message {
	mi := &file_com_digitalasset_canton_admin_participant_v30_inspection_service_proto_msgTypes[26]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LookupReceivedAcsCommitments_Request.ProtoReflect.Descriptor instead.
func (*LookupReceivedAcsCommitments_Request) Descriptor() ([]byte, []int) {
	return file_com_digitalasset_canton_admin_participant_v30_inspection_service_proto_rawDescGZIP(), []int{4, 0}
}

func (x *LookupReceivedAcsCommitments_Request) GetTimeRanges() []*DomainTimeRange {
	if x != nil {
		return x.TimeRanges
	}
	return nil
}

func (x *LookupReceivedAcsCommitments_Request) GetCounterParticipantUids() []string {
	if x != nil {
		return x.CounterParticipantUids
	}
	return nil
}

func (x *LookupReceivedAcsCommitments_Request) GetCommitmentState() []ReceivedCommitmentState {
	if x != nil {
		return x.CommitmentState
	}
	return nil
}

func (x *LookupReceivedAcsCommitments_Request) GetVerbose() bool {
	if x != nil {
		return x.Verbose
	}
	return false
}

type LookupReceivedAcsCommitments_Response struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Received []*ReceivedAcsCommitmentPerDomain `protobuf:"bytes,1,rep,name=received,proto3" json:"received,omitempty"`
}

func (x *LookupReceivedAcsCommitments_Response) Reset() {
	*x = LookupReceivedAcsCommitments_Response{}
	mi := &file_com_digitalasset_canton_admin_participant_v30_inspection_service_proto_msgTypes[27]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *LookupReceivedAcsCommitments_Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LookupReceivedAcsCommitments_Response) ProtoMessage() {}

func (x *LookupReceivedAcsCommitments_Response) ProtoReflect() protoreflect.Message {
	mi := &file_com_digitalasset_canton_admin_participant_v30_inspection_service_proto_msgTypes[27]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LookupReceivedAcsCommitments_Response.ProtoReflect.Descriptor instead.
func (*LookupReceivedAcsCommitments_Response) Descriptor() ([]byte, []int) {
	return file_com_digitalasset_canton_admin_participant_v30_inspection_service_proto_rawDescGZIP(), []int{4, 1}
}

func (x *LookupReceivedAcsCommitments_Response) GetReceived() []*ReceivedAcsCommitmentPerDomain {
	if x != nil {
		return x.Received
	}
	return nil
}

type LookupSentAcsCommitments_Request struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TimeRanges             []*DomainTimeRange    `protobuf:"bytes,1,rep,name=time_ranges,json=timeRanges,proto3" json:"time_ranges,omitempty"`
	CounterParticipantUids []string              `protobuf:"bytes,2,rep,name=counter_participant_uids,json=counterParticipantUids,proto3" json:"counter_participant_uids,omitempty"`
	CommitmentState        []SentCommitmentState `protobuf:"varint,3,rep,packed,name=commitment_state,json=commitmentState,proto3,enum=com.digitalasset.canton.admin.participant.v30.SentCommitmentState" json:"commitment_state,omitempty"`
	Verbose                bool                  `protobuf:"varint,4,opt,name=verbose,proto3" json:"verbose,omitempty"`
}

func (x *LookupSentAcsCommitments_Request) Reset() {
	*x = LookupSentAcsCommitments_Request{}
	mi := &file_com_digitalasset_canton_admin_participant_v30_inspection_service_proto_msgTypes[28]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *LookupSentAcsCommitments_Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LookupSentAcsCommitments_Request) ProtoMessage() {}

func (x *LookupSentAcsCommitments_Request) ProtoReflect() protoreflect.Message {
	mi := &file_com_digitalasset_canton_admin_participant_v30_inspection_service_proto_msgTypes[28]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LookupSentAcsCommitments_Request.ProtoReflect.Descriptor instead.
func (*LookupSentAcsCommitments_Request) Descriptor() ([]byte, []int) {
	return file_com_digitalasset_canton_admin_participant_v30_inspection_service_proto_rawDescGZIP(), []int{12, 0}
}

func (x *LookupSentAcsCommitments_Request) GetTimeRanges() []*DomainTimeRange {
	if x != nil {
		return x.TimeRanges
	}
	return nil
}

func (x *LookupSentAcsCommitments_Request) GetCounterParticipantUids() []string {
	if x != nil {
		return x.CounterParticipantUids
	}
	return nil
}

func (x *LookupSentAcsCommitments_Request) GetCommitmentState() []SentCommitmentState {
	if x != nil {
		return x.CommitmentState
	}
	return nil
}

func (x *LookupSentAcsCommitments_Request) GetVerbose() bool {
	if x != nil {
		return x.Verbose
	}
	return false
}

type LookupSentAcsCommitments_Response struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Sent []*SentAcsCommitmentPerDomain `protobuf:"bytes,1,rep,name=sent,proto3" json:"sent,omitempty"`
}

func (x *LookupSentAcsCommitments_Response) Reset() {
	*x = LookupSentAcsCommitments_Response{}
	mi := &file_com_digitalasset_canton_admin_participant_v30_inspection_service_proto_msgTypes[29]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *LookupSentAcsCommitments_Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LookupSentAcsCommitments_Response) ProtoMessage() {}

func (x *LookupSentAcsCommitments_Response) ProtoReflect() protoreflect.Message {
	mi := &file_com_digitalasset_canton_admin_participant_v30_inspection_service_proto_msgTypes[29]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LookupSentAcsCommitments_Response.ProtoReflect.Descriptor instead.
func (*LookupSentAcsCommitments_Response) Descriptor() ([]byte, []int) {
	return file_com_digitalasset_canton_admin_participant_v30_inspection_service_proto_rawDescGZIP(), []int{12, 1}
}

func (x *LookupSentAcsCommitments_Response) GetSent() []*SentAcsCommitmentPerDomain {
	if x != nil {
		return x.Sent
	}
	return nil
}

type SetConfigForSlowCounterParticipants_Request struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Configs []*SlowCounterParticipantDomainConfig `protobuf:"bytes,1,rep,name=configs,proto3" json:"configs,omitempty"`
}

func (x *SetConfigForSlowCounterParticipants_Request) Reset() {
	*x = SetConfigForSlowCounterParticipants_Request{}
	mi := &file_com_digitalasset_canton_admin_participant_v30_inspection_service_proto_msgTypes[30]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SetConfigForSlowCounterParticipants_Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetConfigForSlowCounterParticipants_Request) ProtoMessage() {}

func (x *SetConfigForSlowCounterParticipants_Request) ProtoReflect() protoreflect.Message {
	mi := &file_com_digitalasset_canton_admin_participant_v30_inspection_service_proto_msgTypes[30]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetConfigForSlowCounterParticipants_Request.ProtoReflect.Descriptor instead.
func (*SetConfigForSlowCounterParticipants_Request) Descriptor() ([]byte, []int) {
	return file_com_digitalasset_canton_admin_participant_v30_inspection_service_proto_rawDescGZIP(), []int{14, 0}
}

func (x *SetConfigForSlowCounterParticipants_Request) GetConfigs() []*SlowCounterParticipantDomainConfig {
	if x != nil {
		return x.Configs
	}
	return nil
}

type SetConfigForSlowCounterParticipants_Response struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *SetConfigForSlowCounterParticipants_Response) Reset() {
	*x = SetConfigForSlowCounterParticipants_Response{}
	mi := &file_com_digitalasset_canton_admin_participant_v30_inspection_service_proto_msgTypes[31]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SetConfigForSlowCounterParticipants_Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetConfigForSlowCounterParticipants_Response) ProtoMessage() {}

func (x *SetConfigForSlowCounterParticipants_Response) ProtoReflect() protoreflect.Message {
	mi := &file_com_digitalasset_canton_admin_participant_v30_inspection_service_proto_msgTypes[31]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetConfigForSlowCounterParticipants_Response.ProtoReflect.Descriptor instead.
func (*SetConfigForSlowCounterParticipants_Response) Descriptor() ([]byte, []int) {
	return file_com_digitalasset_canton_admin_participant_v30_inspection_service_proto_rawDescGZIP(), []int{14, 1}
}

type GetConfigForSlowCounterParticipants_Request struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DomainIds []string `protobuf:"bytes,2,rep,name=domain_ids,json=domainIds,proto3" json:"domain_ids,omitempty"`
}

func (x *GetConfigForSlowCounterParticipants_Request) Reset() {
	*x = GetConfigForSlowCounterParticipants_Request{}
	mi := &file_com_digitalasset_canton_admin_participant_v30_inspection_service_proto_msgTypes[32]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetConfigForSlowCounterParticipants_Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetConfigForSlowCounterParticipants_Request) ProtoMessage() {}

func (x *GetConfigForSlowCounterParticipants_Request) ProtoReflect() protoreflect.Message {
	mi := &file_com_digitalasset_canton_admin_participant_v30_inspection_service_proto_msgTypes[32]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetConfigForSlowCounterParticipants_Request.ProtoReflect.Descriptor instead.
func (*GetConfigForSlowCounterParticipants_Request) Descriptor() ([]byte, []int) {
	return file_com_digitalasset_canton_admin_participant_v30_inspection_service_proto_rawDescGZIP(), []int{15, 0}
}

func (x *GetConfigForSlowCounterParticipants_Request) GetDomainIds() []string {
	if x != nil {
		return x.DomainIds
	}
	return nil
}

type GetConfigForSlowCounterParticipants_Response struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Configs []*SlowCounterParticipantDomainConfig `protobuf:"bytes,1,rep,name=configs,proto3" json:"configs,omitempty"`
}

func (x *GetConfigForSlowCounterParticipants_Response) Reset() {
	*x = GetConfigForSlowCounterParticipants_Response{}
	mi := &file_com_digitalasset_canton_admin_participant_v30_inspection_service_proto_msgTypes[33]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetConfigForSlowCounterParticipants_Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetConfigForSlowCounterParticipants_Response) ProtoMessage() {}

func (x *GetConfigForSlowCounterParticipants_Response) ProtoReflect() protoreflect.Message {
	mi := &file_com_digitalasset_canton_admin_participant_v30_inspection_service_proto_msgTypes[33]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetConfigForSlowCounterParticipants_Response.ProtoReflect.Descriptor instead.
func (*GetConfigForSlowCounterParticipants_Response) Descriptor() ([]byte, []int) {
	return file_com_digitalasset_canton_admin_participant_v30_inspection_service_proto_rawDescGZIP(), []int{15, 1}
}

func (x *GetConfigForSlowCounterParticipants_Response) GetConfigs() []*SlowCounterParticipantDomainConfig {
	if x != nil {
		return x.Configs
	}
	return nil
}

type GetIntervalsBehindForCounterParticipants_CounterParticipantInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CounterParticipantUid   string                 `protobuf:"bytes,1,opt,name=counter_participant_uid,json=counterParticipantUid,proto3" json:"counter_participant_uid,omitempty"`
	DomainId                string                 `protobuf:"bytes,2,opt,name=domain_id,json=domainId,proto3" json:"domain_id,omitempty"`
	IntervalsBehind         uint64                 `protobuf:"varint,3,opt,name=intervals_behind,json=intervalsBehind,proto3" json:"intervals_behind,omitempty"`
	AsOfSequencingTimestamp *timestamppb.Timestamp `protobuf:"bytes,4,opt,name=as_of_sequencing_timestamp,json=asOfSequencingTimestamp,proto3" json:"as_of_sequencing_timestamp,omitempty"`
}

func (x *GetIntervalsBehindForCounterParticipants_CounterParticipantInfo) Reset() {
	*x = GetIntervalsBehindForCounterParticipants_CounterParticipantInfo{}
	mi := &file_com_digitalasset_canton_admin_participant_v30_inspection_service_proto_msgTypes[34]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetIntervalsBehindForCounterParticipants_CounterParticipantInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetIntervalsBehindForCounterParticipants_CounterParticipantInfo) ProtoMessage() {}

func (x *GetIntervalsBehindForCounterParticipants_CounterParticipantInfo) ProtoReflect() protoreflect.Message {
	mi := &file_com_digitalasset_canton_admin_participant_v30_inspection_service_proto_msgTypes[34]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetIntervalsBehindForCounterParticipants_CounterParticipantInfo.ProtoReflect.Descriptor instead.
func (*GetIntervalsBehindForCounterParticipants_CounterParticipantInfo) Descriptor() ([]byte, []int) {
	return file_com_digitalasset_canton_admin_participant_v30_inspection_service_proto_rawDescGZIP(), []int{16, 0}
}

func (x *GetIntervalsBehindForCounterParticipants_CounterParticipantInfo) GetCounterParticipantUid() string {
	if x != nil {
		return x.CounterParticipantUid
	}
	return ""
}

func (x *GetIntervalsBehindForCounterParticipants_CounterParticipantInfo) GetDomainId() string {
	if x != nil {
		return x.DomainId
	}
	return ""
}

func (x *GetIntervalsBehindForCounterParticipants_CounterParticipantInfo) GetIntervalsBehind() uint64 {
	if x != nil {
		return x.IntervalsBehind
	}
	return 0
}

func (x *GetIntervalsBehindForCounterParticipants_CounterParticipantInfo) GetAsOfSequencingTimestamp() *timestamppb.Timestamp {
	if x != nil {
		return x.AsOfSequencingTimestamp
	}
	return nil
}

type GetIntervalsBehindForCounterParticipants_Request struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CounterParticipantUids []string `protobuf:"bytes,1,rep,name=counter_participant_uids,json=counterParticipantUids,proto3" json:"counter_participant_uids,omitempty"`
	DomainIds              []string `protobuf:"bytes,2,rep,name=domain_ids,json=domainIds,proto3" json:"domain_ids,omitempty"`
	Threshold              *uint64  `protobuf:"varint,3,opt,name=threshold,proto3,oneof" json:"threshold,omitempty"`
}

func (x *GetIntervalsBehindForCounterParticipants_Request) Reset() {
	*x = GetIntervalsBehindForCounterParticipants_Request{}
	mi := &file_com_digitalasset_canton_admin_participant_v30_inspection_service_proto_msgTypes[35]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetIntervalsBehindForCounterParticipants_Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetIntervalsBehindForCounterParticipants_Request) ProtoMessage() {}

func (x *GetIntervalsBehindForCounterParticipants_Request) ProtoReflect() protoreflect.Message {
	mi := &file_com_digitalasset_canton_admin_participant_v30_inspection_service_proto_msgTypes[35]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetIntervalsBehindForCounterParticipants_Request.ProtoReflect.Descriptor instead.
func (*GetIntervalsBehindForCounterParticipants_Request) Descriptor() ([]byte, []int) {
	return file_com_digitalasset_canton_admin_participant_v30_inspection_service_proto_rawDescGZIP(), []int{16, 1}
}

func (x *GetIntervalsBehindForCounterParticipants_Request) GetCounterParticipantUids() []string {
	if x != nil {
		return x.CounterParticipantUids
	}
	return nil
}

func (x *GetIntervalsBehindForCounterParticipants_Request) GetDomainIds() []string {
	if x != nil {
		return x.DomainIds
	}
	return nil
}

func (x *GetIntervalsBehindForCounterParticipants_Request) GetThreshold() uint64 {
	if x != nil && x.Threshold != nil {
		return *x.Threshold
	}
	return 0
}

type GetIntervalsBehindForCounterParticipants_Response struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IntervalsBehind []*GetIntervalsBehindForCounterParticipants_CounterParticipantInfo `protobuf:"bytes,1,rep,name=intervals_behind,json=intervalsBehind,proto3" json:"intervals_behind,omitempty"`
}

func (x *GetIntervalsBehindForCounterParticipants_Response) Reset() {
	*x = GetIntervalsBehindForCounterParticipants_Response{}
	mi := &file_com_digitalasset_canton_admin_participant_v30_inspection_service_proto_msgTypes[36]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetIntervalsBehindForCounterParticipants_Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetIntervalsBehindForCounterParticipants_Response) ProtoMessage() {}

func (x *GetIntervalsBehindForCounterParticipants_Response) ProtoReflect() protoreflect.Message {
	mi := &file_com_digitalasset_canton_admin_participant_v30_inspection_service_proto_msgTypes[36]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetIntervalsBehindForCounterParticipants_Response.ProtoReflect.Descriptor instead.
func (*GetIntervalsBehindForCounterParticipants_Response) Descriptor() ([]byte, []int) {
	return file_com_digitalasset_canton_admin_participant_v30_inspection_service_proto_rawDescGZIP(), []int{16, 2}
}

func (x *GetIntervalsBehindForCounterParticipants_Response) GetIntervalsBehind() []*GetIntervalsBehindForCounterParticipants_CounterParticipantInfo {
	if x != nil {
		return x.IntervalsBehind
	}
	return nil
}

var File_com_digitalasset_canton_admin_participant_v30_inspection_service_proto protoreflect.FileDescriptor

var file_com_digitalasset_canton_admin_participant_v30_inspection_service_proto_rawDesc = []byte{
	0x0a, 0x46, 0x63, 0x6f, 0x6d, 0x2f, 0x64, 0x69, 0x67, 0x69, 0x74, 0x61, 0x6c, 0x61, 0x73, 0x73,
	0x65, 0x74, 0x2f, 0x63, 0x61, 0x6e, 0x74, 0x6f, 0x6e, 0x2f, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2f,
	0x70, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x2f, 0x76, 0x33, 0x30, 0x2f,
	0x69, 0x6e, 0x73, 0x70, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x2d, 0x63, 0x6f, 0x6d, 0x2e, 0x64, 0x69,
	0x67, 0x69, 0x74, 0x61, 0x6c, 0x61, 0x73, 0x73, 0x65, 0x74, 0x2e, 0x63, 0x61, 0x6e, 0x74, 0x6f,
	0x6e, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x70, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70,
	0x61, 0x6e, 0x74, 0x2e, 0x76, 0x33, 0x30, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61,
	0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x80, 0x02, 0x0a, 0x14, 0x4c, 0x6f, 0x6f,
	0x6b, 0x75, 0x70, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x44, 0x6f, 0x6d, 0x61, 0x69,
	0x6e, 0x1a, 0x2a, 0x0a, 0x07, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1f, 0x0a, 0x0b,
	0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x03, 0x28,
	0x09, 0x52, 0x0a, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x49, 0x64, 0x1a, 0xbb, 0x01,
	0x0a, 0x08, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x73, 0x0a, 0x07, 0x72, 0x65,
	0x73, 0x75, 0x6c, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x59, 0x2e, 0x63, 0x6f,
	0x6d, 0x2e, 0x64, 0x69, 0x67, 0x69, 0x74, 0x61, 0x6c, 0x61, 0x73, 0x73, 0x65, 0x74, 0x2e, 0x63,
	0x61, 0x6e, 0x74, 0x6f, 0x6e, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x70, 0x61, 0x72, 0x74,
	0x69, 0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x2e, 0x76, 0x33, 0x30, 0x2e, 0x4c, 0x6f, 0x6f, 0x6b,
	0x75, 0x70, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e,
	0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74,
	0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x07, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x1a,
	0x3a, 0x0a, 0x0c, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12,
	0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65,
	0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x74, 0x0a, 0x17, 0x4c,
	0x6f, 0x6f, 0x6b, 0x75, 0x70, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x1a, 0x30, 0x0a, 0x07, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x25, 0x0a, 0x0e, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x74, 0x72, 0x61, 0x6e, 0x73,
	0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x1a, 0x27, 0x0a, 0x08, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x5f, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x49,
	0x64, 0x22, 0x7d, 0x0a, 0x12, 0x4c, 0x6f, 0x6f, 0x6b, 0x75, 0x70, 0x4f, 0x66, 0x66, 0x73, 0x65,
	0x74, 0x42, 0x79, 0x54, 0x69, 0x6d, 0x65, 0x1a, 0x43, 0x0a, 0x07, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x38, 0x0a, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d,
	0x70, 0x52, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x1a, 0x22, 0x0a, 0x08,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x6f, 0x66, 0x66, 0x73,
	0x65, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74,
	0x22, 0x5a, 0x0a, 0x13, 0x4c, 0x6f, 0x6f, 0x6b, 0x75, 0x70, 0x4f, 0x66, 0x66, 0x73, 0x65, 0x74,
	0x42, 0x79, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x1a, 0x1f, 0x0a, 0x07, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x05, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x1a, 0x22, 0x0a, 0x08, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x22, 0xc9, 0x03, 0x0a,
	0x1c, 0x4c, 0x6f, 0x6f, 0x6b, 0x75, 0x70, 0x52, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x64, 0x41,
	0x63, 0x73, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x1a, 0xb1, 0x02,
	0x0a, 0x07, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x5f, 0x0a, 0x0b, 0x74, 0x69, 0x6d,
	0x65, 0x5f, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x3e,
	0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x64, 0x69, 0x67, 0x69, 0x74, 0x61, 0x6c, 0x61, 0x73, 0x73, 0x65,
	0x74, 0x2e, 0x63, 0x61, 0x6e, 0x74, 0x6f, 0x6e, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x70,
	0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x2e, 0x76, 0x33, 0x30, 0x2e, 0x44,
	0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x52, 0x0a,
	0x74, 0x69, 0x6d, 0x65, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x73, 0x12, 0x38, 0x0a, 0x18, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x65, 0x72, 0x5f, 0x70, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6e,
	0x74, 0x5f, 0x75, 0x69, 0x64, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x16, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x65, 0x72, 0x50, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6e, 0x74,
	0x55, 0x69, 0x64, 0x73, 0x12, 0x71, 0x0a, 0x10, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x6d, 0x65,
	0x6e, 0x74, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0e, 0x32, 0x46,
	0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x64, 0x69, 0x67, 0x69, 0x74, 0x61, 0x6c, 0x61, 0x73, 0x73, 0x65,
	0x74, 0x2e, 0x63, 0x61, 0x6e, 0x74, 0x6f, 0x6e, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x70,
	0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x2e, 0x76, 0x33, 0x30, 0x2e, 0x52,
	0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x64, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x6d, 0x65, 0x6e,
	0x74, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x0f, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x6d, 0x65,
	0x6e, 0x74, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x62, 0x6f,
	0x73, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x76, 0x65, 0x72, 0x62, 0x6f, 0x73,
	0x65, 0x1a, 0x75, 0x0a, 0x08, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x69, 0x0a,
	0x08, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x64, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x4d, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x64, 0x69, 0x67, 0x69, 0x74, 0x61, 0x6c, 0x61, 0x73, 0x73,
	0x65, 0x74, 0x2e, 0x63, 0x61, 0x6e, 0x74, 0x6f, 0x6e, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e,
	0x70, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x2e, 0x76, 0x33, 0x30, 0x2e,
	0x52, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x64, 0x41, 0x63, 0x73, 0x43, 0x6f, 0x6d, 0x6d, 0x69,
	0x74, 0x6d, 0x65, 0x6e, 0x74, 0x50, 0x65, 0x72, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x52, 0x08,
	0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x64, 0x22, 0x8d, 0x01, 0x0a, 0x09, 0x54, 0x69, 0x6d,
	0x65, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x12, 0x41, 0x0a, 0x0e, 0x66, 0x72, 0x6f, 0x6d, 0x5f, 0x65,
	0x78, 0x63, 0x6c, 0x75, 0x73, 0x69, 0x76, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0d, 0x66, 0x72, 0x6f, 0x6d,
	0x45, 0x78, 0x63, 0x6c, 0x75, 0x73, 0x69, 0x76, 0x65, 0x12, 0x3d, 0x0a, 0x0c, 0x74, 0x6f, 0x5f,
	0x69, 0x6e, 0x63, 0x6c, 0x75, 0x73, 0x69, 0x76, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0b, 0x74, 0x6f, 0x49,
	0x6e, 0x63, 0x6c, 0x75, 0x73, 0x69, 0x76, 0x65, 0x22, 0x96, 0x01, 0x0a, 0x0f, 0x44, 0x6f, 0x6d,
	0x61, 0x69, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x12, 0x1b, 0x0a, 0x09,
	0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x08, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x49, 0x64, 0x12, 0x59, 0x0a, 0x08, 0x69, 0x6e, 0x74,
	0x65, 0x72, 0x76, 0x61, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x38, 0x2e, 0x63, 0x6f,
	0x6d, 0x2e, 0x64, 0x69, 0x67, 0x69, 0x74, 0x61, 0x6c, 0x61, 0x73, 0x73, 0x65, 0x74, 0x2e, 0x63,
	0x61, 0x6e, 0x74, 0x6f, 0x6e, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x70, 0x61, 0x72, 0x74,
	0x69, 0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x2e, 0x76, 0x33, 0x30, 0x2e, 0x54, 0x69, 0x6d, 0x65,
	0x52, 0x61, 0x6e, 0x67, 0x65, 0x48, 0x00, 0x52, 0x08, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61,
	0x6c, 0x88, 0x01, 0x01, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61,
	0x6c, 0x22, 0xa2, 0x01, 0x0a, 0x08, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x12, 0x4c,
	0x0a, 0x14, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x74, 0x69, 0x63, 0x6b, 0x5f, 0x65, 0x78, 0x63,
	0x6c, 0x75, 0x73, 0x69, 0x76, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54,
	0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x12, 0x73, 0x74, 0x61, 0x72, 0x74, 0x54,
	0x69, 0x63, 0x6b, 0x45, 0x78, 0x63, 0x6c, 0x75, 0x73, 0x69, 0x76, 0x65, 0x12, 0x48, 0x0a, 0x12,
	0x65, 0x6e, 0x64, 0x5f, 0x74, 0x69, 0x63, 0x6b, 0x5f, 0x69, 0x6e, 0x63, 0x6c, 0x75, 0x73, 0x69,
	0x76, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73,
	0x74, 0x61, 0x6d, 0x70, 0x52, 0x10, 0x65, 0x6e, 0x64, 0x54, 0x69, 0x63, 0x6b, 0x49, 0x6e, 0x63,
	0x6c, 0x75, 0x73, 0x69, 0x76, 0x65, 0x22, 0x9c, 0x03, 0x0a, 0x15, 0x52, 0x65, 0x63, 0x65, 0x69,
	0x76, 0x65, 0x64, 0x41, 0x63, 0x73, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x6d, 0x65, 0x6e, 0x74,
	0x12, 0x53, 0x0a, 0x08, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x37, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x64, 0x69, 0x67, 0x69, 0x74, 0x61, 0x6c,
	0x61, 0x73, 0x73, 0x65, 0x74, 0x2e, 0x63, 0x61, 0x6e, 0x74, 0x6f, 0x6e, 0x2e, 0x61, 0x64, 0x6d,
	0x69, 0x6e, 0x2e, 0x70, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x2e, 0x76,
	0x33, 0x30, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x52, 0x08, 0x69, 0x6e, 0x74,
	0x65, 0x72, 0x76, 0x61, 0x6c, 0x12, 0x43, 0x0a, 0x1e, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x5f,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x5f, 0x70, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70,
	0x61, 0x6e, 0x74, 0x5f, 0x75, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x1b, 0x6f,
	0x72, 0x69, 0x67, 0x69, 0x6e, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x50, 0x61, 0x72, 0x74,
	0x69, 0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x55, 0x69, 0x64, 0x12, 0x34, 0x0a, 0x13, 0x72, 0x65,
	0x63, 0x65, 0x69, 0x76, 0x65, 0x64, 0x5f, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x6d, 0x65, 0x6e,
	0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0c, 0x48, 0x00, 0x52, 0x12, 0x72, 0x65, 0x63, 0x65, 0x69,
	0x76, 0x65, 0x64, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x88, 0x01, 0x01,
	0x12, 0x2a, 0x0a, 0x0e, 0x6f, 0x77, 0x6e, 0x5f, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x6d, 0x65,
	0x6e, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0c, 0x48, 0x01, 0x52, 0x0d, 0x6f, 0x77, 0x6e, 0x43,
	0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x88, 0x01, 0x01, 0x12, 0x5c, 0x0a, 0x05,
	0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x46, 0x2e, 0x63, 0x6f,
	0x6d, 0x2e, 0x64, 0x69, 0x67, 0x69, 0x74, 0x61, 0x6c, 0x61, 0x73, 0x73, 0x65, 0x74, 0x2e, 0x63,
	0x61, 0x6e, 0x74, 0x6f, 0x6e, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x70, 0x61, 0x72, 0x74,
	0x69, 0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x2e, 0x76, 0x33, 0x30, 0x2e, 0x52, 0x65, 0x63, 0x65,
	0x69, 0x76, 0x65, 0x64, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x53, 0x74,
	0x61, 0x74, 0x65, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x42, 0x16, 0x0a, 0x14, 0x5f, 0x72,
	0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x64, 0x5f, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x6d, 0x65,
	0x6e, 0x74, 0x42, 0x11, 0x0a, 0x0f, 0x5f, 0x6f, 0x77, 0x6e, 0x5f, 0x63, 0x6f, 0x6d, 0x6d, 0x69,
	0x74, 0x6d, 0x65, 0x6e, 0x74, 0x22, 0x9f, 0x01, 0x0a, 0x1e, 0x52, 0x65, 0x63, 0x65, 0x69, 0x76,
	0x65, 0x64, 0x41, 0x63, 0x73, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x50,
	0x65, 0x72, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x12, 0x1b, 0x0a, 0x09, 0x64, 0x6f, 0x6d, 0x61,
	0x69, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x64, 0x6f, 0x6d,
	0x61, 0x69, 0x6e, 0x49, 0x64, 0x12, 0x60, 0x0a, 0x08, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65,
	0x64, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x44, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x64, 0x69,
	0x67, 0x69, 0x74, 0x61, 0x6c, 0x61, 0x73, 0x73, 0x65, 0x74, 0x2e, 0x63, 0x61, 0x6e, 0x74, 0x6f,
	0x6e, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x70, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70,
	0x61, 0x6e, 0x74, 0x2e, 0x76, 0x33, 0x30, 0x2e, 0x52, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x64,
	0x41, 0x63, 0x73, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x08, 0x72,
	0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x64, 0x22, 0x90, 0x03, 0x0a, 0x11, 0x53, 0x65, 0x6e, 0x74,
	0x41, 0x63, 0x73, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x53, 0x0a,
	0x08, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x37, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x64, 0x69, 0x67, 0x69, 0x74, 0x61, 0x6c, 0x61, 0x73, 0x73,
	0x65, 0x74, 0x2e, 0x63, 0x61, 0x6e, 0x74, 0x6f, 0x6e, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e,
	0x70, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x2e, 0x76, 0x33, 0x30, 0x2e,
	0x49, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x52, 0x08, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x76,
	0x61, 0x6c, 0x12, 0x3f, 0x0a, 0x1c, 0x64, 0x65, 0x73, 0x74, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x65, 0x72, 0x5f, 0x70, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x5f, 0x75,
	0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x19, 0x64, 0x65, 0x73, 0x74, 0x43, 0x6f,
	0x75, 0x6e, 0x74, 0x65, 0x72, 0x50, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6e, 0x74,
	0x55, 0x69, 0x64, 0x12, 0x2a, 0x0a, 0x0e, 0x6f, 0x77, 0x6e, 0x5f, 0x63, 0x6f, 0x6d, 0x6d, 0x69,
	0x74, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0c, 0x48, 0x00, 0x52, 0x0d, 0x6f,
	0x77, 0x6e, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x88, 0x01, 0x01, 0x12,
	0x34, 0x0a, 0x13, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x64, 0x5f, 0x63, 0x6f, 0x6d, 0x6d,
	0x69, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0c, 0x48, 0x01, 0x52, 0x12,
	0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x64, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x6d, 0x65,
	0x6e, 0x74, 0x88, 0x01, 0x01, 0x12, 0x58, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x42, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x64, 0x69, 0x67, 0x69, 0x74,
	0x61, 0x6c, 0x61, 0x73, 0x73, 0x65, 0x74, 0x2e, 0x63, 0x61, 0x6e, 0x74, 0x6f, 0x6e, 0x2e, 0x61,
	0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x70, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6e, 0x74,
	0x2e, 0x76, 0x33, 0x30, 0x2e, 0x53, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x6d,
	0x65, 0x6e, 0x74, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x42,
	0x11, 0x0a, 0x0f, 0x5f, 0x6f, 0x77, 0x6e, 0x5f, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x6d, 0x65,
	0x6e, 0x74, 0x42, 0x16, 0x0a, 0x14, 0x5f, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x64, 0x5f,
	0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x22, 0x8f, 0x01, 0x0a, 0x1a, 0x53,
	0x65, 0x6e, 0x74, 0x41, 0x63, 0x73, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x6d, 0x65, 0x6e, 0x74,
	0x50, 0x65, 0x72, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x12, 0x1b, 0x0a, 0x09, 0x64, 0x6f, 0x6d,
	0x61, 0x69, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x64, 0x6f,
	0x6d, 0x61, 0x69, 0x6e, 0x49, 0x64, 0x12, 0x54, 0x0a, 0x04, 0x73, 0x65, 0x6e, 0x74, 0x18, 0x02,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x40, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x64, 0x69, 0x67, 0x69, 0x74,
	0x61, 0x6c, 0x61, 0x73, 0x73, 0x65, 0x74, 0x2e, 0x63, 0x61, 0x6e, 0x74, 0x6f, 0x6e, 0x2e, 0x61,
	0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x70, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6e, 0x74,
	0x2e, 0x76, 0x33, 0x30, 0x2e, 0x53, 0x65, 0x6e, 0x74, 0x41, 0x63, 0x73, 0x43, 0x6f, 0x6d, 0x6d,
	0x69, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x04, 0x73, 0x65, 0x6e, 0x74, 0x22, 0xb5, 0x03, 0x0a,
	0x18, 0x4c, 0x6f, 0x6f, 0x6b, 0x75, 0x70, 0x53, 0x65, 0x6e, 0x74, 0x41, 0x63, 0x73, 0x43, 0x6f,
	0x6d, 0x6d, 0x69, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x1a, 0xad, 0x02, 0x0a, 0x07, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x5f, 0x0a, 0x0b, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x72, 0x61,
	0x6e, 0x67, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x3e, 0x2e, 0x63, 0x6f, 0x6d,
	0x2e, 0x64, 0x69, 0x67, 0x69, 0x74, 0x61, 0x6c, 0x61, 0x73, 0x73, 0x65, 0x74, 0x2e, 0x63, 0x61,
	0x6e, 0x74, 0x6f, 0x6e, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x70, 0x61, 0x72, 0x74, 0x69,
	0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x2e, 0x76, 0x33, 0x30, 0x2e, 0x44, 0x6f, 0x6d, 0x61, 0x69,
	0x6e, 0x54, 0x69, 0x6d, 0x65, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x52, 0x0a, 0x74, 0x69, 0x6d, 0x65,
	0x52, 0x61, 0x6e, 0x67, 0x65, 0x73, 0x12, 0x38, 0x0a, 0x18, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x65,
	0x72, 0x5f, 0x70, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x5f, 0x75, 0x69,
	0x64, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x16, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x65,
	0x72, 0x50, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x55, 0x69, 0x64, 0x73,
	0x12, 0x6d, 0x0a, 0x10, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x73,
	0x74, 0x61, 0x74, 0x65, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0e, 0x32, 0x42, 0x2e, 0x63, 0x6f, 0x6d,
	0x2e, 0x64, 0x69, 0x67, 0x69, 0x74, 0x61, 0x6c, 0x61, 0x73, 0x73, 0x65, 0x74, 0x2e, 0x63, 0x61,
	0x6e, 0x74, 0x6f, 0x6e, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x70, 0x61, 0x72, 0x74, 0x69,
	0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x2e, 0x76, 0x33, 0x30, 0x2e, 0x53, 0x65, 0x6e, 0x74, 0x43,
	0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x0f,
	0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12,
	0x18, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x62, 0x6f, 0x73, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x07, 0x76, 0x65, 0x72, 0x62, 0x6f, 0x73, 0x65, 0x1a, 0x69, 0x0a, 0x08, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x5d, 0x0a, 0x04, 0x73, 0x65, 0x6e, 0x74, 0x18, 0x01, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x49, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x64, 0x69, 0x67, 0x69, 0x74, 0x61,
	0x6c, 0x61, 0x73, 0x73, 0x65, 0x74, 0x2e, 0x63, 0x61, 0x6e, 0x74, 0x6f, 0x6e, 0x2e, 0x61, 0x64,
	0x6d, 0x69, 0x6e, 0x2e, 0x70, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x2e,
	0x76, 0x33, 0x30, 0x2e, 0x53, 0x65, 0x6e, 0x74, 0x41, 0x63, 0x73, 0x43, 0x6f, 0x6d, 0x6d, 0x69,
	0x74, 0x6d, 0x65, 0x6e, 0x74, 0x50, 0x65, 0x72, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x52, 0x04,
	0x73, 0x65, 0x6e, 0x74, 0x22, 0xa9, 0x02, 0x0a, 0x22, 0x53, 0x6c, 0x6f, 0x77, 0x43, 0x6f, 0x75,
	0x6e, 0x74, 0x65, 0x72, 0x50, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x44,
	0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x1d, 0x0a, 0x0a, 0x64,
	0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52,
	0x09, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x49, 0x64, 0x73, 0x12, 0x44, 0x0a, 0x1e, 0x64, 0x69,
	0x73, 0x74, 0x69, 0x6e, 0x67, 0x75, 0x69, 0x73, 0x68, 0x65, 0x64, 0x5f, 0x70, 0x61, 0x72, 0x74,
	0x69, 0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x5f, 0x75, 0x69, 0x64, 0x73, 0x18, 0x02, 0x20, 0x03,
	0x28, 0x09, 0x52, 0x1c, 0x64, 0x69, 0x73, 0x74, 0x69, 0x6e, 0x67, 0x75, 0x69, 0x73, 0x68, 0x65,
	0x64, 0x50, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x55, 0x69, 0x64, 0x73,
	0x12, 0x37, 0x0a, 0x17, 0x74, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x5f, 0x64, 0x69,
	0x73, 0x74, 0x69, 0x6e, 0x67, 0x75, 0x69, 0x73, 0x68, 0x65, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x16, 0x74, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x44, 0x69, 0x73, 0x74,
	0x69, 0x6e, 0x67, 0x75, 0x69, 0x73, 0x68, 0x65, 0x64, 0x12, 0x2b, 0x0a, 0x11, 0x74, 0x68, 0x72,
	0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x5f, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x10, 0x74, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x44,
	0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x12, 0x38, 0x0a, 0x18, 0x70, 0x61, 0x72, 0x74, 0x69, 0x63,
	0x69, 0x70, 0x61, 0x6e, 0x74, 0x5f, 0x75, 0x69, 0x64, 0x73, 0x5f, 0x6d, 0x65, 0x74, 0x72, 0x69,
	0x63, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x09, 0x52, 0x16, 0x70, 0x61, 0x72, 0x74, 0x69, 0x63,
	0x69, 0x70, 0x61, 0x6e, 0x74, 0x55, 0x69, 0x64, 0x73, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73,
	0x22, 0xa9, 0x01, 0x0a, 0x23, 0x53, 0x65, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x46, 0x6f,
	0x72, 0x53, 0x6c, 0x6f, 0x77, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x50, 0x61, 0x72, 0x74,
	0x69, 0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x73, 0x1a, 0x76, 0x0a, 0x07, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x6b, 0x0a, 0x07, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x73, 0x18, 0x01,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x51, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x64, 0x69, 0x67, 0x69, 0x74,
	0x61, 0x6c, 0x61, 0x73, 0x73, 0x65, 0x74, 0x2e, 0x63, 0x61, 0x6e, 0x74, 0x6f, 0x6e, 0x2e, 0x61,
	0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x70, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6e, 0x74,
	0x2e, 0x76, 0x33, 0x30, 0x2e, 0x53, 0x6c, 0x6f, 0x77, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72,
	0x50, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x44, 0x6f, 0x6d, 0x61, 0x69,
	0x6e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x07, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x73,
	0x1a, 0x0a, 0x0a, 0x08, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0xc8, 0x01, 0x0a,
	0x23, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x46, 0x6f, 0x72, 0x53, 0x6c, 0x6f,
	0x77, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x50, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70,
	0x61, 0x6e, 0x74, 0x73, 0x1a, 0x28, 0x0a, 0x07, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x1d, 0x0a, 0x0a, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x02, 0x20,
	0x03, 0x28, 0x09, 0x52, 0x09, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x49, 0x64, 0x73, 0x1a, 0x77,
	0x0a, 0x08, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x6b, 0x0a, 0x07, 0x63, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x51, 0x2e, 0x63, 0x6f,
	0x6d, 0x2e, 0x64, 0x69, 0x67, 0x69, 0x74, 0x61, 0x6c, 0x61, 0x73, 0x73, 0x65, 0x74, 0x2e, 0x63,
	0x61, 0x6e, 0x74, 0x6f, 0x6e, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x70, 0x61, 0x72, 0x74,
	0x69, 0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x2e, 0x76, 0x33, 0x30, 0x2e, 0x53, 0x6c, 0x6f, 0x77,
	0x43, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x50, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61,
	0x6e, 0x74, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x07,
	0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x73, 0x22, 0xdd, 0x04, 0x0a, 0x28, 0x47, 0x65, 0x74, 0x49,
	0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x73, 0x42, 0x65, 0x68, 0x69, 0x6e, 0x64, 0x46, 0x6f,
	0x72, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x50, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70,
	0x61, 0x6e, 0x74, 0x73, 0x1a, 0xf1, 0x01, 0x0a, 0x16, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72,
	0x50, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x12,
	0x36, 0x0a, 0x17, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x5f, 0x70, 0x61, 0x72, 0x74, 0x69,
	0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x5f, 0x75, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x15, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x50, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69,
	0x70, 0x61, 0x6e, 0x74, 0x55, 0x69, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x64, 0x6f, 0x6d, 0x61, 0x69,
	0x6e, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x64, 0x6f, 0x6d, 0x61,
	0x69, 0x6e, 0x49, 0x64, 0x12, 0x29, 0x0a, 0x10, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c,
	0x73, 0x5f, 0x62, 0x65, 0x68, 0x69, 0x6e, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0f,
	0x69, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x73, 0x42, 0x65, 0x68, 0x69, 0x6e, 0x64, 0x12,
	0x57, 0x0a, 0x1a, 0x61, 0x73, 0x5f, 0x6f, 0x66, 0x5f, 0x73, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63,
	0x69, 0x6e, 0x67, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52,
	0x17, 0x61, 0x73, 0x4f, 0x66, 0x53, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x69, 0x6e, 0x67, 0x54,
	0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x1a, 0x93, 0x01, 0x0a, 0x07, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x38, 0x0a, 0x18, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x5f,
	0x70, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x5f, 0x75, 0x69, 0x64, 0x73,
	0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x16, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x50,
	0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x55, 0x69, 0x64, 0x73, 0x12, 0x1d,
	0x0a, 0x0a, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x02, 0x20, 0x03,
	0x28, 0x09, 0x52, 0x09, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x49, 0x64, 0x73, 0x12, 0x21, 0x0a,
	0x09, 0x74, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04,
	0x48, 0x00, 0x52, 0x09, 0x74, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x88, 0x01, 0x01,
	0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x74, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x1a, 0xa6,
	0x01, 0x0a, 0x08, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x99, 0x01, 0x0a, 0x10,
	0x69, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x73, 0x5f, 0x62, 0x65, 0x68, 0x69, 0x6e, 0x64,
	0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x6e, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x64, 0x69, 0x67,
	0x69, 0x74, 0x61, 0x6c, 0x61, 0x73, 0x73, 0x65, 0x74, 0x2e, 0x63, 0x61, 0x6e, 0x74, 0x6f, 0x6e,
	0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x70, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61,
	0x6e, 0x74, 0x2e, 0x76, 0x33, 0x30, 0x2e, 0x47, 0x65, 0x74, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x76,
	0x61, 0x6c, 0x73, 0x42, 0x65, 0x68, 0x69, 0x6e, 0x64, 0x46, 0x6f, 0x72, 0x43, 0x6f, 0x75, 0x6e,
	0x74, 0x65, 0x72, 0x50, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x73, 0x2e,
	0x43, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x50, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61,
	0x6e, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c,
	0x73, 0x42, 0x65, 0x68, 0x69, 0x6e, 0x64, 0x2a, 0xe4, 0x01, 0x0a, 0x17, 0x52, 0x65, 0x63, 0x65,
	0x69, 0x76, 0x65, 0x64, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x53, 0x74,
	0x61, 0x74, 0x65, 0x12, 0x29, 0x0a, 0x25, 0x52, 0x45, 0x43, 0x45, 0x49, 0x56, 0x45, 0x44, 0x5f,
	0x43, 0x4f, 0x4d, 0x4d, 0x49, 0x54, 0x4d, 0x45, 0x4e, 0x54, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45,
	0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x23,
	0x0a, 0x1f, 0x52, 0x45, 0x43, 0x45, 0x49, 0x56, 0x45, 0x44, 0x5f, 0x43, 0x4f, 0x4d, 0x4d, 0x49,
	0x54, 0x4d, 0x45, 0x4e, 0x54, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x4d, 0x41, 0x54, 0x43,
	0x48, 0x10, 0x01, 0x12, 0x26, 0x0a, 0x22, 0x52, 0x45, 0x43, 0x45, 0x49, 0x56, 0x45, 0x44, 0x5f,
	0x43, 0x4f, 0x4d, 0x4d, 0x49, 0x54, 0x4d, 0x45, 0x4e, 0x54, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45,
	0x5f, 0x4d, 0x49, 0x53, 0x4d, 0x41, 0x54, 0x43, 0x48, 0x10, 0x02, 0x12, 0x26, 0x0a, 0x22, 0x52,
	0x45, 0x43, 0x45, 0x49, 0x56, 0x45, 0x44, 0x5f, 0x43, 0x4f, 0x4d, 0x4d, 0x49, 0x54, 0x4d, 0x45,
	0x4e, 0x54, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x42, 0x55, 0x46, 0x46, 0x45, 0x52, 0x45,
	0x44, 0x10, 0x03, 0x12, 0x29, 0x0a, 0x25, 0x52, 0x45, 0x43, 0x45, 0x49, 0x56, 0x45, 0x44, 0x5f,
	0x43, 0x4f, 0x4d, 0x4d, 0x49, 0x54, 0x4d, 0x45, 0x4e, 0x54, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45,
	0x5f, 0x4f, 0x55, 0x54, 0x53, 0x54, 0x41, 0x4e, 0x44, 0x49, 0x4e, 0x47, 0x10, 0x04, 0x2a, 0xa9,
	0x01, 0x0a, 0x13, 0x53, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x6d, 0x65, 0x6e,
	0x74, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x25, 0x0a, 0x21, 0x53, 0x45, 0x4e, 0x54, 0x5f, 0x43,
	0x4f, 0x4d, 0x4d, 0x49, 0x54, 0x4d, 0x45, 0x4e, 0x54, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f,
	0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x1f, 0x0a,
	0x1b, 0x53, 0x45, 0x4e, 0x54, 0x5f, 0x43, 0x4f, 0x4d, 0x4d, 0x49, 0x54, 0x4d, 0x45, 0x4e, 0x54,
	0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x4d, 0x41, 0x54, 0x43, 0x48, 0x10, 0x01, 0x12, 0x22,
	0x0a, 0x1e, 0x53, 0x45, 0x4e, 0x54, 0x5f, 0x43, 0x4f, 0x4d, 0x4d, 0x49, 0x54, 0x4d, 0x45, 0x4e,
	0x54, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x4d, 0x49, 0x53, 0x4d, 0x41, 0x54, 0x43, 0x48,
	0x10, 0x02, 0x12, 0x26, 0x0a, 0x22, 0x53, 0x45, 0x4e, 0x54, 0x5f, 0x43, 0x4f, 0x4d, 0x4d, 0x49,
	0x54, 0x4d, 0x45, 0x4e, 0x54, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x4e, 0x4f, 0x54, 0x5f,
	0x43, 0x4f, 0x4d, 0x50, 0x41, 0x52, 0x45, 0x44, 0x10, 0x03, 0x32, 0xe4, 0x0c, 0x0a, 0x11, 0x49,
	0x6e, 0x73, 0x70, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x12, 0xb1, 0x01, 0x0a, 0x14, 0x4c, 0x6f, 0x6f, 0x6b, 0x75, 0x70, 0x43, 0x6f, 0x6e, 0x74, 0x72,
	0x61, 0x63, 0x74, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x12, 0x4b, 0x2e, 0x63, 0x6f, 0x6d, 0x2e,
	0x64, 0x69, 0x67, 0x69, 0x74, 0x61, 0x6c, 0x61, 0x73, 0x73, 0x65, 0x74, 0x2e, 0x63, 0x61, 0x6e,
	0x74, 0x6f, 0x6e, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x70, 0x61, 0x72, 0x74, 0x69, 0x63,
	0x69, 0x70, 0x61, 0x6e, 0x74, 0x2e, 0x76, 0x33, 0x30, 0x2e, 0x4c, 0x6f, 0x6f, 0x6b, 0x75, 0x70,
	0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x4c, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x64, 0x69, 0x67,
	0x69, 0x74, 0x61, 0x6c, 0x61, 0x73, 0x73, 0x65, 0x74, 0x2e, 0x63, 0x61, 0x6e, 0x74, 0x6f, 0x6e,
	0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x70, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61,
	0x6e, 0x74, 0x2e, 0x76, 0x33, 0x30, 0x2e, 0x4c, 0x6f, 0x6f, 0x6b, 0x75, 0x70, 0x43, 0x6f, 0x6e,
	0x74, 0x72, 0x61, 0x63, 0x74, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0xab, 0x01, 0x0a, 0x12, 0x4c, 0x6f, 0x6f, 0x6b, 0x75, 0x70, 0x4f,
	0x66, 0x66, 0x73, 0x65, 0x74, 0x42, 0x79, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x49, 0x2e, 0x63, 0x6f,
	0x6d, 0x2e, 0x64, 0x69, 0x67, 0x69, 0x74, 0x61, 0x6c, 0x61, 0x73, 0x73, 0x65, 0x74, 0x2e, 0x63,
	0x61, 0x6e, 0x74, 0x6f, 0x6e, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x70, 0x61, 0x72, 0x74,
	0x69, 0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x2e, 0x76, 0x33, 0x30, 0x2e, 0x4c, 0x6f, 0x6f, 0x6b,
	0x75, 0x70, 0x4f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x42, 0x79, 0x54, 0x69, 0x6d, 0x65, 0x2e, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x4a, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x64, 0x69, 0x67,
	0x69, 0x74, 0x61, 0x6c, 0x61, 0x73, 0x73, 0x65, 0x74, 0x2e, 0x63, 0x61, 0x6e, 0x74, 0x6f, 0x6e,
	0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x70, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61,
	0x6e, 0x74, 0x2e, 0x76, 0x33, 0x30, 0x2e, 0x4c, 0x6f, 0x6f, 0x6b, 0x75, 0x70, 0x4f, 0x66, 0x66,
	0x73, 0x65, 0x74, 0x42, 0x79, 0x54, 0x69, 0x6d, 0x65, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0xae, 0x01, 0x0a, 0x13, 0x4c, 0x6f, 0x6f, 0x6b, 0x75, 0x70, 0x4f, 0x66, 0x66,
	0x73, 0x65, 0x74, 0x42, 0x79, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x4a, 0x2e, 0x63, 0x6f, 0x6d,
	0x2e, 0x64, 0x69, 0x67, 0x69, 0x74, 0x61, 0x6c, 0x61, 0x73, 0x73, 0x65, 0x74, 0x2e, 0x63, 0x61,
	0x6e, 0x74, 0x6f, 0x6e, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x70, 0x61, 0x72, 0x74, 0x69,
	0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x2e, 0x76, 0x33, 0x30, 0x2e, 0x4c, 0x6f, 0x6f, 0x6b, 0x75,
	0x70, 0x4f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x42, 0x79, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x2e, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x4b, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x64, 0x69, 0x67,
	0x69, 0x74, 0x61, 0x6c, 0x61, 0x73, 0x73, 0x65, 0x74, 0x2e, 0x63, 0x61, 0x6e, 0x74, 0x6f, 0x6e,
	0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x70, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61,
	0x6e, 0x74, 0x2e, 0x76, 0x33, 0x30, 0x2e, 0x4c, 0x6f, 0x6f, 0x6b, 0x75, 0x70, 0x4f, 0x66, 0x66,
	0x73, 0x65, 0x74, 0x42, 0x79, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0xbd, 0x01, 0x0a, 0x18, 0x4c, 0x6f, 0x6f, 0x6b, 0x75, 0x70, 0x53, 0x65,
	0x6e, 0x74, 0x41, 0x63, 0x73, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x73,
	0x12, 0x4f, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x64, 0x69, 0x67, 0x69, 0x74, 0x61, 0x6c, 0x61, 0x73,
	0x73, 0x65, 0x74, 0x2e, 0x63, 0x61, 0x6e, 0x74, 0x6f, 0x6e, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e,
	0x2e, 0x70, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x2e, 0x76, 0x33, 0x30,
	0x2e, 0x4c, 0x6f, 0x6f, 0x6b, 0x75, 0x70, 0x53, 0x65, 0x6e, 0x74, 0x41, 0x63, 0x73, 0x43, 0x6f,
	0x6d, 0x6d, 0x69, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x50, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x64, 0x69, 0x67, 0x69, 0x74, 0x61, 0x6c, 0x61,
	0x73, 0x73, 0x65, 0x74, 0x2e, 0x63, 0x61, 0x6e, 0x74, 0x6f, 0x6e, 0x2e, 0x61, 0x64, 0x6d, 0x69,
	0x6e, 0x2e, 0x70, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x2e, 0x76, 0x33,
	0x30, 0x2e, 0x4c, 0x6f, 0x6f, 0x6b, 0x75, 0x70, 0x53, 0x65, 0x6e, 0x74, 0x41, 0x63, 0x73, 0x43,
	0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0xc9, 0x01, 0x0a, 0x1c, 0x4c, 0x6f, 0x6f, 0x6b, 0x75, 0x70, 0x52, 0x65,
	0x63, 0x65, 0x69, 0x76, 0x65, 0x64, 0x41, 0x63, 0x73, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x6d,
	0x65, 0x6e, 0x74, 0x73, 0x12, 0x53, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x64, 0x69, 0x67, 0x69, 0x74,
	0x61, 0x6c, 0x61, 0x73, 0x73, 0x65, 0x74, 0x2e, 0x63, 0x61, 0x6e, 0x74, 0x6f, 0x6e, 0x2e, 0x61,
	0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x70, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6e, 0x74,
	0x2e, 0x76, 0x33, 0x30, 0x2e, 0x4c, 0x6f, 0x6f, 0x6b, 0x75, 0x70, 0x52, 0x65, 0x63, 0x65, 0x69,
	0x76, 0x65, 0x64, 0x41, 0x63, 0x73, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x6d, 0x65, 0x6e, 0x74,
	0x73, 0x2e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x54, 0x2e, 0x63, 0x6f, 0x6d, 0x2e,
	0x64, 0x69, 0x67, 0x69, 0x74, 0x61, 0x6c, 0x61, 0x73, 0x73, 0x65, 0x74, 0x2e, 0x63, 0x61, 0x6e,
	0x74, 0x6f, 0x6e, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x70, 0x61, 0x72, 0x74, 0x69, 0x63,
	0x69, 0x70, 0x61, 0x6e, 0x74, 0x2e, 0x76, 0x33, 0x30, 0x2e, 0x4c, 0x6f, 0x6f, 0x6b, 0x75, 0x70,
	0x52, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x64, 0x41, 0x63, 0x73, 0x43, 0x6f, 0x6d, 0x6d, 0x69,
	0x74, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0xde, 0x01, 0x0a, 0x23, 0x53, 0x65, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x46, 0x6f, 0x72,
	0x53, 0x6c, 0x6f, 0x77, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x50, 0x61, 0x72, 0x74, 0x69,
	0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x73, 0x12, 0x5a, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x64, 0x69,
	0x67, 0x69, 0x74, 0x61, 0x6c, 0x61, 0x73, 0x73, 0x65, 0x74, 0x2e, 0x63, 0x61, 0x6e, 0x74, 0x6f,
	0x6e, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x70, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70,
	0x61, 0x6e, 0x74, 0x2e, 0x76, 0x33, 0x30, 0x2e, 0x53, 0x65, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x46, 0x6f, 0x72, 0x53, 0x6c, 0x6f, 0x77, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x50,
	0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x73, 0x2e, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x5b, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x64, 0x69, 0x67, 0x69, 0x74, 0x61,
	0x6c, 0x61, 0x73, 0x73, 0x65, 0x74, 0x2e, 0x63, 0x61, 0x6e, 0x74, 0x6f, 0x6e, 0x2e, 0x61, 0x64,
	0x6d, 0x69, 0x6e, 0x2e, 0x70, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x2e,
	0x76, 0x33, 0x30, 0x2e, 0x53, 0x65, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x46, 0x6f, 0x72,
	0x53, 0x6c, 0x6f, 0x77, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x50, 0x61, 0x72, 0x74, 0x69,
	0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x73, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0xde, 0x01, 0x0a, 0x23, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x46, 0x6f,
	0x72, 0x53, 0x6c, 0x6f, 0x77, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x50, 0x61, 0x72, 0x74,
	0x69, 0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x73, 0x12, 0x5a, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x64,
	0x69, 0x67, 0x69, 0x74, 0x61, 0x6c, 0x61, 0x73, 0x73, 0x65, 0x74, 0x2e, 0x63, 0x61, 0x6e, 0x74,
	0x6f, 0x6e, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x70, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69,
	0x70, 0x61, 0x6e, 0x74, 0x2e, 0x76, 0x33, 0x30, 0x2e, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x46, 0x6f, 0x72, 0x53, 0x6c, 0x6f, 0x77, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72,
	0x50, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x73, 0x2e, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x5b, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x64, 0x69, 0x67, 0x69, 0x74,
	0x61, 0x6c, 0x61, 0x73, 0x73, 0x65, 0x74, 0x2e, 0x63, 0x61, 0x6e, 0x74, 0x6f, 0x6e, 0x2e, 0x61,
	0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x70, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6e, 0x74,
	0x2e, 0x76, 0x33, 0x30, 0x2e, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x46, 0x6f,
	0x72, 0x53, 0x6c, 0x6f, 0x77, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x50, 0x61, 0x72, 0x74,
	0x69, 0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x73, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0xed, 0x01, 0x0a, 0x28, 0x47, 0x65, 0x74, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61,
	0x6c, 0x73, 0x42, 0x65, 0x68, 0x69, 0x6e, 0x64, 0x46, 0x6f, 0x72, 0x43, 0x6f, 0x75, 0x6e, 0x74,
	0x65, 0x72, 0x50, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x73, 0x12, 0x5f,
	0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x64, 0x69, 0x67, 0x69, 0x74, 0x61, 0x6c, 0x61, 0x73, 0x73, 0x65,
	0x74, 0x2e, 0x63, 0x61, 0x6e, 0x74, 0x6f, 0x6e, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x70,
	0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x2e, 0x76, 0x33, 0x30, 0x2e, 0x47,
	0x65, 0x74, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x73, 0x42, 0x65, 0x68, 0x69, 0x6e,
	0x64, 0x46, 0x6f, 0x72, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x50, 0x61, 0x72, 0x74, 0x69,
	0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x73, 0x2e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x60, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x64, 0x69, 0x67, 0x69, 0x74, 0x61, 0x6c, 0x61, 0x73, 0x73,
	0x65, 0x74, 0x2e, 0x63, 0x61, 0x6e, 0x74, 0x6f, 0x6e, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e,
	0x70, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x2e, 0x76, 0x33, 0x30, 0x2e,
	0x47, 0x65, 0x74, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x73, 0x42, 0x65, 0x68, 0x69,
	0x6e, 0x64, 0x46, 0x6f, 0x72, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x50, 0x61, 0x72, 0x74,
	0x69, 0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x73, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x42, 0x5e, 0x5a, 0x5c, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f,
	0x64, 0x69, 0x67, 0x69, 0x74, 0x61, 0x6c, 0x2d, 0x61, 0x73, 0x73, 0x65, 0x74, 0x2f, 0x64, 0x61,
	0x7a, 0x6c, 0x2d, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2f, 0x76, 0x38, 0x2f, 0x67, 0x6f, 0x2f,
	0x61, 0x70, 0x69, 0x2f, 0x63, 0x6f, 0x6d, 0x2f, 0x64, 0x69, 0x67, 0x69, 0x74, 0x61, 0x6c, 0x61,
	0x73, 0x73, 0x65, 0x74, 0x2f, 0x63, 0x61, 0x6e, 0x74, 0x6f, 0x6e, 0x2f, 0x61, 0x64, 0x6d, 0x69,
	0x6e, 0x2f, 0x70, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x2f, 0x76, 0x33,
	0x30, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_com_digitalasset_canton_admin_participant_v30_inspection_service_proto_rawDescOnce sync.Once
	file_com_digitalasset_canton_admin_participant_v30_inspection_service_proto_rawDescData = file_com_digitalasset_canton_admin_participant_v30_inspection_service_proto_rawDesc
)

func file_com_digitalasset_canton_admin_participant_v30_inspection_service_proto_rawDescGZIP() []byte {
	file_com_digitalasset_canton_admin_participant_v30_inspection_service_proto_rawDescOnce.Do(func() {
		file_com_digitalasset_canton_admin_participant_v30_inspection_service_proto_rawDescData = protoimpl.X.CompressGZIP(file_com_digitalasset_canton_admin_participant_v30_inspection_service_proto_rawDescData)
	})
	return file_com_digitalasset_canton_admin_participant_v30_inspection_service_proto_rawDescData
}

var file_com_digitalasset_canton_admin_participant_v30_inspection_service_proto_enumTypes = make([]protoimpl.EnumInfo, 2)
var file_com_digitalasset_canton_admin_participant_v30_inspection_service_proto_msgTypes = make([]protoimpl.MessageInfo, 37)
var file_com_digitalasset_canton_admin_participant_v30_inspection_service_proto_goTypes = []any{
	(ReceivedCommitmentState)(0),                                            // 0: com.digitalasset.canton.admin.participant.v30.ReceivedCommitmentState
	(SentCommitmentState)(0),                                                // 1: com.digitalasset.canton.admin.participant.v30.SentCommitmentState
	(*LookupContractDomain)(nil),                                            // 2: com.digitalasset.canton.admin.participant.v30.LookupContractDomain
	(*LookupTransactionDomain)(nil),                                         // 3: com.digitalasset.canton.admin.participant.v30.LookupTransactionDomain
	(*LookupOffsetByTime)(nil),                                              // 4: com.digitalasset.canton.admin.participant.v30.LookupOffsetByTime
	(*LookupOffsetByIndex)(nil),                                             // 5: com.digitalasset.canton.admin.participant.v30.LookupOffsetByIndex
	(*LookupReceivedAcsCommitments)(nil),                                    // 6: com.digitalasset.canton.admin.participant.v30.LookupReceivedAcsCommitments
	(*TimeRange)(nil),                                                       // 7: com.digitalasset.canton.admin.participant.v30.TimeRange
	(*DomainTimeRange)(nil),                                                 // 8: com.digitalasset.canton.admin.participant.v30.DomainTimeRange
	(*Interval)(nil),                                                        // 9: com.digitalasset.canton.admin.participant.v30.Interval
	(*ReceivedAcsCommitment)(nil),                                           // 10: com.digitalasset.canton.admin.participant.v30.ReceivedAcsCommitment
	(*ReceivedAcsCommitmentPerDomain)(nil),                                  // 11: com.digitalasset.canton.admin.participant.v30.ReceivedAcsCommitmentPerDomain
	(*SentAcsCommitment)(nil),                                               // 12: com.digitalasset.canton.admin.participant.v30.SentAcsCommitment
	(*SentAcsCommitmentPerDomain)(nil),                                      // 13: com.digitalasset.canton.admin.participant.v30.SentAcsCommitmentPerDomain
	(*LookupSentAcsCommitments)(nil),                                        // 14: com.digitalasset.canton.admin.participant.v30.LookupSentAcsCommitments
	(*SlowCounterParticipantDomainConfig)(nil),                              // 15: com.digitalasset.canton.admin.participant.v30.SlowCounterParticipantDomainConfig
	(*SetConfigForSlowCounterParticipants)(nil),                             // 16: com.digitalasset.canton.admin.participant.v30.SetConfigForSlowCounterParticipants
	(*GetConfigForSlowCounterParticipants)(nil),                             // 17: com.digitalasset.canton.admin.participant.v30.GetConfigForSlowCounterParticipants
	(*GetIntervalsBehindForCounterParticipants)(nil),                        // 18: com.digitalasset.canton.admin.participant.v30.GetIntervalsBehindForCounterParticipants
	(*LookupContractDomain_Request)(nil),                                    // 19: com.digitalasset.canton.admin.participant.v30.LookupContractDomain.Request
	(*LookupContractDomain_Response)(nil),                                   // 20: com.digitalasset.canton.admin.participant.v30.LookupContractDomain.Response
	nil,                                                                     // 21: com.digitalasset.canton.admin.participant.v30.LookupContractDomain.Response.ResultsEntry
	(*LookupTransactionDomain_Request)(nil),                                 // 22: com.digitalasset.canton.admin.participant.v30.LookupTransactionDomain.Request
	(*LookupTransactionDomain_Response)(nil),                                // 23: com.digitalasset.canton.admin.participant.v30.LookupTransactionDomain.Response
	(*LookupOffsetByTime_Request)(nil),                                      // 24: com.digitalasset.canton.admin.participant.v30.LookupOffsetByTime.Request
	(*LookupOffsetByTime_Response)(nil),                                     // 25: com.digitalasset.canton.admin.participant.v30.LookupOffsetByTime.Response
	(*LookupOffsetByIndex_Request)(nil),                                     // 26: com.digitalasset.canton.admin.participant.v30.LookupOffsetByIndex.Request
	(*LookupOffsetByIndex_Response)(nil),                                    // 27: com.digitalasset.canton.admin.participant.v30.LookupOffsetByIndex.Response
	(*LookupReceivedAcsCommitments_Request)(nil),                            // 28: com.digitalasset.canton.admin.participant.v30.LookupReceivedAcsCommitments.Request
	(*LookupReceivedAcsCommitments_Response)(nil),                           // 29: com.digitalasset.canton.admin.participant.v30.LookupReceivedAcsCommitments.Response
	(*LookupSentAcsCommitments_Request)(nil),                                // 30: com.digitalasset.canton.admin.participant.v30.LookupSentAcsCommitments.Request
	(*LookupSentAcsCommitments_Response)(nil),                               // 31: com.digitalasset.canton.admin.participant.v30.LookupSentAcsCommitments.Response
	(*SetConfigForSlowCounterParticipants_Request)(nil),                     // 32: com.digitalasset.canton.admin.participant.v30.SetConfigForSlowCounterParticipants.Request
	(*SetConfigForSlowCounterParticipants_Response)(nil),                    // 33: com.digitalasset.canton.admin.participant.v30.SetConfigForSlowCounterParticipants.Response
	(*GetConfigForSlowCounterParticipants_Request)(nil),                     // 34: com.digitalasset.canton.admin.participant.v30.GetConfigForSlowCounterParticipants.Request
	(*GetConfigForSlowCounterParticipants_Response)(nil),                    // 35: com.digitalasset.canton.admin.participant.v30.GetConfigForSlowCounterParticipants.Response
	(*GetIntervalsBehindForCounterParticipants_CounterParticipantInfo)(nil), // 36: com.digitalasset.canton.admin.participant.v30.GetIntervalsBehindForCounterParticipants.CounterParticipantInfo
	(*GetIntervalsBehindForCounterParticipants_Request)(nil),                // 37: com.digitalasset.canton.admin.participant.v30.GetIntervalsBehindForCounterParticipants.Request
	(*GetIntervalsBehindForCounterParticipants_Response)(nil),               // 38: com.digitalasset.canton.admin.participant.v30.GetIntervalsBehindForCounterParticipants.Response
	(*timestamppb.Timestamp)(nil),                                           // 39: google.protobuf.Timestamp
}
var file_com_digitalasset_canton_admin_participant_v30_inspection_service_proto_depIdxs = []int32{
	39, // 0: com.digitalasset.canton.admin.participant.v30.TimeRange.from_exclusive:type_name -> google.protobuf.Timestamp
	39, // 1: com.digitalasset.canton.admin.participant.v30.TimeRange.to_inclusive:type_name -> google.protobuf.Timestamp
	7,  // 2: com.digitalasset.canton.admin.participant.v30.DomainTimeRange.interval:type_name -> com.digitalasset.canton.admin.participant.v30.TimeRange
	39, // 3: com.digitalasset.canton.admin.participant.v30.Interval.start_tick_exclusive:type_name -> google.protobuf.Timestamp
	39, // 4: com.digitalasset.canton.admin.participant.v30.Interval.end_tick_inclusive:type_name -> google.protobuf.Timestamp
	9,  // 5: com.digitalasset.canton.admin.participant.v30.ReceivedAcsCommitment.interval:type_name -> com.digitalasset.canton.admin.participant.v30.Interval
	0,  // 6: com.digitalasset.canton.admin.participant.v30.ReceivedAcsCommitment.state:type_name -> com.digitalasset.canton.admin.participant.v30.ReceivedCommitmentState
	10, // 7: com.digitalasset.canton.admin.participant.v30.ReceivedAcsCommitmentPerDomain.received:type_name -> com.digitalasset.canton.admin.participant.v30.ReceivedAcsCommitment
	9,  // 8: com.digitalasset.canton.admin.participant.v30.SentAcsCommitment.interval:type_name -> com.digitalasset.canton.admin.participant.v30.Interval
	1,  // 9: com.digitalasset.canton.admin.participant.v30.SentAcsCommitment.state:type_name -> com.digitalasset.canton.admin.participant.v30.SentCommitmentState
	12, // 10: com.digitalasset.canton.admin.participant.v30.SentAcsCommitmentPerDomain.sent:type_name -> com.digitalasset.canton.admin.participant.v30.SentAcsCommitment
	21, // 11: com.digitalasset.canton.admin.participant.v30.LookupContractDomain.Response.results:type_name -> com.digitalasset.canton.admin.participant.v30.LookupContractDomain.Response.ResultsEntry
	39, // 12: com.digitalasset.canton.admin.participant.v30.LookupOffsetByTime.Request.timestamp:type_name -> google.protobuf.Timestamp
	8,  // 13: com.digitalasset.canton.admin.participant.v30.LookupReceivedAcsCommitments.Request.time_ranges:type_name -> com.digitalasset.canton.admin.participant.v30.DomainTimeRange
	0,  // 14: com.digitalasset.canton.admin.participant.v30.LookupReceivedAcsCommitments.Request.commitment_state:type_name -> com.digitalasset.canton.admin.participant.v30.ReceivedCommitmentState
	11, // 15: com.digitalasset.canton.admin.participant.v30.LookupReceivedAcsCommitments.Response.received:type_name -> com.digitalasset.canton.admin.participant.v30.ReceivedAcsCommitmentPerDomain
	8,  // 16: com.digitalasset.canton.admin.participant.v30.LookupSentAcsCommitments.Request.time_ranges:type_name -> com.digitalasset.canton.admin.participant.v30.DomainTimeRange
	1,  // 17: com.digitalasset.canton.admin.participant.v30.LookupSentAcsCommitments.Request.commitment_state:type_name -> com.digitalasset.canton.admin.participant.v30.SentCommitmentState
	13, // 18: com.digitalasset.canton.admin.participant.v30.LookupSentAcsCommitments.Response.sent:type_name -> com.digitalasset.canton.admin.participant.v30.SentAcsCommitmentPerDomain
	15, // 19: com.digitalasset.canton.admin.participant.v30.SetConfigForSlowCounterParticipants.Request.configs:type_name -> com.digitalasset.canton.admin.participant.v30.SlowCounterParticipantDomainConfig
	15, // 20: com.digitalasset.canton.admin.participant.v30.GetConfigForSlowCounterParticipants.Response.configs:type_name -> com.digitalasset.canton.admin.participant.v30.SlowCounterParticipantDomainConfig
	39, // 21: com.digitalasset.canton.admin.participant.v30.GetIntervalsBehindForCounterParticipants.CounterParticipantInfo.as_of_sequencing_timestamp:type_name -> google.protobuf.Timestamp
	36, // 22: com.digitalasset.canton.admin.participant.v30.GetIntervalsBehindForCounterParticipants.Response.intervals_behind:type_name -> com.digitalasset.canton.admin.participant.v30.GetIntervalsBehindForCounterParticipants.CounterParticipantInfo
	19, // 23: com.digitalasset.canton.admin.participant.v30.InspectionService.LookupContractDomain:input_type -> com.digitalasset.canton.admin.participant.v30.LookupContractDomain.Request
	24, // 24: com.digitalasset.canton.admin.participant.v30.InspectionService.LookupOffsetByTime:input_type -> com.digitalasset.canton.admin.participant.v30.LookupOffsetByTime.Request
	26, // 25: com.digitalasset.canton.admin.participant.v30.InspectionService.LookupOffsetByIndex:input_type -> com.digitalasset.canton.admin.participant.v30.LookupOffsetByIndex.Request
	30, // 26: com.digitalasset.canton.admin.participant.v30.InspectionService.LookupSentAcsCommitments:input_type -> com.digitalasset.canton.admin.participant.v30.LookupSentAcsCommitments.Request
	28, // 27: com.digitalasset.canton.admin.participant.v30.InspectionService.LookupReceivedAcsCommitments:input_type -> com.digitalasset.canton.admin.participant.v30.LookupReceivedAcsCommitments.Request
	32, // 28: com.digitalasset.canton.admin.participant.v30.InspectionService.SetConfigForSlowCounterParticipants:input_type -> com.digitalasset.canton.admin.participant.v30.SetConfigForSlowCounterParticipants.Request
	34, // 29: com.digitalasset.canton.admin.participant.v30.InspectionService.GetConfigForSlowCounterParticipants:input_type -> com.digitalasset.canton.admin.participant.v30.GetConfigForSlowCounterParticipants.Request
	37, // 30: com.digitalasset.canton.admin.participant.v30.InspectionService.GetIntervalsBehindForCounterParticipants:input_type -> com.digitalasset.canton.admin.participant.v30.GetIntervalsBehindForCounterParticipants.Request
	20, // 31: com.digitalasset.canton.admin.participant.v30.InspectionService.LookupContractDomain:output_type -> com.digitalasset.canton.admin.participant.v30.LookupContractDomain.Response
	25, // 32: com.digitalasset.canton.admin.participant.v30.InspectionService.LookupOffsetByTime:output_type -> com.digitalasset.canton.admin.participant.v30.LookupOffsetByTime.Response
	27, // 33: com.digitalasset.canton.admin.participant.v30.InspectionService.LookupOffsetByIndex:output_type -> com.digitalasset.canton.admin.participant.v30.LookupOffsetByIndex.Response
	31, // 34: com.digitalasset.canton.admin.participant.v30.InspectionService.LookupSentAcsCommitments:output_type -> com.digitalasset.canton.admin.participant.v30.LookupSentAcsCommitments.Response
	29, // 35: com.digitalasset.canton.admin.participant.v30.InspectionService.LookupReceivedAcsCommitments:output_type -> com.digitalasset.canton.admin.participant.v30.LookupReceivedAcsCommitments.Response
	33, // 36: com.digitalasset.canton.admin.participant.v30.InspectionService.SetConfigForSlowCounterParticipants:output_type -> com.digitalasset.canton.admin.participant.v30.SetConfigForSlowCounterParticipants.Response
	35, // 37: com.digitalasset.canton.admin.participant.v30.InspectionService.GetConfigForSlowCounterParticipants:output_type -> com.digitalasset.canton.admin.participant.v30.GetConfigForSlowCounterParticipants.Response
	38, // 38: com.digitalasset.canton.admin.participant.v30.InspectionService.GetIntervalsBehindForCounterParticipants:output_type -> com.digitalasset.canton.admin.participant.v30.GetIntervalsBehindForCounterParticipants.Response
	31, // [31:39] is the sub-list for method output_type
	23, // [23:31] is the sub-list for method input_type
	23, // [23:23] is the sub-list for extension type_name
	23, // [23:23] is the sub-list for extension extendee
	0,  // [0:23] is the sub-list for field type_name
}

func init() { file_com_digitalasset_canton_admin_participant_v30_inspection_service_proto_init() }
func file_com_digitalasset_canton_admin_participant_v30_inspection_service_proto_init() {
	if File_com_digitalasset_canton_admin_participant_v30_inspection_service_proto != nil {
		return
	}
	file_com_digitalasset_canton_admin_participant_v30_inspection_service_proto_msgTypes[6].OneofWrappers = []any{}
	file_com_digitalasset_canton_admin_participant_v30_inspection_service_proto_msgTypes[8].OneofWrappers = []any{}
	file_com_digitalasset_canton_admin_participant_v30_inspection_service_proto_msgTypes[10].OneofWrappers = []any{}
	file_com_digitalasset_canton_admin_participant_v30_inspection_service_proto_msgTypes[35].OneofWrappers = []any{}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_com_digitalasset_canton_admin_participant_v30_inspection_service_proto_rawDesc,
			NumEnums:      2,
			NumMessages:   37,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_com_digitalasset_canton_admin_participant_v30_inspection_service_proto_goTypes,
		DependencyIndexes: file_com_digitalasset_canton_admin_participant_v30_inspection_service_proto_depIdxs,
		EnumInfos:         file_com_digitalasset_canton_admin_participant_v30_inspection_service_proto_enumTypes,
		MessageInfos:      file_com_digitalasset_canton_admin_participant_v30_inspection_service_proto_msgTypes,
	}.Build()
	File_com_digitalasset_canton_admin_participant_v30_inspection_service_proto = out.File
	file_com_digitalasset_canton_admin_participant_v30_inspection_service_proto_rawDesc = nil
	file_com_digitalasset_canton_admin_participant_v30_inspection_service_proto_goTypes = nil
	file_com_digitalasset_canton_admin_participant_v30_inspection_service_proto_depIdxs = nil
}
