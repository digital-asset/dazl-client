// Copyright (c) 2017-2025 Digital Asset (Switzerland) GmbH and/or its affiliates. All rights reserved.
// SPDX-License-Identifier: Apache-2.0
// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v6.30.0
// source: com/digitalasset/canton/admin/participant/v30/party_management_service.proto

package v30

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	PartyManagementService_AddPartyAsync_FullMethodName        = "/com.digitalasset.canton.admin.participant.v30.PartyManagementService/AddPartyAsync"
	PartyManagementService_GetAddPartyStatus_FullMethodName    = "/com.digitalasset.canton.admin.participant.v30.PartyManagementService/GetAddPartyStatus"
	PartyManagementService_ExportAcs_FullMethodName            = "/com.digitalasset.canton.admin.participant.v30.PartyManagementService/ExportAcs"
	PartyManagementService_ExportAcsAtTimestamp_FullMethodName = "/com.digitalasset.canton.admin.participant.v30.PartyManagementService/ExportAcsAtTimestamp"
)

// PartyManagementServiceClient is the client API for PartyManagementService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type PartyManagementServiceClient interface {
	AddPartyAsync(ctx context.Context, in *AddPartyAsyncRequest, opts ...grpc.CallOption) (*AddPartyAsyncResponse, error)
	GetAddPartyStatus(ctx context.Context, in *GetAddPartyStatusRequest, opts ...grpc.CallOption) (*GetAddPartyStatusResponse, error)
	ExportAcs(ctx context.Context, in *ExportAcsRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[ExportAcsResponse], error)
	ExportAcsAtTimestamp(ctx context.Context, in *ExportAcsAtTimestampRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[ExportAcsAtTimestampResponse], error)
}

type partyManagementServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewPartyManagementServiceClient(cc grpc.ClientConnInterface) PartyManagementServiceClient {
	return &partyManagementServiceClient{cc}
}

func (c *partyManagementServiceClient) AddPartyAsync(ctx context.Context, in *AddPartyAsyncRequest, opts ...grpc.CallOption) (*AddPartyAsyncResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AddPartyAsyncResponse)
	err := c.cc.Invoke(ctx, PartyManagementService_AddPartyAsync_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *partyManagementServiceClient) GetAddPartyStatus(ctx context.Context, in *GetAddPartyStatusRequest, opts ...grpc.CallOption) (*GetAddPartyStatusResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetAddPartyStatusResponse)
	err := c.cc.Invoke(ctx, PartyManagementService_GetAddPartyStatus_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *partyManagementServiceClient) ExportAcs(ctx context.Context, in *ExportAcsRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[ExportAcsResponse], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &PartyManagementService_ServiceDesc.Streams[0], PartyManagementService_ExportAcs_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[ExportAcsRequest, ExportAcsResponse]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type PartyManagementService_ExportAcsClient = grpc.ServerStreamingClient[ExportAcsResponse]

func (c *partyManagementServiceClient) ExportAcsAtTimestamp(ctx context.Context, in *ExportAcsAtTimestampRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[ExportAcsAtTimestampResponse], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &PartyManagementService_ServiceDesc.Streams[1], PartyManagementService_ExportAcsAtTimestamp_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[ExportAcsAtTimestampRequest, ExportAcsAtTimestampResponse]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type PartyManagementService_ExportAcsAtTimestampClient = grpc.ServerStreamingClient[ExportAcsAtTimestampResponse]

// PartyManagementServiceServer is the server API for PartyManagementService service.
// All implementations must embed UnimplementedPartyManagementServiceServer
// for forward compatibility.
type PartyManagementServiceServer interface {
	AddPartyAsync(context.Context, *AddPartyAsyncRequest) (*AddPartyAsyncResponse, error)
	GetAddPartyStatus(context.Context, *GetAddPartyStatusRequest) (*GetAddPartyStatusResponse, error)
	ExportAcs(*ExportAcsRequest, grpc.ServerStreamingServer[ExportAcsResponse]) error
	ExportAcsAtTimestamp(*ExportAcsAtTimestampRequest, grpc.ServerStreamingServer[ExportAcsAtTimestampResponse]) error
	mustEmbedUnimplementedPartyManagementServiceServer()
}

// UnimplementedPartyManagementServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedPartyManagementServiceServer struct{}

func (UnimplementedPartyManagementServiceServer) AddPartyAsync(context.Context, *AddPartyAsyncRequest) (*AddPartyAsyncResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddPartyAsync not implemented")
}
func (UnimplementedPartyManagementServiceServer) GetAddPartyStatus(context.Context, *GetAddPartyStatusRequest) (*GetAddPartyStatusResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAddPartyStatus not implemented")
}
func (UnimplementedPartyManagementServiceServer) ExportAcs(*ExportAcsRequest, grpc.ServerStreamingServer[ExportAcsResponse]) error {
	return status.Errorf(codes.Unimplemented, "method ExportAcs not implemented")
}
func (UnimplementedPartyManagementServiceServer) ExportAcsAtTimestamp(*ExportAcsAtTimestampRequest, grpc.ServerStreamingServer[ExportAcsAtTimestampResponse]) error {
	return status.Errorf(codes.Unimplemented, "method ExportAcsAtTimestamp not implemented")
}
func (UnimplementedPartyManagementServiceServer) mustEmbedUnimplementedPartyManagementServiceServer() {
}
func (UnimplementedPartyManagementServiceServer) testEmbeddedByValue() {}

// UnsafePartyManagementServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to PartyManagementServiceServer will
// result in compilation errors.
type UnsafePartyManagementServiceServer interface {
	mustEmbedUnimplementedPartyManagementServiceServer()
}

func RegisterPartyManagementServiceServer(s grpc.ServiceRegistrar, srv PartyManagementServiceServer) {
	// If the following call pancis, it indicates UnimplementedPartyManagementServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&PartyManagementService_ServiceDesc, srv)
}

func _PartyManagementService_AddPartyAsync_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddPartyAsyncRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PartyManagementServiceServer).AddPartyAsync(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PartyManagementService_AddPartyAsync_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PartyManagementServiceServer).AddPartyAsync(ctx, req.(*AddPartyAsyncRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PartyManagementService_GetAddPartyStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAddPartyStatusRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PartyManagementServiceServer).GetAddPartyStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PartyManagementService_GetAddPartyStatus_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PartyManagementServiceServer).GetAddPartyStatus(ctx, req.(*GetAddPartyStatusRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PartyManagementService_ExportAcs_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ExportAcsRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(PartyManagementServiceServer).ExportAcs(m, &grpc.GenericServerStream[ExportAcsRequest, ExportAcsResponse]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type PartyManagementService_ExportAcsServer = grpc.ServerStreamingServer[ExportAcsResponse]

func _PartyManagementService_ExportAcsAtTimestamp_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ExportAcsAtTimestampRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(PartyManagementServiceServer).ExportAcsAtTimestamp(m, &grpc.GenericServerStream[ExportAcsAtTimestampRequest, ExportAcsAtTimestampResponse]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type PartyManagementService_ExportAcsAtTimestampServer = grpc.ServerStreamingServer[ExportAcsAtTimestampResponse]

// PartyManagementService_ServiceDesc is the grpc.ServiceDesc for PartyManagementService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var PartyManagementService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "com.digitalasset.canton.admin.participant.v30.PartyManagementService",
	HandlerType: (*PartyManagementServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AddPartyAsync",
			Handler:    _PartyManagementService_AddPartyAsync_Handler,
		},
		{
			MethodName: "GetAddPartyStatus",
			Handler:    _PartyManagementService_GetAddPartyStatus_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "ExportAcs",
			Handler:       _PartyManagementService_ExportAcs_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "ExportAcsAtTimestamp",
			Handler:       _PartyManagementService_ExportAcsAtTimestamp_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "com/digitalasset/canton/admin/participant/v30/party_management_service.proto",
}
