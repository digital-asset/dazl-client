// Copyright (c) 2017-2025 Digital Asset (Switzerland) GmbH and/or its affiliates. All rights reserved.
// SPDX-License-Identifier: Apache-2.0
// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v6.30.0
// source: com/digitalasset/canton/admin/participant/v30/synchronizer_connectivity.proto

package v30

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	SynchronizerConnectivityService_ConnectSynchronizer_FullMethodName         = "/com.digitalasset.canton.admin.participant.v30.SynchronizerConnectivityService/ConnectSynchronizer"
	SynchronizerConnectivityService_RegisterSynchronizer_FullMethodName        = "/com.digitalasset.canton.admin.participant.v30.SynchronizerConnectivityService/RegisterSynchronizer"
	SynchronizerConnectivityService_ReconnectSynchronizers_FullMethodName      = "/com.digitalasset.canton.admin.participant.v30.SynchronizerConnectivityService/ReconnectSynchronizers"
	SynchronizerConnectivityService_ReconnectSynchronizer_FullMethodName       = "/com.digitalasset.canton.admin.participant.v30.SynchronizerConnectivityService/ReconnectSynchronizer"
	SynchronizerConnectivityService_ModifySynchronizer_FullMethodName          = "/com.digitalasset.canton.admin.participant.v30.SynchronizerConnectivityService/ModifySynchronizer"
	SynchronizerConnectivityService_DisconnectSynchronizer_FullMethodName      = "/com.digitalasset.canton.admin.participant.v30.SynchronizerConnectivityService/DisconnectSynchronizer"
	SynchronizerConnectivityService_DisconnectAllSynchronizers_FullMethodName  = "/com.digitalasset.canton.admin.participant.v30.SynchronizerConnectivityService/DisconnectAllSynchronizers"
	SynchronizerConnectivityService_Logout_FullMethodName                      = "/com.digitalasset.canton.admin.participant.v30.SynchronizerConnectivityService/Logout"
	SynchronizerConnectivityService_ListConnectedSynchronizers_FullMethodName  = "/com.digitalasset.canton.admin.participant.v30.SynchronizerConnectivityService/ListConnectedSynchronizers"
	SynchronizerConnectivityService_ListRegisteredSynchronizers_FullMethodName = "/com.digitalasset.canton.admin.participant.v30.SynchronizerConnectivityService/ListRegisteredSynchronizers"
	SynchronizerConnectivityService_GetSynchronizerId_FullMethodName           = "/com.digitalasset.canton.admin.participant.v30.SynchronizerConnectivityService/GetSynchronizerId"
)

// SynchronizerConnectivityServiceClient is the client API for SynchronizerConnectivityService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type SynchronizerConnectivityServiceClient interface {
	ConnectSynchronizer(ctx context.Context, in *ConnectSynchronizerRequest, opts ...grpc.CallOption) (*ConnectSynchronizerResponse, error)
	RegisterSynchronizer(ctx context.Context, in *RegisterSynchronizerRequest, opts ...grpc.CallOption) (*RegisterSynchronizerResponse, error)
	ReconnectSynchronizers(ctx context.Context, in *ReconnectSynchronizersRequest, opts ...grpc.CallOption) (*ReconnectSynchronizersResponse, error)
	ReconnectSynchronizer(ctx context.Context, in *ReconnectSynchronizerRequest, opts ...grpc.CallOption) (*ReconnectSynchronizerResponse, error)
	ModifySynchronizer(ctx context.Context, in *ModifySynchronizerRequest, opts ...grpc.CallOption) (*ModifySynchronizerResponse, error)
	DisconnectSynchronizer(ctx context.Context, in *DisconnectSynchronizerRequest, opts ...grpc.CallOption) (*DisconnectSynchronizerResponse, error)
	DisconnectAllSynchronizers(ctx context.Context, in *DisconnectAllSynchronizersRequest, opts ...grpc.CallOption) (*DisconnectAllSynchronizersResponse, error)
	Logout(ctx context.Context, in *LogoutRequest, opts ...grpc.CallOption) (*LogoutResponse, error)
	ListConnectedSynchronizers(ctx context.Context, in *ListConnectedSynchronizersRequest, opts ...grpc.CallOption) (*ListConnectedSynchronizersResponse, error)
	ListRegisteredSynchronizers(ctx context.Context, in *ListRegisteredSynchronizersRequest, opts ...grpc.CallOption) (*ListRegisteredSynchronizersResponse, error)
	GetSynchronizerId(ctx context.Context, in *GetSynchronizerIdRequest, opts ...grpc.CallOption) (*GetSynchronizerIdResponse, error)
}

type synchronizerConnectivityServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewSynchronizerConnectivityServiceClient(cc grpc.ClientConnInterface) SynchronizerConnectivityServiceClient {
	return &synchronizerConnectivityServiceClient{cc}
}

func (c *synchronizerConnectivityServiceClient) ConnectSynchronizer(ctx context.Context, in *ConnectSynchronizerRequest, opts ...grpc.CallOption) (*ConnectSynchronizerResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ConnectSynchronizerResponse)
	err := c.cc.Invoke(ctx, SynchronizerConnectivityService_ConnectSynchronizer_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *synchronizerConnectivityServiceClient) RegisterSynchronizer(ctx context.Context, in *RegisterSynchronizerRequest, opts ...grpc.CallOption) (*RegisterSynchronizerResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RegisterSynchronizerResponse)
	err := c.cc.Invoke(ctx, SynchronizerConnectivityService_RegisterSynchronizer_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *synchronizerConnectivityServiceClient) ReconnectSynchronizers(ctx context.Context, in *ReconnectSynchronizersRequest, opts ...grpc.CallOption) (*ReconnectSynchronizersResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ReconnectSynchronizersResponse)
	err := c.cc.Invoke(ctx, SynchronizerConnectivityService_ReconnectSynchronizers_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *synchronizerConnectivityServiceClient) ReconnectSynchronizer(ctx context.Context, in *ReconnectSynchronizerRequest, opts ...grpc.CallOption) (*ReconnectSynchronizerResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ReconnectSynchronizerResponse)
	err := c.cc.Invoke(ctx, SynchronizerConnectivityService_ReconnectSynchronizer_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *synchronizerConnectivityServiceClient) ModifySynchronizer(ctx context.Context, in *ModifySynchronizerRequest, opts ...grpc.CallOption) (*ModifySynchronizerResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ModifySynchronizerResponse)
	err := c.cc.Invoke(ctx, SynchronizerConnectivityService_ModifySynchronizer_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *synchronizerConnectivityServiceClient) DisconnectSynchronizer(ctx context.Context, in *DisconnectSynchronizerRequest, opts ...grpc.CallOption) (*DisconnectSynchronizerResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DisconnectSynchronizerResponse)
	err := c.cc.Invoke(ctx, SynchronizerConnectivityService_DisconnectSynchronizer_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *synchronizerConnectivityServiceClient) DisconnectAllSynchronizers(ctx context.Context, in *DisconnectAllSynchronizersRequest, opts ...grpc.CallOption) (*DisconnectAllSynchronizersResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DisconnectAllSynchronizersResponse)
	err := c.cc.Invoke(ctx, SynchronizerConnectivityService_DisconnectAllSynchronizers_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *synchronizerConnectivityServiceClient) Logout(ctx context.Context, in *LogoutRequest, opts ...grpc.CallOption) (*LogoutResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(LogoutResponse)
	err := c.cc.Invoke(ctx, SynchronizerConnectivityService_Logout_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *synchronizerConnectivityServiceClient) ListConnectedSynchronizers(ctx context.Context, in *ListConnectedSynchronizersRequest, opts ...grpc.CallOption) (*ListConnectedSynchronizersResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListConnectedSynchronizersResponse)
	err := c.cc.Invoke(ctx, SynchronizerConnectivityService_ListConnectedSynchronizers_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *synchronizerConnectivityServiceClient) ListRegisteredSynchronizers(ctx context.Context, in *ListRegisteredSynchronizersRequest, opts ...grpc.CallOption) (*ListRegisteredSynchronizersResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListRegisteredSynchronizersResponse)
	err := c.cc.Invoke(ctx, SynchronizerConnectivityService_ListRegisteredSynchronizers_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *synchronizerConnectivityServiceClient) GetSynchronizerId(ctx context.Context, in *GetSynchronizerIdRequest, opts ...grpc.CallOption) (*GetSynchronizerIdResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetSynchronizerIdResponse)
	err := c.cc.Invoke(ctx, SynchronizerConnectivityService_GetSynchronizerId_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SynchronizerConnectivityServiceServer is the server API for SynchronizerConnectivityService service.
// All implementations must embed UnimplementedSynchronizerConnectivityServiceServer
// for forward compatibility.
type SynchronizerConnectivityServiceServer interface {
	ConnectSynchronizer(context.Context, *ConnectSynchronizerRequest) (*ConnectSynchronizerResponse, error)
	RegisterSynchronizer(context.Context, *RegisterSynchronizerRequest) (*RegisterSynchronizerResponse, error)
	ReconnectSynchronizers(context.Context, *ReconnectSynchronizersRequest) (*ReconnectSynchronizersResponse, error)
	ReconnectSynchronizer(context.Context, *ReconnectSynchronizerRequest) (*ReconnectSynchronizerResponse, error)
	ModifySynchronizer(context.Context, *ModifySynchronizerRequest) (*ModifySynchronizerResponse, error)
	DisconnectSynchronizer(context.Context, *DisconnectSynchronizerRequest) (*DisconnectSynchronizerResponse, error)
	DisconnectAllSynchronizers(context.Context, *DisconnectAllSynchronizersRequest) (*DisconnectAllSynchronizersResponse, error)
	Logout(context.Context, *LogoutRequest) (*LogoutResponse, error)
	ListConnectedSynchronizers(context.Context, *ListConnectedSynchronizersRequest) (*ListConnectedSynchronizersResponse, error)
	ListRegisteredSynchronizers(context.Context, *ListRegisteredSynchronizersRequest) (*ListRegisteredSynchronizersResponse, error)
	GetSynchronizerId(context.Context, *GetSynchronizerIdRequest) (*GetSynchronizerIdResponse, error)
	mustEmbedUnimplementedSynchronizerConnectivityServiceServer()
}

// UnimplementedSynchronizerConnectivityServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedSynchronizerConnectivityServiceServer struct{}

func (UnimplementedSynchronizerConnectivityServiceServer) ConnectSynchronizer(context.Context, *ConnectSynchronizerRequest) (*ConnectSynchronizerResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ConnectSynchronizer not implemented")
}
func (UnimplementedSynchronizerConnectivityServiceServer) RegisterSynchronizer(context.Context, *RegisterSynchronizerRequest) (*RegisterSynchronizerResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RegisterSynchronizer not implemented")
}
func (UnimplementedSynchronizerConnectivityServiceServer) ReconnectSynchronizers(context.Context, *ReconnectSynchronizersRequest) (*ReconnectSynchronizersResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReconnectSynchronizers not implemented")
}
func (UnimplementedSynchronizerConnectivityServiceServer) ReconnectSynchronizer(context.Context, *ReconnectSynchronizerRequest) (*ReconnectSynchronizerResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReconnectSynchronizer not implemented")
}
func (UnimplementedSynchronizerConnectivityServiceServer) ModifySynchronizer(context.Context, *ModifySynchronizerRequest) (*ModifySynchronizerResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ModifySynchronizer not implemented")
}
func (UnimplementedSynchronizerConnectivityServiceServer) DisconnectSynchronizer(context.Context, *DisconnectSynchronizerRequest) (*DisconnectSynchronizerResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DisconnectSynchronizer not implemented")
}
func (UnimplementedSynchronizerConnectivityServiceServer) DisconnectAllSynchronizers(context.Context, *DisconnectAllSynchronizersRequest) (*DisconnectAllSynchronizersResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DisconnectAllSynchronizers not implemented")
}
func (UnimplementedSynchronizerConnectivityServiceServer) Logout(context.Context, *LogoutRequest) (*LogoutResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Logout not implemented")
}
func (UnimplementedSynchronizerConnectivityServiceServer) ListConnectedSynchronizers(context.Context, *ListConnectedSynchronizersRequest) (*ListConnectedSynchronizersResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListConnectedSynchronizers not implemented")
}
func (UnimplementedSynchronizerConnectivityServiceServer) ListRegisteredSynchronizers(context.Context, *ListRegisteredSynchronizersRequest) (*ListRegisteredSynchronizersResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListRegisteredSynchronizers not implemented")
}
func (UnimplementedSynchronizerConnectivityServiceServer) GetSynchronizerId(context.Context, *GetSynchronizerIdRequest) (*GetSynchronizerIdResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSynchronizerId not implemented")
}
func (UnimplementedSynchronizerConnectivityServiceServer) mustEmbedUnimplementedSynchronizerConnectivityServiceServer() {
}
func (UnimplementedSynchronizerConnectivityServiceServer) testEmbeddedByValue() {}

// UnsafeSynchronizerConnectivityServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SynchronizerConnectivityServiceServer will
// result in compilation errors.
type UnsafeSynchronizerConnectivityServiceServer interface {
	mustEmbedUnimplementedSynchronizerConnectivityServiceServer()
}

func RegisterSynchronizerConnectivityServiceServer(s grpc.ServiceRegistrar, srv SynchronizerConnectivityServiceServer) {
	// If the following call pancis, it indicates UnimplementedSynchronizerConnectivityServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&SynchronizerConnectivityService_ServiceDesc, srv)
}

func _SynchronizerConnectivityService_ConnectSynchronizer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ConnectSynchronizerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SynchronizerConnectivityServiceServer).ConnectSynchronizer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SynchronizerConnectivityService_ConnectSynchronizer_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SynchronizerConnectivityServiceServer).ConnectSynchronizer(ctx, req.(*ConnectSynchronizerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SynchronizerConnectivityService_RegisterSynchronizer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RegisterSynchronizerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SynchronizerConnectivityServiceServer).RegisterSynchronizer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SynchronizerConnectivityService_RegisterSynchronizer_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SynchronizerConnectivityServiceServer).RegisterSynchronizer(ctx, req.(*RegisterSynchronizerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SynchronizerConnectivityService_ReconnectSynchronizers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReconnectSynchronizersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SynchronizerConnectivityServiceServer).ReconnectSynchronizers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SynchronizerConnectivityService_ReconnectSynchronizers_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SynchronizerConnectivityServiceServer).ReconnectSynchronizers(ctx, req.(*ReconnectSynchronizersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SynchronizerConnectivityService_ReconnectSynchronizer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReconnectSynchronizerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SynchronizerConnectivityServiceServer).ReconnectSynchronizer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SynchronizerConnectivityService_ReconnectSynchronizer_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SynchronizerConnectivityServiceServer).ReconnectSynchronizer(ctx, req.(*ReconnectSynchronizerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SynchronizerConnectivityService_ModifySynchronizer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ModifySynchronizerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SynchronizerConnectivityServiceServer).ModifySynchronizer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SynchronizerConnectivityService_ModifySynchronizer_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SynchronizerConnectivityServiceServer).ModifySynchronizer(ctx, req.(*ModifySynchronizerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SynchronizerConnectivityService_DisconnectSynchronizer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DisconnectSynchronizerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SynchronizerConnectivityServiceServer).DisconnectSynchronizer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SynchronizerConnectivityService_DisconnectSynchronizer_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SynchronizerConnectivityServiceServer).DisconnectSynchronizer(ctx, req.(*DisconnectSynchronizerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SynchronizerConnectivityService_DisconnectAllSynchronizers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DisconnectAllSynchronizersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SynchronizerConnectivityServiceServer).DisconnectAllSynchronizers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SynchronizerConnectivityService_DisconnectAllSynchronizers_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SynchronizerConnectivityServiceServer).DisconnectAllSynchronizers(ctx, req.(*DisconnectAllSynchronizersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SynchronizerConnectivityService_Logout_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LogoutRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SynchronizerConnectivityServiceServer).Logout(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SynchronizerConnectivityService_Logout_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SynchronizerConnectivityServiceServer).Logout(ctx, req.(*LogoutRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SynchronizerConnectivityService_ListConnectedSynchronizers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListConnectedSynchronizersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SynchronizerConnectivityServiceServer).ListConnectedSynchronizers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SynchronizerConnectivityService_ListConnectedSynchronizers_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SynchronizerConnectivityServiceServer).ListConnectedSynchronizers(ctx, req.(*ListConnectedSynchronizersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SynchronizerConnectivityService_ListRegisteredSynchronizers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListRegisteredSynchronizersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SynchronizerConnectivityServiceServer).ListRegisteredSynchronizers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SynchronizerConnectivityService_ListRegisteredSynchronizers_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SynchronizerConnectivityServiceServer).ListRegisteredSynchronizers(ctx, req.(*ListRegisteredSynchronizersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SynchronizerConnectivityService_GetSynchronizerId_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetSynchronizerIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SynchronizerConnectivityServiceServer).GetSynchronizerId(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SynchronizerConnectivityService_GetSynchronizerId_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SynchronizerConnectivityServiceServer).GetSynchronizerId(ctx, req.(*GetSynchronizerIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// SynchronizerConnectivityService_ServiceDesc is the grpc.ServiceDesc for SynchronizerConnectivityService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var SynchronizerConnectivityService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "com.digitalasset.canton.admin.participant.v30.SynchronizerConnectivityService",
	HandlerType: (*SynchronizerConnectivityServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ConnectSynchronizer",
			Handler:    _SynchronizerConnectivityService_ConnectSynchronizer_Handler,
		},
		{
			MethodName: "RegisterSynchronizer",
			Handler:    _SynchronizerConnectivityService_RegisterSynchronizer_Handler,
		},
		{
			MethodName: "ReconnectSynchronizers",
			Handler:    _SynchronizerConnectivityService_ReconnectSynchronizers_Handler,
		},
		{
			MethodName: "ReconnectSynchronizer",
			Handler:    _SynchronizerConnectivityService_ReconnectSynchronizer_Handler,
		},
		{
			MethodName: "ModifySynchronizer",
			Handler:    _SynchronizerConnectivityService_ModifySynchronizer_Handler,
		},
		{
			MethodName: "DisconnectSynchronizer",
			Handler:    _SynchronizerConnectivityService_DisconnectSynchronizer_Handler,
		},
		{
			MethodName: "DisconnectAllSynchronizers",
			Handler:    _SynchronizerConnectivityService_DisconnectAllSynchronizers_Handler,
		},
		{
			MethodName: "Logout",
			Handler:    _SynchronizerConnectivityService_Logout_Handler,
		},
		{
			MethodName: "ListConnectedSynchronizers",
			Handler:    _SynchronizerConnectivityService_ListConnectedSynchronizers_Handler,
		},
		{
			MethodName: "ListRegisteredSynchronizers",
			Handler:    _SynchronizerConnectivityService_ListRegisteredSynchronizers_Handler,
		},
		{
			MethodName: "GetSynchronizerId",
			Handler:    _SynchronizerConnectivityService_GetSynchronizerId_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "com/digitalasset/canton/admin/participant/v30/synchronizer_connectivity.proto",
}
