// Copyright (c) 2017-2025 Digital Asset (Switzerland) GmbH and/or its affiliates. All rights reserved.
// SPDX-License-Identifier: Apache-2.0
// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v6.30.0
// source: com/digitalasset/canton/admin/participant/v30/inspection_service.proto

package v30

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	InspectionService_LookupOffsetByTime_FullMethodName                       = "/com.digitalasset.canton.admin.participant.v30.InspectionService/LookupOffsetByTime"
	InspectionService_OpenCommitment_FullMethodName                           = "/com.digitalasset.canton.admin.participant.v30.InspectionService/OpenCommitment"
	InspectionService_InspectCommitmentContracts_FullMethodName               = "/com.digitalasset.canton.admin.participant.v30.InspectionService/InspectCommitmentContracts"
	InspectionService_LookupSentAcsCommitments_FullMethodName                 = "/com.digitalasset.canton.admin.participant.v30.InspectionService/LookupSentAcsCommitments"
	InspectionService_LookupReceivedAcsCommitments_FullMethodName             = "/com.digitalasset.canton.admin.participant.v30.InspectionService/LookupReceivedAcsCommitments"
	InspectionService_SetConfigForSlowCounterParticipants_FullMethodName      = "/com.digitalasset.canton.admin.participant.v30.InspectionService/SetConfigForSlowCounterParticipants"
	InspectionService_GetConfigForSlowCounterParticipants_FullMethodName      = "/com.digitalasset.canton.admin.participant.v30.InspectionService/GetConfigForSlowCounterParticipants"
	InspectionService_GetIntervalsBehindForCounterParticipants_FullMethodName = "/com.digitalasset.canton.admin.participant.v30.InspectionService/GetIntervalsBehindForCounterParticipants"
	InspectionService_CountInFlight_FullMethodName                            = "/com.digitalasset.canton.admin.participant.v30.InspectionService/CountInFlight"
)

// InspectionServiceClient is the client API for InspectionService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type InspectionServiceClient interface {
	LookupOffsetByTime(ctx context.Context, in *LookupOffsetByTimeRequest, opts ...grpc.CallOption) (*LookupOffsetByTimeResponse, error)
	OpenCommitment(ctx context.Context, in *OpenCommitmentRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[OpenCommitmentResponse], error)
	InspectCommitmentContracts(ctx context.Context, in *InspectCommitmentContractsRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[InspectCommitmentContractsResponse], error)
	LookupSentAcsCommitments(ctx context.Context, in *LookupSentAcsCommitmentsRequest, opts ...grpc.CallOption) (*LookupSentAcsCommitmentsResponse, error)
	LookupReceivedAcsCommitments(ctx context.Context, in *LookupReceivedAcsCommitmentsRequest, opts ...grpc.CallOption) (*LookupReceivedAcsCommitmentsResponse, error)
	SetConfigForSlowCounterParticipants(ctx context.Context, in *SetConfigForSlowCounterParticipantsRequest, opts ...grpc.CallOption) (*SetConfigForSlowCounterParticipantsResponse, error)
	GetConfigForSlowCounterParticipants(ctx context.Context, in *GetConfigForSlowCounterParticipantsRequest, opts ...grpc.CallOption) (*GetConfigForSlowCounterParticipantsResponse, error)
	GetIntervalsBehindForCounterParticipants(ctx context.Context, in *GetIntervalsBehindForCounterParticipantsRequest, opts ...grpc.CallOption) (*GetIntervalsBehindForCounterParticipantsResponse, error)
	CountInFlight(ctx context.Context, in *CountInFlightRequest, opts ...grpc.CallOption) (*CountInFlightResponse, error)
}

type inspectionServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewInspectionServiceClient(cc grpc.ClientConnInterface) InspectionServiceClient {
	return &inspectionServiceClient{cc}
}

func (c *inspectionServiceClient) LookupOffsetByTime(ctx context.Context, in *LookupOffsetByTimeRequest, opts ...grpc.CallOption) (*LookupOffsetByTimeResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(LookupOffsetByTimeResponse)
	err := c.cc.Invoke(ctx, InspectionService_LookupOffsetByTime_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *inspectionServiceClient) OpenCommitment(ctx context.Context, in *OpenCommitmentRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[OpenCommitmentResponse], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &InspectionService_ServiceDesc.Streams[0], InspectionService_OpenCommitment_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[OpenCommitmentRequest, OpenCommitmentResponse]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type InspectionService_OpenCommitmentClient = grpc.ServerStreamingClient[OpenCommitmentResponse]

func (c *inspectionServiceClient) InspectCommitmentContracts(ctx context.Context, in *InspectCommitmentContractsRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[InspectCommitmentContractsResponse], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &InspectionService_ServiceDesc.Streams[1], InspectionService_InspectCommitmentContracts_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[InspectCommitmentContractsRequest, InspectCommitmentContractsResponse]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type InspectionService_InspectCommitmentContractsClient = grpc.ServerStreamingClient[InspectCommitmentContractsResponse]

func (c *inspectionServiceClient) LookupSentAcsCommitments(ctx context.Context, in *LookupSentAcsCommitmentsRequest, opts ...grpc.CallOption) (*LookupSentAcsCommitmentsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(LookupSentAcsCommitmentsResponse)
	err := c.cc.Invoke(ctx, InspectionService_LookupSentAcsCommitments_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *inspectionServiceClient) LookupReceivedAcsCommitments(ctx context.Context, in *LookupReceivedAcsCommitmentsRequest, opts ...grpc.CallOption) (*LookupReceivedAcsCommitmentsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(LookupReceivedAcsCommitmentsResponse)
	err := c.cc.Invoke(ctx, InspectionService_LookupReceivedAcsCommitments_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *inspectionServiceClient) SetConfigForSlowCounterParticipants(ctx context.Context, in *SetConfigForSlowCounterParticipantsRequest, opts ...grpc.CallOption) (*SetConfigForSlowCounterParticipantsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SetConfigForSlowCounterParticipantsResponse)
	err := c.cc.Invoke(ctx, InspectionService_SetConfigForSlowCounterParticipants_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *inspectionServiceClient) GetConfigForSlowCounterParticipants(ctx context.Context, in *GetConfigForSlowCounterParticipantsRequest, opts ...grpc.CallOption) (*GetConfigForSlowCounterParticipantsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetConfigForSlowCounterParticipantsResponse)
	err := c.cc.Invoke(ctx, InspectionService_GetConfigForSlowCounterParticipants_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *inspectionServiceClient) GetIntervalsBehindForCounterParticipants(ctx context.Context, in *GetIntervalsBehindForCounterParticipantsRequest, opts ...grpc.CallOption) (*GetIntervalsBehindForCounterParticipantsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetIntervalsBehindForCounterParticipantsResponse)
	err := c.cc.Invoke(ctx, InspectionService_GetIntervalsBehindForCounterParticipants_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *inspectionServiceClient) CountInFlight(ctx context.Context, in *CountInFlightRequest, opts ...grpc.CallOption) (*CountInFlightResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CountInFlightResponse)
	err := c.cc.Invoke(ctx, InspectionService_CountInFlight_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// InspectionServiceServer is the server API for InspectionService service.
// All implementations must embed UnimplementedInspectionServiceServer
// for forward compatibility.
type InspectionServiceServer interface {
	LookupOffsetByTime(context.Context, *LookupOffsetByTimeRequest) (*LookupOffsetByTimeResponse, error)
	OpenCommitment(*OpenCommitmentRequest, grpc.ServerStreamingServer[OpenCommitmentResponse]) error
	InspectCommitmentContracts(*InspectCommitmentContractsRequest, grpc.ServerStreamingServer[InspectCommitmentContractsResponse]) error
	LookupSentAcsCommitments(context.Context, *LookupSentAcsCommitmentsRequest) (*LookupSentAcsCommitmentsResponse, error)
	LookupReceivedAcsCommitments(context.Context, *LookupReceivedAcsCommitmentsRequest) (*LookupReceivedAcsCommitmentsResponse, error)
	SetConfigForSlowCounterParticipants(context.Context, *SetConfigForSlowCounterParticipantsRequest) (*SetConfigForSlowCounterParticipantsResponse, error)
	GetConfigForSlowCounterParticipants(context.Context, *GetConfigForSlowCounterParticipantsRequest) (*GetConfigForSlowCounterParticipantsResponse, error)
	GetIntervalsBehindForCounterParticipants(context.Context, *GetIntervalsBehindForCounterParticipantsRequest) (*GetIntervalsBehindForCounterParticipantsResponse, error)
	CountInFlight(context.Context, *CountInFlightRequest) (*CountInFlightResponse, error)
	mustEmbedUnimplementedInspectionServiceServer()
}

// UnimplementedInspectionServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedInspectionServiceServer struct{}

func (UnimplementedInspectionServiceServer) LookupOffsetByTime(context.Context, *LookupOffsetByTimeRequest) (*LookupOffsetByTimeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LookupOffsetByTime not implemented")
}
func (UnimplementedInspectionServiceServer) OpenCommitment(*OpenCommitmentRequest, grpc.ServerStreamingServer[OpenCommitmentResponse]) error {
	return status.Errorf(codes.Unimplemented, "method OpenCommitment not implemented")
}
func (UnimplementedInspectionServiceServer) InspectCommitmentContracts(*InspectCommitmentContractsRequest, grpc.ServerStreamingServer[InspectCommitmentContractsResponse]) error {
	return status.Errorf(codes.Unimplemented, "method InspectCommitmentContracts not implemented")
}
func (UnimplementedInspectionServiceServer) LookupSentAcsCommitments(context.Context, *LookupSentAcsCommitmentsRequest) (*LookupSentAcsCommitmentsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LookupSentAcsCommitments not implemented")
}
func (UnimplementedInspectionServiceServer) LookupReceivedAcsCommitments(context.Context, *LookupReceivedAcsCommitmentsRequest) (*LookupReceivedAcsCommitmentsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LookupReceivedAcsCommitments not implemented")
}
func (UnimplementedInspectionServiceServer) SetConfigForSlowCounterParticipants(context.Context, *SetConfigForSlowCounterParticipantsRequest) (*SetConfigForSlowCounterParticipantsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetConfigForSlowCounterParticipants not implemented")
}
func (UnimplementedInspectionServiceServer) GetConfigForSlowCounterParticipants(context.Context, *GetConfigForSlowCounterParticipantsRequest) (*GetConfigForSlowCounterParticipantsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetConfigForSlowCounterParticipants not implemented")
}
func (UnimplementedInspectionServiceServer) GetIntervalsBehindForCounterParticipants(context.Context, *GetIntervalsBehindForCounterParticipantsRequest) (*GetIntervalsBehindForCounterParticipantsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetIntervalsBehindForCounterParticipants not implemented")
}
func (UnimplementedInspectionServiceServer) CountInFlight(context.Context, *CountInFlightRequest) (*CountInFlightResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CountInFlight not implemented")
}
func (UnimplementedInspectionServiceServer) mustEmbedUnimplementedInspectionServiceServer() {}
func (UnimplementedInspectionServiceServer) testEmbeddedByValue()                           {}

// UnsafeInspectionServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to InspectionServiceServer will
// result in compilation errors.
type UnsafeInspectionServiceServer interface {
	mustEmbedUnimplementedInspectionServiceServer()
}

func RegisterInspectionServiceServer(s grpc.ServiceRegistrar, srv InspectionServiceServer) {
	// If the following call pancis, it indicates UnimplementedInspectionServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&InspectionService_ServiceDesc, srv)
}

func _InspectionService_LookupOffsetByTime_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LookupOffsetByTimeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InspectionServiceServer).LookupOffsetByTime(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: InspectionService_LookupOffsetByTime_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InspectionServiceServer).LookupOffsetByTime(ctx, req.(*LookupOffsetByTimeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _InspectionService_OpenCommitment_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(OpenCommitmentRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(InspectionServiceServer).OpenCommitment(m, &grpc.GenericServerStream[OpenCommitmentRequest, OpenCommitmentResponse]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type InspectionService_OpenCommitmentServer = grpc.ServerStreamingServer[OpenCommitmentResponse]

func _InspectionService_InspectCommitmentContracts_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(InspectCommitmentContractsRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(InspectionServiceServer).InspectCommitmentContracts(m, &grpc.GenericServerStream[InspectCommitmentContractsRequest, InspectCommitmentContractsResponse]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type InspectionService_InspectCommitmentContractsServer = grpc.ServerStreamingServer[InspectCommitmentContractsResponse]

func _InspectionService_LookupSentAcsCommitments_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LookupSentAcsCommitmentsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InspectionServiceServer).LookupSentAcsCommitments(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: InspectionService_LookupSentAcsCommitments_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InspectionServiceServer).LookupSentAcsCommitments(ctx, req.(*LookupSentAcsCommitmentsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _InspectionService_LookupReceivedAcsCommitments_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LookupReceivedAcsCommitmentsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InspectionServiceServer).LookupReceivedAcsCommitments(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: InspectionService_LookupReceivedAcsCommitments_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InspectionServiceServer).LookupReceivedAcsCommitments(ctx, req.(*LookupReceivedAcsCommitmentsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _InspectionService_SetConfigForSlowCounterParticipants_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetConfigForSlowCounterParticipantsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InspectionServiceServer).SetConfigForSlowCounterParticipants(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: InspectionService_SetConfigForSlowCounterParticipants_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InspectionServiceServer).SetConfigForSlowCounterParticipants(ctx, req.(*SetConfigForSlowCounterParticipantsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _InspectionService_GetConfigForSlowCounterParticipants_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetConfigForSlowCounterParticipantsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InspectionServiceServer).GetConfigForSlowCounterParticipants(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: InspectionService_GetConfigForSlowCounterParticipants_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InspectionServiceServer).GetConfigForSlowCounterParticipants(ctx, req.(*GetConfigForSlowCounterParticipantsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _InspectionService_GetIntervalsBehindForCounterParticipants_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetIntervalsBehindForCounterParticipantsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InspectionServiceServer).GetIntervalsBehindForCounterParticipants(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: InspectionService_GetIntervalsBehindForCounterParticipants_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InspectionServiceServer).GetIntervalsBehindForCounterParticipants(ctx, req.(*GetIntervalsBehindForCounterParticipantsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _InspectionService_CountInFlight_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CountInFlightRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InspectionServiceServer).CountInFlight(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: InspectionService_CountInFlight_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InspectionServiceServer).CountInFlight(ctx, req.(*CountInFlightRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// InspectionService_ServiceDesc is the grpc.ServiceDesc for InspectionService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var InspectionService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "com.digitalasset.canton.admin.participant.v30.InspectionService",
	HandlerType: (*InspectionServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "LookupOffsetByTime",
			Handler:    _InspectionService_LookupOffsetByTime_Handler,
		},
		{
			MethodName: "LookupSentAcsCommitments",
			Handler:    _InspectionService_LookupSentAcsCommitments_Handler,
		},
		{
			MethodName: "LookupReceivedAcsCommitments",
			Handler:    _InspectionService_LookupReceivedAcsCommitments_Handler,
		},
		{
			MethodName: "SetConfigForSlowCounterParticipants",
			Handler:    _InspectionService_SetConfigForSlowCounterParticipants_Handler,
		},
		{
			MethodName: "GetConfigForSlowCounterParticipants",
			Handler:    _InspectionService_GetConfigForSlowCounterParticipants_Handler,
		},
		{
			MethodName: "GetIntervalsBehindForCounterParticipants",
			Handler:    _InspectionService_GetIntervalsBehindForCounterParticipants_Handler,
		},
		{
			MethodName: "CountInFlight",
			Handler:    _InspectionService_CountInFlight_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "OpenCommitment",
			Handler:       _InspectionService_OpenCommitment_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "InspectCommitmentContracts",
			Handler:       _InspectionService_InspectCommitmentContracts_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "com/digitalasset/canton/admin/participant/v30/inspection_service.proto",
}
