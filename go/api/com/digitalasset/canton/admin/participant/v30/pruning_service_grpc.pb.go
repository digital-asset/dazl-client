// Copyright (c) 2017-2025 Digital Asset (Switzerland) GmbH and/or its affiliates. All rights reserved.
// SPDX-License-Identifier: Apache-2.0
// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.27.2
// source: com/digitalasset/canton/admin/participant/v30/pruning_service.proto

package v30

import (
	context "context"
	v30 "github.com/digital-asset/dazl-client/v8/go/api/com/digitalasset/canton/admin/pruning/v30"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	PruningService_Prune_FullMethodName                      = "/com.digitalasset.canton.admin.participant.v30.PruningService/Prune"
	PruningService_GetSafePruningOffset_FullMethodName       = "/com.digitalasset.canton.admin.participant.v30.PruningService/GetSafePruningOffset"
	PruningService_SetSchedule_FullMethodName                = "/com.digitalasset.canton.admin.participant.v30.PruningService/SetSchedule"
	PruningService_SetParticipantSchedule_FullMethodName     = "/com.digitalasset.canton.admin.participant.v30.PruningService/SetParticipantSchedule"
	PruningService_SetCron_FullMethodName                    = "/com.digitalasset.canton.admin.participant.v30.PruningService/SetCron"
	PruningService_SetMaxDuration_FullMethodName             = "/com.digitalasset.canton.admin.participant.v30.PruningService/SetMaxDuration"
	PruningService_SetRetention_FullMethodName               = "/com.digitalasset.canton.admin.participant.v30.PruningService/SetRetention"
	PruningService_ClearSchedule_FullMethodName              = "/com.digitalasset.canton.admin.participant.v30.PruningService/ClearSchedule"
	PruningService_GetSchedule_FullMethodName                = "/com.digitalasset.canton.admin.participant.v30.PruningService/GetSchedule"
	PruningService_GetParticipantSchedule_FullMethodName     = "/com.digitalasset.canton.admin.participant.v30.PruningService/GetParticipantSchedule"
	PruningService_SetNoWaitCommitmentsFrom_FullMethodName   = "/com.digitalasset.canton.admin.participant.v30.PruningService/SetNoWaitCommitmentsFrom"
	PruningService_ResetNoWaitCommitmentsFrom_FullMethodName = "/com.digitalasset.canton.admin.participant.v30.PruningService/ResetNoWaitCommitmentsFrom"
	PruningService_GetNoWaitCommitmentsFrom_FullMethodName   = "/com.digitalasset.canton.admin.participant.v30.PruningService/GetNoWaitCommitmentsFrom"
)

// PruningServiceClient is the client API for PruningService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type PruningServiceClient interface {
	Prune(ctx context.Context, in *PruneRequest, opts ...grpc.CallOption) (*PruneResponse, error)
	GetSafePruningOffset(ctx context.Context, in *GetSafePruningOffsetRequest, opts ...grpc.CallOption) (*GetSafePruningOffsetResponse, error)
	SetSchedule(ctx context.Context, in *v30.SetSchedule_Request, opts ...grpc.CallOption) (*v30.SetSchedule_Response, error)
	SetParticipantSchedule(ctx context.Context, in *v30.SetParticipantSchedule_Request, opts ...grpc.CallOption) (*v30.SetParticipantSchedule_Response, error)
	SetCron(ctx context.Context, in *v30.SetCron_Request, opts ...grpc.CallOption) (*v30.SetCron_Response, error)
	SetMaxDuration(ctx context.Context, in *v30.SetMaxDuration_Request, opts ...grpc.CallOption) (*v30.SetMaxDuration_Response, error)
	SetRetention(ctx context.Context, in *v30.SetRetention_Request, opts ...grpc.CallOption) (*v30.SetRetention_Response, error)
	ClearSchedule(ctx context.Context, in *v30.ClearSchedule_Request, opts ...grpc.CallOption) (*v30.ClearSchedule_Response, error)
	GetSchedule(ctx context.Context, in *v30.GetSchedule_Request, opts ...grpc.CallOption) (*v30.GetSchedule_Response, error)
	GetParticipantSchedule(ctx context.Context, in *v30.GetParticipantSchedule_Request, opts ...grpc.CallOption) (*v30.GetParticipantSchedule_Response, error)
	SetNoWaitCommitmentsFrom(ctx context.Context, in *v30.SetNoWaitCommitmentsFrom_Request, opts ...grpc.CallOption) (*v30.SetNoWaitCommitmentsFrom_Response, error)
	ResetNoWaitCommitmentsFrom(ctx context.Context, in *v30.ResetNoWaitCommitmentsFrom_Request, opts ...grpc.CallOption) (*v30.ResetNoWaitCommitmentsFrom_Response, error)
	GetNoWaitCommitmentsFrom(ctx context.Context, in *v30.GetNoWaitCommitmentsFrom_Request, opts ...grpc.CallOption) (*v30.GetNoWaitCommitmentsFrom_Response, error)
}

type pruningServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewPruningServiceClient(cc grpc.ClientConnInterface) PruningServiceClient {
	return &pruningServiceClient{cc}
}

func (c *pruningServiceClient) Prune(ctx context.Context, in *PruneRequest, opts ...grpc.CallOption) (*PruneResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(PruneResponse)
	err := c.cc.Invoke(ctx, PruningService_Prune_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pruningServiceClient) GetSafePruningOffset(ctx context.Context, in *GetSafePruningOffsetRequest, opts ...grpc.CallOption) (*GetSafePruningOffsetResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetSafePruningOffsetResponse)
	err := c.cc.Invoke(ctx, PruningService_GetSafePruningOffset_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pruningServiceClient) SetSchedule(ctx context.Context, in *v30.SetSchedule_Request, opts ...grpc.CallOption) (*v30.SetSchedule_Response, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(v30.SetSchedule_Response)
	err := c.cc.Invoke(ctx, PruningService_SetSchedule_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pruningServiceClient) SetParticipantSchedule(ctx context.Context, in *v30.SetParticipantSchedule_Request, opts ...grpc.CallOption) (*v30.SetParticipantSchedule_Response, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(v30.SetParticipantSchedule_Response)
	err := c.cc.Invoke(ctx, PruningService_SetParticipantSchedule_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pruningServiceClient) SetCron(ctx context.Context, in *v30.SetCron_Request, opts ...grpc.CallOption) (*v30.SetCron_Response, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(v30.SetCron_Response)
	err := c.cc.Invoke(ctx, PruningService_SetCron_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pruningServiceClient) SetMaxDuration(ctx context.Context, in *v30.SetMaxDuration_Request, opts ...grpc.CallOption) (*v30.SetMaxDuration_Response, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(v30.SetMaxDuration_Response)
	err := c.cc.Invoke(ctx, PruningService_SetMaxDuration_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pruningServiceClient) SetRetention(ctx context.Context, in *v30.SetRetention_Request, opts ...grpc.CallOption) (*v30.SetRetention_Response, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(v30.SetRetention_Response)
	err := c.cc.Invoke(ctx, PruningService_SetRetention_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pruningServiceClient) ClearSchedule(ctx context.Context, in *v30.ClearSchedule_Request, opts ...grpc.CallOption) (*v30.ClearSchedule_Response, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(v30.ClearSchedule_Response)
	err := c.cc.Invoke(ctx, PruningService_ClearSchedule_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pruningServiceClient) GetSchedule(ctx context.Context, in *v30.GetSchedule_Request, opts ...grpc.CallOption) (*v30.GetSchedule_Response, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(v30.GetSchedule_Response)
	err := c.cc.Invoke(ctx, PruningService_GetSchedule_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pruningServiceClient) GetParticipantSchedule(ctx context.Context, in *v30.GetParticipantSchedule_Request, opts ...grpc.CallOption) (*v30.GetParticipantSchedule_Response, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(v30.GetParticipantSchedule_Response)
	err := c.cc.Invoke(ctx, PruningService_GetParticipantSchedule_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pruningServiceClient) SetNoWaitCommitmentsFrom(ctx context.Context, in *v30.SetNoWaitCommitmentsFrom_Request, opts ...grpc.CallOption) (*v30.SetNoWaitCommitmentsFrom_Response, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(v30.SetNoWaitCommitmentsFrom_Response)
	err := c.cc.Invoke(ctx, PruningService_SetNoWaitCommitmentsFrom_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pruningServiceClient) ResetNoWaitCommitmentsFrom(ctx context.Context, in *v30.ResetNoWaitCommitmentsFrom_Request, opts ...grpc.CallOption) (*v30.ResetNoWaitCommitmentsFrom_Response, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(v30.ResetNoWaitCommitmentsFrom_Response)
	err := c.cc.Invoke(ctx, PruningService_ResetNoWaitCommitmentsFrom_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pruningServiceClient) GetNoWaitCommitmentsFrom(ctx context.Context, in *v30.GetNoWaitCommitmentsFrom_Request, opts ...grpc.CallOption) (*v30.GetNoWaitCommitmentsFrom_Response, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(v30.GetNoWaitCommitmentsFrom_Response)
	err := c.cc.Invoke(ctx, PruningService_GetNoWaitCommitmentsFrom_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PruningServiceServer is the server API for PruningService service.
// All implementations must embed UnimplementedPruningServiceServer
// for forward compatibility.
type PruningServiceServer interface {
	Prune(context.Context, *PruneRequest) (*PruneResponse, error)
	GetSafePruningOffset(context.Context, *GetSafePruningOffsetRequest) (*GetSafePruningOffsetResponse, error)
	SetSchedule(context.Context, *v30.SetSchedule_Request) (*v30.SetSchedule_Response, error)
	SetParticipantSchedule(context.Context, *v30.SetParticipantSchedule_Request) (*v30.SetParticipantSchedule_Response, error)
	SetCron(context.Context, *v30.SetCron_Request) (*v30.SetCron_Response, error)
	SetMaxDuration(context.Context, *v30.SetMaxDuration_Request) (*v30.SetMaxDuration_Response, error)
	SetRetention(context.Context, *v30.SetRetention_Request) (*v30.SetRetention_Response, error)
	ClearSchedule(context.Context, *v30.ClearSchedule_Request) (*v30.ClearSchedule_Response, error)
	GetSchedule(context.Context, *v30.GetSchedule_Request) (*v30.GetSchedule_Response, error)
	GetParticipantSchedule(context.Context, *v30.GetParticipantSchedule_Request) (*v30.GetParticipantSchedule_Response, error)
	SetNoWaitCommitmentsFrom(context.Context, *v30.SetNoWaitCommitmentsFrom_Request) (*v30.SetNoWaitCommitmentsFrom_Response, error)
	ResetNoWaitCommitmentsFrom(context.Context, *v30.ResetNoWaitCommitmentsFrom_Request) (*v30.ResetNoWaitCommitmentsFrom_Response, error)
	GetNoWaitCommitmentsFrom(context.Context, *v30.GetNoWaitCommitmentsFrom_Request) (*v30.GetNoWaitCommitmentsFrom_Response, error)
	mustEmbedUnimplementedPruningServiceServer()
}

// UnimplementedPruningServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedPruningServiceServer struct{}

func (UnimplementedPruningServiceServer) Prune(context.Context, *PruneRequest) (*PruneResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Prune not implemented")
}
func (UnimplementedPruningServiceServer) GetSafePruningOffset(context.Context, *GetSafePruningOffsetRequest) (*GetSafePruningOffsetResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSafePruningOffset not implemented")
}
func (UnimplementedPruningServiceServer) SetSchedule(context.Context, *v30.SetSchedule_Request) (*v30.SetSchedule_Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetSchedule not implemented")
}
func (UnimplementedPruningServiceServer) SetParticipantSchedule(context.Context, *v30.SetParticipantSchedule_Request) (*v30.SetParticipantSchedule_Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetParticipantSchedule not implemented")
}
func (UnimplementedPruningServiceServer) SetCron(context.Context, *v30.SetCron_Request) (*v30.SetCron_Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetCron not implemented")
}
func (UnimplementedPruningServiceServer) SetMaxDuration(context.Context, *v30.SetMaxDuration_Request) (*v30.SetMaxDuration_Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetMaxDuration not implemented")
}
func (UnimplementedPruningServiceServer) SetRetention(context.Context, *v30.SetRetention_Request) (*v30.SetRetention_Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetRetention not implemented")
}
func (UnimplementedPruningServiceServer) ClearSchedule(context.Context, *v30.ClearSchedule_Request) (*v30.ClearSchedule_Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ClearSchedule not implemented")
}
func (UnimplementedPruningServiceServer) GetSchedule(context.Context, *v30.GetSchedule_Request) (*v30.GetSchedule_Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSchedule not implemented")
}
func (UnimplementedPruningServiceServer) GetParticipantSchedule(context.Context, *v30.GetParticipantSchedule_Request) (*v30.GetParticipantSchedule_Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetParticipantSchedule not implemented")
}
func (UnimplementedPruningServiceServer) SetNoWaitCommitmentsFrom(context.Context, *v30.SetNoWaitCommitmentsFrom_Request) (*v30.SetNoWaitCommitmentsFrom_Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetNoWaitCommitmentsFrom not implemented")
}
func (UnimplementedPruningServiceServer) ResetNoWaitCommitmentsFrom(context.Context, *v30.ResetNoWaitCommitmentsFrom_Request) (*v30.ResetNoWaitCommitmentsFrom_Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ResetNoWaitCommitmentsFrom not implemented")
}
func (UnimplementedPruningServiceServer) GetNoWaitCommitmentsFrom(context.Context, *v30.GetNoWaitCommitmentsFrom_Request) (*v30.GetNoWaitCommitmentsFrom_Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetNoWaitCommitmentsFrom not implemented")
}
func (UnimplementedPruningServiceServer) mustEmbedUnimplementedPruningServiceServer() {}
func (UnimplementedPruningServiceServer) testEmbeddedByValue()                        {}

// UnsafePruningServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to PruningServiceServer will
// result in compilation errors.
type UnsafePruningServiceServer interface {
	mustEmbedUnimplementedPruningServiceServer()
}

func RegisterPruningServiceServer(s grpc.ServiceRegistrar, srv PruningServiceServer) {
	// If the following call pancis, it indicates UnimplementedPruningServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&PruningService_ServiceDesc, srv)
}

func _PruningService_Prune_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PruneRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PruningServiceServer).Prune(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PruningService_Prune_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PruningServiceServer).Prune(ctx, req.(*PruneRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PruningService_GetSafePruningOffset_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetSafePruningOffsetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PruningServiceServer).GetSafePruningOffset(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PruningService_GetSafePruningOffset_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PruningServiceServer).GetSafePruningOffset(ctx, req.(*GetSafePruningOffsetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PruningService_SetSchedule_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(v30.SetSchedule_Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PruningServiceServer).SetSchedule(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PruningService_SetSchedule_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PruningServiceServer).SetSchedule(ctx, req.(*v30.SetSchedule_Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _PruningService_SetParticipantSchedule_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(v30.SetParticipantSchedule_Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PruningServiceServer).SetParticipantSchedule(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PruningService_SetParticipantSchedule_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PruningServiceServer).SetParticipantSchedule(ctx, req.(*v30.SetParticipantSchedule_Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _PruningService_SetCron_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(v30.SetCron_Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PruningServiceServer).SetCron(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PruningService_SetCron_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PruningServiceServer).SetCron(ctx, req.(*v30.SetCron_Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _PruningService_SetMaxDuration_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(v30.SetMaxDuration_Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PruningServiceServer).SetMaxDuration(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PruningService_SetMaxDuration_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PruningServiceServer).SetMaxDuration(ctx, req.(*v30.SetMaxDuration_Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _PruningService_SetRetention_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(v30.SetRetention_Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PruningServiceServer).SetRetention(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PruningService_SetRetention_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PruningServiceServer).SetRetention(ctx, req.(*v30.SetRetention_Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _PruningService_ClearSchedule_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(v30.ClearSchedule_Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PruningServiceServer).ClearSchedule(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PruningService_ClearSchedule_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PruningServiceServer).ClearSchedule(ctx, req.(*v30.ClearSchedule_Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _PruningService_GetSchedule_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(v30.GetSchedule_Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PruningServiceServer).GetSchedule(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PruningService_GetSchedule_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PruningServiceServer).GetSchedule(ctx, req.(*v30.GetSchedule_Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _PruningService_GetParticipantSchedule_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(v30.GetParticipantSchedule_Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PruningServiceServer).GetParticipantSchedule(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PruningService_GetParticipantSchedule_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PruningServiceServer).GetParticipantSchedule(ctx, req.(*v30.GetParticipantSchedule_Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _PruningService_SetNoWaitCommitmentsFrom_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(v30.SetNoWaitCommitmentsFrom_Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PruningServiceServer).SetNoWaitCommitmentsFrom(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PruningService_SetNoWaitCommitmentsFrom_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PruningServiceServer).SetNoWaitCommitmentsFrom(ctx, req.(*v30.SetNoWaitCommitmentsFrom_Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _PruningService_ResetNoWaitCommitmentsFrom_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(v30.ResetNoWaitCommitmentsFrom_Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PruningServiceServer).ResetNoWaitCommitmentsFrom(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PruningService_ResetNoWaitCommitmentsFrom_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PruningServiceServer).ResetNoWaitCommitmentsFrom(ctx, req.(*v30.ResetNoWaitCommitmentsFrom_Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _PruningService_GetNoWaitCommitmentsFrom_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(v30.GetNoWaitCommitmentsFrom_Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PruningServiceServer).GetNoWaitCommitmentsFrom(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PruningService_GetNoWaitCommitmentsFrom_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PruningServiceServer).GetNoWaitCommitmentsFrom(ctx, req.(*v30.GetNoWaitCommitmentsFrom_Request))
	}
	return interceptor(ctx, in, info, handler)
}

// PruningService_ServiceDesc is the grpc.ServiceDesc for PruningService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var PruningService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "com.digitalasset.canton.admin.participant.v30.PruningService",
	HandlerType: (*PruningServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Prune",
			Handler:    _PruningService_Prune_Handler,
		},
		{
			MethodName: "GetSafePruningOffset",
			Handler:    _PruningService_GetSafePruningOffset_Handler,
		},
		{
			MethodName: "SetSchedule",
			Handler:    _PruningService_SetSchedule_Handler,
		},
		{
			MethodName: "SetParticipantSchedule",
			Handler:    _PruningService_SetParticipantSchedule_Handler,
		},
		{
			MethodName: "SetCron",
			Handler:    _PruningService_SetCron_Handler,
		},
		{
			MethodName: "SetMaxDuration",
			Handler:    _PruningService_SetMaxDuration_Handler,
		},
		{
			MethodName: "SetRetention",
			Handler:    _PruningService_SetRetention_Handler,
		},
		{
			MethodName: "ClearSchedule",
			Handler:    _PruningService_ClearSchedule_Handler,
		},
		{
			MethodName: "GetSchedule",
			Handler:    _PruningService_GetSchedule_Handler,
		},
		{
			MethodName: "GetParticipantSchedule",
			Handler:    _PruningService_GetParticipantSchedule_Handler,
		},
		{
			MethodName: "SetNoWaitCommitmentsFrom",
			Handler:    _PruningService_SetNoWaitCommitmentsFrom_Handler,
		},
		{
			MethodName: "ResetNoWaitCommitmentsFrom",
			Handler:    _PruningService_ResetNoWaitCommitmentsFrom_Handler,
		},
		{
			MethodName: "GetNoWaitCommitmentsFrom",
			Handler:    _PruningService_GetNoWaitCommitmentsFrom_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "com/digitalasset/canton/admin/participant/v30/pruning_service.proto",
}
