// Copyright (c) 2017-2025 Digital Asset (Switzerland) GmbH and/or its affiliates. All rights reserved.
// SPDX-License-Identifier: Apache-2.0
// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.6
// 	protoc        v6.30.0
// source: com/digitalasset/canton/sequencer/api/v30/sequencer_channel_service.proto

package v30

import (
	v301 "github.com/digital-asset/dazl-client/v8/go/api/com/digitalasset/canton/crypto/v30"
	v30 "github.com/digital-asset/dazl-client/v8/go/api/com/digitalasset/canton/v30"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type ConnectToSequencerChannelRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Types that are valid to be assigned to Request:
	//
	//	*ConnectToSequencerChannelRequest_Metadata
	//	*ConnectToSequencerChannelRequest_SessionKey
	//	*ConnectToSequencerChannelRequest_SessionKeyAcknowledgement
	//	*ConnectToSequencerChannelRequest_Payload
	Request       isConnectToSequencerChannelRequest_Request `protobuf_oneof:"request"`
	TraceContext  *v30.TraceContext                          `protobuf:"bytes,5,opt,name=trace_context,json=traceContext,proto3" json:"trace_context,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ConnectToSequencerChannelRequest) Reset() {
	*x = ConnectToSequencerChannelRequest{}
	mi := &file_com_digitalasset_canton_sequencer_api_v30_sequencer_channel_service_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ConnectToSequencerChannelRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConnectToSequencerChannelRequest) ProtoMessage() {}

func (x *ConnectToSequencerChannelRequest) ProtoReflect() protoreflect.Message {
	mi := &file_com_digitalasset_canton_sequencer_api_v30_sequencer_channel_service_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConnectToSequencerChannelRequest.ProtoReflect.Descriptor instead.
func (*ConnectToSequencerChannelRequest) Descriptor() ([]byte, []int) {
	return file_com_digitalasset_canton_sequencer_api_v30_sequencer_channel_service_proto_rawDescGZIP(), []int{0}
}

func (x *ConnectToSequencerChannelRequest) GetRequest() isConnectToSequencerChannelRequest_Request {
	if x != nil {
		return x.Request
	}
	return nil
}

func (x *ConnectToSequencerChannelRequest) GetMetadata() *SequencerChannelMetadata {
	if x != nil {
		if x, ok := x.Request.(*ConnectToSequencerChannelRequest_Metadata); ok {
			return x.Metadata
		}
	}
	return nil
}

func (x *ConnectToSequencerChannelRequest) GetSessionKey() *SequencerChannelSessionKey {
	if x != nil {
		if x, ok := x.Request.(*ConnectToSequencerChannelRequest_SessionKey); ok {
			return x.SessionKey
		}
	}
	return nil
}

func (x *ConnectToSequencerChannelRequest) GetSessionKeyAcknowledgement() *SequencerChannelSessionKeyAck {
	if x != nil {
		if x, ok := x.Request.(*ConnectToSequencerChannelRequest_SessionKeyAcknowledgement); ok {
			return x.SessionKeyAcknowledgement
		}
	}
	return nil
}

func (x *ConnectToSequencerChannelRequest) GetPayload() []byte {
	if x != nil {
		if x, ok := x.Request.(*ConnectToSequencerChannelRequest_Payload); ok {
			return x.Payload
		}
	}
	return nil
}

func (x *ConnectToSequencerChannelRequest) GetTraceContext() *v30.TraceContext {
	if x != nil {
		return x.TraceContext
	}
	return nil
}

type isConnectToSequencerChannelRequest_Request interface {
	isConnectToSequencerChannelRequest_Request()
}

type ConnectToSequencerChannelRequest_Metadata struct {
	Metadata *SequencerChannelMetadata `protobuf:"bytes,1,opt,name=metadata,proto3,oneof"`
}

type ConnectToSequencerChannelRequest_SessionKey struct {
	SessionKey *SequencerChannelSessionKey `protobuf:"bytes,2,opt,name=session_key,json=sessionKey,proto3,oneof"`
}

type ConnectToSequencerChannelRequest_SessionKeyAcknowledgement struct {
	SessionKeyAcknowledgement *SequencerChannelSessionKeyAck `protobuf:"bytes,3,opt,name=session_key_acknowledgement,json=sessionKeyAcknowledgement,proto3,oneof"`
}

type ConnectToSequencerChannelRequest_Payload struct {
	Payload []byte `protobuf:"bytes,4,opt,name=payload,proto3,oneof"`
}

func (*ConnectToSequencerChannelRequest_Metadata) isConnectToSequencerChannelRequest_Request() {}

func (*ConnectToSequencerChannelRequest_SessionKey) isConnectToSequencerChannelRequest_Request() {}

func (*ConnectToSequencerChannelRequest_SessionKeyAcknowledgement) isConnectToSequencerChannelRequest_Request() {
}

func (*ConnectToSequencerChannelRequest_Payload) isConnectToSequencerChannelRequest_Request() {}

type ConnectToSequencerChannelResponse struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Types that are valid to be assigned to Response:
	//
	//	*ConnectToSequencerChannelResponse_Connected
	//	*ConnectToSequencerChannelResponse_SessionKey
	//	*ConnectToSequencerChannelResponse_SessionKeyAcknowledgement
	//	*ConnectToSequencerChannelResponse_Payload
	Response      isConnectToSequencerChannelResponse_Response `protobuf_oneof:"response"`
	TraceContext  *v30.TraceContext                            `protobuf:"bytes,5,opt,name=trace_context,json=traceContext,proto3" json:"trace_context,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ConnectToSequencerChannelResponse) Reset() {
	*x = ConnectToSequencerChannelResponse{}
	mi := &file_com_digitalasset_canton_sequencer_api_v30_sequencer_channel_service_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ConnectToSequencerChannelResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConnectToSequencerChannelResponse) ProtoMessage() {}

func (x *ConnectToSequencerChannelResponse) ProtoReflect() protoreflect.Message {
	mi := &file_com_digitalasset_canton_sequencer_api_v30_sequencer_channel_service_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConnectToSequencerChannelResponse.ProtoReflect.Descriptor instead.
func (*ConnectToSequencerChannelResponse) Descriptor() ([]byte, []int) {
	return file_com_digitalasset_canton_sequencer_api_v30_sequencer_channel_service_proto_rawDescGZIP(), []int{1}
}

func (x *ConnectToSequencerChannelResponse) GetResponse() isConnectToSequencerChannelResponse_Response {
	if x != nil {
		return x.Response
	}
	return nil
}

func (x *ConnectToSequencerChannelResponse) GetConnected() *SequencerChannelConnectedToAllEndpoints {
	if x != nil {
		if x, ok := x.Response.(*ConnectToSequencerChannelResponse_Connected); ok {
			return x.Connected
		}
	}
	return nil
}

func (x *ConnectToSequencerChannelResponse) GetSessionKey() *SequencerChannelSessionKey {
	if x != nil {
		if x, ok := x.Response.(*ConnectToSequencerChannelResponse_SessionKey); ok {
			return x.SessionKey
		}
	}
	return nil
}

func (x *ConnectToSequencerChannelResponse) GetSessionKeyAcknowledgement() *SequencerChannelSessionKeyAck {
	if x != nil {
		if x, ok := x.Response.(*ConnectToSequencerChannelResponse_SessionKeyAcknowledgement); ok {
			return x.SessionKeyAcknowledgement
		}
	}
	return nil
}

func (x *ConnectToSequencerChannelResponse) GetPayload() []byte {
	if x != nil {
		if x, ok := x.Response.(*ConnectToSequencerChannelResponse_Payload); ok {
			return x.Payload
		}
	}
	return nil
}

func (x *ConnectToSequencerChannelResponse) GetTraceContext() *v30.TraceContext {
	if x != nil {
		return x.TraceContext
	}
	return nil
}

type isConnectToSequencerChannelResponse_Response interface {
	isConnectToSequencerChannelResponse_Response()
}

type ConnectToSequencerChannelResponse_Connected struct {
	Connected *SequencerChannelConnectedToAllEndpoints `protobuf:"bytes,1,opt,name=connected,proto3,oneof"`
}

type ConnectToSequencerChannelResponse_SessionKey struct {
	SessionKey *SequencerChannelSessionKey `protobuf:"bytes,2,opt,name=session_key,json=sessionKey,proto3,oneof"`
}

type ConnectToSequencerChannelResponse_SessionKeyAcknowledgement struct {
	SessionKeyAcknowledgement *SequencerChannelSessionKeyAck `protobuf:"bytes,3,opt,name=session_key_acknowledgement,json=sessionKeyAcknowledgement,proto3,oneof"`
}

type ConnectToSequencerChannelResponse_Payload struct {
	Payload []byte `protobuf:"bytes,4,opt,name=payload,proto3,oneof"`
}

func (*ConnectToSequencerChannelResponse_Connected) isConnectToSequencerChannelResponse_Response() {}

func (*ConnectToSequencerChannelResponse_SessionKey) isConnectToSequencerChannelResponse_Response() {}

func (*ConnectToSequencerChannelResponse_SessionKeyAcknowledgement) isConnectToSequencerChannelResponse_Response() {
}

func (*ConnectToSequencerChannelResponse_Payload) isConnectToSequencerChannelResponse_Response() {}

type PingRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *PingRequest) Reset() {
	*x = PingRequest{}
	mi := &file_com_digitalasset_canton_sequencer_api_v30_sequencer_channel_service_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PingRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PingRequest) ProtoMessage() {}

func (x *PingRequest) ProtoReflect() protoreflect.Message {
	mi := &file_com_digitalasset_canton_sequencer_api_v30_sequencer_channel_service_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PingRequest.ProtoReflect.Descriptor instead.
func (*PingRequest) Descriptor() ([]byte, []int) {
	return file_com_digitalasset_canton_sequencer_api_v30_sequencer_channel_service_proto_rawDescGZIP(), []int{2}
}

type PingResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *PingResponse) Reset() {
	*x = PingResponse{}
	mi := &file_com_digitalasset_canton_sequencer_api_v30_sequencer_channel_service_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PingResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PingResponse) ProtoMessage() {}

func (x *PingResponse) ProtoReflect() protoreflect.Message {
	mi := &file_com_digitalasset_canton_sequencer_api_v30_sequencer_channel_service_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PingResponse.ProtoReflect.Descriptor instead.
func (*PingResponse) Descriptor() ([]byte, []int) {
	return file_com_digitalasset_canton_sequencer_api_v30_sequencer_channel_service_proto_rawDescGZIP(), []int{3}
}

type SequencerChannelMetadata struct {
	state            protoimpl.MessageState `protogen:"open.v1"`
	ChannelId        string                 `protobuf:"bytes,1,opt,name=channel_id,json=channelId,proto3" json:"channel_id,omitempty"`
	InitiatingMember string                 `protobuf:"bytes,2,opt,name=initiating_member,json=initiatingMember,proto3" json:"initiating_member,omitempty"`
	ReceivingMember  string                 `protobuf:"bytes,3,opt,name=receiving_member,json=receivingMember,proto3" json:"receiving_member,omitempty"`
	unknownFields    protoimpl.UnknownFields
	sizeCache        protoimpl.SizeCache
}

func (x *SequencerChannelMetadata) Reset() {
	*x = SequencerChannelMetadata{}
	mi := &file_com_digitalasset_canton_sequencer_api_v30_sequencer_channel_service_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SequencerChannelMetadata) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SequencerChannelMetadata) ProtoMessage() {}

func (x *SequencerChannelMetadata) ProtoReflect() protoreflect.Message {
	mi := &file_com_digitalasset_canton_sequencer_api_v30_sequencer_channel_service_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SequencerChannelMetadata.ProtoReflect.Descriptor instead.
func (*SequencerChannelMetadata) Descriptor() ([]byte, []int) {
	return file_com_digitalasset_canton_sequencer_api_v30_sequencer_channel_service_proto_rawDescGZIP(), []int{4}
}

func (x *SequencerChannelMetadata) GetChannelId() string {
	if x != nil {
		return x.ChannelId
	}
	return ""
}

func (x *SequencerChannelMetadata) GetInitiatingMember() string {
	if x != nil {
		return x.InitiatingMember
	}
	return ""
}

func (x *SequencerChannelMetadata) GetReceivingMember() string {
	if x != nil {
		return x.ReceivingMember
	}
	return ""
}

type SequencerChannelConnectedToAllEndpoints struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SequencerChannelConnectedToAllEndpoints) Reset() {
	*x = SequencerChannelConnectedToAllEndpoints{}
	mi := &file_com_digitalasset_canton_sequencer_api_v30_sequencer_channel_service_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SequencerChannelConnectedToAllEndpoints) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SequencerChannelConnectedToAllEndpoints) ProtoMessage() {}

func (x *SequencerChannelConnectedToAllEndpoints) ProtoReflect() protoreflect.Message {
	mi := &file_com_digitalasset_canton_sequencer_api_v30_sequencer_channel_service_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SequencerChannelConnectedToAllEndpoints.ProtoReflect.Descriptor instead.
func (*SequencerChannelConnectedToAllEndpoints) Descriptor() ([]byte, []int) {
	return file_com_digitalasset_canton_sequencer_api_v30_sequencer_channel_service_proto_rawDescGZIP(), []int{5}
}

type SequencerChannelSessionKey struct {
	state               protoimpl.MessageState    `protogen:"open.v1"`
	EncryptedSessionKey *v301.AsymmetricEncrypted `protobuf:"bytes,1,opt,name=encrypted_session_key,json=encryptedSessionKey,proto3" json:"encrypted_session_key,omitempty"`
	unknownFields       protoimpl.UnknownFields
	sizeCache           protoimpl.SizeCache
}

func (x *SequencerChannelSessionKey) Reset() {
	*x = SequencerChannelSessionKey{}
	mi := &file_com_digitalasset_canton_sequencer_api_v30_sequencer_channel_service_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SequencerChannelSessionKey) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SequencerChannelSessionKey) ProtoMessage() {}

func (x *SequencerChannelSessionKey) ProtoReflect() protoreflect.Message {
	mi := &file_com_digitalasset_canton_sequencer_api_v30_sequencer_channel_service_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SequencerChannelSessionKey.ProtoReflect.Descriptor instead.
func (*SequencerChannelSessionKey) Descriptor() ([]byte, []int) {
	return file_com_digitalasset_canton_sequencer_api_v30_sequencer_channel_service_proto_rawDescGZIP(), []int{6}
}

func (x *SequencerChannelSessionKey) GetEncryptedSessionKey() *v301.AsymmetricEncrypted {
	if x != nil {
		return x.EncryptedSessionKey
	}
	return nil
}

type SequencerChannelSessionKeyAck struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SequencerChannelSessionKeyAck) Reset() {
	*x = SequencerChannelSessionKeyAck{}
	mi := &file_com_digitalasset_canton_sequencer_api_v30_sequencer_channel_service_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SequencerChannelSessionKeyAck) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SequencerChannelSessionKeyAck) ProtoMessage() {}

func (x *SequencerChannelSessionKeyAck) ProtoReflect() protoreflect.Message {
	mi := &file_com_digitalasset_canton_sequencer_api_v30_sequencer_channel_service_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SequencerChannelSessionKeyAck.ProtoReflect.Descriptor instead.
func (*SequencerChannelSessionKeyAck) Descriptor() ([]byte, []int) {
	return file_com_digitalasset_canton_sequencer_api_v30_sequencer_channel_service_proto_rawDescGZIP(), []int{7}
}

var File_com_digitalasset_canton_sequencer_api_v30_sequencer_channel_service_proto protoreflect.FileDescriptor

const file_com_digitalasset_canton_sequencer_api_v30_sequencer_channel_service_proto_rawDesc = "" +
	"\n" +
	"Icom/digitalasset/canton/sequencer/api/v30/sequencer_channel_service.proto\x12)com.digitalasset.canton.sequencer.api.v30\x1a/com/digitalasset/canton/crypto/v30/crypto.proto\x1a/com/digitalasset/canton/v30/trace_context.proto\"\xf3\x03\n" +
	" ConnectToSequencerChannelRequest\x12a\n" +
	"\bmetadata\x18\x01 \x01(\v2C.com.digitalasset.canton.sequencer.api.v30.SequencerChannelMetadataH\x00R\bmetadata\x12h\n" +
	"\vsession_key\x18\x02 \x01(\v2E.com.digitalasset.canton.sequencer.api.v30.SequencerChannelSessionKeyH\x00R\n" +
	"sessionKey\x12\x8a\x01\n" +
	"\x1bsession_key_acknowledgement\x18\x03 \x01(\v2H.com.digitalasset.canton.sequencer.api.v30.SequencerChannelSessionKeyAckH\x00R\x19sessionKeyAcknowledgement\x12\x1a\n" +
	"\apayload\x18\x04 \x01(\fH\x00R\apayload\x12N\n" +
	"\rtrace_context\x18\x05 \x01(\v2).com.digitalasset.canton.v30.TraceContextR\ftraceContextB\t\n" +
	"\arequest\"\x86\x04\n" +
	"!ConnectToSequencerChannelResponse\x12r\n" +
	"\tconnected\x18\x01 \x01(\v2R.com.digitalasset.canton.sequencer.api.v30.SequencerChannelConnectedToAllEndpointsH\x00R\tconnected\x12h\n" +
	"\vsession_key\x18\x02 \x01(\v2E.com.digitalasset.canton.sequencer.api.v30.SequencerChannelSessionKeyH\x00R\n" +
	"sessionKey\x12\x8a\x01\n" +
	"\x1bsession_key_acknowledgement\x18\x03 \x01(\v2H.com.digitalasset.canton.sequencer.api.v30.SequencerChannelSessionKeyAckH\x00R\x19sessionKeyAcknowledgement\x12\x1a\n" +
	"\apayload\x18\x04 \x01(\fH\x00R\apayload\x12N\n" +
	"\rtrace_context\x18\x05 \x01(\v2).com.digitalasset.canton.v30.TraceContextR\ftraceContextB\n" +
	"\n" +
	"\bresponse\"\r\n" +
	"\vPingRequest\"\x0e\n" +
	"\fPingResponse\"\x91\x01\n" +
	"\x18SequencerChannelMetadata\x12\x1d\n" +
	"\n" +
	"channel_id\x18\x01 \x01(\tR\tchannelId\x12+\n" +
	"\x11initiating_member\x18\x02 \x01(\tR\x10initiatingMember\x12)\n" +
	"\x10receiving_member\x18\x03 \x01(\tR\x0freceivingMember\")\n" +
	"'SequencerChannelConnectedToAllEndpoints\"\x89\x01\n" +
	"\x1aSequencerChannelSessionKey\x12k\n" +
	"\x15encrypted_session_key\x18\x01 \x01(\v27.com.digitalasset.canton.crypto.v30.AsymmetricEncryptedR\x13encryptedSessionKey\"\x1f\n" +
	"\x1dSequencerChannelSessionKeyAck2\xcf\x02\n" +
	"\x17SequencerChannelService\x12\xba\x01\n" +
	"\x19ConnectToSequencerChannel\x12K.com.digitalasset.canton.sequencer.api.v30.ConnectToSequencerChannelRequest\x1aL.com.digitalasset.canton.sequencer.api.v30.ConnectToSequencerChannelResponse(\x010\x01\x12w\n" +
	"\x04Ping\x126.com.digitalasset.canton.sequencer.api.v30.PingRequest\x1a7.com.digitalasset.canton.sequencer.api.v30.PingResponseBZZXgithub.com/digital-asset/dazl-client/v8/go/api/com/digitalasset/canton/sequencer/api/v30b\x06proto3"

var (
	file_com_digitalasset_canton_sequencer_api_v30_sequencer_channel_service_proto_rawDescOnce sync.Once
	file_com_digitalasset_canton_sequencer_api_v30_sequencer_channel_service_proto_rawDescData []byte
)

func file_com_digitalasset_canton_sequencer_api_v30_sequencer_channel_service_proto_rawDescGZIP() []byte {
	file_com_digitalasset_canton_sequencer_api_v30_sequencer_channel_service_proto_rawDescOnce.Do(func() {
		file_com_digitalasset_canton_sequencer_api_v30_sequencer_channel_service_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_com_digitalasset_canton_sequencer_api_v30_sequencer_channel_service_proto_rawDesc), len(file_com_digitalasset_canton_sequencer_api_v30_sequencer_channel_service_proto_rawDesc)))
	})
	return file_com_digitalasset_canton_sequencer_api_v30_sequencer_channel_service_proto_rawDescData
}

var file_com_digitalasset_canton_sequencer_api_v30_sequencer_channel_service_proto_msgTypes = make([]protoimpl.MessageInfo, 8)
var file_com_digitalasset_canton_sequencer_api_v30_sequencer_channel_service_proto_goTypes = []any{
	(*ConnectToSequencerChannelRequest)(nil),        // 0: com.digitalasset.canton.sequencer.api.v30.ConnectToSequencerChannelRequest
	(*ConnectToSequencerChannelResponse)(nil),       // 1: com.digitalasset.canton.sequencer.api.v30.ConnectToSequencerChannelResponse
	(*PingRequest)(nil),                             // 2: com.digitalasset.canton.sequencer.api.v30.PingRequest
	(*PingResponse)(nil),                            // 3: com.digitalasset.canton.sequencer.api.v30.PingResponse
	(*SequencerChannelMetadata)(nil),                // 4: com.digitalasset.canton.sequencer.api.v30.SequencerChannelMetadata
	(*SequencerChannelConnectedToAllEndpoints)(nil), // 5: com.digitalasset.canton.sequencer.api.v30.SequencerChannelConnectedToAllEndpoints
	(*SequencerChannelSessionKey)(nil),              // 6: com.digitalasset.canton.sequencer.api.v30.SequencerChannelSessionKey
	(*SequencerChannelSessionKeyAck)(nil),           // 7: com.digitalasset.canton.sequencer.api.v30.SequencerChannelSessionKeyAck
	(*v30.TraceContext)(nil),                        // 8: com.digitalasset.canton.v30.TraceContext
	(*v301.AsymmetricEncrypted)(nil),                // 9: com.digitalasset.canton.crypto.v30.AsymmetricEncrypted
}
var file_com_digitalasset_canton_sequencer_api_v30_sequencer_channel_service_proto_depIdxs = []int32{
	4,  // 0: com.digitalasset.canton.sequencer.api.v30.ConnectToSequencerChannelRequest.metadata:type_name -> com.digitalasset.canton.sequencer.api.v30.SequencerChannelMetadata
	6,  // 1: com.digitalasset.canton.sequencer.api.v30.ConnectToSequencerChannelRequest.session_key:type_name -> com.digitalasset.canton.sequencer.api.v30.SequencerChannelSessionKey
	7,  // 2: com.digitalasset.canton.sequencer.api.v30.ConnectToSequencerChannelRequest.session_key_acknowledgement:type_name -> com.digitalasset.canton.sequencer.api.v30.SequencerChannelSessionKeyAck
	8,  // 3: com.digitalasset.canton.sequencer.api.v30.ConnectToSequencerChannelRequest.trace_context:type_name -> com.digitalasset.canton.v30.TraceContext
	5,  // 4: com.digitalasset.canton.sequencer.api.v30.ConnectToSequencerChannelResponse.connected:type_name -> com.digitalasset.canton.sequencer.api.v30.SequencerChannelConnectedToAllEndpoints
	6,  // 5: com.digitalasset.canton.sequencer.api.v30.ConnectToSequencerChannelResponse.session_key:type_name -> com.digitalasset.canton.sequencer.api.v30.SequencerChannelSessionKey
	7,  // 6: com.digitalasset.canton.sequencer.api.v30.ConnectToSequencerChannelResponse.session_key_acknowledgement:type_name -> com.digitalasset.canton.sequencer.api.v30.SequencerChannelSessionKeyAck
	8,  // 7: com.digitalasset.canton.sequencer.api.v30.ConnectToSequencerChannelResponse.trace_context:type_name -> com.digitalasset.canton.v30.TraceContext
	9,  // 8: com.digitalasset.canton.sequencer.api.v30.SequencerChannelSessionKey.encrypted_session_key:type_name -> com.digitalasset.canton.crypto.v30.AsymmetricEncrypted
	0,  // 9: com.digitalasset.canton.sequencer.api.v30.SequencerChannelService.ConnectToSequencerChannel:input_type -> com.digitalasset.canton.sequencer.api.v30.ConnectToSequencerChannelRequest
	2,  // 10: com.digitalasset.canton.sequencer.api.v30.SequencerChannelService.Ping:input_type -> com.digitalasset.canton.sequencer.api.v30.PingRequest
	1,  // 11: com.digitalasset.canton.sequencer.api.v30.SequencerChannelService.ConnectToSequencerChannel:output_type -> com.digitalasset.canton.sequencer.api.v30.ConnectToSequencerChannelResponse
	3,  // 12: com.digitalasset.canton.sequencer.api.v30.SequencerChannelService.Ping:output_type -> com.digitalasset.canton.sequencer.api.v30.PingResponse
	11, // [11:13] is the sub-list for method output_type
	9,  // [9:11] is the sub-list for method input_type
	9,  // [9:9] is the sub-list for extension type_name
	9,  // [9:9] is the sub-list for extension extendee
	0,  // [0:9] is the sub-list for field type_name
}

func init() { file_com_digitalasset_canton_sequencer_api_v30_sequencer_channel_service_proto_init() }
func file_com_digitalasset_canton_sequencer_api_v30_sequencer_channel_service_proto_init() {
	if File_com_digitalasset_canton_sequencer_api_v30_sequencer_channel_service_proto != nil {
		return
	}
	file_com_digitalasset_canton_sequencer_api_v30_sequencer_channel_service_proto_msgTypes[0].OneofWrappers = []any{
		(*ConnectToSequencerChannelRequest_Metadata)(nil),
		(*ConnectToSequencerChannelRequest_SessionKey)(nil),
		(*ConnectToSequencerChannelRequest_SessionKeyAcknowledgement)(nil),
		(*ConnectToSequencerChannelRequest_Payload)(nil),
	}
	file_com_digitalasset_canton_sequencer_api_v30_sequencer_channel_service_proto_msgTypes[1].OneofWrappers = []any{
		(*ConnectToSequencerChannelResponse_Connected)(nil),
		(*ConnectToSequencerChannelResponse_SessionKey)(nil),
		(*ConnectToSequencerChannelResponse_SessionKeyAcknowledgement)(nil),
		(*ConnectToSequencerChannelResponse_Payload)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_com_digitalasset_canton_sequencer_api_v30_sequencer_channel_service_proto_rawDesc), len(file_com_digitalasset_canton_sequencer_api_v30_sequencer_channel_service_proto_rawDesc)),
			NumEnums:      0,
			NumMessages:   8,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_com_digitalasset_canton_sequencer_api_v30_sequencer_channel_service_proto_goTypes,
		DependencyIndexes: file_com_digitalasset_canton_sequencer_api_v30_sequencer_channel_service_proto_depIdxs,
		MessageInfos:      file_com_digitalasset_canton_sequencer_api_v30_sequencer_channel_service_proto_msgTypes,
	}.Build()
	File_com_digitalasset_canton_sequencer_api_v30_sequencer_channel_service_proto = out.File
	file_com_digitalasset_canton_sequencer_api_v30_sequencer_channel_service_proto_goTypes = nil
	file_com_digitalasset_canton_sequencer_api_v30_sequencer_channel_service_proto_depIdxs = nil
}
