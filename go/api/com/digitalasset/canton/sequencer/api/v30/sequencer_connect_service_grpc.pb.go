// Copyright (c) 2017-2025 Digital Asset (Switzerland) GmbH and/or its affiliates. All rights reserved.
// SPDX-License-Identifier: Apache-2.0
// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v6.30.0
// source: com/digitalasset/canton/sequencer/api/v30/sequencer_connect_service.proto

package v30

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	SequencerConnectService_Handshake_FullMethodName                              = "/com.digitalasset.canton.sequencer.api.v30.SequencerConnectService/Handshake"
	SequencerConnectService_GetSynchronizerId_FullMethodName                      = "/com.digitalasset.canton.sequencer.api.v30.SequencerConnectService/GetSynchronizerId"
	SequencerConnectService_GetSynchronizerParameters_FullMethodName              = "/com.digitalasset.canton.sequencer.api.v30.SequencerConnectService/GetSynchronizerParameters"
	SequencerConnectService_VerifyActive_FullMethodName                           = "/com.digitalasset.canton.sequencer.api.v30.SequencerConnectService/VerifyActive"
	SequencerConnectService_RegisterOnboardingTopologyTransactions_FullMethodName = "/com.digitalasset.canton.sequencer.api.v30.SequencerConnectService/RegisterOnboardingTopologyTransactions"
)

// SequencerConnectServiceClient is the client API for SequencerConnectService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type SequencerConnectServiceClient interface {
	Handshake(ctx context.Context, in *SequencerConnect_HandshakeRequest, opts ...grpc.CallOption) (*SequencerConnect_HandshakeResponse, error)
	GetSynchronizerId(ctx context.Context, in *SequencerConnect_GetSynchronizerIdRequest, opts ...grpc.CallOption) (*SequencerConnect_GetSynchronizerIdResponse, error)
	GetSynchronizerParameters(ctx context.Context, in *SequencerConnect_GetSynchronizerParametersRequest, opts ...grpc.CallOption) (*SequencerConnect_GetSynchronizerParametersResponse, error)
	VerifyActive(ctx context.Context, in *SequencerConnect_VerifyActiveRequest, opts ...grpc.CallOption) (*SequencerConnect_VerifyActiveResponse, error)
	RegisterOnboardingTopologyTransactions(ctx context.Context, in *SequencerConnect_RegisterOnboardingTopologyTransactionsRequest, opts ...grpc.CallOption) (*SequencerConnect_RegisterOnboardingTopologyTransactionsResponse, error)
}

type sequencerConnectServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewSequencerConnectServiceClient(cc grpc.ClientConnInterface) SequencerConnectServiceClient {
	return &sequencerConnectServiceClient{cc}
}

func (c *sequencerConnectServiceClient) Handshake(ctx context.Context, in *SequencerConnect_HandshakeRequest, opts ...grpc.CallOption) (*SequencerConnect_HandshakeResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SequencerConnect_HandshakeResponse)
	err := c.cc.Invoke(ctx, SequencerConnectService_Handshake_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sequencerConnectServiceClient) GetSynchronizerId(ctx context.Context, in *SequencerConnect_GetSynchronizerIdRequest, opts ...grpc.CallOption) (*SequencerConnect_GetSynchronizerIdResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SequencerConnect_GetSynchronizerIdResponse)
	err := c.cc.Invoke(ctx, SequencerConnectService_GetSynchronizerId_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sequencerConnectServiceClient) GetSynchronizerParameters(ctx context.Context, in *SequencerConnect_GetSynchronizerParametersRequest, opts ...grpc.CallOption) (*SequencerConnect_GetSynchronizerParametersResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SequencerConnect_GetSynchronizerParametersResponse)
	err := c.cc.Invoke(ctx, SequencerConnectService_GetSynchronizerParameters_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sequencerConnectServiceClient) VerifyActive(ctx context.Context, in *SequencerConnect_VerifyActiveRequest, opts ...grpc.CallOption) (*SequencerConnect_VerifyActiveResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SequencerConnect_VerifyActiveResponse)
	err := c.cc.Invoke(ctx, SequencerConnectService_VerifyActive_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sequencerConnectServiceClient) RegisterOnboardingTopologyTransactions(ctx context.Context, in *SequencerConnect_RegisterOnboardingTopologyTransactionsRequest, opts ...grpc.CallOption) (*SequencerConnect_RegisterOnboardingTopologyTransactionsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SequencerConnect_RegisterOnboardingTopologyTransactionsResponse)
	err := c.cc.Invoke(ctx, SequencerConnectService_RegisterOnboardingTopologyTransactions_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SequencerConnectServiceServer is the server API for SequencerConnectService service.
// All implementations must embed UnimplementedSequencerConnectServiceServer
// for forward compatibility.
type SequencerConnectServiceServer interface {
	Handshake(context.Context, *SequencerConnect_HandshakeRequest) (*SequencerConnect_HandshakeResponse, error)
	GetSynchronizerId(context.Context, *SequencerConnect_GetSynchronizerIdRequest) (*SequencerConnect_GetSynchronizerIdResponse, error)
	GetSynchronizerParameters(context.Context, *SequencerConnect_GetSynchronizerParametersRequest) (*SequencerConnect_GetSynchronizerParametersResponse, error)
	VerifyActive(context.Context, *SequencerConnect_VerifyActiveRequest) (*SequencerConnect_VerifyActiveResponse, error)
	RegisterOnboardingTopologyTransactions(context.Context, *SequencerConnect_RegisterOnboardingTopologyTransactionsRequest) (*SequencerConnect_RegisterOnboardingTopologyTransactionsResponse, error)
	mustEmbedUnimplementedSequencerConnectServiceServer()
}

// UnimplementedSequencerConnectServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedSequencerConnectServiceServer struct{}

func (UnimplementedSequencerConnectServiceServer) Handshake(context.Context, *SequencerConnect_HandshakeRequest) (*SequencerConnect_HandshakeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Handshake not implemented")
}
func (UnimplementedSequencerConnectServiceServer) GetSynchronizerId(context.Context, *SequencerConnect_GetSynchronizerIdRequest) (*SequencerConnect_GetSynchronizerIdResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSynchronizerId not implemented")
}
func (UnimplementedSequencerConnectServiceServer) GetSynchronizerParameters(context.Context, *SequencerConnect_GetSynchronizerParametersRequest) (*SequencerConnect_GetSynchronizerParametersResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSynchronizerParameters not implemented")
}
func (UnimplementedSequencerConnectServiceServer) VerifyActive(context.Context, *SequencerConnect_VerifyActiveRequest) (*SequencerConnect_VerifyActiveResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method VerifyActive not implemented")
}
func (UnimplementedSequencerConnectServiceServer) RegisterOnboardingTopologyTransactions(context.Context, *SequencerConnect_RegisterOnboardingTopologyTransactionsRequest) (*SequencerConnect_RegisterOnboardingTopologyTransactionsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RegisterOnboardingTopologyTransactions not implemented")
}
func (UnimplementedSequencerConnectServiceServer) mustEmbedUnimplementedSequencerConnectServiceServer() {
}
func (UnimplementedSequencerConnectServiceServer) testEmbeddedByValue() {}

// UnsafeSequencerConnectServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SequencerConnectServiceServer will
// result in compilation errors.
type UnsafeSequencerConnectServiceServer interface {
	mustEmbedUnimplementedSequencerConnectServiceServer()
}

func RegisterSequencerConnectServiceServer(s grpc.ServiceRegistrar, srv SequencerConnectServiceServer) {
	// If the following call pancis, it indicates UnimplementedSequencerConnectServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&SequencerConnectService_ServiceDesc, srv)
}

func _SequencerConnectService_Handshake_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SequencerConnect_HandshakeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SequencerConnectServiceServer).Handshake(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SequencerConnectService_Handshake_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SequencerConnectServiceServer).Handshake(ctx, req.(*SequencerConnect_HandshakeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SequencerConnectService_GetSynchronizerId_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SequencerConnect_GetSynchronizerIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SequencerConnectServiceServer).GetSynchronizerId(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SequencerConnectService_GetSynchronizerId_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SequencerConnectServiceServer).GetSynchronizerId(ctx, req.(*SequencerConnect_GetSynchronizerIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SequencerConnectService_GetSynchronizerParameters_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SequencerConnect_GetSynchronizerParametersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SequencerConnectServiceServer).GetSynchronizerParameters(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SequencerConnectService_GetSynchronizerParameters_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SequencerConnectServiceServer).GetSynchronizerParameters(ctx, req.(*SequencerConnect_GetSynchronizerParametersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SequencerConnectService_VerifyActive_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SequencerConnect_VerifyActiveRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SequencerConnectServiceServer).VerifyActive(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SequencerConnectService_VerifyActive_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SequencerConnectServiceServer).VerifyActive(ctx, req.(*SequencerConnect_VerifyActiveRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SequencerConnectService_RegisterOnboardingTopologyTransactions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SequencerConnect_RegisterOnboardingTopologyTransactionsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SequencerConnectServiceServer).RegisterOnboardingTopologyTransactions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SequencerConnectService_RegisterOnboardingTopologyTransactions_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SequencerConnectServiceServer).RegisterOnboardingTopologyTransactions(ctx, req.(*SequencerConnect_RegisterOnboardingTopologyTransactionsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// SequencerConnectService_ServiceDesc is the grpc.ServiceDesc for SequencerConnectService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var SequencerConnectService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "com.digitalasset.canton.sequencer.api.v30.SequencerConnectService",
	HandlerType: (*SequencerConnectServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Handshake",
			Handler:    _SequencerConnectService_Handshake_Handler,
		},
		{
			MethodName: "GetSynchronizerId",
			Handler:    _SequencerConnectService_GetSynchronizerId_Handler,
		},
		{
			MethodName: "GetSynchronizerParameters",
			Handler:    _SequencerConnectService_GetSynchronizerParameters_Handler,
		},
		{
			MethodName: "VerifyActive",
			Handler:    _SequencerConnectService_VerifyActive_Handler,
		},
		{
			MethodName: "RegisterOnboardingTopologyTransactions",
			Handler:    _SequencerConnectService_RegisterOnboardingTopologyTransactions_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "com/digitalasset/canton/sequencer/api/v30/sequencer_connect_service.proto",
}
