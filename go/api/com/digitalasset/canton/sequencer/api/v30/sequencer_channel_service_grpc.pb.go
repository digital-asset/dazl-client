// Copyright (c) 2017-2025 Digital Asset (Switzerland) GmbH and/or its affiliates. All rights reserved.
// SPDX-License-Identifier: Apache-2.0
// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v6.30.0
// source: com/digitalasset/canton/sequencer/api/v30/sequencer_channel_service.proto

package v30

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	SequencerChannelService_ConnectToSequencerChannel_FullMethodName = "/com.digitalasset.canton.sequencer.api.v30.SequencerChannelService/ConnectToSequencerChannel"
	SequencerChannelService_Ping_FullMethodName                      = "/com.digitalasset.canton.sequencer.api.v30.SequencerChannelService/Ping"
)

// SequencerChannelServiceClient is the client API for SequencerChannelService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type SequencerChannelServiceClient interface {
	ConnectToSequencerChannel(ctx context.Context, opts ...grpc.CallOption) (grpc.BidiStreamingClient[ConnectToSequencerChannelRequest, ConnectToSequencerChannelResponse], error)
	Ping(ctx context.Context, in *PingRequest, opts ...grpc.CallOption) (*PingResponse, error)
}

type sequencerChannelServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewSequencerChannelServiceClient(cc grpc.ClientConnInterface) SequencerChannelServiceClient {
	return &sequencerChannelServiceClient{cc}
}

func (c *sequencerChannelServiceClient) ConnectToSequencerChannel(ctx context.Context, opts ...grpc.CallOption) (grpc.BidiStreamingClient[ConnectToSequencerChannelRequest, ConnectToSequencerChannelResponse], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &SequencerChannelService_ServiceDesc.Streams[0], SequencerChannelService_ConnectToSequencerChannel_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[ConnectToSequencerChannelRequest, ConnectToSequencerChannelResponse]{ClientStream: stream}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type SequencerChannelService_ConnectToSequencerChannelClient = grpc.BidiStreamingClient[ConnectToSequencerChannelRequest, ConnectToSequencerChannelResponse]

func (c *sequencerChannelServiceClient) Ping(ctx context.Context, in *PingRequest, opts ...grpc.CallOption) (*PingResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(PingResponse)
	err := c.cc.Invoke(ctx, SequencerChannelService_Ping_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SequencerChannelServiceServer is the server API for SequencerChannelService service.
// All implementations must embed UnimplementedSequencerChannelServiceServer
// for forward compatibility.
type SequencerChannelServiceServer interface {
	ConnectToSequencerChannel(grpc.BidiStreamingServer[ConnectToSequencerChannelRequest, ConnectToSequencerChannelResponse]) error
	Ping(context.Context, *PingRequest) (*PingResponse, error)
	mustEmbedUnimplementedSequencerChannelServiceServer()
}

// UnimplementedSequencerChannelServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedSequencerChannelServiceServer struct{}

func (UnimplementedSequencerChannelServiceServer) ConnectToSequencerChannel(grpc.BidiStreamingServer[ConnectToSequencerChannelRequest, ConnectToSequencerChannelResponse]) error {
	return status.Errorf(codes.Unimplemented, "method ConnectToSequencerChannel not implemented")
}
func (UnimplementedSequencerChannelServiceServer) Ping(context.Context, *PingRequest) (*PingResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Ping not implemented")
}
func (UnimplementedSequencerChannelServiceServer) mustEmbedUnimplementedSequencerChannelServiceServer() {
}
func (UnimplementedSequencerChannelServiceServer) testEmbeddedByValue() {}

// UnsafeSequencerChannelServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SequencerChannelServiceServer will
// result in compilation errors.
type UnsafeSequencerChannelServiceServer interface {
	mustEmbedUnimplementedSequencerChannelServiceServer()
}

func RegisterSequencerChannelServiceServer(s grpc.ServiceRegistrar, srv SequencerChannelServiceServer) {
	// If the following call pancis, it indicates UnimplementedSequencerChannelServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&SequencerChannelService_ServiceDesc, srv)
}

func _SequencerChannelService_ConnectToSequencerChannel_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(SequencerChannelServiceServer).ConnectToSequencerChannel(&grpc.GenericServerStream[ConnectToSequencerChannelRequest, ConnectToSequencerChannelResponse]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type SequencerChannelService_ConnectToSequencerChannelServer = grpc.BidiStreamingServer[ConnectToSequencerChannelRequest, ConnectToSequencerChannelResponse]

func _SequencerChannelService_Ping_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PingRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SequencerChannelServiceServer).Ping(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SequencerChannelService_Ping_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SequencerChannelServiceServer).Ping(ctx, req.(*PingRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// SequencerChannelService_ServiceDesc is the grpc.ServiceDesc for SequencerChannelService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var SequencerChannelService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "com.digitalasset.canton.sequencer.api.v30.SequencerChannelService",
	HandlerType: (*SequencerChannelServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Ping",
			Handler:    _SequencerChannelService_Ping_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "ConnectToSequencerChannel",
			Handler:       _SequencerChannelService_ConnectToSequencerChannel_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "com/digitalasset/canton/sequencer/api/v30/sequencer_channel_service.proto",
}
