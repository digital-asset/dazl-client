// Copyright (c) 2017-2025 Digital Asset (Switzerland) GmbH and/or its affiliates. All rights reserved.
// SPDX-License-Identifier: Apache-2.0
// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v6.30.0
// source: com/digitalasset/canton/sequencer/api/v30/sequencer_service.proto

package v30

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	SequencerService_SendAsync_FullMethodName                    = "/com.digitalasset.canton.sequencer.api.v30.SequencerService/SendAsync"
	SequencerService_SubscribeV2_FullMethodName                  = "/com.digitalasset.canton.sequencer.api.v30.SequencerService/SubscribeV2"
	SequencerService_AcknowledgeSigned_FullMethodName            = "/com.digitalasset.canton.sequencer.api.v30.SequencerService/AcknowledgeSigned"
	SequencerService_DownloadTopologyStateForInit_FullMethodName = "/com.digitalasset.canton.sequencer.api.v30.SequencerService/DownloadTopologyStateForInit"
	SequencerService_GetTrafficStateForMember_FullMethodName     = "/com.digitalasset.canton.sequencer.api.v30.SequencerService/GetTrafficStateForMember"
)

// SequencerServiceClient is the client API for SequencerService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type SequencerServiceClient interface {
	SendAsync(ctx context.Context, in *SendAsyncRequest, opts ...grpc.CallOption) (*SendAsyncResponse, error)
	SubscribeV2(ctx context.Context, in *SubscriptionRequestV2, opts ...grpc.CallOption) (grpc.ServerStreamingClient[SubscriptionResponse], error)
	AcknowledgeSigned(ctx context.Context, in *AcknowledgeSignedRequest, opts ...grpc.CallOption) (*AcknowledgeSignedResponse, error)
	DownloadTopologyStateForInit(ctx context.Context, in *DownloadTopologyStateForInitRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[DownloadTopologyStateForInitResponse], error)
	GetTrafficStateForMember(ctx context.Context, in *GetTrafficStateForMemberRequest, opts ...grpc.CallOption) (*GetTrafficStateForMemberResponse, error)
}

type sequencerServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewSequencerServiceClient(cc grpc.ClientConnInterface) SequencerServiceClient {
	return &sequencerServiceClient{cc}
}

func (c *sequencerServiceClient) SendAsync(ctx context.Context, in *SendAsyncRequest, opts ...grpc.CallOption) (*SendAsyncResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SendAsyncResponse)
	err := c.cc.Invoke(ctx, SequencerService_SendAsync_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sequencerServiceClient) SubscribeV2(ctx context.Context, in *SubscriptionRequestV2, opts ...grpc.CallOption) (grpc.ServerStreamingClient[SubscriptionResponse], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &SequencerService_ServiceDesc.Streams[0], SequencerService_SubscribeV2_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[SubscriptionRequestV2, SubscriptionResponse]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type SequencerService_SubscribeV2Client = grpc.ServerStreamingClient[SubscriptionResponse]

func (c *sequencerServiceClient) AcknowledgeSigned(ctx context.Context, in *AcknowledgeSignedRequest, opts ...grpc.CallOption) (*AcknowledgeSignedResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AcknowledgeSignedResponse)
	err := c.cc.Invoke(ctx, SequencerService_AcknowledgeSigned_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sequencerServiceClient) DownloadTopologyStateForInit(ctx context.Context, in *DownloadTopologyStateForInitRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[DownloadTopologyStateForInitResponse], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &SequencerService_ServiceDesc.Streams[1], SequencerService_DownloadTopologyStateForInit_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[DownloadTopologyStateForInitRequest, DownloadTopologyStateForInitResponse]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type SequencerService_DownloadTopologyStateForInitClient = grpc.ServerStreamingClient[DownloadTopologyStateForInitResponse]

func (c *sequencerServiceClient) GetTrafficStateForMember(ctx context.Context, in *GetTrafficStateForMemberRequest, opts ...grpc.CallOption) (*GetTrafficStateForMemberResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetTrafficStateForMemberResponse)
	err := c.cc.Invoke(ctx, SequencerService_GetTrafficStateForMember_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SequencerServiceServer is the server API for SequencerService service.
// All implementations must embed UnimplementedSequencerServiceServer
// for forward compatibility.
type SequencerServiceServer interface {
	SendAsync(context.Context, *SendAsyncRequest) (*SendAsyncResponse, error)
	SubscribeV2(*SubscriptionRequestV2, grpc.ServerStreamingServer[SubscriptionResponse]) error
	AcknowledgeSigned(context.Context, *AcknowledgeSignedRequest) (*AcknowledgeSignedResponse, error)
	DownloadTopologyStateForInit(*DownloadTopologyStateForInitRequest, grpc.ServerStreamingServer[DownloadTopologyStateForInitResponse]) error
	GetTrafficStateForMember(context.Context, *GetTrafficStateForMemberRequest) (*GetTrafficStateForMemberResponse, error)
	mustEmbedUnimplementedSequencerServiceServer()
}

// UnimplementedSequencerServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedSequencerServiceServer struct{}

func (UnimplementedSequencerServiceServer) SendAsync(context.Context, *SendAsyncRequest) (*SendAsyncResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendAsync not implemented")
}
func (UnimplementedSequencerServiceServer) SubscribeV2(*SubscriptionRequestV2, grpc.ServerStreamingServer[SubscriptionResponse]) error {
	return status.Errorf(codes.Unimplemented, "method SubscribeV2 not implemented")
}
func (UnimplementedSequencerServiceServer) AcknowledgeSigned(context.Context, *AcknowledgeSignedRequest) (*AcknowledgeSignedResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AcknowledgeSigned not implemented")
}
func (UnimplementedSequencerServiceServer) DownloadTopologyStateForInit(*DownloadTopologyStateForInitRequest, grpc.ServerStreamingServer[DownloadTopologyStateForInitResponse]) error {
	return status.Errorf(codes.Unimplemented, "method DownloadTopologyStateForInit not implemented")
}
func (UnimplementedSequencerServiceServer) GetTrafficStateForMember(context.Context, *GetTrafficStateForMemberRequest) (*GetTrafficStateForMemberResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTrafficStateForMember not implemented")
}
func (UnimplementedSequencerServiceServer) mustEmbedUnimplementedSequencerServiceServer() {}
func (UnimplementedSequencerServiceServer) testEmbeddedByValue()                          {}

// UnsafeSequencerServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SequencerServiceServer will
// result in compilation errors.
type UnsafeSequencerServiceServer interface {
	mustEmbedUnimplementedSequencerServiceServer()
}

func RegisterSequencerServiceServer(s grpc.ServiceRegistrar, srv SequencerServiceServer) {
	// If the following call pancis, it indicates UnimplementedSequencerServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&SequencerService_ServiceDesc, srv)
}

func _SequencerService_SendAsync_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SendAsyncRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SequencerServiceServer).SendAsync(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SequencerService_SendAsync_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SequencerServiceServer).SendAsync(ctx, req.(*SendAsyncRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SequencerService_SubscribeV2_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(SubscriptionRequestV2)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(SequencerServiceServer).SubscribeV2(m, &grpc.GenericServerStream[SubscriptionRequestV2, SubscriptionResponse]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type SequencerService_SubscribeV2Server = grpc.ServerStreamingServer[SubscriptionResponse]

func _SequencerService_AcknowledgeSigned_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AcknowledgeSignedRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SequencerServiceServer).AcknowledgeSigned(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SequencerService_AcknowledgeSigned_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SequencerServiceServer).AcknowledgeSigned(ctx, req.(*AcknowledgeSignedRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SequencerService_DownloadTopologyStateForInit_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(DownloadTopologyStateForInitRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(SequencerServiceServer).DownloadTopologyStateForInit(m, &grpc.GenericServerStream[DownloadTopologyStateForInitRequest, DownloadTopologyStateForInitResponse]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type SequencerService_DownloadTopologyStateForInitServer = grpc.ServerStreamingServer[DownloadTopologyStateForInitResponse]

func _SequencerService_GetTrafficStateForMember_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTrafficStateForMemberRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SequencerServiceServer).GetTrafficStateForMember(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SequencerService_GetTrafficStateForMember_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SequencerServiceServer).GetTrafficStateForMember(ctx, req.(*GetTrafficStateForMemberRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// SequencerService_ServiceDesc is the grpc.ServiceDesc for SequencerService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var SequencerService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "com.digitalasset.canton.sequencer.api.v30.SequencerService",
	HandlerType: (*SequencerServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SendAsync",
			Handler:    _SequencerService_SendAsync_Handler,
		},
		{
			MethodName: "AcknowledgeSigned",
			Handler:    _SequencerService_AcknowledgeSigned_Handler,
		},
		{
			MethodName: "GetTrafficStateForMember",
			Handler:    _SequencerService_GetTrafficStateForMember_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "SubscribeV2",
			Handler:       _SequencerService_SubscribeV2_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "DownloadTopologyStateForInit",
			Handler:       _SequencerService_DownloadTopologyStateForInit_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "com/digitalasset/canton/sequencer/api/v30/sequencer_service.proto",
}
