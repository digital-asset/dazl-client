// Copyright (c) 2017-2025 Digital Asset (Switzerland) GmbH and/or its affiliates. All rights reserved.
// SPDX-License-Identifier: Apache-2.0
// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.6
// 	protoc        v6.30.0
// source: com/digitalasset/canton/sequencer/api/v30/sequencer_connect_service.proto

package v30

import (
	v30 "github.com/digital-asset/dazl-client/v8/go/api/com/digitalasset/canton/protocol/v30"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type SequencerConnect struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SequencerConnect) Reset() {
	*x = SequencerConnect{}
	mi := &file_com_digitalasset_canton_sequencer_api_v30_sequencer_connect_service_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SequencerConnect) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SequencerConnect) ProtoMessage() {}

func (x *SequencerConnect) ProtoReflect() protoreflect.Message {
	mi := &file_com_digitalasset_canton_sequencer_api_v30_sequencer_connect_service_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SequencerConnect.ProtoReflect.Descriptor instead.
func (*SequencerConnect) Descriptor() ([]byte, []int) {
	return file_com_digitalasset_canton_sequencer_api_v30_sequencer_connect_service_proto_rawDescGZIP(), []int{0}
}

type SequencerConnect_HandshakeRequest struct {
	state                  protoimpl.MessageState `protogen:"open.v1"`
	ClientProtocolVersions []int32                `protobuf:"varint,1,rep,packed,name=client_protocol_versions,json=clientProtocolVersions,proto3" json:"client_protocol_versions,omitempty"`
	MinimumProtocolVersion *int32                 `protobuf:"varint,2,opt,name=minimum_protocol_version,json=minimumProtocolVersion,proto3,oneof" json:"minimum_protocol_version,omitempty"`
	unknownFields          protoimpl.UnknownFields
	sizeCache              protoimpl.SizeCache
}

func (x *SequencerConnect_HandshakeRequest) Reset() {
	*x = SequencerConnect_HandshakeRequest{}
	mi := &file_com_digitalasset_canton_sequencer_api_v30_sequencer_connect_service_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SequencerConnect_HandshakeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SequencerConnect_HandshakeRequest) ProtoMessage() {}

func (x *SequencerConnect_HandshakeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_com_digitalasset_canton_sequencer_api_v30_sequencer_connect_service_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SequencerConnect_HandshakeRequest.ProtoReflect.Descriptor instead.
func (*SequencerConnect_HandshakeRequest) Descriptor() ([]byte, []int) {
	return file_com_digitalasset_canton_sequencer_api_v30_sequencer_connect_service_proto_rawDescGZIP(), []int{0, 0}
}

func (x *SequencerConnect_HandshakeRequest) GetClientProtocolVersions() []int32 {
	if x != nil {
		return x.ClientProtocolVersions
	}
	return nil
}

func (x *SequencerConnect_HandshakeRequest) GetMinimumProtocolVersion() int32 {
	if x != nil && x.MinimumProtocolVersion != nil {
		return *x.MinimumProtocolVersion
	}
	return 0
}

type SequencerConnect_HandshakeResponse struct {
	state                 protoimpl.MessageState `protogen:"open.v1"`
	ServerProtocolVersion int32                  `protobuf:"varint,1,opt,name=server_protocol_version,json=serverProtocolVersion,proto3" json:"server_protocol_version,omitempty"`
	// Types that are valid to be assigned to Value:
	//
	//	*SequencerConnect_HandshakeResponse_Success_
	//	*SequencerConnect_HandshakeResponse_Failure_
	Value         isSequencerConnect_HandshakeResponse_Value `protobuf_oneof:"value"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SequencerConnect_HandshakeResponse) Reset() {
	*x = SequencerConnect_HandshakeResponse{}
	mi := &file_com_digitalasset_canton_sequencer_api_v30_sequencer_connect_service_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SequencerConnect_HandshakeResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SequencerConnect_HandshakeResponse) ProtoMessage() {}

func (x *SequencerConnect_HandshakeResponse) ProtoReflect() protoreflect.Message {
	mi := &file_com_digitalasset_canton_sequencer_api_v30_sequencer_connect_service_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SequencerConnect_HandshakeResponse.ProtoReflect.Descriptor instead.
func (*SequencerConnect_HandshakeResponse) Descriptor() ([]byte, []int) {
	return file_com_digitalasset_canton_sequencer_api_v30_sequencer_connect_service_proto_rawDescGZIP(), []int{0, 1}
}

func (x *SequencerConnect_HandshakeResponse) GetServerProtocolVersion() int32 {
	if x != nil {
		return x.ServerProtocolVersion
	}
	return 0
}

func (x *SequencerConnect_HandshakeResponse) GetValue() isSequencerConnect_HandshakeResponse_Value {
	if x != nil {
		return x.Value
	}
	return nil
}

func (x *SequencerConnect_HandshakeResponse) GetSuccess() *SequencerConnect_HandshakeResponse_Success {
	if x != nil {
		if x, ok := x.Value.(*SequencerConnect_HandshakeResponse_Success_); ok {
			return x.Success
		}
	}
	return nil
}

func (x *SequencerConnect_HandshakeResponse) GetFailure() *SequencerConnect_HandshakeResponse_Failure {
	if x != nil {
		if x, ok := x.Value.(*SequencerConnect_HandshakeResponse_Failure_); ok {
			return x.Failure
		}
	}
	return nil
}

type isSequencerConnect_HandshakeResponse_Value interface {
	isSequencerConnect_HandshakeResponse_Value()
}

type SequencerConnect_HandshakeResponse_Success_ struct {
	Success *SequencerConnect_HandshakeResponse_Success `protobuf:"bytes,2,opt,name=success,proto3,oneof"`
}

type SequencerConnect_HandshakeResponse_Failure_ struct {
	Failure *SequencerConnect_HandshakeResponse_Failure `protobuf:"bytes,3,opt,name=failure,proto3,oneof"`
}

func (*SequencerConnect_HandshakeResponse_Success_) isSequencerConnect_HandshakeResponse_Value() {}

func (*SequencerConnect_HandshakeResponse_Failure_) isSequencerConnect_HandshakeResponse_Value() {}

type SequencerConnect_GetSynchronizerIdRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SequencerConnect_GetSynchronizerIdRequest) Reset() {
	*x = SequencerConnect_GetSynchronizerIdRequest{}
	mi := &file_com_digitalasset_canton_sequencer_api_v30_sequencer_connect_service_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SequencerConnect_GetSynchronizerIdRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SequencerConnect_GetSynchronizerIdRequest) ProtoMessage() {}

func (x *SequencerConnect_GetSynchronizerIdRequest) ProtoReflect() protoreflect.Message {
	mi := &file_com_digitalasset_canton_sequencer_api_v30_sequencer_connect_service_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SequencerConnect_GetSynchronizerIdRequest.ProtoReflect.Descriptor instead.
func (*SequencerConnect_GetSynchronizerIdRequest) Descriptor() ([]byte, []int) {
	return file_com_digitalasset_canton_sequencer_api_v30_sequencer_connect_service_proto_rawDescGZIP(), []int{0, 2}
}

type SequencerConnect_GetSynchronizerIdResponse struct {
	state          protoimpl.MessageState `protogen:"open.v1"`
	SynchronizerId string                 `protobuf:"bytes,1,opt,name=synchronizer_id,json=synchronizerId,proto3" json:"synchronizer_id,omitempty"`
	SequencerUid   string                 `protobuf:"bytes,2,opt,name=sequencer_uid,json=sequencerUid,proto3" json:"sequencer_uid,omitempty"`
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *SequencerConnect_GetSynchronizerIdResponse) Reset() {
	*x = SequencerConnect_GetSynchronizerIdResponse{}
	mi := &file_com_digitalasset_canton_sequencer_api_v30_sequencer_connect_service_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SequencerConnect_GetSynchronizerIdResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SequencerConnect_GetSynchronizerIdResponse) ProtoMessage() {}

func (x *SequencerConnect_GetSynchronizerIdResponse) ProtoReflect() protoreflect.Message {
	mi := &file_com_digitalasset_canton_sequencer_api_v30_sequencer_connect_service_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SequencerConnect_GetSynchronizerIdResponse.ProtoReflect.Descriptor instead.
func (*SequencerConnect_GetSynchronizerIdResponse) Descriptor() ([]byte, []int) {
	return file_com_digitalasset_canton_sequencer_api_v30_sequencer_connect_service_proto_rawDescGZIP(), []int{0, 3}
}

func (x *SequencerConnect_GetSynchronizerIdResponse) GetSynchronizerId() string {
	if x != nil {
		return x.SynchronizerId
	}
	return ""
}

func (x *SequencerConnect_GetSynchronizerIdResponse) GetSequencerUid() string {
	if x != nil {
		return x.SequencerUid
	}
	return ""
}

type SequencerConnect_GetSynchronizerParametersRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SequencerConnect_GetSynchronizerParametersRequest) Reset() {
	*x = SequencerConnect_GetSynchronizerParametersRequest{}
	mi := &file_com_digitalasset_canton_sequencer_api_v30_sequencer_connect_service_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SequencerConnect_GetSynchronizerParametersRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SequencerConnect_GetSynchronizerParametersRequest) ProtoMessage() {}

func (x *SequencerConnect_GetSynchronizerParametersRequest) ProtoReflect() protoreflect.Message {
	mi := &file_com_digitalasset_canton_sequencer_api_v30_sequencer_connect_service_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SequencerConnect_GetSynchronizerParametersRequest.ProtoReflect.Descriptor instead.
func (*SequencerConnect_GetSynchronizerParametersRequest) Descriptor() ([]byte, []int) {
	return file_com_digitalasset_canton_sequencer_api_v30_sequencer_connect_service_proto_rawDescGZIP(), []int{0, 4}
}

type SequencerConnect_GetSynchronizerParametersResponse struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Types that are valid to be assigned to Parameters:
	//
	//	*SequencerConnect_GetSynchronizerParametersResponse_ParametersV1
	Parameters    isSequencerConnect_GetSynchronizerParametersResponse_Parameters `protobuf_oneof:"parameters"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SequencerConnect_GetSynchronizerParametersResponse) Reset() {
	*x = SequencerConnect_GetSynchronizerParametersResponse{}
	mi := &file_com_digitalasset_canton_sequencer_api_v30_sequencer_connect_service_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SequencerConnect_GetSynchronizerParametersResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SequencerConnect_GetSynchronizerParametersResponse) ProtoMessage() {}

func (x *SequencerConnect_GetSynchronizerParametersResponse) ProtoReflect() protoreflect.Message {
	mi := &file_com_digitalasset_canton_sequencer_api_v30_sequencer_connect_service_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SequencerConnect_GetSynchronizerParametersResponse.ProtoReflect.Descriptor instead.
func (*SequencerConnect_GetSynchronizerParametersResponse) Descriptor() ([]byte, []int) {
	return file_com_digitalasset_canton_sequencer_api_v30_sequencer_connect_service_proto_rawDescGZIP(), []int{0, 5}
}

func (x *SequencerConnect_GetSynchronizerParametersResponse) GetParameters() isSequencerConnect_GetSynchronizerParametersResponse_Parameters {
	if x != nil {
		return x.Parameters
	}
	return nil
}

func (x *SequencerConnect_GetSynchronizerParametersResponse) GetParametersV1() *v30.StaticSynchronizerParameters {
	if x != nil {
		if x, ok := x.Parameters.(*SequencerConnect_GetSynchronizerParametersResponse_ParametersV1); ok {
			return x.ParametersV1
		}
	}
	return nil
}

type isSequencerConnect_GetSynchronizerParametersResponse_Parameters interface {
	isSequencerConnect_GetSynchronizerParametersResponse_Parameters()
}

type SequencerConnect_GetSynchronizerParametersResponse_ParametersV1 struct {
	ParametersV1 *v30.StaticSynchronizerParameters `protobuf:"bytes,2,opt,name=parameters_v1,json=parametersV1,proto3,oneof"`
}

func (*SequencerConnect_GetSynchronizerParametersResponse_ParametersV1) isSequencerConnect_GetSynchronizerParametersResponse_Parameters() {
}

type SequencerConnect_VerifyActiveRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SequencerConnect_VerifyActiveRequest) Reset() {
	*x = SequencerConnect_VerifyActiveRequest{}
	mi := &file_com_digitalasset_canton_sequencer_api_v30_sequencer_connect_service_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SequencerConnect_VerifyActiveRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SequencerConnect_VerifyActiveRequest) ProtoMessage() {}

func (x *SequencerConnect_VerifyActiveRequest) ProtoReflect() protoreflect.Message {
	mi := &file_com_digitalasset_canton_sequencer_api_v30_sequencer_connect_service_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SequencerConnect_VerifyActiveRequest.ProtoReflect.Descriptor instead.
func (*SequencerConnect_VerifyActiveRequest) Descriptor() ([]byte, []int) {
	return file_com_digitalasset_canton_sequencer_api_v30_sequencer_connect_service_proto_rawDescGZIP(), []int{0, 6}
}

type SequencerConnect_VerifyActiveResponse struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Types that are valid to be assigned to Value:
	//
	//	*SequencerConnect_VerifyActiveResponse_Success_
	//	*SequencerConnect_VerifyActiveResponse_Failure_
	Value         isSequencerConnect_VerifyActiveResponse_Value `protobuf_oneof:"value"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SequencerConnect_VerifyActiveResponse) Reset() {
	*x = SequencerConnect_VerifyActiveResponse{}
	mi := &file_com_digitalasset_canton_sequencer_api_v30_sequencer_connect_service_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SequencerConnect_VerifyActiveResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SequencerConnect_VerifyActiveResponse) ProtoMessage() {}

func (x *SequencerConnect_VerifyActiveResponse) ProtoReflect() protoreflect.Message {
	mi := &file_com_digitalasset_canton_sequencer_api_v30_sequencer_connect_service_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SequencerConnect_VerifyActiveResponse.ProtoReflect.Descriptor instead.
func (*SequencerConnect_VerifyActiveResponse) Descriptor() ([]byte, []int) {
	return file_com_digitalasset_canton_sequencer_api_v30_sequencer_connect_service_proto_rawDescGZIP(), []int{0, 7}
}

func (x *SequencerConnect_VerifyActiveResponse) GetValue() isSequencerConnect_VerifyActiveResponse_Value {
	if x != nil {
		return x.Value
	}
	return nil
}

func (x *SequencerConnect_VerifyActiveResponse) GetSuccess() *SequencerConnect_VerifyActiveResponse_Success {
	if x != nil {
		if x, ok := x.Value.(*SequencerConnect_VerifyActiveResponse_Success_); ok {
			return x.Success
		}
	}
	return nil
}

func (x *SequencerConnect_VerifyActiveResponse) GetFailure() *SequencerConnect_VerifyActiveResponse_Failure {
	if x != nil {
		if x, ok := x.Value.(*SequencerConnect_VerifyActiveResponse_Failure_); ok {
			return x.Failure
		}
	}
	return nil
}

type isSequencerConnect_VerifyActiveResponse_Value interface {
	isSequencerConnect_VerifyActiveResponse_Value()
}

type SequencerConnect_VerifyActiveResponse_Success_ struct {
	Success *SequencerConnect_VerifyActiveResponse_Success `protobuf:"bytes,1,opt,name=success,proto3,oneof"`
}

type SequencerConnect_VerifyActiveResponse_Failure_ struct {
	Failure *SequencerConnect_VerifyActiveResponse_Failure `protobuf:"bytes,2,opt,name=failure,proto3,oneof"`
}

func (*SequencerConnect_VerifyActiveResponse_Success_) isSequencerConnect_VerifyActiveResponse_Value() {
}

func (*SequencerConnect_VerifyActiveResponse_Failure_) isSequencerConnect_VerifyActiveResponse_Value() {
}

type SequencerConnect_RegisterOnboardingTopologyTransactionsRequest struct {
	state                protoimpl.MessageState           `protogen:"open.v1"`
	TopologyTransactions []*v30.SignedTopologyTransaction `protobuf:"bytes,1,rep,name=topology_transactions,json=topologyTransactions,proto3" json:"topology_transactions,omitempty"`
	unknownFields        protoimpl.UnknownFields
	sizeCache            protoimpl.SizeCache
}

func (x *SequencerConnect_RegisterOnboardingTopologyTransactionsRequest) Reset() {
	*x = SequencerConnect_RegisterOnboardingTopologyTransactionsRequest{}
	mi := &file_com_digitalasset_canton_sequencer_api_v30_sequencer_connect_service_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SequencerConnect_RegisterOnboardingTopologyTransactionsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SequencerConnect_RegisterOnboardingTopologyTransactionsRequest) ProtoMessage() {}

func (x *SequencerConnect_RegisterOnboardingTopologyTransactionsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_com_digitalasset_canton_sequencer_api_v30_sequencer_connect_service_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SequencerConnect_RegisterOnboardingTopologyTransactionsRequest.ProtoReflect.Descriptor instead.
func (*SequencerConnect_RegisterOnboardingTopologyTransactionsRequest) Descriptor() ([]byte, []int) {
	return file_com_digitalasset_canton_sequencer_api_v30_sequencer_connect_service_proto_rawDescGZIP(), []int{0, 8}
}

func (x *SequencerConnect_RegisterOnboardingTopologyTransactionsRequest) GetTopologyTransactions() []*v30.SignedTopologyTransaction {
	if x != nil {
		return x.TopologyTransactions
	}
	return nil
}

type SequencerConnect_RegisterOnboardingTopologyTransactionsResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SequencerConnect_RegisterOnboardingTopologyTransactionsResponse) Reset() {
	*x = SequencerConnect_RegisterOnboardingTopologyTransactionsResponse{}
	mi := &file_com_digitalasset_canton_sequencer_api_v30_sequencer_connect_service_proto_msgTypes[10]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SequencerConnect_RegisterOnboardingTopologyTransactionsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SequencerConnect_RegisterOnboardingTopologyTransactionsResponse) ProtoMessage() {}

func (x *SequencerConnect_RegisterOnboardingTopologyTransactionsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_com_digitalasset_canton_sequencer_api_v30_sequencer_connect_service_proto_msgTypes[10]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SequencerConnect_RegisterOnboardingTopologyTransactionsResponse.ProtoReflect.Descriptor instead.
func (*SequencerConnect_RegisterOnboardingTopologyTransactionsResponse) Descriptor() ([]byte, []int) {
	return file_com_digitalasset_canton_sequencer_api_v30_sequencer_connect_service_proto_rawDescGZIP(), []int{0, 9}
}

type SequencerConnect_HandshakeResponse_Success struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SequencerConnect_HandshakeResponse_Success) Reset() {
	*x = SequencerConnect_HandshakeResponse_Success{}
	mi := &file_com_digitalasset_canton_sequencer_api_v30_sequencer_connect_service_proto_msgTypes[11]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SequencerConnect_HandshakeResponse_Success) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SequencerConnect_HandshakeResponse_Success) ProtoMessage() {}

func (x *SequencerConnect_HandshakeResponse_Success) ProtoReflect() protoreflect.Message {
	mi := &file_com_digitalasset_canton_sequencer_api_v30_sequencer_connect_service_proto_msgTypes[11]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SequencerConnect_HandshakeResponse_Success.ProtoReflect.Descriptor instead.
func (*SequencerConnect_HandshakeResponse_Success) Descriptor() ([]byte, []int) {
	return file_com_digitalasset_canton_sequencer_api_v30_sequencer_connect_service_proto_rawDescGZIP(), []int{0, 1, 0}
}

type SequencerConnect_HandshakeResponse_Failure struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Reason        string                 `protobuf:"bytes,1,opt,name=reason,proto3" json:"reason,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SequencerConnect_HandshakeResponse_Failure) Reset() {
	*x = SequencerConnect_HandshakeResponse_Failure{}
	mi := &file_com_digitalasset_canton_sequencer_api_v30_sequencer_connect_service_proto_msgTypes[12]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SequencerConnect_HandshakeResponse_Failure) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SequencerConnect_HandshakeResponse_Failure) ProtoMessage() {}

func (x *SequencerConnect_HandshakeResponse_Failure) ProtoReflect() protoreflect.Message {
	mi := &file_com_digitalasset_canton_sequencer_api_v30_sequencer_connect_service_proto_msgTypes[12]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SequencerConnect_HandshakeResponse_Failure.ProtoReflect.Descriptor instead.
func (*SequencerConnect_HandshakeResponse_Failure) Descriptor() ([]byte, []int) {
	return file_com_digitalasset_canton_sequencer_api_v30_sequencer_connect_service_proto_rawDescGZIP(), []int{0, 1, 1}
}

func (x *SequencerConnect_HandshakeResponse_Failure) GetReason() string {
	if x != nil {
		return x.Reason
	}
	return ""
}

type SequencerConnect_VerifyActiveResponse_Success struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	IsActive      bool                   `protobuf:"varint,1,opt,name=is_active,json=isActive,proto3" json:"is_active,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SequencerConnect_VerifyActiveResponse_Success) Reset() {
	*x = SequencerConnect_VerifyActiveResponse_Success{}
	mi := &file_com_digitalasset_canton_sequencer_api_v30_sequencer_connect_service_proto_msgTypes[13]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SequencerConnect_VerifyActiveResponse_Success) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SequencerConnect_VerifyActiveResponse_Success) ProtoMessage() {}

func (x *SequencerConnect_VerifyActiveResponse_Success) ProtoReflect() protoreflect.Message {
	mi := &file_com_digitalasset_canton_sequencer_api_v30_sequencer_connect_service_proto_msgTypes[13]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SequencerConnect_VerifyActiveResponse_Success.ProtoReflect.Descriptor instead.
func (*SequencerConnect_VerifyActiveResponse_Success) Descriptor() ([]byte, []int) {
	return file_com_digitalasset_canton_sequencer_api_v30_sequencer_connect_service_proto_rawDescGZIP(), []int{0, 7, 0}
}

func (x *SequencerConnect_VerifyActiveResponse_Success) GetIsActive() bool {
	if x != nil {
		return x.IsActive
	}
	return false
}

type SequencerConnect_VerifyActiveResponse_Failure struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Reason        string                 `protobuf:"bytes,1,opt,name=reason,proto3" json:"reason,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SequencerConnect_VerifyActiveResponse_Failure) Reset() {
	*x = SequencerConnect_VerifyActiveResponse_Failure{}
	mi := &file_com_digitalasset_canton_sequencer_api_v30_sequencer_connect_service_proto_msgTypes[14]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SequencerConnect_VerifyActiveResponse_Failure) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SequencerConnect_VerifyActiveResponse_Failure) ProtoMessage() {}

func (x *SequencerConnect_VerifyActiveResponse_Failure) ProtoReflect() protoreflect.Message {
	mi := &file_com_digitalasset_canton_sequencer_api_v30_sequencer_connect_service_proto_msgTypes[14]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SequencerConnect_VerifyActiveResponse_Failure.ProtoReflect.Descriptor instead.
func (*SequencerConnect_VerifyActiveResponse_Failure) Descriptor() ([]byte, []int) {
	return file_com_digitalasset_canton_sequencer_api_v30_sequencer_connect_service_proto_rawDescGZIP(), []int{0, 7, 1}
}

func (x *SequencerConnect_VerifyActiveResponse_Failure) GetReason() string {
	if x != nil {
		return x.Reason
	}
	return ""
}

var File_com_digitalasset_canton_sequencer_api_v30_sequencer_connect_service_proto protoreflect.FileDescriptor

const file_com_digitalasset_canton_sequencer_api_v30_sequencer_connect_service_proto_rawDesc = "" +
	"\n" +
	"Icom/digitalasset/canton/sequencer/api/v30/sequencer_connect_service.proto\x12)com.digitalasset.canton.sequencer.api.v30\x1a5com/digitalasset/canton/protocol/v30/sequencing.proto\x1a3com/digitalasset/canton/protocol/v30/topology.proto\"\xbc\v\n" +
	"\x10SequencerConnect\x1a\xa8\x01\n" +
	"\x10HandshakeRequest\x128\n" +
	"\x18client_protocol_versions\x18\x01 \x03(\x05R\x16clientProtocolVersions\x12=\n" +
	"\x18minimum_protocol_version\x18\x02 \x01(\x05H\x00R\x16minimumProtocolVersion\x88\x01\x01B\x1b\n" +
	"\x19_minimum_protocol_version\x1a\xe8\x02\n" +
	"\x11HandshakeResponse\x126\n" +
	"\x17server_protocol_version\x18\x01 \x01(\x05R\x15serverProtocolVersion\x12q\n" +
	"\asuccess\x18\x02 \x01(\v2U.com.digitalasset.canton.sequencer.api.v30.SequencerConnect.HandshakeResponse.SuccessH\x00R\asuccess\x12q\n" +
	"\afailure\x18\x03 \x01(\v2U.com.digitalasset.canton.sequencer.api.v30.SequencerConnect.HandshakeResponse.FailureH\x00R\afailure\x1a\t\n" +
	"\aSuccess\x1a!\n" +
	"\aFailure\x12\x16\n" +
	"\x06reason\x18\x01 \x01(\tR\x06reasonB\a\n" +
	"\x05value\x1a\x1a\n" +
	"\x18GetSynchronizerIdRequest\x1ai\n" +
	"\x19GetSynchronizerIdResponse\x12'\n" +
	"\x0fsynchronizer_id\x18\x01 \x01(\tR\x0esynchronizerId\x12#\n" +
	"\rsequencer_uid\x18\x02 \x01(\tR\fsequencerUid\x1a\"\n" +
	" GetSynchronizerParametersRequest\x1a\x9c\x01\n" +
	"!GetSynchronizerParametersResponse\x12i\n" +
	"\rparameters_v1\x18\x02 \x01(\v2B.com.digitalasset.canton.protocol.v30.StaticSynchronizerParametersH\x00R\fparametersV1B\f\n" +
	"\n" +
	"parameters\x1a\x15\n" +
	"\x13VerifyActiveRequest\x1a\xd6\x02\n" +
	"\x14VerifyActiveResponse\x12t\n" +
	"\asuccess\x18\x01 \x01(\v2X.com.digitalasset.canton.sequencer.api.v30.SequencerConnect.VerifyActiveResponse.SuccessH\x00R\asuccess\x12t\n" +
	"\afailure\x18\x02 \x01(\v2X.com.digitalasset.canton.sequencer.api.v30.SequencerConnect.VerifyActiveResponse.FailureH\x00R\afailure\x1a&\n" +
	"\aSuccess\x12\x1b\n" +
	"\tis_active\x18\x01 \x01(\bR\bisActive\x1a!\n" +
	"\aFailure\x12\x16\n" +
	"\x06reason\x18\x01 \x01(\tR\x06reasonB\a\n" +
	"\x05value\x1a\xa5\x01\n" +
	"-RegisterOnboardingTopologyTransactionsRequest\x12t\n" +
	"\x15topology_transactions\x18\x01 \x03(\v2?.com.digitalasset.canton.protocol.v30.SignedTopologyTransactionR\x14topologyTransactions\x1a0\n" +
	".RegisterOnboardingTopologyTransactionsResponse2\x98\b\n" +
	"\x17SequencerConnectService\x12\xa8\x01\n" +
	"\tHandshake\x12L.com.digitalasset.canton.sequencer.api.v30.SequencerConnect.HandshakeRequest\x1aM.com.digitalasset.canton.sequencer.api.v30.SequencerConnect.HandshakeResponse\x12\xc0\x01\n" +
	"\x11GetSynchronizerId\x12T.com.digitalasset.canton.sequencer.api.v30.SequencerConnect.GetSynchronizerIdRequest\x1aU.com.digitalasset.canton.sequencer.api.v30.SequencerConnect.GetSynchronizerIdResponse\x12\xd8\x01\n" +
	"\x19GetSynchronizerParameters\x12\\.com.digitalasset.canton.sequencer.api.v30.SequencerConnect.GetSynchronizerParametersRequest\x1a].com.digitalasset.canton.sequencer.api.v30.SequencerConnect.GetSynchronizerParametersResponse\x12\xb1\x01\n" +
	"\fVerifyActive\x12O.com.digitalasset.canton.sequencer.api.v30.SequencerConnect.VerifyActiveRequest\x1aP.com.digitalasset.canton.sequencer.api.v30.SequencerConnect.VerifyActiveResponse\x12\xff\x01\n" +
	"&RegisterOnboardingTopologyTransactions\x12i.com.digitalasset.canton.sequencer.api.v30.SequencerConnect.RegisterOnboardingTopologyTransactionsRequest\x1aj.com.digitalasset.canton.sequencer.api.v30.SequencerConnect.RegisterOnboardingTopologyTransactionsResponseBZZXgithub.com/digital-asset/dazl-client/v8/go/api/com/digitalasset/canton/sequencer/api/v30b\x06proto3"

var (
	file_com_digitalasset_canton_sequencer_api_v30_sequencer_connect_service_proto_rawDescOnce sync.Once
	file_com_digitalasset_canton_sequencer_api_v30_sequencer_connect_service_proto_rawDescData []byte
)

func file_com_digitalasset_canton_sequencer_api_v30_sequencer_connect_service_proto_rawDescGZIP() []byte {
	file_com_digitalasset_canton_sequencer_api_v30_sequencer_connect_service_proto_rawDescOnce.Do(func() {
		file_com_digitalasset_canton_sequencer_api_v30_sequencer_connect_service_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_com_digitalasset_canton_sequencer_api_v30_sequencer_connect_service_proto_rawDesc), len(file_com_digitalasset_canton_sequencer_api_v30_sequencer_connect_service_proto_rawDesc)))
	})
	return file_com_digitalasset_canton_sequencer_api_v30_sequencer_connect_service_proto_rawDescData
}

var file_com_digitalasset_canton_sequencer_api_v30_sequencer_connect_service_proto_msgTypes = make([]protoimpl.MessageInfo, 15)
var file_com_digitalasset_canton_sequencer_api_v30_sequencer_connect_service_proto_goTypes = []any{
	(*SequencerConnect)(nil),                                                // 0: com.digitalasset.canton.sequencer.api.v30.SequencerConnect
	(*SequencerConnect_HandshakeRequest)(nil),                               // 1: com.digitalasset.canton.sequencer.api.v30.SequencerConnect.HandshakeRequest
	(*SequencerConnect_HandshakeResponse)(nil),                              // 2: com.digitalasset.canton.sequencer.api.v30.SequencerConnect.HandshakeResponse
	(*SequencerConnect_GetSynchronizerIdRequest)(nil),                       // 3: com.digitalasset.canton.sequencer.api.v30.SequencerConnect.GetSynchronizerIdRequest
	(*SequencerConnect_GetSynchronizerIdResponse)(nil),                      // 4: com.digitalasset.canton.sequencer.api.v30.SequencerConnect.GetSynchronizerIdResponse
	(*SequencerConnect_GetSynchronizerParametersRequest)(nil),               // 5: com.digitalasset.canton.sequencer.api.v30.SequencerConnect.GetSynchronizerParametersRequest
	(*SequencerConnect_GetSynchronizerParametersResponse)(nil),              // 6: com.digitalasset.canton.sequencer.api.v30.SequencerConnect.GetSynchronizerParametersResponse
	(*SequencerConnect_VerifyActiveRequest)(nil),                            // 7: com.digitalasset.canton.sequencer.api.v30.SequencerConnect.VerifyActiveRequest
	(*SequencerConnect_VerifyActiveResponse)(nil),                           // 8: com.digitalasset.canton.sequencer.api.v30.SequencerConnect.VerifyActiveResponse
	(*SequencerConnect_RegisterOnboardingTopologyTransactionsRequest)(nil),  // 9: com.digitalasset.canton.sequencer.api.v30.SequencerConnect.RegisterOnboardingTopologyTransactionsRequest
	(*SequencerConnect_RegisterOnboardingTopologyTransactionsResponse)(nil), // 10: com.digitalasset.canton.sequencer.api.v30.SequencerConnect.RegisterOnboardingTopologyTransactionsResponse
	(*SequencerConnect_HandshakeResponse_Success)(nil),                      // 11: com.digitalasset.canton.sequencer.api.v30.SequencerConnect.HandshakeResponse.Success
	(*SequencerConnect_HandshakeResponse_Failure)(nil),                      // 12: com.digitalasset.canton.sequencer.api.v30.SequencerConnect.HandshakeResponse.Failure
	(*SequencerConnect_VerifyActiveResponse_Success)(nil),                   // 13: com.digitalasset.canton.sequencer.api.v30.SequencerConnect.VerifyActiveResponse.Success
	(*SequencerConnect_VerifyActiveResponse_Failure)(nil),                   // 14: com.digitalasset.canton.sequencer.api.v30.SequencerConnect.VerifyActiveResponse.Failure
	(*v30.StaticSynchronizerParameters)(nil),                                // 15: com.digitalasset.canton.protocol.v30.StaticSynchronizerParameters
	(*v30.SignedTopologyTransaction)(nil),                                   // 16: com.digitalasset.canton.protocol.v30.SignedTopologyTransaction
}
var file_com_digitalasset_canton_sequencer_api_v30_sequencer_connect_service_proto_depIdxs = []int32{
	11, // 0: com.digitalasset.canton.sequencer.api.v30.SequencerConnect.HandshakeResponse.success:type_name -> com.digitalasset.canton.sequencer.api.v30.SequencerConnect.HandshakeResponse.Success
	12, // 1: com.digitalasset.canton.sequencer.api.v30.SequencerConnect.HandshakeResponse.failure:type_name -> com.digitalasset.canton.sequencer.api.v30.SequencerConnect.HandshakeResponse.Failure
	15, // 2: com.digitalasset.canton.sequencer.api.v30.SequencerConnect.GetSynchronizerParametersResponse.parameters_v1:type_name -> com.digitalasset.canton.protocol.v30.StaticSynchronizerParameters
	13, // 3: com.digitalasset.canton.sequencer.api.v30.SequencerConnect.VerifyActiveResponse.success:type_name -> com.digitalasset.canton.sequencer.api.v30.SequencerConnect.VerifyActiveResponse.Success
	14, // 4: com.digitalasset.canton.sequencer.api.v30.SequencerConnect.VerifyActiveResponse.failure:type_name -> com.digitalasset.canton.sequencer.api.v30.SequencerConnect.VerifyActiveResponse.Failure
	16, // 5: com.digitalasset.canton.sequencer.api.v30.SequencerConnect.RegisterOnboardingTopologyTransactionsRequest.topology_transactions:type_name -> com.digitalasset.canton.protocol.v30.SignedTopologyTransaction
	1,  // 6: com.digitalasset.canton.sequencer.api.v30.SequencerConnectService.Handshake:input_type -> com.digitalasset.canton.sequencer.api.v30.SequencerConnect.HandshakeRequest
	3,  // 7: com.digitalasset.canton.sequencer.api.v30.SequencerConnectService.GetSynchronizerId:input_type -> com.digitalasset.canton.sequencer.api.v30.SequencerConnect.GetSynchronizerIdRequest
	5,  // 8: com.digitalasset.canton.sequencer.api.v30.SequencerConnectService.GetSynchronizerParameters:input_type -> com.digitalasset.canton.sequencer.api.v30.SequencerConnect.GetSynchronizerParametersRequest
	7,  // 9: com.digitalasset.canton.sequencer.api.v30.SequencerConnectService.VerifyActive:input_type -> com.digitalasset.canton.sequencer.api.v30.SequencerConnect.VerifyActiveRequest
	9,  // 10: com.digitalasset.canton.sequencer.api.v30.SequencerConnectService.RegisterOnboardingTopologyTransactions:input_type -> com.digitalasset.canton.sequencer.api.v30.SequencerConnect.RegisterOnboardingTopologyTransactionsRequest
	2,  // 11: com.digitalasset.canton.sequencer.api.v30.SequencerConnectService.Handshake:output_type -> com.digitalasset.canton.sequencer.api.v30.SequencerConnect.HandshakeResponse
	4,  // 12: com.digitalasset.canton.sequencer.api.v30.SequencerConnectService.GetSynchronizerId:output_type -> com.digitalasset.canton.sequencer.api.v30.SequencerConnect.GetSynchronizerIdResponse
	6,  // 13: com.digitalasset.canton.sequencer.api.v30.SequencerConnectService.GetSynchronizerParameters:output_type -> com.digitalasset.canton.sequencer.api.v30.SequencerConnect.GetSynchronizerParametersResponse
	8,  // 14: com.digitalasset.canton.sequencer.api.v30.SequencerConnectService.VerifyActive:output_type -> com.digitalasset.canton.sequencer.api.v30.SequencerConnect.VerifyActiveResponse
	10, // 15: com.digitalasset.canton.sequencer.api.v30.SequencerConnectService.RegisterOnboardingTopologyTransactions:output_type -> com.digitalasset.canton.sequencer.api.v30.SequencerConnect.RegisterOnboardingTopologyTransactionsResponse
	11, // [11:16] is the sub-list for method output_type
	6,  // [6:11] is the sub-list for method input_type
	6,  // [6:6] is the sub-list for extension type_name
	6,  // [6:6] is the sub-list for extension extendee
	0,  // [0:6] is the sub-list for field type_name
}

func init() { file_com_digitalasset_canton_sequencer_api_v30_sequencer_connect_service_proto_init() }
func file_com_digitalasset_canton_sequencer_api_v30_sequencer_connect_service_proto_init() {
	if File_com_digitalasset_canton_sequencer_api_v30_sequencer_connect_service_proto != nil {
		return
	}
	file_com_digitalasset_canton_sequencer_api_v30_sequencer_connect_service_proto_msgTypes[1].OneofWrappers = []any{}
	file_com_digitalasset_canton_sequencer_api_v30_sequencer_connect_service_proto_msgTypes[2].OneofWrappers = []any{
		(*SequencerConnect_HandshakeResponse_Success_)(nil),
		(*SequencerConnect_HandshakeResponse_Failure_)(nil),
	}
	file_com_digitalasset_canton_sequencer_api_v30_sequencer_connect_service_proto_msgTypes[6].OneofWrappers = []any{
		(*SequencerConnect_GetSynchronizerParametersResponse_ParametersV1)(nil),
	}
	file_com_digitalasset_canton_sequencer_api_v30_sequencer_connect_service_proto_msgTypes[8].OneofWrappers = []any{
		(*SequencerConnect_VerifyActiveResponse_Success_)(nil),
		(*SequencerConnect_VerifyActiveResponse_Failure_)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_com_digitalasset_canton_sequencer_api_v30_sequencer_connect_service_proto_rawDesc), len(file_com_digitalasset_canton_sequencer_api_v30_sequencer_connect_service_proto_rawDesc)),
			NumEnums:      0,
			NumMessages:   15,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_com_digitalasset_canton_sequencer_api_v30_sequencer_connect_service_proto_goTypes,
		DependencyIndexes: file_com_digitalasset_canton_sequencer_api_v30_sequencer_connect_service_proto_depIdxs,
		MessageInfos:      file_com_digitalasset_canton_sequencer_api_v30_sequencer_connect_service_proto_msgTypes,
	}.Build()
	File_com_digitalasset_canton_sequencer_api_v30_sequencer_connect_service_proto = out.File
	file_com_digitalasset_canton_sequencer_api_v30_sequencer_connect_service_proto_goTypes = nil
	file_com_digitalasset_canton_sequencer_api_v30_sequencer_connect_service_proto_depIdxs = nil
}
