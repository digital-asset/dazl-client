// Copyright (c) 2017-2025 Digital Asset (Switzerland) GmbH and/or its affiliates. All rights reserved.
// SPDX-License-Identifier: Apache-2.0
// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.35.2
// 	protoc        v5.27.2
// source: com/digitalasset/canton/sequencer/admin/v30/sequencer_initialization_snapshot.proto

package v30

import (
	v301 "github.com/digital-asset/dazl-client/v8/go/api/com/digitalasset/canton/crypto/v30"
	v30 "github.com/digital-asset/dazl-client/v8/go/api/com/digitalasset/canton/protocol/v30"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	wrapperspb "google.golang.org/protobuf/types/known/wrapperspb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type SequencerSnapshot struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	LatestTimestamp      int64                                          `protobuf:"varint,1,opt,name=latest_timestamp,json=latestTimestamp,proto3" json:"latest_timestamp,omitempty"`
	LastBlockHeight      uint64                                         `protobuf:"varint,2,opt,name=last_block_height,json=lastBlockHeight,proto3" json:"last_block_height,omitempty"`
	HeadMemberCounters   []*SequencerSnapshot_MemberCounter             `protobuf:"bytes,3,rep,name=head_member_counters,json=headMemberCounters,proto3" json:"head_member_counters,omitempty"`
	Status               *SequencerPruningStatus                        `protobuf:"bytes,4,opt,name=status,proto3" json:"status,omitempty"`
	Additional           *ImplementationSpecificInfo                    `protobuf:"bytes,5,opt,name=additional,proto3" json:"additional,omitempty"`
	InFlightAggregations []*SequencerSnapshot_InFlightAggregationWithId `protobuf:"bytes,6,rep,name=in_flight_aggregations,json=inFlightAggregations,proto3" json:"in_flight_aggregations,omitempty"`
	TrafficPurchased     []*v30.TrafficPurchased                        `protobuf:"bytes,7,rep,name=traffic_purchased,json=trafficPurchased,proto3" json:"traffic_purchased,omitempty"`
	TrafficConsumed      []*v30.TrafficConsumed                         `protobuf:"bytes,8,rep,name=traffic_consumed,json=trafficConsumed,proto3" json:"traffic_consumed,omitempty"`
}

func (x *SequencerSnapshot) Reset() {
	*x = SequencerSnapshot{}
	mi := &file_com_digitalasset_canton_sequencer_admin_v30_sequencer_initialization_snapshot_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SequencerSnapshot) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SequencerSnapshot) ProtoMessage() {}

func (x *SequencerSnapshot) ProtoReflect() protoreflect.Message {
	mi := &file_com_digitalasset_canton_sequencer_admin_v30_sequencer_initialization_snapshot_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SequencerSnapshot.ProtoReflect.Descriptor instead.
func (*SequencerSnapshot) Descriptor() ([]byte, []int) {
	return file_com_digitalasset_canton_sequencer_admin_v30_sequencer_initialization_snapshot_proto_rawDescGZIP(), []int{0}
}

func (x *SequencerSnapshot) GetLatestTimestamp() int64 {
	if x != nil {
		return x.LatestTimestamp
	}
	return 0
}

func (x *SequencerSnapshot) GetLastBlockHeight() uint64 {
	if x != nil {
		return x.LastBlockHeight
	}
	return 0
}

func (x *SequencerSnapshot) GetHeadMemberCounters() []*SequencerSnapshot_MemberCounter {
	if x != nil {
		return x.HeadMemberCounters
	}
	return nil
}

func (x *SequencerSnapshot) GetStatus() *SequencerPruningStatus {
	if x != nil {
		return x.Status
	}
	return nil
}

func (x *SequencerSnapshot) GetAdditional() *ImplementationSpecificInfo {
	if x != nil {
		return x.Additional
	}
	return nil
}

func (x *SequencerSnapshot) GetInFlightAggregations() []*SequencerSnapshot_InFlightAggregationWithId {
	if x != nil {
		return x.InFlightAggregations
	}
	return nil
}

func (x *SequencerSnapshot) GetTrafficPurchased() []*v30.TrafficPurchased {
	if x != nil {
		return x.TrafficPurchased
	}
	return nil
}

func (x *SequencerSnapshot) GetTrafficConsumed() []*v30.TrafficConsumed {
	if x != nil {
		return x.TrafficConsumed
	}
	return nil
}

type SequencerMemberStatus struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Member           string                 `protobuf:"bytes,1,opt,name=member,proto3" json:"member,omitempty"`
	RegisteredAt     int64                  `protobuf:"varint,2,opt,name=registered_at,json=registeredAt,proto3" json:"registered_at,omitempty"`
	LastAcknowledged *wrapperspb.Int64Value `protobuf:"bytes,3,opt,name=last_acknowledged,json=lastAcknowledged,proto3" json:"last_acknowledged,omitempty"`
	Enabled          bool                   `protobuf:"varint,4,opt,name=enabled,proto3" json:"enabled,omitempty"`
}

func (x *SequencerMemberStatus) Reset() {
	*x = SequencerMemberStatus{}
	mi := &file_com_digitalasset_canton_sequencer_admin_v30_sequencer_initialization_snapshot_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SequencerMemberStatus) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SequencerMemberStatus) ProtoMessage() {}

func (x *SequencerMemberStatus) ProtoReflect() protoreflect.Message {
	mi := &file_com_digitalasset_canton_sequencer_admin_v30_sequencer_initialization_snapshot_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SequencerMemberStatus.ProtoReflect.Descriptor instead.
func (*SequencerMemberStatus) Descriptor() ([]byte, []int) {
	return file_com_digitalasset_canton_sequencer_admin_v30_sequencer_initialization_snapshot_proto_rawDescGZIP(), []int{1}
}

func (x *SequencerMemberStatus) GetMember() string {
	if x != nil {
		return x.Member
	}
	return ""
}

func (x *SequencerMemberStatus) GetRegisteredAt() int64 {
	if x != nil {
		return x.RegisteredAt
	}
	return 0
}

func (x *SequencerMemberStatus) GetLastAcknowledged() *wrapperspb.Int64Value {
	if x != nil {
		return x.LastAcknowledged
	}
	return nil
}

func (x *SequencerMemberStatus) GetEnabled() bool {
	if x != nil {
		return x.Enabled
	}
	return false
}

type SequencerPruningStatus struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Now                    int64                    `protobuf:"varint,1,opt,name=now,proto3" json:"now,omitempty"`
	EarliestEventTimestamp int64                    `protobuf:"varint,2,opt,name=earliest_event_timestamp,json=earliestEventTimestamp,proto3" json:"earliest_event_timestamp,omitempty"`
	Members                []*SequencerMemberStatus `protobuf:"bytes,3,rep,name=members,proto3" json:"members,omitempty"`
}

func (x *SequencerPruningStatus) Reset() {
	*x = SequencerPruningStatus{}
	mi := &file_com_digitalasset_canton_sequencer_admin_v30_sequencer_initialization_snapshot_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SequencerPruningStatus) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SequencerPruningStatus) ProtoMessage() {}

func (x *SequencerPruningStatus) ProtoReflect() protoreflect.Message {
	mi := &file_com_digitalasset_canton_sequencer_admin_v30_sequencer_initialization_snapshot_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SequencerPruningStatus.ProtoReflect.Descriptor instead.
func (*SequencerPruningStatus) Descriptor() ([]byte, []int) {
	return file_com_digitalasset_canton_sequencer_admin_v30_sequencer_initialization_snapshot_proto_rawDescGZIP(), []int{2}
}

func (x *SequencerPruningStatus) GetNow() int64 {
	if x != nil {
		return x.Now
	}
	return 0
}

func (x *SequencerPruningStatus) GetEarliestEventTimestamp() int64 {
	if x != nil {
		return x.EarliestEventTimestamp
	}
	return 0
}

func (x *SequencerPruningStatus) GetMembers() []*SequencerMemberStatus {
	if x != nil {
		return x.Members
	}
	return nil
}

type ImplementationSpecificInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ImplementationName string `protobuf:"bytes,1,opt,name=implementation_name,json=implementationName,proto3" json:"implementation_name,omitempty"`
	Info               []byte `protobuf:"bytes,2,opt,name=info,proto3" json:"info,omitempty"`
}

func (x *ImplementationSpecificInfo) Reset() {
	*x = ImplementationSpecificInfo{}
	mi := &file_com_digitalasset_canton_sequencer_admin_v30_sequencer_initialization_snapshot_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ImplementationSpecificInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ImplementationSpecificInfo) ProtoMessage() {}

func (x *ImplementationSpecificInfo) ProtoReflect() protoreflect.Message {
	mi := &file_com_digitalasset_canton_sequencer_admin_v30_sequencer_initialization_snapshot_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ImplementationSpecificInfo.ProtoReflect.Descriptor instead.
func (*ImplementationSpecificInfo) Descriptor() ([]byte, []int) {
	return file_com_digitalasset_canton_sequencer_admin_v30_sequencer_initialization_snapshot_proto_rawDescGZIP(), []int{3}
}

func (x *ImplementationSpecificInfo) GetImplementationName() string {
	if x != nil {
		return x.ImplementationName
	}
	return ""
}

func (x *ImplementationSpecificInfo) GetInfo() []byte {
	if x != nil {
		return x.Info
	}
	return nil
}

type SequencerSnapshot_MemberCounter struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Member           string `protobuf:"bytes,1,opt,name=member,proto3" json:"member,omitempty"`
	SequencerCounter int64  `protobuf:"varint,2,opt,name=sequencer_counter,json=sequencerCounter,proto3" json:"sequencer_counter,omitempty"`
}

func (x *SequencerSnapshot_MemberCounter) Reset() {
	*x = SequencerSnapshot_MemberCounter{}
	mi := &file_com_digitalasset_canton_sequencer_admin_v30_sequencer_initialization_snapshot_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SequencerSnapshot_MemberCounter) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SequencerSnapshot_MemberCounter) ProtoMessage() {}

func (x *SequencerSnapshot_MemberCounter) ProtoReflect() protoreflect.Message {
	mi := &file_com_digitalasset_canton_sequencer_admin_v30_sequencer_initialization_snapshot_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SequencerSnapshot_MemberCounter.ProtoReflect.Descriptor instead.
func (*SequencerSnapshot_MemberCounter) Descriptor() ([]byte, []int) {
	return file_com_digitalasset_canton_sequencer_admin_v30_sequencer_initialization_snapshot_proto_rawDescGZIP(), []int{0, 0}
}

func (x *SequencerSnapshot_MemberCounter) GetMember() string {
	if x != nil {
		return x.Member
	}
	return ""
}

func (x *SequencerSnapshot_MemberCounter) GetSequencerCounter() int64 {
	if x != nil {
		return x.SequencerCounter
	}
	return 0
}

type SequencerSnapshot_InFlightAggregationWithId struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AggregationId     []byte                                   `protobuf:"bytes,1,opt,name=aggregation_id,json=aggregationId,proto3" json:"aggregation_id,omitempty"`
	AggregationRule   *v30.AggregationRule                     `protobuf:"bytes,2,opt,name=aggregation_rule,json=aggregationRule,proto3" json:"aggregation_rule,omitempty"`
	MaxSequencingTime int64                                    `protobuf:"varint,3,opt,name=max_sequencing_time,json=maxSequencingTime,proto3" json:"max_sequencing_time,omitempty"`
	AggregatedSenders []*SequencerSnapshot_AggregationBySender `protobuf:"bytes,4,rep,name=aggregated_senders,json=aggregatedSenders,proto3" json:"aggregated_senders,omitempty"`
}

func (x *SequencerSnapshot_InFlightAggregationWithId) Reset() {
	*x = SequencerSnapshot_InFlightAggregationWithId{}
	mi := &file_com_digitalasset_canton_sequencer_admin_v30_sequencer_initialization_snapshot_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SequencerSnapshot_InFlightAggregationWithId) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SequencerSnapshot_InFlightAggregationWithId) ProtoMessage() {}

func (x *SequencerSnapshot_InFlightAggregationWithId) ProtoReflect() protoreflect.Message {
	mi := &file_com_digitalasset_canton_sequencer_admin_v30_sequencer_initialization_snapshot_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SequencerSnapshot_InFlightAggregationWithId.ProtoReflect.Descriptor instead.
func (*SequencerSnapshot_InFlightAggregationWithId) Descriptor() ([]byte, []int) {
	return file_com_digitalasset_canton_sequencer_admin_v30_sequencer_initialization_snapshot_proto_rawDescGZIP(), []int{0, 1}
}

func (x *SequencerSnapshot_InFlightAggregationWithId) GetAggregationId() []byte {
	if x != nil {
		return x.AggregationId
	}
	return nil
}

func (x *SequencerSnapshot_InFlightAggregationWithId) GetAggregationRule() *v30.AggregationRule {
	if x != nil {
		return x.AggregationRule
	}
	return nil
}

func (x *SequencerSnapshot_InFlightAggregationWithId) GetMaxSequencingTime() int64 {
	if x != nil {
		return x.MaxSequencingTime
	}
	return 0
}

func (x *SequencerSnapshot_InFlightAggregationWithId) GetAggregatedSenders() []*SequencerSnapshot_AggregationBySender {
	if x != nil {
		return x.AggregatedSenders
	}
	return nil
}

type SequencerSnapshot_AggregationBySender struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Sender               string                                     `protobuf:"bytes,1,opt,name=sender,proto3" json:"sender,omitempty"`
	SequencingTimestamp  int64                                      `protobuf:"varint,2,opt,name=sequencing_timestamp,json=sequencingTimestamp,proto3" json:"sequencing_timestamp,omitempty"`
	SignaturesByEnvelope []*SequencerSnapshot_SignaturesForEnvelope `protobuf:"bytes,3,rep,name=signatures_by_envelope,json=signaturesByEnvelope,proto3" json:"signatures_by_envelope,omitempty"`
}

func (x *SequencerSnapshot_AggregationBySender) Reset() {
	*x = SequencerSnapshot_AggregationBySender{}
	mi := &file_com_digitalasset_canton_sequencer_admin_v30_sequencer_initialization_snapshot_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SequencerSnapshot_AggregationBySender) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SequencerSnapshot_AggregationBySender) ProtoMessage() {}

func (x *SequencerSnapshot_AggregationBySender) ProtoReflect() protoreflect.Message {
	mi := &file_com_digitalasset_canton_sequencer_admin_v30_sequencer_initialization_snapshot_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SequencerSnapshot_AggregationBySender.ProtoReflect.Descriptor instead.
func (*SequencerSnapshot_AggregationBySender) Descriptor() ([]byte, []int) {
	return file_com_digitalasset_canton_sequencer_admin_v30_sequencer_initialization_snapshot_proto_rawDescGZIP(), []int{0, 2}
}

func (x *SequencerSnapshot_AggregationBySender) GetSender() string {
	if x != nil {
		return x.Sender
	}
	return ""
}

func (x *SequencerSnapshot_AggregationBySender) GetSequencingTimestamp() int64 {
	if x != nil {
		return x.SequencingTimestamp
	}
	return 0
}

func (x *SequencerSnapshot_AggregationBySender) GetSignaturesByEnvelope() []*SequencerSnapshot_SignaturesForEnvelope {
	if x != nil {
		return x.SignaturesByEnvelope
	}
	return nil
}

type SequencerSnapshot_SignaturesForEnvelope struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Signatures []*v301.Signature `protobuf:"bytes,3,rep,name=signatures,proto3" json:"signatures,omitempty"`
}

func (x *SequencerSnapshot_SignaturesForEnvelope) Reset() {
	*x = SequencerSnapshot_SignaturesForEnvelope{}
	mi := &file_com_digitalasset_canton_sequencer_admin_v30_sequencer_initialization_snapshot_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SequencerSnapshot_SignaturesForEnvelope) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SequencerSnapshot_SignaturesForEnvelope) ProtoMessage() {}

func (x *SequencerSnapshot_SignaturesForEnvelope) ProtoReflect() protoreflect.Message {
	mi := &file_com_digitalasset_canton_sequencer_admin_v30_sequencer_initialization_snapshot_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SequencerSnapshot_SignaturesForEnvelope.ProtoReflect.Descriptor instead.
func (*SequencerSnapshot_SignaturesForEnvelope) Descriptor() ([]byte, []int) {
	return file_com_digitalasset_canton_sequencer_admin_v30_sequencer_initialization_snapshot_proto_rawDescGZIP(), []int{0, 3}
}

func (x *SequencerSnapshot_SignaturesForEnvelope) GetSignatures() []*v301.Signature {
	if x != nil {
		return x.Signatures
	}
	return nil
}

var File_com_digitalasset_canton_sequencer_admin_v30_sequencer_initialization_snapshot_proto protoreflect.FileDescriptor

var file_com_digitalasset_canton_sequencer_admin_v30_sequencer_initialization_snapshot_proto_rawDesc = []byte{
	0x0a, 0x53, 0x63, 0x6f, 0x6d, 0x2f, 0x64, 0x69, 0x67, 0x69, 0x74, 0x61, 0x6c, 0x61, 0x73, 0x73,
	0x65, 0x74, 0x2f, 0x63, 0x61, 0x6e, 0x74, 0x6f, 0x6e, 0x2f, 0x73, 0x65, 0x71, 0x75, 0x65, 0x6e,
	0x63, 0x65, 0x72, 0x2f, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2f, 0x76, 0x33, 0x30, 0x2f, 0x73, 0x65,
	0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x72, 0x5f, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x61, 0x6c, 0x69,
	0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x73, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x2b, 0x63, 0x6f, 0x6d, 0x2e, 0x64, 0x69, 0x67, 0x69, 0x74,
	0x61, 0x6c, 0x61, 0x73, 0x73, 0x65, 0x74, 0x2e, 0x63, 0x61, 0x6e, 0x74, 0x6f, 0x6e, 0x2e, 0x73,
	0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x72, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x76,
	0x33, 0x30, 0x1a, 0x2f, 0x63, 0x6f, 0x6d, 0x2f, 0x64, 0x69, 0x67, 0x69, 0x74, 0x61, 0x6c, 0x61,
	0x73, 0x73, 0x65, 0x74, 0x2f, 0x63, 0x61, 0x6e, 0x74, 0x6f, 0x6e, 0x2f, 0x63, 0x72, 0x79, 0x70,
	0x74, 0x6f, 0x2f, 0x76, 0x33, 0x30, 0x2f, 0x63, 0x72, 0x79, 0x70, 0x74, 0x6f, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x1a, 0x38, 0x63, 0x6f, 0x6d, 0x2f, 0x64, 0x69, 0x67, 0x69, 0x74, 0x61, 0x6c,
	0x61, 0x73, 0x73, 0x65, 0x74, 0x2f, 0x63, 0x61, 0x6e, 0x74, 0x6f, 0x6e, 0x2f, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2f, 0x76, 0x33, 0x30, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e,
	0x5f, 0x73, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x45, 0x63,
	0x6f, 0x6d, 0x2f, 0x64, 0x69, 0x67, 0x69, 0x74, 0x61, 0x6c, 0x61, 0x73, 0x73, 0x65, 0x74, 0x2f,
	0x63, 0x61, 0x6e, 0x74, 0x6f, 0x6e, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2f,
	0x76, 0x33, 0x30, 0x2f, 0x74, 0x72, 0x61, 0x66, 0x66, 0x69, 0x63, 0x5f, 0x63, 0x6f, 0x6e, 0x74,
	0x72, 0x6f, 0x6c, 0x5f, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x73, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x22, 0x91, 0x0c, 0x0a, 0x11, 0x53, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63,
	0x65, 0x72, 0x53, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x12, 0x29, 0x0a, 0x10, 0x6c, 0x61,
	0x74, 0x65, 0x73, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x0f, 0x6c, 0x61, 0x74, 0x65, 0x73, 0x74, 0x54, 0x69, 0x6d, 0x65,
	0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x2a, 0x0a, 0x11, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x62, 0x6c,
	0x6f, 0x63, 0x6b, 0x5f, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x0f, 0x6c, 0x61, 0x73, 0x74, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x48, 0x65, 0x69, 0x67, 0x68,
	0x74, 0x12, 0x7e, 0x0a, 0x14, 0x68, 0x65, 0x61, 0x64, 0x5f, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72,
	0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x4c, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x64, 0x69, 0x67, 0x69, 0x74, 0x61, 0x6c, 0x61, 0x73, 0x73,
	0x65, 0x74, 0x2e, 0x63, 0x61, 0x6e, 0x74, 0x6f, 0x6e, 0x2e, 0x73, 0x65, 0x71, 0x75, 0x65, 0x6e,
	0x63, 0x65, 0x72, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x76, 0x33, 0x30, 0x2e, 0x53, 0x65,
	0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x72, 0x53, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x2e,
	0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x52, 0x12, 0x68,
	0x65, 0x61, 0x64, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72,
	0x73, 0x12, 0x5b, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x43, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x64, 0x69, 0x67, 0x69, 0x74, 0x61, 0x6c, 0x61,
	0x73, 0x73, 0x65, 0x74, 0x2e, 0x63, 0x61, 0x6e, 0x74, 0x6f, 0x6e, 0x2e, 0x73, 0x65, 0x71, 0x75,
	0x65, 0x6e, 0x63, 0x65, 0x72, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x76, 0x33, 0x30, 0x2e,
	0x53, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x72, 0x50, 0x72, 0x75, 0x6e, 0x69, 0x6e, 0x67,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x67,
	0x0a, 0x0a, 0x61, 0x64, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x47, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x64, 0x69, 0x67, 0x69, 0x74, 0x61, 0x6c,
	0x61, 0x73, 0x73, 0x65, 0x74, 0x2e, 0x63, 0x61, 0x6e, 0x74, 0x6f, 0x6e, 0x2e, 0x73, 0x65, 0x71,
	0x75, 0x65, 0x6e, 0x63, 0x65, 0x72, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x76, 0x33, 0x30,
	0x2e, 0x49, 0x6d, 0x70, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53,
	0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x63, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0a, 0x61, 0x64, 0x64,
	0x69, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x12, 0x8e, 0x01, 0x0a, 0x16, 0x69, 0x6e, 0x5f, 0x66,
	0x6c, 0x69, 0x67, 0x68, 0x74, 0x5f, 0x61, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x58, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x64,
	0x69, 0x67, 0x69, 0x74, 0x61, 0x6c, 0x61, 0x73, 0x73, 0x65, 0x74, 0x2e, 0x63, 0x61, 0x6e, 0x74,
	0x6f, 0x6e, 0x2e, 0x73, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x72, 0x2e, 0x61, 0x64, 0x6d,
	0x69, 0x6e, 0x2e, 0x76, 0x33, 0x30, 0x2e, 0x53, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x72,
	0x53, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x2e, 0x49, 0x6e, 0x46, 0x6c, 0x69, 0x67, 0x68,
	0x74, 0x41, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x57, 0x69, 0x74, 0x68,
	0x49, 0x64, 0x52, 0x14, 0x69, 0x6e, 0x46, 0x6c, 0x69, 0x67, 0x68, 0x74, 0x41, 0x67, 0x67, 0x72,
	0x65, 0x67, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x63, 0x0a, 0x11, 0x74, 0x72, 0x61, 0x66,
	0x66, 0x69, 0x63, 0x5f, 0x70, 0x75, 0x72, 0x63, 0x68, 0x61, 0x73, 0x65, 0x64, 0x18, 0x07, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x36, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x64, 0x69, 0x67, 0x69, 0x74, 0x61,
	0x6c, 0x61, 0x73, 0x73, 0x65, 0x74, 0x2e, 0x63, 0x61, 0x6e, 0x74, 0x6f, 0x6e, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x76, 0x33, 0x30, 0x2e, 0x54, 0x72, 0x61, 0x66, 0x66,
	0x69, 0x63, 0x50, 0x75, 0x72, 0x63, 0x68, 0x61, 0x73, 0x65, 0x64, 0x52, 0x10, 0x74, 0x72, 0x61,
	0x66, 0x66, 0x69, 0x63, 0x50, 0x75, 0x72, 0x63, 0x68, 0x61, 0x73, 0x65, 0x64, 0x12, 0x60, 0x0a,
	0x10, 0x74, 0x72, 0x61, 0x66, 0x66, 0x69, 0x63, 0x5f, 0x63, 0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x65,
	0x64, 0x18, 0x08, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x35, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x64, 0x69,
	0x67, 0x69, 0x74, 0x61, 0x6c, 0x61, 0x73, 0x73, 0x65, 0x74, 0x2e, 0x63, 0x61, 0x6e, 0x74, 0x6f,
	0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x76, 0x33, 0x30, 0x2e, 0x54,
	0x72, 0x61, 0x66, 0x66, 0x69, 0x63, 0x43, 0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x65, 0x64, 0x52, 0x0f,
	0x74, 0x72, 0x61, 0x66, 0x66, 0x69, 0x63, 0x43, 0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x65, 0x64, 0x1a,
	0x54, 0x0a, 0x0d, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72,
	0x12, 0x16, 0x0a, 0x06, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x06, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x2b, 0x0a, 0x11, 0x73, 0x65, 0x71, 0x75,
	0x65, 0x6e, 0x63, 0x65, 0x72, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x10, 0x73, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x72, 0x43, 0x6f,
	0x75, 0x6e, 0x74, 0x65, 0x72, 0x1a, 0xd8, 0x02, 0x0a, 0x19, 0x49, 0x6e, 0x46, 0x6c, 0x69, 0x67,
	0x68, 0x74, 0x41, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x57, 0x69, 0x74,
	0x68, 0x49, 0x64, 0x12, 0x25, 0x0a, 0x0e, 0x61, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0d, 0x61, 0x67, 0x67,
	0x72, 0x65, 0x67, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x60, 0x0a, 0x10, 0x61, 0x67,
	0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x72, 0x75, 0x6c, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x35, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x64, 0x69, 0x67, 0x69, 0x74,
	0x61, 0x6c, 0x61, 0x73, 0x73, 0x65, 0x74, 0x2e, 0x63, 0x61, 0x6e, 0x74, 0x6f, 0x6e, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x76, 0x33, 0x30, 0x2e, 0x41, 0x67, 0x67, 0x72,
	0x65, 0x67, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x75, 0x6c, 0x65, 0x52, 0x0f, 0x61, 0x67, 0x67,
	0x72, 0x65, 0x67, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x75, 0x6c, 0x65, 0x12, 0x2e, 0x0a, 0x13,
	0x6d, 0x61, 0x78, 0x5f, 0x73, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x69, 0x6e, 0x67, 0x5f, 0x74,
	0x69, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x11, 0x6d, 0x61, 0x78, 0x53, 0x65,
	0x71, 0x75, 0x65, 0x6e, 0x63, 0x69, 0x6e, 0x67, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x81, 0x01, 0x0a,
	0x12, 0x61, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x73, 0x65, 0x6e, 0x64,
	0x65, 0x72, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x52, 0x2e, 0x63, 0x6f, 0x6d, 0x2e,
	0x64, 0x69, 0x67, 0x69, 0x74, 0x61, 0x6c, 0x61, 0x73, 0x73, 0x65, 0x74, 0x2e, 0x63, 0x61, 0x6e,
	0x74, 0x6f, 0x6e, 0x2e, 0x73, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x72, 0x2e, 0x61, 0x64,
	0x6d, 0x69, 0x6e, 0x2e, 0x76, 0x33, 0x30, 0x2e, 0x53, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65,
	0x72, 0x53, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x2e, 0x41, 0x67, 0x67, 0x72, 0x65, 0x67,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x79, 0x53, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x52, 0x11, 0x61,
	0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x65, 0x64, 0x53, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x73,
	0x1a, 0xed, 0x01, 0x0a, 0x13, 0x41, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x42, 0x79, 0x53, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x65, 0x6e, 0x64,
	0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x65, 0x6e, 0x64, 0x65, 0x72,
	0x12, 0x31, 0x0a, 0x14, 0x73, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x69, 0x6e, 0x67, 0x5f, 0x74,
	0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x13,
	0x73, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x69, 0x6e, 0x67, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74,
	0x61, 0x6d, 0x70, 0x12, 0x8a, 0x01, 0x0a, 0x16, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72,
	0x65, 0x73, 0x5f, 0x62, 0x79, 0x5f, 0x65, 0x6e, 0x76, 0x65, 0x6c, 0x6f, 0x70, 0x65, 0x18, 0x03,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x54, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x64, 0x69, 0x67, 0x69, 0x74,
	0x61, 0x6c, 0x61, 0x73, 0x73, 0x65, 0x74, 0x2e, 0x63, 0x61, 0x6e, 0x74, 0x6f, 0x6e, 0x2e, 0x73,
	0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x72, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x76,
	0x33, 0x30, 0x2e, 0x53, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x72, 0x53, 0x6e, 0x61, 0x70,
	0x73, 0x68, 0x6f, 0x74, 0x2e, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x73, 0x46,
	0x6f, 0x72, 0x45, 0x6e, 0x76, 0x65, 0x6c, 0x6f, 0x70, 0x65, 0x52, 0x14, 0x73, 0x69, 0x67, 0x6e,
	0x61, 0x74, 0x75, 0x72, 0x65, 0x73, 0x42, 0x79, 0x45, 0x6e, 0x76, 0x65, 0x6c, 0x6f, 0x70, 0x65,
	0x1a, 0x66, 0x0a, 0x15, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x73, 0x46, 0x6f,
	0x72, 0x45, 0x6e, 0x76, 0x65, 0x6c, 0x6f, 0x70, 0x65, 0x12, 0x4d, 0x0a, 0x0a, 0x73, 0x69, 0x67,
	0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2d, 0x2e,
	0x63, 0x6f, 0x6d, 0x2e, 0x64, 0x69, 0x67, 0x69, 0x74, 0x61, 0x6c, 0x61, 0x73, 0x73, 0x65, 0x74,
	0x2e, 0x63, 0x61, 0x6e, 0x74, 0x6f, 0x6e, 0x2e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x6f, 0x2e, 0x76,
	0x33, 0x30, 0x2e, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x52, 0x0a, 0x73, 0x69,
	0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x73, 0x22, 0xb8, 0x01, 0x0a, 0x15, 0x53, 0x65, 0x71,
	0x75, 0x65, 0x6e, 0x63, 0x65, 0x72, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x06, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x23, 0x0a, 0x0d, 0x72, 0x65,
	0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x0c, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x65, 0x64, 0x41, 0x74, 0x12,
	0x48, 0x0a, 0x11, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x61, 0x63, 0x6b, 0x6e, 0x6f, 0x77, 0x6c, 0x65,
	0x64, 0x67, 0x65, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x49, 0x6e, 0x74,
	0x36, 0x34, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x10, 0x6c, 0x61, 0x73, 0x74, 0x41, 0x63, 0x6b,
	0x6e, 0x6f, 0x77, 0x6c, 0x65, 0x64, 0x67, 0x65, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x65, 0x6e, 0x61,
	0x62, 0x6c, 0x65, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x65, 0x6e, 0x61, 0x62,
	0x6c, 0x65, 0x64, 0x22, 0xc2, 0x01, 0x0a, 0x16, 0x53, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65,
	0x72, 0x50, 0x72, 0x75, 0x6e, 0x69, 0x6e, 0x67, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x10,
	0x0a, 0x03, 0x6e, 0x6f, 0x77, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x03, 0x6e, 0x6f, 0x77,
	0x12, 0x38, 0x0a, 0x18, 0x65, 0x61, 0x72, 0x6c, 0x69, 0x65, 0x73, 0x74, 0x5f, 0x65, 0x76, 0x65,
	0x6e, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x16, 0x65, 0x61, 0x72, 0x6c, 0x69, 0x65, 0x73, 0x74, 0x45, 0x76, 0x65, 0x6e,
	0x74, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x5c, 0x0a, 0x07, 0x6d, 0x65,
	0x6d, 0x62, 0x65, 0x72, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x42, 0x2e, 0x63, 0x6f,
	0x6d, 0x2e, 0x64, 0x69, 0x67, 0x69, 0x74, 0x61, 0x6c, 0x61, 0x73, 0x73, 0x65, 0x74, 0x2e, 0x63,
	0x61, 0x6e, 0x74, 0x6f, 0x6e, 0x2e, 0x73, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x72, 0x2e,
	0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x76, 0x33, 0x30, 0x2e, 0x53, 0x65, 0x71, 0x75, 0x65, 0x6e,
	0x63, 0x65, 0x72, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52,
	0x07, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x22, 0x61, 0x0a, 0x1a, 0x49, 0x6d, 0x70, 0x6c,
	0x65, 0x6d, 0x65, 0x6e, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x70, 0x65, 0x63, 0x69, 0x66,
	0x69, 0x63, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x2f, 0x0a, 0x13, 0x69, 0x6d, 0x70, 0x6c, 0x65, 0x6d,
	0x65, 0x6e, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x12, 0x69, 0x6d, 0x70, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x69, 0x6e, 0x66, 0x6f, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x04, 0x69, 0x6e, 0x66, 0x6f, 0x42, 0x5c, 0x5a, 0x5a, 0x67,
	0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x64, 0x69, 0x67, 0x69, 0x74, 0x61,
	0x6c, 0x2d, 0x61, 0x73, 0x73, 0x65, 0x74, 0x2f, 0x64, 0x61, 0x7a, 0x6c, 0x2d, 0x63, 0x6c, 0x69,
	0x65, 0x6e, 0x74, 0x2f, 0x76, 0x38, 0x2f, 0x67, 0x6f, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x63, 0x6f,
	0x6d, 0x2f, 0x64, 0x69, 0x67, 0x69, 0x74, 0x61, 0x6c, 0x61, 0x73, 0x73, 0x65, 0x74, 0x2f, 0x63,
	0x61, 0x6e, 0x74, 0x6f, 0x6e, 0x2f, 0x73, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x72, 0x2f,
	0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2f, 0x76, 0x33, 0x30, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x33,
}

var (
	file_com_digitalasset_canton_sequencer_admin_v30_sequencer_initialization_snapshot_proto_rawDescOnce sync.Once
	file_com_digitalasset_canton_sequencer_admin_v30_sequencer_initialization_snapshot_proto_rawDescData = file_com_digitalasset_canton_sequencer_admin_v30_sequencer_initialization_snapshot_proto_rawDesc
)

func file_com_digitalasset_canton_sequencer_admin_v30_sequencer_initialization_snapshot_proto_rawDescGZIP() []byte {
	file_com_digitalasset_canton_sequencer_admin_v30_sequencer_initialization_snapshot_proto_rawDescOnce.Do(func() {
		file_com_digitalasset_canton_sequencer_admin_v30_sequencer_initialization_snapshot_proto_rawDescData = protoimpl.X.CompressGZIP(file_com_digitalasset_canton_sequencer_admin_v30_sequencer_initialization_snapshot_proto_rawDescData)
	})
	return file_com_digitalasset_canton_sequencer_admin_v30_sequencer_initialization_snapshot_proto_rawDescData
}

var file_com_digitalasset_canton_sequencer_admin_v30_sequencer_initialization_snapshot_proto_msgTypes = make([]protoimpl.MessageInfo, 8)
var file_com_digitalasset_canton_sequencer_admin_v30_sequencer_initialization_snapshot_proto_goTypes = []any{
	(*SequencerSnapshot)(nil),                           // 0: com.digitalasset.canton.sequencer.admin.v30.SequencerSnapshot
	(*SequencerMemberStatus)(nil),                       // 1: com.digitalasset.canton.sequencer.admin.v30.SequencerMemberStatus
	(*SequencerPruningStatus)(nil),                      // 2: com.digitalasset.canton.sequencer.admin.v30.SequencerPruningStatus
	(*ImplementationSpecificInfo)(nil),                  // 3: com.digitalasset.canton.sequencer.admin.v30.ImplementationSpecificInfo
	(*SequencerSnapshot_MemberCounter)(nil),             // 4: com.digitalasset.canton.sequencer.admin.v30.SequencerSnapshot.MemberCounter
	(*SequencerSnapshot_InFlightAggregationWithId)(nil), // 5: com.digitalasset.canton.sequencer.admin.v30.SequencerSnapshot.InFlightAggregationWithId
	(*SequencerSnapshot_AggregationBySender)(nil),       // 6: com.digitalasset.canton.sequencer.admin.v30.SequencerSnapshot.AggregationBySender
	(*SequencerSnapshot_SignaturesForEnvelope)(nil),     // 7: com.digitalasset.canton.sequencer.admin.v30.SequencerSnapshot.SignaturesForEnvelope
	(*v30.TrafficPurchased)(nil),                        // 8: com.digitalasset.canton.protocol.v30.TrafficPurchased
	(*v30.TrafficConsumed)(nil),                         // 9: com.digitalasset.canton.protocol.v30.TrafficConsumed
	(*wrapperspb.Int64Value)(nil),                       // 10: google.protobuf.Int64Value
	(*v30.AggregationRule)(nil),                         // 11: com.digitalasset.canton.protocol.v30.AggregationRule
	(*v301.Signature)(nil),                              // 12: com.digitalasset.canton.crypto.v30.Signature
}
var file_com_digitalasset_canton_sequencer_admin_v30_sequencer_initialization_snapshot_proto_depIdxs = []int32{
	4,  // 0: com.digitalasset.canton.sequencer.admin.v30.SequencerSnapshot.head_member_counters:type_name -> com.digitalasset.canton.sequencer.admin.v30.SequencerSnapshot.MemberCounter
	2,  // 1: com.digitalasset.canton.sequencer.admin.v30.SequencerSnapshot.status:type_name -> com.digitalasset.canton.sequencer.admin.v30.SequencerPruningStatus
	3,  // 2: com.digitalasset.canton.sequencer.admin.v30.SequencerSnapshot.additional:type_name -> com.digitalasset.canton.sequencer.admin.v30.ImplementationSpecificInfo
	5,  // 3: com.digitalasset.canton.sequencer.admin.v30.SequencerSnapshot.in_flight_aggregations:type_name -> com.digitalasset.canton.sequencer.admin.v30.SequencerSnapshot.InFlightAggregationWithId
	8,  // 4: com.digitalasset.canton.sequencer.admin.v30.SequencerSnapshot.traffic_purchased:type_name -> com.digitalasset.canton.protocol.v30.TrafficPurchased
	9,  // 5: com.digitalasset.canton.sequencer.admin.v30.SequencerSnapshot.traffic_consumed:type_name -> com.digitalasset.canton.protocol.v30.TrafficConsumed
	10, // 6: com.digitalasset.canton.sequencer.admin.v30.SequencerMemberStatus.last_acknowledged:type_name -> google.protobuf.Int64Value
	1,  // 7: com.digitalasset.canton.sequencer.admin.v30.SequencerPruningStatus.members:type_name -> com.digitalasset.canton.sequencer.admin.v30.SequencerMemberStatus
	11, // 8: com.digitalasset.canton.sequencer.admin.v30.SequencerSnapshot.InFlightAggregationWithId.aggregation_rule:type_name -> com.digitalasset.canton.protocol.v30.AggregationRule
	6,  // 9: com.digitalasset.canton.sequencer.admin.v30.SequencerSnapshot.InFlightAggregationWithId.aggregated_senders:type_name -> com.digitalasset.canton.sequencer.admin.v30.SequencerSnapshot.AggregationBySender
	7,  // 10: com.digitalasset.canton.sequencer.admin.v30.SequencerSnapshot.AggregationBySender.signatures_by_envelope:type_name -> com.digitalasset.canton.sequencer.admin.v30.SequencerSnapshot.SignaturesForEnvelope
	12, // 11: com.digitalasset.canton.sequencer.admin.v30.SequencerSnapshot.SignaturesForEnvelope.signatures:type_name -> com.digitalasset.canton.crypto.v30.Signature
	12, // [12:12] is the sub-list for method output_type
	12, // [12:12] is the sub-list for method input_type
	12, // [12:12] is the sub-list for extension type_name
	12, // [12:12] is the sub-list for extension extendee
	0,  // [0:12] is the sub-list for field type_name
}

func init() {
	file_com_digitalasset_canton_sequencer_admin_v30_sequencer_initialization_snapshot_proto_init()
}
func file_com_digitalasset_canton_sequencer_admin_v30_sequencer_initialization_snapshot_proto_init() {
	if File_com_digitalasset_canton_sequencer_admin_v30_sequencer_initialization_snapshot_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_com_digitalasset_canton_sequencer_admin_v30_sequencer_initialization_snapshot_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   8,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_com_digitalasset_canton_sequencer_admin_v30_sequencer_initialization_snapshot_proto_goTypes,
		DependencyIndexes: file_com_digitalasset_canton_sequencer_admin_v30_sequencer_initialization_snapshot_proto_depIdxs,
		MessageInfos:      file_com_digitalasset_canton_sequencer_admin_v30_sequencer_initialization_snapshot_proto_msgTypes,
	}.Build()
	File_com_digitalasset_canton_sequencer_admin_v30_sequencer_initialization_snapshot_proto = out.File
	file_com_digitalasset_canton_sequencer_admin_v30_sequencer_initialization_snapshot_proto_rawDesc = nil
	file_com_digitalasset_canton_sequencer_admin_v30_sequencer_initialization_snapshot_proto_goTypes = nil
	file_com_digitalasset_canton_sequencer_admin_v30_sequencer_initialization_snapshot_proto_depIdxs = nil
}
