// Copyright (c) 2017-2025 Digital Asset (Switzerland) GmbH and/or its affiliates. All rights reserved.
// SPDX-License-Identifier: Apache-2.0
// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.27.2
// source: com/digitalasset/canton/sequencer/admin/v30/sequencer_administration_service.proto

package v30

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	SequencerAdministrationService_PruningStatus_FullMethodName       = "/com.digitalasset.canton.sequencer.admin.v30.SequencerAdministrationService/PruningStatus"
	SequencerAdministrationService_TrafficControlState_FullMethodName = "/com.digitalasset.canton.sequencer.admin.v30.SequencerAdministrationService/TrafficControlState"
	SequencerAdministrationService_SetTrafficPurchased_FullMethodName = "/com.digitalasset.canton.sequencer.admin.v30.SequencerAdministrationService/SetTrafficPurchased"
	SequencerAdministrationService_Snapshot_FullMethodName            = "/com.digitalasset.canton.sequencer.admin.v30.SequencerAdministrationService/Snapshot"
	SequencerAdministrationService_OnboardingState_FullMethodName     = "/com.digitalasset.canton.sequencer.admin.v30.SequencerAdministrationService/OnboardingState"
	SequencerAdministrationService_DisableMember_FullMethodName       = "/com.digitalasset.canton.sequencer.admin.v30.SequencerAdministrationService/DisableMember"
)

// SequencerAdministrationServiceClient is the client API for SequencerAdministrationService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type SequencerAdministrationServiceClient interface {
	PruningStatus(ctx context.Context, in *PruningStatusRequest, opts ...grpc.CallOption) (*PruningStatusResponse, error)
	TrafficControlState(ctx context.Context, in *TrafficControlStateRequest, opts ...grpc.CallOption) (*TrafficControlStateResponse, error)
	SetTrafficPurchased(ctx context.Context, in *SetTrafficPurchasedRequest, opts ...grpc.CallOption) (*SetTrafficPurchasedResponse, error)
	Snapshot(ctx context.Context, in *SnapshotRequest, opts ...grpc.CallOption) (*SnapshotResponse, error)
	OnboardingState(ctx context.Context, in *OnboardingStateRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[OnboardingStateResponse], error)
	DisableMember(ctx context.Context, in *DisableMemberRequest, opts ...grpc.CallOption) (*DisableMemberResponse, error)
}

type sequencerAdministrationServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewSequencerAdministrationServiceClient(cc grpc.ClientConnInterface) SequencerAdministrationServiceClient {
	return &sequencerAdministrationServiceClient{cc}
}

func (c *sequencerAdministrationServiceClient) PruningStatus(ctx context.Context, in *PruningStatusRequest, opts ...grpc.CallOption) (*PruningStatusResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(PruningStatusResponse)
	err := c.cc.Invoke(ctx, SequencerAdministrationService_PruningStatus_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sequencerAdministrationServiceClient) TrafficControlState(ctx context.Context, in *TrafficControlStateRequest, opts ...grpc.CallOption) (*TrafficControlStateResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(TrafficControlStateResponse)
	err := c.cc.Invoke(ctx, SequencerAdministrationService_TrafficControlState_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sequencerAdministrationServiceClient) SetTrafficPurchased(ctx context.Context, in *SetTrafficPurchasedRequest, opts ...grpc.CallOption) (*SetTrafficPurchasedResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SetTrafficPurchasedResponse)
	err := c.cc.Invoke(ctx, SequencerAdministrationService_SetTrafficPurchased_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sequencerAdministrationServiceClient) Snapshot(ctx context.Context, in *SnapshotRequest, opts ...grpc.CallOption) (*SnapshotResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SnapshotResponse)
	err := c.cc.Invoke(ctx, SequencerAdministrationService_Snapshot_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sequencerAdministrationServiceClient) OnboardingState(ctx context.Context, in *OnboardingStateRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[OnboardingStateResponse], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &SequencerAdministrationService_ServiceDesc.Streams[0], SequencerAdministrationService_OnboardingState_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[OnboardingStateRequest, OnboardingStateResponse]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type SequencerAdministrationService_OnboardingStateClient = grpc.ServerStreamingClient[OnboardingStateResponse]

func (c *sequencerAdministrationServiceClient) DisableMember(ctx context.Context, in *DisableMemberRequest, opts ...grpc.CallOption) (*DisableMemberResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DisableMemberResponse)
	err := c.cc.Invoke(ctx, SequencerAdministrationService_DisableMember_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SequencerAdministrationServiceServer is the server API for SequencerAdministrationService service.
// All implementations must embed UnimplementedSequencerAdministrationServiceServer
// for forward compatibility.
type SequencerAdministrationServiceServer interface {
	PruningStatus(context.Context, *PruningStatusRequest) (*PruningStatusResponse, error)
	TrafficControlState(context.Context, *TrafficControlStateRequest) (*TrafficControlStateResponse, error)
	SetTrafficPurchased(context.Context, *SetTrafficPurchasedRequest) (*SetTrafficPurchasedResponse, error)
	Snapshot(context.Context, *SnapshotRequest) (*SnapshotResponse, error)
	OnboardingState(*OnboardingStateRequest, grpc.ServerStreamingServer[OnboardingStateResponse]) error
	DisableMember(context.Context, *DisableMemberRequest) (*DisableMemberResponse, error)
	mustEmbedUnimplementedSequencerAdministrationServiceServer()
}

// UnimplementedSequencerAdministrationServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedSequencerAdministrationServiceServer struct{}

func (UnimplementedSequencerAdministrationServiceServer) PruningStatus(context.Context, *PruningStatusRequest) (*PruningStatusResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PruningStatus not implemented")
}
func (UnimplementedSequencerAdministrationServiceServer) TrafficControlState(context.Context, *TrafficControlStateRequest) (*TrafficControlStateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TrafficControlState not implemented")
}
func (UnimplementedSequencerAdministrationServiceServer) SetTrafficPurchased(context.Context, *SetTrafficPurchasedRequest) (*SetTrafficPurchasedResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetTrafficPurchased not implemented")
}
func (UnimplementedSequencerAdministrationServiceServer) Snapshot(context.Context, *SnapshotRequest) (*SnapshotResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Snapshot not implemented")
}
func (UnimplementedSequencerAdministrationServiceServer) OnboardingState(*OnboardingStateRequest, grpc.ServerStreamingServer[OnboardingStateResponse]) error {
	return status.Errorf(codes.Unimplemented, "method OnboardingState not implemented")
}
func (UnimplementedSequencerAdministrationServiceServer) DisableMember(context.Context, *DisableMemberRequest) (*DisableMemberResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DisableMember not implemented")
}
func (UnimplementedSequencerAdministrationServiceServer) mustEmbedUnimplementedSequencerAdministrationServiceServer() {
}
func (UnimplementedSequencerAdministrationServiceServer) testEmbeddedByValue() {}

// UnsafeSequencerAdministrationServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SequencerAdministrationServiceServer will
// result in compilation errors.
type UnsafeSequencerAdministrationServiceServer interface {
	mustEmbedUnimplementedSequencerAdministrationServiceServer()
}

func RegisterSequencerAdministrationServiceServer(s grpc.ServiceRegistrar, srv SequencerAdministrationServiceServer) {
	// If the following call pancis, it indicates UnimplementedSequencerAdministrationServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&SequencerAdministrationService_ServiceDesc, srv)
}

func _SequencerAdministrationService_PruningStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PruningStatusRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SequencerAdministrationServiceServer).PruningStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SequencerAdministrationService_PruningStatus_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SequencerAdministrationServiceServer).PruningStatus(ctx, req.(*PruningStatusRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SequencerAdministrationService_TrafficControlState_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TrafficControlStateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SequencerAdministrationServiceServer).TrafficControlState(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SequencerAdministrationService_TrafficControlState_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SequencerAdministrationServiceServer).TrafficControlState(ctx, req.(*TrafficControlStateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SequencerAdministrationService_SetTrafficPurchased_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetTrafficPurchasedRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SequencerAdministrationServiceServer).SetTrafficPurchased(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SequencerAdministrationService_SetTrafficPurchased_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SequencerAdministrationServiceServer).SetTrafficPurchased(ctx, req.(*SetTrafficPurchasedRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SequencerAdministrationService_Snapshot_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SnapshotRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SequencerAdministrationServiceServer).Snapshot(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SequencerAdministrationService_Snapshot_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SequencerAdministrationServiceServer).Snapshot(ctx, req.(*SnapshotRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SequencerAdministrationService_OnboardingState_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(OnboardingStateRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(SequencerAdministrationServiceServer).OnboardingState(m, &grpc.GenericServerStream[OnboardingStateRequest, OnboardingStateResponse]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type SequencerAdministrationService_OnboardingStateServer = grpc.ServerStreamingServer[OnboardingStateResponse]

func _SequencerAdministrationService_DisableMember_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DisableMemberRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SequencerAdministrationServiceServer).DisableMember(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SequencerAdministrationService_DisableMember_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SequencerAdministrationServiceServer).DisableMember(ctx, req.(*DisableMemberRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// SequencerAdministrationService_ServiceDesc is the grpc.ServiceDesc for SequencerAdministrationService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var SequencerAdministrationService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "com.digitalasset.canton.sequencer.admin.v30.SequencerAdministrationService",
	HandlerType: (*SequencerAdministrationServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "PruningStatus",
			Handler:    _SequencerAdministrationService_PruningStatus_Handler,
		},
		{
			MethodName: "TrafficControlState",
			Handler:    _SequencerAdministrationService_TrafficControlState_Handler,
		},
		{
			MethodName: "SetTrafficPurchased",
			Handler:    _SequencerAdministrationService_SetTrafficPurchased_Handler,
		},
		{
			MethodName: "Snapshot",
			Handler:    _SequencerAdministrationService_Snapshot_Handler,
		},
		{
			MethodName: "DisableMember",
			Handler:    _SequencerAdministrationService_DisableMember_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "OnboardingState",
			Handler:       _SequencerAdministrationService_OnboardingState_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "com/digitalasset/canton/sequencer/admin/v30/sequencer_administration_service.proto",
}
