// Copyright (c) 2017-2025 Digital Asset (Switzerland) GmbH and/or its affiliates. All rights reserved.
// SPDX-License-Identifier: Apache-2.0
// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.27.2
// source: com/digitalasset/canton/sequencer/admin/v30/sequencer_initialization_service.proto

package v30

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	SequencerInitializationService_InitializeSequencerFromGenesisState_FullMethodName    = "/com.digitalasset.canton.sequencer.admin.v30.SequencerInitializationService/InitializeSequencerFromGenesisState"
	SequencerInitializationService_InitializeSequencerFromOnboardingState_FullMethodName = "/com.digitalasset.canton.sequencer.admin.v30.SequencerInitializationService/InitializeSequencerFromOnboardingState"
)

// SequencerInitializationServiceClient is the client API for SequencerInitializationService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type SequencerInitializationServiceClient interface {
	InitializeSequencerFromGenesisState(ctx context.Context, opts ...grpc.CallOption) (grpc.ClientStreamingClient[InitializeSequencerFromGenesisStateRequest, InitializeSequencerFromGenesisStateResponse], error)
	InitializeSequencerFromOnboardingState(ctx context.Context, opts ...grpc.CallOption) (grpc.ClientStreamingClient[InitializeSequencerFromOnboardingStateRequest, InitializeSequencerFromOnboardingStateResponse], error)
}

type sequencerInitializationServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewSequencerInitializationServiceClient(cc grpc.ClientConnInterface) SequencerInitializationServiceClient {
	return &sequencerInitializationServiceClient{cc}
}

func (c *sequencerInitializationServiceClient) InitializeSequencerFromGenesisState(ctx context.Context, opts ...grpc.CallOption) (grpc.ClientStreamingClient[InitializeSequencerFromGenesisStateRequest, InitializeSequencerFromGenesisStateResponse], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &SequencerInitializationService_ServiceDesc.Streams[0], SequencerInitializationService_InitializeSequencerFromGenesisState_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[InitializeSequencerFromGenesisStateRequest, InitializeSequencerFromGenesisStateResponse]{ClientStream: stream}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type SequencerInitializationService_InitializeSequencerFromGenesisStateClient = grpc.ClientStreamingClient[InitializeSequencerFromGenesisStateRequest, InitializeSequencerFromGenesisStateResponse]

func (c *sequencerInitializationServiceClient) InitializeSequencerFromOnboardingState(ctx context.Context, opts ...grpc.CallOption) (grpc.ClientStreamingClient[InitializeSequencerFromOnboardingStateRequest, InitializeSequencerFromOnboardingStateResponse], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &SequencerInitializationService_ServiceDesc.Streams[1], SequencerInitializationService_InitializeSequencerFromOnboardingState_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[InitializeSequencerFromOnboardingStateRequest, InitializeSequencerFromOnboardingStateResponse]{ClientStream: stream}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type SequencerInitializationService_InitializeSequencerFromOnboardingStateClient = grpc.ClientStreamingClient[InitializeSequencerFromOnboardingStateRequest, InitializeSequencerFromOnboardingStateResponse]

// SequencerInitializationServiceServer is the server API for SequencerInitializationService service.
// All implementations must embed UnimplementedSequencerInitializationServiceServer
// for forward compatibility.
type SequencerInitializationServiceServer interface {
	InitializeSequencerFromGenesisState(grpc.ClientStreamingServer[InitializeSequencerFromGenesisStateRequest, InitializeSequencerFromGenesisStateResponse]) error
	InitializeSequencerFromOnboardingState(grpc.ClientStreamingServer[InitializeSequencerFromOnboardingStateRequest, InitializeSequencerFromOnboardingStateResponse]) error
	mustEmbedUnimplementedSequencerInitializationServiceServer()
}

// UnimplementedSequencerInitializationServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedSequencerInitializationServiceServer struct{}

func (UnimplementedSequencerInitializationServiceServer) InitializeSequencerFromGenesisState(grpc.ClientStreamingServer[InitializeSequencerFromGenesisStateRequest, InitializeSequencerFromGenesisStateResponse]) error {
	return status.Errorf(codes.Unimplemented, "method InitializeSequencerFromGenesisState not implemented")
}
func (UnimplementedSequencerInitializationServiceServer) InitializeSequencerFromOnboardingState(grpc.ClientStreamingServer[InitializeSequencerFromOnboardingStateRequest, InitializeSequencerFromOnboardingStateResponse]) error {
	return status.Errorf(codes.Unimplemented, "method InitializeSequencerFromOnboardingState not implemented")
}
func (UnimplementedSequencerInitializationServiceServer) mustEmbedUnimplementedSequencerInitializationServiceServer() {
}
func (UnimplementedSequencerInitializationServiceServer) testEmbeddedByValue() {}

// UnsafeSequencerInitializationServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SequencerInitializationServiceServer will
// result in compilation errors.
type UnsafeSequencerInitializationServiceServer interface {
	mustEmbedUnimplementedSequencerInitializationServiceServer()
}

func RegisterSequencerInitializationServiceServer(s grpc.ServiceRegistrar, srv SequencerInitializationServiceServer) {
	// If the following call pancis, it indicates UnimplementedSequencerInitializationServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&SequencerInitializationService_ServiceDesc, srv)
}

func _SequencerInitializationService_InitializeSequencerFromGenesisState_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(SequencerInitializationServiceServer).InitializeSequencerFromGenesisState(&grpc.GenericServerStream[InitializeSequencerFromGenesisStateRequest, InitializeSequencerFromGenesisStateResponse]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type SequencerInitializationService_InitializeSequencerFromGenesisStateServer = grpc.ClientStreamingServer[InitializeSequencerFromGenesisStateRequest, InitializeSequencerFromGenesisStateResponse]

func _SequencerInitializationService_InitializeSequencerFromOnboardingState_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(SequencerInitializationServiceServer).InitializeSequencerFromOnboardingState(&grpc.GenericServerStream[InitializeSequencerFromOnboardingStateRequest, InitializeSequencerFromOnboardingStateResponse]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type SequencerInitializationService_InitializeSequencerFromOnboardingStateServer = grpc.ClientStreamingServer[InitializeSequencerFromOnboardingStateRequest, InitializeSequencerFromOnboardingStateResponse]

// SequencerInitializationService_ServiceDesc is the grpc.ServiceDesc for SequencerInitializationService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var SequencerInitializationService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "com.digitalasset.canton.sequencer.admin.v30.SequencerInitializationService",
	HandlerType: (*SequencerInitializationServiceServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "InitializeSequencerFromGenesisState",
			Handler:       _SequencerInitializationService_InitializeSequencerFromGenesisState_Handler,
			ClientStreams: true,
		},
		{
			StreamName:    "InitializeSequencerFromOnboardingState",
			Handler:       _SequencerInitializationService_InitializeSequencerFromOnboardingState_Handler,
			ClientStreams: true,
		},
	},
	Metadata: "com/digitalasset/canton/sequencer/admin/v30/sequencer_initialization_service.proto",
}
