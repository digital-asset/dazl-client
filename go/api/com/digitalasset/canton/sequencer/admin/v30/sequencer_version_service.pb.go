// Copyright (c) 2017-2025 Digital Asset (Switzerland) GmbH and/or its affiliates. All rights reserved.
// SPDX-License-Identifier: Apache-2.0
// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.35.2
// 	protoc        v5.27.2
// source: com/digitalasset/canton/sequencer/admin/v30/sequencer_version_service.proto

package v30

import (
	v30 "github.com/digital-asset/dazl-client/v8/go/api/com/digitalasset/canton/protocol/v30"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type SequencerVersion struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *SequencerVersion) Reset() {
	*x = SequencerVersion{}
	mi := &file_com_digitalasset_canton_sequencer_admin_v30_sequencer_version_service_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SequencerVersion) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SequencerVersion) ProtoMessage() {}

func (x *SequencerVersion) ProtoReflect() protoreflect.Message {
	mi := &file_com_digitalasset_canton_sequencer_admin_v30_sequencer_version_service_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SequencerVersion.ProtoReflect.Descriptor instead.
func (*SequencerVersion) Descriptor() ([]byte, []int) {
	return file_com_digitalasset_canton_sequencer_admin_v30_sequencer_version_service_proto_rawDescGZIP(), []int{0}
}

type SequencerVersion_HandshakeRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	HandshakeRequest *v30.Handshake_Request `protobuf:"bytes,1,opt,name=handshake_request,json=handshakeRequest,proto3" json:"handshake_request,omitempty"`
}

func (x *SequencerVersion_HandshakeRequest) Reset() {
	*x = SequencerVersion_HandshakeRequest{}
	mi := &file_com_digitalasset_canton_sequencer_admin_v30_sequencer_version_service_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SequencerVersion_HandshakeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SequencerVersion_HandshakeRequest) ProtoMessage() {}

func (x *SequencerVersion_HandshakeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_com_digitalasset_canton_sequencer_admin_v30_sequencer_version_service_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SequencerVersion_HandshakeRequest.ProtoReflect.Descriptor instead.
func (*SequencerVersion_HandshakeRequest) Descriptor() ([]byte, []int) {
	return file_com_digitalasset_canton_sequencer_admin_v30_sequencer_version_service_proto_rawDescGZIP(), []int{0, 0}
}

func (x *SequencerVersion_HandshakeRequest) GetHandshakeRequest() *v30.Handshake_Request {
	if x != nil {
		return x.HandshakeRequest
	}
	return nil
}

type SequencerVersion_HandshakeResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	HandshakeResponse *v30.Handshake_Response `protobuf:"bytes,1,opt,name=handshake_response,json=handshakeResponse,proto3" json:"handshake_response,omitempty"`
}

func (x *SequencerVersion_HandshakeResponse) Reset() {
	*x = SequencerVersion_HandshakeResponse{}
	mi := &file_com_digitalasset_canton_sequencer_admin_v30_sequencer_version_service_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SequencerVersion_HandshakeResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SequencerVersion_HandshakeResponse) ProtoMessage() {}

func (x *SequencerVersion_HandshakeResponse) ProtoReflect() protoreflect.Message {
	mi := &file_com_digitalasset_canton_sequencer_admin_v30_sequencer_version_service_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SequencerVersion_HandshakeResponse.ProtoReflect.Descriptor instead.
func (*SequencerVersion_HandshakeResponse) Descriptor() ([]byte, []int) {
	return file_com_digitalasset_canton_sequencer_admin_v30_sequencer_version_service_proto_rawDescGZIP(), []int{0, 1}
}

func (x *SequencerVersion_HandshakeResponse) GetHandshakeResponse() *v30.Handshake_Response {
	if x != nil {
		return x.HandshakeResponse
	}
	return nil
}

var File_com_digitalasset_canton_sequencer_admin_v30_sequencer_version_service_proto protoreflect.FileDescriptor

var file_com_digitalasset_canton_sequencer_admin_v30_sequencer_version_service_proto_rawDesc = []byte{
	0x0a, 0x4b, 0x63, 0x6f, 0x6d, 0x2f, 0x64, 0x69, 0x67, 0x69, 0x74, 0x61, 0x6c, 0x61, 0x73, 0x73,
	0x65, 0x74, 0x2f, 0x63, 0x61, 0x6e, 0x74, 0x6f, 0x6e, 0x2f, 0x73, 0x65, 0x71, 0x75, 0x65, 0x6e,
	0x63, 0x65, 0x72, 0x2f, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2f, 0x76, 0x33, 0x30, 0x2f, 0x73, 0x65,
	0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x72, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x5f,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x2b, 0x63,
	0x6f, 0x6d, 0x2e, 0x64, 0x69, 0x67, 0x69, 0x74, 0x61, 0x6c, 0x61, 0x73, 0x73, 0x65, 0x74, 0x2e,
	0x63, 0x61, 0x6e, 0x74, 0x6f, 0x6e, 0x2e, 0x73, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x72,
	0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x76, 0x33, 0x30, 0x1a, 0x35, 0x63, 0x6f, 0x6d, 0x2f,
	0x64, 0x69, 0x67, 0x69, 0x74, 0x61, 0x6c, 0x61, 0x73, 0x73, 0x65, 0x74, 0x2f, 0x63, 0x61, 0x6e,
	0x74, 0x6f, 0x6e, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2f, 0x76, 0x33, 0x30,
	0x2f, 0x73, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x69, 0x6e, 0x67, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x22, 0x8a, 0x02, 0x0a, 0x10, 0x53, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x72, 0x56,
	0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x1a, 0x78, 0x0a, 0x10, 0x48, 0x61, 0x6e, 0x64, 0x73, 0x68,
	0x61, 0x6b, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x64, 0x0a, 0x11, 0x68, 0x61,
	0x6e, 0x64, 0x73, 0x68, 0x61, 0x6b, 0x65, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x37, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x64, 0x69, 0x67, 0x69,
	0x74, 0x61, 0x6c, 0x61, 0x73, 0x73, 0x65, 0x74, 0x2e, 0x63, 0x61, 0x6e, 0x74, 0x6f, 0x6e, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x76, 0x33, 0x30, 0x2e, 0x48, 0x61, 0x6e,
	0x64, 0x73, 0x68, 0x61, 0x6b, 0x65, 0x2e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x10,
	0x68, 0x61, 0x6e, 0x64, 0x73, 0x68, 0x61, 0x6b, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x7c, 0x0a, 0x11, 0x48, 0x61, 0x6e, 0x64, 0x73, 0x68, 0x61, 0x6b, 0x65, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x67, 0x0a, 0x12, 0x68, 0x61, 0x6e, 0x64, 0x73, 0x68, 0x61,
	0x6b, 0x65, 0x5f, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x38, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x64, 0x69, 0x67, 0x69, 0x74, 0x61, 0x6c, 0x61,
	0x73, 0x73, 0x65, 0x74, 0x2e, 0x63, 0x61, 0x6e, 0x74, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x76, 0x33, 0x30, 0x2e, 0x48, 0x61, 0x6e, 0x64, 0x73, 0x68, 0x61,
	0x6b, 0x65, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x11, 0x68, 0x61, 0x6e,
	0x64, 0x73, 0x68, 0x61, 0x6b, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x32, 0xc8,
	0x01, 0x0a, 0x17, 0x53, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x72, 0x56, 0x65, 0x72, 0x73,
	0x69, 0x6f, 0x6e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0xac, 0x01, 0x0a, 0x09, 0x48,
	0x61, 0x6e, 0x64, 0x73, 0x68, 0x61, 0x6b, 0x65, 0x12, 0x4e, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x64,
	0x69, 0x67, 0x69, 0x74, 0x61, 0x6c, 0x61, 0x73, 0x73, 0x65, 0x74, 0x2e, 0x63, 0x61, 0x6e, 0x74,
	0x6f, 0x6e, 0x2e, 0x73, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x72, 0x2e, 0x61, 0x64, 0x6d,
	0x69, 0x6e, 0x2e, 0x76, 0x33, 0x30, 0x2e, 0x53, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x72,
	0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x2e, 0x48, 0x61, 0x6e, 0x64, 0x73, 0x68, 0x61, 0x6b,
	0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x4f, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x64,
	0x69, 0x67, 0x69, 0x74, 0x61, 0x6c, 0x61, 0x73, 0x73, 0x65, 0x74, 0x2e, 0x63, 0x61, 0x6e, 0x74,
	0x6f, 0x6e, 0x2e, 0x73, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x72, 0x2e, 0x61, 0x64, 0x6d,
	0x69, 0x6e, 0x2e, 0x76, 0x33, 0x30, 0x2e, 0x53, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x72,
	0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x2e, 0x48, 0x61, 0x6e, 0x64, 0x73, 0x68, 0x61, 0x6b,
	0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x42, 0x5c, 0x5a, 0x5a, 0x67, 0x69, 0x74,
	0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x64, 0x69, 0x67, 0x69, 0x74, 0x61, 0x6c, 0x2d,
	0x61, 0x73, 0x73, 0x65, 0x74, 0x2f, 0x64, 0x61, 0x7a, 0x6c, 0x2d, 0x63, 0x6c, 0x69, 0x65, 0x6e,
	0x74, 0x2f, 0x76, 0x38, 0x2f, 0x67, 0x6f, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x63, 0x6f, 0x6d, 0x2f,
	0x64, 0x69, 0x67, 0x69, 0x74, 0x61, 0x6c, 0x61, 0x73, 0x73, 0x65, 0x74, 0x2f, 0x63, 0x61, 0x6e,
	0x74, 0x6f, 0x6e, 0x2f, 0x73, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x72, 0x2f, 0x61, 0x64,
	0x6d, 0x69, 0x6e, 0x2f, 0x76, 0x33, 0x30, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_com_digitalasset_canton_sequencer_admin_v30_sequencer_version_service_proto_rawDescOnce sync.Once
	file_com_digitalasset_canton_sequencer_admin_v30_sequencer_version_service_proto_rawDescData = file_com_digitalasset_canton_sequencer_admin_v30_sequencer_version_service_proto_rawDesc
)

func file_com_digitalasset_canton_sequencer_admin_v30_sequencer_version_service_proto_rawDescGZIP() []byte {
	file_com_digitalasset_canton_sequencer_admin_v30_sequencer_version_service_proto_rawDescOnce.Do(func() {
		file_com_digitalasset_canton_sequencer_admin_v30_sequencer_version_service_proto_rawDescData = protoimpl.X.CompressGZIP(file_com_digitalasset_canton_sequencer_admin_v30_sequencer_version_service_proto_rawDescData)
	})
	return file_com_digitalasset_canton_sequencer_admin_v30_sequencer_version_service_proto_rawDescData
}

var file_com_digitalasset_canton_sequencer_admin_v30_sequencer_version_service_proto_msgTypes = make([]protoimpl.MessageInfo, 3)
var file_com_digitalasset_canton_sequencer_admin_v30_sequencer_version_service_proto_goTypes = []any{
	(*SequencerVersion)(nil),                   // 0: com.digitalasset.canton.sequencer.admin.v30.SequencerVersion
	(*SequencerVersion_HandshakeRequest)(nil),  // 1: com.digitalasset.canton.sequencer.admin.v30.SequencerVersion.HandshakeRequest
	(*SequencerVersion_HandshakeResponse)(nil), // 2: com.digitalasset.canton.sequencer.admin.v30.SequencerVersion.HandshakeResponse
	(*v30.Handshake_Request)(nil),              // 3: com.digitalasset.canton.protocol.v30.Handshake.Request
	(*v30.Handshake_Response)(nil),             // 4: com.digitalasset.canton.protocol.v30.Handshake.Response
}
var file_com_digitalasset_canton_sequencer_admin_v30_sequencer_version_service_proto_depIdxs = []int32{
	3, // 0: com.digitalasset.canton.sequencer.admin.v30.SequencerVersion.HandshakeRequest.handshake_request:type_name -> com.digitalasset.canton.protocol.v30.Handshake.Request
	4, // 1: com.digitalasset.canton.sequencer.admin.v30.SequencerVersion.HandshakeResponse.handshake_response:type_name -> com.digitalasset.canton.protocol.v30.Handshake.Response
	1, // 2: com.digitalasset.canton.sequencer.admin.v30.SequencerVersionService.Handshake:input_type -> com.digitalasset.canton.sequencer.admin.v30.SequencerVersion.HandshakeRequest
	2, // 3: com.digitalasset.canton.sequencer.admin.v30.SequencerVersionService.Handshake:output_type -> com.digitalasset.canton.sequencer.admin.v30.SequencerVersion.HandshakeResponse
	3, // [3:4] is the sub-list for method output_type
	2, // [2:3] is the sub-list for method input_type
	2, // [2:2] is the sub-list for extension type_name
	2, // [2:2] is the sub-list for extension extendee
	0, // [0:2] is the sub-list for field type_name
}

func init() { file_com_digitalasset_canton_sequencer_admin_v30_sequencer_version_service_proto_init() }
func file_com_digitalasset_canton_sequencer_admin_v30_sequencer_version_service_proto_init() {
	if File_com_digitalasset_canton_sequencer_admin_v30_sequencer_version_service_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_com_digitalasset_canton_sequencer_admin_v30_sequencer_version_service_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   3,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_com_digitalasset_canton_sequencer_admin_v30_sequencer_version_service_proto_goTypes,
		DependencyIndexes: file_com_digitalasset_canton_sequencer_admin_v30_sequencer_version_service_proto_depIdxs,
		MessageInfos:      file_com_digitalasset_canton_sequencer_admin_v30_sequencer_version_service_proto_msgTypes,
	}.Build()
	File_com_digitalasset_canton_sequencer_admin_v30_sequencer_version_service_proto = out.File
	file_com_digitalasset_canton_sequencer_admin_v30_sequencer_version_service_proto_rawDesc = nil
	file_com_digitalasset_canton_sequencer_admin_v30_sequencer_version_service_proto_goTypes = nil
	file_com_digitalasset_canton_sequencer_admin_v30_sequencer_version_service_proto_depIdxs = nil
}
