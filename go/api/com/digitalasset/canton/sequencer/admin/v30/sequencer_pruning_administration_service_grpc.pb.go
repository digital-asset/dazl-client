// Copyright (c) 2017-2025 Digital Asset (Switzerland) GmbH and/or its affiliates. All rights reserved.
// SPDX-License-Identifier: Apache-2.0
// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.27.2
// source: com/digitalasset/canton/sequencer/admin/v30/sequencer_pruning_administration_service.proto

package v30

import (
	context "context"
	v30 "github.com/digital-asset/dazl-client/v8/go/api/com/digitalasset/canton/admin/pruning/v30"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	SequencerPruningAdministrationService_Prune_FullMethodName                  = "/com.digitalasset.canton.sequencer.admin.v30.SequencerPruningAdministrationService/Prune"
	SequencerPruningAdministrationService_SetSchedule_FullMethodName            = "/com.digitalasset.canton.sequencer.admin.v30.SequencerPruningAdministrationService/SetSchedule"
	SequencerPruningAdministrationService_SetCron_FullMethodName                = "/com.digitalasset.canton.sequencer.admin.v30.SequencerPruningAdministrationService/SetCron"
	SequencerPruningAdministrationService_SetMaxDuration_FullMethodName         = "/com.digitalasset.canton.sequencer.admin.v30.SequencerPruningAdministrationService/SetMaxDuration"
	SequencerPruningAdministrationService_SetRetention_FullMethodName           = "/com.digitalasset.canton.sequencer.admin.v30.SequencerPruningAdministrationService/SetRetention"
	SequencerPruningAdministrationService_ClearSchedule_FullMethodName          = "/com.digitalasset.canton.sequencer.admin.v30.SequencerPruningAdministrationService/ClearSchedule"
	SequencerPruningAdministrationService_GetSchedule_FullMethodName            = "/com.digitalasset.canton.sequencer.admin.v30.SequencerPruningAdministrationService/GetSchedule"
	SequencerPruningAdministrationService_LocatePruningTimestamp_FullMethodName = "/com.digitalasset.canton.sequencer.admin.v30.SequencerPruningAdministrationService/LocatePruningTimestamp"
)

// SequencerPruningAdministrationServiceClient is the client API for SequencerPruningAdministrationService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type SequencerPruningAdministrationServiceClient interface {
	Prune(ctx context.Context, in *SequencerPruning_PruneRequest, opts ...grpc.CallOption) (*SequencerPruning_PruneResponse, error)
	SetSchedule(ctx context.Context, in *v30.SetSchedule_Request, opts ...grpc.CallOption) (*v30.SetSchedule_Response, error)
	SetCron(ctx context.Context, in *v30.SetCron_Request, opts ...grpc.CallOption) (*v30.SetCron_Response, error)
	SetMaxDuration(ctx context.Context, in *v30.SetMaxDuration_Request, opts ...grpc.CallOption) (*v30.SetMaxDuration_Response, error)
	SetRetention(ctx context.Context, in *v30.SetRetention_Request, opts ...grpc.CallOption) (*v30.SetRetention_Response, error)
	ClearSchedule(ctx context.Context, in *v30.ClearSchedule_Request, opts ...grpc.CallOption) (*v30.ClearSchedule_Response, error)
	GetSchedule(ctx context.Context, in *v30.GetSchedule_Request, opts ...grpc.CallOption) (*v30.GetSchedule_Response, error)
	LocatePruningTimestamp(ctx context.Context, in *v30.LocatePruningTimestamp_Request, opts ...grpc.CallOption) (*v30.LocatePruningTimestamp_Response, error)
}

type sequencerPruningAdministrationServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewSequencerPruningAdministrationServiceClient(cc grpc.ClientConnInterface) SequencerPruningAdministrationServiceClient {
	return &sequencerPruningAdministrationServiceClient{cc}
}

func (c *sequencerPruningAdministrationServiceClient) Prune(ctx context.Context, in *SequencerPruning_PruneRequest, opts ...grpc.CallOption) (*SequencerPruning_PruneResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SequencerPruning_PruneResponse)
	err := c.cc.Invoke(ctx, SequencerPruningAdministrationService_Prune_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sequencerPruningAdministrationServiceClient) SetSchedule(ctx context.Context, in *v30.SetSchedule_Request, opts ...grpc.CallOption) (*v30.SetSchedule_Response, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(v30.SetSchedule_Response)
	err := c.cc.Invoke(ctx, SequencerPruningAdministrationService_SetSchedule_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sequencerPruningAdministrationServiceClient) SetCron(ctx context.Context, in *v30.SetCron_Request, opts ...grpc.CallOption) (*v30.SetCron_Response, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(v30.SetCron_Response)
	err := c.cc.Invoke(ctx, SequencerPruningAdministrationService_SetCron_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sequencerPruningAdministrationServiceClient) SetMaxDuration(ctx context.Context, in *v30.SetMaxDuration_Request, opts ...grpc.CallOption) (*v30.SetMaxDuration_Response, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(v30.SetMaxDuration_Response)
	err := c.cc.Invoke(ctx, SequencerPruningAdministrationService_SetMaxDuration_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sequencerPruningAdministrationServiceClient) SetRetention(ctx context.Context, in *v30.SetRetention_Request, opts ...grpc.CallOption) (*v30.SetRetention_Response, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(v30.SetRetention_Response)
	err := c.cc.Invoke(ctx, SequencerPruningAdministrationService_SetRetention_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sequencerPruningAdministrationServiceClient) ClearSchedule(ctx context.Context, in *v30.ClearSchedule_Request, opts ...grpc.CallOption) (*v30.ClearSchedule_Response, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(v30.ClearSchedule_Response)
	err := c.cc.Invoke(ctx, SequencerPruningAdministrationService_ClearSchedule_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sequencerPruningAdministrationServiceClient) GetSchedule(ctx context.Context, in *v30.GetSchedule_Request, opts ...grpc.CallOption) (*v30.GetSchedule_Response, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(v30.GetSchedule_Response)
	err := c.cc.Invoke(ctx, SequencerPruningAdministrationService_GetSchedule_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sequencerPruningAdministrationServiceClient) LocatePruningTimestamp(ctx context.Context, in *v30.LocatePruningTimestamp_Request, opts ...grpc.CallOption) (*v30.LocatePruningTimestamp_Response, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(v30.LocatePruningTimestamp_Response)
	err := c.cc.Invoke(ctx, SequencerPruningAdministrationService_LocatePruningTimestamp_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SequencerPruningAdministrationServiceServer is the server API for SequencerPruningAdministrationService service.
// All implementations must embed UnimplementedSequencerPruningAdministrationServiceServer
// for forward compatibility.
type SequencerPruningAdministrationServiceServer interface {
	Prune(context.Context, *SequencerPruning_PruneRequest) (*SequencerPruning_PruneResponse, error)
	SetSchedule(context.Context, *v30.SetSchedule_Request) (*v30.SetSchedule_Response, error)
	SetCron(context.Context, *v30.SetCron_Request) (*v30.SetCron_Response, error)
	SetMaxDuration(context.Context, *v30.SetMaxDuration_Request) (*v30.SetMaxDuration_Response, error)
	SetRetention(context.Context, *v30.SetRetention_Request) (*v30.SetRetention_Response, error)
	ClearSchedule(context.Context, *v30.ClearSchedule_Request) (*v30.ClearSchedule_Response, error)
	GetSchedule(context.Context, *v30.GetSchedule_Request) (*v30.GetSchedule_Response, error)
	LocatePruningTimestamp(context.Context, *v30.LocatePruningTimestamp_Request) (*v30.LocatePruningTimestamp_Response, error)
	mustEmbedUnimplementedSequencerPruningAdministrationServiceServer()
}

// UnimplementedSequencerPruningAdministrationServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedSequencerPruningAdministrationServiceServer struct{}

func (UnimplementedSequencerPruningAdministrationServiceServer) Prune(context.Context, *SequencerPruning_PruneRequest) (*SequencerPruning_PruneResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Prune not implemented")
}
func (UnimplementedSequencerPruningAdministrationServiceServer) SetSchedule(context.Context, *v30.SetSchedule_Request) (*v30.SetSchedule_Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetSchedule not implemented")
}
func (UnimplementedSequencerPruningAdministrationServiceServer) SetCron(context.Context, *v30.SetCron_Request) (*v30.SetCron_Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetCron not implemented")
}
func (UnimplementedSequencerPruningAdministrationServiceServer) SetMaxDuration(context.Context, *v30.SetMaxDuration_Request) (*v30.SetMaxDuration_Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetMaxDuration not implemented")
}
func (UnimplementedSequencerPruningAdministrationServiceServer) SetRetention(context.Context, *v30.SetRetention_Request) (*v30.SetRetention_Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetRetention not implemented")
}
func (UnimplementedSequencerPruningAdministrationServiceServer) ClearSchedule(context.Context, *v30.ClearSchedule_Request) (*v30.ClearSchedule_Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ClearSchedule not implemented")
}
func (UnimplementedSequencerPruningAdministrationServiceServer) GetSchedule(context.Context, *v30.GetSchedule_Request) (*v30.GetSchedule_Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSchedule not implemented")
}
func (UnimplementedSequencerPruningAdministrationServiceServer) LocatePruningTimestamp(context.Context, *v30.LocatePruningTimestamp_Request) (*v30.LocatePruningTimestamp_Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LocatePruningTimestamp not implemented")
}
func (UnimplementedSequencerPruningAdministrationServiceServer) mustEmbedUnimplementedSequencerPruningAdministrationServiceServer() {
}
func (UnimplementedSequencerPruningAdministrationServiceServer) testEmbeddedByValue() {}

// UnsafeSequencerPruningAdministrationServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SequencerPruningAdministrationServiceServer will
// result in compilation errors.
type UnsafeSequencerPruningAdministrationServiceServer interface {
	mustEmbedUnimplementedSequencerPruningAdministrationServiceServer()
}

func RegisterSequencerPruningAdministrationServiceServer(s grpc.ServiceRegistrar, srv SequencerPruningAdministrationServiceServer) {
	// If the following call pancis, it indicates UnimplementedSequencerPruningAdministrationServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&SequencerPruningAdministrationService_ServiceDesc, srv)
}

func _SequencerPruningAdministrationService_Prune_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SequencerPruning_PruneRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SequencerPruningAdministrationServiceServer).Prune(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SequencerPruningAdministrationService_Prune_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SequencerPruningAdministrationServiceServer).Prune(ctx, req.(*SequencerPruning_PruneRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SequencerPruningAdministrationService_SetSchedule_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(v30.SetSchedule_Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SequencerPruningAdministrationServiceServer).SetSchedule(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SequencerPruningAdministrationService_SetSchedule_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SequencerPruningAdministrationServiceServer).SetSchedule(ctx, req.(*v30.SetSchedule_Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _SequencerPruningAdministrationService_SetCron_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(v30.SetCron_Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SequencerPruningAdministrationServiceServer).SetCron(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SequencerPruningAdministrationService_SetCron_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SequencerPruningAdministrationServiceServer).SetCron(ctx, req.(*v30.SetCron_Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _SequencerPruningAdministrationService_SetMaxDuration_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(v30.SetMaxDuration_Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SequencerPruningAdministrationServiceServer).SetMaxDuration(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SequencerPruningAdministrationService_SetMaxDuration_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SequencerPruningAdministrationServiceServer).SetMaxDuration(ctx, req.(*v30.SetMaxDuration_Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _SequencerPruningAdministrationService_SetRetention_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(v30.SetRetention_Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SequencerPruningAdministrationServiceServer).SetRetention(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SequencerPruningAdministrationService_SetRetention_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SequencerPruningAdministrationServiceServer).SetRetention(ctx, req.(*v30.SetRetention_Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _SequencerPruningAdministrationService_ClearSchedule_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(v30.ClearSchedule_Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SequencerPruningAdministrationServiceServer).ClearSchedule(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SequencerPruningAdministrationService_ClearSchedule_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SequencerPruningAdministrationServiceServer).ClearSchedule(ctx, req.(*v30.ClearSchedule_Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _SequencerPruningAdministrationService_GetSchedule_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(v30.GetSchedule_Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SequencerPruningAdministrationServiceServer).GetSchedule(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SequencerPruningAdministrationService_GetSchedule_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SequencerPruningAdministrationServiceServer).GetSchedule(ctx, req.(*v30.GetSchedule_Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _SequencerPruningAdministrationService_LocatePruningTimestamp_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(v30.LocatePruningTimestamp_Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SequencerPruningAdministrationServiceServer).LocatePruningTimestamp(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SequencerPruningAdministrationService_LocatePruningTimestamp_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SequencerPruningAdministrationServiceServer).LocatePruningTimestamp(ctx, req.(*v30.LocatePruningTimestamp_Request))
	}
	return interceptor(ctx, in, info, handler)
}

// SequencerPruningAdministrationService_ServiceDesc is the grpc.ServiceDesc for SequencerPruningAdministrationService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var SequencerPruningAdministrationService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "com.digitalasset.canton.sequencer.admin.v30.SequencerPruningAdministrationService",
	HandlerType: (*SequencerPruningAdministrationServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Prune",
			Handler:    _SequencerPruningAdministrationService_Prune_Handler,
		},
		{
			MethodName: "SetSchedule",
			Handler:    _SequencerPruningAdministrationService_SetSchedule_Handler,
		},
		{
			MethodName: "SetCron",
			Handler:    _SequencerPruningAdministrationService_SetCron_Handler,
		},
		{
			MethodName: "SetMaxDuration",
			Handler:    _SequencerPruningAdministrationService_SetMaxDuration_Handler,
		},
		{
			MethodName: "SetRetention",
			Handler:    _SequencerPruningAdministrationService_SetRetention_Handler,
		},
		{
			MethodName: "ClearSchedule",
			Handler:    _SequencerPruningAdministrationService_ClearSchedule_Handler,
		},
		{
			MethodName: "GetSchedule",
			Handler:    _SequencerPruningAdministrationService_GetSchedule_Handler,
		},
		{
			MethodName: "LocatePruningTimestamp",
			Handler:    _SequencerPruningAdministrationService_LocatePruningTimestamp_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "com/digitalasset/canton/sequencer/admin/v30/sequencer_pruning_administration_service.proto",
}
