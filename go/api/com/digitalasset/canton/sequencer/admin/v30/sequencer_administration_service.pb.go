// Copyright (c) 2017-2025 Digital Asset (Switzerland) GmbH and/or its affiliates. All rights reserved.
// SPDX-License-Identifier: Apache-2.0
// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.35.2
// 	protoc        v5.27.2
// source: com/digitalasset/canton/sequencer/admin/v30/sequencer_administration_service.proto

package v30

import (
	v30 "github.com/digital-asset/dazl-client/v8/go/api/com/digitalasset/canton/protocol/v30"
	v301 "github.com/digital-asset/dazl-client/v8/go/api/com/digitalasset/canton/topology/admin/v30"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type TrafficControlStateRequest_RelativeTimestamp int32

const (
	TrafficControlStateRequest_RELATIVE_TIMESTAMP_LATEST_SAFE_UNSPECIFIED TrafficControlStateRequest_RelativeTimestamp = 0
	TrafficControlStateRequest_RELATIVE_TIMESTAMP_LAST_UPDATE_PER_MEMBER  TrafficControlStateRequest_RelativeTimestamp = 1
	TrafficControlStateRequest_RELATIVE_TIMESTAMP_LATEST_APPROXIMATE      TrafficControlStateRequest_RelativeTimestamp = 2
)

// Enum value maps for TrafficControlStateRequest_RelativeTimestamp.
var (
	TrafficControlStateRequest_RelativeTimestamp_name = map[int32]string{
		0: "RELATIVE_TIMESTAMP_LATEST_SAFE_UNSPECIFIED",
		1: "RELATIVE_TIMESTAMP_LAST_UPDATE_PER_MEMBER",
		2: "RELATIVE_TIMESTAMP_LATEST_APPROXIMATE",
	}
	TrafficControlStateRequest_RelativeTimestamp_value = map[string]int32{
		"RELATIVE_TIMESTAMP_LATEST_SAFE_UNSPECIFIED": 0,
		"RELATIVE_TIMESTAMP_LAST_UPDATE_PER_MEMBER":  1,
		"RELATIVE_TIMESTAMP_LATEST_APPROXIMATE":      2,
	}
)

func (x TrafficControlStateRequest_RelativeTimestamp) Enum() *TrafficControlStateRequest_RelativeTimestamp {
	p := new(TrafficControlStateRequest_RelativeTimestamp)
	*p = x
	return p
}

func (x TrafficControlStateRequest_RelativeTimestamp) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (TrafficControlStateRequest_RelativeTimestamp) Descriptor() protoreflect.EnumDescriptor {
	return file_com_digitalasset_canton_sequencer_admin_v30_sequencer_administration_service_proto_enumTypes[0].Descriptor()
}

func (TrafficControlStateRequest_RelativeTimestamp) Type() protoreflect.EnumType {
	return &file_com_digitalasset_canton_sequencer_admin_v30_sequencer_administration_service_proto_enumTypes[0]
}

func (x TrafficControlStateRequest_RelativeTimestamp) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use TrafficControlStateRequest_RelativeTimestamp.Descriptor instead.
func (TrafficControlStateRequest_RelativeTimestamp) EnumDescriptor() ([]byte, []int) {
	return file_com_digitalasset_canton_sequencer_admin_v30_sequencer_administration_service_proto_rawDescGZIP(), []int{0, 0}
}

type TrafficControlStateRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Members []string `protobuf:"bytes,1,rep,name=members,proto3" json:"members,omitempty"`
	// Types that are assignable to TimestampSelector:
	//
	//	*TrafficControlStateRequest_ExactTimestamp
	//	*TrafficControlStateRequest_RelativeTimestamp_
	TimestampSelector isTrafficControlStateRequest_TimestampSelector `protobuf_oneof:"timestamp_selector"`
}

func (x *TrafficControlStateRequest) Reset() {
	*x = TrafficControlStateRequest{}
	mi := &file_com_digitalasset_canton_sequencer_admin_v30_sequencer_administration_service_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TrafficControlStateRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TrafficControlStateRequest) ProtoMessage() {}

func (x *TrafficControlStateRequest) ProtoReflect() protoreflect.Message {
	mi := &file_com_digitalasset_canton_sequencer_admin_v30_sequencer_administration_service_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TrafficControlStateRequest.ProtoReflect.Descriptor instead.
func (*TrafficControlStateRequest) Descriptor() ([]byte, []int) {
	return file_com_digitalasset_canton_sequencer_admin_v30_sequencer_administration_service_proto_rawDescGZIP(), []int{0}
}

func (x *TrafficControlStateRequest) GetMembers() []string {
	if x != nil {
		return x.Members
	}
	return nil
}

func (m *TrafficControlStateRequest) GetTimestampSelector() isTrafficControlStateRequest_TimestampSelector {
	if m != nil {
		return m.TimestampSelector
	}
	return nil
}

func (x *TrafficControlStateRequest) GetExactTimestamp() uint64 {
	if x, ok := x.GetTimestampSelector().(*TrafficControlStateRequest_ExactTimestamp); ok {
		return x.ExactTimestamp
	}
	return 0
}

func (x *TrafficControlStateRequest) GetRelativeTimestamp() TrafficControlStateRequest_RelativeTimestamp {
	if x, ok := x.GetTimestampSelector().(*TrafficControlStateRequest_RelativeTimestamp_); ok {
		return x.RelativeTimestamp
	}
	return TrafficControlStateRequest_RELATIVE_TIMESTAMP_LATEST_SAFE_UNSPECIFIED
}

type isTrafficControlStateRequest_TimestampSelector interface {
	isTrafficControlStateRequest_TimestampSelector()
}

type TrafficControlStateRequest_ExactTimestamp struct {
	ExactTimestamp uint64 `protobuf:"varint,2,opt,name=exact_timestamp,json=exactTimestamp,proto3,oneof"`
}

type TrafficControlStateRequest_RelativeTimestamp_ struct {
	RelativeTimestamp TrafficControlStateRequest_RelativeTimestamp `protobuf:"varint,3,opt,name=relative_timestamp,json=relativeTimestamp,proto3,enum=com.digitalasset.canton.sequencer.admin.v30.TrafficControlStateRequest_RelativeTimestamp,oneof"`
}

func (*TrafficControlStateRequest_ExactTimestamp) isTrafficControlStateRequest_TimestampSelector() {}

func (*TrafficControlStateRequest_RelativeTimestamp_) isTrafficControlStateRequest_TimestampSelector() {
}

type TrafficControlStateResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TrafficStates map[string]*v30.TrafficState `protobuf:"bytes,1,rep,name=traffic_states,json=trafficStates,proto3" json:"traffic_states,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *TrafficControlStateResponse) Reset() {
	*x = TrafficControlStateResponse{}
	mi := &file_com_digitalasset_canton_sequencer_admin_v30_sequencer_administration_service_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TrafficControlStateResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TrafficControlStateResponse) ProtoMessage() {}

func (x *TrafficControlStateResponse) ProtoReflect() protoreflect.Message {
	mi := &file_com_digitalasset_canton_sequencer_admin_v30_sequencer_administration_service_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TrafficControlStateResponse.ProtoReflect.Descriptor instead.
func (*TrafficControlStateResponse) Descriptor() ([]byte, []int) {
	return file_com_digitalasset_canton_sequencer_admin_v30_sequencer_administration_service_proto_rawDescGZIP(), []int{1}
}

func (x *TrafficControlStateResponse) GetTrafficStates() map[string]*v30.TrafficState {
	if x != nil {
		return x.TrafficStates
	}
	return nil
}

type SetTrafficPurchasedRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Member                string `protobuf:"bytes,1,opt,name=member,proto3" json:"member,omitempty"`
	Serial                uint32 `protobuf:"varint,2,opt,name=serial,proto3" json:"serial,omitempty"`
	TotalTrafficPurchased int64  `protobuf:"varint,3,opt,name=total_traffic_purchased,json=totalTrafficPurchased,proto3" json:"total_traffic_purchased,omitempty"`
}

func (x *SetTrafficPurchasedRequest) Reset() {
	*x = SetTrafficPurchasedRequest{}
	mi := &file_com_digitalasset_canton_sequencer_admin_v30_sequencer_administration_service_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SetTrafficPurchasedRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetTrafficPurchasedRequest) ProtoMessage() {}

func (x *SetTrafficPurchasedRequest) ProtoReflect() protoreflect.Message {
	mi := &file_com_digitalasset_canton_sequencer_admin_v30_sequencer_administration_service_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetTrafficPurchasedRequest.ProtoReflect.Descriptor instead.
func (*SetTrafficPurchasedRequest) Descriptor() ([]byte, []int) {
	return file_com_digitalasset_canton_sequencer_admin_v30_sequencer_administration_service_proto_rawDescGZIP(), []int{2}
}

func (x *SetTrafficPurchasedRequest) GetMember() string {
	if x != nil {
		return x.Member
	}
	return ""
}

func (x *SetTrafficPurchasedRequest) GetSerial() uint32 {
	if x != nil {
		return x.Serial
	}
	return 0
}

func (x *SetTrafficPurchasedRequest) GetTotalTrafficPurchased() int64 {
	if x != nil {
		return x.TotalTrafficPurchased
	}
	return 0
}

type SetTrafficPurchasedResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MaxSequencingTimestamp *timestamppb.Timestamp `protobuf:"bytes,1,opt,name=max_sequencing_timestamp,json=maxSequencingTimestamp,proto3" json:"max_sequencing_timestamp,omitempty"`
}

func (x *SetTrafficPurchasedResponse) Reset() {
	*x = SetTrafficPurchasedResponse{}
	mi := &file_com_digitalasset_canton_sequencer_admin_v30_sequencer_administration_service_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SetTrafficPurchasedResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetTrafficPurchasedResponse) ProtoMessage() {}

func (x *SetTrafficPurchasedResponse) ProtoReflect() protoreflect.Message {
	mi := &file_com_digitalasset_canton_sequencer_admin_v30_sequencer_administration_service_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetTrafficPurchasedResponse.ProtoReflect.Descriptor instead.
func (*SetTrafficPurchasedResponse) Descriptor() ([]byte, []int) {
	return file_com_digitalasset_canton_sequencer_admin_v30_sequencer_administration_service_proto_rawDescGZIP(), []int{3}
}

func (x *SetTrafficPurchasedResponse) GetMaxSequencingTimestamp() *timestamppb.Timestamp {
	if x != nil {
		return x.MaxSequencingTimestamp
	}
	return nil
}

type SnapshotRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Timestamp *timestamppb.Timestamp `protobuf:"bytes,1,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
}

func (x *SnapshotRequest) Reset() {
	*x = SnapshotRequest{}
	mi := &file_com_digitalasset_canton_sequencer_admin_v30_sequencer_administration_service_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SnapshotRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SnapshotRequest) ProtoMessage() {}

func (x *SnapshotRequest) ProtoReflect() protoreflect.Message {
	mi := &file_com_digitalasset_canton_sequencer_admin_v30_sequencer_administration_service_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SnapshotRequest.ProtoReflect.Descriptor instead.
func (*SnapshotRequest) Descriptor() ([]byte, []int) {
	return file_com_digitalasset_canton_sequencer_admin_v30_sequencer_administration_service_proto_rawDescGZIP(), []int{4}
}

func (x *SnapshotRequest) GetTimestamp() *timestamppb.Timestamp {
	if x != nil {
		return x.Timestamp
	}
	return nil
}

type SnapshotResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Value:
	//
	//	*SnapshotResponse_Success_
	//	*SnapshotResponse_Failure_
	//	*SnapshotResponse_VersionedSuccess_
	Value isSnapshotResponse_Value `protobuf_oneof:"value"`
}

func (x *SnapshotResponse) Reset() {
	*x = SnapshotResponse{}
	mi := &file_com_digitalasset_canton_sequencer_admin_v30_sequencer_administration_service_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SnapshotResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SnapshotResponse) ProtoMessage() {}

func (x *SnapshotResponse) ProtoReflect() protoreflect.Message {
	mi := &file_com_digitalasset_canton_sequencer_admin_v30_sequencer_administration_service_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SnapshotResponse.ProtoReflect.Descriptor instead.
func (*SnapshotResponse) Descriptor() ([]byte, []int) {
	return file_com_digitalasset_canton_sequencer_admin_v30_sequencer_administration_service_proto_rawDescGZIP(), []int{5}
}

func (m *SnapshotResponse) GetValue() isSnapshotResponse_Value {
	if m != nil {
		return m.Value
	}
	return nil
}

func (x *SnapshotResponse) GetSuccess() *SnapshotResponse_Success {
	if x, ok := x.GetValue().(*SnapshotResponse_Success_); ok {
		return x.Success
	}
	return nil
}

func (x *SnapshotResponse) GetFailure() *SnapshotResponse_Failure {
	if x, ok := x.GetValue().(*SnapshotResponse_Failure_); ok {
		return x.Failure
	}
	return nil
}

func (x *SnapshotResponse) GetVersionedSuccess() *SnapshotResponse_VersionedSuccess {
	if x, ok := x.GetValue().(*SnapshotResponse_VersionedSuccess_); ok {
		return x.VersionedSuccess
	}
	return nil
}

type isSnapshotResponse_Value interface {
	isSnapshotResponse_Value()
}

type SnapshotResponse_Success_ struct {
	Success *SnapshotResponse_Success `protobuf:"bytes,1,opt,name=success,proto3,oneof"`
}

type SnapshotResponse_Failure_ struct {
	Failure *SnapshotResponse_Failure `protobuf:"bytes,2,opt,name=failure,proto3,oneof"`
}

type SnapshotResponse_VersionedSuccess_ struct {
	VersionedSuccess *SnapshotResponse_VersionedSuccess `protobuf:"bytes,3,opt,name=versioned_success,json=versionedSuccess,proto3,oneof"`
}

func (*SnapshotResponse_Success_) isSnapshotResponse_Value() {}

func (*SnapshotResponse_Failure_) isSnapshotResponse_Value() {}

func (*SnapshotResponse_VersionedSuccess_) isSnapshotResponse_Value() {}

type OnboardingStateRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Request:
	//
	//	*OnboardingStateRequest_SequencerUid
	//	*OnboardingStateRequest_Timestamp
	Request isOnboardingStateRequest_Request `protobuf_oneof:"request"`
}

func (x *OnboardingStateRequest) Reset() {
	*x = OnboardingStateRequest{}
	mi := &file_com_digitalasset_canton_sequencer_admin_v30_sequencer_administration_service_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *OnboardingStateRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OnboardingStateRequest) ProtoMessage() {}

func (x *OnboardingStateRequest) ProtoReflect() protoreflect.Message {
	mi := &file_com_digitalasset_canton_sequencer_admin_v30_sequencer_administration_service_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OnboardingStateRequest.ProtoReflect.Descriptor instead.
func (*OnboardingStateRequest) Descriptor() ([]byte, []int) {
	return file_com_digitalasset_canton_sequencer_admin_v30_sequencer_administration_service_proto_rawDescGZIP(), []int{6}
}

func (m *OnboardingStateRequest) GetRequest() isOnboardingStateRequest_Request {
	if m != nil {
		return m.Request
	}
	return nil
}

func (x *OnboardingStateRequest) GetSequencerUid() string {
	if x, ok := x.GetRequest().(*OnboardingStateRequest_SequencerUid); ok {
		return x.SequencerUid
	}
	return ""
}

func (x *OnboardingStateRequest) GetTimestamp() *timestamppb.Timestamp {
	if x, ok := x.GetRequest().(*OnboardingStateRequest_Timestamp); ok {
		return x.Timestamp
	}
	return nil
}

type isOnboardingStateRequest_Request interface {
	isOnboardingStateRequest_Request()
}

type OnboardingStateRequest_SequencerUid struct {
	SequencerUid string `protobuf:"bytes,1,opt,name=sequencer_uid,json=sequencerUid,proto3,oneof"`
}

type OnboardingStateRequest_Timestamp struct {
	Timestamp *timestamppb.Timestamp `protobuf:"bytes,2,opt,name=timestamp,proto3,oneof"`
}

func (*OnboardingStateRequest_SequencerUid) isOnboardingStateRequest_Request() {}

func (*OnboardingStateRequest_Timestamp) isOnboardingStateRequest_Request() {}

type OnboardingStateResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OnboardingStateForSequencer []byte `protobuf:"bytes,1,opt,name=onboarding_state_for_sequencer,json=onboardingStateForSequencer,proto3" json:"onboarding_state_for_sequencer,omitempty"`
}

func (x *OnboardingStateResponse) Reset() {
	*x = OnboardingStateResponse{}
	mi := &file_com_digitalasset_canton_sequencer_admin_v30_sequencer_administration_service_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *OnboardingStateResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OnboardingStateResponse) ProtoMessage() {}

func (x *OnboardingStateResponse) ProtoReflect() protoreflect.Message {
	mi := &file_com_digitalasset_canton_sequencer_admin_v30_sequencer_administration_service_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OnboardingStateResponse.ProtoReflect.Descriptor instead.
func (*OnboardingStateResponse) Descriptor() ([]byte, []int) {
	return file_com_digitalasset_canton_sequencer_admin_v30_sequencer_administration_service_proto_rawDescGZIP(), []int{7}
}

func (x *OnboardingStateResponse) GetOnboardingStateForSequencer() []byte {
	if x != nil {
		return x.OnboardingStateForSequencer
	}
	return nil
}

type OnboardingStateForSequencer struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TopologySnapshot       *v301.TopologyTransactions  `protobuf:"bytes,1,opt,name=topology_snapshot,json=topologySnapshot,proto3" json:"topology_snapshot,omitempty"`
	StaticDomainParameters *v30.StaticDomainParameters `protobuf:"bytes,2,opt,name=static_domain_parameters,json=staticDomainParameters,proto3" json:"static_domain_parameters,omitempty"`
	SequencerSnapshot      *SequencerSnapshot          `protobuf:"bytes,3,opt,name=sequencer_snapshot,json=sequencerSnapshot,proto3" json:"sequencer_snapshot,omitempty"`
}

func (x *OnboardingStateForSequencer) Reset() {
	*x = OnboardingStateForSequencer{}
	mi := &file_com_digitalasset_canton_sequencer_admin_v30_sequencer_administration_service_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *OnboardingStateForSequencer) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OnboardingStateForSequencer) ProtoMessage() {}

func (x *OnboardingStateForSequencer) ProtoReflect() protoreflect.Message {
	mi := &file_com_digitalasset_canton_sequencer_admin_v30_sequencer_administration_service_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OnboardingStateForSequencer.ProtoReflect.Descriptor instead.
func (*OnboardingStateForSequencer) Descriptor() ([]byte, []int) {
	return file_com_digitalasset_canton_sequencer_admin_v30_sequencer_administration_service_proto_rawDescGZIP(), []int{8}
}

func (x *OnboardingStateForSequencer) GetTopologySnapshot() *v301.TopologyTransactions {
	if x != nil {
		return x.TopologySnapshot
	}
	return nil
}

func (x *OnboardingStateForSequencer) GetStaticDomainParameters() *v30.StaticDomainParameters {
	if x != nil {
		return x.StaticDomainParameters
	}
	return nil
}

func (x *OnboardingStateForSequencer) GetSequencerSnapshot() *SequencerSnapshot {
	if x != nil {
		return x.SequencerSnapshot
	}
	return nil
}

type PruningStatusRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *PruningStatusRequest) Reset() {
	*x = PruningStatusRequest{}
	mi := &file_com_digitalasset_canton_sequencer_admin_v30_sequencer_administration_service_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PruningStatusRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PruningStatusRequest) ProtoMessage() {}

func (x *PruningStatusRequest) ProtoReflect() protoreflect.Message {
	mi := &file_com_digitalasset_canton_sequencer_admin_v30_sequencer_administration_service_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PruningStatusRequest.ProtoReflect.Descriptor instead.
func (*PruningStatusRequest) Descriptor() ([]byte, []int) {
	return file_com_digitalasset_canton_sequencer_admin_v30_sequencer_administration_service_proto_rawDescGZIP(), []int{9}
}

type PruningStatusResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PruningStatus *SequencerPruningStatus `protobuf:"bytes,1,opt,name=pruning_status,json=pruningStatus,proto3" json:"pruning_status,omitempty"`
}

func (x *PruningStatusResponse) Reset() {
	*x = PruningStatusResponse{}
	mi := &file_com_digitalasset_canton_sequencer_admin_v30_sequencer_administration_service_proto_msgTypes[10]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PruningStatusResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PruningStatusResponse) ProtoMessage() {}

func (x *PruningStatusResponse) ProtoReflect() protoreflect.Message {
	mi := &file_com_digitalasset_canton_sequencer_admin_v30_sequencer_administration_service_proto_msgTypes[10]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PruningStatusResponse.ProtoReflect.Descriptor instead.
func (*PruningStatusResponse) Descriptor() ([]byte, []int) {
	return file_com_digitalasset_canton_sequencer_admin_v30_sequencer_administration_service_proto_rawDescGZIP(), []int{10}
}

func (x *PruningStatusResponse) GetPruningStatus() *SequencerPruningStatus {
	if x != nil {
		return x.PruningStatus
	}
	return nil
}

type DisableMemberRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Member string `protobuf:"bytes,1,opt,name=member,proto3" json:"member,omitempty"`
}

func (x *DisableMemberRequest) Reset() {
	*x = DisableMemberRequest{}
	mi := &file_com_digitalasset_canton_sequencer_admin_v30_sequencer_administration_service_proto_msgTypes[11]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DisableMemberRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DisableMemberRequest) ProtoMessage() {}

func (x *DisableMemberRequest) ProtoReflect() protoreflect.Message {
	mi := &file_com_digitalasset_canton_sequencer_admin_v30_sequencer_administration_service_proto_msgTypes[11]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DisableMemberRequest.ProtoReflect.Descriptor instead.
func (*DisableMemberRequest) Descriptor() ([]byte, []int) {
	return file_com_digitalasset_canton_sequencer_admin_v30_sequencer_administration_service_proto_rawDescGZIP(), []int{11}
}

func (x *DisableMemberRequest) GetMember() string {
	if x != nil {
		return x.Member
	}
	return ""
}

type DisableMemberResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *DisableMemberResponse) Reset() {
	*x = DisableMemberResponse{}
	mi := &file_com_digitalasset_canton_sequencer_admin_v30_sequencer_administration_service_proto_msgTypes[12]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DisableMemberResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DisableMemberResponse) ProtoMessage() {}

func (x *DisableMemberResponse) ProtoReflect() protoreflect.Message {
	mi := &file_com_digitalasset_canton_sequencer_admin_v30_sequencer_administration_service_proto_msgTypes[12]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DisableMemberResponse.ProtoReflect.Descriptor instead.
func (*DisableMemberResponse) Descriptor() ([]byte, []int) {
	return file_com_digitalasset_canton_sequencer_admin_v30_sequencer_administration_service_proto_rawDescGZIP(), []int{12}
}

type SnapshotResponse_Success struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	State *SequencerSnapshot `protobuf:"bytes,1,opt,name=state,proto3" json:"state,omitempty"`
}

func (x *SnapshotResponse_Success) Reset() {
	*x = SnapshotResponse_Success{}
	mi := &file_com_digitalasset_canton_sequencer_admin_v30_sequencer_administration_service_proto_msgTypes[14]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SnapshotResponse_Success) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SnapshotResponse_Success) ProtoMessage() {}

func (x *SnapshotResponse_Success) ProtoReflect() protoreflect.Message {
	mi := &file_com_digitalasset_canton_sequencer_admin_v30_sequencer_administration_service_proto_msgTypes[14]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SnapshotResponse_Success.ProtoReflect.Descriptor instead.
func (*SnapshotResponse_Success) Descriptor() ([]byte, []int) {
	return file_com_digitalasset_canton_sequencer_admin_v30_sequencer_administration_service_proto_rawDescGZIP(), []int{5, 0}
}

func (x *SnapshotResponse_Success) GetState() *SequencerSnapshot {
	if x != nil {
		return x.State
	}
	return nil
}

type SnapshotResponse_Failure struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Reason string `protobuf:"bytes,1,opt,name=reason,proto3" json:"reason,omitempty"`
}

func (x *SnapshotResponse_Failure) Reset() {
	*x = SnapshotResponse_Failure{}
	mi := &file_com_digitalasset_canton_sequencer_admin_v30_sequencer_administration_service_proto_msgTypes[15]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SnapshotResponse_Failure) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SnapshotResponse_Failure) ProtoMessage() {}

func (x *SnapshotResponse_Failure) ProtoReflect() protoreflect.Message {
	mi := &file_com_digitalasset_canton_sequencer_admin_v30_sequencer_administration_service_proto_msgTypes[15]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SnapshotResponse_Failure.ProtoReflect.Descriptor instead.
func (*SnapshotResponse_Failure) Descriptor() ([]byte, []int) {
	return file_com_digitalasset_canton_sequencer_admin_v30_sequencer_administration_service_proto_rawDescGZIP(), []int{5, 1}
}

func (x *SnapshotResponse_Failure) GetReason() string {
	if x != nil {
		return x.Reason
	}
	return ""
}

type SnapshotResponse_VersionedSuccess struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Snapshot []byte `protobuf:"bytes,1,opt,name=snapshot,proto3" json:"snapshot,omitempty"`
}

func (x *SnapshotResponse_VersionedSuccess) Reset() {
	*x = SnapshotResponse_VersionedSuccess{}
	mi := &file_com_digitalasset_canton_sequencer_admin_v30_sequencer_administration_service_proto_msgTypes[16]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SnapshotResponse_VersionedSuccess) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SnapshotResponse_VersionedSuccess) ProtoMessage() {}

func (x *SnapshotResponse_VersionedSuccess) ProtoReflect() protoreflect.Message {
	mi := &file_com_digitalasset_canton_sequencer_admin_v30_sequencer_administration_service_proto_msgTypes[16]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SnapshotResponse_VersionedSuccess.ProtoReflect.Descriptor instead.
func (*SnapshotResponse_VersionedSuccess) Descriptor() ([]byte, []int) {
	return file_com_digitalasset_canton_sequencer_admin_v30_sequencer_administration_service_proto_rawDescGZIP(), []int{5, 2}
}

func (x *SnapshotResponse_VersionedSuccess) GetSnapshot() []byte {
	if x != nil {
		return x.Snapshot
	}
	return nil
}

var File_com_digitalasset_canton_sequencer_admin_v30_sequencer_administration_service_proto protoreflect.FileDescriptor

var file_com_digitalasset_canton_sequencer_admin_v30_sequencer_administration_service_proto_rawDesc = []byte{
	0x0a, 0x52, 0x63, 0x6f, 0x6d, 0x2f, 0x64, 0x69, 0x67, 0x69, 0x74, 0x61, 0x6c, 0x61, 0x73, 0x73,
	0x65, 0x74, 0x2f, 0x63, 0x61, 0x6e, 0x74, 0x6f, 0x6e, 0x2f, 0x73, 0x65, 0x71, 0x75, 0x65, 0x6e,
	0x63, 0x65, 0x72, 0x2f, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2f, 0x76, 0x33, 0x30, 0x2f, 0x73, 0x65,
	0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x72, 0x5f, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x69, 0x73, 0x74,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x12, 0x2b, 0x63, 0x6f, 0x6d, 0x2e, 0x64, 0x69, 0x67, 0x69, 0x74, 0x61,
	0x6c, 0x61, 0x73, 0x73, 0x65, 0x74, 0x2e, 0x63, 0x61, 0x6e, 0x74, 0x6f, 0x6e, 0x2e, 0x73, 0x65,
	0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x72, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x76, 0x33,
	0x30, 0x1a, 0x35, 0x63, 0x6f, 0x6d, 0x2f, 0x64, 0x69, 0x67, 0x69, 0x74, 0x61, 0x6c, 0x61, 0x73,
	0x73, 0x65, 0x74, 0x2f, 0x63, 0x61, 0x6e, 0x74, 0x6f, 0x6e, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x63, 0x6f, 0x6c, 0x2f, 0x76, 0x33, 0x30, 0x2f, 0x73, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x69,
	0x6e, 0x67, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x45, 0x63, 0x6f, 0x6d, 0x2f, 0x64, 0x69,
	0x67, 0x69, 0x74, 0x61, 0x6c, 0x61, 0x73, 0x73, 0x65, 0x74, 0x2f, 0x63, 0x61, 0x6e, 0x74, 0x6f,
	0x6e, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2f, 0x76, 0x33, 0x30, 0x2f, 0x74,
	0x72, 0x61, 0x66, 0x66, 0x69, 0x63, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x5f, 0x70,
	0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a,
	0x53, 0x63, 0x6f, 0x6d, 0x2f, 0x64, 0x69, 0x67, 0x69, 0x74, 0x61, 0x6c, 0x61, 0x73, 0x73, 0x65,
	0x74, 0x2f, 0x63, 0x61, 0x6e, 0x74, 0x6f, 0x6e, 0x2f, 0x73, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63,
	0x65, 0x72, 0x2f, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2f, 0x76, 0x33, 0x30, 0x2f, 0x73, 0x65, 0x71,
	0x75, 0x65, 0x6e, 0x63, 0x65, 0x72, 0x5f, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x61, 0x6c, 0x69, 0x7a,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x73, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x3d, 0x63, 0x6f, 0x6d, 0x2f, 0x64, 0x69, 0x67, 0x69, 0x74, 0x61,
	0x6c, 0x61, 0x73, 0x73, 0x65, 0x74, 0x2f, 0x63, 0x61, 0x6e, 0x74, 0x6f, 0x6e, 0x2f, 0x74, 0x6f,
	0x70, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x2f, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2f, 0x76, 0x33, 0x30,
	0x2f, 0x74, 0x6f, 0x70, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x5f, 0x65, 0x78, 0x74, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x22, 0xa4, 0x03, 0x0a, 0x1a, 0x54, 0x72, 0x61, 0x66, 0x66, 0x69, 0x63,
	0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x18, 0x01,
	0x20, 0x03, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x12, 0x29, 0x0a,
	0x0f, 0x65, 0x78, 0x61, 0x63, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x48, 0x00, 0x52, 0x0e, 0x65, 0x78, 0x61, 0x63, 0x74, 0x54,
	0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x8a, 0x01, 0x0a, 0x12, 0x72, 0x65, 0x6c,
	0x61, 0x74, 0x69, 0x76, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x59, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x64, 0x69, 0x67, 0x69,
	0x74, 0x61, 0x6c, 0x61, 0x73, 0x73, 0x65, 0x74, 0x2e, 0x63, 0x61, 0x6e, 0x74, 0x6f, 0x6e, 0x2e,
	0x73, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x72, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e,
	0x76, 0x33, 0x30, 0x2e, 0x54, 0x72, 0x61, 0x66, 0x66, 0x69, 0x63, 0x43, 0x6f, 0x6e, 0x74, 0x72,
	0x6f, 0x6c, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x52,
	0x65, 0x6c, 0x61, 0x74, 0x69, 0x76, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70,
	0x48, 0x00, 0x52, 0x11, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x76, 0x65, 0x54, 0x69, 0x6d, 0x65,
	0x73, 0x74, 0x61, 0x6d, 0x70, 0x22, 0x9d, 0x01, 0x0a, 0x11, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x69,
	0x76, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x2e, 0x0a, 0x2a, 0x52,
	0x45, 0x4c, 0x41, 0x54, 0x49, 0x56, 0x45, 0x5f, 0x54, 0x49, 0x4d, 0x45, 0x53, 0x54, 0x41, 0x4d,
	0x50, 0x5f, 0x4c, 0x41, 0x54, 0x45, 0x53, 0x54, 0x5f, 0x53, 0x41, 0x46, 0x45, 0x5f, 0x55, 0x4e,
	0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x2d, 0x0a, 0x29, 0x52,
	0x45, 0x4c, 0x41, 0x54, 0x49, 0x56, 0x45, 0x5f, 0x54, 0x49, 0x4d, 0x45, 0x53, 0x54, 0x41, 0x4d,
	0x50, 0x5f, 0x4c, 0x41, 0x53, 0x54, 0x5f, 0x55, 0x50, 0x44, 0x41, 0x54, 0x45, 0x5f, 0x50, 0x45,
	0x52, 0x5f, 0x4d, 0x45, 0x4d, 0x42, 0x45, 0x52, 0x10, 0x01, 0x12, 0x29, 0x0a, 0x25, 0x52, 0x45,
	0x4c, 0x41, 0x54, 0x49, 0x56, 0x45, 0x5f, 0x54, 0x49, 0x4d, 0x45, 0x53, 0x54, 0x41, 0x4d, 0x50,
	0x5f, 0x4c, 0x41, 0x54, 0x45, 0x53, 0x54, 0x5f, 0x41, 0x50, 0x50, 0x52, 0x4f, 0x58, 0x49, 0x4d,
	0x41, 0x54, 0x45, 0x10, 0x02, 0x42, 0x14, 0x0a, 0x12, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61,
	0x6d, 0x70, 0x5f, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x22, 0x98, 0x02, 0x0a, 0x1b,
	0x54, 0x72, 0x61, 0x66, 0x66, 0x69, 0x63, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x53, 0x74,
	0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x82, 0x01, 0x0a, 0x0e,
	0x74, 0x72, 0x61, 0x66, 0x66, 0x69, 0x63, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x73, 0x18, 0x01,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x5b, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x64, 0x69, 0x67, 0x69, 0x74,
	0x61, 0x6c, 0x61, 0x73, 0x73, 0x65, 0x74, 0x2e, 0x63, 0x61, 0x6e, 0x74, 0x6f, 0x6e, 0x2e, 0x73,
	0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x72, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x76,
	0x33, 0x30, 0x2e, 0x54, 0x72, 0x61, 0x66, 0x66, 0x69, 0x63, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f,
	0x6c, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x54,
	0x72, 0x61, 0x66, 0x66, 0x69, 0x63, 0x53, 0x74, 0x61, 0x74, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x52, 0x0d, 0x74, 0x72, 0x61, 0x66, 0x66, 0x69, 0x63, 0x53, 0x74, 0x61, 0x74, 0x65, 0x73,
	0x1a, 0x74, 0x0a, 0x12, 0x54, 0x72, 0x61, 0x66, 0x66, 0x69, 0x63, 0x53, 0x74, 0x61, 0x74, 0x65,
	0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x48, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x32, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x64, 0x69,
	0x67, 0x69, 0x74, 0x61, 0x6c, 0x61, 0x73, 0x73, 0x65, 0x74, 0x2e, 0x63, 0x61, 0x6e, 0x74, 0x6f,
	0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x76, 0x33, 0x30, 0x2e, 0x54,
	0x72, 0x61, 0x66, 0x66, 0x69, 0x63, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x84, 0x01, 0x0a, 0x1a, 0x53, 0x65, 0x74, 0x54, 0x72,
	0x61, 0x66, 0x66, 0x69, 0x63, 0x50, 0x75, 0x72, 0x63, 0x68, 0x61, 0x73, 0x65, 0x64, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x16, 0x0a,
	0x06, 0x73, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x73,
	0x65, 0x72, 0x69, 0x61, 0x6c, 0x12, 0x36, 0x0a, 0x17, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x74,
	0x72, 0x61, 0x66, 0x66, 0x69, 0x63, 0x5f, 0x70, 0x75, 0x72, 0x63, 0x68, 0x61, 0x73, 0x65, 0x64,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x15, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x54, 0x72, 0x61,
	0x66, 0x66, 0x69, 0x63, 0x50, 0x75, 0x72, 0x63, 0x68, 0x61, 0x73, 0x65, 0x64, 0x22, 0x73, 0x0a,
	0x1b, 0x53, 0x65, 0x74, 0x54, 0x72, 0x61, 0x66, 0x66, 0x69, 0x63, 0x50, 0x75, 0x72, 0x63, 0x68,
	0x61, 0x73, 0x65, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x54, 0x0a, 0x18,
	0x6d, 0x61, 0x78, 0x5f, 0x73, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x69, 0x6e, 0x67, 0x5f, 0x74,
	0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x16, 0x6d, 0x61, 0x78, 0x53,
	0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x69, 0x6e, 0x67, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61,
	0x6d, 0x70, 0x22, 0x4b, 0x0a, 0x0f, 0x53, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x38, 0x0a, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61,
	0x6d, 0x70, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73,
	0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x22,
	0x94, 0x04, 0x0a, 0x10, 0x53, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x61, 0x0a, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x45, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x64, 0x69, 0x67, 0x69,
	0x74, 0x61, 0x6c, 0x61, 0x73, 0x73, 0x65, 0x74, 0x2e, 0x63, 0x61, 0x6e, 0x74, 0x6f, 0x6e, 0x2e,
	0x73, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x72, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e,
	0x76, 0x33, 0x30, 0x2e, 0x53, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x53, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x48, 0x00, 0x52, 0x07,
	0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x12, 0x61, 0x0a, 0x07, 0x66, 0x61, 0x69, 0x6c, 0x75,
	0x72, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x45, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x64,
	0x69, 0x67, 0x69, 0x74, 0x61, 0x6c, 0x61, 0x73, 0x73, 0x65, 0x74, 0x2e, 0x63, 0x61, 0x6e, 0x74,
	0x6f, 0x6e, 0x2e, 0x73, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x72, 0x2e, 0x61, 0x64, 0x6d,
	0x69, 0x6e, 0x2e, 0x76, 0x33, 0x30, 0x2e, 0x53, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x46, 0x61, 0x69, 0x6c, 0x75, 0x72, 0x65, 0x48,
	0x00, 0x52, 0x07, 0x66, 0x61, 0x69, 0x6c, 0x75, 0x72, 0x65, 0x12, 0x7d, 0x0a, 0x11, 0x76, 0x65,
	0x72, 0x73, 0x69, 0x6f, 0x6e, 0x65, 0x64, 0x5f, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x4e, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x64, 0x69, 0x67, 0x69,
	0x74, 0x61, 0x6c, 0x61, 0x73, 0x73, 0x65, 0x74, 0x2e, 0x63, 0x61, 0x6e, 0x74, 0x6f, 0x6e, 0x2e,
	0x73, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x72, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e,
	0x76, 0x33, 0x30, 0x2e, 0x53, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x65, 0x64, 0x53, 0x75,
	0x63, 0x63, 0x65, 0x73, 0x73, 0x48, 0x00, 0x52, 0x10, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e,
	0x65, 0x64, 0x53, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x1a, 0x5f, 0x0a, 0x07, 0x53, 0x75, 0x63,
	0x63, 0x65, 0x73, 0x73, 0x12, 0x54, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x3e, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x64, 0x69, 0x67, 0x69, 0x74, 0x61,
	0x6c, 0x61, 0x73, 0x73, 0x65, 0x74, 0x2e, 0x63, 0x61, 0x6e, 0x74, 0x6f, 0x6e, 0x2e, 0x73, 0x65,
	0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x72, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x76, 0x33,
	0x30, 0x2e, 0x53, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x72, 0x53, 0x6e, 0x61, 0x70, 0x73,
	0x68, 0x6f, 0x74, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x1a, 0x21, 0x0a, 0x07, 0x46, 0x61,
	0x69, 0x6c, 0x75, 0x72, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x1a, 0x2e, 0x0a,
	0x10, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x65, 0x64, 0x53, 0x75, 0x63, 0x63, 0x65, 0x73,
	0x73, 0x12, 0x1a, 0x0a, 0x08, 0x73, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0c, 0x52, 0x08, 0x73, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x42, 0x07, 0x0a,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x86, 0x01, 0x0a, 0x16, 0x4f, 0x6e, 0x62, 0x6f, 0x61,
	0x72, 0x64, 0x69, 0x6e, 0x67, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x25, 0x0a, 0x0d, 0x73, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x72, 0x5f, 0x75,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x0c, 0x73, 0x65, 0x71, 0x75,
	0x65, 0x6e, 0x63, 0x65, 0x72, 0x55, 0x69, 0x64, 0x12, 0x3a, 0x0a, 0x09, 0x74, 0x69, 0x6d, 0x65,
	0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69,
	0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x48, 0x00, 0x52, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73,
	0x74, 0x61, 0x6d, 0x70, 0x42, 0x09, 0x0a, 0x07, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22,
	0x5e, 0x0a, 0x17, 0x4f, 0x6e, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x53, 0x74, 0x61,
	0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x43, 0x0a, 0x1e, 0x6f, 0x6e,
	0x62, 0x6f, 0x61, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x5f, 0x66,
	0x6f, 0x72, 0x5f, 0x73, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0c, 0x52, 0x1b, 0x6f, 0x6e, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x53, 0x74,
	0x61, 0x74, 0x65, 0x46, 0x6f, 0x72, 0x53, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x72, 0x22,
	0xf3, 0x02, 0x0a, 0x1b, 0x4f, 0x6e, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x53, 0x74,
	0x61, 0x74, 0x65, 0x46, 0x6f, 0x72, 0x53, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x72, 0x12,
	0x6d, 0x0a, 0x11, 0x74, 0x6f, 0x70, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x5f, 0x73, 0x6e, 0x61, 0x70,
	0x73, 0x68, 0x6f, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x40, 0x2e, 0x63, 0x6f, 0x6d,
	0x2e, 0x64, 0x69, 0x67, 0x69, 0x74, 0x61, 0x6c, 0x61, 0x73, 0x73, 0x65, 0x74, 0x2e, 0x63, 0x61,
	0x6e, 0x74, 0x6f, 0x6e, 0x2e, 0x74, 0x6f, 0x70, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x2e, 0x61, 0x64,
	0x6d, 0x69, 0x6e, 0x2e, 0x76, 0x33, 0x30, 0x2e, 0x54, 0x6f, 0x70, 0x6f, 0x6c, 0x6f, 0x67, 0x79,
	0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x10, 0x74, 0x6f,
	0x70, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x53, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x12, 0x76,
	0x0a, 0x18, 0x73, 0x74, 0x61, 0x74, 0x69, 0x63, 0x5f, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x5f,
	0x70, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x3c, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x64, 0x69, 0x67, 0x69, 0x74, 0x61, 0x6c, 0x61, 0x73,
	0x73, 0x65, 0x74, 0x2e, 0x63, 0x61, 0x6e, 0x74, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x63, 0x6f, 0x6c, 0x2e, 0x76, 0x33, 0x30, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x69, 0x63, 0x44, 0x6f,
	0x6d, 0x61, 0x69, 0x6e, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x52, 0x16,
	0x73, 0x74, 0x61, 0x74, 0x69, 0x63, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x50, 0x61, 0x72, 0x61,
	0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x12, 0x6d, 0x0a, 0x12, 0x73, 0x65, 0x71, 0x75, 0x65, 0x6e,
	0x63, 0x65, 0x72, 0x5f, 0x73, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x3e, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x64, 0x69, 0x67, 0x69, 0x74, 0x61, 0x6c,
	0x61, 0x73, 0x73, 0x65, 0x74, 0x2e, 0x63, 0x61, 0x6e, 0x74, 0x6f, 0x6e, 0x2e, 0x73, 0x65, 0x71,
	0x75, 0x65, 0x6e, 0x63, 0x65, 0x72, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x76, 0x33, 0x30,
	0x2e, 0x53, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x72, 0x53, 0x6e, 0x61, 0x70, 0x73, 0x68,
	0x6f, 0x74, 0x52, 0x11, 0x73, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x72, 0x53, 0x6e, 0x61,
	0x70, 0x73, 0x68, 0x6f, 0x74, 0x22, 0x16, 0x0a, 0x14, 0x50, 0x72, 0x75, 0x6e, 0x69, 0x6e, 0x67,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x83, 0x01,
	0x0a, 0x15, 0x50, 0x72, 0x75, 0x6e, 0x69, 0x6e, 0x67, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x6a, 0x0a, 0x0e, 0x70, 0x72, 0x75, 0x6e, 0x69,
	0x6e, 0x67, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x43, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x64, 0x69, 0x67, 0x69, 0x74, 0x61, 0x6c, 0x61, 0x73, 0x73,
	0x65, 0x74, 0x2e, 0x63, 0x61, 0x6e, 0x74, 0x6f, 0x6e, 0x2e, 0x73, 0x65, 0x71, 0x75, 0x65, 0x6e,
	0x63, 0x65, 0x72, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x76, 0x33, 0x30, 0x2e, 0x53, 0x65,
	0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x72, 0x50, 0x72, 0x75, 0x6e, 0x69, 0x6e, 0x67, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x52, 0x0d, 0x70, 0x72, 0x75, 0x6e, 0x69, 0x6e, 0x67, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x22, 0x2e, 0x0a, 0x14, 0x44, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x4d, 0x65,
	0x6d, 0x62, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x6d,
	0x65, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x6d, 0x65, 0x6d,
	0x62, 0x65, 0x72, 0x22, 0x17, 0x0a, 0x15, 0x44, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x4d, 0x65,
	0x6d, 0x62, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x32, 0xd3, 0x07, 0x0a,
	0x1e, 0x53, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x72, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x69,
	0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12,
	0x96, 0x01, 0x0a, 0x0d, 0x50, 0x72, 0x75, 0x6e, 0x69, 0x6e, 0x67, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x12, 0x41, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x64, 0x69, 0x67, 0x69, 0x74, 0x61, 0x6c, 0x61,
	0x73, 0x73, 0x65, 0x74, 0x2e, 0x63, 0x61, 0x6e, 0x74, 0x6f, 0x6e, 0x2e, 0x73, 0x65, 0x71, 0x75,
	0x65, 0x6e, 0x63, 0x65, 0x72, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x76, 0x33, 0x30, 0x2e,
	0x50, 0x72, 0x75, 0x6e, 0x69, 0x6e, 0x67, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x42, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x64, 0x69, 0x67, 0x69, 0x74,
	0x61, 0x6c, 0x61, 0x73, 0x73, 0x65, 0x74, 0x2e, 0x63, 0x61, 0x6e, 0x74, 0x6f, 0x6e, 0x2e, 0x73,
	0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x72, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x76,
	0x33, 0x30, 0x2e, 0x50, 0x72, 0x75, 0x6e, 0x69, 0x6e, 0x67, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0xa8, 0x01, 0x0a, 0x13, 0x54, 0x72, 0x61,
	0x66, 0x66, 0x69, 0x63, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x53, 0x74, 0x61, 0x74, 0x65,
	0x12, 0x47, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x64, 0x69, 0x67, 0x69, 0x74, 0x61, 0x6c, 0x61, 0x73,
	0x73, 0x65, 0x74, 0x2e, 0x63, 0x61, 0x6e, 0x74, 0x6f, 0x6e, 0x2e, 0x73, 0x65, 0x71, 0x75, 0x65,
	0x6e, 0x63, 0x65, 0x72, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x76, 0x33, 0x30, 0x2e, 0x54,
	0x72, 0x61, 0x66, 0x66, 0x69, 0x63, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x53, 0x74, 0x61,
	0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x48, 0x2e, 0x63, 0x6f, 0x6d, 0x2e,
	0x64, 0x69, 0x67, 0x69, 0x74, 0x61, 0x6c, 0x61, 0x73, 0x73, 0x65, 0x74, 0x2e, 0x63, 0x61, 0x6e,
	0x74, 0x6f, 0x6e, 0x2e, 0x73, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x72, 0x2e, 0x61, 0x64,
	0x6d, 0x69, 0x6e, 0x2e, 0x76, 0x33, 0x30, 0x2e, 0x54, 0x72, 0x61, 0x66, 0x66, 0x69, 0x63, 0x43,
	0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0xa8, 0x01, 0x0a, 0x13, 0x53, 0x65, 0x74, 0x54, 0x72, 0x61, 0x66, 0x66,
	0x69, 0x63, 0x50, 0x75, 0x72, 0x63, 0x68, 0x61, 0x73, 0x65, 0x64, 0x12, 0x47, 0x2e, 0x63, 0x6f,
	0x6d, 0x2e, 0x64, 0x69, 0x67, 0x69, 0x74, 0x61, 0x6c, 0x61, 0x73, 0x73, 0x65, 0x74, 0x2e, 0x63,
	0x61, 0x6e, 0x74, 0x6f, 0x6e, 0x2e, 0x73, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x72, 0x2e,
	0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x76, 0x33, 0x30, 0x2e, 0x53, 0x65, 0x74, 0x54, 0x72, 0x61,
	0x66, 0x66, 0x69, 0x63, 0x50, 0x75, 0x72, 0x63, 0x68, 0x61, 0x73, 0x65, 0x64, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x48, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x64, 0x69, 0x67, 0x69, 0x74,
	0x61, 0x6c, 0x61, 0x73, 0x73, 0x65, 0x74, 0x2e, 0x63, 0x61, 0x6e, 0x74, 0x6f, 0x6e, 0x2e, 0x73,
	0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x72, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x76,
	0x33, 0x30, 0x2e, 0x53, 0x65, 0x74, 0x54, 0x72, 0x61, 0x66, 0x66, 0x69, 0x63, 0x50, 0x75, 0x72,
	0x63, 0x68, 0x61, 0x73, 0x65, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x87,
	0x01, 0x0a, 0x08, 0x53, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x12, 0x3c, 0x2e, 0x63, 0x6f,
	0x6d, 0x2e, 0x64, 0x69, 0x67, 0x69, 0x74, 0x61, 0x6c, 0x61, 0x73, 0x73, 0x65, 0x74, 0x2e, 0x63,
	0x61, 0x6e, 0x74, 0x6f, 0x6e, 0x2e, 0x73, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x72, 0x2e,
	0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x76, 0x33, 0x30, 0x2e, 0x53, 0x6e, 0x61, 0x70, 0x73, 0x68,
	0x6f, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x3d, 0x2e, 0x63, 0x6f, 0x6d, 0x2e,
	0x64, 0x69, 0x67, 0x69, 0x74, 0x61, 0x6c, 0x61, 0x73, 0x73, 0x65, 0x74, 0x2e, 0x63, 0x61, 0x6e,
	0x74, 0x6f, 0x6e, 0x2e, 0x73, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x72, 0x2e, 0x61, 0x64,
	0x6d, 0x69, 0x6e, 0x2e, 0x76, 0x33, 0x30, 0x2e, 0x53, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x9e, 0x01, 0x0a, 0x0f, 0x4f, 0x6e, 0x62,
	0x6f, 0x61, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x43, 0x2e, 0x63,
	0x6f, 0x6d, 0x2e, 0x64, 0x69, 0x67, 0x69, 0x74, 0x61, 0x6c, 0x61, 0x73, 0x73, 0x65, 0x74, 0x2e,
	0x63, 0x61, 0x6e, 0x74, 0x6f, 0x6e, 0x2e, 0x73, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x72,
	0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x76, 0x33, 0x30, 0x2e, 0x4f, 0x6e, 0x62, 0x6f, 0x61,
	0x72, 0x64, 0x69, 0x6e, 0x67, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x44, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x64, 0x69, 0x67, 0x69, 0x74, 0x61, 0x6c, 0x61,
	0x73, 0x73, 0x65, 0x74, 0x2e, 0x63, 0x61, 0x6e, 0x74, 0x6f, 0x6e, 0x2e, 0x73, 0x65, 0x71, 0x75,
	0x65, 0x6e, 0x63, 0x65, 0x72, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x76, 0x33, 0x30, 0x2e,
	0x4f, 0x6e, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x30, 0x01, 0x12, 0x96, 0x01, 0x0a, 0x0d, 0x44, 0x69,
	0x73, 0x61, 0x62, 0x6c, 0x65, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x41, 0x2e, 0x63, 0x6f,
	0x6d, 0x2e, 0x64, 0x69, 0x67, 0x69, 0x74, 0x61, 0x6c, 0x61, 0x73, 0x73, 0x65, 0x74, 0x2e, 0x63,
	0x61, 0x6e, 0x74, 0x6f, 0x6e, 0x2e, 0x73, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x72, 0x2e,
	0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x76, 0x33, 0x30, 0x2e, 0x44, 0x69, 0x73, 0x61, 0x62, 0x6c,
	0x65, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x42,
	0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x64, 0x69, 0x67, 0x69, 0x74, 0x61, 0x6c, 0x61, 0x73, 0x73, 0x65,
	0x74, 0x2e, 0x63, 0x61, 0x6e, 0x74, 0x6f, 0x6e, 0x2e, 0x73, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63,
	0x65, 0x72, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x76, 0x33, 0x30, 0x2e, 0x44, 0x69, 0x73,
	0x61, 0x62, 0x6c, 0x65, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x42, 0x5c, 0x5a, 0x5a, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d,
	0x2f, 0x64, 0x69, 0x67, 0x69, 0x74, 0x61, 0x6c, 0x2d, 0x61, 0x73, 0x73, 0x65, 0x74, 0x2f, 0x64,
	0x61, 0x7a, 0x6c, 0x2d, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2f, 0x76, 0x38, 0x2f, 0x67, 0x6f,
	0x2f, 0x61, 0x70, 0x69, 0x2f, 0x63, 0x6f, 0x6d, 0x2f, 0x64, 0x69, 0x67, 0x69, 0x74, 0x61, 0x6c,
	0x61, 0x73, 0x73, 0x65, 0x74, 0x2f, 0x63, 0x61, 0x6e, 0x74, 0x6f, 0x6e, 0x2f, 0x73, 0x65, 0x71,
	0x75, 0x65, 0x6e, 0x63, 0x65, 0x72, 0x2f, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2f, 0x76, 0x33, 0x30,
	0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_com_digitalasset_canton_sequencer_admin_v30_sequencer_administration_service_proto_rawDescOnce sync.Once
	file_com_digitalasset_canton_sequencer_admin_v30_sequencer_administration_service_proto_rawDescData = file_com_digitalasset_canton_sequencer_admin_v30_sequencer_administration_service_proto_rawDesc
)

func file_com_digitalasset_canton_sequencer_admin_v30_sequencer_administration_service_proto_rawDescGZIP() []byte {
	file_com_digitalasset_canton_sequencer_admin_v30_sequencer_administration_service_proto_rawDescOnce.Do(func() {
		file_com_digitalasset_canton_sequencer_admin_v30_sequencer_administration_service_proto_rawDescData = protoimpl.X.CompressGZIP(file_com_digitalasset_canton_sequencer_admin_v30_sequencer_administration_service_proto_rawDescData)
	})
	return file_com_digitalasset_canton_sequencer_admin_v30_sequencer_administration_service_proto_rawDescData
}

var file_com_digitalasset_canton_sequencer_admin_v30_sequencer_administration_service_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_com_digitalasset_canton_sequencer_admin_v30_sequencer_administration_service_proto_msgTypes = make([]protoimpl.MessageInfo, 17)
var file_com_digitalasset_canton_sequencer_admin_v30_sequencer_administration_service_proto_goTypes = []any{
	(TrafficControlStateRequest_RelativeTimestamp)(0), // 0: com.digitalasset.canton.sequencer.admin.v30.TrafficControlStateRequest.RelativeTimestamp
	(*TrafficControlStateRequest)(nil),                // 1: com.digitalasset.canton.sequencer.admin.v30.TrafficControlStateRequest
	(*TrafficControlStateResponse)(nil),               // 2: com.digitalasset.canton.sequencer.admin.v30.TrafficControlStateResponse
	(*SetTrafficPurchasedRequest)(nil),                // 3: com.digitalasset.canton.sequencer.admin.v30.SetTrafficPurchasedRequest
	(*SetTrafficPurchasedResponse)(nil),               // 4: com.digitalasset.canton.sequencer.admin.v30.SetTrafficPurchasedResponse
	(*SnapshotRequest)(nil),                           // 5: com.digitalasset.canton.sequencer.admin.v30.SnapshotRequest
	(*SnapshotResponse)(nil),                          // 6: com.digitalasset.canton.sequencer.admin.v30.SnapshotResponse
	(*OnboardingStateRequest)(nil),                    // 7: com.digitalasset.canton.sequencer.admin.v30.OnboardingStateRequest
	(*OnboardingStateResponse)(nil),                   // 8: com.digitalasset.canton.sequencer.admin.v30.OnboardingStateResponse
	(*OnboardingStateForSequencer)(nil),               // 9: com.digitalasset.canton.sequencer.admin.v30.OnboardingStateForSequencer
	(*PruningStatusRequest)(nil),                      // 10: com.digitalasset.canton.sequencer.admin.v30.PruningStatusRequest
	(*PruningStatusResponse)(nil),                     // 11: com.digitalasset.canton.sequencer.admin.v30.PruningStatusResponse
	(*DisableMemberRequest)(nil),                      // 12: com.digitalasset.canton.sequencer.admin.v30.DisableMemberRequest
	(*DisableMemberResponse)(nil),                     // 13: com.digitalasset.canton.sequencer.admin.v30.DisableMemberResponse
	nil,                                               // 14: com.digitalasset.canton.sequencer.admin.v30.TrafficControlStateResponse.TrafficStatesEntry
	(*SnapshotResponse_Success)(nil),                  // 15: com.digitalasset.canton.sequencer.admin.v30.SnapshotResponse.Success
	(*SnapshotResponse_Failure)(nil),                  // 16: com.digitalasset.canton.sequencer.admin.v30.SnapshotResponse.Failure
	(*SnapshotResponse_VersionedSuccess)(nil),         // 17: com.digitalasset.canton.sequencer.admin.v30.SnapshotResponse.VersionedSuccess
	(*timestamppb.Timestamp)(nil),                     // 18: google.protobuf.Timestamp
	(*v301.TopologyTransactions)(nil),                 // 19: com.digitalasset.canton.topology.admin.v30.TopologyTransactions
	(*v30.StaticDomainParameters)(nil),                // 20: com.digitalasset.canton.protocol.v30.StaticDomainParameters
	(*SequencerSnapshot)(nil),                         // 21: com.digitalasset.canton.sequencer.admin.v30.SequencerSnapshot
	(*SequencerPruningStatus)(nil),                    // 22: com.digitalasset.canton.sequencer.admin.v30.SequencerPruningStatus
	(*v30.TrafficState)(nil),                          // 23: com.digitalasset.canton.protocol.v30.TrafficState
}
var file_com_digitalasset_canton_sequencer_admin_v30_sequencer_administration_service_proto_depIdxs = []int32{
	0,  // 0: com.digitalasset.canton.sequencer.admin.v30.TrafficControlStateRequest.relative_timestamp:type_name -> com.digitalasset.canton.sequencer.admin.v30.TrafficControlStateRequest.RelativeTimestamp
	14, // 1: com.digitalasset.canton.sequencer.admin.v30.TrafficControlStateResponse.traffic_states:type_name -> com.digitalasset.canton.sequencer.admin.v30.TrafficControlStateResponse.TrafficStatesEntry
	18, // 2: com.digitalasset.canton.sequencer.admin.v30.SetTrafficPurchasedResponse.max_sequencing_timestamp:type_name -> google.protobuf.Timestamp
	18, // 3: com.digitalasset.canton.sequencer.admin.v30.SnapshotRequest.timestamp:type_name -> google.protobuf.Timestamp
	15, // 4: com.digitalasset.canton.sequencer.admin.v30.SnapshotResponse.success:type_name -> com.digitalasset.canton.sequencer.admin.v30.SnapshotResponse.Success
	16, // 5: com.digitalasset.canton.sequencer.admin.v30.SnapshotResponse.failure:type_name -> com.digitalasset.canton.sequencer.admin.v30.SnapshotResponse.Failure
	17, // 6: com.digitalasset.canton.sequencer.admin.v30.SnapshotResponse.versioned_success:type_name -> com.digitalasset.canton.sequencer.admin.v30.SnapshotResponse.VersionedSuccess
	18, // 7: com.digitalasset.canton.sequencer.admin.v30.OnboardingStateRequest.timestamp:type_name -> google.protobuf.Timestamp
	19, // 8: com.digitalasset.canton.sequencer.admin.v30.OnboardingStateForSequencer.topology_snapshot:type_name -> com.digitalasset.canton.topology.admin.v30.TopologyTransactions
	20, // 9: com.digitalasset.canton.sequencer.admin.v30.OnboardingStateForSequencer.static_domain_parameters:type_name -> com.digitalasset.canton.protocol.v30.StaticDomainParameters
	21, // 10: com.digitalasset.canton.sequencer.admin.v30.OnboardingStateForSequencer.sequencer_snapshot:type_name -> com.digitalasset.canton.sequencer.admin.v30.SequencerSnapshot
	22, // 11: com.digitalasset.canton.sequencer.admin.v30.PruningStatusResponse.pruning_status:type_name -> com.digitalasset.canton.sequencer.admin.v30.SequencerPruningStatus
	23, // 12: com.digitalasset.canton.sequencer.admin.v30.TrafficControlStateResponse.TrafficStatesEntry.value:type_name -> com.digitalasset.canton.protocol.v30.TrafficState
	21, // 13: com.digitalasset.canton.sequencer.admin.v30.SnapshotResponse.Success.state:type_name -> com.digitalasset.canton.sequencer.admin.v30.SequencerSnapshot
	10, // 14: com.digitalasset.canton.sequencer.admin.v30.SequencerAdministrationService.PruningStatus:input_type -> com.digitalasset.canton.sequencer.admin.v30.PruningStatusRequest
	1,  // 15: com.digitalasset.canton.sequencer.admin.v30.SequencerAdministrationService.TrafficControlState:input_type -> com.digitalasset.canton.sequencer.admin.v30.TrafficControlStateRequest
	3,  // 16: com.digitalasset.canton.sequencer.admin.v30.SequencerAdministrationService.SetTrafficPurchased:input_type -> com.digitalasset.canton.sequencer.admin.v30.SetTrafficPurchasedRequest
	5,  // 17: com.digitalasset.canton.sequencer.admin.v30.SequencerAdministrationService.Snapshot:input_type -> com.digitalasset.canton.sequencer.admin.v30.SnapshotRequest
	7,  // 18: com.digitalasset.canton.sequencer.admin.v30.SequencerAdministrationService.OnboardingState:input_type -> com.digitalasset.canton.sequencer.admin.v30.OnboardingStateRequest
	12, // 19: com.digitalasset.canton.sequencer.admin.v30.SequencerAdministrationService.DisableMember:input_type -> com.digitalasset.canton.sequencer.admin.v30.DisableMemberRequest
	11, // 20: com.digitalasset.canton.sequencer.admin.v30.SequencerAdministrationService.PruningStatus:output_type -> com.digitalasset.canton.sequencer.admin.v30.PruningStatusResponse
	2,  // 21: com.digitalasset.canton.sequencer.admin.v30.SequencerAdministrationService.TrafficControlState:output_type -> com.digitalasset.canton.sequencer.admin.v30.TrafficControlStateResponse
	4,  // 22: com.digitalasset.canton.sequencer.admin.v30.SequencerAdministrationService.SetTrafficPurchased:output_type -> com.digitalasset.canton.sequencer.admin.v30.SetTrafficPurchasedResponse
	6,  // 23: com.digitalasset.canton.sequencer.admin.v30.SequencerAdministrationService.Snapshot:output_type -> com.digitalasset.canton.sequencer.admin.v30.SnapshotResponse
	8,  // 24: com.digitalasset.canton.sequencer.admin.v30.SequencerAdministrationService.OnboardingState:output_type -> com.digitalasset.canton.sequencer.admin.v30.OnboardingStateResponse
	13, // 25: com.digitalasset.canton.sequencer.admin.v30.SequencerAdministrationService.DisableMember:output_type -> com.digitalasset.canton.sequencer.admin.v30.DisableMemberResponse
	20, // [20:26] is the sub-list for method output_type
	14, // [14:20] is the sub-list for method input_type
	14, // [14:14] is the sub-list for extension type_name
	14, // [14:14] is the sub-list for extension extendee
	0,  // [0:14] is the sub-list for field type_name
}

func init() {
	file_com_digitalasset_canton_sequencer_admin_v30_sequencer_administration_service_proto_init()
}
func file_com_digitalasset_canton_sequencer_admin_v30_sequencer_administration_service_proto_init() {
	if File_com_digitalasset_canton_sequencer_admin_v30_sequencer_administration_service_proto != nil {
		return
	}
	file_com_digitalasset_canton_sequencer_admin_v30_sequencer_initialization_snapshot_proto_init()
	file_com_digitalasset_canton_sequencer_admin_v30_sequencer_administration_service_proto_msgTypes[0].OneofWrappers = []any{
		(*TrafficControlStateRequest_ExactTimestamp)(nil),
		(*TrafficControlStateRequest_RelativeTimestamp_)(nil),
	}
	file_com_digitalasset_canton_sequencer_admin_v30_sequencer_administration_service_proto_msgTypes[5].OneofWrappers = []any{
		(*SnapshotResponse_Success_)(nil),
		(*SnapshotResponse_Failure_)(nil),
		(*SnapshotResponse_VersionedSuccess_)(nil),
	}
	file_com_digitalasset_canton_sequencer_admin_v30_sequencer_administration_service_proto_msgTypes[6].OneofWrappers = []any{
		(*OnboardingStateRequest_SequencerUid)(nil),
		(*OnboardingStateRequest_Timestamp)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_com_digitalasset_canton_sequencer_admin_v30_sequencer_administration_service_proto_rawDesc,
			NumEnums:      1,
			NumMessages:   17,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_com_digitalasset_canton_sequencer_admin_v30_sequencer_administration_service_proto_goTypes,
		DependencyIndexes: file_com_digitalasset_canton_sequencer_admin_v30_sequencer_administration_service_proto_depIdxs,
		EnumInfos:         file_com_digitalasset_canton_sequencer_admin_v30_sequencer_administration_service_proto_enumTypes,
		MessageInfos:      file_com_digitalasset_canton_sequencer_admin_v30_sequencer_administration_service_proto_msgTypes,
	}.Build()
	File_com_digitalasset_canton_sequencer_admin_v30_sequencer_administration_service_proto = out.File
	file_com_digitalasset_canton_sequencer_admin_v30_sequencer_administration_service_proto_rawDesc = nil
	file_com_digitalasset_canton_sequencer_admin_v30_sequencer_administration_service_proto_goTypes = nil
	file_com_digitalasset_canton_sequencer_admin_v30_sequencer_administration_service_proto_depIdxs = nil
}
