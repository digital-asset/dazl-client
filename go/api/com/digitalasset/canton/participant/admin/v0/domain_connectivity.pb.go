// Copyright (c) 2017-2025 Digital Asset (Switzerland) GmbH and/or its affiliates. All rights reserved.
// SPDX-License-Identifier: Apache-2.0
// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.35.2
// 	protoc        v5.27.2
// source: com/digitalasset/canton/participant/admin/v0/domain_connectivity.proto

package v0

import (
	v0 "github.com/digital-asset/dazl-client/v8/go/api/com/digitalasset/canton/domain/api/v0"
	v01 "github.com/digital-asset/dazl-client/v8/go/api/com/digitalasset/canton/time/admin/v0"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	durationpb "google.golang.org/protobuf/types/known/durationpb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type DomainConnectionConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DomainAlias             string                       `protobuf:"bytes,1,opt,name=domain_alias,json=domainAlias,proto3" json:"domain_alias,omitempty"`
	SequencerConnections    []*v0.SequencerConnection    `protobuf:"bytes,2,rep,name=sequencerConnections,proto3" json:"sequencerConnections,omitempty"`
	ManualConnect           bool                         `protobuf:"varint,3,opt,name=manual_connect,json=manualConnect,proto3" json:"manual_connect,omitempty"`
	DomainId                string                       `protobuf:"bytes,4,opt,name=domain_id,json=domainId,proto3" json:"domain_id,omitempty"`
	Priority                int32                        `protobuf:"varint,5,opt,name=priority,proto3" json:"priority,omitempty"`
	InitialRetryDelay       *durationpb.Duration         `protobuf:"bytes,6,opt,name=initialRetryDelay,proto3" json:"initialRetryDelay,omitempty"`
	MaxRetryDelay           *durationpb.Duration         `protobuf:"bytes,7,opt,name=maxRetryDelay,proto3" json:"maxRetryDelay,omitempty"`
	TimeTracker             *v01.DomainTimeTrackerConfig `protobuf:"bytes,8,opt,name=timeTracker,proto3" json:"timeTracker,omitempty"`
	SequencerTrustThreshold uint32                       `protobuf:"varint,9,opt,name=sequencerTrustThreshold,proto3" json:"sequencerTrustThreshold,omitempty"`
}

func (x *DomainConnectionConfig) Reset() {
	*x = DomainConnectionConfig{}
	mi := &file_com_digitalasset_canton_participant_admin_v0_domain_connectivity_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DomainConnectionConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DomainConnectionConfig) ProtoMessage() {}

func (x *DomainConnectionConfig) ProtoReflect() protoreflect.Message {
	mi := &file_com_digitalasset_canton_participant_admin_v0_domain_connectivity_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DomainConnectionConfig.ProtoReflect.Descriptor instead.
func (*DomainConnectionConfig) Descriptor() ([]byte, []int) {
	return file_com_digitalasset_canton_participant_admin_v0_domain_connectivity_proto_rawDescGZIP(), []int{0}
}

func (x *DomainConnectionConfig) GetDomainAlias() string {
	if x != nil {
		return x.DomainAlias
	}
	return ""
}

func (x *DomainConnectionConfig) GetSequencerConnections() []*v0.SequencerConnection {
	if x != nil {
		return x.SequencerConnections
	}
	return nil
}

func (x *DomainConnectionConfig) GetManualConnect() bool {
	if x != nil {
		return x.ManualConnect
	}
	return false
}

func (x *DomainConnectionConfig) GetDomainId() string {
	if x != nil {
		return x.DomainId
	}
	return ""
}

func (x *DomainConnectionConfig) GetPriority() int32 {
	if x != nil {
		return x.Priority
	}
	return 0
}

func (x *DomainConnectionConfig) GetInitialRetryDelay() *durationpb.Duration {
	if x != nil {
		return x.InitialRetryDelay
	}
	return nil
}

func (x *DomainConnectionConfig) GetMaxRetryDelay() *durationpb.Duration {
	if x != nil {
		return x.MaxRetryDelay
	}
	return nil
}

func (x *DomainConnectionConfig) GetTimeTracker() *v01.DomainTimeTrackerConfig {
	if x != nil {
		return x.TimeTracker
	}
	return nil
}

func (x *DomainConnectionConfig) GetSequencerTrustThreshold() uint32 {
	if x != nil {
		return x.SequencerTrustThreshold
	}
	return 0
}

type ReconnectDomainsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IgnoreFailures bool `protobuf:"varint,1,opt,name=ignore_failures,json=ignoreFailures,proto3" json:"ignore_failures,omitempty"`
}

func (x *ReconnectDomainsRequest) Reset() {
	*x = ReconnectDomainsRequest{}
	mi := &file_com_digitalasset_canton_participant_admin_v0_domain_connectivity_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ReconnectDomainsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReconnectDomainsRequest) ProtoMessage() {}

func (x *ReconnectDomainsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_com_digitalasset_canton_participant_admin_v0_domain_connectivity_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReconnectDomainsRequest.ProtoReflect.Descriptor instead.
func (*ReconnectDomainsRequest) Descriptor() ([]byte, []int) {
	return file_com_digitalasset_canton_participant_admin_v0_domain_connectivity_proto_rawDescGZIP(), []int{1}
}

func (x *ReconnectDomainsRequest) GetIgnoreFailures() bool {
	if x != nil {
		return x.IgnoreFailures
	}
	return false
}

type ReconnectDomainsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *ReconnectDomainsResponse) Reset() {
	*x = ReconnectDomainsResponse{}
	mi := &file_com_digitalasset_canton_participant_admin_v0_domain_connectivity_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ReconnectDomainsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReconnectDomainsResponse) ProtoMessage() {}

func (x *ReconnectDomainsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_com_digitalasset_canton_participant_admin_v0_domain_connectivity_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReconnectDomainsResponse.ProtoReflect.Descriptor instead.
func (*ReconnectDomainsResponse) Descriptor() ([]byte, []int) {
	return file_com_digitalasset_canton_participant_admin_v0_domain_connectivity_proto_rawDescGZIP(), []int{2}
}

type RegisterDomainRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Add *DomainConnectionConfig `protobuf:"bytes,1,opt,name=add,proto3" json:"add,omitempty"`
}

func (x *RegisterDomainRequest) Reset() {
	*x = RegisterDomainRequest{}
	mi := &file_com_digitalasset_canton_participant_admin_v0_domain_connectivity_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RegisterDomainRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RegisterDomainRequest) ProtoMessage() {}

func (x *RegisterDomainRequest) ProtoReflect() protoreflect.Message {
	mi := &file_com_digitalasset_canton_participant_admin_v0_domain_connectivity_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RegisterDomainRequest.ProtoReflect.Descriptor instead.
func (*RegisterDomainRequest) Descriptor() ([]byte, []int) {
	return file_com_digitalasset_canton_participant_admin_v0_domain_connectivity_proto_rawDescGZIP(), []int{3}
}

func (x *RegisterDomainRequest) GetAdd() *DomainConnectionConfig {
	if x != nil {
		return x.Add
	}
	return nil
}

type RegisterDomainResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *RegisterDomainResponse) Reset() {
	*x = RegisterDomainResponse{}
	mi := &file_com_digitalasset_canton_participant_admin_v0_domain_connectivity_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RegisterDomainResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RegisterDomainResponse) ProtoMessage() {}

func (x *RegisterDomainResponse) ProtoReflect() protoreflect.Message {
	mi := &file_com_digitalasset_canton_participant_admin_v0_domain_connectivity_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RegisterDomainResponse.ProtoReflect.Descriptor instead.
func (*RegisterDomainResponse) Descriptor() ([]byte, []int) {
	return file_com_digitalasset_canton_participant_admin_v0_domain_connectivity_proto_rawDescGZIP(), []int{4}
}

type ModifyDomainRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Modify *DomainConnectionConfig `protobuf:"bytes,1,opt,name=modify,proto3" json:"modify,omitempty"`
}

func (x *ModifyDomainRequest) Reset() {
	*x = ModifyDomainRequest{}
	mi := &file_com_digitalasset_canton_participant_admin_v0_domain_connectivity_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ModifyDomainRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ModifyDomainRequest) ProtoMessage() {}

func (x *ModifyDomainRequest) ProtoReflect() protoreflect.Message {
	mi := &file_com_digitalasset_canton_participant_admin_v0_domain_connectivity_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ModifyDomainRequest.ProtoReflect.Descriptor instead.
func (*ModifyDomainRequest) Descriptor() ([]byte, []int) {
	return file_com_digitalasset_canton_participant_admin_v0_domain_connectivity_proto_rawDescGZIP(), []int{5}
}

func (x *ModifyDomainRequest) GetModify() *DomainConnectionConfig {
	if x != nil {
		return x.Modify
	}
	return nil
}

type ModifyDomainResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *ModifyDomainResponse) Reset() {
	*x = ModifyDomainResponse{}
	mi := &file_com_digitalasset_canton_participant_admin_v0_domain_connectivity_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ModifyDomainResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ModifyDomainResponse) ProtoMessage() {}

func (x *ModifyDomainResponse) ProtoReflect() protoreflect.Message {
	mi := &file_com_digitalasset_canton_participant_admin_v0_domain_connectivity_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ModifyDomainResponse.ProtoReflect.Descriptor instead.
func (*ModifyDomainResponse) Descriptor() ([]byte, []int) {
	return file_com_digitalasset_canton_participant_admin_v0_domain_connectivity_proto_rawDescGZIP(), []int{6}
}

type ListConfiguredDomainsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *ListConfiguredDomainsRequest) Reset() {
	*x = ListConfiguredDomainsRequest{}
	mi := &file_com_digitalasset_canton_participant_admin_v0_domain_connectivity_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListConfiguredDomainsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListConfiguredDomainsRequest) ProtoMessage() {}

func (x *ListConfiguredDomainsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_com_digitalasset_canton_participant_admin_v0_domain_connectivity_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListConfiguredDomainsRequest.ProtoReflect.Descriptor instead.
func (*ListConfiguredDomainsRequest) Descriptor() ([]byte, []int) {
	return file_com_digitalasset_canton_participant_admin_v0_domain_connectivity_proto_rawDescGZIP(), []int{7}
}

type ListConfiguredDomainsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Results []*ListConfiguredDomainsResponse_Result `protobuf:"bytes,1,rep,name=results,proto3" json:"results,omitempty"`
}

func (x *ListConfiguredDomainsResponse) Reset() {
	*x = ListConfiguredDomainsResponse{}
	mi := &file_com_digitalasset_canton_participant_admin_v0_domain_connectivity_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListConfiguredDomainsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListConfiguredDomainsResponse) ProtoMessage() {}

func (x *ListConfiguredDomainsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_com_digitalasset_canton_participant_admin_v0_domain_connectivity_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListConfiguredDomainsResponse.ProtoReflect.Descriptor instead.
func (*ListConfiguredDomainsResponse) Descriptor() ([]byte, []int) {
	return file_com_digitalasset_canton_participant_admin_v0_domain_connectivity_proto_rawDescGZIP(), []int{8}
}

func (x *ListConfiguredDomainsResponse) GetResults() []*ListConfiguredDomainsResponse_Result {
	if x != nil {
		return x.Results
	}
	return nil
}

type ConnectDomainRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DomainAlias string `protobuf:"bytes,1,opt,name=domain_alias,json=domainAlias,proto3" json:"domain_alias,omitempty"`
	Retry       bool   `protobuf:"varint,2,opt,name=retry,proto3" json:"retry,omitempty"`
}

func (x *ConnectDomainRequest) Reset() {
	*x = ConnectDomainRequest{}
	mi := &file_com_digitalasset_canton_participant_admin_v0_domain_connectivity_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ConnectDomainRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConnectDomainRequest) ProtoMessage() {}

func (x *ConnectDomainRequest) ProtoReflect() protoreflect.Message {
	mi := &file_com_digitalasset_canton_participant_admin_v0_domain_connectivity_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConnectDomainRequest.ProtoReflect.Descriptor instead.
func (*ConnectDomainRequest) Descriptor() ([]byte, []int) {
	return file_com_digitalasset_canton_participant_admin_v0_domain_connectivity_proto_rawDescGZIP(), []int{9}
}

func (x *ConnectDomainRequest) GetDomainAlias() string {
	if x != nil {
		return x.DomainAlias
	}
	return ""
}

func (x *ConnectDomainRequest) GetRetry() bool {
	if x != nil {
		return x.Retry
	}
	return false
}

type ConnectDomainResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ConnectedSuccessfully bool `protobuf:"varint,1,opt,name=connected_successfully,json=connectedSuccessfully,proto3" json:"connected_successfully,omitempty"`
}

func (x *ConnectDomainResponse) Reset() {
	*x = ConnectDomainResponse{}
	mi := &file_com_digitalasset_canton_participant_admin_v0_domain_connectivity_proto_msgTypes[10]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ConnectDomainResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConnectDomainResponse) ProtoMessage() {}

func (x *ConnectDomainResponse) ProtoReflect() protoreflect.Message {
	mi := &file_com_digitalasset_canton_participant_admin_v0_domain_connectivity_proto_msgTypes[10]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConnectDomainResponse.ProtoReflect.Descriptor instead.
func (*ConnectDomainResponse) Descriptor() ([]byte, []int) {
	return file_com_digitalasset_canton_participant_admin_v0_domain_connectivity_proto_rawDescGZIP(), []int{10}
}

func (x *ConnectDomainResponse) GetConnectedSuccessfully() bool {
	if x != nil {
		return x.ConnectedSuccessfully
	}
	return false
}

type DisconnectDomainRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DomainAlias string `protobuf:"bytes,1,opt,name=domain_alias,json=domainAlias,proto3" json:"domain_alias,omitempty"`
}

func (x *DisconnectDomainRequest) Reset() {
	*x = DisconnectDomainRequest{}
	mi := &file_com_digitalasset_canton_participant_admin_v0_domain_connectivity_proto_msgTypes[11]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DisconnectDomainRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DisconnectDomainRequest) ProtoMessage() {}

func (x *DisconnectDomainRequest) ProtoReflect() protoreflect.Message {
	mi := &file_com_digitalasset_canton_participant_admin_v0_domain_connectivity_proto_msgTypes[11]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DisconnectDomainRequest.ProtoReflect.Descriptor instead.
func (*DisconnectDomainRequest) Descriptor() ([]byte, []int) {
	return file_com_digitalasset_canton_participant_admin_v0_domain_connectivity_proto_rawDescGZIP(), []int{11}
}

func (x *DisconnectDomainRequest) GetDomainAlias() string {
	if x != nil {
		return x.DomainAlias
	}
	return ""
}

type DisconnectDomainResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *DisconnectDomainResponse) Reset() {
	*x = DisconnectDomainResponse{}
	mi := &file_com_digitalasset_canton_participant_admin_v0_domain_connectivity_proto_msgTypes[12]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DisconnectDomainResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DisconnectDomainResponse) ProtoMessage() {}

func (x *DisconnectDomainResponse) ProtoReflect() protoreflect.Message {
	mi := &file_com_digitalasset_canton_participant_admin_v0_domain_connectivity_proto_msgTypes[12]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DisconnectDomainResponse.ProtoReflect.Descriptor instead.
func (*DisconnectDomainResponse) Descriptor() ([]byte, []int) {
	return file_com_digitalasset_canton_participant_admin_v0_domain_connectivity_proto_rawDescGZIP(), []int{12}
}

type ListConnectedDomainsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *ListConnectedDomainsRequest) Reset() {
	*x = ListConnectedDomainsRequest{}
	mi := &file_com_digitalasset_canton_participant_admin_v0_domain_connectivity_proto_msgTypes[13]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListConnectedDomainsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListConnectedDomainsRequest) ProtoMessage() {}

func (x *ListConnectedDomainsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_com_digitalasset_canton_participant_admin_v0_domain_connectivity_proto_msgTypes[13]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListConnectedDomainsRequest.ProtoReflect.Descriptor instead.
func (*ListConnectedDomainsRequest) Descriptor() ([]byte, []int) {
	return file_com_digitalasset_canton_participant_admin_v0_domain_connectivity_proto_rawDescGZIP(), []int{13}
}

type ListConnectedDomainsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ConnectedDomains []*ListConnectedDomainsResponse_Result `protobuf:"bytes,1,rep,name=connected_domains,json=connectedDomains,proto3" json:"connected_domains,omitempty"`
}

func (x *ListConnectedDomainsResponse) Reset() {
	*x = ListConnectedDomainsResponse{}
	mi := &file_com_digitalasset_canton_participant_admin_v0_domain_connectivity_proto_msgTypes[14]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListConnectedDomainsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListConnectedDomainsResponse) ProtoMessage() {}

func (x *ListConnectedDomainsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_com_digitalasset_canton_participant_admin_v0_domain_connectivity_proto_msgTypes[14]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListConnectedDomainsResponse.ProtoReflect.Descriptor instead.
func (*ListConnectedDomainsResponse) Descriptor() ([]byte, []int) {
	return file_com_digitalasset_canton_participant_admin_v0_domain_connectivity_proto_rawDescGZIP(), []int{14}
}

func (x *ListConnectedDomainsResponse) GetConnectedDomains() []*ListConnectedDomainsResponse_Result {
	if x != nil {
		return x.ConnectedDomains
	}
	return nil
}

type GetAgreementRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DomainAlias string `protobuf:"bytes,1,opt,name=domain_alias,json=domainAlias,proto3" json:"domain_alias,omitempty"`
}

func (x *GetAgreementRequest) Reset() {
	*x = GetAgreementRequest{}
	mi := &file_com_digitalasset_canton_participant_admin_v0_domain_connectivity_proto_msgTypes[15]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetAgreementRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetAgreementRequest) ProtoMessage() {}

func (x *GetAgreementRequest) ProtoReflect() protoreflect.Message {
	mi := &file_com_digitalasset_canton_participant_admin_v0_domain_connectivity_proto_msgTypes[15]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetAgreementRequest.ProtoReflect.Descriptor instead.
func (*GetAgreementRequest) Descriptor() ([]byte, []int) {
	return file_com_digitalasset_canton_participant_admin_v0_domain_connectivity_proto_rawDescGZIP(), []int{15}
}

func (x *GetAgreementRequest) GetDomainAlias() string {
	if x != nil {
		return x.DomainAlias
	}
	return ""
}

type GetAgreementResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DomainId  string     `protobuf:"bytes,1,opt,name=domain_id,json=domainId,proto3" json:"domain_id,omitempty"`
	Agreement *Agreement `protobuf:"bytes,2,opt,name=agreement,proto3" json:"agreement,omitempty"`
	Accepted  bool       `protobuf:"varint,3,opt,name=accepted,proto3" json:"accepted,omitempty"`
}

func (x *GetAgreementResponse) Reset() {
	*x = GetAgreementResponse{}
	mi := &file_com_digitalasset_canton_participant_admin_v0_domain_connectivity_proto_msgTypes[16]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetAgreementResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetAgreementResponse) ProtoMessage() {}

func (x *GetAgreementResponse) ProtoReflect() protoreflect.Message {
	mi := &file_com_digitalasset_canton_participant_admin_v0_domain_connectivity_proto_msgTypes[16]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetAgreementResponse.ProtoReflect.Descriptor instead.
func (*GetAgreementResponse) Descriptor() ([]byte, []int) {
	return file_com_digitalasset_canton_participant_admin_v0_domain_connectivity_proto_rawDescGZIP(), []int{16}
}

func (x *GetAgreementResponse) GetDomainId() string {
	if x != nil {
		return x.DomainId
	}
	return ""
}

func (x *GetAgreementResponse) GetAgreement() *Agreement {
	if x != nil {
		return x.Agreement
	}
	return nil
}

func (x *GetAgreementResponse) GetAccepted() bool {
	if x != nil {
		return x.Accepted
	}
	return false
}

type Agreement struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id   string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Text string `protobuf:"bytes,2,opt,name=text,proto3" json:"text,omitempty"`
}

func (x *Agreement) Reset() {
	*x = Agreement{}
	mi := &file_com_digitalasset_canton_participant_admin_v0_domain_connectivity_proto_msgTypes[17]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Agreement) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Agreement) ProtoMessage() {}

func (x *Agreement) ProtoReflect() protoreflect.Message {
	mi := &file_com_digitalasset_canton_participant_admin_v0_domain_connectivity_proto_msgTypes[17]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Agreement.ProtoReflect.Descriptor instead.
func (*Agreement) Descriptor() ([]byte, []int) {
	return file_com_digitalasset_canton_participant_admin_v0_domain_connectivity_proto_rawDescGZIP(), []int{17}
}

func (x *Agreement) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *Agreement) GetText() string {
	if x != nil {
		return x.Text
	}
	return ""
}

type AcceptAgreementRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DomainAlias string `protobuf:"bytes,1,opt,name=domain_alias,json=domainAlias,proto3" json:"domain_alias,omitempty"`
	AgreementId string `protobuf:"bytes,2,opt,name=agreement_id,json=agreementId,proto3" json:"agreement_id,omitempty"`
}

func (x *AcceptAgreementRequest) Reset() {
	*x = AcceptAgreementRequest{}
	mi := &file_com_digitalasset_canton_participant_admin_v0_domain_connectivity_proto_msgTypes[18]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AcceptAgreementRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AcceptAgreementRequest) ProtoMessage() {}

func (x *AcceptAgreementRequest) ProtoReflect() protoreflect.Message {
	mi := &file_com_digitalasset_canton_participant_admin_v0_domain_connectivity_proto_msgTypes[18]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AcceptAgreementRequest.ProtoReflect.Descriptor instead.
func (*AcceptAgreementRequest) Descriptor() ([]byte, []int) {
	return file_com_digitalasset_canton_participant_admin_v0_domain_connectivity_proto_rawDescGZIP(), []int{18}
}

func (x *AcceptAgreementRequest) GetDomainAlias() string {
	if x != nil {
		return x.DomainAlias
	}
	return ""
}

func (x *AcceptAgreementRequest) GetAgreementId() string {
	if x != nil {
		return x.AgreementId
	}
	return ""
}

type AcceptAgreementResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *AcceptAgreementResponse) Reset() {
	*x = AcceptAgreementResponse{}
	mi := &file_com_digitalasset_canton_participant_admin_v0_domain_connectivity_proto_msgTypes[19]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AcceptAgreementResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AcceptAgreementResponse) ProtoMessage() {}

func (x *AcceptAgreementResponse) ProtoReflect() protoreflect.Message {
	mi := &file_com_digitalasset_canton_participant_admin_v0_domain_connectivity_proto_msgTypes[19]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AcceptAgreementResponse.ProtoReflect.Descriptor instead.
func (*AcceptAgreementResponse) Descriptor() ([]byte, []int) {
	return file_com_digitalasset_canton_participant_admin_v0_domain_connectivity_proto_rawDescGZIP(), []int{19}
}

type GetDomainIdRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DomainAlias string `protobuf:"bytes,1,opt,name=domain_alias,json=domainAlias,proto3" json:"domain_alias,omitempty"`
}

func (x *GetDomainIdRequest) Reset() {
	*x = GetDomainIdRequest{}
	mi := &file_com_digitalasset_canton_participant_admin_v0_domain_connectivity_proto_msgTypes[20]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetDomainIdRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetDomainIdRequest) ProtoMessage() {}

func (x *GetDomainIdRequest) ProtoReflect() protoreflect.Message {
	mi := &file_com_digitalasset_canton_participant_admin_v0_domain_connectivity_proto_msgTypes[20]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetDomainIdRequest.ProtoReflect.Descriptor instead.
func (*GetDomainIdRequest) Descriptor() ([]byte, []int) {
	return file_com_digitalasset_canton_participant_admin_v0_domain_connectivity_proto_rawDescGZIP(), []int{20}
}

func (x *GetDomainIdRequest) GetDomainAlias() string {
	if x != nil {
		return x.DomainAlias
	}
	return ""
}

type GetDomainIdResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DomainId string `protobuf:"bytes,2,opt,name=domain_id,json=domainId,proto3" json:"domain_id,omitempty"`
}

func (x *GetDomainIdResponse) Reset() {
	*x = GetDomainIdResponse{}
	mi := &file_com_digitalasset_canton_participant_admin_v0_domain_connectivity_proto_msgTypes[21]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetDomainIdResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetDomainIdResponse) ProtoMessage() {}

func (x *GetDomainIdResponse) ProtoReflect() protoreflect.Message {
	mi := &file_com_digitalasset_canton_participant_admin_v0_domain_connectivity_proto_msgTypes[21]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetDomainIdResponse.ProtoReflect.Descriptor instead.
func (*GetDomainIdResponse) Descriptor() ([]byte, []int) {
	return file_com_digitalasset_canton_participant_admin_v0_domain_connectivity_proto_rawDescGZIP(), []int{21}
}

func (x *GetDomainIdResponse) GetDomainId() string {
	if x != nil {
		return x.DomainId
	}
	return ""
}

type ListConfiguredDomainsResponse_Result struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Config    *DomainConnectionConfig `protobuf:"bytes,1,opt,name=config,proto3" json:"config,omitempty"`
	Connected bool                    `protobuf:"varint,2,opt,name=connected,proto3" json:"connected,omitempty"`
}

func (x *ListConfiguredDomainsResponse_Result) Reset() {
	*x = ListConfiguredDomainsResponse_Result{}
	mi := &file_com_digitalasset_canton_participant_admin_v0_domain_connectivity_proto_msgTypes[22]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListConfiguredDomainsResponse_Result) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListConfiguredDomainsResponse_Result) ProtoMessage() {}

func (x *ListConfiguredDomainsResponse_Result) ProtoReflect() protoreflect.Message {
	mi := &file_com_digitalasset_canton_participant_admin_v0_domain_connectivity_proto_msgTypes[22]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListConfiguredDomainsResponse_Result.ProtoReflect.Descriptor instead.
func (*ListConfiguredDomainsResponse_Result) Descriptor() ([]byte, []int) {
	return file_com_digitalasset_canton_participant_admin_v0_domain_connectivity_proto_rawDescGZIP(), []int{8, 0}
}

func (x *ListConfiguredDomainsResponse_Result) GetConfig() *DomainConnectionConfig {
	if x != nil {
		return x.Config
	}
	return nil
}

func (x *ListConfiguredDomainsResponse_Result) GetConnected() bool {
	if x != nil {
		return x.Connected
	}
	return false
}

type ListConnectedDomainsResponse_Result struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DomainAlias string `protobuf:"bytes,1,opt,name=domain_alias,json=domainAlias,proto3" json:"domain_alias,omitempty"`
	DomainId    string `protobuf:"bytes,2,opt,name=domain_id,json=domainId,proto3" json:"domain_id,omitempty"`
	Healthy     bool   `protobuf:"varint,3,opt,name=healthy,proto3" json:"healthy,omitempty"`
}

func (x *ListConnectedDomainsResponse_Result) Reset() {
	*x = ListConnectedDomainsResponse_Result{}
	mi := &file_com_digitalasset_canton_participant_admin_v0_domain_connectivity_proto_msgTypes[23]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListConnectedDomainsResponse_Result) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListConnectedDomainsResponse_Result) ProtoMessage() {}

func (x *ListConnectedDomainsResponse_Result) ProtoReflect() protoreflect.Message {
	mi := &file_com_digitalasset_canton_participant_admin_v0_domain_connectivity_proto_msgTypes[23]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListConnectedDomainsResponse_Result.ProtoReflect.Descriptor instead.
func (*ListConnectedDomainsResponse_Result) Descriptor() ([]byte, []int) {
	return file_com_digitalasset_canton_participant_admin_v0_domain_connectivity_proto_rawDescGZIP(), []int{14, 0}
}

func (x *ListConnectedDomainsResponse_Result) GetDomainAlias() string {
	if x != nil {
		return x.DomainAlias
	}
	return ""
}

func (x *ListConnectedDomainsResponse_Result) GetDomainId() string {
	if x != nil {
		return x.DomainId
	}
	return ""
}

func (x *ListConnectedDomainsResponse_Result) GetHealthy() bool {
	if x != nil {
		return x.Healthy
	}
	return false
}

var File_com_digitalasset_canton_participant_admin_v0_domain_connectivity_proto protoreflect.FileDescriptor

var file_com_digitalasset_canton_participant_admin_v0_domain_connectivity_proto_rawDesc = []byte{
	0x0a, 0x46, 0x63, 0x6f, 0x6d, 0x2f, 0x64, 0x69, 0x67, 0x69, 0x74, 0x61, 0x6c, 0x61, 0x73, 0x73,
	0x65, 0x74, 0x2f, 0x63, 0x61, 0x6e, 0x74, 0x6f, 0x6e, 0x2f, 0x70, 0x61, 0x72, 0x74, 0x69, 0x63,
	0x69, 0x70, 0x61, 0x6e, 0x74, 0x2f, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2f, 0x76, 0x30, 0x2f, 0x64,
	0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x5f, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x76, 0x69,
	0x74, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x2c, 0x63, 0x6f, 0x6d, 0x2e, 0x64, 0x69,
	0x67, 0x69, 0x74, 0x61, 0x6c, 0x61, 0x73, 0x73, 0x65, 0x74, 0x2e, 0x63, 0x61, 0x6e, 0x74, 0x6f,
	0x6e, 0x2e, 0x70, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x2e, 0x61, 0x64,
	0x6d, 0x69, 0x6e, 0x2e, 0x76, 0x30, 0x1a, 0x40, 0x63, 0x6f, 0x6d, 0x2f, 0x64, 0x69, 0x67, 0x69,
	0x74, 0x61, 0x6c, 0x61, 0x73, 0x73, 0x65, 0x74, 0x2f, 0x63, 0x61, 0x6e, 0x74, 0x6f, 0x6e, 0x2f,
	0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x30, 0x2f, 0x73, 0x65,
	0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x72, 0x5f, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x3f, 0x63, 0x6f, 0x6d, 0x2f, 0x64, 0x69,
	0x67, 0x69, 0x74, 0x61, 0x6c, 0x61, 0x73, 0x73, 0x65, 0x74, 0x2f, 0x63, 0x61, 0x6e, 0x74, 0x6f,
	0x6e, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x2f, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2f, 0x76, 0x30, 0x2f,
	0x74, 0x69, 0x6d, 0x65, 0x5f, 0x74, 0x72, 0x61, 0x63, 0x6b, 0x65, 0x72, 0x5f, 0x63, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x64, 0x75, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xb1, 0x04, 0x0a, 0x16, 0x44, 0x6f,
	0x6d, 0x61, 0x69, 0x6e, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x12, 0x21, 0x0a, 0x0c, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x5f, 0x61,
	0x6c, 0x69, 0x61, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x6f, 0x6d, 0x61,
	0x69, 0x6e, 0x41, 0x6c, 0x69, 0x61, 0x73, 0x12, 0x6e, 0x0a, 0x14, 0x73, 0x65, 0x71, 0x75, 0x65,
	0x6e, 0x63, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18,
	0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x3a, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x64, 0x69, 0x67, 0x69,
	0x74, 0x61, 0x6c, 0x61, 0x73, 0x73, 0x65, 0x74, 0x2e, 0x63, 0x61, 0x6e, 0x74, 0x6f, 0x6e, 0x2e,
	0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x30, 0x2e, 0x53, 0x65,
	0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x52, 0x14, 0x73, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x6e,
	0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x25, 0x0a, 0x0e, 0x6d, 0x61, 0x6e, 0x75, 0x61,
	0x6c, 0x5f, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x0d, 0x6d, 0x61, 0x6e, 0x75, 0x61, 0x6c, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x12, 0x1b,
	0x0a, 0x09, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x08, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x70,
	0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x70,
	0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x12, 0x47, 0x0a, 0x11, 0x69, 0x6e, 0x69, 0x74, 0x69,
	0x61, 0x6c, 0x52, 0x65, 0x74, 0x72, 0x79, 0x44, 0x65, 0x6c, 0x61, 0x79, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x11, 0x69,
	0x6e, 0x69, 0x74, 0x69, 0x61, 0x6c, 0x52, 0x65, 0x74, 0x72, 0x79, 0x44, 0x65, 0x6c, 0x61, 0x79,
	0x12, 0x3f, 0x0a, 0x0d, 0x6d, 0x61, 0x78, 0x52, 0x65, 0x74, 0x72, 0x79, 0x44, 0x65, 0x6c, 0x61,
	0x79, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x52, 0x0d, 0x6d, 0x61, 0x78, 0x52, 0x65, 0x74, 0x72, 0x79, 0x44, 0x65, 0x6c, 0x61,
	0x79, 0x12, 0x60, 0x0a, 0x0b, 0x74, 0x69, 0x6d, 0x65, 0x54, 0x72, 0x61, 0x63, 0x6b, 0x65, 0x72,
	0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3e, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x64, 0x69, 0x67,
	0x69, 0x74, 0x61, 0x6c, 0x61, 0x73, 0x73, 0x65, 0x74, 0x2e, 0x63, 0x61, 0x6e, 0x74, 0x6f, 0x6e,
	0x2e, 0x74, 0x69, 0x6d, 0x65, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x76, 0x30, 0x2e, 0x44,
	0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x54, 0x72, 0x61, 0x63, 0x6b, 0x65, 0x72,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x0b, 0x74, 0x69, 0x6d, 0x65, 0x54, 0x72, 0x61, 0x63,
	0x6b, 0x65, 0x72, 0x12, 0x38, 0x0a, 0x17, 0x73, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x72,
	0x54, 0x72, 0x75, 0x73, 0x74, 0x54, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x18, 0x09,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x17, 0x73, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x72, 0x54,
	0x72, 0x75, 0x73, 0x74, 0x54, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x22, 0x42, 0x0a,
	0x17, 0x52, 0x65, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e,
	0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x27, 0x0a, 0x0f, 0x69, 0x67, 0x6e, 0x6f,
	0x72, 0x65, 0x5f, 0x66, 0x61, 0x69, 0x6c, 0x75, 0x72, 0x65, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x0e, 0x69, 0x67, 0x6e, 0x6f, 0x72, 0x65, 0x46, 0x61, 0x69, 0x6c, 0x75, 0x72, 0x65,
	0x73, 0x22, 0x1a, 0x0a, 0x18, 0x52, 0x65, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x44, 0x6f,
	0x6d, 0x61, 0x69, 0x6e, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x6f, 0x0a,
	0x15, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x56, 0x0a, 0x03, 0x61, 0x64, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x44, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x64, 0x69, 0x67, 0x69, 0x74, 0x61,
	0x6c, 0x61, 0x73, 0x73, 0x65, 0x74, 0x2e, 0x63, 0x61, 0x6e, 0x74, 0x6f, 0x6e, 0x2e, 0x70, 0x61,
	0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e,
	0x76, 0x30, 0x2e, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x03, 0x61, 0x64, 0x64, 0x22, 0x18,
	0x0a, 0x16, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x73, 0x0a, 0x13, 0x4d, 0x6f, 0x64, 0x69,
	0x66, 0x79, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x5c, 0x0a, 0x06, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x44, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x64, 0x69, 0x67, 0x69, 0x74, 0x61, 0x6c, 0x61, 0x73, 0x73,
	0x65, 0x74, 0x2e, 0x63, 0x61, 0x6e, 0x74, 0x6f, 0x6e, 0x2e, 0x70, 0x61, 0x72, 0x74, 0x69, 0x63,
	0x69, 0x70, 0x61, 0x6e, 0x74, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x76, 0x30, 0x2e, 0x44,
	0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x43,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x06, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x79, 0x22, 0x16, 0x0a,
	0x14, 0x4d, 0x6f, 0x64, 0x69, 0x66, 0x79, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x1e, 0x0a, 0x1c, 0x4c, 0x69, 0x73, 0x74, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x75, 0x72, 0x65, 0x64, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x73, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x94, 0x02, 0x0a, 0x1d, 0x4c, 0x69, 0x73, 0x74, 0x43, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x65, 0x64, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x73, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x6c, 0x0a, 0x07, 0x72, 0x65, 0x73, 0x75, 0x6c,
	0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x52, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x64,
	0x69, 0x67, 0x69, 0x74, 0x61, 0x6c, 0x61, 0x73, 0x73, 0x65, 0x74, 0x2e, 0x63, 0x61, 0x6e, 0x74,
	0x6f, 0x6e, 0x2e, 0x70, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x2e, 0x61,
	0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x76, 0x30, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x75, 0x72, 0x65, 0x64, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x73, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x07, 0x72, 0x65,
	0x73, 0x75, 0x6c, 0x74, 0x73, 0x1a, 0x84, 0x01, 0x0a, 0x06, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74,
	0x12, 0x5c, 0x0a, 0x06, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x44, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x64, 0x69, 0x67, 0x69, 0x74, 0x61, 0x6c, 0x61, 0x73,
	0x73, 0x65, 0x74, 0x2e, 0x63, 0x61, 0x6e, 0x74, 0x6f, 0x6e, 0x2e, 0x70, 0x61, 0x72, 0x74, 0x69,
	0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x76, 0x30, 0x2e,
	0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x06, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x1c,
	0x0a, 0x09, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x65, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x09, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x65, 0x64, 0x22, 0x4f, 0x0a, 0x14,
	0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x21, 0x0a, 0x0c, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x5f, 0x61,
	0x6c, 0x69, 0x61, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x6f, 0x6d, 0x61,
	0x69, 0x6e, 0x41, 0x6c, 0x69, 0x61, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x72, 0x65, 0x74, 0x72, 0x79,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x05, 0x72, 0x65, 0x74, 0x72, 0x79, 0x22, 0x4e, 0x0a,
	0x15, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x35, 0x0a, 0x16, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63,
	0x74, 0x65, 0x64, 0x5f, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x66, 0x75, 0x6c, 0x6c, 0x79,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x15, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x65,
	0x64, 0x53, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x66, 0x75, 0x6c, 0x6c, 0x79, 0x22, 0x3c, 0x0a,
	0x17, 0x44, 0x69, 0x73, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x44, 0x6f, 0x6d, 0x61, 0x69,
	0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x21, 0x0a, 0x0c, 0x64, 0x6f, 0x6d, 0x61,
	0x69, 0x6e, 0x5f, 0x61, 0x6c, 0x69, 0x61, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b,
	0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x41, 0x6c, 0x69, 0x61, 0x73, 0x22, 0x1a, 0x0a, 0x18, 0x44,
	0x69, 0x73, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x1d, 0x0a, 0x1b, 0x4c, 0x69, 0x73, 0x74, 0x43,
	0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x65, 0x64, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x73, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x82, 0x02, 0x0a, 0x1c, 0x4c, 0x69, 0x73, 0x74, 0x43,
	0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x65, 0x64, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x73, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x7e, 0x0a, 0x11, 0x63, 0x6f, 0x6e, 0x6e, 0x65,
	0x63, 0x74, 0x65, 0x64, 0x5f, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x73, 0x18, 0x01, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x51, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x64, 0x69, 0x67, 0x69, 0x74, 0x61, 0x6c,
	0x61, 0x73, 0x73, 0x65, 0x74, 0x2e, 0x63, 0x61, 0x6e, 0x74, 0x6f, 0x6e, 0x2e, 0x70, 0x61, 0x72,
	0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x76,
	0x30, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x65, 0x64, 0x44,
	0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x52,
	0x65, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x10, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x65, 0x64,
	0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x73, 0x1a, 0x62, 0x0a, 0x06, 0x52, 0x65, 0x73, 0x75, 0x6c,
	0x74, 0x12, 0x21, 0x0a, 0x0c, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x5f, 0x61, 0x6c, 0x69, 0x61,
	0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x41,
	0x6c, 0x69, 0x61, 0x73, 0x12, 0x1b, 0x0a, 0x09, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x5f, 0x69,
	0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x49,
	0x64, 0x12, 0x18, 0x0a, 0x07, 0x68, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x79, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x07, 0x68, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x79, 0x22, 0x38, 0x0a, 0x13, 0x47,
	0x65, 0x74, 0x41, 0x67, 0x72, 0x65, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x21, 0x0a, 0x0c, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x5f, 0x61, 0x6c, 0x69,
	0x61, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e,
	0x41, 0x6c, 0x69, 0x61, 0x73, 0x22, 0xa6, 0x01, 0x0a, 0x14, 0x47, 0x65, 0x74, 0x41, 0x67, 0x72,
	0x65, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1b,
	0x0a, 0x09, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x08, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x49, 0x64, 0x12, 0x55, 0x0a, 0x09, 0x61,
	0x67, 0x72, 0x65, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x37,
	0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x64, 0x69, 0x67, 0x69, 0x74, 0x61, 0x6c, 0x61, 0x73, 0x73, 0x65,
	0x74, 0x2e, 0x63, 0x61, 0x6e, 0x74, 0x6f, 0x6e, 0x2e, 0x70, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69,
	0x70, 0x61, 0x6e, 0x74, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x76, 0x30, 0x2e, 0x41, 0x67,
	0x72, 0x65, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x09, 0x61, 0x67, 0x72, 0x65, 0x65, 0x6d, 0x65,
	0x6e, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x61, 0x63, 0x63, 0x65, 0x70, 0x74, 0x65, 0x64, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x61, 0x63, 0x63, 0x65, 0x70, 0x74, 0x65, 0x64, 0x22, 0x2f,
	0x0a, 0x09, 0x41, 0x67, 0x72, 0x65, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x74,
	0x65, 0x78, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x65, 0x78, 0x74, 0x22,
	0x5e, 0x0a, 0x16, 0x41, 0x63, 0x63, 0x65, 0x70, 0x74, 0x41, 0x67, 0x72, 0x65, 0x65, 0x6d, 0x65,
	0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x21, 0x0a, 0x0c, 0x64, 0x6f, 0x6d,
	0x61, 0x69, 0x6e, 0x5f, 0x61, 0x6c, 0x69, 0x61, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0b, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x41, 0x6c, 0x69, 0x61, 0x73, 0x12, 0x21, 0x0a, 0x0c,
	0x61, 0x67, 0x72, 0x65, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0b, 0x61, 0x67, 0x72, 0x65, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x22,
	0x19, 0x0a, 0x17, 0x41, 0x63, 0x63, 0x65, 0x70, 0x74, 0x41, 0x67, 0x72, 0x65, 0x65, 0x6d, 0x65,
	0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x37, 0x0a, 0x12, 0x47, 0x65,
	0x74, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x49, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x21, 0x0a, 0x0c, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x5f, 0x61, 0x6c, 0x69, 0x61, 0x73,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x41, 0x6c,
	0x69, 0x61, 0x73, 0x22, 0x32, 0x0a, 0x13, 0x47, 0x65, 0x74, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e,
	0x49, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x64, 0x6f,
	0x6d, 0x61, 0x69, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x64,
	0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x49, 0x64, 0x32, 0xe5, 0x0c, 0x0a, 0x19, 0x44, 0x6f, 0x6d, 0x61,
	0x69, 0x6e, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x53, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0xa1, 0x01, 0x0a, 0x10, 0x52, 0x65, 0x63, 0x6f, 0x6e, 0x6e,
	0x65, 0x63, 0x74, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x73, 0x12, 0x45, 0x2e, 0x63, 0x6f, 0x6d,
	0x2e, 0x64, 0x69, 0x67, 0x69, 0x74, 0x61, 0x6c, 0x61, 0x73, 0x73, 0x65, 0x74, 0x2e, 0x63, 0x61,
	0x6e, 0x74, 0x6f, 0x6e, 0x2e, 0x70, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6e, 0x74,
	0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x76, 0x30, 0x2e, 0x52, 0x65, 0x63, 0x6f, 0x6e, 0x6e,
	0x65, 0x63, 0x74, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x46, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x64, 0x69, 0x67, 0x69, 0x74, 0x61, 0x6c, 0x61,
	0x73, 0x73, 0x65, 0x74, 0x2e, 0x63, 0x61, 0x6e, 0x74, 0x6f, 0x6e, 0x2e, 0x70, 0x61, 0x72, 0x74,
	0x69, 0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x76, 0x30,
	0x2e, 0x52, 0x65, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e,
	0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x9b, 0x01, 0x0a, 0x0e, 0x52, 0x65,
	0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x12, 0x43, 0x2e, 0x63,
	0x6f, 0x6d, 0x2e, 0x64, 0x69, 0x67, 0x69, 0x74, 0x61, 0x6c, 0x61, 0x73, 0x73, 0x65, 0x74, 0x2e,
	0x63, 0x61, 0x6e, 0x74, 0x6f, 0x6e, 0x2e, 0x70, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61,
	0x6e, 0x74, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x76, 0x30, 0x2e, 0x52, 0x65, 0x67, 0x69,
	0x73, 0x74, 0x65, 0x72, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x44, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x64, 0x69, 0x67, 0x69, 0x74, 0x61, 0x6c, 0x61,
	0x73, 0x73, 0x65, 0x74, 0x2e, 0x63, 0x61, 0x6e, 0x74, 0x6f, 0x6e, 0x2e, 0x70, 0x61, 0x72, 0x74,
	0x69, 0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x76, 0x30,
	0x2e, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x95, 0x01, 0x0a, 0x0c, 0x4d, 0x6f, 0x64, 0x69,
	0x66, 0x79, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x12, 0x41, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x64,
	0x69, 0x67, 0x69, 0x74, 0x61, 0x6c, 0x61, 0x73, 0x73, 0x65, 0x74, 0x2e, 0x63, 0x61, 0x6e, 0x74,
	0x6f, 0x6e, 0x2e, 0x70, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x2e, 0x61,
	0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x76, 0x30, 0x2e, 0x4d, 0x6f, 0x64, 0x69, 0x66, 0x79, 0x44, 0x6f,
	0x6d, 0x61, 0x69, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x42, 0x2e, 0x63, 0x6f,
	0x6d, 0x2e, 0x64, 0x69, 0x67, 0x69, 0x74, 0x61, 0x6c, 0x61, 0x73, 0x73, 0x65, 0x74, 0x2e, 0x63,
	0x61, 0x6e, 0x74, 0x6f, 0x6e, 0x2e, 0x70, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6e,
	0x74, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x76, 0x30, 0x2e, 0x4d, 0x6f, 0x64, 0x69, 0x66,
	0x79, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x98, 0x01, 0x0a, 0x0d, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x44, 0x6f, 0x6d, 0x61, 0x69,
	0x6e, 0x12, 0x42, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x64, 0x69, 0x67, 0x69, 0x74, 0x61, 0x6c, 0x61,
	0x73, 0x73, 0x65, 0x74, 0x2e, 0x63, 0x61, 0x6e, 0x74, 0x6f, 0x6e, 0x2e, 0x70, 0x61, 0x72, 0x74,
	0x69, 0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x76, 0x30,
	0x2e, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x43, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x64, 0x69, 0x67, 0x69,
	0x74, 0x61, 0x6c, 0x61, 0x73, 0x73, 0x65, 0x74, 0x2e, 0x63, 0x61, 0x6e, 0x74, 0x6f, 0x6e, 0x2e,
	0x70, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x2e, 0x61, 0x64, 0x6d, 0x69,
	0x6e, 0x2e, 0x76, 0x30, 0x2e, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x44, 0x6f, 0x6d, 0x61,
	0x69, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0xa1, 0x01, 0x0a, 0x10, 0x44,
	0x69, 0x73, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x12,
	0x45, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x64, 0x69, 0x67, 0x69, 0x74, 0x61, 0x6c, 0x61, 0x73, 0x73,
	0x65, 0x74, 0x2e, 0x63, 0x61, 0x6e, 0x74, 0x6f, 0x6e, 0x2e, 0x70, 0x61, 0x72, 0x74, 0x69, 0x63,
	0x69, 0x70, 0x61, 0x6e, 0x74, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x76, 0x30, 0x2e, 0x44,
	0x69, 0x73, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x46, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x64, 0x69, 0x67,
	0x69, 0x74, 0x61, 0x6c, 0x61, 0x73, 0x73, 0x65, 0x74, 0x2e, 0x63, 0x61, 0x6e, 0x74, 0x6f, 0x6e,
	0x2e, 0x70, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x2e, 0x61, 0x64, 0x6d,
	0x69, 0x6e, 0x2e, 0x76, 0x30, 0x2e, 0x44, 0x69, 0x73, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74,
	0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0xad,
	0x01, 0x0a, 0x14, 0x4c, 0x69, 0x73, 0x74, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x65, 0x64,
	0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x73, 0x12, 0x49, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x64, 0x69,
	0x67, 0x69, 0x74, 0x61, 0x6c, 0x61, 0x73, 0x73, 0x65, 0x74, 0x2e, 0x63, 0x61, 0x6e, 0x74, 0x6f,
	0x6e, 0x2e, 0x70, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x2e, 0x61, 0x64,
	0x6d, 0x69, 0x6e, 0x2e, 0x76, 0x30, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x43, 0x6f, 0x6e, 0x6e, 0x65,
	0x63, 0x74, 0x65, 0x64, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x4a, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x64, 0x69, 0x67, 0x69, 0x74, 0x61, 0x6c,
	0x61, 0x73, 0x73, 0x65, 0x74, 0x2e, 0x63, 0x61, 0x6e, 0x74, 0x6f, 0x6e, 0x2e, 0x70, 0x61, 0x72,
	0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x76,
	0x30, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x65, 0x64, 0x44,
	0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0xb0,
	0x01, 0x0a, 0x15, 0x4c, 0x69, 0x73, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x65,
	0x64, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x73, 0x12, 0x4a, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x64,
	0x69, 0x67, 0x69, 0x74, 0x61, 0x6c, 0x61, 0x73, 0x73, 0x65, 0x74, 0x2e, 0x63, 0x61, 0x6e, 0x74,
	0x6f, 0x6e, 0x2e, 0x70, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x2e, 0x61,
	0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x76, 0x30, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x75, 0x72, 0x65, 0x64, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x73, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x4b, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x64, 0x69, 0x67, 0x69, 0x74,
	0x61, 0x6c, 0x61, 0x73, 0x73, 0x65, 0x74, 0x2e, 0x63, 0x61, 0x6e, 0x74, 0x6f, 0x6e, 0x2e, 0x70,
	0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e,
	0x2e, 0x76, 0x30, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72,
	0x65, 0x64, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x95, 0x01, 0x0a, 0x0c, 0x47, 0x65, 0x74, 0x41, 0x67, 0x72, 0x65, 0x65, 0x6d, 0x65,
	0x6e, 0x74, 0x12, 0x41, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x64, 0x69, 0x67, 0x69, 0x74, 0x61, 0x6c,
	0x61, 0x73, 0x73, 0x65, 0x74, 0x2e, 0x63, 0x61, 0x6e, 0x74, 0x6f, 0x6e, 0x2e, 0x70, 0x61, 0x72,
	0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x76,
	0x30, 0x2e, 0x47, 0x65, 0x74, 0x41, 0x67, 0x72, 0x65, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x42, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x64, 0x69, 0x67, 0x69,
	0x74, 0x61, 0x6c, 0x61, 0x73, 0x73, 0x65, 0x74, 0x2e, 0x63, 0x61, 0x6e, 0x74, 0x6f, 0x6e, 0x2e,
	0x70, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x2e, 0x61, 0x64, 0x6d, 0x69,
	0x6e, 0x2e, 0x76, 0x30, 0x2e, 0x47, 0x65, 0x74, 0x41, 0x67, 0x72, 0x65, 0x65, 0x6d, 0x65, 0x6e,
	0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x9e, 0x01, 0x0a, 0x0f, 0x41, 0x63,
	0x63, 0x65, 0x70, 0x74, 0x41, 0x67, 0x72, 0x65, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x44, 0x2e,
	0x63, 0x6f, 0x6d, 0x2e, 0x64, 0x69, 0x67, 0x69, 0x74, 0x61, 0x6c, 0x61, 0x73, 0x73, 0x65, 0x74,
	0x2e, 0x63, 0x61, 0x6e, 0x74, 0x6f, 0x6e, 0x2e, 0x70, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70,
	0x61, 0x6e, 0x74, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x76, 0x30, 0x2e, 0x41, 0x63, 0x63,
	0x65, 0x70, 0x74, 0x41, 0x67, 0x72, 0x65, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x45, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x64, 0x69, 0x67, 0x69, 0x74, 0x61,
	0x6c, 0x61, 0x73, 0x73, 0x65, 0x74, 0x2e, 0x63, 0x61, 0x6e, 0x74, 0x6f, 0x6e, 0x2e, 0x70, 0x61,
	0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e,
	0x76, 0x30, 0x2e, 0x41, 0x63, 0x63, 0x65, 0x70, 0x74, 0x41, 0x67, 0x72, 0x65, 0x65, 0x6d, 0x65,
	0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x92, 0x01, 0x0a, 0x0b, 0x47,
	0x65, 0x74, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x49, 0x64, 0x12, 0x40, 0x2e, 0x63, 0x6f, 0x6d,
	0x2e, 0x64, 0x69, 0x67, 0x69, 0x74, 0x61, 0x6c, 0x61, 0x73, 0x73, 0x65, 0x74, 0x2e, 0x63, 0x61,
	0x6e, 0x74, 0x6f, 0x6e, 0x2e, 0x70, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6e, 0x74,
	0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x76, 0x30, 0x2e, 0x47, 0x65, 0x74, 0x44, 0x6f, 0x6d,
	0x61, 0x69, 0x6e, 0x49, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x41, 0x2e, 0x63,
	0x6f, 0x6d, 0x2e, 0x64, 0x69, 0x67, 0x69, 0x74, 0x61, 0x6c, 0x61, 0x73, 0x73, 0x65, 0x74, 0x2e,
	0x63, 0x61, 0x6e, 0x74, 0x6f, 0x6e, 0x2e, 0x70, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61,
	0x6e, 0x74, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x76, 0x30, 0x2e, 0x47, 0x65, 0x74, 0x44,
	0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x49, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x42,
	0x5d, 0x5a, 0x5b, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x64, 0x69,
	0x67, 0x69, 0x74, 0x61, 0x6c, 0x2d, 0x61, 0x73, 0x73, 0x65, 0x74, 0x2f, 0x64, 0x61, 0x7a, 0x6c,
	0x2d, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2f, 0x76, 0x38, 0x2f, 0x67, 0x6f, 0x2f, 0x61, 0x70,
	0x69, 0x2f, 0x63, 0x6f, 0x6d, 0x2f, 0x64, 0x69, 0x67, 0x69, 0x74, 0x61, 0x6c, 0x61, 0x73, 0x73,
	0x65, 0x74, 0x2f, 0x63, 0x61, 0x6e, 0x74, 0x6f, 0x6e, 0x2f, 0x70, 0x61, 0x72, 0x74, 0x69, 0x63,
	0x69, 0x70, 0x61, 0x6e, 0x74, 0x2f, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2f, 0x76, 0x30, 0x62, 0x06,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_com_digitalasset_canton_participant_admin_v0_domain_connectivity_proto_rawDescOnce sync.Once
	file_com_digitalasset_canton_participant_admin_v0_domain_connectivity_proto_rawDescData = file_com_digitalasset_canton_participant_admin_v0_domain_connectivity_proto_rawDesc
)

func file_com_digitalasset_canton_participant_admin_v0_domain_connectivity_proto_rawDescGZIP() []byte {
	file_com_digitalasset_canton_participant_admin_v0_domain_connectivity_proto_rawDescOnce.Do(func() {
		file_com_digitalasset_canton_participant_admin_v0_domain_connectivity_proto_rawDescData = protoimpl.X.CompressGZIP(file_com_digitalasset_canton_participant_admin_v0_domain_connectivity_proto_rawDescData)
	})
	return file_com_digitalasset_canton_participant_admin_v0_domain_connectivity_proto_rawDescData
}

var file_com_digitalasset_canton_participant_admin_v0_domain_connectivity_proto_msgTypes = make([]protoimpl.MessageInfo, 24)
var file_com_digitalasset_canton_participant_admin_v0_domain_connectivity_proto_goTypes = []any{
	(*DomainConnectionConfig)(nil),               // 0: com.digitalasset.canton.participant.admin.v0.DomainConnectionConfig
	(*ReconnectDomainsRequest)(nil),              // 1: com.digitalasset.canton.participant.admin.v0.ReconnectDomainsRequest
	(*ReconnectDomainsResponse)(nil),             // 2: com.digitalasset.canton.participant.admin.v0.ReconnectDomainsResponse
	(*RegisterDomainRequest)(nil),                // 3: com.digitalasset.canton.participant.admin.v0.RegisterDomainRequest
	(*RegisterDomainResponse)(nil),               // 4: com.digitalasset.canton.participant.admin.v0.RegisterDomainResponse
	(*ModifyDomainRequest)(nil),                  // 5: com.digitalasset.canton.participant.admin.v0.ModifyDomainRequest
	(*ModifyDomainResponse)(nil),                 // 6: com.digitalasset.canton.participant.admin.v0.ModifyDomainResponse
	(*ListConfiguredDomainsRequest)(nil),         // 7: com.digitalasset.canton.participant.admin.v0.ListConfiguredDomainsRequest
	(*ListConfiguredDomainsResponse)(nil),        // 8: com.digitalasset.canton.participant.admin.v0.ListConfiguredDomainsResponse
	(*ConnectDomainRequest)(nil),                 // 9: com.digitalasset.canton.participant.admin.v0.ConnectDomainRequest
	(*ConnectDomainResponse)(nil),                // 10: com.digitalasset.canton.participant.admin.v0.ConnectDomainResponse
	(*DisconnectDomainRequest)(nil),              // 11: com.digitalasset.canton.participant.admin.v0.DisconnectDomainRequest
	(*DisconnectDomainResponse)(nil),             // 12: com.digitalasset.canton.participant.admin.v0.DisconnectDomainResponse
	(*ListConnectedDomainsRequest)(nil),          // 13: com.digitalasset.canton.participant.admin.v0.ListConnectedDomainsRequest
	(*ListConnectedDomainsResponse)(nil),         // 14: com.digitalasset.canton.participant.admin.v0.ListConnectedDomainsResponse
	(*GetAgreementRequest)(nil),                  // 15: com.digitalasset.canton.participant.admin.v0.GetAgreementRequest
	(*GetAgreementResponse)(nil),                 // 16: com.digitalasset.canton.participant.admin.v0.GetAgreementResponse
	(*Agreement)(nil),                            // 17: com.digitalasset.canton.participant.admin.v0.Agreement
	(*AcceptAgreementRequest)(nil),               // 18: com.digitalasset.canton.participant.admin.v0.AcceptAgreementRequest
	(*AcceptAgreementResponse)(nil),              // 19: com.digitalasset.canton.participant.admin.v0.AcceptAgreementResponse
	(*GetDomainIdRequest)(nil),                   // 20: com.digitalasset.canton.participant.admin.v0.GetDomainIdRequest
	(*GetDomainIdResponse)(nil),                  // 21: com.digitalasset.canton.participant.admin.v0.GetDomainIdResponse
	(*ListConfiguredDomainsResponse_Result)(nil), // 22: com.digitalasset.canton.participant.admin.v0.ListConfiguredDomainsResponse.Result
	(*ListConnectedDomainsResponse_Result)(nil),  // 23: com.digitalasset.canton.participant.admin.v0.ListConnectedDomainsResponse.Result
	(*v0.SequencerConnection)(nil),               // 24: com.digitalasset.canton.domain.api.v0.SequencerConnection
	(*durationpb.Duration)(nil),                  // 25: google.protobuf.Duration
	(*v01.DomainTimeTrackerConfig)(nil),          // 26: com.digitalasset.canton.time.admin.v0.DomainTimeTrackerConfig
}
var file_com_digitalasset_canton_participant_admin_v0_domain_connectivity_proto_depIdxs = []int32{
	24, // 0: com.digitalasset.canton.participant.admin.v0.DomainConnectionConfig.sequencerConnections:type_name -> com.digitalasset.canton.domain.api.v0.SequencerConnection
	25, // 1: com.digitalasset.canton.participant.admin.v0.DomainConnectionConfig.initialRetryDelay:type_name -> google.protobuf.Duration
	25, // 2: com.digitalasset.canton.participant.admin.v0.DomainConnectionConfig.maxRetryDelay:type_name -> google.protobuf.Duration
	26, // 3: com.digitalasset.canton.participant.admin.v0.DomainConnectionConfig.timeTracker:type_name -> com.digitalasset.canton.time.admin.v0.DomainTimeTrackerConfig
	0,  // 4: com.digitalasset.canton.participant.admin.v0.RegisterDomainRequest.add:type_name -> com.digitalasset.canton.participant.admin.v0.DomainConnectionConfig
	0,  // 5: com.digitalasset.canton.participant.admin.v0.ModifyDomainRequest.modify:type_name -> com.digitalasset.canton.participant.admin.v0.DomainConnectionConfig
	22, // 6: com.digitalasset.canton.participant.admin.v0.ListConfiguredDomainsResponse.results:type_name -> com.digitalasset.canton.participant.admin.v0.ListConfiguredDomainsResponse.Result
	23, // 7: com.digitalasset.canton.participant.admin.v0.ListConnectedDomainsResponse.connected_domains:type_name -> com.digitalasset.canton.participant.admin.v0.ListConnectedDomainsResponse.Result
	17, // 8: com.digitalasset.canton.participant.admin.v0.GetAgreementResponse.agreement:type_name -> com.digitalasset.canton.participant.admin.v0.Agreement
	0,  // 9: com.digitalasset.canton.participant.admin.v0.ListConfiguredDomainsResponse.Result.config:type_name -> com.digitalasset.canton.participant.admin.v0.DomainConnectionConfig
	1,  // 10: com.digitalasset.canton.participant.admin.v0.DomainConnectivityService.ReconnectDomains:input_type -> com.digitalasset.canton.participant.admin.v0.ReconnectDomainsRequest
	3,  // 11: com.digitalasset.canton.participant.admin.v0.DomainConnectivityService.RegisterDomain:input_type -> com.digitalasset.canton.participant.admin.v0.RegisterDomainRequest
	5,  // 12: com.digitalasset.canton.participant.admin.v0.DomainConnectivityService.ModifyDomain:input_type -> com.digitalasset.canton.participant.admin.v0.ModifyDomainRequest
	9,  // 13: com.digitalasset.canton.participant.admin.v0.DomainConnectivityService.ConnectDomain:input_type -> com.digitalasset.canton.participant.admin.v0.ConnectDomainRequest
	11, // 14: com.digitalasset.canton.participant.admin.v0.DomainConnectivityService.DisconnectDomain:input_type -> com.digitalasset.canton.participant.admin.v0.DisconnectDomainRequest
	13, // 15: com.digitalasset.canton.participant.admin.v0.DomainConnectivityService.ListConnectedDomains:input_type -> com.digitalasset.canton.participant.admin.v0.ListConnectedDomainsRequest
	7,  // 16: com.digitalasset.canton.participant.admin.v0.DomainConnectivityService.ListConfiguredDomains:input_type -> com.digitalasset.canton.participant.admin.v0.ListConfiguredDomainsRequest
	15, // 17: com.digitalasset.canton.participant.admin.v0.DomainConnectivityService.GetAgreement:input_type -> com.digitalasset.canton.participant.admin.v0.GetAgreementRequest
	18, // 18: com.digitalasset.canton.participant.admin.v0.DomainConnectivityService.AcceptAgreement:input_type -> com.digitalasset.canton.participant.admin.v0.AcceptAgreementRequest
	20, // 19: com.digitalasset.canton.participant.admin.v0.DomainConnectivityService.GetDomainId:input_type -> com.digitalasset.canton.participant.admin.v0.GetDomainIdRequest
	2,  // 20: com.digitalasset.canton.participant.admin.v0.DomainConnectivityService.ReconnectDomains:output_type -> com.digitalasset.canton.participant.admin.v0.ReconnectDomainsResponse
	4,  // 21: com.digitalasset.canton.participant.admin.v0.DomainConnectivityService.RegisterDomain:output_type -> com.digitalasset.canton.participant.admin.v0.RegisterDomainResponse
	6,  // 22: com.digitalasset.canton.participant.admin.v0.DomainConnectivityService.ModifyDomain:output_type -> com.digitalasset.canton.participant.admin.v0.ModifyDomainResponse
	10, // 23: com.digitalasset.canton.participant.admin.v0.DomainConnectivityService.ConnectDomain:output_type -> com.digitalasset.canton.participant.admin.v0.ConnectDomainResponse
	12, // 24: com.digitalasset.canton.participant.admin.v0.DomainConnectivityService.DisconnectDomain:output_type -> com.digitalasset.canton.participant.admin.v0.DisconnectDomainResponse
	14, // 25: com.digitalasset.canton.participant.admin.v0.DomainConnectivityService.ListConnectedDomains:output_type -> com.digitalasset.canton.participant.admin.v0.ListConnectedDomainsResponse
	8,  // 26: com.digitalasset.canton.participant.admin.v0.DomainConnectivityService.ListConfiguredDomains:output_type -> com.digitalasset.canton.participant.admin.v0.ListConfiguredDomainsResponse
	16, // 27: com.digitalasset.canton.participant.admin.v0.DomainConnectivityService.GetAgreement:output_type -> com.digitalasset.canton.participant.admin.v0.GetAgreementResponse
	19, // 28: com.digitalasset.canton.participant.admin.v0.DomainConnectivityService.AcceptAgreement:output_type -> com.digitalasset.canton.participant.admin.v0.AcceptAgreementResponse
	21, // 29: com.digitalasset.canton.participant.admin.v0.DomainConnectivityService.GetDomainId:output_type -> com.digitalasset.canton.participant.admin.v0.GetDomainIdResponse
	20, // [20:30] is the sub-list for method output_type
	10, // [10:20] is the sub-list for method input_type
	10, // [10:10] is the sub-list for extension type_name
	10, // [10:10] is the sub-list for extension extendee
	0,  // [0:10] is the sub-list for field type_name
}

func init() { file_com_digitalasset_canton_participant_admin_v0_domain_connectivity_proto_init() }
func file_com_digitalasset_canton_participant_admin_v0_domain_connectivity_proto_init() {
	if File_com_digitalasset_canton_participant_admin_v0_domain_connectivity_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_com_digitalasset_canton_participant_admin_v0_domain_connectivity_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   24,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_com_digitalasset_canton_participant_admin_v0_domain_connectivity_proto_goTypes,
		DependencyIndexes: file_com_digitalasset_canton_participant_admin_v0_domain_connectivity_proto_depIdxs,
		MessageInfos:      file_com_digitalasset_canton_participant_admin_v0_domain_connectivity_proto_msgTypes,
	}.Build()
	File_com_digitalasset_canton_participant_admin_v0_domain_connectivity_proto = out.File
	file_com_digitalasset_canton_participant_admin_v0_domain_connectivity_proto_rawDesc = nil
	file_com_digitalasset_canton_participant_admin_v0_domain_connectivity_proto_goTypes = nil
	file_com_digitalasset_canton_participant_admin_v0_domain_connectivity_proto_depIdxs = nil
}
