// Copyright (c) 2017-2025 Digital Asset (Switzerland) GmbH and/or its affiliates. All rights reserved.
// SPDX-License-Identifier: Apache-2.0
// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.35.2
// 	protoc        v5.27.2
// source: com/digitalasset/canton/participant/protocol/v30/ledger_sync_event.proto

package v30

import (
	v30 "github.com/digital-asset/dazl-client/v8/go/api/com/digitalasset/canton/protocol/v30"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	wrapperspb "google.golang.org/protobuf/types/known/wrapperspb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type CommandKind int32

const (
	CommandKind_COMMAND_KIND_TRANSACTION_UNSPECIFIED CommandKind = 0
	CommandKind_COMMAND_KIND_TRANSFER_OUT            CommandKind = 1
	CommandKind_COMMAND_KIND_TRANSFER_IN             CommandKind = 2
)

// Enum value maps for CommandKind.
var (
	CommandKind_name = map[int32]string{
		0: "COMMAND_KIND_TRANSACTION_UNSPECIFIED",
		1: "COMMAND_KIND_TRANSFER_OUT",
		2: "COMMAND_KIND_TRANSFER_IN",
	}
	CommandKind_value = map[string]int32{
		"COMMAND_KIND_TRANSACTION_UNSPECIFIED": 0,
		"COMMAND_KIND_TRANSFER_OUT":            1,
		"COMMAND_KIND_TRANSFER_IN":             2,
	}
)

func (x CommandKind) Enum() *CommandKind {
	p := new(CommandKind)
	*p = x
	return p
}

func (x CommandKind) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CommandKind) Descriptor() protoreflect.EnumDescriptor {
	return file_com_digitalasset_canton_participant_protocol_v30_ledger_sync_event_proto_enumTypes[0].Descriptor()
}

func (CommandKind) Type() protoreflect.EnumType {
	return &file_com_digitalasset_canton_participant_protocol_v30_ledger_sync_event_proto_enumTypes[0]
}

func (x CommandKind) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use CommandKind.Descriptor instead.
func (CommandKind) EnumDescriptor() ([]byte, []int) {
	return file_com_digitalasset_canton_participant_protocol_v30_ledger_sync_event_proto_rawDescGZIP(), []int{0}
}

type LedgerSyncEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Value:
	//
	//	*LedgerSyncEvent_PartyAddedToParticipant
	//	*LedgerSyncEvent_TransactionAccepted
	//	*LedgerSyncEvent_CommandRejected
	//	*LedgerSyncEvent_PartyAllocationRejected
	//	*LedgerSyncEvent_TransferredOut
	//	*LedgerSyncEvent_TransferredIn
	//	*LedgerSyncEvent_ContractsAdded
	//	*LedgerSyncEvent_ContractsPurged
	//	*LedgerSyncEvent_PartiesAdded
	//	*LedgerSyncEvent_PartiesRemoved
	//	*LedgerSyncEvent_Init
	Value isLedgerSyncEvent_Value `protobuf_oneof:"value"`
}

func (x *LedgerSyncEvent) Reset() {
	*x = LedgerSyncEvent{}
	mi := &file_com_digitalasset_canton_participant_protocol_v30_ledger_sync_event_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *LedgerSyncEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LedgerSyncEvent) ProtoMessage() {}

func (x *LedgerSyncEvent) ProtoReflect() protoreflect.Message {
	mi := &file_com_digitalasset_canton_participant_protocol_v30_ledger_sync_event_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LedgerSyncEvent.ProtoReflect.Descriptor instead.
func (*LedgerSyncEvent) Descriptor() ([]byte, []int) {
	return file_com_digitalasset_canton_participant_protocol_v30_ledger_sync_event_proto_rawDescGZIP(), []int{0}
}

func (m *LedgerSyncEvent) GetValue() isLedgerSyncEvent_Value {
	if m != nil {
		return m.Value
	}
	return nil
}

func (x *LedgerSyncEvent) GetPartyAddedToParticipant() *PartyAddedToParticipant {
	if x, ok := x.GetValue().(*LedgerSyncEvent_PartyAddedToParticipant); ok {
		return x.PartyAddedToParticipant
	}
	return nil
}

func (x *LedgerSyncEvent) GetTransactionAccepted() *TransactionAccepted {
	if x, ok := x.GetValue().(*LedgerSyncEvent_TransactionAccepted); ok {
		return x.TransactionAccepted
	}
	return nil
}

func (x *LedgerSyncEvent) GetCommandRejected() *CommandRejected {
	if x, ok := x.GetValue().(*LedgerSyncEvent_CommandRejected); ok {
		return x.CommandRejected
	}
	return nil
}

func (x *LedgerSyncEvent) GetPartyAllocationRejected() *PartyAllocationRejected {
	if x, ok := x.GetValue().(*LedgerSyncEvent_PartyAllocationRejected); ok {
		return x.PartyAllocationRejected
	}
	return nil
}

func (x *LedgerSyncEvent) GetTransferredOut() *TransferredOut {
	if x, ok := x.GetValue().(*LedgerSyncEvent_TransferredOut); ok {
		return x.TransferredOut
	}
	return nil
}

func (x *LedgerSyncEvent) GetTransferredIn() *TransferredIn {
	if x, ok := x.GetValue().(*LedgerSyncEvent_TransferredIn); ok {
		return x.TransferredIn
	}
	return nil
}

func (x *LedgerSyncEvent) GetContractsAdded() *ContractsAdded {
	if x, ok := x.GetValue().(*LedgerSyncEvent_ContractsAdded); ok {
		return x.ContractsAdded
	}
	return nil
}

func (x *LedgerSyncEvent) GetContractsPurged() *ContractsPurged {
	if x, ok := x.GetValue().(*LedgerSyncEvent_ContractsPurged); ok {
		return x.ContractsPurged
	}
	return nil
}

func (x *LedgerSyncEvent) GetPartiesAdded() *PartiesAddedToParticipant {
	if x, ok := x.GetValue().(*LedgerSyncEvent_PartiesAdded); ok {
		return x.PartiesAdded
	}
	return nil
}

func (x *LedgerSyncEvent) GetPartiesRemoved() *PartiesRemovedFromParticipant {
	if x, ok := x.GetValue().(*LedgerSyncEvent_PartiesRemoved); ok {
		return x.PartiesRemoved
	}
	return nil
}

func (x *LedgerSyncEvent) GetInit() *Init {
	if x, ok := x.GetValue().(*LedgerSyncEvent_Init); ok {
		return x.Init
	}
	return nil
}

type isLedgerSyncEvent_Value interface {
	isLedgerSyncEvent_Value()
}

type LedgerSyncEvent_PartyAddedToParticipant struct {
	PartyAddedToParticipant *PartyAddedToParticipant `protobuf:"bytes,1,opt,name=party_added_to_participant,json=partyAddedToParticipant,proto3,oneof"`
}

type LedgerSyncEvent_TransactionAccepted struct {
	TransactionAccepted *TransactionAccepted `protobuf:"bytes,2,opt,name=transaction_accepted,json=transactionAccepted,proto3,oneof"`
}

type LedgerSyncEvent_CommandRejected struct {
	CommandRejected *CommandRejected `protobuf:"bytes,3,opt,name=command_rejected,json=commandRejected,proto3,oneof"`
}

type LedgerSyncEvent_PartyAllocationRejected struct {
	PartyAllocationRejected *PartyAllocationRejected `protobuf:"bytes,4,opt,name=party_allocation_rejected,json=partyAllocationRejected,proto3,oneof"`
}

type LedgerSyncEvent_TransferredOut struct {
	TransferredOut *TransferredOut `protobuf:"bytes,5,opt,name=transferred_out,json=transferredOut,proto3,oneof"`
}

type LedgerSyncEvent_TransferredIn struct {
	TransferredIn *TransferredIn `protobuf:"bytes,6,opt,name=transferred_in,json=transferredIn,proto3,oneof"`
}

type LedgerSyncEvent_ContractsAdded struct {
	ContractsAdded *ContractsAdded `protobuf:"bytes,7,opt,name=contracts_added,json=contractsAdded,proto3,oneof"`
}

type LedgerSyncEvent_ContractsPurged struct {
	ContractsPurged *ContractsPurged `protobuf:"bytes,8,opt,name=contracts_purged,json=contractsPurged,proto3,oneof"`
}

type LedgerSyncEvent_PartiesAdded struct {
	PartiesAdded *PartiesAddedToParticipant `protobuf:"bytes,9,opt,name=parties_added,json=partiesAdded,proto3,oneof"`
}

type LedgerSyncEvent_PartiesRemoved struct {
	PartiesRemoved *PartiesRemovedFromParticipant `protobuf:"bytes,10,opt,name=parties_removed,json=partiesRemoved,proto3,oneof"`
}

type LedgerSyncEvent_Init struct {
	Init *Init `protobuf:"bytes,11,opt,name=init,proto3,oneof"`
}

func (*LedgerSyncEvent_PartyAddedToParticipant) isLedgerSyncEvent_Value() {}

func (*LedgerSyncEvent_TransactionAccepted) isLedgerSyncEvent_Value() {}

func (*LedgerSyncEvent_CommandRejected) isLedgerSyncEvent_Value() {}

func (*LedgerSyncEvent_PartyAllocationRejected) isLedgerSyncEvent_Value() {}

func (*LedgerSyncEvent_TransferredOut) isLedgerSyncEvent_Value() {}

func (*LedgerSyncEvent_TransferredIn) isLedgerSyncEvent_Value() {}

func (*LedgerSyncEvent_ContractsAdded) isLedgerSyncEvent_Value() {}

func (*LedgerSyncEvent_ContractsPurged) isLedgerSyncEvent_Value() {}

func (*LedgerSyncEvent_PartiesAdded) isLedgerSyncEvent_Value() {}

func (*LedgerSyncEvent_PartiesRemoved) isLedgerSyncEvent_Value() {}

func (*LedgerSyncEvent_Init) isLedgerSyncEvent_Value() {}

type PartyAddedToParticipant struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Party         string `protobuf:"bytes,1,opt,name=party,proto3" json:"party,omitempty"`
	DisplayName   string `protobuf:"bytes,2,opt,name=display_name,json=displayName,proto3" json:"display_name,omitempty"`
	ParticipantId string `protobuf:"bytes,3,opt,name=participant_id,json=participantId,proto3" json:"participant_id,omitempty"`
	RecordTime    int64  `protobuf:"varint,4,opt,name=record_time,json=recordTime,proto3" json:"record_time,omitempty"`
	SubmissionId  string `protobuf:"bytes,5,opt,name=submission_id,json=submissionId,proto3" json:"submission_id,omitempty"`
}

func (x *PartyAddedToParticipant) Reset() {
	*x = PartyAddedToParticipant{}
	mi := &file_com_digitalasset_canton_participant_protocol_v30_ledger_sync_event_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PartyAddedToParticipant) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PartyAddedToParticipant) ProtoMessage() {}

func (x *PartyAddedToParticipant) ProtoReflect() protoreflect.Message {
	mi := &file_com_digitalasset_canton_participant_protocol_v30_ledger_sync_event_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PartyAddedToParticipant.ProtoReflect.Descriptor instead.
func (*PartyAddedToParticipant) Descriptor() ([]byte, []int) {
	return file_com_digitalasset_canton_participant_protocol_v30_ledger_sync_event_proto_rawDescGZIP(), []int{1}
}

func (x *PartyAddedToParticipant) GetParty() string {
	if x != nil {
		return x.Party
	}
	return ""
}

func (x *PartyAddedToParticipant) GetDisplayName() string {
	if x != nil {
		return x.DisplayName
	}
	return ""
}

func (x *PartyAddedToParticipant) GetParticipantId() string {
	if x != nil {
		return x.ParticipantId
	}
	return ""
}

func (x *PartyAddedToParticipant) GetRecordTime() int64 {
	if x != nil {
		return x.RecordTime
	}
	return 0
}

func (x *PartyAddedToParticipant) GetSubmissionId() string {
	if x != nil {
		return x.SubmissionId
	}
	return ""
}

type PartyAllocationRejected struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SubmissionId    string `protobuf:"bytes,1,opt,name=submission_id,json=submissionId,proto3" json:"submission_id,omitempty"`
	ParticipantId   string `protobuf:"bytes,2,opt,name=participant_id,json=participantId,proto3" json:"participant_id,omitempty"`
	RecordTime      int64  `protobuf:"varint,3,opt,name=record_time,json=recordTime,proto3" json:"record_time,omitempty"`
	RejectionReason string `protobuf:"bytes,4,opt,name=rejection_reason,json=rejectionReason,proto3" json:"rejection_reason,omitempty"`
}

func (x *PartyAllocationRejected) Reset() {
	*x = PartyAllocationRejected{}
	mi := &file_com_digitalasset_canton_participant_protocol_v30_ledger_sync_event_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PartyAllocationRejected) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PartyAllocationRejected) ProtoMessage() {}

func (x *PartyAllocationRejected) ProtoReflect() protoreflect.Message {
	mi := &file_com_digitalasset_canton_participant_protocol_v30_ledger_sync_event_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PartyAllocationRejected.ProtoReflect.Descriptor instead.
func (*PartyAllocationRejected) Descriptor() ([]byte, []int) {
	return file_com_digitalasset_canton_participant_protocol_v30_ledger_sync_event_proto_rawDescGZIP(), []int{2}
}

func (x *PartyAllocationRejected) GetSubmissionId() string {
	if x != nil {
		return x.SubmissionId
	}
	return ""
}

func (x *PartyAllocationRejected) GetParticipantId() string {
	if x != nil {
		return x.ParticipantId
	}
	return ""
}

func (x *PartyAllocationRejected) GetRecordTime() int64 {
	if x != nil {
		return x.RecordTime
	}
	return 0
}

func (x *PartyAllocationRejected) GetRejectionReason() string {
	if x != nil {
		return x.RejectionReason
	}
	return ""
}

type TransactionAccepted struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CompletionInfo    *CompletionInfo     `protobuf:"bytes,1,opt,name=completion_info,json=completionInfo,proto3" json:"completion_info,omitempty"`
	TransactionMeta   *TransactionMeta    `protobuf:"bytes,2,opt,name=transaction_meta,json=transactionMeta,proto3" json:"transaction_meta,omitempty"`
	Transaction       []byte              `protobuf:"bytes,3,opt,name=transaction,proto3" json:"transaction,omitempty"`
	TransactionId     string              `protobuf:"bytes,4,opt,name=transaction_id,json=transactionId,proto3" json:"transaction_id,omitempty"`
	RecordTime        int64               `protobuf:"varint,5,opt,name=record_time,json=recordTime,proto3" json:"record_time,omitempty"`
	DivulgedContracts []*DivulgedContract `protobuf:"bytes,6,rep,name=divulged_contracts,json=divulgedContracts,proto3" json:"divulged_contracts,omitempty"`
	BlindingInfo      *BlindingInfo       `protobuf:"bytes,7,opt,name=blinding_info,json=blindingInfo,proto3" json:"blinding_info,omitempty"`
	ContractMetadata  map[string][]byte   `protobuf:"bytes,8,rep,name=contract_metadata,json=contractMetadata,proto3" json:"contract_metadata,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	HostedWitnesses   []string            `protobuf:"bytes,9,rep,name=hosted_witnesses,json=hostedWitnesses,proto3" json:"hosted_witnesses,omitempty"`
	DomainId          string              `protobuf:"bytes,10,opt,name=domain_id,json=domainId,proto3" json:"domain_id,omitempty"`
}

func (x *TransactionAccepted) Reset() {
	*x = TransactionAccepted{}
	mi := &file_com_digitalasset_canton_participant_protocol_v30_ledger_sync_event_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TransactionAccepted) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TransactionAccepted) ProtoMessage() {}

func (x *TransactionAccepted) ProtoReflect() protoreflect.Message {
	mi := &file_com_digitalasset_canton_participant_protocol_v30_ledger_sync_event_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TransactionAccepted.ProtoReflect.Descriptor instead.
func (*TransactionAccepted) Descriptor() ([]byte, []int) {
	return file_com_digitalasset_canton_participant_protocol_v30_ledger_sync_event_proto_rawDescGZIP(), []int{3}
}

func (x *TransactionAccepted) GetCompletionInfo() *CompletionInfo {
	if x != nil {
		return x.CompletionInfo
	}
	return nil
}

func (x *TransactionAccepted) GetTransactionMeta() *TransactionMeta {
	if x != nil {
		return x.TransactionMeta
	}
	return nil
}

func (x *TransactionAccepted) GetTransaction() []byte {
	if x != nil {
		return x.Transaction
	}
	return nil
}

func (x *TransactionAccepted) GetTransactionId() string {
	if x != nil {
		return x.TransactionId
	}
	return ""
}

func (x *TransactionAccepted) GetRecordTime() int64 {
	if x != nil {
		return x.RecordTime
	}
	return 0
}

func (x *TransactionAccepted) GetDivulgedContracts() []*DivulgedContract {
	if x != nil {
		return x.DivulgedContracts
	}
	return nil
}

func (x *TransactionAccepted) GetBlindingInfo() *BlindingInfo {
	if x != nil {
		return x.BlindingInfo
	}
	return nil
}

func (x *TransactionAccepted) GetContractMetadata() map[string][]byte {
	if x != nil {
		return x.ContractMetadata
	}
	return nil
}

func (x *TransactionAccepted) GetHostedWitnesses() []string {
	if x != nil {
		return x.HostedWitnesses
	}
	return nil
}

func (x *TransactionAccepted) GetDomainId() string {
	if x != nil {
		return x.DomainId
	}
	return ""
}

type CompletionInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ActAs                  []string                 `protobuf:"bytes,1,rep,name=act_as,json=actAs,proto3" json:"act_as,omitempty"`
	ApplicationId          string                   `protobuf:"bytes,2,opt,name=application_id,json=applicationId,proto3" json:"application_id,omitempty"`
	CommandId              string                   `protobuf:"bytes,3,opt,name=command_id,json=commandId,proto3" json:"command_id,omitempty"`
	OptDeduplicationPeriod *v30.DeduplicationPeriod `protobuf:"bytes,4,opt,name=opt_deduplication_period,json=optDeduplicationPeriod,proto3" json:"opt_deduplication_period,omitempty"`
	SubmissionId           string                   `protobuf:"bytes,5,opt,name=submission_id,json=submissionId,proto3" json:"submission_id,omitempty"`
}

func (x *CompletionInfo) Reset() {
	*x = CompletionInfo{}
	mi := &file_com_digitalasset_canton_participant_protocol_v30_ledger_sync_event_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CompletionInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CompletionInfo) ProtoMessage() {}

func (x *CompletionInfo) ProtoReflect() protoreflect.Message {
	mi := &file_com_digitalasset_canton_participant_protocol_v30_ledger_sync_event_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CompletionInfo.ProtoReflect.Descriptor instead.
func (*CompletionInfo) Descriptor() ([]byte, []int) {
	return file_com_digitalasset_canton_participant_protocol_v30_ledger_sync_event_proto_rawDescGZIP(), []int{4}
}

func (x *CompletionInfo) GetActAs() []string {
	if x != nil {
		return x.ActAs
	}
	return nil
}

func (x *CompletionInfo) GetApplicationId() string {
	if x != nil {
		return x.ApplicationId
	}
	return ""
}

func (x *CompletionInfo) GetCommandId() string {
	if x != nil {
		return x.CommandId
	}
	return ""
}

func (x *CompletionInfo) GetOptDeduplicationPeriod() *v30.DeduplicationPeriod {
	if x != nil {
		return x.OptDeduplicationPeriod
	}
	return nil
}

func (x *CompletionInfo) GetSubmissionId() string {
	if x != nil {
		return x.SubmissionId
	}
	return ""
}

type TransactionMeta struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	LedgerTime     int64                       `protobuf:"varint,1,opt,name=ledger_time,json=ledgerTime,proto3" json:"ledger_time,omitempty"`
	WorkflowId     *wrapperspb.StringValue     `protobuf:"bytes,2,opt,name=workflow_id,json=workflowId,proto3" json:"workflow_id,omitempty"`
	SubmissionTime int64                       `protobuf:"varint,3,opt,name=submission_time,json=submissionTime,proto3" json:"submission_time,omitempty"`
	SubmissionSeed []byte                      `protobuf:"bytes,4,opt,name=submission_seed,json=submissionSeed,proto3" json:"submission_seed,omitempty"`
	UsedPackages   []string                    `protobuf:"bytes,5,rep,name=used_packages,json=usedPackages,proto3" json:"used_packages,omitempty"`
	NodeSeeds      []*NodeSeed                 `protobuf:"bytes,6,rep,name=node_seeds,json=nodeSeeds,proto3" json:"node_seeds,omitempty"`
	ByKeyNodes     *TransactionMeta_ByKeyNodes `protobuf:"bytes,7,opt,name=by_key_nodes,json=byKeyNodes,proto3" json:"by_key_nodes,omitempty"`
}

func (x *TransactionMeta) Reset() {
	*x = TransactionMeta{}
	mi := &file_com_digitalasset_canton_participant_protocol_v30_ledger_sync_event_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TransactionMeta) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TransactionMeta) ProtoMessage() {}

func (x *TransactionMeta) ProtoReflect() protoreflect.Message {
	mi := &file_com_digitalasset_canton_participant_protocol_v30_ledger_sync_event_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TransactionMeta.ProtoReflect.Descriptor instead.
func (*TransactionMeta) Descriptor() ([]byte, []int) {
	return file_com_digitalasset_canton_participant_protocol_v30_ledger_sync_event_proto_rawDescGZIP(), []int{5}
}

func (x *TransactionMeta) GetLedgerTime() int64 {
	if x != nil {
		return x.LedgerTime
	}
	return 0
}

func (x *TransactionMeta) GetWorkflowId() *wrapperspb.StringValue {
	if x != nil {
		return x.WorkflowId
	}
	return nil
}

func (x *TransactionMeta) GetSubmissionTime() int64 {
	if x != nil {
		return x.SubmissionTime
	}
	return 0
}

func (x *TransactionMeta) GetSubmissionSeed() []byte {
	if x != nil {
		return x.SubmissionSeed
	}
	return nil
}

func (x *TransactionMeta) GetUsedPackages() []string {
	if x != nil {
		return x.UsedPackages
	}
	return nil
}

func (x *TransactionMeta) GetNodeSeeds() []*NodeSeed {
	if x != nil {
		return x.NodeSeeds
	}
	return nil
}

func (x *TransactionMeta) GetByKeyNodes() *TransactionMeta_ByKeyNodes {
	if x != nil {
		return x.ByKeyNodes
	}
	return nil
}

type NodeSeed struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	NodeIndex int32  `protobuf:"varint,1,opt,name=node_index,json=nodeIndex,proto3" json:"node_index,omitempty"`
	NodeSeed  []byte `protobuf:"bytes,2,opt,name=node_seed,json=nodeSeed,proto3" json:"node_seed,omitempty"`
}

func (x *NodeSeed) Reset() {
	*x = NodeSeed{}
	mi := &file_com_digitalasset_canton_participant_protocol_v30_ledger_sync_event_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *NodeSeed) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NodeSeed) ProtoMessage() {}

func (x *NodeSeed) ProtoReflect() protoreflect.Message {
	mi := &file_com_digitalasset_canton_participant_protocol_v30_ledger_sync_event_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NodeSeed.ProtoReflect.Descriptor instead.
func (*NodeSeed) Descriptor() ([]byte, []int) {
	return file_com_digitalasset_canton_participant_protocol_v30_ledger_sync_event_proto_rawDescGZIP(), []int{6}
}

func (x *NodeSeed) GetNodeIndex() int32 {
	if x != nil {
		return x.NodeIndex
	}
	return 0
}

func (x *NodeSeed) GetNodeSeed() []byte {
	if x != nil {
		return x.NodeSeed
	}
	return nil
}

type DivulgedContract struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ContractId   string `protobuf:"bytes,1,opt,name=contract_id,json=contractId,proto3" json:"contract_id,omitempty"`
	ContractInst []byte `protobuf:"bytes,2,opt,name=contract_inst,json=contractInst,proto3" json:"contract_inst,omitempty"`
}

func (x *DivulgedContract) Reset() {
	*x = DivulgedContract{}
	mi := &file_com_digitalasset_canton_participant_protocol_v30_ledger_sync_event_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DivulgedContract) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DivulgedContract) ProtoMessage() {}

func (x *DivulgedContract) ProtoReflect() protoreflect.Message {
	mi := &file_com_digitalasset_canton_participant_protocol_v30_ledger_sync_event_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DivulgedContract.ProtoReflect.Descriptor instead.
func (*DivulgedContract) Descriptor() ([]byte, []int) {
	return file_com_digitalasset_canton_participant_protocol_v30_ledger_sync_event_proto_rawDescGZIP(), []int{7}
}

func (x *DivulgedContract) GetContractId() string {
	if x != nil {
		return x.ContractId
	}
	return ""
}

func (x *DivulgedContract) GetContractInst() []byte {
	if x != nil {
		return x.ContractInst
	}
	return nil
}

type BlindingInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Disclosure map[int32]*Parties  `protobuf:"bytes,1,rep,name=disclosure,proto3" json:"disclosure,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	Divulgence map[string]*Parties `protobuf:"bytes,2,rep,name=divulgence,proto3" json:"divulgence,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *BlindingInfo) Reset() {
	*x = BlindingInfo{}
	mi := &file_com_digitalasset_canton_participant_protocol_v30_ledger_sync_event_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *BlindingInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BlindingInfo) ProtoMessage() {}

func (x *BlindingInfo) ProtoReflect() protoreflect.Message {
	mi := &file_com_digitalasset_canton_participant_protocol_v30_ledger_sync_event_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BlindingInfo.ProtoReflect.Descriptor instead.
func (*BlindingInfo) Descriptor() ([]byte, []int) {
	return file_com_digitalasset_canton_participant_protocol_v30_ledger_sync_event_proto_rawDescGZIP(), []int{8}
}

func (x *BlindingInfo) GetDisclosure() map[int32]*Parties {
	if x != nil {
		return x.Disclosure
	}
	return nil
}

func (x *BlindingInfo) GetDivulgence() map[string]*Parties {
	if x != nil {
		return x.Divulgence
	}
	return nil
}

type Parties struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Parties []string `protobuf:"bytes,1,rep,name=parties,proto3" json:"parties,omitempty"`
}

func (x *Parties) Reset() {
	*x = Parties{}
	mi := &file_com_digitalasset_canton_participant_protocol_v30_ledger_sync_event_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Parties) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Parties) ProtoMessage() {}

func (x *Parties) ProtoReflect() protoreflect.Message {
	mi := &file_com_digitalasset_canton_participant_protocol_v30_ledger_sync_event_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Parties.ProtoReflect.Descriptor instead.
func (*Parties) Descriptor() ([]byte, []int) {
	return file_com_digitalasset_canton_participant_protocol_v30_ledger_sync_event_proto_rawDescGZIP(), []int{9}
}

func (x *Parties) GetParties() []string {
	if x != nil {
		return x.Parties
	}
	return nil
}

type CommandRejected struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CompletionInfo  *CompletionInfo                              `protobuf:"bytes,1,opt,name=completion_info,json=completionInfo,proto3" json:"completion_info,omitempty"`
	RecordTime      int64                                        `protobuf:"varint,2,opt,name=record_time,json=recordTime,proto3" json:"record_time,omitempty"`
	RejectionReason *CommandRejected_GrpcRejectionReasonTemplate `protobuf:"bytes,3,opt,name=rejection_reason,json=rejectionReason,proto3" json:"rejection_reason,omitempty"`
	CommandKind     CommandKind                                  `protobuf:"varint,4,opt,name=command_kind,json=commandKind,proto3,enum=com.digitalasset.canton.participant.protocol.v30.CommandKind" json:"command_kind,omitempty"`
	DomainId        string                                       `protobuf:"bytes,5,opt,name=domain_id,json=domainId,proto3" json:"domain_id,omitempty"`
}

func (x *CommandRejected) Reset() {
	*x = CommandRejected{}
	mi := &file_com_digitalasset_canton_participant_protocol_v30_ledger_sync_event_proto_msgTypes[10]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CommandRejected) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CommandRejected) ProtoMessage() {}

func (x *CommandRejected) ProtoReflect() protoreflect.Message {
	mi := &file_com_digitalasset_canton_participant_protocol_v30_ledger_sync_event_proto_msgTypes[10]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CommandRejected.ProtoReflect.Descriptor instead.
func (*CommandRejected) Descriptor() ([]byte, []int) {
	return file_com_digitalasset_canton_participant_protocol_v30_ledger_sync_event_proto_rawDescGZIP(), []int{10}
}

func (x *CommandRejected) GetCompletionInfo() *CompletionInfo {
	if x != nil {
		return x.CompletionInfo
	}
	return nil
}

func (x *CommandRejected) GetRecordTime() int64 {
	if x != nil {
		return x.RecordTime
	}
	return 0
}

func (x *CommandRejected) GetRejectionReason() *CommandRejected_GrpcRejectionReasonTemplate {
	if x != nil {
		return x.RejectionReason
	}
	return nil
}

func (x *CommandRejected) GetCommandKind() CommandKind {
	if x != nil {
		return x.CommandKind
	}
	return CommandKind_COMMAND_KIND_TRANSACTION_UNSPECIFIED
}

func (x *CommandRejected) GetDomainId() string {
	if x != nil {
		return x.DomainId
	}
	return ""
}

type TransferredOut struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UpdateId                  string                 `protobuf:"bytes,1,opt,name=update_id,json=updateId,proto3" json:"update_id,omitempty"`
	CompletionInfo            *CompletionInfo        `protobuf:"bytes,2,opt,name=completion_info,json=completionInfo,proto3" json:"completion_info,omitempty"`
	Submitter                 string                 `protobuf:"bytes,3,opt,name=submitter,proto3" json:"submitter,omitempty"`
	RecordTime                int64                  `protobuf:"varint,4,opt,name=record_time,json=recordTime,proto3" json:"record_time,omitempty"`
	ContractId                string                 `protobuf:"bytes,5,opt,name=contract_id,json=contractId,proto3" json:"contract_id,omitempty"`
	ContractStakeholders      []string               `protobuf:"bytes,6,rep,name=contract_stakeholders,json=contractStakeholders,proto3" json:"contract_stakeholders,omitempty"`
	SourceDomain              string                 `protobuf:"bytes,7,opt,name=source_domain,json=sourceDomain,proto3" json:"source_domain,omitempty"`
	TargetDomain              string                 `protobuf:"bytes,8,opt,name=target_domain,json=targetDomain,proto3" json:"target_domain,omitempty"`
	TransferInExclusivity     *wrapperspb.Int64Value `protobuf:"bytes,9,opt,name=transfer_in_exclusivity,json=transferInExclusivity,proto3" json:"transfer_in_exclusivity,omitempty"`
	WorkflowId                string                 `protobuf:"bytes,10,opt,name=workflow_id,json=workflowId,proto3" json:"workflow_id,omitempty"`
	TemplateId                string                 `protobuf:"bytes,11,opt,name=template_id,json=templateId,proto3" json:"template_id,omitempty"`
	IsTransferringParticipant bool                   `protobuf:"varint,12,opt,name=is_transferring_participant,json=isTransferringParticipant,proto3" json:"is_transferring_participant,omitempty"`
	HostedStakeholders        []string               `protobuf:"bytes,13,rep,name=hosted_stakeholders,json=hostedStakeholders,proto3" json:"hosted_stakeholders,omitempty"`
	TransferCounter           int64                  `protobuf:"varint,14,opt,name=transfer_counter,json=transferCounter,proto3" json:"transfer_counter,omitempty"`
	PackageName               string                 `protobuf:"bytes,15,opt,name=package_name,json=packageName,proto3" json:"package_name,omitempty"`
}

func (x *TransferredOut) Reset() {
	*x = TransferredOut{}
	mi := &file_com_digitalasset_canton_participant_protocol_v30_ledger_sync_event_proto_msgTypes[11]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TransferredOut) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TransferredOut) ProtoMessage() {}

func (x *TransferredOut) ProtoReflect() protoreflect.Message {
	mi := &file_com_digitalasset_canton_participant_protocol_v30_ledger_sync_event_proto_msgTypes[11]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TransferredOut.ProtoReflect.Descriptor instead.
func (*TransferredOut) Descriptor() ([]byte, []int) {
	return file_com_digitalasset_canton_participant_protocol_v30_ledger_sync_event_proto_rawDescGZIP(), []int{11}
}

func (x *TransferredOut) GetUpdateId() string {
	if x != nil {
		return x.UpdateId
	}
	return ""
}

func (x *TransferredOut) GetCompletionInfo() *CompletionInfo {
	if x != nil {
		return x.CompletionInfo
	}
	return nil
}

func (x *TransferredOut) GetSubmitter() string {
	if x != nil {
		return x.Submitter
	}
	return ""
}

func (x *TransferredOut) GetRecordTime() int64 {
	if x != nil {
		return x.RecordTime
	}
	return 0
}

func (x *TransferredOut) GetContractId() string {
	if x != nil {
		return x.ContractId
	}
	return ""
}

func (x *TransferredOut) GetContractStakeholders() []string {
	if x != nil {
		return x.ContractStakeholders
	}
	return nil
}

func (x *TransferredOut) GetSourceDomain() string {
	if x != nil {
		return x.SourceDomain
	}
	return ""
}

func (x *TransferredOut) GetTargetDomain() string {
	if x != nil {
		return x.TargetDomain
	}
	return ""
}

func (x *TransferredOut) GetTransferInExclusivity() *wrapperspb.Int64Value {
	if x != nil {
		return x.TransferInExclusivity
	}
	return nil
}

func (x *TransferredOut) GetWorkflowId() string {
	if x != nil {
		return x.WorkflowId
	}
	return ""
}

func (x *TransferredOut) GetTemplateId() string {
	if x != nil {
		return x.TemplateId
	}
	return ""
}

func (x *TransferredOut) GetIsTransferringParticipant() bool {
	if x != nil {
		return x.IsTransferringParticipant
	}
	return false
}

func (x *TransferredOut) GetHostedStakeholders() []string {
	if x != nil {
		return x.HostedStakeholders
	}
	return nil
}

func (x *TransferredOut) GetTransferCounter() int64 {
	if x != nil {
		return x.TransferCounter
	}
	return 0
}

func (x *TransferredOut) GetPackageName() string {
	if x != nil {
		return x.PackageName
	}
	return ""
}

type TransferredIn struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UpdateId                  string          `protobuf:"bytes,1,opt,name=update_id,json=updateId,proto3" json:"update_id,omitempty"`
	CompletionInfo            *CompletionInfo `protobuf:"bytes,2,opt,name=completion_info,json=completionInfo,proto3" json:"completion_info,omitempty"`
	Submitter                 string          `protobuf:"bytes,3,opt,name=submitter,proto3" json:"submitter,omitempty"`
	RecordTime                int64           `protobuf:"varint,4,opt,name=record_time,json=recordTime,proto3" json:"record_time,omitempty"`
	LedgerCreateTime          int64           `protobuf:"varint,5,opt,name=ledger_create_time,json=ledgerCreateTime,proto3" json:"ledger_create_time,omitempty"`
	CreateNode                []byte          `protobuf:"bytes,6,opt,name=create_node,json=createNode,proto3" json:"create_node,omitempty"`
	CreatingTransactionId     string          `protobuf:"bytes,7,opt,name=creating_transaction_id,json=creatingTransactionId,proto3" json:"creating_transaction_id,omitempty"`
	ContractMetadata          []byte          `protobuf:"bytes,8,opt,name=contract_metadata,json=contractMetadata,proto3" json:"contract_metadata,omitempty"`
	TransferOutId             *v30.TransferId `protobuf:"bytes,9,opt,name=transfer_out_id,json=transferOutId,proto3" json:"transfer_out_id,omitempty"`
	TargetDomain              string          `protobuf:"bytes,10,opt,name=target_domain,json=targetDomain,proto3" json:"target_domain,omitempty"`
	WorkflowId                string          `protobuf:"bytes,11,opt,name=workflow_id,json=workflowId,proto3" json:"workflow_id,omitempty"`
	IsTransferringParticipant bool            `protobuf:"varint,12,opt,name=is_transferring_participant,json=isTransferringParticipant,proto3" json:"is_transferring_participant,omitempty"`
	HostedStakeholders        []string        `protobuf:"bytes,13,rep,name=hosted_stakeholders,json=hostedStakeholders,proto3" json:"hosted_stakeholders,omitempty"`
	TransferCounter           int64           `protobuf:"varint,14,opt,name=transfer_counter,json=transferCounter,proto3" json:"transfer_counter,omitempty"`
}

func (x *TransferredIn) Reset() {
	*x = TransferredIn{}
	mi := &file_com_digitalasset_canton_participant_protocol_v30_ledger_sync_event_proto_msgTypes[12]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TransferredIn) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TransferredIn) ProtoMessage() {}

func (x *TransferredIn) ProtoReflect() protoreflect.Message {
	mi := &file_com_digitalasset_canton_participant_protocol_v30_ledger_sync_event_proto_msgTypes[12]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TransferredIn.ProtoReflect.Descriptor instead.
func (*TransferredIn) Descriptor() ([]byte, []int) {
	return file_com_digitalasset_canton_participant_protocol_v30_ledger_sync_event_proto_rawDescGZIP(), []int{12}
}

func (x *TransferredIn) GetUpdateId() string {
	if x != nil {
		return x.UpdateId
	}
	return ""
}

func (x *TransferredIn) GetCompletionInfo() *CompletionInfo {
	if x != nil {
		return x.CompletionInfo
	}
	return nil
}

func (x *TransferredIn) GetSubmitter() string {
	if x != nil {
		return x.Submitter
	}
	return ""
}

func (x *TransferredIn) GetRecordTime() int64 {
	if x != nil {
		return x.RecordTime
	}
	return 0
}

func (x *TransferredIn) GetLedgerCreateTime() int64 {
	if x != nil {
		return x.LedgerCreateTime
	}
	return 0
}

func (x *TransferredIn) GetCreateNode() []byte {
	if x != nil {
		return x.CreateNode
	}
	return nil
}

func (x *TransferredIn) GetCreatingTransactionId() string {
	if x != nil {
		return x.CreatingTransactionId
	}
	return ""
}

func (x *TransferredIn) GetContractMetadata() []byte {
	if x != nil {
		return x.ContractMetadata
	}
	return nil
}

func (x *TransferredIn) GetTransferOutId() *v30.TransferId {
	if x != nil {
		return x.TransferOutId
	}
	return nil
}

func (x *TransferredIn) GetTargetDomain() string {
	if x != nil {
		return x.TargetDomain
	}
	return ""
}

func (x *TransferredIn) GetWorkflowId() string {
	if x != nil {
		return x.WorkflowId
	}
	return ""
}

func (x *TransferredIn) GetIsTransferringParticipant() bool {
	if x != nil {
		return x.IsTransferringParticipant
	}
	return false
}

func (x *TransferredIn) GetHostedStakeholders() []string {
	if x != nil {
		return x.HostedStakeholders
	}
	return nil
}

func (x *TransferredIn) GetTransferCounter() int64 {
	if x != nil {
		return x.TransferCounter
	}
	return 0
}

type ContractsAdded struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TransactionId    string            `protobuf:"bytes,1,opt,name=transaction_id,json=transactionId,proto3" json:"transaction_id,omitempty"`
	Contracts        [][]byte          `protobuf:"bytes,2,rep,name=contracts,proto3" json:"contracts,omitempty"`
	DomainId         string            `protobuf:"bytes,3,opt,name=domain_id,json=domainId,proto3" json:"domain_id,omitempty"`
	LedgerTime       int64             `protobuf:"varint,4,opt,name=ledger_time,json=ledgerTime,proto3" json:"ledger_time,omitempty"`
	RecordTime       int64             `protobuf:"varint,5,opt,name=record_time,json=recordTime,proto3" json:"record_time,omitempty"`
	HostedWitnesses  []string          `protobuf:"bytes,6,rep,name=hosted_witnesses,json=hostedWitnesses,proto3" json:"hosted_witnesses,omitempty"`
	ContractMetadata map[string][]byte `protobuf:"bytes,7,rep,name=contract_metadata,json=contractMetadata,proto3" json:"contract_metadata,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	WorkflowId       string            `protobuf:"bytes,8,opt,name=workflow_id,json=workflowId,proto3" json:"workflow_id,omitempty"`
}

func (x *ContractsAdded) Reset() {
	*x = ContractsAdded{}
	mi := &file_com_digitalasset_canton_participant_protocol_v30_ledger_sync_event_proto_msgTypes[13]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ContractsAdded) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ContractsAdded) ProtoMessage() {}

func (x *ContractsAdded) ProtoReflect() protoreflect.Message {
	mi := &file_com_digitalasset_canton_participant_protocol_v30_ledger_sync_event_proto_msgTypes[13]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ContractsAdded.ProtoReflect.Descriptor instead.
func (*ContractsAdded) Descriptor() ([]byte, []int) {
	return file_com_digitalasset_canton_participant_protocol_v30_ledger_sync_event_proto_rawDescGZIP(), []int{13}
}

func (x *ContractsAdded) GetTransactionId() string {
	if x != nil {
		return x.TransactionId
	}
	return ""
}

func (x *ContractsAdded) GetContracts() [][]byte {
	if x != nil {
		return x.Contracts
	}
	return nil
}

func (x *ContractsAdded) GetDomainId() string {
	if x != nil {
		return x.DomainId
	}
	return ""
}

func (x *ContractsAdded) GetLedgerTime() int64 {
	if x != nil {
		return x.LedgerTime
	}
	return 0
}

func (x *ContractsAdded) GetRecordTime() int64 {
	if x != nil {
		return x.RecordTime
	}
	return 0
}

func (x *ContractsAdded) GetHostedWitnesses() []string {
	if x != nil {
		return x.HostedWitnesses
	}
	return nil
}

func (x *ContractsAdded) GetContractMetadata() map[string][]byte {
	if x != nil {
		return x.ContractMetadata
	}
	return nil
}

func (x *ContractsAdded) GetWorkflowId() string {
	if x != nil {
		return x.WorkflowId
	}
	return ""
}

type ContractsPurged struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TransactionId   string   `protobuf:"bytes,1,opt,name=transaction_id,json=transactionId,proto3" json:"transaction_id,omitempty"`
	Contracts       [][]byte `protobuf:"bytes,2,rep,name=contracts,proto3" json:"contracts,omitempty"`
	DomainId        string   `protobuf:"bytes,3,opt,name=domain_id,json=domainId,proto3" json:"domain_id,omitempty"`
	RecordTime      int64    `protobuf:"varint,4,opt,name=record_time,json=recordTime,proto3" json:"record_time,omitempty"`
	HostedWitnesses []string `protobuf:"bytes,5,rep,name=hosted_witnesses,json=hostedWitnesses,proto3" json:"hosted_witnesses,omitempty"`
}

func (x *ContractsPurged) Reset() {
	*x = ContractsPurged{}
	mi := &file_com_digitalasset_canton_participant_protocol_v30_ledger_sync_event_proto_msgTypes[14]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ContractsPurged) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ContractsPurged) ProtoMessage() {}

func (x *ContractsPurged) ProtoReflect() protoreflect.Message {
	mi := &file_com_digitalasset_canton_participant_protocol_v30_ledger_sync_event_proto_msgTypes[14]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ContractsPurged.ProtoReflect.Descriptor instead.
func (*ContractsPurged) Descriptor() ([]byte, []int) {
	return file_com_digitalasset_canton_participant_protocol_v30_ledger_sync_event_proto_rawDescGZIP(), []int{14}
}

func (x *ContractsPurged) GetTransactionId() string {
	if x != nil {
		return x.TransactionId
	}
	return ""
}

func (x *ContractsPurged) GetContracts() [][]byte {
	if x != nil {
		return x.Contracts
	}
	return nil
}

func (x *ContractsPurged) GetDomainId() string {
	if x != nil {
		return x.DomainId
	}
	return ""
}

func (x *ContractsPurged) GetRecordTime() int64 {
	if x != nil {
		return x.RecordTime
	}
	return 0
}

func (x *ContractsPurged) GetHostedWitnesses() []string {
	if x != nil {
		return x.HostedWitnesses
	}
	return nil
}

type PartiesAddedToParticipant struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Parties       []string `protobuf:"bytes,1,rep,name=parties,proto3" json:"parties,omitempty"`
	ParticipantId string   `protobuf:"bytes,2,opt,name=participant_id,json=participantId,proto3" json:"participant_id,omitempty"`
	RecordTime    int64    `protobuf:"varint,3,opt,name=record_time,json=recordTime,proto3" json:"record_time,omitempty"`
	EffectiveTime int64    `protobuf:"varint,4,opt,name=effective_time,json=effectiveTime,proto3" json:"effective_time,omitempty"`
}

func (x *PartiesAddedToParticipant) Reset() {
	*x = PartiesAddedToParticipant{}
	mi := &file_com_digitalasset_canton_participant_protocol_v30_ledger_sync_event_proto_msgTypes[15]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PartiesAddedToParticipant) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PartiesAddedToParticipant) ProtoMessage() {}

func (x *PartiesAddedToParticipant) ProtoReflect() protoreflect.Message {
	mi := &file_com_digitalasset_canton_participant_protocol_v30_ledger_sync_event_proto_msgTypes[15]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PartiesAddedToParticipant.ProtoReflect.Descriptor instead.
func (*PartiesAddedToParticipant) Descriptor() ([]byte, []int) {
	return file_com_digitalasset_canton_participant_protocol_v30_ledger_sync_event_proto_rawDescGZIP(), []int{15}
}

func (x *PartiesAddedToParticipant) GetParties() []string {
	if x != nil {
		return x.Parties
	}
	return nil
}

func (x *PartiesAddedToParticipant) GetParticipantId() string {
	if x != nil {
		return x.ParticipantId
	}
	return ""
}

func (x *PartiesAddedToParticipant) GetRecordTime() int64 {
	if x != nil {
		return x.RecordTime
	}
	return 0
}

func (x *PartiesAddedToParticipant) GetEffectiveTime() int64 {
	if x != nil {
		return x.EffectiveTime
	}
	return 0
}

type PartiesRemovedFromParticipant struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Parties       []string `protobuf:"bytes,1,rep,name=parties,proto3" json:"parties,omitempty"`
	ParticipantId string   `protobuf:"bytes,2,opt,name=participant_id,json=participantId,proto3" json:"participant_id,omitempty"`
	RecordTime    int64    `protobuf:"varint,3,opt,name=record_time,json=recordTime,proto3" json:"record_time,omitempty"`
	EffectiveTime int64    `protobuf:"varint,4,opt,name=effective_time,json=effectiveTime,proto3" json:"effective_time,omitempty"`
}

func (x *PartiesRemovedFromParticipant) Reset() {
	*x = PartiesRemovedFromParticipant{}
	mi := &file_com_digitalasset_canton_participant_protocol_v30_ledger_sync_event_proto_msgTypes[16]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PartiesRemovedFromParticipant) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PartiesRemovedFromParticipant) ProtoMessage() {}

func (x *PartiesRemovedFromParticipant) ProtoReflect() protoreflect.Message {
	mi := &file_com_digitalasset_canton_participant_protocol_v30_ledger_sync_event_proto_msgTypes[16]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PartiesRemovedFromParticipant.ProtoReflect.Descriptor instead.
func (*PartiesRemovedFromParticipant) Descriptor() ([]byte, []int) {
	return file_com_digitalasset_canton_participant_protocol_v30_ledger_sync_event_proto_rawDescGZIP(), []int{16}
}

func (x *PartiesRemovedFromParticipant) GetParties() []string {
	if x != nil {
		return x.Parties
	}
	return nil
}

func (x *PartiesRemovedFromParticipant) GetParticipantId() string {
	if x != nil {
		return x.ParticipantId
	}
	return ""
}

func (x *PartiesRemovedFromParticipant) GetRecordTime() int64 {
	if x != nil {
		return x.RecordTime
	}
	return 0
}

func (x *PartiesRemovedFromParticipant) GetEffectiveTime() int64 {
	if x != nil {
		return x.EffectiveTime
	}
	return 0
}

type Init struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RecordTime int64 `protobuf:"varint,1,opt,name=record_time,json=recordTime,proto3" json:"record_time,omitempty"`
}

func (x *Init) Reset() {
	*x = Init{}
	mi := &file_com_digitalasset_canton_participant_protocol_v30_ledger_sync_event_proto_msgTypes[17]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Init) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Init) ProtoMessage() {}

func (x *Init) ProtoReflect() protoreflect.Message {
	mi := &file_com_digitalasset_canton_participant_protocol_v30_ledger_sync_event_proto_msgTypes[17]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Init.ProtoReflect.Descriptor instead.
func (*Init) Descriptor() ([]byte, []int) {
	return file_com_digitalasset_canton_participant_protocol_v30_ledger_sync_event_proto_rawDescGZIP(), []int{17}
}

func (x *Init) GetRecordTime() int64 {
	if x != nil {
		return x.RecordTime
	}
	return 0
}

type TransactionMeta_ByKeyNodes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ByKeyNode []int32 `protobuf:"varint,1,rep,packed,name=by_key_node,json=byKeyNode,proto3" json:"by_key_node,omitempty"`
}

func (x *TransactionMeta_ByKeyNodes) Reset() {
	*x = TransactionMeta_ByKeyNodes{}
	mi := &file_com_digitalasset_canton_participant_protocol_v30_ledger_sync_event_proto_msgTypes[19]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TransactionMeta_ByKeyNodes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TransactionMeta_ByKeyNodes) ProtoMessage() {}

func (x *TransactionMeta_ByKeyNodes) ProtoReflect() protoreflect.Message {
	mi := &file_com_digitalasset_canton_participant_protocol_v30_ledger_sync_event_proto_msgTypes[19]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TransactionMeta_ByKeyNodes.ProtoReflect.Descriptor instead.
func (*TransactionMeta_ByKeyNodes) Descriptor() ([]byte, []int) {
	return file_com_digitalasset_canton_participant_protocol_v30_ledger_sync_event_proto_rawDescGZIP(), []int{5, 0}
}

func (x *TransactionMeta_ByKeyNodes) GetByKeyNode() []int32 {
	if x != nil {
		return x.ByKeyNode
	}
	return nil
}

type CommandRejected_GrpcRejectionReasonTemplate struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status []byte `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
}

func (x *CommandRejected_GrpcRejectionReasonTemplate) Reset() {
	*x = CommandRejected_GrpcRejectionReasonTemplate{}
	mi := &file_com_digitalasset_canton_participant_protocol_v30_ledger_sync_event_proto_msgTypes[22]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CommandRejected_GrpcRejectionReasonTemplate) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CommandRejected_GrpcRejectionReasonTemplate) ProtoMessage() {}

func (x *CommandRejected_GrpcRejectionReasonTemplate) ProtoReflect() protoreflect.Message {
	mi := &file_com_digitalasset_canton_participant_protocol_v30_ledger_sync_event_proto_msgTypes[22]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CommandRejected_GrpcRejectionReasonTemplate.ProtoReflect.Descriptor instead.
func (*CommandRejected_GrpcRejectionReasonTemplate) Descriptor() ([]byte, []int) {
	return file_com_digitalasset_canton_participant_protocol_v30_ledger_sync_event_proto_rawDescGZIP(), []int{10, 0}
}

func (x *CommandRejected_GrpcRejectionReasonTemplate) GetStatus() []byte {
	if x != nil {
		return x.Status
	}
	return nil
}

var File_com_digitalasset_canton_participant_protocol_v30_ledger_sync_event_proto protoreflect.FileDescriptor

var file_com_digitalasset_canton_participant_protocol_v30_ledger_sync_event_proto_rawDesc = []byte{
	0x0a, 0x48, 0x63, 0x6f, 0x6d, 0x2f, 0x64, 0x69, 0x67, 0x69, 0x74, 0x61, 0x6c, 0x61, 0x73, 0x73,
	0x65, 0x74, 0x2f, 0x63, 0x61, 0x6e, 0x74, 0x6f, 0x6e, 0x2f, 0x70, 0x61, 0x72, 0x74, 0x69, 0x63,
	0x69, 0x70, 0x61, 0x6e, 0x74, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2f, 0x76,
	0x33, 0x30, 0x2f, 0x6c, 0x65, 0x64, 0x67, 0x65, 0x72, 0x5f, 0x73, 0x79, 0x6e, 0x63, 0x5f, 0x65,
	0x76, 0x65, 0x6e, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x30, 0x63, 0x6f, 0x6d, 0x2e,
	0x64, 0x69, 0x67, 0x69, 0x74, 0x61, 0x6c, 0x61, 0x73, 0x73, 0x65, 0x74, 0x2e, 0x63, 0x61, 0x6e,
	0x74, 0x6f, 0x6e, 0x2e, 0x70, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x76, 0x33, 0x30, 0x1a, 0x42, 0x63, 0x6f,
	0x6d, 0x2f, 0x64, 0x69, 0x67, 0x69, 0x74, 0x61, 0x6c, 0x61, 0x73, 0x73, 0x65, 0x74, 0x2f, 0x63,
	0x61, 0x6e, 0x74, 0x6f, 0x6e, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2f, 0x76,
	0x33, 0x30, 0x2f, 0x70, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x5f, 0x74,
	0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x1a, 0x3f, 0x63, 0x6f, 0x6d, 0x2f, 0x64, 0x69, 0x67, 0x69, 0x74, 0x61, 0x6c, 0x61, 0x73, 0x73,
	0x65, 0x74, 0x2f, 0x63, 0x61, 0x6e, 0x74, 0x6f, 0x6e, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63,
	0x6f, 0x6c, 0x2f, 0x76, 0x33, 0x30, 0x2f, 0x70, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61,
	0x6e, 0x74, 0x5f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x1a, 0x1e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2f, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x22, 0x8d, 0x0a, 0x0a, 0x0f, 0x4c, 0x65, 0x64, 0x67, 0x65, 0x72, 0x53, 0x79, 0x6e, 0x63,
	0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x88, 0x01, 0x0a, 0x1a, 0x70, 0x61, 0x72, 0x74, 0x79, 0x5f,
	0x61, 0x64, 0x64, 0x65, 0x64, 0x5f, 0x74, 0x6f, 0x5f, 0x70, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69,
	0x70, 0x61, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x49, 0x2e, 0x63, 0x6f, 0x6d,
	0x2e, 0x64, 0x69, 0x67, 0x69, 0x74, 0x61, 0x6c, 0x61, 0x73, 0x73, 0x65, 0x74, 0x2e, 0x63, 0x61,
	0x6e, 0x74, 0x6f, 0x6e, 0x2e, 0x70, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6e, 0x74,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x76, 0x33, 0x30, 0x2e, 0x50, 0x61,
	0x72, 0x74, 0x79, 0x41, 0x64, 0x64, 0x65, 0x64, 0x54, 0x6f, 0x50, 0x61, 0x72, 0x74, 0x69, 0x63,
	0x69, 0x70, 0x61, 0x6e, 0x74, 0x48, 0x00, 0x52, 0x17, 0x70, 0x61, 0x72, 0x74, 0x79, 0x41, 0x64,
	0x64, 0x65, 0x64, 0x54, 0x6f, 0x50, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6e, 0x74,
	0x12, 0x7a, 0x0a, 0x14, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f,
	0x61, 0x63, 0x63, 0x65, 0x70, 0x74, 0x65, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x45,
	0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x64, 0x69, 0x67, 0x69, 0x74, 0x61, 0x6c, 0x61, 0x73, 0x73, 0x65,
	0x74, 0x2e, 0x63, 0x61, 0x6e, 0x74, 0x6f, 0x6e, 0x2e, 0x70, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69,
	0x70, 0x61, 0x6e, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x76, 0x33,
	0x30, 0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x63, 0x63,
	0x65, 0x70, 0x74, 0x65, 0x64, 0x48, 0x00, 0x52, 0x13, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x41, 0x63, 0x63, 0x65, 0x70, 0x74, 0x65, 0x64, 0x12, 0x6e, 0x0a, 0x10,
	0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x5f, 0x72, 0x65, 0x6a, 0x65, 0x63, 0x74, 0x65, 0x64,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x41, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x64, 0x69, 0x67,
	0x69, 0x74, 0x61, 0x6c, 0x61, 0x73, 0x73, 0x65, 0x74, 0x2e, 0x63, 0x61, 0x6e, 0x74, 0x6f, 0x6e,
	0x2e, 0x70, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x76, 0x33, 0x30, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e,
	0x64, 0x52, 0x65, 0x6a, 0x65, 0x63, 0x74, 0x65, 0x64, 0x48, 0x00, 0x52, 0x0f, 0x63, 0x6f, 0x6d,
	0x6d, 0x61, 0x6e, 0x64, 0x52, 0x65, 0x6a, 0x65, 0x63, 0x74, 0x65, 0x64, 0x12, 0x87, 0x01, 0x0a,
	0x19, 0x70, 0x61, 0x72, 0x74, 0x79, 0x5f, 0x61, 0x6c, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x5f, 0x72, 0x65, 0x6a, 0x65, 0x63, 0x74, 0x65, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x49, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x64, 0x69, 0x67, 0x69, 0x74, 0x61, 0x6c, 0x61, 0x73,
	0x73, 0x65, 0x74, 0x2e, 0x63, 0x61, 0x6e, 0x74, 0x6f, 0x6e, 0x2e, 0x70, 0x61, 0x72, 0x74, 0x69,
	0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e,
	0x76, 0x33, 0x30, 0x2e, 0x50, 0x61, 0x72, 0x74, 0x79, 0x41, 0x6c, 0x6c, 0x6f, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x52, 0x65, 0x6a, 0x65, 0x63, 0x74, 0x65, 0x64, 0x48, 0x00, 0x52, 0x17, 0x70,
	0x61, 0x72, 0x74, 0x79, 0x41, 0x6c, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65,
	0x6a, 0x65, 0x63, 0x74, 0x65, 0x64, 0x12, 0x6b, 0x0a, 0x0f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66,
	0x65, 0x72, 0x72, 0x65, 0x64, 0x5f, 0x6f, 0x75, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x40, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x64, 0x69, 0x67, 0x69, 0x74, 0x61, 0x6c, 0x61, 0x73, 0x73,
	0x65, 0x74, 0x2e, 0x63, 0x61, 0x6e, 0x74, 0x6f, 0x6e, 0x2e, 0x70, 0x61, 0x72, 0x74, 0x69, 0x63,
	0x69, 0x70, 0x61, 0x6e, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x76,
	0x33, 0x30, 0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x72, 0x65, 0x64, 0x4f, 0x75,
	0x74, 0x48, 0x00, 0x52, 0x0e, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x72, 0x65, 0x64,
	0x4f, 0x75, 0x74, 0x12, 0x68, 0x0a, 0x0e, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x72,
	0x65, 0x64, 0x5f, 0x69, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3f, 0x2e, 0x63, 0x6f,
	0x6d, 0x2e, 0x64, 0x69, 0x67, 0x69, 0x74, 0x61, 0x6c, 0x61, 0x73, 0x73, 0x65, 0x74, 0x2e, 0x63,
	0x61, 0x6e, 0x74, 0x6f, 0x6e, 0x2e, 0x70, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6e,
	0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x76, 0x33, 0x30, 0x2e, 0x54,
	0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x72, 0x65, 0x64, 0x49, 0x6e, 0x48, 0x00, 0x52, 0x0d,
	0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x72, 0x65, 0x64, 0x49, 0x6e, 0x12, 0x6b, 0x0a,
	0x0f, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x73, 0x5f, 0x61, 0x64, 0x64, 0x65, 0x64,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x40, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x64, 0x69, 0x67,
	0x69, 0x74, 0x61, 0x6c, 0x61, 0x73, 0x73, 0x65, 0x74, 0x2e, 0x63, 0x61, 0x6e, 0x74, 0x6f, 0x6e,
	0x2e, 0x70, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x76, 0x33, 0x30, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61,
	0x63, 0x74, 0x73, 0x41, 0x64, 0x64, 0x65, 0x64, 0x48, 0x00, 0x52, 0x0e, 0x63, 0x6f, 0x6e, 0x74,
	0x72, 0x61, 0x63, 0x74, 0x73, 0x41, 0x64, 0x64, 0x65, 0x64, 0x12, 0x6e, 0x0a, 0x10, 0x63, 0x6f,
	0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x73, 0x5f, 0x70, 0x75, 0x72, 0x67, 0x65, 0x64, 0x18, 0x08,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x41, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x64, 0x69, 0x67, 0x69, 0x74,
	0x61, 0x6c, 0x61, 0x73, 0x73, 0x65, 0x74, 0x2e, 0x63, 0x61, 0x6e, 0x74, 0x6f, 0x6e, 0x2e, 0x70,
	0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x63, 0x6f, 0x6c, 0x2e, 0x76, 0x33, 0x30, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74,
	0x73, 0x50, 0x75, 0x72, 0x67, 0x65, 0x64, 0x48, 0x00, 0x52, 0x0f, 0x63, 0x6f, 0x6e, 0x74, 0x72,
	0x61, 0x63, 0x74, 0x73, 0x50, 0x75, 0x72, 0x67, 0x65, 0x64, 0x12, 0x72, 0x0a, 0x0d, 0x70, 0x61,
	0x72, 0x74, 0x69, 0x65, 0x73, 0x5f, 0x61, 0x64, 0x64, 0x65, 0x64, 0x18, 0x09, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x4b, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x64, 0x69, 0x67, 0x69, 0x74, 0x61, 0x6c, 0x61,
	0x73, 0x73, 0x65, 0x74, 0x2e, 0x63, 0x61, 0x6e, 0x74, 0x6f, 0x6e, 0x2e, 0x70, 0x61, 0x72, 0x74,
	0x69, 0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c,
	0x2e, 0x76, 0x33, 0x30, 0x2e, 0x50, 0x61, 0x72, 0x74, 0x69, 0x65, 0x73, 0x41, 0x64, 0x64, 0x65,
	0x64, 0x54, 0x6f, 0x50, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x48, 0x00,
	0x52, 0x0c, 0x70, 0x61, 0x72, 0x74, 0x69, 0x65, 0x73, 0x41, 0x64, 0x64, 0x65, 0x64, 0x12, 0x7a,
	0x0a, 0x0f, 0x70, 0x61, 0x72, 0x74, 0x69, 0x65, 0x73, 0x5f, 0x72, 0x65, 0x6d, 0x6f, 0x76, 0x65,
	0x64, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x4f, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x64, 0x69,
	0x67, 0x69, 0x74, 0x61, 0x6c, 0x61, 0x73, 0x73, 0x65, 0x74, 0x2e, 0x63, 0x61, 0x6e, 0x74, 0x6f,
	0x6e, 0x2e, 0x70, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x76, 0x33, 0x30, 0x2e, 0x50, 0x61, 0x72, 0x74, 0x69,
	0x65, 0x73, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x64, 0x46, 0x72, 0x6f, 0x6d, 0x50, 0x61, 0x72,
	0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x48, 0x00, 0x52, 0x0e, 0x70, 0x61, 0x72, 0x74,
	0x69, 0x65, 0x73, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x64, 0x12, 0x4c, 0x0a, 0x04, 0x69, 0x6e,
	0x69, 0x74, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x36, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x64,
	0x69, 0x67, 0x69, 0x74, 0x61, 0x6c, 0x61, 0x73, 0x73, 0x65, 0x74, 0x2e, 0x63, 0x61, 0x6e, 0x74,
	0x6f, 0x6e, 0x2e, 0x70, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x76, 0x33, 0x30, 0x2e, 0x49, 0x6e, 0x69, 0x74,
	0x48, 0x00, 0x52, 0x04, 0x69, 0x6e, 0x69, 0x74, 0x42, 0x07, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x22, 0xbf, 0x01, 0x0a, 0x17, 0x50, 0x61, 0x72, 0x74, 0x79, 0x41, 0x64, 0x64, 0x65, 0x64,
	0x54, 0x6f, 0x50, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x12, 0x14, 0x0a,
	0x05, 0x70, 0x61, 0x72, 0x74, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x70, 0x61,
	0x72, 0x74, 0x79, 0x12, 0x21, 0x0a, 0x0c, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x5f, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x69, 0x73, 0x70, 0x6c,
	0x61, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x25, 0x0a, 0x0e, 0x70, 0x61, 0x72, 0x74, 0x69, 0x63,
	0x69, 0x70, 0x61, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d,
	0x70, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x1f, 0x0a,
	0x0b, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x0a, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x23,
	0x0a, 0x0d, 0x73, 0x75, 0x62, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x73, 0x75, 0x62, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f,
	0x6e, 0x49, 0x64, 0x22, 0xb1, 0x01, 0x0a, 0x17, 0x50, 0x61, 0x72, 0x74, 0x79, 0x41, 0x6c, 0x6c,
	0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x6a, 0x65, 0x63, 0x74, 0x65, 0x64, 0x12,
	0x23, 0x0a, 0x0d, 0x73, 0x75, 0x62, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x73, 0x75, 0x62, 0x6d, 0x69, 0x73, 0x73, 0x69,
	0x6f, 0x6e, 0x49, 0x64, 0x12, 0x25, 0x0a, 0x0e, 0x70, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70,
	0x61, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x70, 0x61,
	0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x72,
	0x65, 0x63, 0x6f, 0x72, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x0a, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x29, 0x0a, 0x10,
	0x72, 0x65, 0x6a, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x72, 0x65, 0x6a, 0x65, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x22, 0xc8, 0x06, 0x0a, 0x13, 0x54, 0x72, 0x61, 0x6e,
	0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x63, 0x63, 0x65, 0x70, 0x74, 0x65, 0x64, 0x12,
	0x69, 0x0a, 0x0f, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x6e,
	0x66, 0x6f, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x40, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x64,
	0x69, 0x67, 0x69, 0x74, 0x61, 0x6c, 0x61, 0x73, 0x73, 0x65, 0x74, 0x2e, 0x63, 0x61, 0x6e, 0x74,
	0x6f, 0x6e, 0x2e, 0x70, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x76, 0x33, 0x30, 0x2e, 0x43, 0x6f, 0x6d, 0x70,
	0x6c, 0x65, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0e, 0x63, 0x6f, 0x6d, 0x70,
	0x6c, 0x65, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x6c, 0x0a, 0x10, 0x74, 0x72,
	0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6d, 0x65, 0x74, 0x61, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x41, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x64, 0x69, 0x67, 0x69, 0x74,
	0x61, 0x6c, 0x61, 0x73, 0x73, 0x65, 0x74, 0x2e, 0x63, 0x61, 0x6e, 0x74, 0x6f, 0x6e, 0x2e, 0x70,
	0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x63, 0x6f, 0x6c, 0x2e, 0x76, 0x33, 0x30, 0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x4d, 0x65, 0x74, 0x61, 0x52, 0x0f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x65, 0x74, 0x61, 0x12, 0x20, 0x0a, 0x0b, 0x74, 0x72, 0x61, 0x6e,
	0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0b, 0x74,
	0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x25, 0x0a, 0x0e, 0x74, 0x72,
	0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0d, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49,
	0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x54, 0x69,
	0x6d, 0x65, 0x12, 0x71, 0x0a, 0x12, 0x64, 0x69, 0x76, 0x75, 0x6c, 0x67, 0x65, 0x64, 0x5f, 0x63,
	0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x42,
	0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x64, 0x69, 0x67, 0x69, 0x74, 0x61, 0x6c, 0x61, 0x73, 0x73, 0x65,
	0x74, 0x2e, 0x63, 0x61, 0x6e, 0x74, 0x6f, 0x6e, 0x2e, 0x70, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69,
	0x70, 0x61, 0x6e, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x76, 0x33,
	0x30, 0x2e, 0x44, 0x69, 0x76, 0x75, 0x6c, 0x67, 0x65, 0x64, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61,
	0x63, 0x74, 0x52, 0x11, 0x64, 0x69, 0x76, 0x75, 0x6c, 0x67, 0x65, 0x64, 0x43, 0x6f, 0x6e, 0x74,
	0x72, 0x61, 0x63, 0x74, 0x73, 0x12, 0x63, 0x0a, 0x0d, 0x62, 0x6c, 0x69, 0x6e, 0x64, 0x69, 0x6e,
	0x67, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3e, 0x2e, 0x63,
	0x6f, 0x6d, 0x2e, 0x64, 0x69, 0x67, 0x69, 0x74, 0x61, 0x6c, 0x61, 0x73, 0x73, 0x65, 0x74, 0x2e,
	0x63, 0x61, 0x6e, 0x74, 0x6f, 0x6e, 0x2e, 0x70, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61,
	0x6e, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x76, 0x33, 0x30, 0x2e,
	0x42, 0x6c, 0x69, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0c, 0x62, 0x6c,
	0x69, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x88, 0x01, 0x0a, 0x11, 0x63,
	0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x5f, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61,
	0x18, 0x08, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x5b, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x64, 0x69, 0x67,
	0x69, 0x74, 0x61, 0x6c, 0x61, 0x73, 0x73, 0x65, 0x74, 0x2e, 0x63, 0x61, 0x6e, 0x74, 0x6f, 0x6e,
	0x2e, 0x70, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x76, 0x33, 0x30, 0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x63, 0x63, 0x65, 0x70, 0x74, 0x65, 0x64, 0x2e, 0x43, 0x6f,
	0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x52, 0x10, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x4d, 0x65, 0x74,
	0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x29, 0x0a, 0x10, 0x68, 0x6f, 0x73, 0x74, 0x65, 0x64, 0x5f,
	0x77, 0x69, 0x74, 0x6e, 0x65, 0x73, 0x73, 0x65, 0x73, 0x18, 0x09, 0x20, 0x03, 0x28, 0x09, 0x52,
	0x0f, 0x68, 0x6f, 0x73, 0x74, 0x65, 0x64, 0x57, 0x69, 0x74, 0x6e, 0x65, 0x73, 0x73, 0x65, 0x73,
	0x12, 0x1b, 0x0a, 0x09, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x0a, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x49, 0x64, 0x1a, 0x43, 0x0a,
	0x15, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74,
	0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02,
	0x38, 0x01, 0x22, 0x87, 0x02, 0x0a, 0x0e, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x69, 0x6f,
	0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x15, 0x0a, 0x06, 0x61, 0x63, 0x74, 0x5f, 0x61, 0x73, 0x18,
	0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x05, 0x61, 0x63, 0x74, 0x41, 0x73, 0x12, 0x25, 0x0a, 0x0e,
	0x61, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x5f, 0x69,
	0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64,
	0x49, 0x64, 0x12, 0x73, 0x0a, 0x18, 0x6f, 0x70, 0x74, 0x5f, 0x64, 0x65, 0x64, 0x75, 0x70, 0x6c,
	0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x70, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x39, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x64, 0x69, 0x67, 0x69, 0x74,
	0x61, 0x6c, 0x61, 0x73, 0x73, 0x65, 0x74, 0x2e, 0x63, 0x61, 0x6e, 0x74, 0x6f, 0x6e, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x76, 0x33, 0x30, 0x2e, 0x44, 0x65, 0x64, 0x75,
	0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x52,
	0x16, 0x6f, 0x70, 0x74, 0x44, 0x65, 0x64, 0x75, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x50, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x12, 0x23, 0x0a, 0x0d, 0x73, 0x75, 0x62, 0x6d, 0x69,
	0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c,
	0x73, 0x75, 0x62, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x22, 0xe1, 0x03, 0x0a,
	0x0f, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x65, 0x74, 0x61,
	0x12, 0x1f, 0x0a, 0x0b, 0x6c, 0x65, 0x64, 0x67, 0x65, 0x72, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x6c, 0x65, 0x64, 0x67, 0x65, 0x72, 0x54, 0x69, 0x6d,
	0x65, 0x12, 0x3d, 0x0a, 0x0b, 0x77, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x5f, 0x69, 0x64,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x52, 0x0a, 0x77, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x49, 0x64,
	0x12, 0x27, 0x0a, 0x0f, 0x73, 0x75, 0x62, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x74,
	0x69, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0e, 0x73, 0x75, 0x62, 0x6d, 0x69,
	0x73, 0x73, 0x69, 0x6f, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x27, 0x0a, 0x0f, 0x73, 0x75, 0x62,
	0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x73, 0x65, 0x65, 0x64, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x0c, 0x52, 0x0e, 0x73, 0x75, 0x62, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x53, 0x65,
	0x65, 0x64, 0x12, 0x23, 0x0a, 0x0d, 0x75, 0x73, 0x65, 0x64, 0x5f, 0x70, 0x61, 0x63, 0x6b, 0x61,
	0x67, 0x65, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0c, 0x75, 0x73, 0x65, 0x64, 0x50,
	0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x73, 0x12, 0x59, 0x0a, 0x0a, 0x6e, 0x6f, 0x64, 0x65, 0x5f,
	0x73, 0x65, 0x65, 0x64, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x3a, 0x2e, 0x63, 0x6f,
	0x6d, 0x2e, 0x64, 0x69, 0x67, 0x69, 0x74, 0x61, 0x6c, 0x61, 0x73, 0x73, 0x65, 0x74, 0x2e, 0x63,
	0x61, 0x6e, 0x74, 0x6f, 0x6e, 0x2e, 0x70, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6e,
	0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x76, 0x33, 0x30, 0x2e, 0x4e,
	0x6f, 0x64, 0x65, 0x53, 0x65, 0x65, 0x64, 0x52, 0x09, 0x6e, 0x6f, 0x64, 0x65, 0x53, 0x65, 0x65,
	0x64, 0x73, 0x12, 0x6e, 0x0a, 0x0c, 0x62, 0x79, 0x5f, 0x6b, 0x65, 0x79, 0x5f, 0x6e, 0x6f, 0x64,
	0x65, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x4c, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x64,
	0x69, 0x67, 0x69, 0x74, 0x61, 0x6c, 0x61, 0x73, 0x73, 0x65, 0x74, 0x2e, 0x63, 0x61, 0x6e, 0x74,
	0x6f, 0x6e, 0x2e, 0x70, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x76, 0x33, 0x30, 0x2e, 0x54, 0x72, 0x61, 0x6e,
	0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x65, 0x74, 0x61, 0x2e, 0x42, 0x79, 0x4b, 0x65,
	0x79, 0x4e, 0x6f, 0x64, 0x65, 0x73, 0x52, 0x0a, 0x62, 0x79, 0x4b, 0x65, 0x79, 0x4e, 0x6f, 0x64,
	0x65, 0x73, 0x1a, 0x2c, 0x0a, 0x0a, 0x42, 0x79, 0x4b, 0x65, 0x79, 0x4e, 0x6f, 0x64, 0x65, 0x73,
	0x12, 0x1e, 0x0a, 0x0b, 0x62, 0x79, 0x5f, 0x6b, 0x65, 0x79, 0x5f, 0x6e, 0x6f, 0x64, 0x65, 0x18,
	0x01, 0x20, 0x03, 0x28, 0x05, 0x52, 0x09, 0x62, 0x79, 0x4b, 0x65, 0x79, 0x4e, 0x6f, 0x64, 0x65,
	0x22, 0x46, 0x0a, 0x08, 0x4e, 0x6f, 0x64, 0x65, 0x53, 0x65, 0x65, 0x64, 0x12, 0x1d, 0x0a, 0x0a,
	0x6e, 0x6f, 0x64, 0x65, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x09, 0x6e, 0x6f, 0x64, 0x65, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x1b, 0x0a, 0x09, 0x6e,
	0x6f, 0x64, 0x65, 0x5f, 0x73, 0x65, 0x65, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x08,
	0x6e, 0x6f, 0x64, 0x65, 0x53, 0x65, 0x65, 0x64, 0x22, 0x58, 0x0a, 0x10, 0x44, 0x69, 0x76, 0x75,
	0x6c, 0x67, 0x65, 0x64, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x12, 0x1f, 0x0a, 0x0b,
	0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0a, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x49, 0x64, 0x12, 0x23, 0x0a,
	0x0d, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x5f, 0x69, 0x6e, 0x73, 0x74, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0c, 0x52, 0x0c, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x49, 0x6e,
	0x73, 0x74, 0x22, 0xe2, 0x03, 0x0a, 0x0c, 0x42, 0x6c, 0x69, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x49,
	0x6e, 0x66, 0x6f, 0x12, 0x6e, 0x0a, 0x0a, 0x64, 0x69, 0x73, 0x63, 0x6c, 0x6f, 0x73, 0x75, 0x72,
	0x65, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x4e, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x64, 0x69,
	0x67, 0x69, 0x74, 0x61, 0x6c, 0x61, 0x73, 0x73, 0x65, 0x74, 0x2e, 0x63, 0x61, 0x6e, 0x74, 0x6f,
	0x6e, 0x2e, 0x70, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x76, 0x33, 0x30, 0x2e, 0x42, 0x6c, 0x69, 0x6e, 0x64,
	0x69, 0x6e, 0x67, 0x49, 0x6e, 0x66, 0x6f, 0x2e, 0x44, 0x69, 0x73, 0x63, 0x6c, 0x6f, 0x73, 0x75,
	0x72, 0x65, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0a, 0x64, 0x69, 0x73, 0x63, 0x6c, 0x6f, 0x73,
	0x75, 0x72, 0x65, 0x12, 0x6e, 0x0a, 0x0a, 0x64, 0x69, 0x76, 0x75, 0x6c, 0x67, 0x65, 0x6e, 0x63,
	0x65, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x4e, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x64, 0x69,
	0x67, 0x69, 0x74, 0x61, 0x6c, 0x61, 0x73, 0x73, 0x65, 0x74, 0x2e, 0x63, 0x61, 0x6e, 0x74, 0x6f,
	0x6e, 0x2e, 0x70, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x76, 0x33, 0x30, 0x2e, 0x42, 0x6c, 0x69, 0x6e, 0x64,
	0x69, 0x6e, 0x67, 0x49, 0x6e, 0x66, 0x6f, 0x2e, 0x44, 0x69, 0x76, 0x75, 0x6c, 0x67, 0x65, 0x6e,
	0x63, 0x65, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0a, 0x64, 0x69, 0x76, 0x75, 0x6c, 0x67, 0x65,
	0x6e, 0x63, 0x65, 0x1a, 0x78, 0x0a, 0x0f, 0x44, 0x69, 0x73, 0x63, 0x6c, 0x6f, 0x73, 0x75, 0x72,
	0x65, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x4f, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x39, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x64, 0x69,
	0x67, 0x69, 0x74, 0x61, 0x6c, 0x61, 0x73, 0x73, 0x65, 0x74, 0x2e, 0x63, 0x61, 0x6e, 0x74, 0x6f,
	0x6e, 0x2e, 0x70, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x76, 0x33, 0x30, 0x2e, 0x50, 0x61, 0x72, 0x74, 0x69,
	0x65, 0x73, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x78, 0x0a,
	0x0f, 0x44, 0x69, 0x76, 0x75, 0x6c, 0x67, 0x65, 0x6e, 0x63, 0x65, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b,
	0x65, 0x79, 0x12, 0x4f, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x39, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x64, 0x69, 0x67, 0x69, 0x74, 0x61, 0x6c, 0x61,
	0x73, 0x73, 0x65, 0x74, 0x2e, 0x63, 0x61, 0x6e, 0x74, 0x6f, 0x6e, 0x2e, 0x70, 0x61, 0x72, 0x74,
	0x69, 0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c,
	0x2e, 0x76, 0x33, 0x30, 0x2e, 0x50, 0x61, 0x72, 0x74, 0x69, 0x65, 0x73, 0x52, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x23, 0x0a, 0x07, 0x50, 0x61, 0x72, 0x74, 0x69,
	0x65, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x70, 0x61, 0x72, 0x74, 0x69, 0x65, 0x73, 0x18, 0x01, 0x20,
	0x03, 0x28, 0x09, 0x52, 0x07, 0x70, 0x61, 0x72, 0x74, 0x69, 0x65, 0x73, 0x22, 0xde, 0x03, 0x0a,
	0x0f, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x52, 0x65, 0x6a, 0x65, 0x63, 0x74, 0x65, 0x64,
	0x12, 0x69, 0x0a, 0x0f, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69,
	0x6e, 0x66, 0x6f, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x40, 0x2e, 0x63, 0x6f, 0x6d, 0x2e,
	0x64, 0x69, 0x67, 0x69, 0x74, 0x61, 0x6c, 0x61, 0x73, 0x73, 0x65, 0x74, 0x2e, 0x63, 0x61, 0x6e,
	0x74, 0x6f, 0x6e, 0x2e, 0x70, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x76, 0x33, 0x30, 0x2e, 0x43, 0x6f, 0x6d,
	0x70, 0x6c, 0x65, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0e, 0x63, 0x6f, 0x6d,
	0x70, 0x6c, 0x65, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x1f, 0x0a, 0x0b, 0x72,
	0x65, 0x63, 0x6f, 0x72, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x0a, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x88, 0x01, 0x0a,
	0x10, 0x72, 0x65, 0x6a, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x72, 0x65, 0x61, 0x73, 0x6f,
	0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x5d, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x64, 0x69,
	0x67, 0x69, 0x74, 0x61, 0x6c, 0x61, 0x73, 0x73, 0x65, 0x74, 0x2e, 0x63, 0x61, 0x6e, 0x74, 0x6f,
	0x6e, 0x2e, 0x70, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x76, 0x33, 0x30, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x61,
	0x6e, 0x64, 0x52, 0x65, 0x6a, 0x65, 0x63, 0x74, 0x65, 0x64, 0x2e, 0x47, 0x72, 0x70, 0x63, 0x52,
	0x65, 0x6a, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x54, 0x65,
	0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x52, 0x0f, 0x72, 0x65, 0x6a, 0x65, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x12, 0x60, 0x0a, 0x0c, 0x63, 0x6f, 0x6d, 0x6d, 0x61,
	0x6e, 0x64, 0x5f, 0x6b, 0x69, 0x6e, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x3d, 0x2e,
	0x63, 0x6f, 0x6d, 0x2e, 0x64, 0x69, 0x67, 0x69, 0x74, 0x61, 0x6c, 0x61, 0x73, 0x73, 0x65, 0x74,
	0x2e, 0x63, 0x61, 0x6e, 0x74, 0x6f, 0x6e, 0x2e, 0x70, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70,
	0x61, 0x6e, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x76, 0x33, 0x30,
	0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x4b, 0x69, 0x6e, 0x64, 0x52, 0x0b, 0x63, 0x6f,
	0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x4b, 0x69, 0x6e, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x64, 0x6f, 0x6d,
	0x61, 0x69, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x64, 0x6f,
	0x6d, 0x61, 0x69, 0x6e, 0x49, 0x64, 0x1a, 0x35, 0x0a, 0x1b, 0x47, 0x72, 0x70, 0x63, 0x52, 0x65,
	0x6a, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x54, 0x65, 0x6d,
	0x70, 0x6c, 0x61, 0x74, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0xcd, 0x05,
	0x0a, 0x0e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x72, 0x65, 0x64, 0x4f, 0x75, 0x74,
	0x12, 0x1b, 0x0a, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x49, 0x64, 0x12, 0x69, 0x0a,
	0x0f, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x6e, 0x66, 0x6f,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x40, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x64, 0x69, 0x67,
	0x69, 0x74, 0x61, 0x6c, 0x61, 0x73, 0x73, 0x65, 0x74, 0x2e, 0x63, 0x61, 0x6e, 0x74, 0x6f, 0x6e,
	0x2e, 0x70, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x76, 0x33, 0x30, 0x2e, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x65,
	0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0e, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x65,
	0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x1c, 0x0a, 0x09, 0x73, 0x75, 0x62, 0x6d,
	0x69, 0x74, 0x74, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x75, 0x62,
	0x6d, 0x69, 0x74, 0x74, 0x65, 0x72, 0x12, 0x1f, 0x0a, 0x0b, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64,
	0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x72, 0x65, 0x63,
	0x6f, 0x72, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x63, 0x6f, 0x6e, 0x74, 0x72,
	0x61, 0x63, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x63, 0x6f,
	0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x49, 0x64, 0x12, 0x33, 0x0a, 0x15, 0x63, 0x6f, 0x6e, 0x74,
	0x72, 0x61, 0x63, 0x74, 0x5f, 0x73, 0x74, 0x61, 0x6b, 0x65, 0x68, 0x6f, 0x6c, 0x64, 0x65, 0x72,
	0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x09, 0x52, 0x14, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63,
	0x74, 0x53, 0x74, 0x61, 0x6b, 0x65, 0x68, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x73, 0x12, 0x23, 0x0a,
	0x0d, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x44, 0x6f, 0x6d, 0x61,
	0x69, 0x6e, 0x12, 0x23, 0x0a, 0x0d, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x5f, 0x64, 0x6f, 0x6d,
	0x61, 0x69, 0x6e, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x74, 0x61, 0x72, 0x67, 0x65,
	0x74, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x12, 0x53, 0x0a, 0x17, 0x74, 0x72, 0x61, 0x6e, 0x73,
	0x66, 0x65, 0x72, 0x5f, 0x69, 0x6e, 0x5f, 0x65, 0x78, 0x63, 0x6c, 0x75, 0x73, 0x69, 0x76, 0x69,
	0x74, 0x79, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x49, 0x6e, 0x74, 0x36, 0x34,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x15, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x49,
	0x6e, 0x45, 0x78, 0x63, 0x6c, 0x75, 0x73, 0x69, 0x76, 0x69, 0x74, 0x79, 0x12, 0x1f, 0x0a, 0x0b,
	0x77, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x5f, 0x69, 0x64, 0x18, 0x0a, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0a, 0x77, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x49, 0x64, 0x12, 0x1f, 0x0a,
	0x0b, 0x74, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x0b, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0a, 0x74, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x49, 0x64, 0x12, 0x3e,
	0x0a, 0x1b, 0x69, 0x73, 0x5f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x72, 0x69, 0x6e,
	0x67, 0x5f, 0x70, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x18, 0x0c, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x19, 0x69, 0x73, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x72,
	0x69, 0x6e, 0x67, 0x50, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x12, 0x2f,
	0x0a, 0x13, 0x68, 0x6f, 0x73, 0x74, 0x65, 0x64, 0x5f, 0x73, 0x74, 0x61, 0x6b, 0x65, 0x68, 0x6f,
	0x6c, 0x64, 0x65, 0x72, 0x73, 0x18, 0x0d, 0x20, 0x03, 0x28, 0x09, 0x52, 0x12, 0x68, 0x6f, 0x73,
	0x74, 0x65, 0x64, 0x53, 0x74, 0x61, 0x6b, 0x65, 0x68, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x73, 0x12,
	0x29, 0x0a, 0x10, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x5f, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x65, 0x72, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0f, 0x74, 0x72, 0x61, 0x6e, 0x73,
	0x66, 0x65, 0x72, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x12, 0x21, 0x0a, 0x0c, 0x70, 0x61,
	0x63, 0x6b, 0x61, 0x67, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0b, 0x70, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0xc6, 0x05,
	0x0a, 0x0d, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x72, 0x65, 0x64, 0x49, 0x6e, 0x12,
	0x1b, 0x0a, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x08, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x49, 0x64, 0x12, 0x69, 0x0a, 0x0f,
	0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x40, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x64, 0x69, 0x67, 0x69,
	0x74, 0x61, 0x6c, 0x61, 0x73, 0x73, 0x65, 0x74, 0x2e, 0x63, 0x61, 0x6e, 0x74, 0x6f, 0x6e, 0x2e,
	0x70, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x76, 0x33, 0x30, 0x2e, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74,
	0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0e, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74,
	0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x1c, 0x0a, 0x09, 0x73, 0x75, 0x62, 0x6d, 0x69,
	0x74, 0x74, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x75, 0x62, 0x6d,
	0x69, 0x74, 0x74, 0x65, 0x72, 0x12, 0x1f, 0x0a, 0x0b, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x5f,
	0x74, 0x69, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x72, 0x65, 0x63, 0x6f,
	0x72, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x2c, 0x0a, 0x12, 0x6c, 0x65, 0x64, 0x67, 0x65, 0x72,
	0x5f, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x10, 0x6c, 0x65, 0x64, 0x67, 0x65, 0x72, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x54, 0x69, 0x6d, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x5f, 0x6e,
	0x6f, 0x64, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x4e, 0x6f, 0x64, 0x65, 0x12, 0x36, 0x0a, 0x17, 0x63, 0x72, 0x65, 0x61, 0x74, 0x69, 0x6e,
	0x67, 0x5f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x15, 0x63, 0x72, 0x65, 0x61, 0x74, 0x69, 0x6e, 0x67,
	0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x2b, 0x0a,
	0x11, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x5f, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61,
	0x74, 0x61, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x10, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61,
	0x63, 0x74, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x58, 0x0a, 0x0f, 0x74, 0x72,
	0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x5f, 0x6f, 0x75, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x09, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x30, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x64, 0x69, 0x67, 0x69, 0x74, 0x61,
	0x6c, 0x61, 0x73, 0x73, 0x65, 0x74, 0x2e, 0x63, 0x61, 0x6e, 0x74, 0x6f, 0x6e, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x76, 0x33, 0x30, 0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73,
	0x66, 0x65, 0x72, 0x49, 0x64, 0x52, 0x0d, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x4f,
	0x75, 0x74, 0x49, 0x64, 0x12, 0x23, 0x0a, 0x0d, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x5f, 0x64,
	0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x74, 0x61, 0x72,
	0x67, 0x65, 0x74, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x12, 0x1f, 0x0a, 0x0b, 0x77, 0x6f, 0x72,
	0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x5f, 0x69, 0x64, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a,
	0x77, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x49, 0x64, 0x12, 0x3e, 0x0a, 0x1b, 0x69, 0x73,
	0x5f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x72, 0x69, 0x6e, 0x67, 0x5f, 0x70, 0x61,
	0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x19, 0x69, 0x73, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x72, 0x69, 0x6e, 0x67, 0x50,
	0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x12, 0x2f, 0x0a, 0x13, 0x68, 0x6f,
	0x73, 0x74, 0x65, 0x64, 0x5f, 0x73, 0x74, 0x61, 0x6b, 0x65, 0x68, 0x6f, 0x6c, 0x64, 0x65, 0x72,
	0x73, 0x18, 0x0d, 0x20, 0x03, 0x28, 0x09, 0x52, 0x12, 0x68, 0x6f, 0x73, 0x74, 0x65, 0x64, 0x53,
	0x74, 0x61, 0x6b, 0x65, 0x68, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x73, 0x12, 0x29, 0x0a, 0x10, 0x74,
	0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x18,
	0x0e, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x43,
	0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x22, 0xcb, 0x03, 0x0a, 0x0e, 0x43, 0x6f, 0x6e, 0x74, 0x72,
	0x61, 0x63, 0x74, 0x73, 0x41, 0x64, 0x64, 0x65, 0x64, 0x12, 0x25, 0x0a, 0x0e, 0x74, 0x72, 0x61,
	0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0d, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64,
	0x12, 0x1c, 0x0a, 0x09, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x73, 0x18, 0x02, 0x20,
	0x03, 0x28, 0x0c, 0x52, 0x09, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x73, 0x12, 0x1b,
	0x0a, 0x09, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x08, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x49, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x6c,
	0x65, 0x64, 0x67, 0x65, 0x72, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x0a, 0x6c, 0x65, 0x64, 0x67, 0x65, 0x72, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x1f, 0x0a, 0x0b,
	0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x0a, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x29, 0x0a,
	0x10, 0x68, 0x6f, 0x73, 0x74, 0x65, 0x64, 0x5f, 0x77, 0x69, 0x74, 0x6e, 0x65, 0x73, 0x73, 0x65,
	0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0f, 0x68, 0x6f, 0x73, 0x74, 0x65, 0x64, 0x57,
	0x69, 0x74, 0x6e, 0x65, 0x73, 0x73, 0x65, 0x73, 0x12, 0x83, 0x01, 0x0a, 0x11, 0x63, 0x6f, 0x6e,
	0x74, 0x72, 0x61, 0x63, 0x74, 0x5f, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x18, 0x07,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x56, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x64, 0x69, 0x67, 0x69, 0x74,
	0x61, 0x6c, 0x61, 0x73, 0x73, 0x65, 0x74, 0x2e, 0x63, 0x61, 0x6e, 0x74, 0x6f, 0x6e, 0x2e, 0x70,
	0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x63, 0x6f, 0x6c, 0x2e, 0x76, 0x33, 0x30, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74,
	0x73, 0x41, 0x64, 0x64, 0x65, 0x64, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x4d,
	0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x10, 0x63, 0x6f,
	0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x1f,
	0x0a, 0x0b, 0x77, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x5f, 0x69, 0x64, 0x18, 0x08, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0a, 0x77, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x49, 0x64, 0x1a,
	0x43, 0x0a, 0x15, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x4d, 0x65, 0x74, 0x61, 0x64,
	0x61, 0x74, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x3a, 0x02, 0x38, 0x01, 0x22, 0xbf, 0x01, 0x0a, 0x0f, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63,
	0x74, 0x73, 0x50, 0x75, 0x72, 0x67, 0x65, 0x64, 0x12, 0x25, 0x0a, 0x0e, 0x74, 0x72, 0x61, 0x6e,
	0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0d, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12,
	0x1c, 0x0a, 0x09, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x73, 0x18, 0x02, 0x20, 0x03,
	0x28, 0x0c, 0x52, 0x09, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x73, 0x12, 0x1b, 0x0a,
	0x09, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x49, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x72, 0x65,
	0x63, 0x6f, 0x72, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x0a, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x29, 0x0a, 0x10, 0x68,
	0x6f, 0x73, 0x74, 0x65, 0x64, 0x5f, 0x77, 0x69, 0x74, 0x6e, 0x65, 0x73, 0x73, 0x65, 0x73, 0x18,
	0x05, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0f, 0x68, 0x6f, 0x73, 0x74, 0x65, 0x64, 0x57, 0x69, 0x74,
	0x6e, 0x65, 0x73, 0x73, 0x65, 0x73, 0x22, 0xa4, 0x01, 0x0a, 0x19, 0x50, 0x61, 0x72, 0x74, 0x69,
	0x65, 0x73, 0x41, 0x64, 0x64, 0x65, 0x64, 0x54, 0x6f, 0x50, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69,
	0x70, 0x61, 0x6e, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x70, 0x61, 0x72, 0x74, 0x69, 0x65, 0x73, 0x18,
	0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x07, 0x70, 0x61, 0x72, 0x74, 0x69, 0x65, 0x73, 0x12, 0x25,
	0x0a, 0x0e, 0x70, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x5f, 0x69, 0x64,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x70, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70,
	0x61, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x5f,
	0x74, 0x69, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x72, 0x65, 0x63, 0x6f,
	0x72, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x25, 0x0a, 0x0e, 0x65, 0x66, 0x66, 0x65, 0x63, 0x74,
	0x69, 0x76, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0d,
	0x65, 0x66, 0x66, 0x65, 0x63, 0x74, 0x69, 0x76, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x22, 0xa8, 0x01,
	0x0a, 0x1d, 0x50, 0x61, 0x72, 0x74, 0x69, 0x65, 0x73, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x64,
	0x46, 0x72, 0x6f, 0x6d, 0x50, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x12,
	0x18, 0x0a, 0x07, 0x70, 0x61, 0x72, 0x74, 0x69, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09,
	0x52, 0x07, 0x70, 0x61, 0x72, 0x74, 0x69, 0x65, 0x73, 0x12, 0x25, 0x0a, 0x0e, 0x70, 0x61, 0x72,
	0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0d, 0x70, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x49, 0x64,
	0x12, 0x1f, 0x0a, 0x0b, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x54, 0x69, 0x6d,
	0x65, 0x12, 0x25, 0x0a, 0x0e, 0x65, 0x66, 0x66, 0x65, 0x63, 0x74, 0x69, 0x76, 0x65, 0x5f, 0x74,
	0x69, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0d, 0x65, 0x66, 0x66, 0x65, 0x63,
	0x74, 0x69, 0x76, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x22, 0x27, 0x0a, 0x04, 0x49, 0x6e, 0x69, 0x74,
	0x12, 0x1f, 0x0a, 0x0b, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x54, 0x69, 0x6d,
	0x65, 0x2a, 0x74, 0x0a, 0x0b, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x4b, 0x69, 0x6e, 0x64,
	0x12, 0x28, 0x0a, 0x24, 0x43, 0x4f, 0x4d, 0x4d, 0x41, 0x4e, 0x44, 0x5f, 0x4b, 0x49, 0x4e, 0x44,
	0x5f, 0x54, 0x52, 0x41, 0x4e, 0x53, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x55, 0x4e, 0x53,
	0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x1d, 0x0a, 0x19, 0x43, 0x4f,
	0x4d, 0x4d, 0x41, 0x4e, 0x44, 0x5f, 0x4b, 0x49, 0x4e, 0x44, 0x5f, 0x54, 0x52, 0x41, 0x4e, 0x53,
	0x46, 0x45, 0x52, 0x5f, 0x4f, 0x55, 0x54, 0x10, 0x01, 0x12, 0x1c, 0x0a, 0x18, 0x43, 0x4f, 0x4d,
	0x4d, 0x41, 0x4e, 0x44, 0x5f, 0x4b, 0x49, 0x4e, 0x44, 0x5f, 0x54, 0x52, 0x41, 0x4e, 0x53, 0x46,
	0x45, 0x52, 0x5f, 0x49, 0x4e, 0x10, 0x02, 0x42, 0x61, 0x5a, 0x5f, 0x67, 0x69, 0x74, 0x68, 0x75,
	0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x64, 0x69, 0x67, 0x69, 0x74, 0x61, 0x6c, 0x2d, 0x61, 0x73,
	0x73, 0x65, 0x74, 0x2f, 0x64, 0x61, 0x7a, 0x6c, 0x2d, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2f,
	0x76, 0x38, 0x2f, 0x67, 0x6f, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x63, 0x6f, 0x6d, 0x2f, 0x64, 0x69,
	0x67, 0x69, 0x74, 0x61, 0x6c, 0x61, 0x73, 0x73, 0x65, 0x74, 0x2f, 0x63, 0x61, 0x6e, 0x74, 0x6f,
	0x6e, 0x2f, 0x70, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x2f, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2f, 0x76, 0x33, 0x30, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x33,
}

var (
	file_com_digitalasset_canton_participant_protocol_v30_ledger_sync_event_proto_rawDescOnce sync.Once
	file_com_digitalasset_canton_participant_protocol_v30_ledger_sync_event_proto_rawDescData = file_com_digitalasset_canton_participant_protocol_v30_ledger_sync_event_proto_rawDesc
)

func file_com_digitalasset_canton_participant_protocol_v30_ledger_sync_event_proto_rawDescGZIP() []byte {
	file_com_digitalasset_canton_participant_protocol_v30_ledger_sync_event_proto_rawDescOnce.Do(func() {
		file_com_digitalasset_canton_participant_protocol_v30_ledger_sync_event_proto_rawDescData = protoimpl.X.CompressGZIP(file_com_digitalasset_canton_participant_protocol_v30_ledger_sync_event_proto_rawDescData)
	})
	return file_com_digitalasset_canton_participant_protocol_v30_ledger_sync_event_proto_rawDescData
}

var file_com_digitalasset_canton_participant_protocol_v30_ledger_sync_event_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_com_digitalasset_canton_participant_protocol_v30_ledger_sync_event_proto_msgTypes = make([]protoimpl.MessageInfo, 24)
var file_com_digitalasset_canton_participant_protocol_v30_ledger_sync_event_proto_goTypes = []any{
	(CommandKind)(0),                      // 0: com.digitalasset.canton.participant.protocol.v30.CommandKind
	(*LedgerSyncEvent)(nil),               // 1: com.digitalasset.canton.participant.protocol.v30.LedgerSyncEvent
	(*PartyAddedToParticipant)(nil),       // 2: com.digitalasset.canton.participant.protocol.v30.PartyAddedToParticipant
	(*PartyAllocationRejected)(nil),       // 3: com.digitalasset.canton.participant.protocol.v30.PartyAllocationRejected
	(*TransactionAccepted)(nil),           // 4: com.digitalasset.canton.participant.protocol.v30.TransactionAccepted
	(*CompletionInfo)(nil),                // 5: com.digitalasset.canton.participant.protocol.v30.CompletionInfo
	(*TransactionMeta)(nil),               // 6: com.digitalasset.canton.participant.protocol.v30.TransactionMeta
	(*NodeSeed)(nil),                      // 7: com.digitalasset.canton.participant.protocol.v30.NodeSeed
	(*DivulgedContract)(nil),              // 8: com.digitalasset.canton.participant.protocol.v30.DivulgedContract
	(*BlindingInfo)(nil),                  // 9: com.digitalasset.canton.participant.protocol.v30.BlindingInfo
	(*Parties)(nil),                       // 10: com.digitalasset.canton.participant.protocol.v30.Parties
	(*CommandRejected)(nil),               // 11: com.digitalasset.canton.participant.protocol.v30.CommandRejected
	(*TransferredOut)(nil),                // 12: com.digitalasset.canton.participant.protocol.v30.TransferredOut
	(*TransferredIn)(nil),                 // 13: com.digitalasset.canton.participant.protocol.v30.TransferredIn
	(*ContractsAdded)(nil),                // 14: com.digitalasset.canton.participant.protocol.v30.ContractsAdded
	(*ContractsPurged)(nil),               // 15: com.digitalasset.canton.participant.protocol.v30.ContractsPurged
	(*PartiesAddedToParticipant)(nil),     // 16: com.digitalasset.canton.participant.protocol.v30.PartiesAddedToParticipant
	(*PartiesRemovedFromParticipant)(nil), // 17: com.digitalasset.canton.participant.protocol.v30.PartiesRemovedFromParticipant
	(*Init)(nil),                          // 18: com.digitalasset.canton.participant.protocol.v30.Init
	nil,                                   // 19: com.digitalasset.canton.participant.protocol.v30.TransactionAccepted.ContractMetadataEntry
	(*TransactionMeta_ByKeyNodes)(nil),    // 20: com.digitalasset.canton.participant.protocol.v30.TransactionMeta.ByKeyNodes
	nil,                                   // 21: com.digitalasset.canton.participant.protocol.v30.BlindingInfo.DisclosureEntry
	nil,                                   // 22: com.digitalasset.canton.participant.protocol.v30.BlindingInfo.DivulgenceEntry
	(*CommandRejected_GrpcRejectionReasonTemplate)(nil), // 23: com.digitalasset.canton.participant.protocol.v30.CommandRejected.GrpcRejectionReasonTemplate
	nil,                             // 24: com.digitalasset.canton.participant.protocol.v30.ContractsAdded.ContractMetadataEntry
	(*v30.DeduplicationPeriod)(nil), // 25: com.digitalasset.canton.protocol.v30.DeduplicationPeriod
	(*wrapperspb.StringValue)(nil),  // 26: google.protobuf.StringValue
	(*wrapperspb.Int64Value)(nil),   // 27: google.protobuf.Int64Value
	(*v30.TransferId)(nil),          // 28: com.digitalasset.canton.protocol.v30.TransferId
}
var file_com_digitalasset_canton_participant_protocol_v30_ledger_sync_event_proto_depIdxs = []int32{
	2,  // 0: com.digitalasset.canton.participant.protocol.v30.LedgerSyncEvent.party_added_to_participant:type_name -> com.digitalasset.canton.participant.protocol.v30.PartyAddedToParticipant
	4,  // 1: com.digitalasset.canton.participant.protocol.v30.LedgerSyncEvent.transaction_accepted:type_name -> com.digitalasset.canton.participant.protocol.v30.TransactionAccepted
	11, // 2: com.digitalasset.canton.participant.protocol.v30.LedgerSyncEvent.command_rejected:type_name -> com.digitalasset.canton.participant.protocol.v30.CommandRejected
	3,  // 3: com.digitalasset.canton.participant.protocol.v30.LedgerSyncEvent.party_allocation_rejected:type_name -> com.digitalasset.canton.participant.protocol.v30.PartyAllocationRejected
	12, // 4: com.digitalasset.canton.participant.protocol.v30.LedgerSyncEvent.transferred_out:type_name -> com.digitalasset.canton.participant.protocol.v30.TransferredOut
	13, // 5: com.digitalasset.canton.participant.protocol.v30.LedgerSyncEvent.transferred_in:type_name -> com.digitalasset.canton.participant.protocol.v30.TransferredIn
	14, // 6: com.digitalasset.canton.participant.protocol.v30.LedgerSyncEvent.contracts_added:type_name -> com.digitalasset.canton.participant.protocol.v30.ContractsAdded
	15, // 7: com.digitalasset.canton.participant.protocol.v30.LedgerSyncEvent.contracts_purged:type_name -> com.digitalasset.canton.participant.protocol.v30.ContractsPurged
	16, // 8: com.digitalasset.canton.participant.protocol.v30.LedgerSyncEvent.parties_added:type_name -> com.digitalasset.canton.participant.protocol.v30.PartiesAddedToParticipant
	17, // 9: com.digitalasset.canton.participant.protocol.v30.LedgerSyncEvent.parties_removed:type_name -> com.digitalasset.canton.participant.protocol.v30.PartiesRemovedFromParticipant
	18, // 10: com.digitalasset.canton.participant.protocol.v30.LedgerSyncEvent.init:type_name -> com.digitalasset.canton.participant.protocol.v30.Init
	5,  // 11: com.digitalasset.canton.participant.protocol.v30.TransactionAccepted.completion_info:type_name -> com.digitalasset.canton.participant.protocol.v30.CompletionInfo
	6,  // 12: com.digitalasset.canton.participant.protocol.v30.TransactionAccepted.transaction_meta:type_name -> com.digitalasset.canton.participant.protocol.v30.TransactionMeta
	8,  // 13: com.digitalasset.canton.participant.protocol.v30.TransactionAccepted.divulged_contracts:type_name -> com.digitalasset.canton.participant.protocol.v30.DivulgedContract
	9,  // 14: com.digitalasset.canton.participant.protocol.v30.TransactionAccepted.blinding_info:type_name -> com.digitalasset.canton.participant.protocol.v30.BlindingInfo
	19, // 15: com.digitalasset.canton.participant.protocol.v30.TransactionAccepted.contract_metadata:type_name -> com.digitalasset.canton.participant.protocol.v30.TransactionAccepted.ContractMetadataEntry
	25, // 16: com.digitalasset.canton.participant.protocol.v30.CompletionInfo.opt_deduplication_period:type_name -> com.digitalasset.canton.protocol.v30.DeduplicationPeriod
	26, // 17: com.digitalasset.canton.participant.protocol.v30.TransactionMeta.workflow_id:type_name -> google.protobuf.StringValue
	7,  // 18: com.digitalasset.canton.participant.protocol.v30.TransactionMeta.node_seeds:type_name -> com.digitalasset.canton.participant.protocol.v30.NodeSeed
	20, // 19: com.digitalasset.canton.participant.protocol.v30.TransactionMeta.by_key_nodes:type_name -> com.digitalasset.canton.participant.protocol.v30.TransactionMeta.ByKeyNodes
	21, // 20: com.digitalasset.canton.participant.protocol.v30.BlindingInfo.disclosure:type_name -> com.digitalasset.canton.participant.protocol.v30.BlindingInfo.DisclosureEntry
	22, // 21: com.digitalasset.canton.participant.protocol.v30.BlindingInfo.divulgence:type_name -> com.digitalasset.canton.participant.protocol.v30.BlindingInfo.DivulgenceEntry
	5,  // 22: com.digitalasset.canton.participant.protocol.v30.CommandRejected.completion_info:type_name -> com.digitalasset.canton.participant.protocol.v30.CompletionInfo
	23, // 23: com.digitalasset.canton.participant.protocol.v30.CommandRejected.rejection_reason:type_name -> com.digitalasset.canton.participant.protocol.v30.CommandRejected.GrpcRejectionReasonTemplate
	0,  // 24: com.digitalasset.canton.participant.protocol.v30.CommandRejected.command_kind:type_name -> com.digitalasset.canton.participant.protocol.v30.CommandKind
	5,  // 25: com.digitalasset.canton.participant.protocol.v30.TransferredOut.completion_info:type_name -> com.digitalasset.canton.participant.protocol.v30.CompletionInfo
	27, // 26: com.digitalasset.canton.participant.protocol.v30.TransferredOut.transfer_in_exclusivity:type_name -> google.protobuf.Int64Value
	5,  // 27: com.digitalasset.canton.participant.protocol.v30.TransferredIn.completion_info:type_name -> com.digitalasset.canton.participant.protocol.v30.CompletionInfo
	28, // 28: com.digitalasset.canton.participant.protocol.v30.TransferredIn.transfer_out_id:type_name -> com.digitalasset.canton.protocol.v30.TransferId
	24, // 29: com.digitalasset.canton.participant.protocol.v30.ContractsAdded.contract_metadata:type_name -> com.digitalasset.canton.participant.protocol.v30.ContractsAdded.ContractMetadataEntry
	10, // 30: com.digitalasset.canton.participant.protocol.v30.BlindingInfo.DisclosureEntry.value:type_name -> com.digitalasset.canton.participant.protocol.v30.Parties
	10, // 31: com.digitalasset.canton.participant.protocol.v30.BlindingInfo.DivulgenceEntry.value:type_name -> com.digitalasset.canton.participant.protocol.v30.Parties
	32, // [32:32] is the sub-list for method output_type
	32, // [32:32] is the sub-list for method input_type
	32, // [32:32] is the sub-list for extension type_name
	32, // [32:32] is the sub-list for extension extendee
	0,  // [0:32] is the sub-list for field type_name
}

func init() { file_com_digitalasset_canton_participant_protocol_v30_ledger_sync_event_proto_init() }
func file_com_digitalasset_canton_participant_protocol_v30_ledger_sync_event_proto_init() {
	if File_com_digitalasset_canton_participant_protocol_v30_ledger_sync_event_proto != nil {
		return
	}
	file_com_digitalasset_canton_participant_protocol_v30_ledger_sync_event_proto_msgTypes[0].OneofWrappers = []any{
		(*LedgerSyncEvent_PartyAddedToParticipant)(nil),
		(*LedgerSyncEvent_TransactionAccepted)(nil),
		(*LedgerSyncEvent_CommandRejected)(nil),
		(*LedgerSyncEvent_PartyAllocationRejected)(nil),
		(*LedgerSyncEvent_TransferredOut)(nil),
		(*LedgerSyncEvent_TransferredIn)(nil),
		(*LedgerSyncEvent_ContractsAdded)(nil),
		(*LedgerSyncEvent_ContractsPurged)(nil),
		(*LedgerSyncEvent_PartiesAdded)(nil),
		(*LedgerSyncEvent_PartiesRemoved)(nil),
		(*LedgerSyncEvent_Init)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_com_digitalasset_canton_participant_protocol_v30_ledger_sync_event_proto_rawDesc,
			NumEnums:      1,
			NumMessages:   24,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_com_digitalasset_canton_participant_protocol_v30_ledger_sync_event_proto_goTypes,
		DependencyIndexes: file_com_digitalasset_canton_participant_protocol_v30_ledger_sync_event_proto_depIdxs,
		EnumInfos:         file_com_digitalasset_canton_participant_protocol_v30_ledger_sync_event_proto_enumTypes,
		MessageInfos:      file_com_digitalasset_canton_participant_protocol_v30_ledger_sync_event_proto_msgTypes,
	}.Build()
	File_com_digitalasset_canton_participant_protocol_v30_ledger_sync_event_proto = out.File
	file_com_digitalasset_canton_participant_protocol_v30_ledger_sync_event_proto_rawDesc = nil
	file_com_digitalasset_canton_participant_protocol_v30_ledger_sync_event_proto_goTypes = nil
	file_com_digitalasset_canton_participant_protocol_v30_ledger_sync_event_proto_depIdxs = nil
}
