// Copyright (c) 2017-2025 Digital Asset (Switzerland) GmbH and/or its affiliates. All rights reserved.
// SPDX-License-Identifier: Apache-2.0
// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.35.2
// 	protoc        v5.27.2
// source: com/daml/daml_lf_2_1/daml_lf2.proto

package daml_lf_2_1

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type BuiltinType int32

const (
	BuiltinType_UNIT          BuiltinType = 0
	BuiltinType_BOOL          BuiltinType = 1
	BuiltinType_INT64         BuiltinType = 2
	BuiltinType_DATE          BuiltinType = 3
	BuiltinType_TIMESTAMP     BuiltinType = 4
	BuiltinType_NUMERIC       BuiltinType = 5
	BuiltinType_PARTY         BuiltinType = 6
	BuiltinType_TEXT          BuiltinType = 7
	BuiltinType_CONTRACT_ID   BuiltinType = 8
	BuiltinType_OPTIONAL      BuiltinType = 9
	BuiltinType_LIST          BuiltinType = 10
	BuiltinType_GENMAP        BuiltinType = 11
	BuiltinType_ANY           BuiltinType = 13
	BuiltinType_ANY_EXCEPTION BuiltinType = 14
	BuiltinType_TYPE_REP      BuiltinType = 15
	BuiltinType_ARROW         BuiltinType = 16
	BuiltinType_UPDATE        BuiltinType = 17
	BuiltinType_TEXTMAP       BuiltinType = 1001
	BuiltinType_BIGNUMERIC    BuiltinType = 1002
	BuiltinType_ROUNDING_MODE BuiltinType = 1003
	BuiltinType_SCENARIO      BuiltinType = 1004
)

// Enum value maps for BuiltinType.
var (
	BuiltinType_name = map[int32]string{
		0:    "UNIT",
		1:    "BOOL",
		2:    "INT64",
		3:    "DATE",
		4:    "TIMESTAMP",
		5:    "NUMERIC",
		6:    "PARTY",
		7:    "TEXT",
		8:    "CONTRACT_ID",
		9:    "OPTIONAL",
		10:   "LIST",
		11:   "GENMAP",
		13:   "ANY",
		14:   "ANY_EXCEPTION",
		15:   "TYPE_REP",
		16:   "ARROW",
		17:   "UPDATE",
		1001: "TEXTMAP",
		1002: "BIGNUMERIC",
		1003: "ROUNDING_MODE",
		1004: "SCENARIO",
	}
	BuiltinType_value = map[string]int32{
		"UNIT":          0,
		"BOOL":          1,
		"INT64":         2,
		"DATE":          3,
		"TIMESTAMP":     4,
		"NUMERIC":       5,
		"PARTY":         6,
		"TEXT":          7,
		"CONTRACT_ID":   8,
		"OPTIONAL":      9,
		"LIST":          10,
		"GENMAP":        11,
		"ANY":           13,
		"ANY_EXCEPTION": 14,
		"TYPE_REP":      15,
		"ARROW":         16,
		"UPDATE":        17,
		"TEXTMAP":       1001,
		"BIGNUMERIC":    1002,
		"ROUNDING_MODE": 1003,
		"SCENARIO":      1004,
	}
)

func (x BuiltinType) Enum() *BuiltinType {
	p := new(BuiltinType)
	*p = x
	return p
}

func (x BuiltinType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (BuiltinType) Descriptor() protoreflect.EnumDescriptor {
	return file_com_daml_daml_lf_2_1_daml_lf2_proto_enumTypes[0].Descriptor()
}

func (BuiltinType) Type() protoreflect.EnumType {
	return &file_com_daml_daml_lf_2_1_daml_lf2_proto_enumTypes[0]
}

func (x BuiltinType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use BuiltinType.Descriptor instead.
func (BuiltinType) EnumDescriptor() ([]byte, []int) {
	return file_com_daml_daml_lf_2_1_daml_lf2_proto_rawDescGZIP(), []int{0}
}

type BuiltinCon int32

const (
	BuiltinCon_CON_UNIT  BuiltinCon = 0
	BuiltinCon_CON_FALSE BuiltinCon = 1
	BuiltinCon_CON_TRUE  BuiltinCon = 2
)

// Enum value maps for BuiltinCon.
var (
	BuiltinCon_name = map[int32]string{
		0: "CON_UNIT",
		1: "CON_FALSE",
		2: "CON_TRUE",
	}
	BuiltinCon_value = map[string]int32{
		"CON_UNIT":  0,
		"CON_FALSE": 1,
		"CON_TRUE":  2,
	}
)

func (x BuiltinCon) Enum() *BuiltinCon {
	p := new(BuiltinCon)
	*p = x
	return p
}

func (x BuiltinCon) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (BuiltinCon) Descriptor() protoreflect.EnumDescriptor {
	return file_com_daml_daml_lf_2_1_daml_lf2_proto_enumTypes[1].Descriptor()
}

func (BuiltinCon) Type() protoreflect.EnumType {
	return &file_com_daml_daml_lf_2_1_daml_lf2_proto_enumTypes[1]
}

func (x BuiltinCon) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use BuiltinCon.Descriptor instead.
func (BuiltinCon) EnumDescriptor() ([]byte, []int) {
	return file_com_daml_daml_lf_2_1_daml_lf2_proto_rawDescGZIP(), []int{1}
}

type BuiltinFunction int32

const (
	BuiltinFunction_TRACE                          BuiltinFunction = 0
	BuiltinFunction_ERROR                          BuiltinFunction = 1
	BuiltinFunction_EQUAL                          BuiltinFunction = 2
	BuiltinFunction_LESS_EQ                        BuiltinFunction = 3
	BuiltinFunction_LESS                           BuiltinFunction = 4
	BuiltinFunction_GREATER_EQ                     BuiltinFunction = 5
	BuiltinFunction_GREATER                        BuiltinFunction = 6
	BuiltinFunction_ADD_INT64                      BuiltinFunction = 7
	BuiltinFunction_SUB_INT64                      BuiltinFunction = 8
	BuiltinFunction_MUL_INT64                      BuiltinFunction = 9
	BuiltinFunction_DIV_INT64                      BuiltinFunction = 10
	BuiltinFunction_MOD_INT64                      BuiltinFunction = 11
	BuiltinFunction_EXP_INT64                      BuiltinFunction = 12
	BuiltinFunction_ADD_NUMERIC                    BuiltinFunction = 13
	BuiltinFunction_SUB_NUMERIC                    BuiltinFunction = 14
	BuiltinFunction_MUL_NUMERIC                    BuiltinFunction = 15
	BuiltinFunction_DIV_NUMERIC                    BuiltinFunction = 16
	BuiltinFunction_ROUND_NUMERIC                  BuiltinFunction = 17
	BuiltinFunction_CAST_NUMERIC                   BuiltinFunction = 18
	BuiltinFunction_SHIFT_NUMERIC                  BuiltinFunction = 19
	BuiltinFunction_INT64_TO_NUMERIC               BuiltinFunction = 20
	BuiltinFunction_NUMERIC_TO_INT64               BuiltinFunction = 21
	BuiltinFunction_INT64_TO_TEXT                  BuiltinFunction = 22
	BuiltinFunction_NUMERIC_TO_TEXT                BuiltinFunction = 23
	BuiltinFunction_TIMESTAMP_TO_TEXT              BuiltinFunction = 25
	BuiltinFunction_DATE_TO_TEXT                   BuiltinFunction = 26
	BuiltinFunction_PARTY_TO_TEXT                  BuiltinFunction = 27
	BuiltinFunction_TEXT_TO_PARTY                  BuiltinFunction = 28
	BuiltinFunction_TEXT_TO_INT64                  BuiltinFunction = 29
	BuiltinFunction_TEXT_TO_NUMERIC                BuiltinFunction = 30
	BuiltinFunction_CONTRACT_ID_TO_TEXT            BuiltinFunction = 31
	BuiltinFunction_SHA256_TEXT                    BuiltinFunction = 32
	BuiltinFunction_EXPLODE_TEXT                   BuiltinFunction = 33
	BuiltinFunction_APPEND_TEXT                    BuiltinFunction = 34
	BuiltinFunction_IMPLODE_TEXT                   BuiltinFunction = 35
	BuiltinFunction_CODE_POINTS_TO_TEXT            BuiltinFunction = 36
	BuiltinFunction_TEXT_TO_CODE_POINTS            BuiltinFunction = 37
	BuiltinFunction_DATE_TO_UNIX_DAYS              BuiltinFunction = 38
	BuiltinFunction_UNIX_DAYS_TO_DATE              BuiltinFunction = 39
	BuiltinFunction_TIMESTAMP_TO_UNIX_MICROSECONDS BuiltinFunction = 40
	BuiltinFunction_UNIX_MICROSECONDS_TO_TIMESTAMP BuiltinFunction = 41
	BuiltinFunction_COERCE_CONTRACT_ID             BuiltinFunction = 42
	BuiltinFunction_FOLDL                          BuiltinFunction = 43
	BuiltinFunction_FOLDR                          BuiltinFunction = 44
	BuiltinFunction_EQUAL_LIST                     BuiltinFunction = 45
	BuiltinFunction_GENMAP_EMPTY                   BuiltinFunction = 52
	BuiltinFunction_GENMAP_INSERT                  BuiltinFunction = 53
	BuiltinFunction_GENMAP_LOOKUP                  BuiltinFunction = 54
	BuiltinFunction_GENMAP_DELETE                  BuiltinFunction = 55
	BuiltinFunction_GENMAP_KEYS                    BuiltinFunction = 56
	BuiltinFunction_GENMAP_VALUES                  BuiltinFunction = 57
	BuiltinFunction_GENMAP_SIZE                    BuiltinFunction = 58
	BuiltinFunction_ANY_EXCEPTION_MESSAGE          BuiltinFunction = 59
	BuiltinFunction_TEXTMAP_EMPTY                  BuiltinFunction = 1001
	BuiltinFunction_TEXTMAP_INSERT                 BuiltinFunction = 1002
	BuiltinFunction_TEXTMAP_LOOKUP                 BuiltinFunction = 1003
	BuiltinFunction_TEXTMAP_DELETE                 BuiltinFunction = 1004
	BuiltinFunction_TEXTMAP_TO_LIST                BuiltinFunction = 1005
	BuiltinFunction_TEXTMAP_SIZE                   BuiltinFunction = 1006
	BuiltinFunction_SCALE_BIGNUMERIC               BuiltinFunction = 2001
	BuiltinFunction_PRECISION_BIGNUMERIC           BuiltinFunction = 2002
	BuiltinFunction_ADD_BIGNUMERIC                 BuiltinFunction = 2003
	BuiltinFunction_SUB_BIGNUMERIC                 BuiltinFunction = 2004
	BuiltinFunction_MUL_BIGNUMERIC                 BuiltinFunction = 2005
	BuiltinFunction_DIV_BIGNUMERIC                 BuiltinFunction = 2006
	BuiltinFunction_SHIFT_RIGHT_BIGNUMERIC         BuiltinFunction = 2007
	BuiltinFunction_BIGNUMERIC_TO_NUMERIC          BuiltinFunction = 2008
	BuiltinFunction_NUMERIC_TO_BIGNUMERIC          BuiltinFunction = 2009
	BuiltinFunction_BIGNUMERIC_TO_TEXT             BuiltinFunction = 2010
	BuiltinFunction_TYPE_REP_TYCON_NAME            BuiltinFunction = 3011
)

// Enum value maps for BuiltinFunction.
var (
	BuiltinFunction_name = map[int32]string{
		0:    "TRACE",
		1:    "ERROR",
		2:    "EQUAL",
		3:    "LESS_EQ",
		4:    "LESS",
		5:    "GREATER_EQ",
		6:    "GREATER",
		7:    "ADD_INT64",
		8:    "SUB_INT64",
		9:    "MUL_INT64",
		10:   "DIV_INT64",
		11:   "MOD_INT64",
		12:   "EXP_INT64",
		13:   "ADD_NUMERIC",
		14:   "SUB_NUMERIC",
		15:   "MUL_NUMERIC",
		16:   "DIV_NUMERIC",
		17:   "ROUND_NUMERIC",
		18:   "CAST_NUMERIC",
		19:   "SHIFT_NUMERIC",
		20:   "INT64_TO_NUMERIC",
		21:   "NUMERIC_TO_INT64",
		22:   "INT64_TO_TEXT",
		23:   "NUMERIC_TO_TEXT",
		25:   "TIMESTAMP_TO_TEXT",
		26:   "DATE_TO_TEXT",
		27:   "PARTY_TO_TEXT",
		28:   "TEXT_TO_PARTY",
		29:   "TEXT_TO_INT64",
		30:   "TEXT_TO_NUMERIC",
		31:   "CONTRACT_ID_TO_TEXT",
		32:   "SHA256_TEXT",
		33:   "EXPLODE_TEXT",
		34:   "APPEND_TEXT",
		35:   "IMPLODE_TEXT",
		36:   "CODE_POINTS_TO_TEXT",
		37:   "TEXT_TO_CODE_POINTS",
		38:   "DATE_TO_UNIX_DAYS",
		39:   "UNIX_DAYS_TO_DATE",
		40:   "TIMESTAMP_TO_UNIX_MICROSECONDS",
		41:   "UNIX_MICROSECONDS_TO_TIMESTAMP",
		42:   "COERCE_CONTRACT_ID",
		43:   "FOLDL",
		44:   "FOLDR",
		45:   "EQUAL_LIST",
		52:   "GENMAP_EMPTY",
		53:   "GENMAP_INSERT",
		54:   "GENMAP_LOOKUP",
		55:   "GENMAP_DELETE",
		56:   "GENMAP_KEYS",
		57:   "GENMAP_VALUES",
		58:   "GENMAP_SIZE",
		59:   "ANY_EXCEPTION_MESSAGE",
		1001: "TEXTMAP_EMPTY",
		1002: "TEXTMAP_INSERT",
		1003: "TEXTMAP_LOOKUP",
		1004: "TEXTMAP_DELETE",
		1005: "TEXTMAP_TO_LIST",
		1006: "TEXTMAP_SIZE",
		2001: "SCALE_BIGNUMERIC",
		2002: "PRECISION_BIGNUMERIC",
		2003: "ADD_BIGNUMERIC",
		2004: "SUB_BIGNUMERIC",
		2005: "MUL_BIGNUMERIC",
		2006: "DIV_BIGNUMERIC",
		2007: "SHIFT_RIGHT_BIGNUMERIC",
		2008: "BIGNUMERIC_TO_NUMERIC",
		2009: "NUMERIC_TO_BIGNUMERIC",
		2010: "BIGNUMERIC_TO_TEXT",
		3011: "TYPE_REP_TYCON_NAME",
	}
	BuiltinFunction_value = map[string]int32{
		"TRACE":                          0,
		"ERROR":                          1,
		"EQUAL":                          2,
		"LESS_EQ":                        3,
		"LESS":                           4,
		"GREATER_EQ":                     5,
		"GREATER":                        6,
		"ADD_INT64":                      7,
		"SUB_INT64":                      8,
		"MUL_INT64":                      9,
		"DIV_INT64":                      10,
		"MOD_INT64":                      11,
		"EXP_INT64":                      12,
		"ADD_NUMERIC":                    13,
		"SUB_NUMERIC":                    14,
		"MUL_NUMERIC":                    15,
		"DIV_NUMERIC":                    16,
		"ROUND_NUMERIC":                  17,
		"CAST_NUMERIC":                   18,
		"SHIFT_NUMERIC":                  19,
		"INT64_TO_NUMERIC":               20,
		"NUMERIC_TO_INT64":               21,
		"INT64_TO_TEXT":                  22,
		"NUMERIC_TO_TEXT":                23,
		"TIMESTAMP_TO_TEXT":              25,
		"DATE_TO_TEXT":                   26,
		"PARTY_TO_TEXT":                  27,
		"TEXT_TO_PARTY":                  28,
		"TEXT_TO_INT64":                  29,
		"TEXT_TO_NUMERIC":                30,
		"CONTRACT_ID_TO_TEXT":            31,
		"SHA256_TEXT":                    32,
		"EXPLODE_TEXT":                   33,
		"APPEND_TEXT":                    34,
		"IMPLODE_TEXT":                   35,
		"CODE_POINTS_TO_TEXT":            36,
		"TEXT_TO_CODE_POINTS":            37,
		"DATE_TO_UNIX_DAYS":              38,
		"UNIX_DAYS_TO_DATE":              39,
		"TIMESTAMP_TO_UNIX_MICROSECONDS": 40,
		"UNIX_MICROSECONDS_TO_TIMESTAMP": 41,
		"COERCE_CONTRACT_ID":             42,
		"FOLDL":                          43,
		"FOLDR":                          44,
		"EQUAL_LIST":                     45,
		"GENMAP_EMPTY":                   52,
		"GENMAP_INSERT":                  53,
		"GENMAP_LOOKUP":                  54,
		"GENMAP_DELETE":                  55,
		"GENMAP_KEYS":                    56,
		"GENMAP_VALUES":                  57,
		"GENMAP_SIZE":                    58,
		"ANY_EXCEPTION_MESSAGE":          59,
		"TEXTMAP_EMPTY":                  1001,
		"TEXTMAP_INSERT":                 1002,
		"TEXTMAP_LOOKUP":                 1003,
		"TEXTMAP_DELETE":                 1004,
		"TEXTMAP_TO_LIST":                1005,
		"TEXTMAP_SIZE":                   1006,
		"SCALE_BIGNUMERIC":               2001,
		"PRECISION_BIGNUMERIC":           2002,
		"ADD_BIGNUMERIC":                 2003,
		"SUB_BIGNUMERIC":                 2004,
		"MUL_BIGNUMERIC":                 2005,
		"DIV_BIGNUMERIC":                 2006,
		"SHIFT_RIGHT_BIGNUMERIC":         2007,
		"BIGNUMERIC_TO_NUMERIC":          2008,
		"NUMERIC_TO_BIGNUMERIC":          2009,
		"BIGNUMERIC_TO_TEXT":             2010,
		"TYPE_REP_TYCON_NAME":            3011,
	}
)

func (x BuiltinFunction) Enum() *BuiltinFunction {
	p := new(BuiltinFunction)
	*p = x
	return p
}

func (x BuiltinFunction) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (BuiltinFunction) Descriptor() protoreflect.EnumDescriptor {
	return file_com_daml_daml_lf_2_1_daml_lf2_proto_enumTypes[2].Descriptor()
}

func (BuiltinFunction) Type() protoreflect.EnumType {
	return &file_com_daml_daml_lf_2_1_daml_lf2_proto_enumTypes[2]
}

func (x BuiltinFunction) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use BuiltinFunction.Descriptor instead.
func (BuiltinFunction) EnumDescriptor() ([]byte, []int) {
	return file_com_daml_daml_lf_2_1_daml_lf2_proto_rawDescGZIP(), []int{2}
}

type BuiltinLit_RoundingMode int32

const (
	BuiltinLit_UP          BuiltinLit_RoundingMode = 0
	BuiltinLit_DOWN        BuiltinLit_RoundingMode = 1
	BuiltinLit_CEILING     BuiltinLit_RoundingMode = 2
	BuiltinLit_FLOOR       BuiltinLit_RoundingMode = 3
	BuiltinLit_HALF_UP     BuiltinLit_RoundingMode = 4
	BuiltinLit_HALF_DOWN   BuiltinLit_RoundingMode = 5
	BuiltinLit_HALF_EVEN   BuiltinLit_RoundingMode = 6
	BuiltinLit_UNNECESSARY BuiltinLit_RoundingMode = 7
)

// Enum value maps for BuiltinLit_RoundingMode.
var (
	BuiltinLit_RoundingMode_name = map[int32]string{
		0: "UP",
		1: "DOWN",
		2: "CEILING",
		3: "FLOOR",
		4: "HALF_UP",
		5: "HALF_DOWN",
		6: "HALF_EVEN",
		7: "UNNECESSARY",
	}
	BuiltinLit_RoundingMode_value = map[string]int32{
		"UP":          0,
		"DOWN":        1,
		"CEILING":     2,
		"FLOOR":       3,
		"HALF_UP":     4,
		"HALF_DOWN":   5,
		"HALF_EVEN":   6,
		"UNNECESSARY": 7,
	}
)

func (x BuiltinLit_RoundingMode) Enum() *BuiltinLit_RoundingMode {
	p := new(BuiltinLit_RoundingMode)
	*p = x
	return p
}

func (x BuiltinLit_RoundingMode) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (BuiltinLit_RoundingMode) Descriptor() protoreflect.EnumDescriptor {
	return file_com_daml_daml_lf_2_1_daml_lf2_proto_enumTypes[3].Descriptor()
}

func (BuiltinLit_RoundingMode) Type() protoreflect.EnumType {
	return &file_com_daml_daml_lf_2_1_daml_lf2_proto_enumTypes[3]
}

func (x BuiltinLit_RoundingMode) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use BuiltinLit_RoundingMode.Descriptor instead.
func (BuiltinLit_RoundingMode) EnumDescriptor() ([]byte, []int) {
	return file_com_daml_daml_lf_2_1_daml_lf2_proto_rawDescGZIP(), []int{13, 0}
}

type Unit struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *Unit) Reset() {
	*x = Unit{}
	mi := &file_com_daml_daml_lf_2_1_daml_lf2_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Unit) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Unit) ProtoMessage() {}

func (x *Unit) ProtoReflect() protoreflect.Message {
	mi := &file_com_daml_daml_lf_2_1_daml_lf2_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Unit.ProtoReflect.Descriptor instead.
func (*Unit) Descriptor() ([]byte, []int) {
	return file_com_daml_daml_lf_2_1_daml_lf2_proto_rawDescGZIP(), []int{0}
}

type PackageRef struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Sum:
	//
	//	*PackageRef_Self
	//	*PackageRef_PackageIdInternedStr
	Sum isPackageRef_Sum `protobuf_oneof:"Sum"`
}

func (x *PackageRef) Reset() {
	*x = PackageRef{}
	mi := &file_com_daml_daml_lf_2_1_daml_lf2_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PackageRef) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PackageRef) ProtoMessage() {}

func (x *PackageRef) ProtoReflect() protoreflect.Message {
	mi := &file_com_daml_daml_lf_2_1_daml_lf2_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PackageRef.ProtoReflect.Descriptor instead.
func (*PackageRef) Descriptor() ([]byte, []int) {
	return file_com_daml_daml_lf_2_1_daml_lf2_proto_rawDescGZIP(), []int{1}
}

func (m *PackageRef) GetSum() isPackageRef_Sum {
	if m != nil {
		return m.Sum
	}
	return nil
}

func (x *PackageRef) GetSelf() *Unit {
	if x, ok := x.GetSum().(*PackageRef_Self); ok {
		return x.Self
	}
	return nil
}

func (x *PackageRef) GetPackageIdInternedStr() int32 {
	if x, ok := x.GetSum().(*PackageRef_PackageIdInternedStr); ok {
		return x.PackageIdInternedStr
	}
	return 0
}

type isPackageRef_Sum interface {
	isPackageRef_Sum()
}

type PackageRef_Self struct {
	Self *Unit `protobuf:"bytes,1,opt,name=self,proto3,oneof"`
}

type PackageRef_PackageIdInternedStr struct {
	PackageIdInternedStr int32 `protobuf:"varint,3,opt,name=package_id_interned_str,json=packageIdInternedStr,proto3,oneof"`
}

func (*PackageRef_Self) isPackageRef_Sum() {}

func (*PackageRef_PackageIdInternedStr) isPackageRef_Sum() {}

type ModuleRef struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PackageRef              *PackageRef `protobuf:"bytes,1,opt,name=package_ref,json=packageRef,proto3" json:"package_ref,omitempty"`
	ModuleNameInternedDname int32       `protobuf:"varint,2,opt,name=module_name_interned_dname,json=moduleNameInternedDname,proto3" json:"module_name_interned_dname,omitempty"`
}

func (x *ModuleRef) Reset() {
	*x = ModuleRef{}
	mi := &file_com_daml_daml_lf_2_1_daml_lf2_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ModuleRef) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ModuleRef) ProtoMessage() {}

func (x *ModuleRef) ProtoReflect() protoreflect.Message {
	mi := &file_com_daml_daml_lf_2_1_daml_lf2_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ModuleRef.ProtoReflect.Descriptor instead.
func (*ModuleRef) Descriptor() ([]byte, []int) {
	return file_com_daml_daml_lf_2_1_daml_lf2_proto_rawDescGZIP(), []int{2}
}

func (x *ModuleRef) GetPackageRef() *PackageRef {
	if x != nil {
		return x.PackageRef
	}
	return nil
}

func (x *ModuleRef) GetModuleNameInternedDname() int32 {
	if x != nil {
		return x.ModuleNameInternedDname
	}
	return 0
}

type TypeConName struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Module            *ModuleRef `protobuf:"bytes,1,opt,name=module,proto3" json:"module,omitempty"`
	NameInternedDname int32      `protobuf:"varint,2,opt,name=name_interned_dname,json=nameInternedDname,proto3" json:"name_interned_dname,omitempty"`
}

func (x *TypeConName) Reset() {
	*x = TypeConName{}
	mi := &file_com_daml_daml_lf_2_1_daml_lf2_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TypeConName) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TypeConName) ProtoMessage() {}

func (x *TypeConName) ProtoReflect() protoreflect.Message {
	mi := &file_com_daml_daml_lf_2_1_daml_lf2_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TypeConName.ProtoReflect.Descriptor instead.
func (*TypeConName) Descriptor() ([]byte, []int) {
	return file_com_daml_daml_lf_2_1_daml_lf2_proto_rawDescGZIP(), []int{3}
}

func (x *TypeConName) GetModule() *ModuleRef {
	if x != nil {
		return x.Module
	}
	return nil
}

func (x *TypeConName) GetNameInternedDname() int32 {
	if x != nil {
		return x.NameInternedDname
	}
	return 0
}

type TypeSynName struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Module            *ModuleRef `protobuf:"bytes,1,opt,name=module,proto3" json:"module,omitempty"`
	NameInternedDname int32      `protobuf:"varint,2,opt,name=name_interned_dname,json=nameInternedDname,proto3" json:"name_interned_dname,omitempty"`
}

func (x *TypeSynName) Reset() {
	*x = TypeSynName{}
	mi := &file_com_daml_daml_lf_2_1_daml_lf2_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TypeSynName) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TypeSynName) ProtoMessage() {}

func (x *TypeSynName) ProtoReflect() protoreflect.Message {
	mi := &file_com_daml_daml_lf_2_1_daml_lf2_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TypeSynName.ProtoReflect.Descriptor instead.
func (*TypeSynName) Descriptor() ([]byte, []int) {
	return file_com_daml_daml_lf_2_1_daml_lf2_proto_rawDescGZIP(), []int{4}
}

func (x *TypeSynName) GetModule() *ModuleRef {
	if x != nil {
		return x.Module
	}
	return nil
}

func (x *TypeSynName) GetNameInternedDname() int32 {
	if x != nil {
		return x.NameInternedDname
	}
	return 0
}

type ValName struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Module            *ModuleRef `protobuf:"bytes,1,opt,name=module,proto3" json:"module,omitempty"`
	NameInternedDname int32      `protobuf:"varint,2,opt,name=name_interned_dname,json=nameInternedDname,proto3" json:"name_interned_dname,omitempty"`
}

func (x *ValName) Reset() {
	*x = ValName{}
	mi := &file_com_daml_daml_lf_2_1_daml_lf2_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ValName) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ValName) ProtoMessage() {}

func (x *ValName) ProtoReflect() protoreflect.Message {
	mi := &file_com_daml_daml_lf_2_1_daml_lf2_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ValName.ProtoReflect.Descriptor instead.
func (*ValName) Descriptor() ([]byte, []int) {
	return file_com_daml_daml_lf_2_1_daml_lf2_proto_rawDescGZIP(), []int{5}
}

func (x *ValName) GetModule() *ModuleRef {
	if x != nil {
		return x.Module
	}
	return nil
}

func (x *ValName) GetNameInternedDname() int32 {
	if x != nil {
		return x.NameInternedDname
	}
	return 0
}

type FieldWithType struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FieldInternedStr int32 `protobuf:"varint,3,opt,name=field_interned_str,json=fieldInternedStr,proto3" json:"field_interned_str,omitempty"`
	Type             *Type `protobuf:"bytes,2,opt,name=type,proto3" json:"type,omitempty"`
}

func (x *FieldWithType) Reset() {
	*x = FieldWithType{}
	mi := &file_com_daml_daml_lf_2_1_daml_lf2_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *FieldWithType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FieldWithType) ProtoMessage() {}

func (x *FieldWithType) ProtoReflect() protoreflect.Message {
	mi := &file_com_daml_daml_lf_2_1_daml_lf2_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FieldWithType.ProtoReflect.Descriptor instead.
func (*FieldWithType) Descriptor() ([]byte, []int) {
	return file_com_daml_daml_lf_2_1_daml_lf2_proto_rawDescGZIP(), []int{6}
}

func (x *FieldWithType) GetFieldInternedStr() int32 {
	if x != nil {
		return x.FieldInternedStr
	}
	return 0
}

func (x *FieldWithType) GetType() *Type {
	if x != nil {
		return x.Type
	}
	return nil
}

type VarWithType struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	VarInternedStr int32 `protobuf:"varint,3,opt,name=var_interned_str,json=varInternedStr,proto3" json:"var_interned_str,omitempty"`
	Type           *Type `protobuf:"bytes,2,opt,name=type,proto3" json:"type,omitempty"`
}

func (x *VarWithType) Reset() {
	*x = VarWithType{}
	mi := &file_com_daml_daml_lf_2_1_daml_lf2_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *VarWithType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VarWithType) ProtoMessage() {}

func (x *VarWithType) ProtoReflect() protoreflect.Message {
	mi := &file_com_daml_daml_lf_2_1_daml_lf2_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VarWithType.ProtoReflect.Descriptor instead.
func (*VarWithType) Descriptor() ([]byte, []int) {
	return file_com_daml_daml_lf_2_1_daml_lf2_proto_rawDescGZIP(), []int{7}
}

func (x *VarWithType) GetVarInternedStr() int32 {
	if x != nil {
		return x.VarInternedStr
	}
	return 0
}

func (x *VarWithType) GetType() *Type {
	if x != nil {
		return x.Type
	}
	return nil
}

type TypeVarWithKind struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	VarInternedStr int32 `protobuf:"varint,3,opt,name=var_interned_str,json=varInternedStr,proto3" json:"var_interned_str,omitempty"`
	Kind           *Kind `protobuf:"bytes,2,opt,name=kind,proto3" json:"kind,omitempty"`
}

func (x *TypeVarWithKind) Reset() {
	*x = TypeVarWithKind{}
	mi := &file_com_daml_daml_lf_2_1_daml_lf2_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TypeVarWithKind) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TypeVarWithKind) ProtoMessage() {}

func (x *TypeVarWithKind) ProtoReflect() protoreflect.Message {
	mi := &file_com_daml_daml_lf_2_1_daml_lf2_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TypeVarWithKind.ProtoReflect.Descriptor instead.
func (*TypeVarWithKind) Descriptor() ([]byte, []int) {
	return file_com_daml_daml_lf_2_1_daml_lf2_proto_rawDescGZIP(), []int{8}
}

func (x *TypeVarWithKind) GetVarInternedStr() int32 {
	if x != nil {
		return x.VarInternedStr
	}
	return 0
}

func (x *TypeVarWithKind) GetKind() *Kind {
	if x != nil {
		return x.Kind
	}
	return nil
}

type FieldWithExpr struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FieldInternedStr int32 `protobuf:"varint,3,opt,name=field_interned_str,json=fieldInternedStr,proto3" json:"field_interned_str,omitempty"`
	Expr             *Expr `protobuf:"bytes,2,opt,name=expr,proto3" json:"expr,omitempty"`
}

func (x *FieldWithExpr) Reset() {
	*x = FieldWithExpr{}
	mi := &file_com_daml_daml_lf_2_1_daml_lf2_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *FieldWithExpr) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FieldWithExpr) ProtoMessage() {}

func (x *FieldWithExpr) ProtoReflect() protoreflect.Message {
	mi := &file_com_daml_daml_lf_2_1_daml_lf2_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FieldWithExpr.ProtoReflect.Descriptor instead.
func (*FieldWithExpr) Descriptor() ([]byte, []int) {
	return file_com_daml_daml_lf_2_1_daml_lf2_proto_rawDescGZIP(), []int{9}
}

func (x *FieldWithExpr) GetFieldInternedStr() int32 {
	if x != nil {
		return x.FieldInternedStr
	}
	return 0
}

func (x *FieldWithExpr) GetExpr() *Expr {
	if x != nil {
		return x.Expr
	}
	return nil
}

type Binding struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Binder *VarWithType `protobuf:"bytes,1,opt,name=binder,proto3" json:"binder,omitempty"`
	Bound  *Expr        `protobuf:"bytes,2,opt,name=bound,proto3" json:"bound,omitempty"`
}

func (x *Binding) Reset() {
	*x = Binding{}
	mi := &file_com_daml_daml_lf_2_1_daml_lf2_proto_msgTypes[10]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Binding) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Binding) ProtoMessage() {}

func (x *Binding) ProtoReflect() protoreflect.Message {
	mi := &file_com_daml_daml_lf_2_1_daml_lf2_proto_msgTypes[10]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Binding.ProtoReflect.Descriptor instead.
func (*Binding) Descriptor() ([]byte, []int) {
	return file_com_daml_daml_lf_2_1_daml_lf2_proto_rawDescGZIP(), []int{10}
}

func (x *Binding) GetBinder() *VarWithType {
	if x != nil {
		return x.Binder
	}
	return nil
}

func (x *Binding) GetBound() *Expr {
	if x != nil {
		return x.Bound
	}
	return nil
}

type Kind struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Sum:
	//
	//	*Kind_Star
	//	*Kind_Arrow_
	//	*Kind_Nat
	Sum isKind_Sum `protobuf_oneof:"Sum"`
}

func (x *Kind) Reset() {
	*x = Kind{}
	mi := &file_com_daml_daml_lf_2_1_daml_lf2_proto_msgTypes[11]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Kind) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Kind) ProtoMessage() {}

func (x *Kind) ProtoReflect() protoreflect.Message {
	mi := &file_com_daml_daml_lf_2_1_daml_lf2_proto_msgTypes[11]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Kind.ProtoReflect.Descriptor instead.
func (*Kind) Descriptor() ([]byte, []int) {
	return file_com_daml_daml_lf_2_1_daml_lf2_proto_rawDescGZIP(), []int{11}
}

func (m *Kind) GetSum() isKind_Sum {
	if m != nil {
		return m.Sum
	}
	return nil
}

func (x *Kind) GetStar() *Unit {
	if x, ok := x.GetSum().(*Kind_Star); ok {
		return x.Star
	}
	return nil
}

func (x *Kind) GetArrow() *Kind_Arrow {
	if x, ok := x.GetSum().(*Kind_Arrow_); ok {
		return x.Arrow
	}
	return nil
}

func (x *Kind) GetNat() *Unit {
	if x, ok := x.GetSum().(*Kind_Nat); ok {
		return x.Nat
	}
	return nil
}

type isKind_Sum interface {
	isKind_Sum()
}

type Kind_Star struct {
	Star *Unit `protobuf:"bytes,1,opt,name=star,proto3,oneof"`
}

type Kind_Arrow_ struct {
	Arrow *Kind_Arrow `protobuf:"bytes,2,opt,name=arrow,proto3,oneof"`
}

type Kind_Nat struct {
	Nat *Unit `protobuf:"bytes,3,opt,name=nat,proto3,oneof"`
}

func (*Kind_Star) isKind_Sum() {}

func (*Kind_Arrow_) isKind_Sum() {}

func (*Kind_Nat) isKind_Sum() {}

type Type struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Sum:
	//
	//	*Type_Var_
	//	*Type_Con_
	//	*Type_Builtin_
	//	*Type_Forall_
	//	*Type_Struct_
	//	*Type_Nat
	//	*Type_Syn_
	//	*Type_Interned
	Sum isType_Sum `protobuf_oneof:"Sum"`
}

func (x *Type) Reset() {
	*x = Type{}
	mi := &file_com_daml_daml_lf_2_1_daml_lf2_proto_msgTypes[12]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Type) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Type) ProtoMessage() {}

func (x *Type) ProtoReflect() protoreflect.Message {
	mi := &file_com_daml_daml_lf_2_1_daml_lf2_proto_msgTypes[12]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Type.ProtoReflect.Descriptor instead.
func (*Type) Descriptor() ([]byte, []int) {
	return file_com_daml_daml_lf_2_1_daml_lf2_proto_rawDescGZIP(), []int{12}
}

func (m *Type) GetSum() isType_Sum {
	if m != nil {
		return m.Sum
	}
	return nil
}

func (x *Type) GetVar() *Type_Var {
	if x, ok := x.GetSum().(*Type_Var_); ok {
		return x.Var
	}
	return nil
}

func (x *Type) GetCon() *Type_Con {
	if x, ok := x.GetSum().(*Type_Con_); ok {
		return x.Con
	}
	return nil
}

func (x *Type) GetBuiltin() *Type_Builtin {
	if x, ok := x.GetSum().(*Type_Builtin_); ok {
		return x.Builtin
	}
	return nil
}

func (x *Type) GetForall() *Type_Forall {
	if x, ok := x.GetSum().(*Type_Forall_); ok {
		return x.Forall
	}
	return nil
}

func (x *Type) GetStruct() *Type_Struct {
	if x, ok := x.GetSum().(*Type_Struct_); ok {
		return x.Struct
	}
	return nil
}

func (x *Type) GetNat() int64 {
	if x, ok := x.GetSum().(*Type_Nat); ok {
		return x.Nat
	}
	return 0
}

func (x *Type) GetSyn() *Type_Syn {
	if x, ok := x.GetSum().(*Type_Syn_); ok {
		return x.Syn
	}
	return nil
}

func (x *Type) GetInterned() int32 {
	if x, ok := x.GetSum().(*Type_Interned); ok {
		return x.Interned
	}
	return 0
}

type isType_Sum interface {
	isType_Sum()
}

type Type_Var_ struct {
	Var *Type_Var `protobuf:"bytes,1,opt,name=var,proto3,oneof"`
}

type Type_Con_ struct {
	Con *Type_Con `protobuf:"bytes,2,opt,name=con,proto3,oneof"`
}

type Type_Builtin_ struct {
	Builtin *Type_Builtin `protobuf:"bytes,3,opt,name=builtin,proto3,oneof"`
}

type Type_Forall_ struct {
	Forall *Type_Forall `protobuf:"bytes,4,opt,name=forall,proto3,oneof"`
}

type Type_Struct_ struct {
	Struct *Type_Struct `protobuf:"bytes,5,opt,name=struct,proto3,oneof"`
}

type Type_Nat struct {
	Nat int64 `protobuf:"zigzag64,6,opt,name=nat,proto3,oneof"`
}

type Type_Syn_ struct {
	Syn *Type_Syn `protobuf:"bytes,7,opt,name=syn,proto3,oneof"`
}

type Type_Interned struct {
	Interned int32 `protobuf:"varint,8,opt,name=interned,proto3,oneof"`
}

func (*Type_Var_) isType_Sum() {}

func (*Type_Con_) isType_Sum() {}

func (*Type_Builtin_) isType_Sum() {}

func (*Type_Forall_) isType_Sum() {}

func (*Type_Struct_) isType_Sum() {}

func (*Type_Nat) isType_Sum() {}

func (*Type_Syn_) isType_Sum() {}

func (*Type_Interned) isType_Sum() {}

type BuiltinLit struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Sum:
	//
	//	*BuiltinLit_Int64
	//	*BuiltinLit_Timestamp
	//	*BuiltinLit_NumericInternedStr
	//	*BuiltinLit_TextInternedStr
	//	*BuiltinLit_Date
	//	*BuiltinLit_RoundingMode_
	Sum isBuiltinLit_Sum `protobuf_oneof:"Sum"`
}

func (x *BuiltinLit) Reset() {
	*x = BuiltinLit{}
	mi := &file_com_daml_daml_lf_2_1_daml_lf2_proto_msgTypes[13]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *BuiltinLit) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BuiltinLit) ProtoMessage() {}

func (x *BuiltinLit) ProtoReflect() protoreflect.Message {
	mi := &file_com_daml_daml_lf_2_1_daml_lf2_proto_msgTypes[13]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BuiltinLit.ProtoReflect.Descriptor instead.
func (*BuiltinLit) Descriptor() ([]byte, []int) {
	return file_com_daml_daml_lf_2_1_daml_lf2_proto_rawDescGZIP(), []int{13}
}

func (m *BuiltinLit) GetSum() isBuiltinLit_Sum {
	if m != nil {
		return m.Sum
	}
	return nil
}

func (x *BuiltinLit) GetInt64() int64 {
	if x, ok := x.GetSum().(*BuiltinLit_Int64); ok {
		return x.Int64
	}
	return 0
}

func (x *BuiltinLit) GetTimestamp() int64 {
	if x, ok := x.GetSum().(*BuiltinLit_Timestamp); ok {
		return x.Timestamp
	}
	return 0
}

func (x *BuiltinLit) GetNumericInternedStr() int32 {
	if x, ok := x.GetSum().(*BuiltinLit_NumericInternedStr); ok {
		return x.NumericInternedStr
	}
	return 0
}

func (x *BuiltinLit) GetTextInternedStr() int32 {
	if x, ok := x.GetSum().(*BuiltinLit_TextInternedStr); ok {
		return x.TextInternedStr
	}
	return 0
}

func (x *BuiltinLit) GetDate() int32 {
	if x, ok := x.GetSum().(*BuiltinLit_Date); ok {
		return x.Date
	}
	return 0
}

func (x *BuiltinLit) GetRoundingMode() BuiltinLit_RoundingMode {
	if x, ok := x.GetSum().(*BuiltinLit_RoundingMode_); ok {
		return x.RoundingMode
	}
	return BuiltinLit_UP
}

type isBuiltinLit_Sum interface {
	isBuiltinLit_Sum()
}

type BuiltinLit_Int64 struct {
	Int64 int64 `protobuf:"zigzag64,1,opt,name=int64,proto3,oneof"`
}

type BuiltinLit_Timestamp struct {
	Timestamp int64 `protobuf:"fixed64,2,opt,name=timestamp,proto3,oneof"`
}

type BuiltinLit_NumericInternedStr struct {
	NumericInternedStr int32 `protobuf:"varint,3,opt,name=numeric_interned_str,json=numericInternedStr,proto3,oneof"`
}

type BuiltinLit_TextInternedStr struct {
	TextInternedStr int32 `protobuf:"varint,4,opt,name=text_interned_str,json=textInternedStr,proto3,oneof"`
}

type BuiltinLit_Date struct {
	Date int32 `protobuf:"varint,5,opt,name=date,proto3,oneof"`
}

type BuiltinLit_RoundingMode_ struct {
	RoundingMode BuiltinLit_RoundingMode `protobuf:"varint,1001,opt,name=rounding_mode,json=roundingMode,proto3,enum=daml_lf_2.BuiltinLit_RoundingMode,oneof"`
}

func (*BuiltinLit_Int64) isBuiltinLit_Sum() {}

func (*BuiltinLit_Timestamp) isBuiltinLit_Sum() {}

func (*BuiltinLit_NumericInternedStr) isBuiltinLit_Sum() {}

func (*BuiltinLit_TextInternedStr) isBuiltinLit_Sum() {}

func (*BuiltinLit_Date) isBuiltinLit_Sum() {}

func (*BuiltinLit_RoundingMode_) isBuiltinLit_Sum() {}

type Location struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Module *ModuleRef      `protobuf:"bytes,1,opt,name=module,proto3" json:"module,omitempty"`
	Range  *Location_Range `protobuf:"bytes,2,opt,name=range,proto3" json:"range,omitempty"`
}

func (x *Location) Reset() {
	*x = Location{}
	mi := &file_com_daml_daml_lf_2_1_daml_lf2_proto_msgTypes[14]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Location) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Location) ProtoMessage() {}

func (x *Location) ProtoReflect() protoreflect.Message {
	mi := &file_com_daml_daml_lf_2_1_daml_lf2_proto_msgTypes[14]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Location.ProtoReflect.Descriptor instead.
func (*Location) Descriptor() ([]byte, []int) {
	return file_com_daml_daml_lf_2_1_daml_lf2_proto_rawDescGZIP(), []int{14}
}

func (x *Location) GetModule() *ModuleRef {
	if x != nil {
		return x.Module
	}
	return nil
}

func (x *Location) GetRange() *Location_Range {
	if x != nil {
		return x.Range
	}
	return nil
}

type Expr struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Location *Location `protobuf:"bytes,1,opt,name=location,proto3" json:"location,omitempty"`
	// Types that are assignable to Sum:
	//
	//	*Expr_VarInternedStr
	//	*Expr_Val
	//	*Expr_Builtin
	//	*Expr_BuiltinCon
	//	*Expr_BuiltinLit
	//	*Expr_RecCon_
	//	*Expr_RecProj_
	//	*Expr_RecUpd_
	//	*Expr_VariantCon_
	//	*Expr_EnumCon_
	//	*Expr_StructCon_
	//	*Expr_StructProj_
	//	*Expr_StructUpd_
	//	*Expr_App_
	//	*Expr_TyApp_
	//	*Expr_Abs_
	//	*Expr_TyAbs_
	//	*Expr_Case
	//	*Expr_Let
	//	*Expr_Nil_
	//	*Expr_Cons_
	//	*Expr_Update
	//	*Expr_OptionalNone_
	//	*Expr_OptionalSome_
	//	*Expr_ToAny_
	//	*Expr_FromAny_
	//	*Expr_TypeRep
	//	*Expr_ToAnyException_
	//	*Expr_FromAnyException_
	//	*Expr_Throw_
	//	*Expr_ToInterface_
	//	*Expr_FromInterface_
	//	*Expr_CallInterface_
	//	*Expr_SignatoryInterface_
	//	*Expr_ObserverInterface_
	//	*Expr_ViewInterface_
	//	*Expr_UnsafeFromInterface_
	//	*Expr_InterfaceTemplateTypeRep_
	//	*Expr_ToRequiredInterface_
	//	*Expr_FromRequiredInterface_
	//	*Expr_UnsafeFromRequiredInterface_
	//	*Expr_ChoiceController_
	//	*Expr_ChoiceObserver_
	//	*Expr_Scenario
	//	*Expr_Experimental_
	Sum isExpr_Sum `protobuf_oneof:"Sum"`
}

func (x *Expr) Reset() {
	*x = Expr{}
	mi := &file_com_daml_daml_lf_2_1_daml_lf2_proto_msgTypes[15]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Expr) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Expr) ProtoMessage() {}

func (x *Expr) ProtoReflect() protoreflect.Message {
	mi := &file_com_daml_daml_lf_2_1_daml_lf2_proto_msgTypes[15]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Expr.ProtoReflect.Descriptor instead.
func (*Expr) Descriptor() ([]byte, []int) {
	return file_com_daml_daml_lf_2_1_daml_lf2_proto_rawDescGZIP(), []int{15}
}

func (x *Expr) GetLocation() *Location {
	if x != nil {
		return x.Location
	}
	return nil
}

func (m *Expr) GetSum() isExpr_Sum {
	if m != nil {
		return m.Sum
	}
	return nil
}

func (x *Expr) GetVarInternedStr() int32 {
	if x, ok := x.GetSum().(*Expr_VarInternedStr); ok {
		return x.VarInternedStr
	}
	return 0
}

func (x *Expr) GetVal() *ValName {
	if x, ok := x.GetSum().(*Expr_Val); ok {
		return x.Val
	}
	return nil
}

func (x *Expr) GetBuiltin() BuiltinFunction {
	if x, ok := x.GetSum().(*Expr_Builtin); ok {
		return x.Builtin
	}
	return BuiltinFunction_TRACE
}

func (x *Expr) GetBuiltinCon() BuiltinCon {
	if x, ok := x.GetSum().(*Expr_BuiltinCon); ok {
		return x.BuiltinCon
	}
	return BuiltinCon_CON_UNIT
}

func (x *Expr) GetBuiltinLit() *BuiltinLit {
	if x, ok := x.GetSum().(*Expr_BuiltinLit); ok {
		return x.BuiltinLit
	}
	return nil
}

func (x *Expr) GetRecCon() *Expr_RecCon {
	if x, ok := x.GetSum().(*Expr_RecCon_); ok {
		return x.RecCon
	}
	return nil
}

func (x *Expr) GetRecProj() *Expr_RecProj {
	if x, ok := x.GetSum().(*Expr_RecProj_); ok {
		return x.RecProj
	}
	return nil
}

func (x *Expr) GetRecUpd() *Expr_RecUpd {
	if x, ok := x.GetSum().(*Expr_RecUpd_); ok {
		return x.RecUpd
	}
	return nil
}

func (x *Expr) GetVariantCon() *Expr_VariantCon {
	if x, ok := x.GetSum().(*Expr_VariantCon_); ok {
		return x.VariantCon
	}
	return nil
}

func (x *Expr) GetEnumCon() *Expr_EnumCon {
	if x, ok := x.GetSum().(*Expr_EnumCon_); ok {
		return x.EnumCon
	}
	return nil
}

func (x *Expr) GetStructCon() *Expr_StructCon {
	if x, ok := x.GetSum().(*Expr_StructCon_); ok {
		return x.StructCon
	}
	return nil
}

func (x *Expr) GetStructProj() *Expr_StructProj {
	if x, ok := x.GetSum().(*Expr_StructProj_); ok {
		return x.StructProj
	}
	return nil
}

func (x *Expr) GetStructUpd() *Expr_StructUpd {
	if x, ok := x.GetSum().(*Expr_StructUpd_); ok {
		return x.StructUpd
	}
	return nil
}

func (x *Expr) GetApp() *Expr_App {
	if x, ok := x.GetSum().(*Expr_App_); ok {
		return x.App
	}
	return nil
}

func (x *Expr) GetTyApp() *Expr_TyApp {
	if x, ok := x.GetSum().(*Expr_TyApp_); ok {
		return x.TyApp
	}
	return nil
}

func (x *Expr) GetAbs() *Expr_Abs {
	if x, ok := x.GetSum().(*Expr_Abs_); ok {
		return x.Abs
	}
	return nil
}

func (x *Expr) GetTyAbs() *Expr_TyAbs {
	if x, ok := x.GetSum().(*Expr_TyAbs_); ok {
		return x.TyAbs
	}
	return nil
}

func (x *Expr) GetCase() *Case {
	if x, ok := x.GetSum().(*Expr_Case); ok {
		return x.Case
	}
	return nil
}

func (x *Expr) GetLet() *Block {
	if x, ok := x.GetSum().(*Expr_Let); ok {
		return x.Let
	}
	return nil
}

func (x *Expr) GetNil() *Expr_Nil {
	if x, ok := x.GetSum().(*Expr_Nil_); ok {
		return x.Nil
	}
	return nil
}

func (x *Expr) GetCons() *Expr_Cons {
	if x, ok := x.GetSum().(*Expr_Cons_); ok {
		return x.Cons
	}
	return nil
}

func (x *Expr) GetUpdate() *Update {
	if x, ok := x.GetSum().(*Expr_Update); ok {
		return x.Update
	}
	return nil
}

func (x *Expr) GetOptionalNone() *Expr_OptionalNone {
	if x, ok := x.GetSum().(*Expr_OptionalNone_); ok {
		return x.OptionalNone
	}
	return nil
}

func (x *Expr) GetOptionalSome() *Expr_OptionalSome {
	if x, ok := x.GetSum().(*Expr_OptionalSome_); ok {
		return x.OptionalSome
	}
	return nil
}

func (x *Expr) GetToAny() *Expr_ToAny {
	if x, ok := x.GetSum().(*Expr_ToAny_); ok {
		return x.ToAny
	}
	return nil
}

func (x *Expr) GetFromAny() *Expr_FromAny {
	if x, ok := x.GetSum().(*Expr_FromAny_); ok {
		return x.FromAny
	}
	return nil
}

func (x *Expr) GetTypeRep() *Type {
	if x, ok := x.GetSum().(*Expr_TypeRep); ok {
		return x.TypeRep
	}
	return nil
}

func (x *Expr) GetToAnyException() *Expr_ToAnyException {
	if x, ok := x.GetSum().(*Expr_ToAnyException_); ok {
		return x.ToAnyException
	}
	return nil
}

func (x *Expr) GetFromAnyException() *Expr_FromAnyException {
	if x, ok := x.GetSum().(*Expr_FromAnyException_); ok {
		return x.FromAnyException
	}
	return nil
}

func (x *Expr) GetThrow() *Expr_Throw {
	if x, ok := x.GetSum().(*Expr_Throw_); ok {
		return x.Throw
	}
	return nil
}

func (x *Expr) GetToInterface() *Expr_ToInterface {
	if x, ok := x.GetSum().(*Expr_ToInterface_); ok {
		return x.ToInterface
	}
	return nil
}

func (x *Expr) GetFromInterface() *Expr_FromInterface {
	if x, ok := x.GetSum().(*Expr_FromInterface_); ok {
		return x.FromInterface
	}
	return nil
}

func (x *Expr) GetCallInterface() *Expr_CallInterface {
	if x, ok := x.GetSum().(*Expr_CallInterface_); ok {
		return x.CallInterface
	}
	return nil
}

func (x *Expr) GetSignatoryInterface() *Expr_SignatoryInterface {
	if x, ok := x.GetSum().(*Expr_SignatoryInterface_); ok {
		return x.SignatoryInterface
	}
	return nil
}

func (x *Expr) GetObserverInterface() *Expr_ObserverInterface {
	if x, ok := x.GetSum().(*Expr_ObserverInterface_); ok {
		return x.ObserverInterface
	}
	return nil
}

func (x *Expr) GetViewInterface() *Expr_ViewInterface {
	if x, ok := x.GetSum().(*Expr_ViewInterface_); ok {
		return x.ViewInterface
	}
	return nil
}

func (x *Expr) GetUnsafeFromInterface() *Expr_UnsafeFromInterface {
	if x, ok := x.GetSum().(*Expr_UnsafeFromInterface_); ok {
		return x.UnsafeFromInterface
	}
	return nil
}

func (x *Expr) GetInterfaceTemplateTypeRep() *Expr_InterfaceTemplateTypeRep {
	if x, ok := x.GetSum().(*Expr_InterfaceTemplateTypeRep_); ok {
		return x.InterfaceTemplateTypeRep
	}
	return nil
}

func (x *Expr) GetToRequiredInterface() *Expr_ToRequiredInterface {
	if x, ok := x.GetSum().(*Expr_ToRequiredInterface_); ok {
		return x.ToRequiredInterface
	}
	return nil
}

func (x *Expr) GetFromRequiredInterface() *Expr_FromRequiredInterface {
	if x, ok := x.GetSum().(*Expr_FromRequiredInterface_); ok {
		return x.FromRequiredInterface
	}
	return nil
}

func (x *Expr) GetUnsafeFromRequiredInterface() *Expr_UnsafeFromRequiredInterface {
	if x, ok := x.GetSum().(*Expr_UnsafeFromRequiredInterface_); ok {
		return x.UnsafeFromRequiredInterface
	}
	return nil
}

func (x *Expr) GetChoiceController() *Expr_ChoiceController {
	if x, ok := x.GetSum().(*Expr_ChoiceController_); ok {
		return x.ChoiceController
	}
	return nil
}

func (x *Expr) GetChoiceObserver() *Expr_ChoiceObserver {
	if x, ok := x.GetSum().(*Expr_ChoiceObserver_); ok {
		return x.ChoiceObserver
	}
	return nil
}

func (x *Expr) GetScenario() *Scenario {
	if x, ok := x.GetSum().(*Expr_Scenario); ok {
		return x.Scenario
	}
	return nil
}

func (x *Expr) GetExperimental() *Expr_Experimental {
	if x, ok := x.GetSum().(*Expr_Experimental_); ok {
		return x.Experimental
	}
	return nil
}

type isExpr_Sum interface {
	isExpr_Sum()
}

type Expr_VarInternedStr struct {
	VarInternedStr int32 `protobuf:"varint,2,opt,name=var_interned_str,json=varInternedStr,proto3,oneof"`
}

type Expr_Val struct {
	Val *ValName `protobuf:"bytes,3,opt,name=val,proto3,oneof"`
}

type Expr_Builtin struct {
	Builtin BuiltinFunction `protobuf:"varint,4,opt,name=builtin,proto3,enum=daml_lf_2.BuiltinFunction,oneof"`
}

type Expr_BuiltinCon struct {
	BuiltinCon BuiltinCon `protobuf:"varint,5,opt,name=builtin_con,json=builtinCon,proto3,enum=daml_lf_2.BuiltinCon,oneof"`
}

type Expr_BuiltinLit struct {
	BuiltinLit *BuiltinLit `protobuf:"bytes,6,opt,name=builtin_lit,json=builtinLit,proto3,oneof"`
}

type Expr_RecCon_ struct {
	RecCon *Expr_RecCon `protobuf:"bytes,7,opt,name=rec_con,json=recCon,proto3,oneof"`
}

type Expr_RecProj_ struct {
	RecProj *Expr_RecProj `protobuf:"bytes,8,opt,name=rec_proj,json=recProj,proto3,oneof"`
}

type Expr_RecUpd_ struct {
	RecUpd *Expr_RecUpd `protobuf:"bytes,9,opt,name=rec_upd,json=recUpd,proto3,oneof"`
}

type Expr_VariantCon_ struct {
	VariantCon *Expr_VariantCon `protobuf:"bytes,10,opt,name=variant_con,json=variantCon,proto3,oneof"`
}

type Expr_EnumCon_ struct {
	EnumCon *Expr_EnumCon `protobuf:"bytes,11,opt,name=enum_con,json=enumCon,proto3,oneof"`
}

type Expr_StructCon_ struct {
	StructCon *Expr_StructCon `protobuf:"bytes,12,opt,name=struct_con,json=structCon,proto3,oneof"`
}

type Expr_StructProj_ struct {
	StructProj *Expr_StructProj `protobuf:"bytes,13,opt,name=struct_proj,json=structProj,proto3,oneof"`
}

type Expr_StructUpd_ struct {
	StructUpd *Expr_StructUpd `protobuf:"bytes,14,opt,name=struct_upd,json=structUpd,proto3,oneof"`
}

type Expr_App_ struct {
	App *Expr_App `protobuf:"bytes,15,opt,name=app,proto3,oneof"`
}

type Expr_TyApp_ struct {
	TyApp *Expr_TyApp `protobuf:"bytes,16,opt,name=ty_app,json=tyApp,proto3,oneof"`
}

type Expr_Abs_ struct {
	Abs *Expr_Abs `protobuf:"bytes,17,opt,name=abs,proto3,oneof"`
}

type Expr_TyAbs_ struct {
	TyAbs *Expr_TyAbs `protobuf:"bytes,18,opt,name=ty_abs,json=tyAbs,proto3,oneof"`
}

type Expr_Case struct {
	Case *Case `protobuf:"bytes,19,opt,name=case,proto3,oneof"`
}

type Expr_Let struct {
	Let *Block `protobuf:"bytes,20,opt,name=let,proto3,oneof"`
}

type Expr_Nil_ struct {
	Nil *Expr_Nil `protobuf:"bytes,21,opt,name=nil,proto3,oneof"`
}

type Expr_Cons_ struct {
	Cons *Expr_Cons `protobuf:"bytes,22,opt,name=cons,proto3,oneof"`
}

type Expr_Update struct {
	Update *Update `protobuf:"bytes,23,opt,name=update,proto3,oneof"`
}

type Expr_OptionalNone_ struct {
	OptionalNone *Expr_OptionalNone `protobuf:"bytes,25,opt,name=optional_none,json=optionalNone,proto3,oneof"`
}

type Expr_OptionalSome_ struct {
	OptionalSome *Expr_OptionalSome `protobuf:"bytes,26,opt,name=optional_some,json=optionalSome,proto3,oneof"`
}

type Expr_ToAny_ struct {
	ToAny *Expr_ToAny `protobuf:"bytes,27,opt,name=to_any,json=toAny,proto3,oneof"`
}

type Expr_FromAny_ struct {
	FromAny *Expr_FromAny `protobuf:"bytes,28,opt,name=from_any,json=fromAny,proto3,oneof"`
}

type Expr_TypeRep struct {
	TypeRep *Type `protobuf:"bytes,29,opt,name=type_rep,json=typeRep,proto3,oneof"`
}

type Expr_ToAnyException_ struct {
	ToAnyException *Expr_ToAnyException `protobuf:"bytes,30,opt,name=to_any_exception,json=toAnyException,proto3,oneof"`
}

type Expr_FromAnyException_ struct {
	FromAnyException *Expr_FromAnyException `protobuf:"bytes,31,opt,name=from_any_exception,json=fromAnyException,proto3,oneof"`
}

type Expr_Throw_ struct {
	Throw *Expr_Throw `protobuf:"bytes,32,opt,name=throw,proto3,oneof"`
}

type Expr_ToInterface_ struct {
	ToInterface *Expr_ToInterface `protobuf:"bytes,33,opt,name=to_interface,json=toInterface,proto3,oneof"`
}

type Expr_FromInterface_ struct {
	FromInterface *Expr_FromInterface `protobuf:"bytes,34,opt,name=from_interface,json=fromInterface,proto3,oneof"`
}

type Expr_CallInterface_ struct {
	CallInterface *Expr_CallInterface `protobuf:"bytes,35,opt,name=call_interface,json=callInterface,proto3,oneof"`
}

type Expr_SignatoryInterface_ struct {
	SignatoryInterface *Expr_SignatoryInterface `protobuf:"bytes,36,opt,name=signatory_interface,json=signatoryInterface,proto3,oneof"`
}

type Expr_ObserverInterface_ struct {
	ObserverInterface *Expr_ObserverInterface `protobuf:"bytes,37,opt,name=observer_interface,json=observerInterface,proto3,oneof"`
}

type Expr_ViewInterface_ struct {
	ViewInterface *Expr_ViewInterface `protobuf:"bytes,38,opt,name=view_interface,json=viewInterface,proto3,oneof"`
}

type Expr_UnsafeFromInterface_ struct {
	UnsafeFromInterface *Expr_UnsafeFromInterface `protobuf:"bytes,39,opt,name=unsafe_from_interface,json=unsafeFromInterface,proto3,oneof"`
}

type Expr_InterfaceTemplateTypeRep_ struct {
	InterfaceTemplateTypeRep *Expr_InterfaceTemplateTypeRep `protobuf:"bytes,40,opt,name=interface_template_type_rep,json=interfaceTemplateTypeRep,proto3,oneof"`
}

type Expr_ToRequiredInterface_ struct {
	ToRequiredInterface *Expr_ToRequiredInterface `protobuf:"bytes,41,opt,name=to_required_interface,json=toRequiredInterface,proto3,oneof"`
}

type Expr_FromRequiredInterface_ struct {
	FromRequiredInterface *Expr_FromRequiredInterface `protobuf:"bytes,42,opt,name=from_required_interface,json=fromRequiredInterface,proto3,oneof"`
}

type Expr_UnsafeFromRequiredInterface_ struct {
	UnsafeFromRequiredInterface *Expr_UnsafeFromRequiredInterface `protobuf:"bytes,43,opt,name=unsafe_from_required_interface,json=unsafeFromRequiredInterface,proto3,oneof"`
}

type Expr_ChoiceController_ struct {
	ChoiceController *Expr_ChoiceController `protobuf:"bytes,1001,opt,name=choice_controller,json=choiceController,proto3,oneof"`
}

type Expr_ChoiceObserver_ struct {
	ChoiceObserver *Expr_ChoiceObserver `protobuf:"bytes,1002,opt,name=choice_observer,json=choiceObserver,proto3,oneof"`
}

type Expr_Scenario struct {
	Scenario *Scenario `protobuf:"bytes,1003,opt,name=scenario,proto3,oneof"`
}

type Expr_Experimental_ struct {
	Experimental *Expr_Experimental `protobuf:"bytes,9999,opt,name=experimental,proto3,oneof"`
}

func (*Expr_VarInternedStr) isExpr_Sum() {}

func (*Expr_Val) isExpr_Sum() {}

func (*Expr_Builtin) isExpr_Sum() {}

func (*Expr_BuiltinCon) isExpr_Sum() {}

func (*Expr_BuiltinLit) isExpr_Sum() {}

func (*Expr_RecCon_) isExpr_Sum() {}

func (*Expr_RecProj_) isExpr_Sum() {}

func (*Expr_RecUpd_) isExpr_Sum() {}

func (*Expr_VariantCon_) isExpr_Sum() {}

func (*Expr_EnumCon_) isExpr_Sum() {}

func (*Expr_StructCon_) isExpr_Sum() {}

func (*Expr_StructProj_) isExpr_Sum() {}

func (*Expr_StructUpd_) isExpr_Sum() {}

func (*Expr_App_) isExpr_Sum() {}

func (*Expr_TyApp_) isExpr_Sum() {}

func (*Expr_Abs_) isExpr_Sum() {}

func (*Expr_TyAbs_) isExpr_Sum() {}

func (*Expr_Case) isExpr_Sum() {}

func (*Expr_Let) isExpr_Sum() {}

func (*Expr_Nil_) isExpr_Sum() {}

func (*Expr_Cons_) isExpr_Sum() {}

func (*Expr_Update) isExpr_Sum() {}

func (*Expr_OptionalNone_) isExpr_Sum() {}

func (*Expr_OptionalSome_) isExpr_Sum() {}

func (*Expr_ToAny_) isExpr_Sum() {}

func (*Expr_FromAny_) isExpr_Sum() {}

func (*Expr_TypeRep) isExpr_Sum() {}

func (*Expr_ToAnyException_) isExpr_Sum() {}

func (*Expr_FromAnyException_) isExpr_Sum() {}

func (*Expr_Throw_) isExpr_Sum() {}

func (*Expr_ToInterface_) isExpr_Sum() {}

func (*Expr_FromInterface_) isExpr_Sum() {}

func (*Expr_CallInterface_) isExpr_Sum() {}

func (*Expr_SignatoryInterface_) isExpr_Sum() {}

func (*Expr_ObserverInterface_) isExpr_Sum() {}

func (*Expr_ViewInterface_) isExpr_Sum() {}

func (*Expr_UnsafeFromInterface_) isExpr_Sum() {}

func (*Expr_InterfaceTemplateTypeRep_) isExpr_Sum() {}

func (*Expr_ToRequiredInterface_) isExpr_Sum() {}

func (*Expr_FromRequiredInterface_) isExpr_Sum() {}

func (*Expr_UnsafeFromRequiredInterface_) isExpr_Sum() {}

func (*Expr_ChoiceController_) isExpr_Sum() {}

func (*Expr_ChoiceObserver_) isExpr_Sum() {}

func (*Expr_Scenario) isExpr_Sum() {}

func (*Expr_Experimental_) isExpr_Sum() {}

type CaseAlt struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Sum:
	//
	//	*CaseAlt_Default
	//	*CaseAlt_Variant_
	//	*CaseAlt_BuiltinCon
	//	*CaseAlt_Nil
	//	*CaseAlt_Cons_
	//	*CaseAlt_OptionalNone
	//	*CaseAlt_OptionalSome_
	//	*CaseAlt_Enum_
	Sum  isCaseAlt_Sum `protobuf_oneof:"Sum"`
	Body *Expr         `protobuf:"bytes,1,opt,name=body,proto3" json:"body,omitempty"`
}

func (x *CaseAlt) Reset() {
	*x = CaseAlt{}
	mi := &file_com_daml_daml_lf_2_1_daml_lf2_proto_msgTypes[16]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CaseAlt) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CaseAlt) ProtoMessage() {}

func (x *CaseAlt) ProtoReflect() protoreflect.Message {
	mi := &file_com_daml_daml_lf_2_1_daml_lf2_proto_msgTypes[16]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CaseAlt.ProtoReflect.Descriptor instead.
func (*CaseAlt) Descriptor() ([]byte, []int) {
	return file_com_daml_daml_lf_2_1_daml_lf2_proto_rawDescGZIP(), []int{16}
}

func (m *CaseAlt) GetSum() isCaseAlt_Sum {
	if m != nil {
		return m.Sum
	}
	return nil
}

func (x *CaseAlt) GetDefault() *Unit {
	if x, ok := x.GetSum().(*CaseAlt_Default); ok {
		return x.Default
	}
	return nil
}

func (x *CaseAlt) GetVariant() *CaseAlt_Variant {
	if x, ok := x.GetSum().(*CaseAlt_Variant_); ok {
		return x.Variant
	}
	return nil
}

func (x *CaseAlt) GetBuiltinCon() BuiltinCon {
	if x, ok := x.GetSum().(*CaseAlt_BuiltinCon); ok {
		return x.BuiltinCon
	}
	return BuiltinCon_CON_UNIT
}

func (x *CaseAlt) GetNil() *Unit {
	if x, ok := x.GetSum().(*CaseAlt_Nil); ok {
		return x.Nil
	}
	return nil
}

func (x *CaseAlt) GetCons() *CaseAlt_Cons {
	if x, ok := x.GetSum().(*CaseAlt_Cons_); ok {
		return x.Cons
	}
	return nil
}

func (x *CaseAlt) GetOptionalNone() *Unit {
	if x, ok := x.GetSum().(*CaseAlt_OptionalNone); ok {
		return x.OptionalNone
	}
	return nil
}

func (x *CaseAlt) GetOptionalSome() *CaseAlt_OptionalSome {
	if x, ok := x.GetSum().(*CaseAlt_OptionalSome_); ok {
		return x.OptionalSome
	}
	return nil
}

func (x *CaseAlt) GetEnum() *CaseAlt_Enum {
	if x, ok := x.GetSum().(*CaseAlt_Enum_); ok {
		return x.Enum
	}
	return nil
}

func (x *CaseAlt) GetBody() *Expr {
	if x != nil {
		return x.Body
	}
	return nil
}

type isCaseAlt_Sum interface {
	isCaseAlt_Sum()
}

type CaseAlt_Default struct {
	Default *Unit `protobuf:"bytes,2,opt,name=default,proto3,oneof"`
}

type CaseAlt_Variant_ struct {
	Variant *CaseAlt_Variant `protobuf:"bytes,3,opt,name=variant,proto3,oneof"`
}

type CaseAlt_BuiltinCon struct {
	BuiltinCon BuiltinCon `protobuf:"varint,4,opt,name=builtin_con,json=builtinCon,proto3,enum=daml_lf_2.BuiltinCon,oneof"`
}

type CaseAlt_Nil struct {
	Nil *Unit `protobuf:"bytes,5,opt,name=nil,proto3,oneof"`
}

type CaseAlt_Cons_ struct {
	Cons *CaseAlt_Cons `protobuf:"bytes,6,opt,name=cons,proto3,oneof"`
}

type CaseAlt_OptionalNone struct {
	OptionalNone *Unit `protobuf:"bytes,7,opt,name=optional_none,json=optionalNone,proto3,oneof"`
}

type CaseAlt_OptionalSome_ struct {
	OptionalSome *CaseAlt_OptionalSome `protobuf:"bytes,8,opt,name=optional_some,json=optionalSome,proto3,oneof"`
}

type CaseAlt_Enum_ struct {
	Enum *CaseAlt_Enum `protobuf:"bytes,9,opt,name=enum,proto3,oneof"`
}

func (*CaseAlt_Default) isCaseAlt_Sum() {}

func (*CaseAlt_Variant_) isCaseAlt_Sum() {}

func (*CaseAlt_BuiltinCon) isCaseAlt_Sum() {}

func (*CaseAlt_Nil) isCaseAlt_Sum() {}

func (*CaseAlt_Cons_) isCaseAlt_Sum() {}

func (*CaseAlt_OptionalNone) isCaseAlt_Sum() {}

func (*CaseAlt_OptionalSome_) isCaseAlt_Sum() {}

func (*CaseAlt_Enum_) isCaseAlt_Sum() {}

type Case struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Scrut *Expr      `protobuf:"bytes,1,opt,name=scrut,proto3" json:"scrut,omitempty"`
	Alts  []*CaseAlt `protobuf:"bytes,2,rep,name=alts,proto3" json:"alts,omitempty"`
}

func (x *Case) Reset() {
	*x = Case{}
	mi := &file_com_daml_daml_lf_2_1_daml_lf2_proto_msgTypes[17]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Case) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Case) ProtoMessage() {}

func (x *Case) ProtoReflect() protoreflect.Message {
	mi := &file_com_daml_daml_lf_2_1_daml_lf2_proto_msgTypes[17]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Case.ProtoReflect.Descriptor instead.
func (*Case) Descriptor() ([]byte, []int) {
	return file_com_daml_daml_lf_2_1_daml_lf2_proto_rawDescGZIP(), []int{17}
}

func (x *Case) GetScrut() *Expr {
	if x != nil {
		return x.Scrut
	}
	return nil
}

func (x *Case) GetAlts() []*CaseAlt {
	if x != nil {
		return x.Alts
	}
	return nil
}

type Block struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Bindings []*Binding `protobuf:"bytes,1,rep,name=bindings,proto3" json:"bindings,omitempty"`
	Body     *Expr      `protobuf:"bytes,2,opt,name=body,proto3" json:"body,omitempty"`
}

func (x *Block) Reset() {
	*x = Block{}
	mi := &file_com_daml_daml_lf_2_1_daml_lf2_proto_msgTypes[18]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Block) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Block) ProtoMessage() {}

func (x *Block) ProtoReflect() protoreflect.Message {
	mi := &file_com_daml_daml_lf_2_1_daml_lf2_proto_msgTypes[18]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Block.ProtoReflect.Descriptor instead.
func (*Block) Descriptor() ([]byte, []int) {
	return file_com_daml_daml_lf_2_1_daml_lf2_proto_rawDescGZIP(), []int{18}
}

func (x *Block) GetBindings() []*Binding {
	if x != nil {
		return x.Bindings
	}
	return nil
}

func (x *Block) GetBody() *Expr {
	if x != nil {
		return x.Body
	}
	return nil
}

type Pure struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type *Type `protobuf:"bytes,1,opt,name=type,proto3" json:"type,omitempty"`
	Expr *Expr `protobuf:"bytes,2,opt,name=expr,proto3" json:"expr,omitempty"`
}

func (x *Pure) Reset() {
	*x = Pure{}
	mi := &file_com_daml_daml_lf_2_1_daml_lf2_proto_msgTypes[19]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Pure) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Pure) ProtoMessage() {}

func (x *Pure) ProtoReflect() protoreflect.Message {
	mi := &file_com_daml_daml_lf_2_1_daml_lf2_proto_msgTypes[19]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Pure.ProtoReflect.Descriptor instead.
func (*Pure) Descriptor() ([]byte, []int) {
	return file_com_daml_daml_lf_2_1_daml_lf2_proto_rawDescGZIP(), []int{19}
}

func (x *Pure) GetType() *Type {
	if x != nil {
		return x.Type
	}
	return nil
}

func (x *Pure) GetExpr() *Expr {
	if x != nil {
		return x.Expr
	}
	return nil
}

type Update struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Sum:
	//
	//	*Update_Pure
	//	*Update_Block
	//	*Update_Create_
	//	*Update_Exercise_
	//	*Update_ExerciseByKey_
	//	*Update_Fetch_
	//	*Update_GetTime
	//	*Update_LookupByKey
	//	*Update_FetchByKey
	//	*Update_EmbedExpr_
	//	*Update_TryCatch_
	//	*Update_CreateInterface_
	//	*Update_ExerciseInterface_
	//	*Update_FetchInterface_
	//	*Update_DynamicExercise_
	//	*Update_SoftFetch_
	//	*Update_SoftExercise_
	Sum isUpdate_Sum `protobuf_oneof:"Sum"`
}

func (x *Update) Reset() {
	*x = Update{}
	mi := &file_com_daml_daml_lf_2_1_daml_lf2_proto_msgTypes[20]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Update) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Update) ProtoMessage() {}

func (x *Update) ProtoReflect() protoreflect.Message {
	mi := &file_com_daml_daml_lf_2_1_daml_lf2_proto_msgTypes[20]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Update.ProtoReflect.Descriptor instead.
func (*Update) Descriptor() ([]byte, []int) {
	return file_com_daml_daml_lf_2_1_daml_lf2_proto_rawDescGZIP(), []int{20}
}

func (m *Update) GetSum() isUpdate_Sum {
	if m != nil {
		return m.Sum
	}
	return nil
}

func (x *Update) GetPure() *Pure {
	if x, ok := x.GetSum().(*Update_Pure); ok {
		return x.Pure
	}
	return nil
}

func (x *Update) GetBlock() *Block {
	if x, ok := x.GetSum().(*Update_Block); ok {
		return x.Block
	}
	return nil
}

func (x *Update) GetCreate() *Update_Create {
	if x, ok := x.GetSum().(*Update_Create_); ok {
		return x.Create
	}
	return nil
}

func (x *Update) GetExercise() *Update_Exercise {
	if x, ok := x.GetSum().(*Update_Exercise_); ok {
		return x.Exercise
	}
	return nil
}

func (x *Update) GetExerciseByKey() *Update_ExerciseByKey {
	if x, ok := x.GetSum().(*Update_ExerciseByKey_); ok {
		return x.ExerciseByKey
	}
	return nil
}

func (x *Update) GetFetch() *Update_Fetch {
	if x, ok := x.GetSum().(*Update_Fetch_); ok {
		return x.Fetch
	}
	return nil
}

func (x *Update) GetGetTime() *Unit {
	if x, ok := x.GetSum().(*Update_GetTime); ok {
		return x.GetTime
	}
	return nil
}

func (x *Update) GetLookupByKey() *Update_RetrieveByKey {
	if x, ok := x.GetSum().(*Update_LookupByKey); ok {
		return x.LookupByKey
	}
	return nil
}

func (x *Update) GetFetchByKey() *Update_RetrieveByKey {
	if x, ok := x.GetSum().(*Update_FetchByKey); ok {
		return x.FetchByKey
	}
	return nil
}

func (x *Update) GetEmbedExpr() *Update_EmbedExpr {
	if x, ok := x.GetSum().(*Update_EmbedExpr_); ok {
		return x.EmbedExpr
	}
	return nil
}

func (x *Update) GetTryCatch() *Update_TryCatch {
	if x, ok := x.GetSum().(*Update_TryCatch_); ok {
		return x.TryCatch
	}
	return nil
}

func (x *Update) GetCreateInterface() *Update_CreateInterface {
	if x, ok := x.GetSum().(*Update_CreateInterface_); ok {
		return x.CreateInterface
	}
	return nil
}

func (x *Update) GetExerciseInterface() *Update_ExerciseInterface {
	if x, ok := x.GetSum().(*Update_ExerciseInterface_); ok {
		return x.ExerciseInterface
	}
	return nil
}

func (x *Update) GetFetchInterface() *Update_FetchInterface {
	if x, ok := x.GetSum().(*Update_FetchInterface_); ok {
		return x.FetchInterface
	}
	return nil
}

func (x *Update) GetDynamicExercise() *Update_DynamicExercise {
	if x, ok := x.GetSum().(*Update_DynamicExercise_); ok {
		return x.DynamicExercise
	}
	return nil
}

func (x *Update) GetSoftFetch() *Update_SoftFetch {
	if x, ok := x.GetSum().(*Update_SoftFetch_); ok {
		return x.SoftFetch
	}
	return nil
}

func (x *Update) GetSoftExercise() *Update_SoftExercise {
	if x, ok := x.GetSum().(*Update_SoftExercise_); ok {
		return x.SoftExercise
	}
	return nil
}

type isUpdate_Sum interface {
	isUpdate_Sum()
}

type Update_Pure struct {
	Pure *Pure `protobuf:"bytes,1,opt,name=pure,proto3,oneof"`
}

type Update_Block struct {
	Block *Block `protobuf:"bytes,2,opt,name=block,proto3,oneof"`
}

type Update_Create_ struct {
	Create *Update_Create `protobuf:"bytes,3,opt,name=create,proto3,oneof"`
}

type Update_Exercise_ struct {
	Exercise *Update_Exercise `protobuf:"bytes,4,opt,name=exercise,proto3,oneof"`
}

type Update_ExerciseByKey_ struct {
	ExerciseByKey *Update_ExerciseByKey `protobuf:"bytes,10,opt,name=exercise_by_key,json=exerciseByKey,proto3,oneof"`
}

type Update_Fetch_ struct {
	Fetch *Update_Fetch `protobuf:"bytes,5,opt,name=fetch,proto3,oneof"`
}

type Update_GetTime struct {
	GetTime *Unit `protobuf:"bytes,6,opt,name=get_time,json=getTime,proto3,oneof"`
}

type Update_LookupByKey struct {
	LookupByKey *Update_RetrieveByKey `protobuf:"bytes,8,opt,name=lookup_by_key,json=lookupByKey,proto3,oneof"`
}

type Update_FetchByKey struct {
	FetchByKey *Update_RetrieveByKey `protobuf:"bytes,9,opt,name=fetch_by_key,json=fetchByKey,proto3,oneof"`
}

type Update_EmbedExpr_ struct {
	EmbedExpr *Update_EmbedExpr `protobuf:"bytes,7,opt,name=embed_expr,json=embedExpr,proto3,oneof"`
}

type Update_TryCatch_ struct {
	TryCatch *Update_TryCatch `protobuf:"bytes,11,opt,name=try_catch,json=tryCatch,proto3,oneof"`
}

type Update_CreateInterface_ struct {
	CreateInterface *Update_CreateInterface `protobuf:"bytes,12,opt,name=create_interface,json=createInterface,proto3,oneof"`
}

type Update_ExerciseInterface_ struct {
	ExerciseInterface *Update_ExerciseInterface `protobuf:"bytes,13,opt,name=exercise_interface,json=exerciseInterface,proto3,oneof"`
}

type Update_FetchInterface_ struct {
	FetchInterface *Update_FetchInterface `protobuf:"bytes,14,opt,name=fetch_interface,json=fetchInterface,proto3,oneof"`
}

type Update_DynamicExercise_ struct {
	DynamicExercise *Update_DynamicExercise `protobuf:"bytes,1001,opt,name=dynamic_exercise,json=dynamicExercise,proto3,oneof"`
}

type Update_SoftFetch_ struct {
	SoftFetch *Update_SoftFetch `protobuf:"bytes,1002,opt,name=soft_fetch,json=softFetch,proto3,oneof"`
}

type Update_SoftExercise_ struct {
	SoftExercise *Update_SoftExercise `protobuf:"bytes,1003,opt,name=soft_exercise,json=softExercise,proto3,oneof"`
}

func (*Update_Pure) isUpdate_Sum() {}

func (*Update_Block) isUpdate_Sum() {}

func (*Update_Create_) isUpdate_Sum() {}

func (*Update_Exercise_) isUpdate_Sum() {}

func (*Update_ExerciseByKey_) isUpdate_Sum() {}

func (*Update_Fetch_) isUpdate_Sum() {}

func (*Update_GetTime) isUpdate_Sum() {}

func (*Update_LookupByKey) isUpdate_Sum() {}

func (*Update_FetchByKey) isUpdate_Sum() {}

func (*Update_EmbedExpr_) isUpdate_Sum() {}

func (*Update_TryCatch_) isUpdate_Sum() {}

func (*Update_CreateInterface_) isUpdate_Sum() {}

func (*Update_ExerciseInterface_) isUpdate_Sum() {}

func (*Update_FetchInterface_) isUpdate_Sum() {}

func (*Update_DynamicExercise_) isUpdate_Sum() {}

func (*Update_SoftFetch_) isUpdate_Sum() {}

func (*Update_SoftExercise_) isUpdate_Sum() {}

type Scenario struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Sum:
	//
	//	*Scenario_Pure
	//	*Scenario_Block
	//	*Scenario_Commit_
	//	*Scenario_MustFailAt
	//	*Scenario_Pass
	//	*Scenario_GetTime
	//	*Scenario_GetParty
	//	*Scenario_EmbedExpr_
	Sum isScenario_Sum `protobuf_oneof:"Sum"`
}

func (x *Scenario) Reset() {
	*x = Scenario{}
	mi := &file_com_daml_daml_lf_2_1_daml_lf2_proto_msgTypes[21]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Scenario) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Scenario) ProtoMessage() {}

func (x *Scenario) ProtoReflect() protoreflect.Message {
	mi := &file_com_daml_daml_lf_2_1_daml_lf2_proto_msgTypes[21]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Scenario.ProtoReflect.Descriptor instead.
func (*Scenario) Descriptor() ([]byte, []int) {
	return file_com_daml_daml_lf_2_1_daml_lf2_proto_rawDescGZIP(), []int{21}
}

func (m *Scenario) GetSum() isScenario_Sum {
	if m != nil {
		return m.Sum
	}
	return nil
}

func (x *Scenario) GetPure() *Pure {
	if x, ok := x.GetSum().(*Scenario_Pure); ok {
		return x.Pure
	}
	return nil
}

func (x *Scenario) GetBlock() *Block {
	if x, ok := x.GetSum().(*Scenario_Block); ok {
		return x.Block
	}
	return nil
}

func (x *Scenario) GetCommit() *Scenario_Commit {
	if x, ok := x.GetSum().(*Scenario_Commit_); ok {
		return x.Commit
	}
	return nil
}

func (x *Scenario) GetMustFailAt() *Scenario_Commit {
	if x, ok := x.GetSum().(*Scenario_MustFailAt); ok {
		return x.MustFailAt
	}
	return nil
}

func (x *Scenario) GetPass() *Expr {
	if x, ok := x.GetSum().(*Scenario_Pass); ok {
		return x.Pass
	}
	return nil
}

func (x *Scenario) GetGetTime() *Unit {
	if x, ok := x.GetSum().(*Scenario_GetTime); ok {
		return x.GetTime
	}
	return nil
}

func (x *Scenario) GetGetParty() *Expr {
	if x, ok := x.GetSum().(*Scenario_GetParty); ok {
		return x.GetParty
	}
	return nil
}

func (x *Scenario) GetEmbedExpr() *Scenario_EmbedExpr {
	if x, ok := x.GetSum().(*Scenario_EmbedExpr_); ok {
		return x.EmbedExpr
	}
	return nil
}

type isScenario_Sum interface {
	isScenario_Sum()
}

type Scenario_Pure struct {
	Pure *Pure `protobuf:"bytes,1,opt,name=pure,proto3,oneof"`
}

type Scenario_Block struct {
	Block *Block `protobuf:"bytes,2,opt,name=block,proto3,oneof"`
}

type Scenario_Commit_ struct {
	Commit *Scenario_Commit `protobuf:"bytes,3,opt,name=commit,proto3,oneof"`
}

type Scenario_MustFailAt struct {
	MustFailAt *Scenario_Commit `protobuf:"bytes,4,opt,name=mustFailAt,proto3,oneof"`
}

type Scenario_Pass struct {
	Pass *Expr `protobuf:"bytes,5,opt,name=pass,proto3,oneof"`
}

type Scenario_GetTime struct {
	GetTime *Unit `protobuf:"bytes,6,opt,name=get_time,json=getTime,proto3,oneof"`
}

type Scenario_GetParty struct {
	GetParty *Expr `protobuf:"bytes,7,opt,name=get_party,json=getParty,proto3,oneof"`
}

type Scenario_EmbedExpr_ struct {
	EmbedExpr *Scenario_EmbedExpr `protobuf:"bytes,8,opt,name=embed_expr,json=embedExpr,proto3,oneof"`
}

func (*Scenario_Pure) isScenario_Sum() {}

func (*Scenario_Block) isScenario_Sum() {}

func (*Scenario_Commit_) isScenario_Sum() {}

func (*Scenario_MustFailAt) isScenario_Sum() {}

func (*Scenario_Pass) isScenario_Sum() {}

func (*Scenario_GetTime) isScenario_Sum() {}

func (*Scenario_GetParty) isScenario_Sum() {}

func (*Scenario_EmbedExpr_) isScenario_Sum() {}

type TemplateChoice struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Location              *Location    `protobuf:"bytes,1,opt,name=location,proto3" json:"location,omitempty"`
	NameInternedStr       int32        `protobuf:"varint,2,opt,name=name_interned_str,json=nameInternedStr,proto3" json:"name_interned_str,omitempty"`
	Consuming             bool         `protobuf:"varint,3,opt,name=consuming,proto3" json:"consuming,omitempty"`
	Controllers           *Expr        `protobuf:"bytes,4,opt,name=controllers,proto3" json:"controllers,omitempty"`
	Observers             *Expr        `protobuf:"bytes,5,opt,name=observers,proto3" json:"observers,omitempty"`
	ArgBinder             *VarWithType `protobuf:"bytes,6,opt,name=arg_binder,json=argBinder,proto3" json:"arg_binder,omitempty"`
	RetType               *Type        `protobuf:"bytes,8,opt,name=ret_type,json=retType,proto3" json:"ret_type,omitempty"`
	Update                *Expr        `protobuf:"bytes,9,opt,name=update,proto3" json:"update,omitempty"`
	SelfBinderInternedStr int32        `protobuf:"varint,10,opt,name=self_binder_interned_str,json=selfBinderInternedStr,proto3" json:"self_binder_interned_str,omitempty"`
	Authorizers           *Expr        `protobuf:"bytes,1001,opt,name=authorizers,proto3" json:"authorizers,omitempty"`
}

func (x *TemplateChoice) Reset() {
	*x = TemplateChoice{}
	mi := &file_com_daml_daml_lf_2_1_daml_lf2_proto_msgTypes[22]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TemplateChoice) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TemplateChoice) ProtoMessage() {}

func (x *TemplateChoice) ProtoReflect() protoreflect.Message {
	mi := &file_com_daml_daml_lf_2_1_daml_lf2_proto_msgTypes[22]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TemplateChoice.ProtoReflect.Descriptor instead.
func (*TemplateChoice) Descriptor() ([]byte, []int) {
	return file_com_daml_daml_lf_2_1_daml_lf2_proto_rawDescGZIP(), []int{22}
}

func (x *TemplateChoice) GetLocation() *Location {
	if x != nil {
		return x.Location
	}
	return nil
}

func (x *TemplateChoice) GetNameInternedStr() int32 {
	if x != nil {
		return x.NameInternedStr
	}
	return 0
}

func (x *TemplateChoice) GetConsuming() bool {
	if x != nil {
		return x.Consuming
	}
	return false
}

func (x *TemplateChoice) GetControllers() *Expr {
	if x != nil {
		return x.Controllers
	}
	return nil
}

func (x *TemplateChoice) GetObservers() *Expr {
	if x != nil {
		return x.Observers
	}
	return nil
}

func (x *TemplateChoice) GetArgBinder() *VarWithType {
	if x != nil {
		return x.ArgBinder
	}
	return nil
}

func (x *TemplateChoice) GetRetType() *Type {
	if x != nil {
		return x.RetType
	}
	return nil
}

func (x *TemplateChoice) GetUpdate() *Expr {
	if x != nil {
		return x.Update
	}
	return nil
}

func (x *TemplateChoice) GetSelfBinderInternedStr() int32 {
	if x != nil {
		return x.SelfBinderInternedStr
	}
	return 0
}

func (x *TemplateChoice) GetAuthorizers() *Expr {
	if x != nil {
		return x.Authorizers
	}
	return nil
}

type InterfaceInstanceBody struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Methods []*InterfaceInstanceBody_InterfaceInstanceMethod `protobuf:"bytes,1,rep,name=methods,proto3" json:"methods,omitempty"`
	View    *Expr                                            `protobuf:"bytes,2,opt,name=view,proto3" json:"view,omitempty"`
}

func (x *InterfaceInstanceBody) Reset() {
	*x = InterfaceInstanceBody{}
	mi := &file_com_daml_daml_lf_2_1_daml_lf2_proto_msgTypes[23]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *InterfaceInstanceBody) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InterfaceInstanceBody) ProtoMessage() {}

func (x *InterfaceInstanceBody) ProtoReflect() protoreflect.Message {
	mi := &file_com_daml_daml_lf_2_1_daml_lf2_proto_msgTypes[23]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InterfaceInstanceBody.ProtoReflect.Descriptor instead.
func (*InterfaceInstanceBody) Descriptor() ([]byte, []int) {
	return file_com_daml_daml_lf_2_1_daml_lf2_proto_rawDescGZIP(), []int{23}
}

func (x *InterfaceInstanceBody) GetMethods() []*InterfaceInstanceBody_InterfaceInstanceMethod {
	if x != nil {
		return x.Methods
	}
	return nil
}

func (x *InterfaceInstanceBody) GetView() *Expr {
	if x != nil {
		return x.View
	}
	return nil
}

type DefTemplate struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TyconInternedDname int32                     `protobuf:"varint,1,opt,name=tycon_interned_dname,json=tyconInternedDname,proto3" json:"tycon_interned_dname,omitempty"`
	ParamInternedStr   int32                     `protobuf:"varint,2,opt,name=param_interned_str,json=paramInternedStr,proto3" json:"param_interned_str,omitempty"`
	Precond            *Expr                     `protobuf:"bytes,3,opt,name=precond,proto3" json:"precond,omitempty"`
	Signatories        *Expr                     `protobuf:"bytes,4,opt,name=signatories,proto3" json:"signatories,omitempty"`
	Agreement          *Expr                     `protobuf:"bytes,5,opt,name=agreement,proto3" json:"agreement,omitempty"`
	Choices            []*TemplateChoice         `protobuf:"bytes,6,rep,name=choices,proto3" json:"choices,omitempty"`
	Observers          *Expr                     `protobuf:"bytes,7,opt,name=observers,proto3" json:"observers,omitempty"`
	Location           *Location                 `protobuf:"bytes,8,opt,name=location,proto3" json:"location,omitempty"`
	Key                *DefTemplate_DefKey       `protobuf:"bytes,9,opt,name=key,proto3" json:"key,omitempty"`
	Implements         []*DefTemplate_Implements `protobuf:"bytes,10,rep,name=implements,proto3" json:"implements,omitempty"`
}

func (x *DefTemplate) Reset() {
	*x = DefTemplate{}
	mi := &file_com_daml_daml_lf_2_1_daml_lf2_proto_msgTypes[24]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DefTemplate) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DefTemplate) ProtoMessage() {}

func (x *DefTemplate) ProtoReflect() protoreflect.Message {
	mi := &file_com_daml_daml_lf_2_1_daml_lf2_proto_msgTypes[24]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DefTemplate.ProtoReflect.Descriptor instead.
func (*DefTemplate) Descriptor() ([]byte, []int) {
	return file_com_daml_daml_lf_2_1_daml_lf2_proto_rawDescGZIP(), []int{24}
}

func (x *DefTemplate) GetTyconInternedDname() int32 {
	if x != nil {
		return x.TyconInternedDname
	}
	return 0
}

func (x *DefTemplate) GetParamInternedStr() int32 {
	if x != nil {
		return x.ParamInternedStr
	}
	return 0
}

func (x *DefTemplate) GetPrecond() *Expr {
	if x != nil {
		return x.Precond
	}
	return nil
}

func (x *DefTemplate) GetSignatories() *Expr {
	if x != nil {
		return x.Signatories
	}
	return nil
}

func (x *DefTemplate) GetAgreement() *Expr {
	if x != nil {
		return x.Agreement
	}
	return nil
}

func (x *DefTemplate) GetChoices() []*TemplateChoice {
	if x != nil {
		return x.Choices
	}
	return nil
}

func (x *DefTemplate) GetObservers() *Expr {
	if x != nil {
		return x.Observers
	}
	return nil
}

func (x *DefTemplate) GetLocation() *Location {
	if x != nil {
		return x.Location
	}
	return nil
}

func (x *DefTemplate) GetKey() *DefTemplate_DefKey {
	if x != nil {
		return x.Key
	}
	return nil
}

func (x *DefTemplate) GetImplements() []*DefTemplate_Implements {
	if x != nil {
		return x.Implements
	}
	return nil
}

type InterfaceMethod struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Location           *Location `protobuf:"bytes,1,opt,name=location,proto3" json:"location,omitempty"`
	MethodInternedName int32     `protobuf:"varint,2,opt,name=method_interned_name,json=methodInternedName,proto3" json:"method_interned_name,omitempty"`
	Type               *Type     `protobuf:"bytes,3,opt,name=type,proto3" json:"type,omitempty"`
}

func (x *InterfaceMethod) Reset() {
	*x = InterfaceMethod{}
	mi := &file_com_daml_daml_lf_2_1_daml_lf2_proto_msgTypes[25]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *InterfaceMethod) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InterfaceMethod) ProtoMessage() {}

func (x *InterfaceMethod) ProtoReflect() protoreflect.Message {
	mi := &file_com_daml_daml_lf_2_1_daml_lf2_proto_msgTypes[25]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InterfaceMethod.ProtoReflect.Descriptor instead.
func (*InterfaceMethod) Descriptor() ([]byte, []int) {
	return file_com_daml_daml_lf_2_1_daml_lf2_proto_rawDescGZIP(), []int{25}
}

func (x *InterfaceMethod) GetLocation() *Location {
	if x != nil {
		return x.Location
	}
	return nil
}

func (x *InterfaceMethod) GetMethodInternedName() int32 {
	if x != nil {
		return x.MethodInternedName
	}
	return 0
}

func (x *InterfaceMethod) GetType() *Type {
	if x != nil {
		return x.Type
	}
	return nil
}

type DefInterface struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Location           *Location          `protobuf:"bytes,1,opt,name=location,proto3" json:"location,omitempty"`
	TyconInternedDname int32              `protobuf:"varint,2,opt,name=tycon_interned_dname,json=tyconInternedDname,proto3" json:"tycon_interned_dname,omitempty"`
	Methods            []*InterfaceMethod `protobuf:"bytes,3,rep,name=methods,proto3" json:"methods,omitempty"`
	ParamInternedStr   int32              `protobuf:"varint,4,opt,name=param_interned_str,json=paramInternedStr,proto3" json:"param_interned_str,omitempty"`
	Choices            []*TemplateChoice  `protobuf:"bytes,5,rep,name=choices,proto3" json:"choices,omitempty"`
	View               *Type              `protobuf:"bytes,6,opt,name=view,proto3" json:"view,omitempty"`
	Requires           []*TypeConName     `protobuf:"bytes,7,rep,name=requires,proto3" json:"requires,omitempty"`
}

func (x *DefInterface) Reset() {
	*x = DefInterface{}
	mi := &file_com_daml_daml_lf_2_1_daml_lf2_proto_msgTypes[26]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DefInterface) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DefInterface) ProtoMessage() {}

func (x *DefInterface) ProtoReflect() protoreflect.Message {
	mi := &file_com_daml_daml_lf_2_1_daml_lf2_proto_msgTypes[26]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DefInterface.ProtoReflect.Descriptor instead.
func (*DefInterface) Descriptor() ([]byte, []int) {
	return file_com_daml_daml_lf_2_1_daml_lf2_proto_rawDescGZIP(), []int{26}
}

func (x *DefInterface) GetLocation() *Location {
	if x != nil {
		return x.Location
	}
	return nil
}

func (x *DefInterface) GetTyconInternedDname() int32 {
	if x != nil {
		return x.TyconInternedDname
	}
	return 0
}

func (x *DefInterface) GetMethods() []*InterfaceMethod {
	if x != nil {
		return x.Methods
	}
	return nil
}

func (x *DefInterface) GetParamInternedStr() int32 {
	if x != nil {
		return x.ParamInternedStr
	}
	return 0
}

func (x *DefInterface) GetChoices() []*TemplateChoice {
	if x != nil {
		return x.Choices
	}
	return nil
}

func (x *DefInterface) GetView() *Type {
	if x != nil {
		return x.View
	}
	return nil
}

func (x *DefInterface) GetRequires() []*TypeConName {
	if x != nil {
		return x.Requires
	}
	return nil
}

type DefException struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	NameInternedDname int32     `protobuf:"varint,1,opt,name=name_interned_dname,json=nameInternedDname,proto3" json:"name_interned_dname,omitempty"`
	Location          *Location `protobuf:"bytes,2,opt,name=location,proto3" json:"location,omitempty"`
	Message           *Expr     `protobuf:"bytes,3,opt,name=message,proto3" json:"message,omitempty"`
}

func (x *DefException) Reset() {
	*x = DefException{}
	mi := &file_com_daml_daml_lf_2_1_daml_lf2_proto_msgTypes[27]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DefException) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DefException) ProtoMessage() {}

func (x *DefException) ProtoReflect() protoreflect.Message {
	mi := &file_com_daml_daml_lf_2_1_daml_lf2_proto_msgTypes[27]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DefException.ProtoReflect.Descriptor instead.
func (*DefException) Descriptor() ([]byte, []int) {
	return file_com_daml_daml_lf_2_1_daml_lf2_proto_rawDescGZIP(), []int{27}
}

func (x *DefException) GetNameInternedDname() int32 {
	if x != nil {
		return x.NameInternedDname
	}
	return 0
}

func (x *DefException) GetLocation() *Location {
	if x != nil {
		return x.Location
	}
	return nil
}

func (x *DefException) GetMessage() *Expr {
	if x != nil {
		return x.Message
	}
	return nil
}

type DefDataType struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Location          *Location          `protobuf:"bytes,1,opt,name=location,proto3" json:"location,omitempty"`
	NameInternedDname int32              `protobuf:"varint,2,opt,name=name_interned_dname,json=nameInternedDname,proto3" json:"name_interned_dname,omitempty"`
	Params            []*TypeVarWithKind `protobuf:"bytes,3,rep,name=params,proto3" json:"params,omitempty"`
	Serializable      bool               `protobuf:"varint,4,opt,name=serializable,proto3" json:"serializable,omitempty"`
	// Types that are assignable to DataCons:
	//
	//	*DefDataType_Record
	//	*DefDataType_Variant
	//	*DefDataType_Enum
	//	*DefDataType_Interface
	DataCons isDefDataType_DataCons `protobuf_oneof:"DataCons"`
}

func (x *DefDataType) Reset() {
	*x = DefDataType{}
	mi := &file_com_daml_daml_lf_2_1_daml_lf2_proto_msgTypes[28]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DefDataType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DefDataType) ProtoMessage() {}

func (x *DefDataType) ProtoReflect() protoreflect.Message {
	mi := &file_com_daml_daml_lf_2_1_daml_lf2_proto_msgTypes[28]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DefDataType.ProtoReflect.Descriptor instead.
func (*DefDataType) Descriptor() ([]byte, []int) {
	return file_com_daml_daml_lf_2_1_daml_lf2_proto_rawDescGZIP(), []int{28}
}

func (x *DefDataType) GetLocation() *Location {
	if x != nil {
		return x.Location
	}
	return nil
}

func (x *DefDataType) GetNameInternedDname() int32 {
	if x != nil {
		return x.NameInternedDname
	}
	return 0
}

func (x *DefDataType) GetParams() []*TypeVarWithKind {
	if x != nil {
		return x.Params
	}
	return nil
}

func (x *DefDataType) GetSerializable() bool {
	if x != nil {
		return x.Serializable
	}
	return false
}

func (m *DefDataType) GetDataCons() isDefDataType_DataCons {
	if m != nil {
		return m.DataCons
	}
	return nil
}

func (x *DefDataType) GetRecord() *DefDataType_Fields {
	if x, ok := x.GetDataCons().(*DefDataType_Record); ok {
		return x.Record
	}
	return nil
}

func (x *DefDataType) GetVariant() *DefDataType_Fields {
	if x, ok := x.GetDataCons().(*DefDataType_Variant); ok {
		return x.Variant
	}
	return nil
}

func (x *DefDataType) GetEnum() *DefDataType_EnumConstructors {
	if x, ok := x.GetDataCons().(*DefDataType_Enum); ok {
		return x.Enum
	}
	return nil
}

func (x *DefDataType) GetInterface() *Unit {
	if x, ok := x.GetDataCons().(*DefDataType_Interface); ok {
		return x.Interface
	}
	return nil
}

type isDefDataType_DataCons interface {
	isDefDataType_DataCons()
}

type DefDataType_Record struct {
	Record *DefDataType_Fields `protobuf:"bytes,5,opt,name=record,proto3,oneof"`
}

type DefDataType_Variant struct {
	Variant *DefDataType_Fields `protobuf:"bytes,6,opt,name=variant,proto3,oneof"`
}

type DefDataType_Enum struct {
	Enum *DefDataType_EnumConstructors `protobuf:"bytes,7,opt,name=enum,proto3,oneof"`
}

type DefDataType_Interface struct {
	Interface *Unit `protobuf:"bytes,8,opt,name=interface,proto3,oneof"`
}

func (*DefDataType_Record) isDefDataType_DataCons() {}

func (*DefDataType_Variant) isDefDataType_DataCons() {}

func (*DefDataType_Enum) isDefDataType_DataCons() {}

func (*DefDataType_Interface) isDefDataType_DataCons() {}

type DefTypeSyn struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Location          *Location          `protobuf:"bytes,1,opt,name=location,proto3" json:"location,omitempty"`
	NameInternedDname int32              `protobuf:"varint,2,opt,name=name_interned_dname,json=nameInternedDname,proto3" json:"name_interned_dname,omitempty"`
	Params            []*TypeVarWithKind `protobuf:"bytes,3,rep,name=params,proto3" json:"params,omitempty"`
	Type              *Type              `protobuf:"bytes,4,opt,name=type,proto3" json:"type,omitempty"`
}

func (x *DefTypeSyn) Reset() {
	*x = DefTypeSyn{}
	mi := &file_com_daml_daml_lf_2_1_daml_lf2_proto_msgTypes[29]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DefTypeSyn) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DefTypeSyn) ProtoMessage() {}

func (x *DefTypeSyn) ProtoReflect() protoreflect.Message {
	mi := &file_com_daml_daml_lf_2_1_daml_lf2_proto_msgTypes[29]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DefTypeSyn.ProtoReflect.Descriptor instead.
func (*DefTypeSyn) Descriptor() ([]byte, []int) {
	return file_com_daml_daml_lf_2_1_daml_lf2_proto_rawDescGZIP(), []int{29}
}

func (x *DefTypeSyn) GetLocation() *Location {
	if x != nil {
		return x.Location
	}
	return nil
}

func (x *DefTypeSyn) GetNameInternedDname() int32 {
	if x != nil {
		return x.NameInternedDname
	}
	return 0
}

func (x *DefTypeSyn) GetParams() []*TypeVarWithKind {
	if x != nil {
		return x.Params
	}
	return nil
}

func (x *DefTypeSyn) GetType() *Type {
	if x != nil {
		return x.Type
	}
	return nil
}

type DefValue struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Location     *Location              `protobuf:"bytes,1,opt,name=location,proto3" json:"location,omitempty"`
	NameWithType *DefValue_NameWithType `protobuf:"bytes,2,opt,name=name_with_type,json=nameWithType,proto3" json:"name_with_type,omitempty"`
	Expr         *Expr                  `protobuf:"bytes,3,opt,name=expr,proto3" json:"expr,omitempty"`
	IsTest       bool                   `protobuf:"varint,1000,opt,name=is_test,json=isTest,proto3" json:"is_test,omitempty"`
}

func (x *DefValue) Reset() {
	*x = DefValue{}
	mi := &file_com_daml_daml_lf_2_1_daml_lf2_proto_msgTypes[30]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DefValue) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DefValue) ProtoMessage() {}

func (x *DefValue) ProtoReflect() protoreflect.Message {
	mi := &file_com_daml_daml_lf_2_1_daml_lf2_proto_msgTypes[30]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DefValue.ProtoReflect.Descriptor instead.
func (*DefValue) Descriptor() ([]byte, []int) {
	return file_com_daml_daml_lf_2_1_daml_lf2_proto_rawDescGZIP(), []int{30}
}

func (x *DefValue) GetLocation() *Location {
	if x != nil {
		return x.Location
	}
	return nil
}

func (x *DefValue) GetNameWithType() *DefValue_NameWithType {
	if x != nil {
		return x.NameWithType
	}
	return nil
}

func (x *DefValue) GetExpr() *Expr {
	if x != nil {
		return x.Expr
	}
	return nil
}

func (x *DefValue) GetIsTest() bool {
	if x != nil {
		return x.IsTest
	}
	return false
}

type FeatureFlags struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ForbidPartyLiterals                        bool `protobuf:"varint,1,opt,name=forbidPartyLiterals,proto3" json:"forbidPartyLiterals,omitempty"`
	DontDivulgeContractIdsInCreateArguments    bool `protobuf:"varint,2,opt,name=dontDivulgeContractIdsInCreateArguments,proto3" json:"dontDivulgeContractIdsInCreateArguments,omitempty"`
	DontDiscloseNonConsumingChoicesToObservers bool `protobuf:"varint,3,opt,name=dontDiscloseNonConsumingChoicesToObservers,proto3" json:"dontDiscloseNonConsumingChoicesToObservers,omitempty"`
}

func (x *FeatureFlags) Reset() {
	*x = FeatureFlags{}
	mi := &file_com_daml_daml_lf_2_1_daml_lf2_proto_msgTypes[31]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *FeatureFlags) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FeatureFlags) ProtoMessage() {}

func (x *FeatureFlags) ProtoReflect() protoreflect.Message {
	mi := &file_com_daml_daml_lf_2_1_daml_lf2_proto_msgTypes[31]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FeatureFlags.ProtoReflect.Descriptor instead.
func (*FeatureFlags) Descriptor() ([]byte, []int) {
	return file_com_daml_daml_lf_2_1_daml_lf2_proto_rawDescGZIP(), []int{31}
}

func (x *FeatureFlags) GetForbidPartyLiterals() bool {
	if x != nil {
		return x.ForbidPartyLiterals
	}
	return false
}

func (x *FeatureFlags) GetDontDivulgeContractIdsInCreateArguments() bool {
	if x != nil {
		return x.DontDivulgeContractIdsInCreateArguments
	}
	return false
}

func (x *FeatureFlags) GetDontDiscloseNonConsumingChoicesToObservers() bool {
	if x != nil {
		return x.DontDiscloseNonConsumingChoicesToObservers
	}
	return false
}

type Module struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	NameInternedDname int32           `protobuf:"varint,1,opt,name=name_interned_dname,json=nameInternedDname,proto3" json:"name_interned_dname,omitempty"`
	Flags             *FeatureFlags   `protobuf:"bytes,2,opt,name=flags,proto3" json:"flags,omitempty"`
	Synonyms          []*DefTypeSyn   `protobuf:"bytes,3,rep,name=synonyms,proto3" json:"synonyms,omitempty"`
	DataTypes         []*DefDataType  `protobuf:"bytes,4,rep,name=data_types,json=dataTypes,proto3" json:"data_types,omitempty"`
	Values            []*DefValue     `protobuf:"bytes,5,rep,name=values,proto3" json:"values,omitempty"`
	Templates         []*DefTemplate  `protobuf:"bytes,6,rep,name=templates,proto3" json:"templates,omitempty"`
	Exceptions        []*DefException `protobuf:"bytes,7,rep,name=exceptions,proto3" json:"exceptions,omitempty"`
	Interfaces        []*DefInterface `protobuf:"bytes,8,rep,name=interfaces,proto3" json:"interfaces,omitempty"`
}

func (x *Module) Reset() {
	*x = Module{}
	mi := &file_com_daml_daml_lf_2_1_daml_lf2_proto_msgTypes[32]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Module) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Module) ProtoMessage() {}

func (x *Module) ProtoReflect() protoreflect.Message {
	mi := &file_com_daml_daml_lf_2_1_daml_lf2_proto_msgTypes[32]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Module.ProtoReflect.Descriptor instead.
func (*Module) Descriptor() ([]byte, []int) {
	return file_com_daml_daml_lf_2_1_daml_lf2_proto_rawDescGZIP(), []int{32}
}

func (x *Module) GetNameInternedDname() int32 {
	if x != nil {
		return x.NameInternedDname
	}
	return 0
}

func (x *Module) GetFlags() *FeatureFlags {
	if x != nil {
		return x.Flags
	}
	return nil
}

func (x *Module) GetSynonyms() []*DefTypeSyn {
	if x != nil {
		return x.Synonyms
	}
	return nil
}

func (x *Module) GetDataTypes() []*DefDataType {
	if x != nil {
		return x.DataTypes
	}
	return nil
}

func (x *Module) GetValues() []*DefValue {
	if x != nil {
		return x.Values
	}
	return nil
}

func (x *Module) GetTemplates() []*DefTemplate {
	if x != nil {
		return x.Templates
	}
	return nil
}

func (x *Module) GetExceptions() []*DefException {
	if x != nil {
		return x.Exceptions
	}
	return nil
}

func (x *Module) GetInterfaces() []*DefInterface {
	if x != nil {
		return x.Interfaces
	}
	return nil
}

type InternedDottedName struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SegmentsInternedStr []int32 `protobuf:"varint,1,rep,packed,name=segments_interned_str,json=segmentsInternedStr,proto3" json:"segments_interned_str,omitempty"`
}

func (x *InternedDottedName) Reset() {
	*x = InternedDottedName{}
	mi := &file_com_daml_daml_lf_2_1_daml_lf2_proto_msgTypes[33]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *InternedDottedName) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InternedDottedName) ProtoMessage() {}

func (x *InternedDottedName) ProtoReflect() protoreflect.Message {
	mi := &file_com_daml_daml_lf_2_1_daml_lf2_proto_msgTypes[33]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InternedDottedName.ProtoReflect.Descriptor instead.
func (*InternedDottedName) Descriptor() ([]byte, []int) {
	return file_com_daml_daml_lf_2_1_daml_lf2_proto_rawDescGZIP(), []int{33}
}

func (x *InternedDottedName) GetSegmentsInternedStr() []int32 {
	if x != nil {
		return x.SegmentsInternedStr
	}
	return nil
}

type UpgradedPackageId struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UpgradedPackageIdInternedStr int32 `protobuf:"varint,1,opt,name=upgraded_package_id_interned_str,json=upgradedPackageIdInternedStr,proto3" json:"upgraded_package_id_interned_str,omitempty"`
}

func (x *UpgradedPackageId) Reset() {
	*x = UpgradedPackageId{}
	mi := &file_com_daml_daml_lf_2_1_daml_lf2_proto_msgTypes[34]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpgradedPackageId) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpgradedPackageId) ProtoMessage() {}

func (x *UpgradedPackageId) ProtoReflect() protoreflect.Message {
	mi := &file_com_daml_daml_lf_2_1_daml_lf2_proto_msgTypes[34]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpgradedPackageId.ProtoReflect.Descriptor instead.
func (*UpgradedPackageId) Descriptor() ([]byte, []int) {
	return file_com_daml_daml_lf_2_1_daml_lf2_proto_rawDescGZIP(), []int{34}
}

func (x *UpgradedPackageId) GetUpgradedPackageIdInternedStr() int32 {
	if x != nil {
		return x.UpgradedPackageIdInternedStr
	}
	return 0
}

type PackageMetadata struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	NameInternedStr    int32              `protobuf:"varint,1,opt,name=name_interned_str,json=nameInternedStr,proto3" json:"name_interned_str,omitempty"`
	VersionInternedStr int32              `protobuf:"varint,2,opt,name=version_interned_str,json=versionInternedStr,proto3" json:"version_interned_str,omitempty"`
	UpgradedPackageId  *UpgradedPackageId `protobuf:"bytes,3,opt,name=upgraded_package_id,json=upgradedPackageId,proto3" json:"upgraded_package_id,omitempty"`
}

func (x *PackageMetadata) Reset() {
	*x = PackageMetadata{}
	mi := &file_com_daml_daml_lf_2_1_daml_lf2_proto_msgTypes[35]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PackageMetadata) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PackageMetadata) ProtoMessage() {}

func (x *PackageMetadata) ProtoReflect() protoreflect.Message {
	mi := &file_com_daml_daml_lf_2_1_daml_lf2_proto_msgTypes[35]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PackageMetadata.ProtoReflect.Descriptor instead.
func (*PackageMetadata) Descriptor() ([]byte, []int) {
	return file_com_daml_daml_lf_2_1_daml_lf2_proto_rawDescGZIP(), []int{35}
}

func (x *PackageMetadata) GetNameInternedStr() int32 {
	if x != nil {
		return x.NameInternedStr
	}
	return 0
}

func (x *PackageMetadata) GetVersionInternedStr() int32 {
	if x != nil {
		return x.VersionInternedStr
	}
	return 0
}

func (x *PackageMetadata) GetUpgradedPackageId() *UpgradedPackageId {
	if x != nil {
		return x.UpgradedPackageId
	}
	return nil
}

type Package struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Modules             []*Module             `protobuf:"bytes,1,rep,name=modules,proto3" json:"modules,omitempty"`
	InternedStrings     []string              `protobuf:"bytes,2,rep,name=interned_strings,json=internedStrings,proto3" json:"interned_strings,omitempty"`
	InternedDottedNames []*InternedDottedName `protobuf:"bytes,3,rep,name=interned_dotted_names,json=internedDottedNames,proto3" json:"interned_dotted_names,omitempty"`
	Metadata            *PackageMetadata      `protobuf:"bytes,4,opt,name=metadata,proto3" json:"metadata,omitempty"`
	InternedTypes       []*Type               `protobuf:"bytes,5,rep,name=interned_types,json=internedTypes,proto3" json:"interned_types,omitempty"`
}

func (x *Package) Reset() {
	*x = Package{}
	mi := &file_com_daml_daml_lf_2_1_daml_lf2_proto_msgTypes[36]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Package) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Package) ProtoMessage() {}

func (x *Package) ProtoReflect() protoreflect.Message {
	mi := &file_com_daml_daml_lf_2_1_daml_lf2_proto_msgTypes[36]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Package.ProtoReflect.Descriptor instead.
func (*Package) Descriptor() ([]byte, []int) {
	return file_com_daml_daml_lf_2_1_daml_lf2_proto_rawDescGZIP(), []int{36}
}

func (x *Package) GetModules() []*Module {
	if x != nil {
		return x.Modules
	}
	return nil
}

func (x *Package) GetInternedStrings() []string {
	if x != nil {
		return x.InternedStrings
	}
	return nil
}

func (x *Package) GetInternedDottedNames() []*InternedDottedName {
	if x != nil {
		return x.InternedDottedNames
	}
	return nil
}

func (x *Package) GetMetadata() *PackageMetadata {
	if x != nil {
		return x.Metadata
	}
	return nil
}

func (x *Package) GetInternedTypes() []*Type {
	if x != nil {
		return x.InternedTypes
	}
	return nil
}

type Kind_Arrow struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Params []*Kind `protobuf:"bytes,1,rep,name=params,proto3" json:"params,omitempty"`
	Result *Kind   `protobuf:"bytes,2,opt,name=result,proto3" json:"result,omitempty"`
}

func (x *Kind_Arrow) Reset() {
	*x = Kind_Arrow{}
	mi := &file_com_daml_daml_lf_2_1_daml_lf2_proto_msgTypes[37]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Kind_Arrow) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Kind_Arrow) ProtoMessage() {}

func (x *Kind_Arrow) ProtoReflect() protoreflect.Message {
	mi := &file_com_daml_daml_lf_2_1_daml_lf2_proto_msgTypes[37]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Kind_Arrow.ProtoReflect.Descriptor instead.
func (*Kind_Arrow) Descriptor() ([]byte, []int) {
	return file_com_daml_daml_lf_2_1_daml_lf2_proto_rawDescGZIP(), []int{11, 0}
}

func (x *Kind_Arrow) GetParams() []*Kind {
	if x != nil {
		return x.Params
	}
	return nil
}

func (x *Kind_Arrow) GetResult() *Kind {
	if x != nil {
		return x.Result
	}
	return nil
}

type Type_Var struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	VarInternedStr int32   `protobuf:"varint,3,opt,name=var_interned_str,json=varInternedStr,proto3" json:"var_interned_str,omitempty"`
	Args           []*Type `protobuf:"bytes,2,rep,name=args,proto3" json:"args,omitempty"`
}

func (x *Type_Var) Reset() {
	*x = Type_Var{}
	mi := &file_com_daml_daml_lf_2_1_daml_lf2_proto_msgTypes[38]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Type_Var) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Type_Var) ProtoMessage() {}

func (x *Type_Var) ProtoReflect() protoreflect.Message {
	mi := &file_com_daml_daml_lf_2_1_daml_lf2_proto_msgTypes[38]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Type_Var.ProtoReflect.Descriptor instead.
func (*Type_Var) Descriptor() ([]byte, []int) {
	return file_com_daml_daml_lf_2_1_daml_lf2_proto_rawDescGZIP(), []int{12, 0}
}

func (x *Type_Var) GetVarInternedStr() int32 {
	if x != nil {
		return x.VarInternedStr
	}
	return 0
}

func (x *Type_Var) GetArgs() []*Type {
	if x != nil {
		return x.Args
	}
	return nil
}

type Type_Con struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Tycon *TypeConName `protobuf:"bytes,1,opt,name=tycon,proto3" json:"tycon,omitempty"`
	Args  []*Type      `protobuf:"bytes,2,rep,name=args,proto3" json:"args,omitempty"`
}

func (x *Type_Con) Reset() {
	*x = Type_Con{}
	mi := &file_com_daml_daml_lf_2_1_daml_lf2_proto_msgTypes[39]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Type_Con) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Type_Con) ProtoMessage() {}

func (x *Type_Con) ProtoReflect() protoreflect.Message {
	mi := &file_com_daml_daml_lf_2_1_daml_lf2_proto_msgTypes[39]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Type_Con.ProtoReflect.Descriptor instead.
func (*Type_Con) Descriptor() ([]byte, []int) {
	return file_com_daml_daml_lf_2_1_daml_lf2_proto_rawDescGZIP(), []int{12, 1}
}

func (x *Type_Con) GetTycon() *TypeConName {
	if x != nil {
		return x.Tycon
	}
	return nil
}

func (x *Type_Con) GetArgs() []*Type {
	if x != nil {
		return x.Args
	}
	return nil
}

type Type_Syn struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Tysyn *TypeSynName `protobuf:"bytes,1,opt,name=tysyn,proto3" json:"tysyn,omitempty"`
	Args  []*Type      `protobuf:"bytes,2,rep,name=args,proto3" json:"args,omitempty"`
}

func (x *Type_Syn) Reset() {
	*x = Type_Syn{}
	mi := &file_com_daml_daml_lf_2_1_daml_lf2_proto_msgTypes[40]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Type_Syn) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Type_Syn) ProtoMessage() {}

func (x *Type_Syn) ProtoReflect() protoreflect.Message {
	mi := &file_com_daml_daml_lf_2_1_daml_lf2_proto_msgTypes[40]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Type_Syn.ProtoReflect.Descriptor instead.
func (*Type_Syn) Descriptor() ([]byte, []int) {
	return file_com_daml_daml_lf_2_1_daml_lf2_proto_rawDescGZIP(), []int{12, 2}
}

func (x *Type_Syn) GetTysyn() *TypeSynName {
	if x != nil {
		return x.Tysyn
	}
	return nil
}

func (x *Type_Syn) GetArgs() []*Type {
	if x != nil {
		return x.Args
	}
	return nil
}

type Type_Builtin struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Builtin BuiltinType `protobuf:"varint,1,opt,name=builtin,proto3,enum=daml_lf_2.BuiltinType" json:"builtin,omitempty"`
	Args    []*Type     `protobuf:"bytes,2,rep,name=args,proto3" json:"args,omitempty"`
}

func (x *Type_Builtin) Reset() {
	*x = Type_Builtin{}
	mi := &file_com_daml_daml_lf_2_1_daml_lf2_proto_msgTypes[41]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Type_Builtin) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Type_Builtin) ProtoMessage() {}

func (x *Type_Builtin) ProtoReflect() protoreflect.Message {
	mi := &file_com_daml_daml_lf_2_1_daml_lf2_proto_msgTypes[41]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Type_Builtin.ProtoReflect.Descriptor instead.
func (*Type_Builtin) Descriptor() ([]byte, []int) {
	return file_com_daml_daml_lf_2_1_daml_lf2_proto_rawDescGZIP(), []int{12, 3}
}

func (x *Type_Builtin) GetBuiltin() BuiltinType {
	if x != nil {
		return x.Builtin
	}
	return BuiltinType_UNIT
}

func (x *Type_Builtin) GetArgs() []*Type {
	if x != nil {
		return x.Args
	}
	return nil
}

type Type_Forall struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Vars []*TypeVarWithKind `protobuf:"bytes,1,rep,name=vars,proto3" json:"vars,omitempty"`
	Body *Type              `protobuf:"bytes,2,opt,name=body,proto3" json:"body,omitempty"`
}

func (x *Type_Forall) Reset() {
	*x = Type_Forall{}
	mi := &file_com_daml_daml_lf_2_1_daml_lf2_proto_msgTypes[42]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Type_Forall) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Type_Forall) ProtoMessage() {}

func (x *Type_Forall) ProtoReflect() protoreflect.Message {
	mi := &file_com_daml_daml_lf_2_1_daml_lf2_proto_msgTypes[42]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Type_Forall.ProtoReflect.Descriptor instead.
func (*Type_Forall) Descriptor() ([]byte, []int) {
	return file_com_daml_daml_lf_2_1_daml_lf2_proto_rawDescGZIP(), []int{12, 4}
}

func (x *Type_Forall) GetVars() []*TypeVarWithKind {
	if x != nil {
		return x.Vars
	}
	return nil
}

func (x *Type_Forall) GetBody() *Type {
	if x != nil {
		return x.Body
	}
	return nil
}

type Type_Struct struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Fields []*FieldWithType `protobuf:"bytes,1,rep,name=fields,proto3" json:"fields,omitempty"`
}

func (x *Type_Struct) Reset() {
	*x = Type_Struct{}
	mi := &file_com_daml_daml_lf_2_1_daml_lf2_proto_msgTypes[43]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Type_Struct) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Type_Struct) ProtoMessage() {}

func (x *Type_Struct) ProtoReflect() protoreflect.Message {
	mi := &file_com_daml_daml_lf_2_1_daml_lf2_proto_msgTypes[43]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Type_Struct.ProtoReflect.Descriptor instead.
func (*Type_Struct) Descriptor() ([]byte, []int) {
	return file_com_daml_daml_lf_2_1_daml_lf2_proto_rawDescGZIP(), []int{12, 5}
}

func (x *Type_Struct) GetFields() []*FieldWithType {
	if x != nil {
		return x.Fields
	}
	return nil
}

type Location_Range struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	StartLine int32 `protobuf:"varint,1,opt,name=start_line,json=startLine,proto3" json:"start_line,omitempty"`
	StartCol  int32 `protobuf:"varint,2,opt,name=start_col,json=startCol,proto3" json:"start_col,omitempty"`
	EndLine   int32 `protobuf:"varint,3,opt,name=end_line,json=endLine,proto3" json:"end_line,omitempty"`
	EndCol    int32 `protobuf:"varint,4,opt,name=end_col,json=endCol,proto3" json:"end_col,omitempty"`
}

func (x *Location_Range) Reset() {
	*x = Location_Range{}
	mi := &file_com_daml_daml_lf_2_1_daml_lf2_proto_msgTypes[44]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Location_Range) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Location_Range) ProtoMessage() {}

func (x *Location_Range) ProtoReflect() protoreflect.Message {
	mi := &file_com_daml_daml_lf_2_1_daml_lf2_proto_msgTypes[44]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Location_Range.ProtoReflect.Descriptor instead.
func (*Location_Range) Descriptor() ([]byte, []int) {
	return file_com_daml_daml_lf_2_1_daml_lf2_proto_rawDescGZIP(), []int{14, 0}
}

func (x *Location_Range) GetStartLine() int32 {
	if x != nil {
		return x.StartLine
	}
	return 0
}

func (x *Location_Range) GetStartCol() int32 {
	if x != nil {
		return x.StartCol
	}
	return 0
}

func (x *Location_Range) GetEndLine() int32 {
	if x != nil {
		return x.EndLine
	}
	return 0
}

func (x *Location_Range) GetEndCol() int32 {
	if x != nil {
		return x.EndCol
	}
	return 0
}

type Expr_RecCon struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Tycon  *Type_Con        `protobuf:"bytes,1,opt,name=tycon,proto3" json:"tycon,omitempty"`
	Fields []*FieldWithExpr `protobuf:"bytes,2,rep,name=fields,proto3" json:"fields,omitempty"`
}

func (x *Expr_RecCon) Reset() {
	*x = Expr_RecCon{}
	mi := &file_com_daml_daml_lf_2_1_daml_lf2_proto_msgTypes[45]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Expr_RecCon) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Expr_RecCon) ProtoMessage() {}

func (x *Expr_RecCon) ProtoReflect() protoreflect.Message {
	mi := &file_com_daml_daml_lf_2_1_daml_lf2_proto_msgTypes[45]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Expr_RecCon.ProtoReflect.Descriptor instead.
func (*Expr_RecCon) Descriptor() ([]byte, []int) {
	return file_com_daml_daml_lf_2_1_daml_lf2_proto_rawDescGZIP(), []int{15, 0}
}

func (x *Expr_RecCon) GetTycon() *Type_Con {
	if x != nil {
		return x.Tycon
	}
	return nil
}

func (x *Expr_RecCon) GetFields() []*FieldWithExpr {
	if x != nil {
		return x.Fields
	}
	return nil
}

type Expr_RecProj struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Tycon            *Type_Con `protobuf:"bytes,1,opt,name=tycon,proto3" json:"tycon,omitempty"`
	FieldInternedStr int32     `protobuf:"varint,4,opt,name=field_interned_str,json=fieldInternedStr,proto3" json:"field_interned_str,omitempty"`
	Record           *Expr     `protobuf:"bytes,3,opt,name=record,proto3" json:"record,omitempty"`
}

func (x *Expr_RecProj) Reset() {
	*x = Expr_RecProj{}
	mi := &file_com_daml_daml_lf_2_1_daml_lf2_proto_msgTypes[46]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Expr_RecProj) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Expr_RecProj) ProtoMessage() {}

func (x *Expr_RecProj) ProtoReflect() protoreflect.Message {
	mi := &file_com_daml_daml_lf_2_1_daml_lf2_proto_msgTypes[46]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Expr_RecProj.ProtoReflect.Descriptor instead.
func (*Expr_RecProj) Descriptor() ([]byte, []int) {
	return file_com_daml_daml_lf_2_1_daml_lf2_proto_rawDescGZIP(), []int{15, 1}
}

func (x *Expr_RecProj) GetTycon() *Type_Con {
	if x != nil {
		return x.Tycon
	}
	return nil
}

func (x *Expr_RecProj) GetFieldInternedStr() int32 {
	if x != nil {
		return x.FieldInternedStr
	}
	return 0
}

func (x *Expr_RecProj) GetRecord() *Expr {
	if x != nil {
		return x.Record
	}
	return nil
}

type Expr_RecUpd struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Tycon            *Type_Con `protobuf:"bytes,1,opt,name=tycon,proto3" json:"tycon,omitempty"`
	FieldInternedStr int32     `protobuf:"varint,2,opt,name=field_interned_str,json=fieldInternedStr,proto3" json:"field_interned_str,omitempty"`
	Record           *Expr     `protobuf:"bytes,3,opt,name=record,proto3" json:"record,omitempty"`
	Update           *Expr     `protobuf:"bytes,4,opt,name=update,proto3" json:"update,omitempty"`
}

func (x *Expr_RecUpd) Reset() {
	*x = Expr_RecUpd{}
	mi := &file_com_daml_daml_lf_2_1_daml_lf2_proto_msgTypes[47]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Expr_RecUpd) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Expr_RecUpd) ProtoMessage() {}

func (x *Expr_RecUpd) ProtoReflect() protoreflect.Message {
	mi := &file_com_daml_daml_lf_2_1_daml_lf2_proto_msgTypes[47]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Expr_RecUpd.ProtoReflect.Descriptor instead.
func (*Expr_RecUpd) Descriptor() ([]byte, []int) {
	return file_com_daml_daml_lf_2_1_daml_lf2_proto_rawDescGZIP(), []int{15, 2}
}

func (x *Expr_RecUpd) GetTycon() *Type_Con {
	if x != nil {
		return x.Tycon
	}
	return nil
}

func (x *Expr_RecUpd) GetFieldInternedStr() int32 {
	if x != nil {
		return x.FieldInternedStr
	}
	return 0
}

func (x *Expr_RecUpd) GetRecord() *Expr {
	if x != nil {
		return x.Record
	}
	return nil
}

func (x *Expr_RecUpd) GetUpdate() *Expr {
	if x != nil {
		return x.Update
	}
	return nil
}

type Expr_VariantCon struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Tycon                 *Type_Con `protobuf:"bytes,1,opt,name=tycon,proto3" json:"tycon,omitempty"`
	VariantConInternedStr int32     `protobuf:"varint,2,opt,name=variant_con_interned_str,json=variantConInternedStr,proto3" json:"variant_con_interned_str,omitempty"`
	VariantArg            *Expr     `protobuf:"bytes,3,opt,name=variant_arg,json=variantArg,proto3" json:"variant_arg,omitempty"`
}

func (x *Expr_VariantCon) Reset() {
	*x = Expr_VariantCon{}
	mi := &file_com_daml_daml_lf_2_1_daml_lf2_proto_msgTypes[48]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Expr_VariantCon) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Expr_VariantCon) ProtoMessage() {}

func (x *Expr_VariantCon) ProtoReflect() protoreflect.Message {
	mi := &file_com_daml_daml_lf_2_1_daml_lf2_proto_msgTypes[48]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Expr_VariantCon.ProtoReflect.Descriptor instead.
func (*Expr_VariantCon) Descriptor() ([]byte, []int) {
	return file_com_daml_daml_lf_2_1_daml_lf2_proto_rawDescGZIP(), []int{15, 3}
}

func (x *Expr_VariantCon) GetTycon() *Type_Con {
	if x != nil {
		return x.Tycon
	}
	return nil
}

func (x *Expr_VariantCon) GetVariantConInternedStr() int32 {
	if x != nil {
		return x.VariantConInternedStr
	}
	return 0
}

func (x *Expr_VariantCon) GetVariantArg() *Expr {
	if x != nil {
		return x.VariantArg
	}
	return nil
}

type Expr_EnumCon struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Tycon              *TypeConName `protobuf:"bytes,1,opt,name=tycon,proto3" json:"tycon,omitempty"`
	EnumConInternedStr int32        `protobuf:"varint,2,opt,name=enum_con_interned_str,json=enumConInternedStr,proto3" json:"enum_con_interned_str,omitempty"`
}

func (x *Expr_EnumCon) Reset() {
	*x = Expr_EnumCon{}
	mi := &file_com_daml_daml_lf_2_1_daml_lf2_proto_msgTypes[49]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Expr_EnumCon) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Expr_EnumCon) ProtoMessage() {}

func (x *Expr_EnumCon) ProtoReflect() protoreflect.Message {
	mi := &file_com_daml_daml_lf_2_1_daml_lf2_proto_msgTypes[49]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Expr_EnumCon.ProtoReflect.Descriptor instead.
func (*Expr_EnumCon) Descriptor() ([]byte, []int) {
	return file_com_daml_daml_lf_2_1_daml_lf2_proto_rawDescGZIP(), []int{15, 4}
}

func (x *Expr_EnumCon) GetTycon() *TypeConName {
	if x != nil {
		return x.Tycon
	}
	return nil
}

func (x *Expr_EnumCon) GetEnumConInternedStr() int32 {
	if x != nil {
		return x.EnumConInternedStr
	}
	return 0
}

type Expr_StructCon struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Fields []*FieldWithExpr `protobuf:"bytes,1,rep,name=fields,proto3" json:"fields,omitempty"`
}

func (x *Expr_StructCon) Reset() {
	*x = Expr_StructCon{}
	mi := &file_com_daml_daml_lf_2_1_daml_lf2_proto_msgTypes[50]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Expr_StructCon) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Expr_StructCon) ProtoMessage() {}

func (x *Expr_StructCon) ProtoReflect() protoreflect.Message {
	mi := &file_com_daml_daml_lf_2_1_daml_lf2_proto_msgTypes[50]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Expr_StructCon.ProtoReflect.Descriptor instead.
func (*Expr_StructCon) Descriptor() ([]byte, []int) {
	return file_com_daml_daml_lf_2_1_daml_lf2_proto_rawDescGZIP(), []int{15, 5}
}

func (x *Expr_StructCon) GetFields() []*FieldWithExpr {
	if x != nil {
		return x.Fields
	}
	return nil
}

type Expr_StructProj struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FieldInternedStr int32 `protobuf:"varint,1,opt,name=field_interned_str,json=fieldInternedStr,proto3" json:"field_interned_str,omitempty"`
	Struct           *Expr `protobuf:"bytes,2,opt,name=struct,proto3" json:"struct,omitempty"`
}

func (x *Expr_StructProj) Reset() {
	*x = Expr_StructProj{}
	mi := &file_com_daml_daml_lf_2_1_daml_lf2_proto_msgTypes[51]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Expr_StructProj) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Expr_StructProj) ProtoMessage() {}

func (x *Expr_StructProj) ProtoReflect() protoreflect.Message {
	mi := &file_com_daml_daml_lf_2_1_daml_lf2_proto_msgTypes[51]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Expr_StructProj.ProtoReflect.Descriptor instead.
func (*Expr_StructProj) Descriptor() ([]byte, []int) {
	return file_com_daml_daml_lf_2_1_daml_lf2_proto_rawDescGZIP(), []int{15, 6}
}

func (x *Expr_StructProj) GetFieldInternedStr() int32 {
	if x != nil {
		return x.FieldInternedStr
	}
	return 0
}

func (x *Expr_StructProj) GetStruct() *Expr {
	if x != nil {
		return x.Struct
	}
	return nil
}

type Expr_StructUpd struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FieldInternedStr int32 `protobuf:"varint,1,opt,name=field_interned_str,json=fieldInternedStr,proto3" json:"field_interned_str,omitempty"`
	Struct           *Expr `protobuf:"bytes,2,opt,name=struct,proto3" json:"struct,omitempty"`
	Update           *Expr `protobuf:"bytes,3,opt,name=update,proto3" json:"update,omitempty"`
}

func (x *Expr_StructUpd) Reset() {
	*x = Expr_StructUpd{}
	mi := &file_com_daml_daml_lf_2_1_daml_lf2_proto_msgTypes[52]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Expr_StructUpd) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Expr_StructUpd) ProtoMessage() {}

func (x *Expr_StructUpd) ProtoReflect() protoreflect.Message {
	mi := &file_com_daml_daml_lf_2_1_daml_lf2_proto_msgTypes[52]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Expr_StructUpd.ProtoReflect.Descriptor instead.
func (*Expr_StructUpd) Descriptor() ([]byte, []int) {
	return file_com_daml_daml_lf_2_1_daml_lf2_proto_rawDescGZIP(), []int{15, 7}
}

func (x *Expr_StructUpd) GetFieldInternedStr() int32 {
	if x != nil {
		return x.FieldInternedStr
	}
	return 0
}

func (x *Expr_StructUpd) GetStruct() *Expr {
	if x != nil {
		return x.Struct
	}
	return nil
}

func (x *Expr_StructUpd) GetUpdate() *Expr {
	if x != nil {
		return x.Update
	}
	return nil
}

type Expr_App struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Fun  *Expr   `protobuf:"bytes,1,opt,name=fun,proto3" json:"fun,omitempty"`
	Args []*Expr `protobuf:"bytes,2,rep,name=args,proto3" json:"args,omitempty"`
}

func (x *Expr_App) Reset() {
	*x = Expr_App{}
	mi := &file_com_daml_daml_lf_2_1_daml_lf2_proto_msgTypes[53]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Expr_App) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Expr_App) ProtoMessage() {}

func (x *Expr_App) ProtoReflect() protoreflect.Message {
	mi := &file_com_daml_daml_lf_2_1_daml_lf2_proto_msgTypes[53]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Expr_App.ProtoReflect.Descriptor instead.
func (*Expr_App) Descriptor() ([]byte, []int) {
	return file_com_daml_daml_lf_2_1_daml_lf2_proto_rawDescGZIP(), []int{15, 8}
}

func (x *Expr_App) GetFun() *Expr {
	if x != nil {
		return x.Fun
	}
	return nil
}

func (x *Expr_App) GetArgs() []*Expr {
	if x != nil {
		return x.Args
	}
	return nil
}

type Expr_TyApp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Expr  *Expr   `protobuf:"bytes,1,opt,name=expr,proto3" json:"expr,omitempty"`
	Types []*Type `protobuf:"bytes,2,rep,name=types,proto3" json:"types,omitempty"`
}

func (x *Expr_TyApp) Reset() {
	*x = Expr_TyApp{}
	mi := &file_com_daml_daml_lf_2_1_daml_lf2_proto_msgTypes[54]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Expr_TyApp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Expr_TyApp) ProtoMessage() {}

func (x *Expr_TyApp) ProtoReflect() protoreflect.Message {
	mi := &file_com_daml_daml_lf_2_1_daml_lf2_proto_msgTypes[54]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Expr_TyApp.ProtoReflect.Descriptor instead.
func (*Expr_TyApp) Descriptor() ([]byte, []int) {
	return file_com_daml_daml_lf_2_1_daml_lf2_proto_rawDescGZIP(), []int{15, 9}
}

func (x *Expr_TyApp) GetExpr() *Expr {
	if x != nil {
		return x.Expr
	}
	return nil
}

func (x *Expr_TyApp) GetTypes() []*Type {
	if x != nil {
		return x.Types
	}
	return nil
}

type Expr_Abs struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Param []*VarWithType `protobuf:"bytes,1,rep,name=param,proto3" json:"param,omitempty"`
	Body  *Expr          `protobuf:"bytes,2,opt,name=body,proto3" json:"body,omitempty"`
}

func (x *Expr_Abs) Reset() {
	*x = Expr_Abs{}
	mi := &file_com_daml_daml_lf_2_1_daml_lf2_proto_msgTypes[55]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Expr_Abs) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Expr_Abs) ProtoMessage() {}

func (x *Expr_Abs) ProtoReflect() protoreflect.Message {
	mi := &file_com_daml_daml_lf_2_1_daml_lf2_proto_msgTypes[55]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Expr_Abs.ProtoReflect.Descriptor instead.
func (*Expr_Abs) Descriptor() ([]byte, []int) {
	return file_com_daml_daml_lf_2_1_daml_lf2_proto_rawDescGZIP(), []int{15, 10}
}

func (x *Expr_Abs) GetParam() []*VarWithType {
	if x != nil {
		return x.Param
	}
	return nil
}

func (x *Expr_Abs) GetBody() *Expr {
	if x != nil {
		return x.Body
	}
	return nil
}

type Expr_TyAbs struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Param []*TypeVarWithKind `protobuf:"bytes,1,rep,name=param,proto3" json:"param,omitempty"`
	Body  *Expr              `protobuf:"bytes,2,opt,name=body,proto3" json:"body,omitempty"`
}

func (x *Expr_TyAbs) Reset() {
	*x = Expr_TyAbs{}
	mi := &file_com_daml_daml_lf_2_1_daml_lf2_proto_msgTypes[56]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Expr_TyAbs) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Expr_TyAbs) ProtoMessage() {}

func (x *Expr_TyAbs) ProtoReflect() protoreflect.Message {
	mi := &file_com_daml_daml_lf_2_1_daml_lf2_proto_msgTypes[56]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Expr_TyAbs.ProtoReflect.Descriptor instead.
func (*Expr_TyAbs) Descriptor() ([]byte, []int) {
	return file_com_daml_daml_lf_2_1_daml_lf2_proto_rawDescGZIP(), []int{15, 11}
}

func (x *Expr_TyAbs) GetParam() []*TypeVarWithKind {
	if x != nil {
		return x.Param
	}
	return nil
}

func (x *Expr_TyAbs) GetBody() *Expr {
	if x != nil {
		return x.Body
	}
	return nil
}

type Expr_Nil struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type *Type `protobuf:"bytes,1,opt,name=type,proto3" json:"type,omitempty"`
}

func (x *Expr_Nil) Reset() {
	*x = Expr_Nil{}
	mi := &file_com_daml_daml_lf_2_1_daml_lf2_proto_msgTypes[57]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Expr_Nil) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Expr_Nil) ProtoMessage() {}

func (x *Expr_Nil) ProtoReflect() protoreflect.Message {
	mi := &file_com_daml_daml_lf_2_1_daml_lf2_proto_msgTypes[57]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Expr_Nil.ProtoReflect.Descriptor instead.
func (*Expr_Nil) Descriptor() ([]byte, []int) {
	return file_com_daml_daml_lf_2_1_daml_lf2_proto_rawDescGZIP(), []int{15, 12}
}

func (x *Expr_Nil) GetType() *Type {
	if x != nil {
		return x.Type
	}
	return nil
}

type Expr_Cons struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type  *Type   `protobuf:"bytes,1,opt,name=type,proto3" json:"type,omitempty"`
	Front []*Expr `protobuf:"bytes,2,rep,name=front,proto3" json:"front,omitempty"`
	Tail  *Expr   `protobuf:"bytes,3,opt,name=tail,proto3" json:"tail,omitempty"`
}

func (x *Expr_Cons) Reset() {
	*x = Expr_Cons{}
	mi := &file_com_daml_daml_lf_2_1_daml_lf2_proto_msgTypes[58]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Expr_Cons) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Expr_Cons) ProtoMessage() {}

func (x *Expr_Cons) ProtoReflect() protoreflect.Message {
	mi := &file_com_daml_daml_lf_2_1_daml_lf2_proto_msgTypes[58]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Expr_Cons.ProtoReflect.Descriptor instead.
func (*Expr_Cons) Descriptor() ([]byte, []int) {
	return file_com_daml_daml_lf_2_1_daml_lf2_proto_rawDescGZIP(), []int{15, 13}
}

func (x *Expr_Cons) GetType() *Type {
	if x != nil {
		return x.Type
	}
	return nil
}

func (x *Expr_Cons) GetFront() []*Expr {
	if x != nil {
		return x.Front
	}
	return nil
}

func (x *Expr_Cons) GetTail() *Expr {
	if x != nil {
		return x.Tail
	}
	return nil
}

type Expr_OptionalNone struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type *Type `protobuf:"bytes,1,opt,name=type,proto3" json:"type,omitempty"`
}

func (x *Expr_OptionalNone) Reset() {
	*x = Expr_OptionalNone{}
	mi := &file_com_daml_daml_lf_2_1_daml_lf2_proto_msgTypes[59]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Expr_OptionalNone) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Expr_OptionalNone) ProtoMessage() {}

func (x *Expr_OptionalNone) ProtoReflect() protoreflect.Message {
	mi := &file_com_daml_daml_lf_2_1_daml_lf2_proto_msgTypes[59]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Expr_OptionalNone.ProtoReflect.Descriptor instead.
func (*Expr_OptionalNone) Descriptor() ([]byte, []int) {
	return file_com_daml_daml_lf_2_1_daml_lf2_proto_rawDescGZIP(), []int{15, 14}
}

func (x *Expr_OptionalNone) GetType() *Type {
	if x != nil {
		return x.Type
	}
	return nil
}

type Expr_OptionalSome struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type  *Type `protobuf:"bytes,1,opt,name=type,proto3" json:"type,omitempty"`
	Value *Expr `protobuf:"bytes,2,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *Expr_OptionalSome) Reset() {
	*x = Expr_OptionalSome{}
	mi := &file_com_daml_daml_lf_2_1_daml_lf2_proto_msgTypes[60]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Expr_OptionalSome) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Expr_OptionalSome) ProtoMessage() {}

func (x *Expr_OptionalSome) ProtoReflect() protoreflect.Message {
	mi := &file_com_daml_daml_lf_2_1_daml_lf2_proto_msgTypes[60]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Expr_OptionalSome.ProtoReflect.Descriptor instead.
func (*Expr_OptionalSome) Descriptor() ([]byte, []int) {
	return file_com_daml_daml_lf_2_1_daml_lf2_proto_rawDescGZIP(), []int{15, 15}
}

func (x *Expr_OptionalSome) GetType() *Type {
	if x != nil {
		return x.Type
	}
	return nil
}

func (x *Expr_OptionalSome) GetValue() *Expr {
	if x != nil {
		return x.Value
	}
	return nil
}

type Expr_ToAny struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type *Type `protobuf:"bytes,1,opt,name=type,proto3" json:"type,omitempty"`
	Expr *Expr `protobuf:"bytes,2,opt,name=expr,proto3" json:"expr,omitempty"`
}

func (x *Expr_ToAny) Reset() {
	*x = Expr_ToAny{}
	mi := &file_com_daml_daml_lf_2_1_daml_lf2_proto_msgTypes[61]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Expr_ToAny) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Expr_ToAny) ProtoMessage() {}

func (x *Expr_ToAny) ProtoReflect() protoreflect.Message {
	mi := &file_com_daml_daml_lf_2_1_daml_lf2_proto_msgTypes[61]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Expr_ToAny.ProtoReflect.Descriptor instead.
func (*Expr_ToAny) Descriptor() ([]byte, []int) {
	return file_com_daml_daml_lf_2_1_daml_lf2_proto_rawDescGZIP(), []int{15, 16}
}

func (x *Expr_ToAny) GetType() *Type {
	if x != nil {
		return x.Type
	}
	return nil
}

func (x *Expr_ToAny) GetExpr() *Expr {
	if x != nil {
		return x.Expr
	}
	return nil
}

type Expr_FromAny struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type *Type `protobuf:"bytes,1,opt,name=type,proto3" json:"type,omitempty"`
	Expr *Expr `protobuf:"bytes,2,opt,name=expr,proto3" json:"expr,omitempty"`
}

func (x *Expr_FromAny) Reset() {
	*x = Expr_FromAny{}
	mi := &file_com_daml_daml_lf_2_1_daml_lf2_proto_msgTypes[62]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Expr_FromAny) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Expr_FromAny) ProtoMessage() {}

func (x *Expr_FromAny) ProtoReflect() protoreflect.Message {
	mi := &file_com_daml_daml_lf_2_1_daml_lf2_proto_msgTypes[62]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Expr_FromAny.ProtoReflect.Descriptor instead.
func (*Expr_FromAny) Descriptor() ([]byte, []int) {
	return file_com_daml_daml_lf_2_1_daml_lf2_proto_rawDescGZIP(), []int{15, 17}
}

func (x *Expr_FromAny) GetType() *Type {
	if x != nil {
		return x.Type
	}
	return nil
}

func (x *Expr_FromAny) GetExpr() *Expr {
	if x != nil {
		return x.Expr
	}
	return nil
}

type Expr_ToAnyException struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type *Type `protobuf:"bytes,1,opt,name=type,proto3" json:"type,omitempty"`
	Expr *Expr `protobuf:"bytes,2,opt,name=expr,proto3" json:"expr,omitempty"`
}

func (x *Expr_ToAnyException) Reset() {
	*x = Expr_ToAnyException{}
	mi := &file_com_daml_daml_lf_2_1_daml_lf2_proto_msgTypes[63]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Expr_ToAnyException) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Expr_ToAnyException) ProtoMessage() {}

func (x *Expr_ToAnyException) ProtoReflect() protoreflect.Message {
	mi := &file_com_daml_daml_lf_2_1_daml_lf2_proto_msgTypes[63]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Expr_ToAnyException.ProtoReflect.Descriptor instead.
func (*Expr_ToAnyException) Descriptor() ([]byte, []int) {
	return file_com_daml_daml_lf_2_1_daml_lf2_proto_rawDescGZIP(), []int{15, 18}
}

func (x *Expr_ToAnyException) GetType() *Type {
	if x != nil {
		return x.Type
	}
	return nil
}

func (x *Expr_ToAnyException) GetExpr() *Expr {
	if x != nil {
		return x.Expr
	}
	return nil
}

type Expr_FromAnyException struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type *Type `protobuf:"bytes,1,opt,name=type,proto3" json:"type,omitempty"`
	Expr *Expr `protobuf:"bytes,2,opt,name=expr,proto3" json:"expr,omitempty"`
}

func (x *Expr_FromAnyException) Reset() {
	*x = Expr_FromAnyException{}
	mi := &file_com_daml_daml_lf_2_1_daml_lf2_proto_msgTypes[64]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Expr_FromAnyException) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Expr_FromAnyException) ProtoMessage() {}

func (x *Expr_FromAnyException) ProtoReflect() protoreflect.Message {
	mi := &file_com_daml_daml_lf_2_1_daml_lf2_proto_msgTypes[64]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Expr_FromAnyException.ProtoReflect.Descriptor instead.
func (*Expr_FromAnyException) Descriptor() ([]byte, []int) {
	return file_com_daml_daml_lf_2_1_daml_lf2_proto_rawDescGZIP(), []int{15, 19}
}

func (x *Expr_FromAnyException) GetType() *Type {
	if x != nil {
		return x.Type
	}
	return nil
}

func (x *Expr_FromAnyException) GetExpr() *Expr {
	if x != nil {
		return x.Expr
	}
	return nil
}

type Expr_Throw struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ReturnType    *Type `protobuf:"bytes,1,opt,name=return_type,json=returnType,proto3" json:"return_type,omitempty"`
	ExceptionType *Type `protobuf:"bytes,2,opt,name=exception_type,json=exceptionType,proto3" json:"exception_type,omitempty"`
	ExceptionExpr *Expr `protobuf:"bytes,3,opt,name=exception_expr,json=exceptionExpr,proto3" json:"exception_expr,omitempty"`
}

func (x *Expr_Throw) Reset() {
	*x = Expr_Throw{}
	mi := &file_com_daml_daml_lf_2_1_daml_lf2_proto_msgTypes[65]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Expr_Throw) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Expr_Throw) ProtoMessage() {}

func (x *Expr_Throw) ProtoReflect() protoreflect.Message {
	mi := &file_com_daml_daml_lf_2_1_daml_lf2_proto_msgTypes[65]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Expr_Throw.ProtoReflect.Descriptor instead.
func (*Expr_Throw) Descriptor() ([]byte, []int) {
	return file_com_daml_daml_lf_2_1_daml_lf2_proto_rawDescGZIP(), []int{15, 20}
}

func (x *Expr_Throw) GetReturnType() *Type {
	if x != nil {
		return x.ReturnType
	}
	return nil
}

func (x *Expr_Throw) GetExceptionType() *Type {
	if x != nil {
		return x.ExceptionType
	}
	return nil
}

func (x *Expr_Throw) GetExceptionExpr() *Expr {
	if x != nil {
		return x.ExceptionExpr
	}
	return nil
}

type Expr_ToInterface struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	InterfaceType *TypeConName `protobuf:"bytes,1,opt,name=interface_type,json=interfaceType,proto3" json:"interface_type,omitempty"`
	TemplateType  *TypeConName `protobuf:"bytes,2,opt,name=template_type,json=templateType,proto3" json:"template_type,omitempty"`
	TemplateExpr  *Expr        `protobuf:"bytes,3,opt,name=template_expr,json=templateExpr,proto3" json:"template_expr,omitempty"`
}

func (x *Expr_ToInterface) Reset() {
	*x = Expr_ToInterface{}
	mi := &file_com_daml_daml_lf_2_1_daml_lf2_proto_msgTypes[66]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Expr_ToInterface) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Expr_ToInterface) ProtoMessage() {}

func (x *Expr_ToInterface) ProtoReflect() protoreflect.Message {
	mi := &file_com_daml_daml_lf_2_1_daml_lf2_proto_msgTypes[66]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Expr_ToInterface.ProtoReflect.Descriptor instead.
func (*Expr_ToInterface) Descriptor() ([]byte, []int) {
	return file_com_daml_daml_lf_2_1_daml_lf2_proto_rawDescGZIP(), []int{15, 21}
}

func (x *Expr_ToInterface) GetInterfaceType() *TypeConName {
	if x != nil {
		return x.InterfaceType
	}
	return nil
}

func (x *Expr_ToInterface) GetTemplateType() *TypeConName {
	if x != nil {
		return x.TemplateType
	}
	return nil
}

func (x *Expr_ToInterface) GetTemplateExpr() *Expr {
	if x != nil {
		return x.TemplateExpr
	}
	return nil
}

type Expr_FromInterface struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	InterfaceType *TypeConName `protobuf:"bytes,1,opt,name=interface_type,json=interfaceType,proto3" json:"interface_type,omitempty"`
	TemplateType  *TypeConName `protobuf:"bytes,2,opt,name=template_type,json=templateType,proto3" json:"template_type,omitempty"`
	InterfaceExpr *Expr        `protobuf:"bytes,3,opt,name=interface_expr,json=interfaceExpr,proto3" json:"interface_expr,omitempty"`
}

func (x *Expr_FromInterface) Reset() {
	*x = Expr_FromInterface{}
	mi := &file_com_daml_daml_lf_2_1_daml_lf2_proto_msgTypes[67]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Expr_FromInterface) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Expr_FromInterface) ProtoMessage() {}

func (x *Expr_FromInterface) ProtoReflect() protoreflect.Message {
	mi := &file_com_daml_daml_lf_2_1_daml_lf2_proto_msgTypes[67]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Expr_FromInterface.ProtoReflect.Descriptor instead.
func (*Expr_FromInterface) Descriptor() ([]byte, []int) {
	return file_com_daml_daml_lf_2_1_daml_lf2_proto_rawDescGZIP(), []int{15, 22}
}

func (x *Expr_FromInterface) GetInterfaceType() *TypeConName {
	if x != nil {
		return x.InterfaceType
	}
	return nil
}

func (x *Expr_FromInterface) GetTemplateType() *TypeConName {
	if x != nil {
		return x.TemplateType
	}
	return nil
}

func (x *Expr_FromInterface) GetInterfaceExpr() *Expr {
	if x != nil {
		return x.InterfaceExpr
	}
	return nil
}

type Expr_CallInterface struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	InterfaceType      *TypeConName `protobuf:"bytes,1,opt,name=interface_type,json=interfaceType,proto3" json:"interface_type,omitempty"`
	MethodInternedName int32        `protobuf:"varint,2,opt,name=method_interned_name,json=methodInternedName,proto3" json:"method_interned_name,omitempty"`
	InterfaceExpr      *Expr        `protobuf:"bytes,3,opt,name=interface_expr,json=interfaceExpr,proto3" json:"interface_expr,omitempty"`
}

func (x *Expr_CallInterface) Reset() {
	*x = Expr_CallInterface{}
	mi := &file_com_daml_daml_lf_2_1_daml_lf2_proto_msgTypes[68]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Expr_CallInterface) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Expr_CallInterface) ProtoMessage() {}

func (x *Expr_CallInterface) ProtoReflect() protoreflect.Message {
	mi := &file_com_daml_daml_lf_2_1_daml_lf2_proto_msgTypes[68]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Expr_CallInterface.ProtoReflect.Descriptor instead.
func (*Expr_CallInterface) Descriptor() ([]byte, []int) {
	return file_com_daml_daml_lf_2_1_daml_lf2_proto_rawDescGZIP(), []int{15, 23}
}

func (x *Expr_CallInterface) GetInterfaceType() *TypeConName {
	if x != nil {
		return x.InterfaceType
	}
	return nil
}

func (x *Expr_CallInterface) GetMethodInternedName() int32 {
	if x != nil {
		return x.MethodInternedName
	}
	return 0
}

func (x *Expr_CallInterface) GetInterfaceExpr() *Expr {
	if x != nil {
		return x.InterfaceExpr
	}
	return nil
}

type Expr_ViewInterface struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Interface *TypeConName `protobuf:"bytes,1,opt,name=interface,proto3" json:"interface,omitempty"`
	Expr      *Expr        `protobuf:"bytes,2,opt,name=expr,proto3" json:"expr,omitempty"`
}

func (x *Expr_ViewInterface) Reset() {
	*x = Expr_ViewInterface{}
	mi := &file_com_daml_daml_lf_2_1_daml_lf2_proto_msgTypes[69]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Expr_ViewInterface) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Expr_ViewInterface) ProtoMessage() {}

func (x *Expr_ViewInterface) ProtoReflect() protoreflect.Message {
	mi := &file_com_daml_daml_lf_2_1_daml_lf2_proto_msgTypes[69]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Expr_ViewInterface.ProtoReflect.Descriptor instead.
func (*Expr_ViewInterface) Descriptor() ([]byte, []int) {
	return file_com_daml_daml_lf_2_1_daml_lf2_proto_rawDescGZIP(), []int{15, 24}
}

func (x *Expr_ViewInterface) GetInterface() *TypeConName {
	if x != nil {
		return x.Interface
	}
	return nil
}

func (x *Expr_ViewInterface) GetExpr() *Expr {
	if x != nil {
		return x.Expr
	}
	return nil
}

type Expr_SignatoryInterface struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Interface *TypeConName `protobuf:"bytes,1,opt,name=interface,proto3" json:"interface,omitempty"`
	Expr      *Expr        `protobuf:"bytes,2,opt,name=expr,proto3" json:"expr,omitempty"`
}

func (x *Expr_SignatoryInterface) Reset() {
	*x = Expr_SignatoryInterface{}
	mi := &file_com_daml_daml_lf_2_1_daml_lf2_proto_msgTypes[70]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Expr_SignatoryInterface) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Expr_SignatoryInterface) ProtoMessage() {}

func (x *Expr_SignatoryInterface) ProtoReflect() protoreflect.Message {
	mi := &file_com_daml_daml_lf_2_1_daml_lf2_proto_msgTypes[70]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Expr_SignatoryInterface.ProtoReflect.Descriptor instead.
func (*Expr_SignatoryInterface) Descriptor() ([]byte, []int) {
	return file_com_daml_daml_lf_2_1_daml_lf2_proto_rawDescGZIP(), []int{15, 25}
}

func (x *Expr_SignatoryInterface) GetInterface() *TypeConName {
	if x != nil {
		return x.Interface
	}
	return nil
}

func (x *Expr_SignatoryInterface) GetExpr() *Expr {
	if x != nil {
		return x.Expr
	}
	return nil
}

type Expr_ObserverInterface struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Interface *TypeConName `protobuf:"bytes,1,opt,name=interface,proto3" json:"interface,omitempty"`
	Expr      *Expr        `protobuf:"bytes,2,opt,name=expr,proto3" json:"expr,omitempty"`
}

func (x *Expr_ObserverInterface) Reset() {
	*x = Expr_ObserverInterface{}
	mi := &file_com_daml_daml_lf_2_1_daml_lf2_proto_msgTypes[71]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Expr_ObserverInterface) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Expr_ObserverInterface) ProtoMessage() {}

func (x *Expr_ObserverInterface) ProtoReflect() protoreflect.Message {
	mi := &file_com_daml_daml_lf_2_1_daml_lf2_proto_msgTypes[71]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Expr_ObserverInterface.ProtoReflect.Descriptor instead.
func (*Expr_ObserverInterface) Descriptor() ([]byte, []int) {
	return file_com_daml_daml_lf_2_1_daml_lf2_proto_rawDescGZIP(), []int{15, 26}
}

func (x *Expr_ObserverInterface) GetInterface() *TypeConName {
	if x != nil {
		return x.Interface
	}
	return nil
}

func (x *Expr_ObserverInterface) GetExpr() *Expr {
	if x != nil {
		return x.Expr
	}
	return nil
}

type Expr_UnsafeFromInterface struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	InterfaceType  *TypeConName `protobuf:"bytes,1,opt,name=interface_type,json=interfaceType,proto3" json:"interface_type,omitempty"`
	TemplateType   *TypeConName `protobuf:"bytes,2,opt,name=template_type,json=templateType,proto3" json:"template_type,omitempty"`
	ContractIdExpr *Expr        `protobuf:"bytes,3,opt,name=contract_id_expr,json=contractIdExpr,proto3" json:"contract_id_expr,omitempty"`
	InterfaceExpr  *Expr        `protobuf:"bytes,4,opt,name=interface_expr,json=interfaceExpr,proto3" json:"interface_expr,omitempty"`
}

func (x *Expr_UnsafeFromInterface) Reset() {
	*x = Expr_UnsafeFromInterface{}
	mi := &file_com_daml_daml_lf_2_1_daml_lf2_proto_msgTypes[72]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Expr_UnsafeFromInterface) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Expr_UnsafeFromInterface) ProtoMessage() {}

func (x *Expr_UnsafeFromInterface) ProtoReflect() protoreflect.Message {
	mi := &file_com_daml_daml_lf_2_1_daml_lf2_proto_msgTypes[72]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Expr_UnsafeFromInterface.ProtoReflect.Descriptor instead.
func (*Expr_UnsafeFromInterface) Descriptor() ([]byte, []int) {
	return file_com_daml_daml_lf_2_1_daml_lf2_proto_rawDescGZIP(), []int{15, 27}
}

func (x *Expr_UnsafeFromInterface) GetInterfaceType() *TypeConName {
	if x != nil {
		return x.InterfaceType
	}
	return nil
}

func (x *Expr_UnsafeFromInterface) GetTemplateType() *TypeConName {
	if x != nil {
		return x.TemplateType
	}
	return nil
}

func (x *Expr_UnsafeFromInterface) GetContractIdExpr() *Expr {
	if x != nil {
		return x.ContractIdExpr
	}
	return nil
}

func (x *Expr_UnsafeFromInterface) GetInterfaceExpr() *Expr {
	if x != nil {
		return x.InterfaceExpr
	}
	return nil
}

type Expr_ToRequiredInterface struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RequiredInterface  *TypeConName `protobuf:"bytes,1,opt,name=required_interface,json=requiredInterface,proto3" json:"required_interface,omitempty"`
	RequiringInterface *TypeConName `protobuf:"bytes,2,opt,name=requiring_interface,json=requiringInterface,proto3" json:"requiring_interface,omitempty"`
	Expr               *Expr        `protobuf:"bytes,3,opt,name=expr,proto3" json:"expr,omitempty"`
}

func (x *Expr_ToRequiredInterface) Reset() {
	*x = Expr_ToRequiredInterface{}
	mi := &file_com_daml_daml_lf_2_1_daml_lf2_proto_msgTypes[73]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Expr_ToRequiredInterface) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Expr_ToRequiredInterface) ProtoMessage() {}

func (x *Expr_ToRequiredInterface) ProtoReflect() protoreflect.Message {
	mi := &file_com_daml_daml_lf_2_1_daml_lf2_proto_msgTypes[73]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Expr_ToRequiredInterface.ProtoReflect.Descriptor instead.
func (*Expr_ToRequiredInterface) Descriptor() ([]byte, []int) {
	return file_com_daml_daml_lf_2_1_daml_lf2_proto_rawDescGZIP(), []int{15, 28}
}

func (x *Expr_ToRequiredInterface) GetRequiredInterface() *TypeConName {
	if x != nil {
		return x.RequiredInterface
	}
	return nil
}

func (x *Expr_ToRequiredInterface) GetRequiringInterface() *TypeConName {
	if x != nil {
		return x.RequiringInterface
	}
	return nil
}

func (x *Expr_ToRequiredInterface) GetExpr() *Expr {
	if x != nil {
		return x.Expr
	}
	return nil
}

type Expr_FromRequiredInterface struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RequiredInterface  *TypeConName `protobuf:"bytes,1,opt,name=required_interface,json=requiredInterface,proto3" json:"required_interface,omitempty"`
	RequiringInterface *TypeConName `protobuf:"bytes,2,opt,name=requiring_interface,json=requiringInterface,proto3" json:"requiring_interface,omitempty"`
	Expr               *Expr        `protobuf:"bytes,3,opt,name=expr,proto3" json:"expr,omitempty"`
}

func (x *Expr_FromRequiredInterface) Reset() {
	*x = Expr_FromRequiredInterface{}
	mi := &file_com_daml_daml_lf_2_1_daml_lf2_proto_msgTypes[74]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Expr_FromRequiredInterface) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Expr_FromRequiredInterface) ProtoMessage() {}

func (x *Expr_FromRequiredInterface) ProtoReflect() protoreflect.Message {
	mi := &file_com_daml_daml_lf_2_1_daml_lf2_proto_msgTypes[74]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Expr_FromRequiredInterface.ProtoReflect.Descriptor instead.
func (*Expr_FromRequiredInterface) Descriptor() ([]byte, []int) {
	return file_com_daml_daml_lf_2_1_daml_lf2_proto_rawDescGZIP(), []int{15, 29}
}

func (x *Expr_FromRequiredInterface) GetRequiredInterface() *TypeConName {
	if x != nil {
		return x.RequiredInterface
	}
	return nil
}

func (x *Expr_FromRequiredInterface) GetRequiringInterface() *TypeConName {
	if x != nil {
		return x.RequiringInterface
	}
	return nil
}

func (x *Expr_FromRequiredInterface) GetExpr() *Expr {
	if x != nil {
		return x.Expr
	}
	return nil
}

type Expr_UnsafeFromRequiredInterface struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RequiredInterface  *TypeConName `protobuf:"bytes,1,opt,name=required_interface,json=requiredInterface,proto3" json:"required_interface,omitempty"`
	RequiringInterface *TypeConName `protobuf:"bytes,2,opt,name=requiring_interface,json=requiringInterface,proto3" json:"requiring_interface,omitempty"`
	ContractIdExpr     *Expr        `protobuf:"bytes,3,opt,name=contract_id_expr,json=contractIdExpr,proto3" json:"contract_id_expr,omitempty"`
	InterfaceExpr      *Expr        `protobuf:"bytes,4,opt,name=interface_expr,json=interfaceExpr,proto3" json:"interface_expr,omitempty"`
}

func (x *Expr_UnsafeFromRequiredInterface) Reset() {
	*x = Expr_UnsafeFromRequiredInterface{}
	mi := &file_com_daml_daml_lf_2_1_daml_lf2_proto_msgTypes[75]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Expr_UnsafeFromRequiredInterface) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Expr_UnsafeFromRequiredInterface) ProtoMessage() {}

func (x *Expr_UnsafeFromRequiredInterface) ProtoReflect() protoreflect.Message {
	mi := &file_com_daml_daml_lf_2_1_daml_lf2_proto_msgTypes[75]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Expr_UnsafeFromRequiredInterface.ProtoReflect.Descriptor instead.
func (*Expr_UnsafeFromRequiredInterface) Descriptor() ([]byte, []int) {
	return file_com_daml_daml_lf_2_1_daml_lf2_proto_rawDescGZIP(), []int{15, 30}
}

func (x *Expr_UnsafeFromRequiredInterface) GetRequiredInterface() *TypeConName {
	if x != nil {
		return x.RequiredInterface
	}
	return nil
}

func (x *Expr_UnsafeFromRequiredInterface) GetRequiringInterface() *TypeConName {
	if x != nil {
		return x.RequiringInterface
	}
	return nil
}

func (x *Expr_UnsafeFromRequiredInterface) GetContractIdExpr() *Expr {
	if x != nil {
		return x.ContractIdExpr
	}
	return nil
}

func (x *Expr_UnsafeFromRequiredInterface) GetInterfaceExpr() *Expr {
	if x != nil {
		return x.InterfaceExpr
	}
	return nil
}

type Expr_InterfaceTemplateTypeRep struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Interface *TypeConName `protobuf:"bytes,1,opt,name=interface,proto3" json:"interface,omitempty"`
	Expr      *Expr        `protobuf:"bytes,2,opt,name=expr,proto3" json:"expr,omitempty"`
}

func (x *Expr_InterfaceTemplateTypeRep) Reset() {
	*x = Expr_InterfaceTemplateTypeRep{}
	mi := &file_com_daml_daml_lf_2_1_daml_lf2_proto_msgTypes[76]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Expr_InterfaceTemplateTypeRep) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Expr_InterfaceTemplateTypeRep) ProtoMessage() {}

func (x *Expr_InterfaceTemplateTypeRep) ProtoReflect() protoreflect.Message {
	mi := &file_com_daml_daml_lf_2_1_daml_lf2_proto_msgTypes[76]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Expr_InterfaceTemplateTypeRep.ProtoReflect.Descriptor instead.
func (*Expr_InterfaceTemplateTypeRep) Descriptor() ([]byte, []int) {
	return file_com_daml_daml_lf_2_1_daml_lf2_proto_rawDescGZIP(), []int{15, 31}
}

func (x *Expr_InterfaceTemplateTypeRep) GetInterface() *TypeConName {
	if x != nil {
		return x.Interface
	}
	return nil
}

func (x *Expr_InterfaceTemplateTypeRep) GetExpr() *Expr {
	if x != nil {
		return x.Expr
	}
	return nil
}

type Expr_ChoiceController struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Template          *TypeConName `protobuf:"bytes,1,opt,name=template,proto3" json:"template,omitempty"`
	ChoiceInternedStr int32        `protobuf:"varint,2,opt,name=choice_interned_str,json=choiceInternedStr,proto3" json:"choice_interned_str,omitempty"`
	ContractExpr      *Expr        `protobuf:"bytes,3,opt,name=contract_expr,json=contractExpr,proto3" json:"contract_expr,omitempty"`
	ChoiceArgExpr     *Expr        `protobuf:"bytes,4,opt,name=choice_arg_expr,json=choiceArgExpr,proto3" json:"choice_arg_expr,omitempty"`
}

func (x *Expr_ChoiceController) Reset() {
	*x = Expr_ChoiceController{}
	mi := &file_com_daml_daml_lf_2_1_daml_lf2_proto_msgTypes[77]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Expr_ChoiceController) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Expr_ChoiceController) ProtoMessage() {}

func (x *Expr_ChoiceController) ProtoReflect() protoreflect.Message {
	mi := &file_com_daml_daml_lf_2_1_daml_lf2_proto_msgTypes[77]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Expr_ChoiceController.ProtoReflect.Descriptor instead.
func (*Expr_ChoiceController) Descriptor() ([]byte, []int) {
	return file_com_daml_daml_lf_2_1_daml_lf2_proto_rawDescGZIP(), []int{15, 32}
}

func (x *Expr_ChoiceController) GetTemplate() *TypeConName {
	if x != nil {
		return x.Template
	}
	return nil
}

func (x *Expr_ChoiceController) GetChoiceInternedStr() int32 {
	if x != nil {
		return x.ChoiceInternedStr
	}
	return 0
}

func (x *Expr_ChoiceController) GetContractExpr() *Expr {
	if x != nil {
		return x.ContractExpr
	}
	return nil
}

func (x *Expr_ChoiceController) GetChoiceArgExpr() *Expr {
	if x != nil {
		return x.ChoiceArgExpr
	}
	return nil
}

type Expr_ChoiceObserver struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Template          *TypeConName `protobuf:"bytes,1,opt,name=template,proto3" json:"template,omitempty"`
	ChoiceInternedStr int32        `protobuf:"varint,2,opt,name=choice_interned_str,json=choiceInternedStr,proto3" json:"choice_interned_str,omitempty"`
	ContractExpr      *Expr        `protobuf:"bytes,3,opt,name=contract_expr,json=contractExpr,proto3" json:"contract_expr,omitempty"`
	ChoiceArgExpr     *Expr        `protobuf:"bytes,4,opt,name=choice_arg_expr,json=choiceArgExpr,proto3" json:"choice_arg_expr,omitempty"`
}

func (x *Expr_ChoiceObserver) Reset() {
	*x = Expr_ChoiceObserver{}
	mi := &file_com_daml_daml_lf_2_1_daml_lf2_proto_msgTypes[78]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Expr_ChoiceObserver) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Expr_ChoiceObserver) ProtoMessage() {}

func (x *Expr_ChoiceObserver) ProtoReflect() protoreflect.Message {
	mi := &file_com_daml_daml_lf_2_1_daml_lf2_proto_msgTypes[78]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Expr_ChoiceObserver.ProtoReflect.Descriptor instead.
func (*Expr_ChoiceObserver) Descriptor() ([]byte, []int) {
	return file_com_daml_daml_lf_2_1_daml_lf2_proto_rawDescGZIP(), []int{15, 33}
}

func (x *Expr_ChoiceObserver) GetTemplate() *TypeConName {
	if x != nil {
		return x.Template
	}
	return nil
}

func (x *Expr_ChoiceObserver) GetChoiceInternedStr() int32 {
	if x != nil {
		return x.ChoiceInternedStr
	}
	return 0
}

func (x *Expr_ChoiceObserver) GetContractExpr() *Expr {
	if x != nil {
		return x.ContractExpr
	}
	return nil
}

func (x *Expr_ChoiceObserver) GetChoiceArgExpr() *Expr {
	if x != nil {
		return x.ChoiceArgExpr
	}
	return nil
}

type Expr_Experimental struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Type *Type  `protobuf:"bytes,2,opt,name=type,proto3" json:"type,omitempty"`
}

func (x *Expr_Experimental) Reset() {
	*x = Expr_Experimental{}
	mi := &file_com_daml_daml_lf_2_1_daml_lf2_proto_msgTypes[79]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Expr_Experimental) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Expr_Experimental) ProtoMessage() {}

func (x *Expr_Experimental) ProtoReflect() protoreflect.Message {
	mi := &file_com_daml_daml_lf_2_1_daml_lf2_proto_msgTypes[79]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Expr_Experimental.ProtoReflect.Descriptor instead.
func (*Expr_Experimental) Descriptor() ([]byte, []int) {
	return file_com_daml_daml_lf_2_1_daml_lf2_proto_rawDescGZIP(), []int{15, 34}
}

func (x *Expr_Experimental) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Expr_Experimental) GetType() *Type {
	if x != nil {
		return x.Type
	}
	return nil
}

type CaseAlt_Variant struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Con                *TypeConName `protobuf:"bytes,1,opt,name=con,proto3" json:"con,omitempty"`
	VariantInternedStr int32        `protobuf:"varint,2,opt,name=variant_interned_str,json=variantInternedStr,proto3" json:"variant_interned_str,omitempty"`
	BinderInternedStr  int32        `protobuf:"varint,3,opt,name=binder_interned_str,json=binderInternedStr,proto3" json:"binder_interned_str,omitempty"`
}

func (x *CaseAlt_Variant) Reset() {
	*x = CaseAlt_Variant{}
	mi := &file_com_daml_daml_lf_2_1_daml_lf2_proto_msgTypes[80]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CaseAlt_Variant) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CaseAlt_Variant) ProtoMessage() {}

func (x *CaseAlt_Variant) ProtoReflect() protoreflect.Message {
	mi := &file_com_daml_daml_lf_2_1_daml_lf2_proto_msgTypes[80]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CaseAlt_Variant.ProtoReflect.Descriptor instead.
func (*CaseAlt_Variant) Descriptor() ([]byte, []int) {
	return file_com_daml_daml_lf_2_1_daml_lf2_proto_rawDescGZIP(), []int{16, 0}
}

func (x *CaseAlt_Variant) GetCon() *TypeConName {
	if x != nil {
		return x.Con
	}
	return nil
}

func (x *CaseAlt_Variant) GetVariantInternedStr() int32 {
	if x != nil {
		return x.VariantInternedStr
	}
	return 0
}

func (x *CaseAlt_Variant) GetBinderInternedStr() int32 {
	if x != nil {
		return x.BinderInternedStr
	}
	return 0
}

type CaseAlt_Enum struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Con                    *TypeConName `protobuf:"bytes,1,opt,name=con,proto3" json:"con,omitempty"`
	ConstructorInternedStr int32        `protobuf:"varint,2,opt,name=constructor_interned_str,json=constructorInternedStr,proto3" json:"constructor_interned_str,omitempty"`
}

func (x *CaseAlt_Enum) Reset() {
	*x = CaseAlt_Enum{}
	mi := &file_com_daml_daml_lf_2_1_daml_lf2_proto_msgTypes[81]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CaseAlt_Enum) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CaseAlt_Enum) ProtoMessage() {}

func (x *CaseAlt_Enum) ProtoReflect() protoreflect.Message {
	mi := &file_com_daml_daml_lf_2_1_daml_lf2_proto_msgTypes[81]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CaseAlt_Enum.ProtoReflect.Descriptor instead.
func (*CaseAlt_Enum) Descriptor() ([]byte, []int) {
	return file_com_daml_daml_lf_2_1_daml_lf2_proto_rawDescGZIP(), []int{16, 1}
}

func (x *CaseAlt_Enum) GetCon() *TypeConName {
	if x != nil {
		return x.Con
	}
	return nil
}

func (x *CaseAlt_Enum) GetConstructorInternedStr() int32 {
	if x != nil {
		return x.ConstructorInternedStr
	}
	return 0
}

type CaseAlt_Cons struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	VarHeadInternedStr int32 `protobuf:"varint,1,opt,name=var_head_interned_str,json=varHeadInternedStr,proto3" json:"var_head_interned_str,omitempty"`
	VarTailInternedStr int32 `protobuf:"varint,2,opt,name=var_tail_interned_str,json=varTailInternedStr,proto3" json:"var_tail_interned_str,omitempty"`
}

func (x *CaseAlt_Cons) Reset() {
	*x = CaseAlt_Cons{}
	mi := &file_com_daml_daml_lf_2_1_daml_lf2_proto_msgTypes[82]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CaseAlt_Cons) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CaseAlt_Cons) ProtoMessage() {}

func (x *CaseAlt_Cons) ProtoReflect() protoreflect.Message {
	mi := &file_com_daml_daml_lf_2_1_daml_lf2_proto_msgTypes[82]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CaseAlt_Cons.ProtoReflect.Descriptor instead.
func (*CaseAlt_Cons) Descriptor() ([]byte, []int) {
	return file_com_daml_daml_lf_2_1_daml_lf2_proto_rawDescGZIP(), []int{16, 2}
}

func (x *CaseAlt_Cons) GetVarHeadInternedStr() int32 {
	if x != nil {
		return x.VarHeadInternedStr
	}
	return 0
}

func (x *CaseAlt_Cons) GetVarTailInternedStr() int32 {
	if x != nil {
		return x.VarTailInternedStr
	}
	return 0
}

type CaseAlt_OptionalSome struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	VarBodyInternedStr int32 `protobuf:"varint,1,opt,name=var_body_interned_str,json=varBodyInternedStr,proto3" json:"var_body_interned_str,omitempty"`
}

func (x *CaseAlt_OptionalSome) Reset() {
	*x = CaseAlt_OptionalSome{}
	mi := &file_com_daml_daml_lf_2_1_daml_lf2_proto_msgTypes[83]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CaseAlt_OptionalSome) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CaseAlt_OptionalSome) ProtoMessage() {}

func (x *CaseAlt_OptionalSome) ProtoReflect() protoreflect.Message {
	mi := &file_com_daml_daml_lf_2_1_daml_lf2_proto_msgTypes[83]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CaseAlt_OptionalSome.ProtoReflect.Descriptor instead.
func (*CaseAlt_OptionalSome) Descriptor() ([]byte, []int) {
	return file_com_daml_daml_lf_2_1_daml_lf2_proto_rawDescGZIP(), []int{16, 3}
}

func (x *CaseAlt_OptionalSome) GetVarBodyInternedStr() int32 {
	if x != nil {
		return x.VarBodyInternedStr
	}
	return 0
}

type Update_Create struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Template *TypeConName `protobuf:"bytes,1,opt,name=template,proto3" json:"template,omitempty"`
	Expr     *Expr        `protobuf:"bytes,2,opt,name=expr,proto3" json:"expr,omitempty"`
}

func (x *Update_Create) Reset() {
	*x = Update_Create{}
	mi := &file_com_daml_daml_lf_2_1_daml_lf2_proto_msgTypes[84]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Update_Create) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Update_Create) ProtoMessage() {}

func (x *Update_Create) ProtoReflect() protoreflect.Message {
	mi := &file_com_daml_daml_lf_2_1_daml_lf2_proto_msgTypes[84]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Update_Create.ProtoReflect.Descriptor instead.
func (*Update_Create) Descriptor() ([]byte, []int) {
	return file_com_daml_daml_lf_2_1_daml_lf2_proto_rawDescGZIP(), []int{20, 0}
}

func (x *Update_Create) GetTemplate() *TypeConName {
	if x != nil {
		return x.Template
	}
	return nil
}

func (x *Update_Create) GetExpr() *Expr {
	if x != nil {
		return x.Expr
	}
	return nil
}

type Update_CreateInterface struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Interface *TypeConName `protobuf:"bytes,1,opt,name=interface,proto3" json:"interface,omitempty"`
	Expr      *Expr        `protobuf:"bytes,2,opt,name=expr,proto3" json:"expr,omitempty"`
}

func (x *Update_CreateInterface) Reset() {
	*x = Update_CreateInterface{}
	mi := &file_com_daml_daml_lf_2_1_daml_lf2_proto_msgTypes[85]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Update_CreateInterface) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Update_CreateInterface) ProtoMessage() {}

func (x *Update_CreateInterface) ProtoReflect() protoreflect.Message {
	mi := &file_com_daml_daml_lf_2_1_daml_lf2_proto_msgTypes[85]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Update_CreateInterface.ProtoReflect.Descriptor instead.
func (*Update_CreateInterface) Descriptor() ([]byte, []int) {
	return file_com_daml_daml_lf_2_1_daml_lf2_proto_rawDescGZIP(), []int{20, 1}
}

func (x *Update_CreateInterface) GetInterface() *TypeConName {
	if x != nil {
		return x.Interface
	}
	return nil
}

func (x *Update_CreateInterface) GetExpr() *Expr {
	if x != nil {
		return x.Expr
	}
	return nil
}

type Update_Exercise struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Template          *TypeConName `protobuf:"bytes,1,opt,name=template,proto3" json:"template,omitempty"`
	ChoiceInternedStr int32        `protobuf:"varint,6,opt,name=choice_interned_str,json=choiceInternedStr,proto3" json:"choice_interned_str,omitempty"`
	Cid               *Expr        `protobuf:"bytes,3,opt,name=cid,proto3" json:"cid,omitempty"`
	Arg               *Expr        `protobuf:"bytes,5,opt,name=arg,proto3" json:"arg,omitempty"`
}

func (x *Update_Exercise) Reset() {
	*x = Update_Exercise{}
	mi := &file_com_daml_daml_lf_2_1_daml_lf2_proto_msgTypes[86]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Update_Exercise) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Update_Exercise) ProtoMessage() {}

func (x *Update_Exercise) ProtoReflect() protoreflect.Message {
	mi := &file_com_daml_daml_lf_2_1_daml_lf2_proto_msgTypes[86]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Update_Exercise.ProtoReflect.Descriptor instead.
func (*Update_Exercise) Descriptor() ([]byte, []int) {
	return file_com_daml_daml_lf_2_1_daml_lf2_proto_rawDescGZIP(), []int{20, 2}
}

func (x *Update_Exercise) GetTemplate() *TypeConName {
	if x != nil {
		return x.Template
	}
	return nil
}

func (x *Update_Exercise) GetChoiceInternedStr() int32 {
	if x != nil {
		return x.ChoiceInternedStr
	}
	return 0
}

func (x *Update_Exercise) GetCid() *Expr {
	if x != nil {
		return x.Cid
	}
	return nil
}

func (x *Update_Exercise) GetArg() *Expr {
	if x != nil {
		return x.Arg
	}
	return nil
}

type Update_SoftExercise struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Template          *TypeConName `protobuf:"bytes,1,opt,name=template,proto3" json:"template,omitempty"`
	ChoiceInternedStr int32        `protobuf:"varint,2,opt,name=choice_interned_str,json=choiceInternedStr,proto3" json:"choice_interned_str,omitempty"`
	Cid               *Expr        `protobuf:"bytes,3,opt,name=cid,proto3" json:"cid,omitempty"`
	Arg               *Expr        `protobuf:"bytes,4,opt,name=arg,proto3" json:"arg,omitempty"`
}

func (x *Update_SoftExercise) Reset() {
	*x = Update_SoftExercise{}
	mi := &file_com_daml_daml_lf_2_1_daml_lf2_proto_msgTypes[87]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Update_SoftExercise) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Update_SoftExercise) ProtoMessage() {}

func (x *Update_SoftExercise) ProtoReflect() protoreflect.Message {
	mi := &file_com_daml_daml_lf_2_1_daml_lf2_proto_msgTypes[87]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Update_SoftExercise.ProtoReflect.Descriptor instead.
func (*Update_SoftExercise) Descriptor() ([]byte, []int) {
	return file_com_daml_daml_lf_2_1_daml_lf2_proto_rawDescGZIP(), []int{20, 3}
}

func (x *Update_SoftExercise) GetTemplate() *TypeConName {
	if x != nil {
		return x.Template
	}
	return nil
}

func (x *Update_SoftExercise) GetChoiceInternedStr() int32 {
	if x != nil {
		return x.ChoiceInternedStr
	}
	return 0
}

func (x *Update_SoftExercise) GetCid() *Expr {
	if x != nil {
		return x.Cid
	}
	return nil
}

func (x *Update_SoftExercise) GetArg() *Expr {
	if x != nil {
		return x.Arg
	}
	return nil
}

type Update_DynamicExercise struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Template          *TypeConName `protobuf:"bytes,1,opt,name=template,proto3" json:"template,omitempty"`
	ChoiceInternedStr int32        `protobuf:"varint,2,opt,name=choice_interned_str,json=choiceInternedStr,proto3" json:"choice_interned_str,omitempty"`
	Cid               *Expr        `protobuf:"bytes,3,opt,name=cid,proto3" json:"cid,omitempty"`
	Arg               *Expr        `protobuf:"bytes,4,opt,name=arg,proto3" json:"arg,omitempty"`
}

func (x *Update_DynamicExercise) Reset() {
	*x = Update_DynamicExercise{}
	mi := &file_com_daml_daml_lf_2_1_daml_lf2_proto_msgTypes[88]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Update_DynamicExercise) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Update_DynamicExercise) ProtoMessage() {}

func (x *Update_DynamicExercise) ProtoReflect() protoreflect.Message {
	mi := &file_com_daml_daml_lf_2_1_daml_lf2_proto_msgTypes[88]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Update_DynamicExercise.ProtoReflect.Descriptor instead.
func (*Update_DynamicExercise) Descriptor() ([]byte, []int) {
	return file_com_daml_daml_lf_2_1_daml_lf2_proto_rawDescGZIP(), []int{20, 4}
}

func (x *Update_DynamicExercise) GetTemplate() *TypeConName {
	if x != nil {
		return x.Template
	}
	return nil
}

func (x *Update_DynamicExercise) GetChoiceInternedStr() int32 {
	if x != nil {
		return x.ChoiceInternedStr
	}
	return 0
}

func (x *Update_DynamicExercise) GetCid() *Expr {
	if x != nil {
		return x.Cid
	}
	return nil
}

func (x *Update_DynamicExercise) GetArg() *Expr {
	if x != nil {
		return x.Arg
	}
	return nil
}

type Update_ExerciseInterface struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Interface         *TypeConName `protobuf:"bytes,1,opt,name=interface,proto3" json:"interface,omitempty"`
	ChoiceInternedStr int32        `protobuf:"varint,2,opt,name=choice_interned_str,json=choiceInternedStr,proto3" json:"choice_interned_str,omitempty"`
	Cid               *Expr        `protobuf:"bytes,3,opt,name=cid,proto3" json:"cid,omitempty"`
	Arg               *Expr        `protobuf:"bytes,4,opt,name=arg,proto3" json:"arg,omitempty"`
	Guard             *Expr        `protobuf:"bytes,5,opt,name=guard,proto3" json:"guard,omitempty"`
}

func (x *Update_ExerciseInterface) Reset() {
	*x = Update_ExerciseInterface{}
	mi := &file_com_daml_daml_lf_2_1_daml_lf2_proto_msgTypes[89]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Update_ExerciseInterface) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Update_ExerciseInterface) ProtoMessage() {}

func (x *Update_ExerciseInterface) ProtoReflect() protoreflect.Message {
	mi := &file_com_daml_daml_lf_2_1_daml_lf2_proto_msgTypes[89]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Update_ExerciseInterface.ProtoReflect.Descriptor instead.
func (*Update_ExerciseInterface) Descriptor() ([]byte, []int) {
	return file_com_daml_daml_lf_2_1_daml_lf2_proto_rawDescGZIP(), []int{20, 5}
}

func (x *Update_ExerciseInterface) GetInterface() *TypeConName {
	if x != nil {
		return x.Interface
	}
	return nil
}

func (x *Update_ExerciseInterface) GetChoiceInternedStr() int32 {
	if x != nil {
		return x.ChoiceInternedStr
	}
	return 0
}

func (x *Update_ExerciseInterface) GetCid() *Expr {
	if x != nil {
		return x.Cid
	}
	return nil
}

func (x *Update_ExerciseInterface) GetArg() *Expr {
	if x != nil {
		return x.Arg
	}
	return nil
}

func (x *Update_ExerciseInterface) GetGuard() *Expr {
	if x != nil {
		return x.Guard
	}
	return nil
}

type Update_ExerciseByKey struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Template          *TypeConName `protobuf:"bytes,1,opt,name=template,proto3" json:"template,omitempty"`
	ChoiceInternedStr int32        `protobuf:"varint,2,opt,name=choice_interned_str,json=choiceInternedStr,proto3" json:"choice_interned_str,omitempty"`
	Key               *Expr        `protobuf:"bytes,3,opt,name=key,proto3" json:"key,omitempty"`
	Arg               *Expr        `protobuf:"bytes,4,opt,name=arg,proto3" json:"arg,omitempty"`
}

func (x *Update_ExerciseByKey) Reset() {
	*x = Update_ExerciseByKey{}
	mi := &file_com_daml_daml_lf_2_1_daml_lf2_proto_msgTypes[90]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Update_ExerciseByKey) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Update_ExerciseByKey) ProtoMessage() {}

func (x *Update_ExerciseByKey) ProtoReflect() protoreflect.Message {
	mi := &file_com_daml_daml_lf_2_1_daml_lf2_proto_msgTypes[90]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Update_ExerciseByKey.ProtoReflect.Descriptor instead.
func (*Update_ExerciseByKey) Descriptor() ([]byte, []int) {
	return file_com_daml_daml_lf_2_1_daml_lf2_proto_rawDescGZIP(), []int{20, 6}
}

func (x *Update_ExerciseByKey) GetTemplate() *TypeConName {
	if x != nil {
		return x.Template
	}
	return nil
}

func (x *Update_ExerciseByKey) GetChoiceInternedStr() int32 {
	if x != nil {
		return x.ChoiceInternedStr
	}
	return 0
}

func (x *Update_ExerciseByKey) GetKey() *Expr {
	if x != nil {
		return x.Key
	}
	return nil
}

func (x *Update_ExerciseByKey) GetArg() *Expr {
	if x != nil {
		return x.Arg
	}
	return nil
}

type Update_Fetch struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Template *TypeConName `protobuf:"bytes,1,opt,name=template,proto3" json:"template,omitempty"`
	Cid      *Expr        `protobuf:"bytes,2,opt,name=cid,proto3" json:"cid,omitempty"`
}

func (x *Update_Fetch) Reset() {
	*x = Update_Fetch{}
	mi := &file_com_daml_daml_lf_2_1_daml_lf2_proto_msgTypes[91]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Update_Fetch) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Update_Fetch) ProtoMessage() {}

func (x *Update_Fetch) ProtoReflect() protoreflect.Message {
	mi := &file_com_daml_daml_lf_2_1_daml_lf2_proto_msgTypes[91]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Update_Fetch.ProtoReflect.Descriptor instead.
func (*Update_Fetch) Descriptor() ([]byte, []int) {
	return file_com_daml_daml_lf_2_1_daml_lf2_proto_rawDescGZIP(), []int{20, 7}
}

func (x *Update_Fetch) GetTemplate() *TypeConName {
	if x != nil {
		return x.Template
	}
	return nil
}

func (x *Update_Fetch) GetCid() *Expr {
	if x != nil {
		return x.Cid
	}
	return nil
}

type Update_SoftFetch struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Template *TypeConName `protobuf:"bytes,1,opt,name=template,proto3" json:"template,omitempty"`
	Cid      *Expr        `protobuf:"bytes,2,opt,name=cid,proto3" json:"cid,omitempty"`
}

func (x *Update_SoftFetch) Reset() {
	*x = Update_SoftFetch{}
	mi := &file_com_daml_daml_lf_2_1_daml_lf2_proto_msgTypes[92]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Update_SoftFetch) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Update_SoftFetch) ProtoMessage() {}

func (x *Update_SoftFetch) ProtoReflect() protoreflect.Message {
	mi := &file_com_daml_daml_lf_2_1_daml_lf2_proto_msgTypes[92]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Update_SoftFetch.ProtoReflect.Descriptor instead.
func (*Update_SoftFetch) Descriptor() ([]byte, []int) {
	return file_com_daml_daml_lf_2_1_daml_lf2_proto_rawDescGZIP(), []int{20, 8}
}

func (x *Update_SoftFetch) GetTemplate() *TypeConName {
	if x != nil {
		return x.Template
	}
	return nil
}

func (x *Update_SoftFetch) GetCid() *Expr {
	if x != nil {
		return x.Cid
	}
	return nil
}

type Update_FetchInterface struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Interface *TypeConName `protobuf:"bytes,1,opt,name=interface,proto3" json:"interface,omitempty"`
	Cid       *Expr        `protobuf:"bytes,2,opt,name=cid,proto3" json:"cid,omitempty"`
}

func (x *Update_FetchInterface) Reset() {
	*x = Update_FetchInterface{}
	mi := &file_com_daml_daml_lf_2_1_daml_lf2_proto_msgTypes[93]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Update_FetchInterface) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Update_FetchInterface) ProtoMessage() {}

func (x *Update_FetchInterface) ProtoReflect() protoreflect.Message {
	mi := &file_com_daml_daml_lf_2_1_daml_lf2_proto_msgTypes[93]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Update_FetchInterface.ProtoReflect.Descriptor instead.
func (*Update_FetchInterface) Descriptor() ([]byte, []int) {
	return file_com_daml_daml_lf_2_1_daml_lf2_proto_rawDescGZIP(), []int{20, 9}
}

func (x *Update_FetchInterface) GetInterface() *TypeConName {
	if x != nil {
		return x.Interface
	}
	return nil
}

func (x *Update_FetchInterface) GetCid() *Expr {
	if x != nil {
		return x.Cid
	}
	return nil
}

type Update_EmbedExpr struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type *Type `protobuf:"bytes,1,opt,name=type,proto3" json:"type,omitempty"`
	Body *Expr `protobuf:"bytes,2,opt,name=body,proto3" json:"body,omitempty"`
}

func (x *Update_EmbedExpr) Reset() {
	*x = Update_EmbedExpr{}
	mi := &file_com_daml_daml_lf_2_1_daml_lf2_proto_msgTypes[94]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Update_EmbedExpr) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Update_EmbedExpr) ProtoMessage() {}

func (x *Update_EmbedExpr) ProtoReflect() protoreflect.Message {
	mi := &file_com_daml_daml_lf_2_1_daml_lf2_proto_msgTypes[94]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Update_EmbedExpr.ProtoReflect.Descriptor instead.
func (*Update_EmbedExpr) Descriptor() ([]byte, []int) {
	return file_com_daml_daml_lf_2_1_daml_lf2_proto_rawDescGZIP(), []int{20, 10}
}

func (x *Update_EmbedExpr) GetType() *Type {
	if x != nil {
		return x.Type
	}
	return nil
}

func (x *Update_EmbedExpr) GetBody() *Expr {
	if x != nil {
		return x.Body
	}
	return nil
}

type Update_RetrieveByKey struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Template *TypeConName `protobuf:"bytes,1,opt,name=template,proto3" json:"template,omitempty"`
	Key      *Expr        `protobuf:"bytes,2,opt,name=key,proto3" json:"key,omitempty"`
}

func (x *Update_RetrieveByKey) Reset() {
	*x = Update_RetrieveByKey{}
	mi := &file_com_daml_daml_lf_2_1_daml_lf2_proto_msgTypes[95]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Update_RetrieveByKey) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Update_RetrieveByKey) ProtoMessage() {}

func (x *Update_RetrieveByKey) ProtoReflect() protoreflect.Message {
	mi := &file_com_daml_daml_lf_2_1_daml_lf2_proto_msgTypes[95]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Update_RetrieveByKey.ProtoReflect.Descriptor instead.
func (*Update_RetrieveByKey) Descriptor() ([]byte, []int) {
	return file_com_daml_daml_lf_2_1_daml_lf2_proto_rawDescGZIP(), []int{20, 11}
}

func (x *Update_RetrieveByKey) GetTemplate() *TypeConName {
	if x != nil {
		return x.Template
	}
	return nil
}

func (x *Update_RetrieveByKey) GetKey() *Expr {
	if x != nil {
		return x.Key
	}
	return nil
}

type Update_TryCatch struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ReturnType     *Type `protobuf:"bytes,1,opt,name=return_type,json=returnType,proto3" json:"return_type,omitempty"`
	TryExpr        *Expr `protobuf:"bytes,2,opt,name=try_expr,json=tryExpr,proto3" json:"try_expr,omitempty"`
	VarInternedStr int32 `protobuf:"varint,3,opt,name=var_interned_str,json=varInternedStr,proto3" json:"var_interned_str,omitempty"`
	CatchExpr      *Expr `protobuf:"bytes,4,opt,name=catch_expr,json=catchExpr,proto3" json:"catch_expr,omitempty"`
}

func (x *Update_TryCatch) Reset() {
	*x = Update_TryCatch{}
	mi := &file_com_daml_daml_lf_2_1_daml_lf2_proto_msgTypes[96]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Update_TryCatch) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Update_TryCatch) ProtoMessage() {}

func (x *Update_TryCatch) ProtoReflect() protoreflect.Message {
	mi := &file_com_daml_daml_lf_2_1_daml_lf2_proto_msgTypes[96]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Update_TryCatch.ProtoReflect.Descriptor instead.
func (*Update_TryCatch) Descriptor() ([]byte, []int) {
	return file_com_daml_daml_lf_2_1_daml_lf2_proto_rawDescGZIP(), []int{20, 12}
}

func (x *Update_TryCatch) GetReturnType() *Type {
	if x != nil {
		return x.ReturnType
	}
	return nil
}

func (x *Update_TryCatch) GetTryExpr() *Expr {
	if x != nil {
		return x.TryExpr
	}
	return nil
}

func (x *Update_TryCatch) GetVarInternedStr() int32 {
	if x != nil {
		return x.VarInternedStr
	}
	return 0
}

func (x *Update_TryCatch) GetCatchExpr() *Expr {
	if x != nil {
		return x.CatchExpr
	}
	return nil
}

type Scenario_Commit struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Party   *Expr `protobuf:"bytes,1,opt,name=party,proto3" json:"party,omitempty"`
	Expr    *Expr `protobuf:"bytes,2,opt,name=expr,proto3" json:"expr,omitempty"`
	RetType *Type `protobuf:"bytes,3,opt,name=ret_type,json=retType,proto3" json:"ret_type,omitempty"`
}

func (x *Scenario_Commit) Reset() {
	*x = Scenario_Commit{}
	mi := &file_com_daml_daml_lf_2_1_daml_lf2_proto_msgTypes[97]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Scenario_Commit) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Scenario_Commit) ProtoMessage() {}

func (x *Scenario_Commit) ProtoReflect() protoreflect.Message {
	mi := &file_com_daml_daml_lf_2_1_daml_lf2_proto_msgTypes[97]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Scenario_Commit.ProtoReflect.Descriptor instead.
func (*Scenario_Commit) Descriptor() ([]byte, []int) {
	return file_com_daml_daml_lf_2_1_daml_lf2_proto_rawDescGZIP(), []int{21, 0}
}

func (x *Scenario_Commit) GetParty() *Expr {
	if x != nil {
		return x.Party
	}
	return nil
}

func (x *Scenario_Commit) GetExpr() *Expr {
	if x != nil {
		return x.Expr
	}
	return nil
}

func (x *Scenario_Commit) GetRetType() *Type {
	if x != nil {
		return x.RetType
	}
	return nil
}

type Scenario_EmbedExpr struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type *Type `protobuf:"bytes,1,opt,name=type,proto3" json:"type,omitempty"`
	Body *Expr `protobuf:"bytes,2,opt,name=body,proto3" json:"body,omitempty"`
}

func (x *Scenario_EmbedExpr) Reset() {
	*x = Scenario_EmbedExpr{}
	mi := &file_com_daml_daml_lf_2_1_daml_lf2_proto_msgTypes[98]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Scenario_EmbedExpr) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Scenario_EmbedExpr) ProtoMessage() {}

func (x *Scenario_EmbedExpr) ProtoReflect() protoreflect.Message {
	mi := &file_com_daml_daml_lf_2_1_daml_lf2_proto_msgTypes[98]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Scenario_EmbedExpr.ProtoReflect.Descriptor instead.
func (*Scenario_EmbedExpr) Descriptor() ([]byte, []int) {
	return file_com_daml_daml_lf_2_1_daml_lf2_proto_rawDescGZIP(), []int{21, 1}
}

func (x *Scenario_EmbedExpr) GetType() *Type {
	if x != nil {
		return x.Type
	}
	return nil
}

func (x *Scenario_EmbedExpr) GetBody() *Expr {
	if x != nil {
		return x.Body
	}
	return nil
}

type InterfaceInstanceBody_InterfaceInstanceMethod struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MethodInternedName int32 `protobuf:"varint,1,opt,name=method_interned_name,json=methodInternedName,proto3" json:"method_interned_name,omitempty"`
	Value              *Expr `protobuf:"bytes,2,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *InterfaceInstanceBody_InterfaceInstanceMethod) Reset() {
	*x = InterfaceInstanceBody_InterfaceInstanceMethod{}
	mi := &file_com_daml_daml_lf_2_1_daml_lf2_proto_msgTypes[99]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *InterfaceInstanceBody_InterfaceInstanceMethod) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InterfaceInstanceBody_InterfaceInstanceMethod) ProtoMessage() {}

func (x *InterfaceInstanceBody_InterfaceInstanceMethod) ProtoReflect() protoreflect.Message {
	mi := &file_com_daml_daml_lf_2_1_daml_lf2_proto_msgTypes[99]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InterfaceInstanceBody_InterfaceInstanceMethod.ProtoReflect.Descriptor instead.
func (*InterfaceInstanceBody_InterfaceInstanceMethod) Descriptor() ([]byte, []int) {
	return file_com_daml_daml_lf_2_1_daml_lf2_proto_rawDescGZIP(), []int{23, 0}
}

func (x *InterfaceInstanceBody_InterfaceInstanceMethod) GetMethodInternedName() int32 {
	if x != nil {
		return x.MethodInternedName
	}
	return 0
}

func (x *InterfaceInstanceBody_InterfaceInstanceMethod) GetValue() *Expr {
	if x != nil {
		return x.Value
	}
	return nil
}

type DefTemplate_DefKey struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type        *Type `protobuf:"bytes,1,opt,name=type,proto3" json:"type,omitempty"`
	KeyExpr     *Expr `protobuf:"bytes,4,opt,name=key_expr,json=keyExpr,proto3" json:"key_expr,omitempty"`
	Maintainers *Expr `protobuf:"bytes,3,opt,name=maintainers,proto3" json:"maintainers,omitempty"`
}

func (x *DefTemplate_DefKey) Reset() {
	*x = DefTemplate_DefKey{}
	mi := &file_com_daml_daml_lf_2_1_daml_lf2_proto_msgTypes[100]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DefTemplate_DefKey) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DefTemplate_DefKey) ProtoMessage() {}

func (x *DefTemplate_DefKey) ProtoReflect() protoreflect.Message {
	mi := &file_com_daml_daml_lf_2_1_daml_lf2_proto_msgTypes[100]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DefTemplate_DefKey.ProtoReflect.Descriptor instead.
func (*DefTemplate_DefKey) Descriptor() ([]byte, []int) {
	return file_com_daml_daml_lf_2_1_daml_lf2_proto_rawDescGZIP(), []int{24, 0}
}

func (x *DefTemplate_DefKey) GetType() *Type {
	if x != nil {
		return x.Type
	}
	return nil
}

func (x *DefTemplate_DefKey) GetKeyExpr() *Expr {
	if x != nil {
		return x.KeyExpr
	}
	return nil
}

func (x *DefTemplate_DefKey) GetMaintainers() *Expr {
	if x != nil {
		return x.Maintainers
	}
	return nil
}

type DefTemplate_Implements struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Interface *TypeConName           `protobuf:"bytes,1,opt,name=interface,proto3" json:"interface,omitempty"`
	Body      *InterfaceInstanceBody `protobuf:"bytes,2,opt,name=body,proto3" json:"body,omitempty"`
	Location  *Location              `protobuf:"bytes,3,opt,name=location,proto3" json:"location,omitempty"`
}

func (x *DefTemplate_Implements) Reset() {
	*x = DefTemplate_Implements{}
	mi := &file_com_daml_daml_lf_2_1_daml_lf2_proto_msgTypes[101]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DefTemplate_Implements) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DefTemplate_Implements) ProtoMessage() {}

func (x *DefTemplate_Implements) ProtoReflect() protoreflect.Message {
	mi := &file_com_daml_daml_lf_2_1_daml_lf2_proto_msgTypes[101]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DefTemplate_Implements.ProtoReflect.Descriptor instead.
func (*DefTemplate_Implements) Descriptor() ([]byte, []int) {
	return file_com_daml_daml_lf_2_1_daml_lf2_proto_rawDescGZIP(), []int{24, 1}
}

func (x *DefTemplate_Implements) GetInterface() *TypeConName {
	if x != nil {
		return x.Interface
	}
	return nil
}

func (x *DefTemplate_Implements) GetBody() *InterfaceInstanceBody {
	if x != nil {
		return x.Body
	}
	return nil
}

func (x *DefTemplate_Implements) GetLocation() *Location {
	if x != nil {
		return x.Location
	}
	return nil
}

type DefDataType_Fields struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Fields []*FieldWithType `protobuf:"bytes,1,rep,name=fields,proto3" json:"fields,omitempty"`
}

func (x *DefDataType_Fields) Reset() {
	*x = DefDataType_Fields{}
	mi := &file_com_daml_daml_lf_2_1_daml_lf2_proto_msgTypes[102]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DefDataType_Fields) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DefDataType_Fields) ProtoMessage() {}

func (x *DefDataType_Fields) ProtoReflect() protoreflect.Message {
	mi := &file_com_daml_daml_lf_2_1_daml_lf2_proto_msgTypes[102]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DefDataType_Fields.ProtoReflect.Descriptor instead.
func (*DefDataType_Fields) Descriptor() ([]byte, []int) {
	return file_com_daml_daml_lf_2_1_daml_lf2_proto_rawDescGZIP(), []int{28, 0}
}

func (x *DefDataType_Fields) GetFields() []*FieldWithType {
	if x != nil {
		return x.Fields
	}
	return nil
}

type DefDataType_EnumConstructors struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ConstructorsInternedStr []int32 `protobuf:"varint,2,rep,packed,name=constructors_interned_str,json=constructorsInternedStr,proto3" json:"constructors_interned_str,omitempty"`
}

func (x *DefDataType_EnumConstructors) Reset() {
	*x = DefDataType_EnumConstructors{}
	mi := &file_com_daml_daml_lf_2_1_daml_lf2_proto_msgTypes[103]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DefDataType_EnumConstructors) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DefDataType_EnumConstructors) ProtoMessage() {}

func (x *DefDataType_EnumConstructors) ProtoReflect() protoreflect.Message {
	mi := &file_com_daml_daml_lf_2_1_daml_lf2_proto_msgTypes[103]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DefDataType_EnumConstructors.ProtoReflect.Descriptor instead.
func (*DefDataType_EnumConstructors) Descriptor() ([]byte, []int) {
	return file_com_daml_daml_lf_2_1_daml_lf2_proto_rawDescGZIP(), []int{28, 1}
}

func (x *DefDataType_EnumConstructors) GetConstructorsInternedStr() []int32 {
	if x != nil {
		return x.ConstructorsInternedStr
	}
	return nil
}

type DefValue_NameWithType struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	NameInternedDname int32 `protobuf:"varint,1,opt,name=name_interned_dname,json=nameInternedDname,proto3" json:"name_interned_dname,omitempty"`
	Type              *Type `protobuf:"bytes,2,opt,name=type,proto3" json:"type,omitempty"`
}

func (x *DefValue_NameWithType) Reset() {
	*x = DefValue_NameWithType{}
	mi := &file_com_daml_daml_lf_2_1_daml_lf2_proto_msgTypes[104]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DefValue_NameWithType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DefValue_NameWithType) ProtoMessage() {}

func (x *DefValue_NameWithType) ProtoReflect() protoreflect.Message {
	mi := &file_com_daml_daml_lf_2_1_daml_lf2_proto_msgTypes[104]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DefValue_NameWithType.ProtoReflect.Descriptor instead.
func (*DefValue_NameWithType) Descriptor() ([]byte, []int) {
	return file_com_daml_daml_lf_2_1_daml_lf2_proto_rawDescGZIP(), []int{30, 0}
}

func (x *DefValue_NameWithType) GetNameInternedDname() int32 {
	if x != nil {
		return x.NameInternedDname
	}
	return 0
}

func (x *DefValue_NameWithType) GetType() *Type {
	if x != nil {
		return x.Type
	}
	return nil
}

var File_com_daml_daml_lf_2_1_daml_lf2_proto protoreflect.FileDescriptor

var file_com_daml_daml_lf_2_1_daml_lf2_proto_rawDesc = []byte{
	0x0a, 0x23, 0x63, 0x6f, 0x6d, 0x2f, 0x64, 0x61, 0x6d, 0x6c, 0x2f, 0x64, 0x61, 0x6d, 0x6c, 0x5f,
	0x6c, 0x66, 0x5f, 0x32, 0x5f, 0x31, 0x2f, 0x64, 0x61, 0x6d, 0x6c, 0x5f, 0x6c, 0x66, 0x32, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x09, 0x64, 0x61, 0x6d, 0x6c, 0x5f, 0x6c, 0x66, 0x5f, 0x32,
	0x22, 0x06, 0x0a, 0x04, 0x55, 0x6e, 0x69, 0x74, 0x22, 0x73, 0x0a, 0x0a, 0x50, 0x61, 0x63, 0x6b,
	0x61, 0x67, 0x65, 0x52, 0x65, 0x66, 0x12, 0x25, 0x0a, 0x04, 0x73, 0x65, 0x6c, 0x66, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x64, 0x61, 0x6d, 0x6c, 0x5f, 0x6c, 0x66, 0x5f, 0x32,
	0x2e, 0x55, 0x6e, 0x69, 0x74, 0x48, 0x00, 0x52, 0x04, 0x73, 0x65, 0x6c, 0x66, 0x12, 0x37, 0x0a,
	0x17, 0x70, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x5f, 0x69, 0x64, 0x5f, 0x69, 0x6e, 0x74, 0x65,
	0x72, 0x6e, 0x65, 0x64, 0x5f, 0x73, 0x74, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x48, 0x00,
	0x52, 0x14, 0x70, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x49, 0x64, 0x49, 0x6e, 0x74, 0x65, 0x72,
	0x6e, 0x65, 0x64, 0x53, 0x74, 0x72, 0x42, 0x05, 0x0a, 0x03, 0x53, 0x75, 0x6d, 0x22, 0x80, 0x01,
	0x0a, 0x09, 0x4d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x52, 0x65, 0x66, 0x12, 0x36, 0x0a, 0x0b, 0x70,
	0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x5f, 0x72, 0x65, 0x66, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x15, 0x2e, 0x64, 0x61, 0x6d, 0x6c, 0x5f, 0x6c, 0x66, 0x5f, 0x32, 0x2e, 0x50, 0x61, 0x63,
	0x6b, 0x61, 0x67, 0x65, 0x52, 0x65, 0x66, 0x52, 0x0a, 0x70, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65,
	0x52, 0x65, 0x66, 0x12, 0x3b, 0x0a, 0x1a, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x5f, 0x6e, 0x61,
	0x6d, 0x65, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x65, 0x64, 0x5f, 0x64, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x17, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x4e,
	0x61, 0x6d, 0x65, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x65, 0x64, 0x44, 0x6e, 0x61, 0x6d, 0x65,
	0x22, 0x6b, 0x0a, 0x0b, 0x54, 0x79, 0x70, 0x65, 0x43, 0x6f, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x12,
	0x2c, 0x0a, 0x06, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x14, 0x2e, 0x64, 0x61, 0x6d, 0x6c, 0x5f, 0x6c, 0x66, 0x5f, 0x32, 0x2e, 0x4d, 0x6f, 0x64, 0x75,
	0x6c, 0x65, 0x52, 0x65, 0x66, 0x52, 0x06, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x12, 0x2e, 0x0a,
	0x13, 0x6e, 0x61, 0x6d, 0x65, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x65, 0x64, 0x5f, 0x64,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x11, 0x6e, 0x61, 0x6d, 0x65,
	0x49, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x65, 0x64, 0x44, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0x6b, 0x0a,
	0x0b, 0x54, 0x79, 0x70, 0x65, 0x53, 0x79, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x2c, 0x0a, 0x06,
	0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x64,
	0x61, 0x6d, 0x6c, 0x5f, 0x6c, 0x66, 0x5f, 0x32, 0x2e, 0x4d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x52,
	0x65, 0x66, 0x52, 0x06, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x12, 0x2e, 0x0a, 0x13, 0x6e, 0x61,
	0x6d, 0x65, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x65, 0x64, 0x5f, 0x64, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x11, 0x6e, 0x61, 0x6d, 0x65, 0x49, 0x6e, 0x74,
	0x65, 0x72, 0x6e, 0x65, 0x64, 0x44, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0x67, 0x0a, 0x07, 0x56, 0x61,
	0x6c, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x2c, 0x0a, 0x06, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x64, 0x61, 0x6d, 0x6c, 0x5f, 0x6c, 0x66, 0x5f,
	0x32, 0x2e, 0x4d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x52, 0x65, 0x66, 0x52, 0x06, 0x6d, 0x6f, 0x64,
	0x75, 0x6c, 0x65, 0x12, 0x2e, 0x0a, 0x13, 0x6e, 0x61, 0x6d, 0x65, 0x5f, 0x69, 0x6e, 0x74, 0x65,
	0x72, 0x6e, 0x65, 0x64, 0x5f, 0x64, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x11, 0x6e, 0x61, 0x6d, 0x65, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x65, 0x64, 0x44, 0x6e,
	0x61, 0x6d, 0x65, 0x22, 0x62, 0x0a, 0x0d, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x57, 0x69, 0x74, 0x68,
	0x54, 0x79, 0x70, 0x65, 0x12, 0x2c, 0x0a, 0x12, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x5f, 0x69, 0x6e,
	0x74, 0x65, 0x72, 0x6e, 0x65, 0x64, 0x5f, 0x73, 0x74, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x10, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x65, 0x64, 0x53,
	0x74, 0x72, 0x12, 0x23, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x0f, 0x2e, 0x64, 0x61, 0x6d, 0x6c, 0x5f, 0x6c, 0x66, 0x5f, 0x32, 0x2e, 0x54, 0x79, 0x70,
	0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x22, 0x5c, 0x0a, 0x0b, 0x56, 0x61, 0x72, 0x57, 0x69,
	0x74, 0x68, 0x54, 0x79, 0x70, 0x65, 0x12, 0x28, 0x0a, 0x10, 0x76, 0x61, 0x72, 0x5f, 0x69, 0x6e,
	0x74, 0x65, 0x72, 0x6e, 0x65, 0x64, 0x5f, 0x73, 0x74, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x0e, 0x76, 0x61, 0x72, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x65, 0x64, 0x53, 0x74, 0x72,
	0x12, 0x23, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f,
	0x2e, 0x64, 0x61, 0x6d, 0x6c, 0x5f, 0x6c, 0x66, 0x5f, 0x32, 0x2e, 0x54, 0x79, 0x70, 0x65, 0x52,
	0x04, 0x74, 0x79, 0x70, 0x65, 0x22, 0x60, 0x0a, 0x0f, 0x54, 0x79, 0x70, 0x65, 0x56, 0x61, 0x72,
	0x57, 0x69, 0x74, 0x68, 0x4b, 0x69, 0x6e, 0x64, 0x12, 0x28, 0x0a, 0x10, 0x76, 0x61, 0x72, 0x5f,
	0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x65, 0x64, 0x5f, 0x73, 0x74, 0x72, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x0e, 0x76, 0x61, 0x72, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x65, 0x64, 0x53,
	0x74, 0x72, 0x12, 0x23, 0x0a, 0x04, 0x6b, 0x69, 0x6e, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x0f, 0x2e, 0x64, 0x61, 0x6d, 0x6c, 0x5f, 0x6c, 0x66, 0x5f, 0x32, 0x2e, 0x4b, 0x69, 0x6e,
	0x64, 0x52, 0x04, 0x6b, 0x69, 0x6e, 0x64, 0x22, 0x62, 0x0a, 0x0d, 0x46, 0x69, 0x65, 0x6c, 0x64,
	0x57, 0x69, 0x74, 0x68, 0x45, 0x78, 0x70, 0x72, 0x12, 0x2c, 0x0a, 0x12, 0x66, 0x69, 0x65, 0x6c,
	0x64, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x65, 0x64, 0x5f, 0x73, 0x74, 0x72, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x10, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x49, 0x6e, 0x74, 0x65, 0x72,
	0x6e, 0x65, 0x64, 0x53, 0x74, 0x72, 0x12, 0x23, 0x0a, 0x04, 0x65, 0x78, 0x70, 0x72, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x64, 0x61, 0x6d, 0x6c, 0x5f, 0x6c, 0x66, 0x5f, 0x32,
	0x2e, 0x45, 0x78, 0x70, 0x72, 0x52, 0x04, 0x65, 0x78, 0x70, 0x72, 0x22, 0x60, 0x0a, 0x07, 0x42,
	0x69, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x12, 0x2e, 0x0a, 0x06, 0x62, 0x69, 0x6e, 0x64, 0x65, 0x72,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x64, 0x61, 0x6d, 0x6c, 0x5f, 0x6c, 0x66,
	0x5f, 0x32, 0x2e, 0x56, 0x61, 0x72, 0x57, 0x69, 0x74, 0x68, 0x54, 0x79, 0x70, 0x65, 0x52, 0x06,
	0x62, 0x69, 0x6e, 0x64, 0x65, 0x72, 0x12, 0x25, 0x0a, 0x05, 0x62, 0x6f, 0x75, 0x6e, 0x64, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x64, 0x61, 0x6d, 0x6c, 0x5f, 0x6c, 0x66, 0x5f,
	0x32, 0x2e, 0x45, 0x78, 0x70, 0x72, 0x52, 0x05, 0x62, 0x6f, 0x75, 0x6e, 0x64, 0x22, 0xe3, 0x01,
	0x0a, 0x04, 0x4b, 0x69, 0x6e, 0x64, 0x12, 0x25, 0x0a, 0x04, 0x73, 0x74, 0x61, 0x72, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x64, 0x61, 0x6d, 0x6c, 0x5f, 0x6c, 0x66, 0x5f, 0x32,
	0x2e, 0x55, 0x6e, 0x69, 0x74, 0x48, 0x00, 0x52, 0x04, 0x73, 0x74, 0x61, 0x72, 0x12, 0x2d, 0x0a,
	0x05, 0x61, 0x72, 0x72, 0x6f, 0x77, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x64,
	0x61, 0x6d, 0x6c, 0x5f, 0x6c, 0x66, 0x5f, 0x32, 0x2e, 0x4b, 0x69, 0x6e, 0x64, 0x2e, 0x41, 0x72,
	0x72, 0x6f, 0x77, 0x48, 0x00, 0x52, 0x05, 0x61, 0x72, 0x72, 0x6f, 0x77, 0x12, 0x23, 0x0a, 0x03,
	0x6e, 0x61, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x64, 0x61, 0x6d, 0x6c,
	0x5f, 0x6c, 0x66, 0x5f, 0x32, 0x2e, 0x55, 0x6e, 0x69, 0x74, 0x48, 0x00, 0x52, 0x03, 0x6e, 0x61,
	0x74, 0x1a, 0x59, 0x0a, 0x05, 0x41, 0x72, 0x72, 0x6f, 0x77, 0x12, 0x27, 0x0a, 0x06, 0x70, 0x61,
	0x72, 0x61, 0x6d, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x64, 0x61, 0x6d,
	0x6c, 0x5f, 0x6c, 0x66, 0x5f, 0x32, 0x2e, 0x4b, 0x69, 0x6e, 0x64, 0x52, 0x06, 0x70, 0x61, 0x72,
	0x61, 0x6d, 0x73, 0x12, 0x27, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x64, 0x61, 0x6d, 0x6c, 0x5f, 0x6c, 0x66, 0x5f, 0x32, 0x2e,
	0x4b, 0x69, 0x6e, 0x64, 0x52, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x42, 0x05, 0x0a, 0x03,
	0x53, 0x75, 0x6d, 0x22, 0xda, 0x06, 0x0a, 0x04, 0x54, 0x79, 0x70, 0x65, 0x12, 0x27, 0x0a, 0x03,
	0x76, 0x61, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x64, 0x61, 0x6d, 0x6c,
	0x5f, 0x6c, 0x66, 0x5f, 0x32, 0x2e, 0x54, 0x79, 0x70, 0x65, 0x2e, 0x56, 0x61, 0x72, 0x48, 0x00,
	0x52, 0x03, 0x76, 0x61, 0x72, 0x12, 0x27, 0x0a, 0x03, 0x63, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x13, 0x2e, 0x64, 0x61, 0x6d, 0x6c, 0x5f, 0x6c, 0x66, 0x5f, 0x32, 0x2e, 0x54,
	0x79, 0x70, 0x65, 0x2e, 0x43, 0x6f, 0x6e, 0x48, 0x00, 0x52, 0x03, 0x63, 0x6f, 0x6e, 0x12, 0x33,
	0x0a, 0x07, 0x62, 0x75, 0x69, 0x6c, 0x74, 0x69, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x17, 0x2e, 0x64, 0x61, 0x6d, 0x6c, 0x5f, 0x6c, 0x66, 0x5f, 0x32, 0x2e, 0x54, 0x79, 0x70, 0x65,
	0x2e, 0x42, 0x75, 0x69, 0x6c, 0x74, 0x69, 0x6e, 0x48, 0x00, 0x52, 0x07, 0x62, 0x75, 0x69, 0x6c,
	0x74, 0x69, 0x6e, 0x12, 0x30, 0x0a, 0x06, 0x66, 0x6f, 0x72, 0x61, 0x6c, 0x6c, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x64, 0x61, 0x6d, 0x6c, 0x5f, 0x6c, 0x66, 0x5f, 0x32, 0x2e,
	0x54, 0x79, 0x70, 0x65, 0x2e, 0x46, 0x6f, 0x72, 0x61, 0x6c, 0x6c, 0x48, 0x00, 0x52, 0x06, 0x66,
	0x6f, 0x72, 0x61, 0x6c, 0x6c, 0x12, 0x30, 0x0a, 0x06, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x64, 0x61, 0x6d, 0x6c, 0x5f, 0x6c, 0x66, 0x5f,
	0x32, 0x2e, 0x54, 0x79, 0x70, 0x65, 0x2e, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x48, 0x00, 0x52,
	0x06, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x12, 0x12, 0x0a, 0x03, 0x6e, 0x61, 0x74, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x12, 0x48, 0x00, 0x52, 0x03, 0x6e, 0x61, 0x74, 0x12, 0x27, 0x0a, 0x03, 0x73,
	0x79, 0x6e, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x64, 0x61, 0x6d, 0x6c, 0x5f,
	0x6c, 0x66, 0x5f, 0x32, 0x2e, 0x54, 0x79, 0x70, 0x65, 0x2e, 0x53, 0x79, 0x6e, 0x48, 0x00, 0x52,
	0x03, 0x73, 0x79, 0x6e, 0x12, 0x1c, 0x0a, 0x08, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x65, 0x64,
	0x18, 0x08, 0x20, 0x01, 0x28, 0x05, 0x48, 0x00, 0x52, 0x08, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e,
	0x65, 0x64, 0x1a, 0x54, 0x0a, 0x03, 0x56, 0x61, 0x72, 0x12, 0x28, 0x0a, 0x10, 0x76, 0x61, 0x72,
	0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x65, 0x64, 0x5f, 0x73, 0x74, 0x72, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x0e, 0x76, 0x61, 0x72, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x65, 0x64,
	0x53, 0x74, 0x72, 0x12, 0x23, 0x0a, 0x04, 0x61, 0x72, 0x67, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x0f, 0x2e, 0x64, 0x61, 0x6d, 0x6c, 0x5f, 0x6c, 0x66, 0x5f, 0x32, 0x2e, 0x54, 0x79,
	0x70, 0x65, 0x52, 0x04, 0x61, 0x72, 0x67, 0x73, 0x1a, 0x58, 0x0a, 0x03, 0x43, 0x6f, 0x6e, 0x12,
	0x2c, 0x0a, 0x05, 0x74, 0x79, 0x63, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16,
	0x2e, 0x64, 0x61, 0x6d, 0x6c, 0x5f, 0x6c, 0x66, 0x5f, 0x32, 0x2e, 0x54, 0x79, 0x70, 0x65, 0x43,
	0x6f, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x52, 0x05, 0x74, 0x79, 0x63, 0x6f, 0x6e, 0x12, 0x23, 0x0a,
	0x04, 0x61, 0x72, 0x67, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x64, 0x61,
	0x6d, 0x6c, 0x5f, 0x6c, 0x66, 0x5f, 0x32, 0x2e, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x61, 0x72,
	0x67, 0x73, 0x1a, 0x58, 0x0a, 0x03, 0x53, 0x79, 0x6e, 0x12, 0x2c, 0x0a, 0x05, 0x74, 0x79, 0x73,
	0x79, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x64, 0x61, 0x6d, 0x6c, 0x5f,
	0x6c, 0x66, 0x5f, 0x32, 0x2e, 0x54, 0x79, 0x70, 0x65, 0x53, 0x79, 0x6e, 0x4e, 0x61, 0x6d, 0x65,
	0x52, 0x05, 0x74, 0x79, 0x73, 0x79, 0x6e, 0x12, 0x23, 0x0a, 0x04, 0x61, 0x72, 0x67, 0x73, 0x18,
	0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x64, 0x61, 0x6d, 0x6c, 0x5f, 0x6c, 0x66, 0x5f,
	0x32, 0x2e, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x61, 0x72, 0x67, 0x73, 0x1a, 0x60, 0x0a, 0x07,
	0x42, 0x75, 0x69, 0x6c, 0x74, 0x69, 0x6e, 0x12, 0x30, 0x0a, 0x07, 0x62, 0x75, 0x69, 0x6c, 0x74,
	0x69, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x16, 0x2e, 0x64, 0x61, 0x6d, 0x6c, 0x5f,
	0x6c, 0x66, 0x5f, 0x32, 0x2e, 0x42, 0x75, 0x69, 0x6c, 0x74, 0x69, 0x6e, 0x54, 0x79, 0x70, 0x65,
	0x52, 0x07, 0x62, 0x75, 0x69, 0x6c, 0x74, 0x69, 0x6e, 0x12, 0x23, 0x0a, 0x04, 0x61, 0x72, 0x67,
	0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x64, 0x61, 0x6d, 0x6c, 0x5f, 0x6c,
	0x66, 0x5f, 0x32, 0x2e, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x61, 0x72, 0x67, 0x73, 0x1a, 0x5d,
	0x0a, 0x06, 0x46, 0x6f, 0x72, 0x61, 0x6c, 0x6c, 0x12, 0x2e, 0x0a, 0x04, 0x76, 0x61, 0x72, 0x73,
	0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x64, 0x61, 0x6d, 0x6c, 0x5f, 0x6c, 0x66,
	0x5f, 0x32, 0x2e, 0x54, 0x79, 0x70, 0x65, 0x56, 0x61, 0x72, 0x57, 0x69, 0x74, 0x68, 0x4b, 0x69,
	0x6e, 0x64, 0x52, 0x04, 0x76, 0x61, 0x72, 0x73, 0x12, 0x23, 0x0a, 0x04, 0x62, 0x6f, 0x64, 0x79,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x64, 0x61, 0x6d, 0x6c, 0x5f, 0x6c, 0x66,
	0x5f, 0x32, 0x2e, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x62, 0x6f, 0x64, 0x79, 0x1a, 0x3a, 0x0a,
	0x06, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x12, 0x30, 0x0a, 0x06, 0x66, 0x69, 0x65, 0x6c, 0x64,
	0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x64, 0x61, 0x6d, 0x6c, 0x5f, 0x6c,
	0x66, 0x5f, 0x32, 0x2e, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x57, 0x69, 0x74, 0x68, 0x54, 0x79, 0x70,
	0x65, 0x52, 0x06, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x42, 0x05, 0x0a, 0x03, 0x53, 0x75, 0x6d,
	0x22, 0x85, 0x03, 0x0a, 0x0a, 0x42, 0x75, 0x69, 0x6c, 0x74, 0x69, 0x6e, 0x4c, 0x69, 0x74, 0x12,
	0x16, 0x0a, 0x05, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x18, 0x01, 0x20, 0x01, 0x28, 0x12, 0x48, 0x00,
	0x52, 0x05, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x12, 0x1e, 0x0a, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73,
	0x74, 0x61, 0x6d, 0x70, 0x18, 0x02, 0x20, 0x01, 0x28, 0x10, 0x48, 0x00, 0x52, 0x09, 0x74, 0x69,
	0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x32, 0x0a, 0x14, 0x6e, 0x75, 0x6d, 0x65, 0x72,
	0x69, 0x63, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x65, 0x64, 0x5f, 0x73, 0x74, 0x72, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x05, 0x48, 0x00, 0x52, 0x12, 0x6e, 0x75, 0x6d, 0x65, 0x72, 0x69, 0x63,
	0x49, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x65, 0x64, 0x53, 0x74, 0x72, 0x12, 0x2c, 0x0a, 0x11, 0x74,
	0x65, 0x78, 0x74, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x65, 0x64, 0x5f, 0x73, 0x74, 0x72,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x48, 0x00, 0x52, 0x0f, 0x74, 0x65, 0x78, 0x74, 0x49, 0x6e,
	0x74, 0x65, 0x72, 0x6e, 0x65, 0x64, 0x53, 0x74, 0x72, 0x12, 0x14, 0x0a, 0x04, 0x64, 0x61, 0x74,
	0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x48, 0x00, 0x52, 0x04, 0x64, 0x61, 0x74, 0x65, 0x12,
	0x4a, 0x0a, 0x0d, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x5f, 0x6d, 0x6f, 0x64, 0x65,
	0x18, 0xe9, 0x07, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x22, 0x2e, 0x64, 0x61, 0x6d, 0x6c, 0x5f, 0x6c,
	0x66, 0x5f, 0x32, 0x2e, 0x42, 0x75, 0x69, 0x6c, 0x74, 0x69, 0x6e, 0x4c, 0x69, 0x74, 0x2e, 0x52,
	0x6f, 0x75, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x4d, 0x6f, 0x64, 0x65, 0x48, 0x00, 0x52, 0x0c, 0x72,
	0x6f, 0x75, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x4d, 0x6f, 0x64, 0x65, 0x22, 0x74, 0x0a, 0x0c, 0x52,
	0x6f, 0x75, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x4d, 0x6f, 0x64, 0x65, 0x12, 0x06, 0x0a, 0x02, 0x55,
	0x50, 0x10, 0x00, 0x12, 0x08, 0x0a, 0x04, 0x44, 0x4f, 0x57, 0x4e, 0x10, 0x01, 0x12, 0x0b, 0x0a,
	0x07, 0x43, 0x45, 0x49, 0x4c, 0x49, 0x4e, 0x47, 0x10, 0x02, 0x12, 0x09, 0x0a, 0x05, 0x46, 0x4c,
	0x4f, 0x4f, 0x52, 0x10, 0x03, 0x12, 0x0b, 0x0a, 0x07, 0x48, 0x41, 0x4c, 0x46, 0x5f, 0x55, 0x50,
	0x10, 0x04, 0x12, 0x0d, 0x0a, 0x09, 0x48, 0x41, 0x4c, 0x46, 0x5f, 0x44, 0x4f, 0x57, 0x4e, 0x10,
	0x05, 0x12, 0x0d, 0x0a, 0x09, 0x48, 0x41, 0x4c, 0x46, 0x5f, 0x45, 0x56, 0x45, 0x4e, 0x10, 0x06,
	0x12, 0x0f, 0x0a, 0x0b, 0x55, 0x4e, 0x4e, 0x45, 0x43, 0x45, 0x53, 0x53, 0x41, 0x52, 0x59, 0x10,
	0x07, 0x42, 0x05, 0x0a, 0x03, 0x53, 0x75, 0x6d, 0x22, 0xe2, 0x01, 0x0a, 0x08, 0x4c, 0x6f, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x2c, 0x0a, 0x06, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x64, 0x61, 0x6d, 0x6c, 0x5f, 0x6c, 0x66, 0x5f,
	0x32, 0x2e, 0x4d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x52, 0x65, 0x66, 0x52, 0x06, 0x6d, 0x6f, 0x64,
	0x75, 0x6c, 0x65, 0x12, 0x2f, 0x0a, 0x05, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x19, 0x2e, 0x64, 0x61, 0x6d, 0x6c, 0x5f, 0x6c, 0x66, 0x5f, 0x32, 0x2e, 0x4c,
	0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x52, 0x05, 0x72,
	0x61, 0x6e, 0x67, 0x65, 0x1a, 0x77, 0x0a, 0x05, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x12, 0x1d, 0x0a,
	0x0a, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x6c, 0x69, 0x6e, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x09, 0x73, 0x74, 0x61, 0x72, 0x74, 0x4c, 0x69, 0x6e, 0x65, 0x12, 0x1b, 0x0a, 0x09,
	0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x63, 0x6f, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x08, 0x73, 0x74, 0x61, 0x72, 0x74, 0x43, 0x6f, 0x6c, 0x12, 0x19, 0x0a, 0x08, 0x65, 0x6e, 0x64,
	0x5f, 0x6c, 0x69, 0x6e, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x65, 0x6e, 0x64,
	0x4c, 0x69, 0x6e, 0x65, 0x12, 0x17, 0x0a, 0x07, 0x65, 0x6e, 0x64, 0x5f, 0x63, 0x6f, 0x6c, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x65, 0x6e, 0x64, 0x43, 0x6f, 0x6c, 0x22, 0xb8, 0x3b,
	0x0a, 0x04, 0x45, 0x78, 0x70, 0x72, 0x12, 0x2f, 0x0a, 0x08, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x64, 0x61, 0x6d, 0x6c, 0x5f,
	0x6c, 0x66, 0x5f, 0x32, 0x2e, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x08, 0x6c,
	0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x2a, 0x0a, 0x10, 0x76, 0x61, 0x72, 0x5f, 0x69,
	0x6e, 0x74, 0x65, 0x72, 0x6e, 0x65, 0x64, 0x5f, 0x73, 0x74, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x05, 0x48, 0x00, 0x52, 0x0e, 0x76, 0x61, 0x72, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x65, 0x64,
	0x53, 0x74, 0x72, 0x12, 0x26, 0x0a, 0x03, 0x76, 0x61, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x12, 0x2e, 0x64, 0x61, 0x6d, 0x6c, 0x5f, 0x6c, 0x66, 0x5f, 0x32, 0x2e, 0x56, 0x61, 0x6c,
	0x4e, 0x61, 0x6d, 0x65, 0x48, 0x00, 0x52, 0x03, 0x76, 0x61, 0x6c, 0x12, 0x36, 0x0a, 0x07, 0x62,
	0x75, 0x69, 0x6c, 0x74, 0x69, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1a, 0x2e, 0x64,
	0x61, 0x6d, 0x6c, 0x5f, 0x6c, 0x66, 0x5f, 0x32, 0x2e, 0x42, 0x75, 0x69, 0x6c, 0x74, 0x69, 0x6e,
	0x46, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x00, 0x52, 0x07, 0x62, 0x75, 0x69, 0x6c,
	0x74, 0x69, 0x6e, 0x12, 0x38, 0x0a, 0x0b, 0x62, 0x75, 0x69, 0x6c, 0x74, 0x69, 0x6e, 0x5f, 0x63,
	0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x15, 0x2e, 0x64, 0x61, 0x6d, 0x6c, 0x5f,
	0x6c, 0x66, 0x5f, 0x32, 0x2e, 0x42, 0x75, 0x69, 0x6c, 0x74, 0x69, 0x6e, 0x43, 0x6f, 0x6e, 0x48,
	0x00, 0x52, 0x0a, 0x62, 0x75, 0x69, 0x6c, 0x74, 0x69, 0x6e, 0x43, 0x6f, 0x6e, 0x12, 0x38, 0x0a,
	0x0b, 0x62, 0x75, 0x69, 0x6c, 0x74, 0x69, 0x6e, 0x5f, 0x6c, 0x69, 0x74, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x15, 0x2e, 0x64, 0x61, 0x6d, 0x6c, 0x5f, 0x6c, 0x66, 0x5f, 0x32, 0x2e, 0x42,
	0x75, 0x69, 0x6c, 0x74, 0x69, 0x6e, 0x4c, 0x69, 0x74, 0x48, 0x00, 0x52, 0x0a, 0x62, 0x75, 0x69,
	0x6c, 0x74, 0x69, 0x6e, 0x4c, 0x69, 0x74, 0x12, 0x31, 0x0a, 0x07, 0x72, 0x65, 0x63, 0x5f, 0x63,
	0x6f, 0x6e, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x64, 0x61, 0x6d, 0x6c, 0x5f,
	0x6c, 0x66, 0x5f, 0x32, 0x2e, 0x45, 0x78, 0x70, 0x72, 0x2e, 0x52, 0x65, 0x63, 0x43, 0x6f, 0x6e,
	0x48, 0x00, 0x52, 0x06, 0x72, 0x65, 0x63, 0x43, 0x6f, 0x6e, 0x12, 0x34, 0x0a, 0x08, 0x72, 0x65,
	0x63, 0x5f, 0x70, 0x72, 0x6f, 0x6a, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x64,
	0x61, 0x6d, 0x6c, 0x5f, 0x6c, 0x66, 0x5f, 0x32, 0x2e, 0x45, 0x78, 0x70, 0x72, 0x2e, 0x52, 0x65,
	0x63, 0x50, 0x72, 0x6f, 0x6a, 0x48, 0x00, 0x52, 0x07, 0x72, 0x65, 0x63, 0x50, 0x72, 0x6f, 0x6a,
	0x12, 0x31, 0x0a, 0x07, 0x72, 0x65, 0x63, 0x5f, 0x75, 0x70, 0x64, 0x18, 0x09, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x16, 0x2e, 0x64, 0x61, 0x6d, 0x6c, 0x5f, 0x6c, 0x66, 0x5f, 0x32, 0x2e, 0x45, 0x78,
	0x70, 0x72, 0x2e, 0x52, 0x65, 0x63, 0x55, 0x70, 0x64, 0x48, 0x00, 0x52, 0x06, 0x72, 0x65, 0x63,
	0x55, 0x70, 0x64, 0x12, 0x3d, 0x0a, 0x0b, 0x76, 0x61, 0x72, 0x69, 0x61, 0x6e, 0x74, 0x5f, 0x63,
	0x6f, 0x6e, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x64, 0x61, 0x6d, 0x6c, 0x5f,
	0x6c, 0x66, 0x5f, 0x32, 0x2e, 0x45, 0x78, 0x70, 0x72, 0x2e, 0x56, 0x61, 0x72, 0x69, 0x61, 0x6e,
	0x74, 0x43, 0x6f, 0x6e, 0x48, 0x00, 0x52, 0x0a, 0x76, 0x61, 0x72, 0x69, 0x61, 0x6e, 0x74, 0x43,
	0x6f, 0x6e, 0x12, 0x34, 0x0a, 0x08, 0x65, 0x6e, 0x75, 0x6d, 0x5f, 0x63, 0x6f, 0x6e, 0x18, 0x0b,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x64, 0x61, 0x6d, 0x6c, 0x5f, 0x6c, 0x66, 0x5f, 0x32,
	0x2e, 0x45, 0x78, 0x70, 0x72, 0x2e, 0x45, 0x6e, 0x75, 0x6d, 0x43, 0x6f, 0x6e, 0x48, 0x00, 0x52,
	0x07, 0x65, 0x6e, 0x75, 0x6d, 0x43, 0x6f, 0x6e, 0x12, 0x3a, 0x0a, 0x0a, 0x73, 0x74, 0x72, 0x75,
	0x63, 0x74, 0x5f, 0x63, 0x6f, 0x6e, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x64,
	0x61, 0x6d, 0x6c, 0x5f, 0x6c, 0x66, 0x5f, 0x32, 0x2e, 0x45, 0x78, 0x70, 0x72, 0x2e, 0x53, 0x74,
	0x72, 0x75, 0x63, 0x74, 0x43, 0x6f, 0x6e, 0x48, 0x00, 0x52, 0x09, 0x73, 0x74, 0x72, 0x75, 0x63,
	0x74, 0x43, 0x6f, 0x6e, 0x12, 0x3d, 0x0a, 0x0b, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x5f, 0x70,
	0x72, 0x6f, 0x6a, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x64, 0x61, 0x6d, 0x6c,
	0x5f, 0x6c, 0x66, 0x5f, 0x32, 0x2e, 0x45, 0x78, 0x70, 0x72, 0x2e, 0x53, 0x74, 0x72, 0x75, 0x63,
	0x74, 0x50, 0x72, 0x6f, 0x6a, 0x48, 0x00, 0x52, 0x0a, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x50,
	0x72, 0x6f, 0x6a, 0x12, 0x3a, 0x0a, 0x0a, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x5f, 0x75, 0x70,
	0x64, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x64, 0x61, 0x6d, 0x6c, 0x5f, 0x6c,
	0x66, 0x5f, 0x32, 0x2e, 0x45, 0x78, 0x70, 0x72, 0x2e, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x55,
	0x70, 0x64, 0x48, 0x00, 0x52, 0x09, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x55, 0x70, 0x64, 0x12,
	0x27, 0x0a, 0x03, 0x61, 0x70, 0x70, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x64,
	0x61, 0x6d, 0x6c, 0x5f, 0x6c, 0x66, 0x5f, 0x32, 0x2e, 0x45, 0x78, 0x70, 0x72, 0x2e, 0x41, 0x70,
	0x70, 0x48, 0x00, 0x52, 0x03, 0x61, 0x70, 0x70, 0x12, 0x2e, 0x0a, 0x06, 0x74, 0x79, 0x5f, 0x61,
	0x70, 0x70, 0x18, 0x10, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x64, 0x61, 0x6d, 0x6c, 0x5f,
	0x6c, 0x66, 0x5f, 0x32, 0x2e, 0x45, 0x78, 0x70, 0x72, 0x2e, 0x54, 0x79, 0x41, 0x70, 0x70, 0x48,
	0x00, 0x52, 0x05, 0x74, 0x79, 0x41, 0x70, 0x70, 0x12, 0x27, 0x0a, 0x03, 0x61, 0x62, 0x73, 0x18,
	0x11, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x64, 0x61, 0x6d, 0x6c, 0x5f, 0x6c, 0x66, 0x5f,
	0x32, 0x2e, 0x45, 0x78, 0x70, 0x72, 0x2e, 0x41, 0x62, 0x73, 0x48, 0x00, 0x52, 0x03, 0x61, 0x62,
	0x73, 0x12, 0x2e, 0x0a, 0x06, 0x74, 0x79, 0x5f, 0x61, 0x62, 0x73, 0x18, 0x12, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x15, 0x2e, 0x64, 0x61, 0x6d, 0x6c, 0x5f, 0x6c, 0x66, 0x5f, 0x32, 0x2e, 0x45, 0x78,
	0x70, 0x72, 0x2e, 0x54, 0x79, 0x41, 0x62, 0x73, 0x48, 0x00, 0x52, 0x05, 0x74, 0x79, 0x41, 0x62,
	0x73, 0x12, 0x25, 0x0a, 0x04, 0x63, 0x61, 0x73, 0x65, 0x18, 0x13, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x0f, 0x2e, 0x64, 0x61, 0x6d, 0x6c, 0x5f, 0x6c, 0x66, 0x5f, 0x32, 0x2e, 0x43, 0x61, 0x73, 0x65,
	0x48, 0x00, 0x52, 0x04, 0x63, 0x61, 0x73, 0x65, 0x12, 0x24, 0x0a, 0x03, 0x6c, 0x65, 0x74, 0x18,
	0x14, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x64, 0x61, 0x6d, 0x6c, 0x5f, 0x6c, 0x66, 0x5f,
	0x32, 0x2e, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x48, 0x00, 0x52, 0x03, 0x6c, 0x65, 0x74, 0x12, 0x27,
	0x0a, 0x03, 0x6e, 0x69, 0x6c, 0x18, 0x15, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x64, 0x61,
	0x6d, 0x6c, 0x5f, 0x6c, 0x66, 0x5f, 0x32, 0x2e, 0x45, 0x78, 0x70, 0x72, 0x2e, 0x4e, 0x69, 0x6c,
	0x48, 0x00, 0x52, 0x03, 0x6e, 0x69, 0x6c, 0x12, 0x2a, 0x0a, 0x04, 0x63, 0x6f, 0x6e, 0x73, 0x18,
	0x16, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x64, 0x61, 0x6d, 0x6c, 0x5f, 0x6c, 0x66, 0x5f,
	0x32, 0x2e, 0x45, 0x78, 0x70, 0x72, 0x2e, 0x43, 0x6f, 0x6e, 0x73, 0x48, 0x00, 0x52, 0x04, 0x63,
	0x6f, 0x6e, 0x73, 0x12, 0x2b, 0x0a, 0x06, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x18, 0x17, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x64, 0x61, 0x6d, 0x6c, 0x5f, 0x6c, 0x66, 0x5f, 0x32, 0x2e,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x48, 0x00, 0x52, 0x06, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x12, 0x43, 0x0a, 0x0d, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x5f, 0x6e, 0x6f, 0x6e,
	0x65, 0x18, 0x19, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x64, 0x61, 0x6d, 0x6c, 0x5f, 0x6c,
	0x66, 0x5f, 0x32, 0x2e, 0x45, 0x78, 0x70, 0x72, 0x2e, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x61,
	0x6c, 0x4e, 0x6f, 0x6e, 0x65, 0x48, 0x00, 0x52, 0x0c, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x61,
	0x6c, 0x4e, 0x6f, 0x6e, 0x65, 0x12, 0x43, 0x0a, 0x0d, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x61,
	0x6c, 0x5f, 0x73, 0x6f, 0x6d, 0x65, 0x18, 0x1a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x64,
	0x61, 0x6d, 0x6c, 0x5f, 0x6c, 0x66, 0x5f, 0x32, 0x2e, 0x45, 0x78, 0x70, 0x72, 0x2e, 0x4f, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x53, 0x6f, 0x6d, 0x65, 0x48, 0x00, 0x52, 0x0c, 0x6f, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x53, 0x6f, 0x6d, 0x65, 0x12, 0x2e, 0x0a, 0x06, 0x74, 0x6f,
	0x5f, 0x61, 0x6e, 0x79, 0x18, 0x1b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x64, 0x61, 0x6d,
	0x6c, 0x5f, 0x6c, 0x66, 0x5f, 0x32, 0x2e, 0x45, 0x78, 0x70, 0x72, 0x2e, 0x54, 0x6f, 0x41, 0x6e,
	0x79, 0x48, 0x00, 0x52, 0x05, 0x74, 0x6f, 0x41, 0x6e, 0x79, 0x12, 0x34, 0x0a, 0x08, 0x66, 0x72,
	0x6f, 0x6d, 0x5f, 0x61, 0x6e, 0x79, 0x18, 0x1c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x64,
	0x61, 0x6d, 0x6c, 0x5f, 0x6c, 0x66, 0x5f, 0x32, 0x2e, 0x45, 0x78, 0x70, 0x72, 0x2e, 0x46, 0x72,
	0x6f, 0x6d, 0x41, 0x6e, 0x79, 0x48, 0x00, 0x52, 0x07, 0x66, 0x72, 0x6f, 0x6d, 0x41, 0x6e, 0x79,
	0x12, 0x2c, 0x0a, 0x08, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x72, 0x65, 0x70, 0x18, 0x1d, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x64, 0x61, 0x6d, 0x6c, 0x5f, 0x6c, 0x66, 0x5f, 0x32, 0x2e, 0x54,
	0x79, 0x70, 0x65, 0x48, 0x00, 0x52, 0x07, 0x74, 0x79, 0x70, 0x65, 0x52, 0x65, 0x70, 0x12, 0x4a,
	0x0a, 0x10, 0x74, 0x6f, 0x5f, 0x61, 0x6e, 0x79, 0x5f, 0x65, 0x78, 0x63, 0x65, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x18, 0x1e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x64, 0x61, 0x6d, 0x6c, 0x5f,
	0x6c, 0x66, 0x5f, 0x32, 0x2e, 0x45, 0x78, 0x70, 0x72, 0x2e, 0x54, 0x6f, 0x41, 0x6e, 0x79, 0x45,
	0x78, 0x63, 0x65, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x00, 0x52, 0x0e, 0x74, 0x6f, 0x41, 0x6e,
	0x79, 0x45, 0x78, 0x63, 0x65, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x50, 0x0a, 0x12, 0x66, 0x72,
	0x6f, 0x6d, 0x5f, 0x61, 0x6e, 0x79, 0x5f, 0x65, 0x78, 0x63, 0x65, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x18, 0x1f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x64, 0x61, 0x6d, 0x6c, 0x5f, 0x6c, 0x66,
	0x5f, 0x32, 0x2e, 0x45, 0x78, 0x70, 0x72, 0x2e, 0x46, 0x72, 0x6f, 0x6d, 0x41, 0x6e, 0x79, 0x45,
	0x78, 0x63, 0x65, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x00, 0x52, 0x10, 0x66, 0x72, 0x6f, 0x6d,
	0x41, 0x6e, 0x79, 0x45, 0x78, 0x63, 0x65, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x2d, 0x0a, 0x05,
	0x74, 0x68, 0x72, 0x6f, 0x77, 0x18, 0x20, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x64, 0x61,
	0x6d, 0x6c, 0x5f, 0x6c, 0x66, 0x5f, 0x32, 0x2e, 0x45, 0x78, 0x70, 0x72, 0x2e, 0x54, 0x68, 0x72,
	0x6f, 0x77, 0x48, 0x00, 0x52, 0x05, 0x74, 0x68, 0x72, 0x6f, 0x77, 0x12, 0x40, 0x0a, 0x0c, 0x74,
	0x6f, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x18, 0x21, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1b, 0x2e, 0x64, 0x61, 0x6d, 0x6c, 0x5f, 0x6c, 0x66, 0x5f, 0x32, 0x2e, 0x45, 0x78,
	0x70, 0x72, 0x2e, 0x54, 0x6f, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x48, 0x00,
	0x52, 0x0b, 0x74, 0x6f, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x12, 0x46, 0x0a,
	0x0e, 0x66, 0x72, 0x6f, 0x6d, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x18,
	0x22, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x64, 0x61, 0x6d, 0x6c, 0x5f, 0x6c, 0x66, 0x5f,
	0x32, 0x2e, 0x45, 0x78, 0x70, 0x72, 0x2e, 0x46, 0x72, 0x6f, 0x6d, 0x49, 0x6e, 0x74, 0x65, 0x72,
	0x66, 0x61, 0x63, 0x65, 0x48, 0x00, 0x52, 0x0d, 0x66, 0x72, 0x6f, 0x6d, 0x49, 0x6e, 0x74, 0x65,
	0x72, 0x66, 0x61, 0x63, 0x65, 0x12, 0x46, 0x0a, 0x0e, 0x63, 0x61, 0x6c, 0x6c, 0x5f, 0x69, 0x6e,
	0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x18, 0x23, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e,
	0x64, 0x61, 0x6d, 0x6c, 0x5f, 0x6c, 0x66, 0x5f, 0x32, 0x2e, 0x45, 0x78, 0x70, 0x72, 0x2e, 0x43,
	0x61, 0x6c, 0x6c, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x48, 0x00, 0x52, 0x0d,
	0x63, 0x61, 0x6c, 0x6c, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x12, 0x55, 0x0a,
	0x13, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x6f, 0x72, 0x79, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72,
	0x66, 0x61, 0x63, 0x65, 0x18, 0x24, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x64, 0x61, 0x6d,
	0x6c, 0x5f, 0x6c, 0x66, 0x5f, 0x32, 0x2e, 0x45, 0x78, 0x70, 0x72, 0x2e, 0x53, 0x69, 0x67, 0x6e,
	0x61, 0x74, 0x6f, 0x72, 0x79, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x48, 0x00,
	0x52, 0x12, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x6f, 0x72, 0x79, 0x49, 0x6e, 0x74, 0x65, 0x72,
	0x66, 0x61, 0x63, 0x65, 0x12, 0x52, 0x0a, 0x12, 0x6f, 0x62, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72,
	0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x18, 0x25, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x21, 0x2e, 0x64, 0x61, 0x6d, 0x6c, 0x5f, 0x6c, 0x66, 0x5f, 0x32, 0x2e, 0x45, 0x78, 0x70,
	0x72, 0x2e, 0x4f, 0x62, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66,
	0x61, 0x63, 0x65, 0x48, 0x00, 0x52, 0x11, 0x6f, 0x62, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x49,
	0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x12, 0x46, 0x0a, 0x0e, 0x76, 0x69, 0x65, 0x77,
	0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x18, 0x26, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1d, 0x2e, 0x64, 0x61, 0x6d, 0x6c, 0x5f, 0x6c, 0x66, 0x5f, 0x32, 0x2e, 0x45, 0x78, 0x70,
	0x72, 0x2e, 0x56, 0x69, 0x65, 0x77, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x48,
	0x00, 0x52, 0x0d, 0x76, 0x69, 0x65, 0x77, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65,
	0x12, 0x59, 0x0a, 0x15, 0x75, 0x6e, 0x73, 0x61, 0x66, 0x65, 0x5f, 0x66, 0x72, 0x6f, 0x6d, 0x5f,
	0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x18, 0x27, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x23, 0x2e, 0x64, 0x61, 0x6d, 0x6c, 0x5f, 0x6c, 0x66, 0x5f, 0x32, 0x2e, 0x45, 0x78, 0x70, 0x72,
	0x2e, 0x55, 0x6e, 0x73, 0x61, 0x66, 0x65, 0x46, 0x72, 0x6f, 0x6d, 0x49, 0x6e, 0x74, 0x65, 0x72,
	0x66, 0x61, 0x63, 0x65, 0x48, 0x00, 0x52, 0x13, 0x75, 0x6e, 0x73, 0x61, 0x66, 0x65, 0x46, 0x72,
	0x6f, 0x6d, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x12, 0x69, 0x0a, 0x1b, 0x69,
	0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x5f, 0x74, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74,
	0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x72, 0x65, 0x70, 0x18, 0x28, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x28, 0x2e, 0x64, 0x61, 0x6d, 0x6c, 0x5f, 0x6c, 0x66, 0x5f, 0x32, 0x2e, 0x45, 0x78, 0x70,
	0x72, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x54, 0x65, 0x6d, 0x70, 0x6c,
	0x61, 0x74, 0x65, 0x54, 0x79, 0x70, 0x65, 0x52, 0x65, 0x70, 0x48, 0x00, 0x52, 0x18, 0x69, 0x6e,
	0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x54,
	0x79, 0x70, 0x65, 0x52, 0x65, 0x70, 0x12, 0x59, 0x0a, 0x15, 0x74, 0x6f, 0x5f, 0x72, 0x65, 0x71,
	0x75, 0x69, 0x72, 0x65, 0x64, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x18,
	0x29, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x64, 0x61, 0x6d, 0x6c, 0x5f, 0x6c, 0x66, 0x5f,
	0x32, 0x2e, 0x45, 0x78, 0x70, 0x72, 0x2e, 0x54, 0x6f, 0x52, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65,
	0x64, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x48, 0x00, 0x52, 0x13, 0x74, 0x6f,
	0x52, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x64, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63,
	0x65, 0x12, 0x5f, 0x0a, 0x17, 0x66, 0x72, 0x6f, 0x6d, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x69, 0x72,
	0x65, 0x64, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x18, 0x2a, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x25, 0x2e, 0x64, 0x61, 0x6d, 0x6c, 0x5f, 0x6c, 0x66, 0x5f, 0x32, 0x2e, 0x45,
	0x78, 0x70, 0x72, 0x2e, 0x46, 0x72, 0x6f, 0x6d, 0x52, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x64,
	0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x48, 0x00, 0x52, 0x15, 0x66, 0x72, 0x6f,
	0x6d, 0x52, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x64, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61,
	0x63, 0x65, 0x12, 0x72, 0x0a, 0x1e, 0x75, 0x6e, 0x73, 0x61, 0x66, 0x65, 0x5f, 0x66, 0x72, 0x6f,
	0x6d, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x64, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72,
	0x66, 0x61, 0x63, 0x65, 0x18, 0x2b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x64, 0x61, 0x6d,
	0x6c, 0x5f, 0x6c, 0x66, 0x5f, 0x32, 0x2e, 0x45, 0x78, 0x70, 0x72, 0x2e, 0x55, 0x6e, 0x73, 0x61,
	0x66, 0x65, 0x46, 0x72, 0x6f, 0x6d, 0x52, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x64, 0x49, 0x6e,
	0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x48, 0x00, 0x52, 0x1b, 0x75, 0x6e, 0x73, 0x61, 0x66,
	0x65, 0x46, 0x72, 0x6f, 0x6d, 0x52, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x64, 0x49, 0x6e, 0x74,
	0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x12, 0x50, 0x0a, 0x11, 0x63, 0x68, 0x6f, 0x69, 0x63, 0x65,
	0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x18, 0xe9, 0x07, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x20, 0x2e, 0x64, 0x61, 0x6d, 0x6c, 0x5f, 0x6c, 0x66, 0x5f, 0x32, 0x2e, 0x45,
	0x78, 0x70, 0x72, 0x2e, 0x43, 0x68, 0x6f, 0x69, 0x63, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f,
	0x6c, 0x6c, 0x65, 0x72, 0x48, 0x00, 0x52, 0x10, 0x63, 0x68, 0x6f, 0x69, 0x63, 0x65, 0x43, 0x6f,
	0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x12, 0x4a, 0x0a, 0x0f, 0x63, 0x68, 0x6f, 0x69,
	0x63, 0x65, 0x5f, 0x6f, 0x62, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x18, 0xea, 0x07, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x64, 0x61, 0x6d, 0x6c, 0x5f, 0x6c, 0x66, 0x5f, 0x32, 0x2e, 0x45,
	0x78, 0x70, 0x72, 0x2e, 0x43, 0x68, 0x6f, 0x69, 0x63, 0x65, 0x4f, 0x62, 0x73, 0x65, 0x72, 0x76,
	0x65, 0x72, 0x48, 0x00, 0x52, 0x0e, 0x63, 0x68, 0x6f, 0x69, 0x63, 0x65, 0x4f, 0x62, 0x73, 0x65,
	0x72, 0x76, 0x65, 0x72, 0x12, 0x32, 0x0a, 0x08, 0x73, 0x63, 0x65, 0x6e, 0x61, 0x72, 0x69, 0x6f,
	0x18, 0xeb, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x64, 0x61, 0x6d, 0x6c, 0x5f, 0x6c,
	0x66, 0x5f, 0x32, 0x2e, 0x53, 0x63, 0x65, 0x6e, 0x61, 0x72, 0x69, 0x6f, 0x48, 0x00, 0x52, 0x08,
	0x73, 0x63, 0x65, 0x6e, 0x61, 0x72, 0x69, 0x6f, 0x12, 0x43, 0x0a, 0x0c, 0x65, 0x78, 0x70, 0x65,
	0x72, 0x69, 0x6d, 0x65, 0x6e, 0x74, 0x61, 0x6c, 0x18, 0x8f, 0x4e, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1c, 0x2e, 0x64, 0x61, 0x6d, 0x6c, 0x5f, 0x6c, 0x66, 0x5f, 0x32, 0x2e, 0x45, 0x78, 0x70, 0x72,
	0x2e, 0x45, 0x78, 0x70, 0x65, 0x72, 0x69, 0x6d, 0x65, 0x6e, 0x74, 0x61, 0x6c, 0x48, 0x00, 0x52,
	0x0c, 0x65, 0x78, 0x70, 0x65, 0x72, 0x69, 0x6d, 0x65, 0x6e, 0x74, 0x61, 0x6c, 0x1a, 0x65, 0x0a,
	0x06, 0x52, 0x65, 0x63, 0x43, 0x6f, 0x6e, 0x12, 0x29, 0x0a, 0x05, 0x74, 0x79, 0x63, 0x6f, 0x6e,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x64, 0x61, 0x6d, 0x6c, 0x5f, 0x6c, 0x66,
	0x5f, 0x32, 0x2e, 0x54, 0x79, 0x70, 0x65, 0x2e, 0x43, 0x6f, 0x6e, 0x52, 0x05, 0x74, 0x79, 0x63,
	0x6f, 0x6e, 0x12, 0x30, 0x0a, 0x06, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x18, 0x02, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x18, 0x2e, 0x64, 0x61, 0x6d, 0x6c, 0x5f, 0x6c, 0x66, 0x5f, 0x32, 0x2e, 0x46,
	0x69, 0x65, 0x6c, 0x64, 0x57, 0x69, 0x74, 0x68, 0x45, 0x78, 0x70, 0x72, 0x52, 0x06, 0x66, 0x69,
	0x65, 0x6c, 0x64, 0x73, 0x1a, 0x8b, 0x01, 0x0a, 0x07, 0x52, 0x65, 0x63, 0x50, 0x72, 0x6f, 0x6a,
	0x12, 0x29, 0x0a, 0x05, 0x74, 0x79, 0x63, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x13, 0x2e, 0x64, 0x61, 0x6d, 0x6c, 0x5f, 0x6c, 0x66, 0x5f, 0x32, 0x2e, 0x54, 0x79, 0x70, 0x65,
	0x2e, 0x43, 0x6f, 0x6e, 0x52, 0x05, 0x74, 0x79, 0x63, 0x6f, 0x6e, 0x12, 0x2c, 0x0a, 0x12, 0x66,
	0x69, 0x65, 0x6c, 0x64, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x65, 0x64, 0x5f, 0x73, 0x74,
	0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x10, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x49, 0x6e,
	0x74, 0x65, 0x72, 0x6e, 0x65, 0x64, 0x53, 0x74, 0x72, 0x12, 0x27, 0x0a, 0x06, 0x72, 0x65, 0x63,
	0x6f, 0x72, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x64, 0x61, 0x6d, 0x6c,
	0x5f, 0x6c, 0x66, 0x5f, 0x32, 0x2e, 0x45, 0x78, 0x70, 0x72, 0x52, 0x06, 0x72, 0x65, 0x63, 0x6f,
	0x72, 0x64, 0x1a, 0xb3, 0x01, 0x0a, 0x06, 0x52, 0x65, 0x63, 0x55, 0x70, 0x64, 0x12, 0x29, 0x0a,
	0x05, 0x74, 0x79, 0x63, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x64,
	0x61, 0x6d, 0x6c, 0x5f, 0x6c, 0x66, 0x5f, 0x32, 0x2e, 0x54, 0x79, 0x70, 0x65, 0x2e, 0x43, 0x6f,
	0x6e, 0x52, 0x05, 0x74, 0x79, 0x63, 0x6f, 0x6e, 0x12, 0x2c, 0x0a, 0x12, 0x66, 0x69, 0x65, 0x6c,
	0x64, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x65, 0x64, 0x5f, 0x73, 0x74, 0x72, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x10, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x49, 0x6e, 0x74, 0x65, 0x72,
	0x6e, 0x65, 0x64, 0x53, 0x74, 0x72, 0x12, 0x27, 0x0a, 0x06, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x64, 0x61, 0x6d, 0x6c, 0x5f, 0x6c, 0x66,
	0x5f, 0x32, 0x2e, 0x45, 0x78, 0x70, 0x72, 0x52, 0x06, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x12,
	0x27, 0x0a, 0x06, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x0f, 0x2e, 0x64, 0x61, 0x6d, 0x6c, 0x5f, 0x6c, 0x66, 0x5f, 0x32, 0x2e, 0x45, 0x78, 0x70, 0x72,
	0x52, 0x06, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x1a, 0xa2, 0x01, 0x0a, 0x0a, 0x56, 0x61, 0x72,
	0x69, 0x61, 0x6e, 0x74, 0x43, 0x6f, 0x6e, 0x12, 0x29, 0x0a, 0x05, 0x74, 0x79, 0x63, 0x6f, 0x6e,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x64, 0x61, 0x6d, 0x6c, 0x5f, 0x6c, 0x66,
	0x5f, 0x32, 0x2e, 0x54, 0x79, 0x70, 0x65, 0x2e, 0x43, 0x6f, 0x6e, 0x52, 0x05, 0x74, 0x79, 0x63,
	0x6f, 0x6e, 0x12, 0x37, 0x0a, 0x18, 0x76, 0x61, 0x72, 0x69, 0x61, 0x6e, 0x74, 0x5f, 0x63, 0x6f,
	0x6e, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x65, 0x64, 0x5f, 0x73, 0x74, 0x72, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x15, 0x76, 0x61, 0x72, 0x69, 0x61, 0x6e, 0x74, 0x43, 0x6f, 0x6e,
	0x49, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x65, 0x64, 0x53, 0x74, 0x72, 0x12, 0x30, 0x0a, 0x0b, 0x76,
	0x61, 0x72, 0x69, 0x61, 0x6e, 0x74, 0x5f, 0x61, 0x72, 0x67, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x0f, 0x2e, 0x64, 0x61, 0x6d, 0x6c, 0x5f, 0x6c, 0x66, 0x5f, 0x32, 0x2e, 0x45, 0x78, 0x70,
	0x72, 0x52, 0x0a, 0x76, 0x61, 0x72, 0x69, 0x61, 0x6e, 0x74, 0x41, 0x72, 0x67, 0x1a, 0x6a, 0x0a,
	0x07, 0x45, 0x6e, 0x75, 0x6d, 0x43, 0x6f, 0x6e, 0x12, 0x2c, 0x0a, 0x05, 0x74, 0x79, 0x63, 0x6f,
	0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x64, 0x61, 0x6d, 0x6c, 0x5f, 0x6c,
	0x66, 0x5f, 0x32, 0x2e, 0x54, 0x79, 0x70, 0x65, 0x43, 0x6f, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x52,
	0x05, 0x74, 0x79, 0x63, 0x6f, 0x6e, 0x12, 0x31, 0x0a, 0x15, 0x65, 0x6e, 0x75, 0x6d, 0x5f, 0x63,
	0x6f, 0x6e, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x65, 0x64, 0x5f, 0x73, 0x74, 0x72, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x12, 0x65, 0x6e, 0x75, 0x6d, 0x43, 0x6f, 0x6e, 0x49, 0x6e,
	0x74, 0x65, 0x72, 0x6e, 0x65, 0x64, 0x53, 0x74, 0x72, 0x1a, 0x3d, 0x0a, 0x09, 0x53, 0x74, 0x72,
	0x75, 0x63, 0x74, 0x43, 0x6f, 0x6e, 0x12, 0x30, 0x0a, 0x06, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x73,
	0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x64, 0x61, 0x6d, 0x6c, 0x5f, 0x6c, 0x66,
	0x5f, 0x32, 0x2e, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x57, 0x69, 0x74, 0x68, 0x45, 0x78, 0x70, 0x72,
	0x52, 0x06, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x1a, 0x63, 0x0a, 0x0a, 0x53, 0x74, 0x72, 0x75,
	0x63, 0x74, 0x50, 0x72, 0x6f, 0x6a, 0x12, 0x2c, 0x0a, 0x12, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x5f,
	0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x65, 0x64, 0x5f, 0x73, 0x74, 0x72, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x10, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x65,
	0x64, 0x53, 0x74, 0x72, 0x12, 0x27, 0x0a, 0x06, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x64, 0x61, 0x6d, 0x6c, 0x5f, 0x6c, 0x66, 0x5f, 0x32,
	0x2e, 0x45, 0x78, 0x70, 0x72, 0x52, 0x06, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x1a, 0x8b, 0x01,
	0x0a, 0x09, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x55, 0x70, 0x64, 0x12, 0x2c, 0x0a, 0x12, 0x66,
	0x69, 0x65, 0x6c, 0x64, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x65, 0x64, 0x5f, 0x73, 0x74,
	0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x10, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x49, 0x6e,
	0x74, 0x65, 0x72, 0x6e, 0x65, 0x64, 0x53, 0x74, 0x72, 0x12, 0x27, 0x0a, 0x06, 0x73, 0x74, 0x72,
	0x75, 0x63, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x64, 0x61, 0x6d, 0x6c,
	0x5f, 0x6c, 0x66, 0x5f, 0x32, 0x2e, 0x45, 0x78, 0x70, 0x72, 0x52, 0x06, 0x73, 0x74, 0x72, 0x75,
	0x63, 0x74, 0x12, 0x27, 0x0a, 0x06, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x64, 0x61, 0x6d, 0x6c, 0x5f, 0x6c, 0x66, 0x5f, 0x32, 0x2e, 0x45,
	0x78, 0x70, 0x72, 0x52, 0x06, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x1a, 0x4d, 0x0a, 0x03, 0x41,
	0x70, 0x70, 0x12, 0x21, 0x0a, 0x03, 0x66, 0x75, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x0f, 0x2e, 0x64, 0x61, 0x6d, 0x6c, 0x5f, 0x6c, 0x66, 0x5f, 0x32, 0x2e, 0x45, 0x78, 0x70, 0x72,
	0x52, 0x03, 0x66, 0x75, 0x6e, 0x12, 0x23, 0x0a, 0x04, 0x61, 0x72, 0x67, 0x73, 0x18, 0x02, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x64, 0x61, 0x6d, 0x6c, 0x5f, 0x6c, 0x66, 0x5f, 0x32, 0x2e,
	0x45, 0x78, 0x70, 0x72, 0x52, 0x04, 0x61, 0x72, 0x67, 0x73, 0x1a, 0x53, 0x0a, 0x05, 0x54, 0x79,
	0x41, 0x70, 0x70, 0x12, 0x23, 0x0a, 0x04, 0x65, 0x78, 0x70, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x0f, 0x2e, 0x64, 0x61, 0x6d, 0x6c, 0x5f, 0x6c, 0x66, 0x5f, 0x32, 0x2e, 0x45, 0x78,
	0x70, 0x72, 0x52, 0x04, 0x65, 0x78, 0x70, 0x72, 0x12, 0x25, 0x0a, 0x05, 0x74, 0x79, 0x70, 0x65,
	0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x64, 0x61, 0x6d, 0x6c, 0x5f, 0x6c,
	0x66, 0x5f, 0x32, 0x2e, 0x54, 0x79, 0x70, 0x65, 0x52, 0x05, 0x74, 0x79, 0x70, 0x65, 0x73, 0x1a,
	0x58, 0x0a, 0x03, 0x41, 0x62, 0x73, 0x12, 0x2c, 0x0a, 0x05, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x18,
	0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x64, 0x61, 0x6d, 0x6c, 0x5f, 0x6c, 0x66, 0x5f,
	0x32, 0x2e, 0x56, 0x61, 0x72, 0x57, 0x69, 0x74, 0x68, 0x54, 0x79, 0x70, 0x65, 0x52, 0x05, 0x70,
	0x61, 0x72, 0x61, 0x6d, 0x12, 0x23, 0x0a, 0x04, 0x62, 0x6f, 0x64, 0x79, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x64, 0x61, 0x6d, 0x6c, 0x5f, 0x6c, 0x66, 0x5f, 0x32, 0x2e, 0x45,
	0x78, 0x70, 0x72, 0x52, 0x04, 0x62, 0x6f, 0x64, 0x79, 0x1a, 0x5e, 0x0a, 0x05, 0x54, 0x79, 0x41,
	0x62, 0x73, 0x12, 0x30, 0x0a, 0x05, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x18, 0x01, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x1a, 0x2e, 0x64, 0x61, 0x6d, 0x6c, 0x5f, 0x6c, 0x66, 0x5f, 0x32, 0x2e, 0x54, 0x79,
	0x70, 0x65, 0x56, 0x61, 0x72, 0x57, 0x69, 0x74, 0x68, 0x4b, 0x69, 0x6e, 0x64, 0x52, 0x05, 0x70,
	0x61, 0x72, 0x61, 0x6d, 0x12, 0x23, 0x0a, 0x04, 0x62, 0x6f, 0x64, 0x79, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x64, 0x61, 0x6d, 0x6c, 0x5f, 0x6c, 0x66, 0x5f, 0x32, 0x2e, 0x45,
	0x78, 0x70, 0x72, 0x52, 0x04, 0x62, 0x6f, 0x64, 0x79, 0x1a, 0x2a, 0x0a, 0x03, 0x4e, 0x69, 0x6c,
	0x12, 0x23, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f,
	0x2e, 0x64, 0x61, 0x6d, 0x6c, 0x5f, 0x6c, 0x66, 0x5f, 0x32, 0x2e, 0x54, 0x79, 0x70, 0x65, 0x52,
	0x04, 0x74, 0x79, 0x70, 0x65, 0x1a, 0x77, 0x0a, 0x04, 0x43, 0x6f, 0x6e, 0x73, 0x12, 0x23, 0x0a,
	0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x64, 0x61,
	0x6d, 0x6c, 0x5f, 0x6c, 0x66, 0x5f, 0x32, 0x2e, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79,
	0x70, 0x65, 0x12, 0x25, 0x0a, 0x05, 0x66, 0x72, 0x6f, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x0f, 0x2e, 0x64, 0x61, 0x6d, 0x6c, 0x5f, 0x6c, 0x66, 0x5f, 0x32, 0x2e, 0x45, 0x78,
	0x70, 0x72, 0x52, 0x05, 0x66, 0x72, 0x6f, 0x6e, 0x74, 0x12, 0x23, 0x0a, 0x04, 0x74, 0x61, 0x69,
	0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x64, 0x61, 0x6d, 0x6c, 0x5f, 0x6c,
	0x66, 0x5f, 0x32, 0x2e, 0x45, 0x78, 0x70, 0x72, 0x52, 0x04, 0x74, 0x61, 0x69, 0x6c, 0x1a, 0x33,
	0x0a, 0x0c, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x4e, 0x6f, 0x6e, 0x65, 0x12, 0x23,
	0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x64,
	0x61, 0x6d, 0x6c, 0x5f, 0x6c, 0x66, 0x5f, 0x32, 0x2e, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74,
	0x79, 0x70, 0x65, 0x1a, 0x5a, 0x0a, 0x0c, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x53,
	0x6f, 0x6d, 0x65, 0x12, 0x23, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x0f, 0x2e, 0x64, 0x61, 0x6d, 0x6c, 0x5f, 0x6c, 0x66, 0x5f, 0x32, 0x2e, 0x54, 0x79,
	0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x25, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x64, 0x61, 0x6d, 0x6c, 0x5f, 0x6c,
	0x66, 0x5f, 0x32, 0x2e, 0x45, 0x78, 0x70, 0x72, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x1a,
	0x51, 0x0a, 0x05, 0x54, 0x6f, 0x41, 0x6e, 0x79, 0x12, 0x23, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x64, 0x61, 0x6d, 0x6c, 0x5f, 0x6c, 0x66,
	0x5f, 0x32, 0x2e, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x23, 0x0a,
	0x04, 0x65, 0x78, 0x70, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x64, 0x61,
	0x6d, 0x6c, 0x5f, 0x6c, 0x66, 0x5f, 0x32, 0x2e, 0x45, 0x78, 0x70, 0x72, 0x52, 0x04, 0x65, 0x78,
	0x70, 0x72, 0x1a, 0x53, 0x0a, 0x07, 0x46, 0x72, 0x6f, 0x6d, 0x41, 0x6e, 0x79, 0x12, 0x23, 0x0a,
	0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x64, 0x61,
	0x6d, 0x6c, 0x5f, 0x6c, 0x66, 0x5f, 0x32, 0x2e, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79,
	0x70, 0x65, 0x12, 0x23, 0x0a, 0x04, 0x65, 0x78, 0x70, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x0f, 0x2e, 0x64, 0x61, 0x6d, 0x6c, 0x5f, 0x6c, 0x66, 0x5f, 0x32, 0x2e, 0x45, 0x78, 0x70,
	0x72, 0x52, 0x04, 0x65, 0x78, 0x70, 0x72, 0x1a, 0x5a, 0x0a, 0x0e, 0x54, 0x6f, 0x41, 0x6e, 0x79,
	0x45, 0x78, 0x63, 0x65, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x23, 0x0a, 0x04, 0x74, 0x79, 0x70,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x64, 0x61, 0x6d, 0x6c, 0x5f, 0x6c,
	0x66, 0x5f, 0x32, 0x2e, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x23,
	0x0a, 0x04, 0x65, 0x78, 0x70, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x64,
	0x61, 0x6d, 0x6c, 0x5f, 0x6c, 0x66, 0x5f, 0x32, 0x2e, 0x45, 0x78, 0x70, 0x72, 0x52, 0x04, 0x65,
	0x78, 0x70, 0x72, 0x1a, 0x5c, 0x0a, 0x10, 0x46, 0x72, 0x6f, 0x6d, 0x41, 0x6e, 0x79, 0x45, 0x78,
	0x63, 0x65, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x23, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x64, 0x61, 0x6d, 0x6c, 0x5f, 0x6c, 0x66, 0x5f,
	0x32, 0x2e, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x23, 0x0a, 0x04,
	0x65, 0x78, 0x70, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x64, 0x61, 0x6d,
	0x6c, 0x5f, 0x6c, 0x66, 0x5f, 0x32, 0x2e, 0x45, 0x78, 0x70, 0x72, 0x52, 0x04, 0x65, 0x78, 0x70,
	0x72, 0x1a, 0xa9, 0x01, 0x0a, 0x05, 0x54, 0x68, 0x72, 0x6f, 0x77, 0x12, 0x30, 0x0a, 0x0b, 0x72,
	0x65, 0x74, 0x75, 0x72, 0x6e, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x0f, 0x2e, 0x64, 0x61, 0x6d, 0x6c, 0x5f, 0x6c, 0x66, 0x5f, 0x32, 0x2e, 0x54, 0x79, 0x70,
	0x65, 0x52, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x12, 0x36, 0x0a,
	0x0e, 0x65, 0x78, 0x63, 0x65, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x64, 0x61, 0x6d, 0x6c, 0x5f, 0x6c, 0x66, 0x5f,
	0x32, 0x2e, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0d, 0x65, 0x78, 0x63, 0x65, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x54, 0x79, 0x70, 0x65, 0x12, 0x36, 0x0a, 0x0e, 0x65, 0x78, 0x63, 0x65, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x5f, 0x65, 0x78, 0x70, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e,
	0x64, 0x61, 0x6d, 0x6c, 0x5f, 0x6c, 0x66, 0x5f, 0x32, 0x2e, 0x45, 0x78, 0x70, 0x72, 0x52, 0x0d,
	0x65, 0x78, 0x63, 0x65, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x78, 0x70, 0x72, 0x1a, 0xbf, 0x01,
	0x0a, 0x0b, 0x54, 0x6f, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x12, 0x3d, 0x0a,
	0x0e, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x64, 0x61, 0x6d, 0x6c, 0x5f, 0x6c, 0x66, 0x5f,
	0x32, 0x2e, 0x54, 0x79, 0x70, 0x65, 0x43, 0x6f, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x52, 0x0d, 0x69,
	0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x3b, 0x0a, 0x0d,
	0x74, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x64, 0x61, 0x6d, 0x6c, 0x5f, 0x6c, 0x66, 0x5f, 0x32, 0x2e,
	0x54, 0x79, 0x70, 0x65, 0x43, 0x6f, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x52, 0x0c, 0x74, 0x65, 0x6d,
	0x70, 0x6c, 0x61, 0x74, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x34, 0x0a, 0x0d, 0x74, 0x65, 0x6d,
	0x70, 0x6c, 0x61, 0x74, 0x65, 0x5f, 0x65, 0x78, 0x70, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x0f, 0x2e, 0x64, 0x61, 0x6d, 0x6c, 0x5f, 0x6c, 0x66, 0x5f, 0x32, 0x2e, 0x45, 0x78, 0x70,
	0x72, 0x52, 0x0c, 0x74, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x45, 0x78, 0x70, 0x72, 0x1a,
	0xc3, 0x01, 0x0a, 0x0d, 0x46, 0x72, 0x6f, 0x6d, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63,
	0x65, 0x12, 0x3d, 0x0a, 0x0e, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x5f, 0x74,
	0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x64, 0x61, 0x6d, 0x6c,
	0x5f, 0x6c, 0x66, 0x5f, 0x32, 0x2e, 0x54, 0x79, 0x70, 0x65, 0x43, 0x6f, 0x6e, 0x4e, 0x61, 0x6d,
	0x65, 0x52, 0x0d, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65,
	0x12, 0x3b, 0x0a, 0x0d, 0x74, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x79, 0x70,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x64, 0x61, 0x6d, 0x6c, 0x5f, 0x6c,
	0x66, 0x5f, 0x32, 0x2e, 0x54, 0x79, 0x70, 0x65, 0x43, 0x6f, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x52,
	0x0c, 0x74, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x36, 0x0a,
	0x0e, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x5f, 0x65, 0x78, 0x70, 0x72, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x64, 0x61, 0x6d, 0x6c, 0x5f, 0x6c, 0x66, 0x5f,
	0x32, 0x2e, 0x45, 0x78, 0x70, 0x72, 0x52, 0x0d, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63,
	0x65, 0x45, 0x78, 0x70, 0x72, 0x1a, 0xb8, 0x01, 0x0a, 0x0d, 0x43, 0x61, 0x6c, 0x6c, 0x49, 0x6e,
	0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x12, 0x3d, 0x0a, 0x0e, 0x69, 0x6e, 0x74, 0x65, 0x72,
	0x66, 0x61, 0x63, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x16, 0x2e, 0x64, 0x61, 0x6d, 0x6c, 0x5f, 0x6c, 0x66, 0x5f, 0x32, 0x2e, 0x54, 0x79, 0x70, 0x65,
	0x43, 0x6f, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x52, 0x0d, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61,
	0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x30, 0x0a, 0x14, 0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64,
	0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x65, 0x64, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x12, 0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x49, 0x6e, 0x74, 0x65,
	0x72, 0x6e, 0x65, 0x64, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x36, 0x0a, 0x0e, 0x69, 0x6e, 0x74, 0x65,
	0x72, 0x66, 0x61, 0x63, 0x65, 0x5f, 0x65, 0x78, 0x70, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x0f, 0x2e, 0x64, 0x61, 0x6d, 0x6c, 0x5f, 0x6c, 0x66, 0x5f, 0x32, 0x2e, 0x45, 0x78, 0x70,
	0x72, 0x52, 0x0d, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x45, 0x78, 0x70, 0x72,
	0x1a, 0x6a, 0x0a, 0x0d, 0x56, 0x69, 0x65, 0x77, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63,
	0x65, 0x12, 0x34, 0x0a, 0x09, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x64, 0x61, 0x6d, 0x6c, 0x5f, 0x6c, 0x66, 0x5f, 0x32,
	0x2e, 0x54, 0x79, 0x70, 0x65, 0x43, 0x6f, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x52, 0x09, 0x69, 0x6e,
	0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x12, 0x23, 0x0a, 0x04, 0x65, 0x78, 0x70, 0x72, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x64, 0x61, 0x6d, 0x6c, 0x5f, 0x6c, 0x66, 0x5f,
	0x32, 0x2e, 0x45, 0x78, 0x70, 0x72, 0x52, 0x04, 0x65, 0x78, 0x70, 0x72, 0x1a, 0x6f, 0x0a, 0x12,
	0x53, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x6f, 0x72, 0x79, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61,
	0x63, 0x65, 0x12, 0x34, 0x0a, 0x09, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x64, 0x61, 0x6d, 0x6c, 0x5f, 0x6c, 0x66, 0x5f,
	0x32, 0x2e, 0x54, 0x79, 0x70, 0x65, 0x43, 0x6f, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x52, 0x09, 0x69,
	0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x12, 0x23, 0x0a, 0x04, 0x65, 0x78, 0x70, 0x72,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x64, 0x61, 0x6d, 0x6c, 0x5f, 0x6c, 0x66,
	0x5f, 0x32, 0x2e, 0x45, 0x78, 0x70, 0x72, 0x52, 0x04, 0x65, 0x78, 0x70, 0x72, 0x1a, 0x6e, 0x0a,
	0x11, 0x4f, 0x62, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61,
	0x63, 0x65, 0x12, 0x34, 0x0a, 0x09, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x64, 0x61, 0x6d, 0x6c, 0x5f, 0x6c, 0x66, 0x5f,
	0x32, 0x2e, 0x54, 0x79, 0x70, 0x65, 0x43, 0x6f, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x52, 0x09, 0x69,
	0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x12, 0x23, 0x0a, 0x04, 0x65, 0x78, 0x70, 0x72,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x64, 0x61, 0x6d, 0x6c, 0x5f, 0x6c, 0x66,
	0x5f, 0x32, 0x2e, 0x45, 0x78, 0x70, 0x72, 0x52, 0x04, 0x65, 0x78, 0x70, 0x72, 0x1a, 0x84, 0x02,
	0x0a, 0x13, 0x55, 0x6e, 0x73, 0x61, 0x66, 0x65, 0x46, 0x72, 0x6f, 0x6d, 0x49, 0x6e, 0x74, 0x65,
	0x72, 0x66, 0x61, 0x63, 0x65, 0x12, 0x3d, 0x0a, 0x0e, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61,
	0x63, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e,
	0x64, 0x61, 0x6d, 0x6c, 0x5f, 0x6c, 0x66, 0x5f, 0x32, 0x2e, 0x54, 0x79, 0x70, 0x65, 0x43, 0x6f,
	0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x52, 0x0d, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65,
	0x54, 0x79, 0x70, 0x65, 0x12, 0x3b, 0x0a, 0x0d, 0x74, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65,
	0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x64, 0x61,
	0x6d, 0x6c, 0x5f, 0x6c, 0x66, 0x5f, 0x32, 0x2e, 0x54, 0x79, 0x70, 0x65, 0x43, 0x6f, 0x6e, 0x4e,
	0x61, 0x6d, 0x65, 0x52, 0x0c, 0x74, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x54, 0x79, 0x70,
	0x65, 0x12, 0x39, 0x0a, 0x10, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x5f, 0x69, 0x64,
	0x5f, 0x65, 0x78, 0x70, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x64, 0x61,
	0x6d, 0x6c, 0x5f, 0x6c, 0x66, 0x5f, 0x32, 0x2e, 0x45, 0x78, 0x70, 0x72, 0x52, 0x0e, 0x63, 0x6f,
	0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x49, 0x64, 0x45, 0x78, 0x70, 0x72, 0x12, 0x36, 0x0a, 0x0e,
	0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x5f, 0x65, 0x78, 0x70, 0x72, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x64, 0x61, 0x6d, 0x6c, 0x5f, 0x6c, 0x66, 0x5f, 0x32,
	0x2e, 0x45, 0x78, 0x70, 0x72, 0x52, 0x0d, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65,
	0x45, 0x78, 0x70, 0x72, 0x1a, 0xca, 0x01, 0x0a, 0x13, 0x54, 0x6f, 0x52, 0x65, 0x71, 0x75, 0x69,
	0x72, 0x65, 0x64, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x12, 0x45, 0x0a, 0x12,
	0x72, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x64, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61,
	0x63, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x64, 0x61, 0x6d, 0x6c, 0x5f,
	0x6c, 0x66, 0x5f, 0x32, 0x2e, 0x54, 0x79, 0x70, 0x65, 0x43, 0x6f, 0x6e, 0x4e, 0x61, 0x6d, 0x65,
	0x52, 0x11, 0x72, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x64, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66,
	0x61, 0x63, 0x65, 0x12, 0x47, 0x0a, 0x13, 0x72, 0x65, 0x71, 0x75, 0x69, 0x72, 0x69, 0x6e, 0x67,
	0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x16, 0x2e, 0x64, 0x61, 0x6d, 0x6c, 0x5f, 0x6c, 0x66, 0x5f, 0x32, 0x2e, 0x54, 0x79, 0x70,
	0x65, 0x43, 0x6f, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x52, 0x12, 0x72, 0x65, 0x71, 0x75, 0x69, 0x72,
	0x69, 0x6e, 0x67, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x12, 0x23, 0x0a, 0x04,
	0x65, 0x78, 0x70, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x64, 0x61, 0x6d,
	0x6c, 0x5f, 0x6c, 0x66, 0x5f, 0x32, 0x2e, 0x45, 0x78, 0x70, 0x72, 0x52, 0x04, 0x65, 0x78, 0x70,
	0x72, 0x1a, 0xcc, 0x01, 0x0a, 0x15, 0x46, 0x72, 0x6f, 0x6d, 0x52, 0x65, 0x71, 0x75, 0x69, 0x72,
	0x65, 0x64, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x12, 0x45, 0x0a, 0x12, 0x72,
	0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x64, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x64, 0x61, 0x6d, 0x6c, 0x5f, 0x6c,
	0x66, 0x5f, 0x32, 0x2e, 0x54, 0x79, 0x70, 0x65, 0x43, 0x6f, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x52,
	0x11, 0x72, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x64, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61,
	0x63, 0x65, 0x12, 0x47, 0x0a, 0x13, 0x72, 0x65, 0x71, 0x75, 0x69, 0x72, 0x69, 0x6e, 0x67, 0x5f,
	0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x16, 0x2e, 0x64, 0x61, 0x6d, 0x6c, 0x5f, 0x6c, 0x66, 0x5f, 0x32, 0x2e, 0x54, 0x79, 0x70, 0x65,
	0x43, 0x6f, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x52, 0x12, 0x72, 0x65, 0x71, 0x75, 0x69, 0x72, 0x69,
	0x6e, 0x67, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x12, 0x23, 0x0a, 0x04, 0x65,
	0x78, 0x70, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x64, 0x61, 0x6d, 0x6c,
	0x5f, 0x6c, 0x66, 0x5f, 0x32, 0x2e, 0x45, 0x78, 0x70, 0x72, 0x52, 0x04, 0x65, 0x78, 0x70, 0x72,
	0x1a, 0xa0, 0x02, 0x0a, 0x1b, 0x55, 0x6e, 0x73, 0x61, 0x66, 0x65, 0x46, 0x72, 0x6f, 0x6d, 0x52,
	0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x64, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65,
	0x12, 0x45, 0x0a, 0x12, 0x72, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x64, 0x5f, 0x69, 0x6e, 0x74,
	0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x64,
	0x61, 0x6d, 0x6c, 0x5f, 0x6c, 0x66, 0x5f, 0x32, 0x2e, 0x54, 0x79, 0x70, 0x65, 0x43, 0x6f, 0x6e,
	0x4e, 0x61, 0x6d, 0x65, 0x52, 0x11, 0x72, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x64, 0x49, 0x6e,
	0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x12, 0x47, 0x0a, 0x13, 0x72, 0x65, 0x71, 0x75, 0x69,
	0x72, 0x69, 0x6e, 0x67, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x64, 0x61, 0x6d, 0x6c, 0x5f, 0x6c, 0x66, 0x5f, 0x32,
	0x2e, 0x54, 0x79, 0x70, 0x65, 0x43, 0x6f, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x52, 0x12, 0x72, 0x65,
	0x71, 0x75, 0x69, 0x72, 0x69, 0x6e, 0x67, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65,
	0x12, 0x39, 0x0a, 0x10, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x5f, 0x69, 0x64, 0x5f,
	0x65, 0x78, 0x70, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x64, 0x61, 0x6d,
	0x6c, 0x5f, 0x6c, 0x66, 0x5f, 0x32, 0x2e, 0x45, 0x78, 0x70, 0x72, 0x52, 0x0e, 0x63, 0x6f, 0x6e,
	0x74, 0x72, 0x61, 0x63, 0x74, 0x49, 0x64, 0x45, 0x78, 0x70, 0x72, 0x12, 0x36, 0x0a, 0x0e, 0x69,
	0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x5f, 0x65, 0x78, 0x70, 0x72, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x64, 0x61, 0x6d, 0x6c, 0x5f, 0x6c, 0x66, 0x5f, 0x32, 0x2e,
	0x45, 0x78, 0x70, 0x72, 0x52, 0x0d, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x45,
	0x78, 0x70, 0x72, 0x1a, 0x75, 0x0a, 0x18, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65,
	0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x54, 0x79, 0x70, 0x65, 0x52, 0x65, 0x70, 0x12,
	0x34, 0x0a, 0x09, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x16, 0x2e, 0x64, 0x61, 0x6d, 0x6c, 0x5f, 0x6c, 0x66, 0x5f, 0x32, 0x2e, 0x54,
	0x79, 0x70, 0x65, 0x43, 0x6f, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x52, 0x09, 0x69, 0x6e, 0x74, 0x65,
	0x72, 0x66, 0x61, 0x63, 0x65, 0x12, 0x23, 0x0a, 0x04, 0x65, 0x78, 0x70, 0x72, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x64, 0x61, 0x6d, 0x6c, 0x5f, 0x6c, 0x66, 0x5f, 0x32, 0x2e,
	0x45, 0x78, 0x70, 0x72, 0x52, 0x04, 0x65, 0x78, 0x70, 0x72, 0x1a, 0xe5, 0x01, 0x0a, 0x10, 0x43,
	0x68, 0x6f, 0x69, 0x63, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x12,
	0x32, 0x0a, 0x08, 0x74, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x16, 0x2e, 0x64, 0x61, 0x6d, 0x6c, 0x5f, 0x6c, 0x66, 0x5f, 0x32, 0x2e, 0x54, 0x79,
	0x70, 0x65, 0x43, 0x6f, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x52, 0x08, 0x74, 0x65, 0x6d, 0x70, 0x6c,
	0x61, 0x74, 0x65, 0x12, 0x2e, 0x0a, 0x13, 0x63, 0x68, 0x6f, 0x69, 0x63, 0x65, 0x5f, 0x69, 0x6e,
	0x74, 0x65, 0x72, 0x6e, 0x65, 0x64, 0x5f, 0x73, 0x74, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x11, 0x63, 0x68, 0x6f, 0x69, 0x63, 0x65, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x65, 0x64,
	0x53, 0x74, 0x72, 0x12, 0x34, 0x0a, 0x0d, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x5f,
	0x65, 0x78, 0x70, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x64, 0x61, 0x6d,
	0x6c, 0x5f, 0x6c, 0x66, 0x5f, 0x32, 0x2e, 0x45, 0x78, 0x70, 0x72, 0x52, 0x0c, 0x63, 0x6f, 0x6e,
	0x74, 0x72, 0x61, 0x63, 0x74, 0x45, 0x78, 0x70, 0x72, 0x12, 0x37, 0x0a, 0x0f, 0x63, 0x68, 0x6f,
	0x69, 0x63, 0x65, 0x5f, 0x61, 0x72, 0x67, 0x5f, 0x65, 0x78, 0x70, 0x72, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x64, 0x61, 0x6d, 0x6c, 0x5f, 0x6c, 0x66, 0x5f, 0x32, 0x2e, 0x45,
	0x78, 0x70, 0x72, 0x52, 0x0d, 0x63, 0x68, 0x6f, 0x69, 0x63, 0x65, 0x41, 0x72, 0x67, 0x45, 0x78,
	0x70, 0x72, 0x1a, 0xe3, 0x01, 0x0a, 0x0e, 0x43, 0x68, 0x6f, 0x69, 0x63, 0x65, 0x4f, 0x62, 0x73,
	0x65, 0x72, 0x76, 0x65, 0x72, 0x12, 0x32, 0x0a, 0x08, 0x74, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x64, 0x61, 0x6d, 0x6c, 0x5f, 0x6c,
	0x66, 0x5f, 0x32, 0x2e, 0x54, 0x79, 0x70, 0x65, 0x43, 0x6f, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x52,
	0x08, 0x74, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x12, 0x2e, 0x0a, 0x13, 0x63, 0x68, 0x6f,
	0x69, 0x63, 0x65, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x65, 0x64, 0x5f, 0x73, 0x74, 0x72,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x11, 0x63, 0x68, 0x6f, 0x69, 0x63, 0x65, 0x49, 0x6e,
	0x74, 0x65, 0x72, 0x6e, 0x65, 0x64, 0x53, 0x74, 0x72, 0x12, 0x34, 0x0a, 0x0d, 0x63, 0x6f, 0x6e,
	0x74, 0x72, 0x61, 0x63, 0x74, 0x5f, 0x65, 0x78, 0x70, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x0f, 0x2e, 0x64, 0x61, 0x6d, 0x6c, 0x5f, 0x6c, 0x66, 0x5f, 0x32, 0x2e, 0x45, 0x78, 0x70,
	0x72, 0x52, 0x0c, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x45, 0x78, 0x70, 0x72, 0x12,
	0x37, 0x0a, 0x0f, 0x63, 0x68, 0x6f, 0x69, 0x63, 0x65, 0x5f, 0x61, 0x72, 0x67, 0x5f, 0x65, 0x78,
	0x70, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x64, 0x61, 0x6d, 0x6c, 0x5f,
	0x6c, 0x66, 0x5f, 0x32, 0x2e, 0x45, 0x78, 0x70, 0x72, 0x52, 0x0d, 0x63, 0x68, 0x6f, 0x69, 0x63,
	0x65, 0x41, 0x72, 0x67, 0x45, 0x78, 0x70, 0x72, 0x1a, 0x47, 0x0a, 0x0c, 0x45, 0x78, 0x70, 0x65,
	0x72, 0x69, 0x6d, 0x65, 0x6e, 0x74, 0x61, 0x6c, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x23, 0x0a, 0x04,
	0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x64, 0x61, 0x6d,
	0x6c, 0x5f, 0x6c, 0x66, 0x5f, 0x32, 0x2e, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70,
	0x65, 0x42, 0x05, 0x0a, 0x03, 0x53, 0x75, 0x6d, 0x22, 0x8c, 0x07, 0x0a, 0x07, 0x43, 0x61, 0x73,
	0x65, 0x41, 0x6c, 0x74, 0x12, 0x2b, 0x0a, 0x07, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x64, 0x61, 0x6d, 0x6c, 0x5f, 0x6c, 0x66, 0x5f,
	0x32, 0x2e, 0x55, 0x6e, 0x69, 0x74, 0x48, 0x00, 0x52, 0x07, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c,
	0x74, 0x12, 0x36, 0x0a, 0x07, 0x76, 0x61, 0x72, 0x69, 0x61, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x64, 0x61, 0x6d, 0x6c, 0x5f, 0x6c, 0x66, 0x5f, 0x32, 0x2e, 0x43,
	0x61, 0x73, 0x65, 0x41, 0x6c, 0x74, 0x2e, 0x56, 0x61, 0x72, 0x69, 0x61, 0x6e, 0x74, 0x48, 0x00,
	0x52, 0x07, 0x76, 0x61, 0x72, 0x69, 0x61, 0x6e, 0x74, 0x12, 0x38, 0x0a, 0x0b, 0x62, 0x75, 0x69,
	0x6c, 0x74, 0x69, 0x6e, 0x5f, 0x63, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x15,
	0x2e, 0x64, 0x61, 0x6d, 0x6c, 0x5f, 0x6c, 0x66, 0x5f, 0x32, 0x2e, 0x42, 0x75, 0x69, 0x6c, 0x74,
	0x69, 0x6e, 0x43, 0x6f, 0x6e, 0x48, 0x00, 0x52, 0x0a, 0x62, 0x75, 0x69, 0x6c, 0x74, 0x69, 0x6e,
	0x43, 0x6f, 0x6e, 0x12, 0x23, 0x0a, 0x03, 0x6e, 0x69, 0x6c, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x0f, 0x2e, 0x64, 0x61, 0x6d, 0x6c, 0x5f, 0x6c, 0x66, 0x5f, 0x32, 0x2e, 0x55, 0x6e, 0x69,
	0x74, 0x48, 0x00, 0x52, 0x03, 0x6e, 0x69, 0x6c, 0x12, 0x2d, 0x0a, 0x04, 0x63, 0x6f, 0x6e, 0x73,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x64, 0x61, 0x6d, 0x6c, 0x5f, 0x6c, 0x66,
	0x5f, 0x32, 0x2e, 0x43, 0x61, 0x73, 0x65, 0x41, 0x6c, 0x74, 0x2e, 0x43, 0x6f, 0x6e, 0x73, 0x48,
	0x00, 0x52, 0x04, 0x63, 0x6f, 0x6e, 0x73, 0x12, 0x36, 0x0a, 0x0d, 0x6f, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x61, 0x6c, 0x5f, 0x6e, 0x6f, 0x6e, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f,
	0x2e, 0x64, 0x61, 0x6d, 0x6c, 0x5f, 0x6c, 0x66, 0x5f, 0x32, 0x2e, 0x55, 0x6e, 0x69, 0x74, 0x48,
	0x00, 0x52, 0x0c, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x4e, 0x6f, 0x6e, 0x65, 0x12,
	0x46, 0x0a, 0x0d, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x5f, 0x73, 0x6f, 0x6d, 0x65,
	0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x64, 0x61, 0x6d, 0x6c, 0x5f, 0x6c, 0x66,
	0x5f, 0x32, 0x2e, 0x43, 0x61, 0x73, 0x65, 0x41, 0x6c, 0x74, 0x2e, 0x4f, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x61, 0x6c, 0x53, 0x6f, 0x6d, 0x65, 0x48, 0x00, 0x52, 0x0c, 0x6f, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x61, 0x6c, 0x53, 0x6f, 0x6d, 0x65, 0x12, 0x2d, 0x0a, 0x04, 0x65, 0x6e, 0x75, 0x6d, 0x18,
	0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x64, 0x61, 0x6d, 0x6c, 0x5f, 0x6c, 0x66, 0x5f,
	0x32, 0x2e, 0x43, 0x61, 0x73, 0x65, 0x41, 0x6c, 0x74, 0x2e, 0x45, 0x6e, 0x75, 0x6d, 0x48, 0x00,
	0x52, 0x04, 0x65, 0x6e, 0x75, 0x6d, 0x12, 0x23, 0x0a, 0x04, 0x62, 0x6f, 0x64, 0x79, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x64, 0x61, 0x6d, 0x6c, 0x5f, 0x6c, 0x66, 0x5f, 0x32,
	0x2e, 0x45, 0x78, 0x70, 0x72, 0x52, 0x04, 0x62, 0x6f, 0x64, 0x79, 0x1a, 0x95, 0x01, 0x0a, 0x07,
	0x56, 0x61, 0x72, 0x69, 0x61, 0x6e, 0x74, 0x12, 0x28, 0x0a, 0x03, 0x63, 0x6f, 0x6e, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x64, 0x61, 0x6d, 0x6c, 0x5f, 0x6c, 0x66, 0x5f, 0x32,
	0x2e, 0x54, 0x79, 0x70, 0x65, 0x43, 0x6f, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x52, 0x03, 0x63, 0x6f,
	0x6e, 0x12, 0x30, 0x0a, 0x14, 0x76, 0x61, 0x72, 0x69, 0x61, 0x6e, 0x74, 0x5f, 0x69, 0x6e, 0x74,
	0x65, 0x72, 0x6e, 0x65, 0x64, 0x5f, 0x73, 0x74, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x12, 0x76, 0x61, 0x72, 0x69, 0x61, 0x6e, 0x74, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x65, 0x64,
	0x53, 0x74, 0x72, 0x12, 0x2e, 0x0a, 0x13, 0x62, 0x69, 0x6e, 0x64, 0x65, 0x72, 0x5f, 0x69, 0x6e,
	0x74, 0x65, 0x72, 0x6e, 0x65, 0x64, 0x5f, 0x73, 0x74, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x11, 0x62, 0x69, 0x6e, 0x64, 0x65, 0x72, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x65, 0x64,
	0x53, 0x74, 0x72, 0x1a, 0x6a, 0x0a, 0x04, 0x45, 0x6e, 0x75, 0x6d, 0x12, 0x28, 0x0a, 0x03, 0x63,
	0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x64, 0x61, 0x6d, 0x6c, 0x5f,
	0x6c, 0x66, 0x5f, 0x32, 0x2e, 0x54, 0x79, 0x70, 0x65, 0x43, 0x6f, 0x6e, 0x4e, 0x61, 0x6d, 0x65,
	0x52, 0x03, 0x63, 0x6f, 0x6e, 0x12, 0x38, 0x0a, 0x18, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75,
	0x63, 0x74, 0x6f, 0x72, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x65, 0x64, 0x5f, 0x73, 0x74,
	0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x16, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75,
	0x63, 0x74, 0x6f, 0x72, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x65, 0x64, 0x53, 0x74, 0x72, 0x1a,
	0x6c, 0x0a, 0x04, 0x43, 0x6f, 0x6e, 0x73, 0x12, 0x31, 0x0a, 0x15, 0x76, 0x61, 0x72, 0x5f, 0x68,
	0x65, 0x61, 0x64, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x65, 0x64, 0x5f, 0x73, 0x74, 0x72,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x12, 0x76, 0x61, 0x72, 0x48, 0x65, 0x61, 0x64, 0x49,
	0x6e, 0x74, 0x65, 0x72, 0x6e, 0x65, 0x64, 0x53, 0x74, 0x72, 0x12, 0x31, 0x0a, 0x15, 0x76, 0x61,
	0x72, 0x5f, 0x74, 0x61, 0x69, 0x6c, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x65, 0x64, 0x5f,
	0x73, 0x74, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x12, 0x76, 0x61, 0x72, 0x54, 0x61,
	0x69, 0x6c, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x65, 0x64, 0x53, 0x74, 0x72, 0x1a, 0x41, 0x0a,
	0x0c, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x53, 0x6f, 0x6d, 0x65, 0x12, 0x31, 0x0a,
	0x15, 0x76, 0x61, 0x72, 0x5f, 0x62, 0x6f, 0x64, 0x79, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e,
	0x65, 0x64, 0x5f, 0x73, 0x74, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x12, 0x76, 0x61,
	0x72, 0x42, 0x6f, 0x64, 0x79, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x65, 0x64, 0x53, 0x74, 0x72,
	0x42, 0x05, 0x0a, 0x03, 0x53, 0x75, 0x6d, 0x22, 0x55, 0x0a, 0x04, 0x43, 0x61, 0x73, 0x65, 0x12,
	0x25, 0x0a, 0x05, 0x73, 0x63, 0x72, 0x75, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f,
	0x2e, 0x64, 0x61, 0x6d, 0x6c, 0x5f, 0x6c, 0x66, 0x5f, 0x32, 0x2e, 0x45, 0x78, 0x70, 0x72, 0x52,
	0x05, 0x73, 0x63, 0x72, 0x75, 0x74, 0x12, 0x26, 0x0a, 0x04, 0x61, 0x6c, 0x74, 0x73, 0x18, 0x02,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x64, 0x61, 0x6d, 0x6c, 0x5f, 0x6c, 0x66, 0x5f, 0x32,
	0x2e, 0x43, 0x61, 0x73, 0x65, 0x41, 0x6c, 0x74, 0x52, 0x04, 0x61, 0x6c, 0x74, 0x73, 0x22, 0x5c,
	0x0a, 0x05, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x12, 0x2e, 0x0a, 0x08, 0x62, 0x69, 0x6e, 0x64, 0x69,
	0x6e, 0x67, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x64, 0x61, 0x6d, 0x6c,
	0x5f, 0x6c, 0x66, 0x5f, 0x32, 0x2e, 0x42, 0x69, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x52, 0x08, 0x62,
	0x69, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x73, 0x12, 0x23, 0x0a, 0x04, 0x62, 0x6f, 0x64, 0x79, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x64, 0x61, 0x6d, 0x6c, 0x5f, 0x6c, 0x66, 0x5f,
	0x32, 0x2e, 0x45, 0x78, 0x70, 0x72, 0x52, 0x04, 0x62, 0x6f, 0x64, 0x79, 0x22, 0x50, 0x0a, 0x04,
	0x50, 0x75, 0x72, 0x65, 0x12, 0x23, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x64, 0x61, 0x6d, 0x6c, 0x5f, 0x6c, 0x66, 0x5f, 0x32, 0x2e, 0x54,
	0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x23, 0x0a, 0x04, 0x65, 0x78, 0x70,
	0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x64, 0x61, 0x6d, 0x6c, 0x5f, 0x6c,
	0x66, 0x5f, 0x32, 0x2e, 0x45, 0x78, 0x70, 0x72, 0x52, 0x04, 0x65, 0x78, 0x70, 0x72, 0x22, 0xa7,
	0x17, 0x0a, 0x06, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x12, 0x25, 0x0a, 0x04, 0x70, 0x75, 0x72,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x64, 0x61, 0x6d, 0x6c, 0x5f, 0x6c,
	0x66, 0x5f, 0x32, 0x2e, 0x50, 0x75, 0x72, 0x65, 0x48, 0x00, 0x52, 0x04, 0x70, 0x75, 0x72, 0x65,
	0x12, 0x28, 0x0a, 0x05, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x10, 0x2e, 0x64, 0x61, 0x6d, 0x6c, 0x5f, 0x6c, 0x66, 0x5f, 0x32, 0x2e, 0x42, 0x6c, 0x6f, 0x63,
	0x6b, 0x48, 0x00, 0x52, 0x05, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x12, 0x32, 0x0a, 0x06, 0x63, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x64, 0x61, 0x6d,
	0x6c, 0x5f, 0x6c, 0x66, 0x5f, 0x32, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x2e, 0x43, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x48, 0x00, 0x52, 0x06, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x12, 0x38,
	0x0a, 0x08, 0x65, 0x78, 0x65, 0x72, 0x63, 0x69, 0x73, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1a, 0x2e, 0x64, 0x61, 0x6d, 0x6c, 0x5f, 0x6c, 0x66, 0x5f, 0x32, 0x2e, 0x55, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x2e, 0x45, 0x78, 0x65, 0x72, 0x63, 0x69, 0x73, 0x65, 0x48, 0x00, 0x52, 0x08,
	0x65, 0x78, 0x65, 0x72, 0x63, 0x69, 0x73, 0x65, 0x12, 0x49, 0x0a, 0x0f, 0x65, 0x78, 0x65, 0x72,
	0x63, 0x69, 0x73, 0x65, 0x5f, 0x62, 0x79, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x0a, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1f, 0x2e, 0x64, 0x61, 0x6d, 0x6c, 0x5f, 0x6c, 0x66, 0x5f, 0x32, 0x2e, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x2e, 0x45, 0x78, 0x65, 0x72, 0x63, 0x69, 0x73, 0x65, 0x42, 0x79, 0x4b,
	0x65, 0x79, 0x48, 0x00, 0x52, 0x0d, 0x65, 0x78, 0x65, 0x72, 0x63, 0x69, 0x73, 0x65, 0x42, 0x79,
	0x4b, 0x65, 0x79, 0x12, 0x2f, 0x0a, 0x05, 0x66, 0x65, 0x74, 0x63, 0x68, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x17, 0x2e, 0x64, 0x61, 0x6d, 0x6c, 0x5f, 0x6c, 0x66, 0x5f, 0x32, 0x2e, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x2e, 0x46, 0x65, 0x74, 0x63, 0x68, 0x48, 0x00, 0x52, 0x05, 0x66,
	0x65, 0x74, 0x63, 0x68, 0x12, 0x2c, 0x0a, 0x08, 0x67, 0x65, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x64, 0x61, 0x6d, 0x6c, 0x5f, 0x6c, 0x66,
	0x5f, 0x32, 0x2e, 0x55, 0x6e, 0x69, 0x74, 0x48, 0x00, 0x52, 0x07, 0x67, 0x65, 0x74, 0x54, 0x69,
	0x6d, 0x65, 0x12, 0x45, 0x0a, 0x0d, 0x6c, 0x6f, 0x6f, 0x6b, 0x75, 0x70, 0x5f, 0x62, 0x79, 0x5f,
	0x6b, 0x65, 0x79, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x64, 0x61, 0x6d, 0x6c,
	0x5f, 0x6c, 0x66, 0x5f, 0x32, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x2e, 0x52, 0x65, 0x74,
	0x72, 0x69, 0x65, 0x76, 0x65, 0x42, 0x79, 0x4b, 0x65, 0x79, 0x48, 0x00, 0x52, 0x0b, 0x6c, 0x6f,
	0x6f, 0x6b, 0x75, 0x70, 0x42, 0x79, 0x4b, 0x65, 0x79, 0x12, 0x43, 0x0a, 0x0c, 0x66, 0x65, 0x74,
	0x63, 0x68, 0x5f, 0x62, 0x79, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1f, 0x2e, 0x64, 0x61, 0x6d, 0x6c, 0x5f, 0x6c, 0x66, 0x5f, 0x32, 0x2e, 0x55, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x2e, 0x52, 0x65, 0x74, 0x72, 0x69, 0x65, 0x76, 0x65, 0x42, 0x79, 0x4b, 0x65, 0x79,
	0x48, 0x00, 0x52, 0x0a, 0x66, 0x65, 0x74, 0x63, 0x68, 0x42, 0x79, 0x4b, 0x65, 0x79, 0x12, 0x3c,
	0x0a, 0x0a, 0x65, 0x6d, 0x62, 0x65, 0x64, 0x5f, 0x65, 0x78, 0x70, 0x72, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x64, 0x61, 0x6d, 0x6c, 0x5f, 0x6c, 0x66, 0x5f, 0x32, 0x2e, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x2e, 0x45, 0x6d, 0x62, 0x65, 0x64, 0x45, 0x78, 0x70, 0x72, 0x48,
	0x00, 0x52, 0x09, 0x65, 0x6d, 0x62, 0x65, 0x64, 0x45, 0x78, 0x70, 0x72, 0x12, 0x39, 0x0a, 0x09,
	0x74, 0x72, 0x79, 0x5f, 0x63, 0x61, 0x74, 0x63, 0x68, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1a, 0x2e, 0x64, 0x61, 0x6d, 0x6c, 0x5f, 0x6c, 0x66, 0x5f, 0x32, 0x2e, 0x55, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x2e, 0x54, 0x72, 0x79, 0x43, 0x61, 0x74, 0x63, 0x68, 0x48, 0x00, 0x52, 0x08, 0x74,
	0x72, 0x79, 0x43, 0x61, 0x74, 0x63, 0x68, 0x12, 0x4e, 0x0a, 0x10, 0x63, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x21, 0x2e, 0x64, 0x61, 0x6d, 0x6c, 0x5f, 0x6c, 0x66, 0x5f, 0x32, 0x2e, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x49, 0x6e, 0x74, 0x65, 0x72,
	0x66, 0x61, 0x63, 0x65, 0x48, 0x00, 0x52, 0x0f, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x49, 0x6e,
	0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x12, 0x54, 0x0a, 0x12, 0x65, 0x78, 0x65, 0x72, 0x63,
	0x69, 0x73, 0x65, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x18, 0x0d, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x64, 0x61, 0x6d, 0x6c, 0x5f, 0x6c, 0x66, 0x5f, 0x32, 0x2e,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x2e, 0x45, 0x78, 0x65, 0x72, 0x63, 0x69, 0x73, 0x65, 0x49,
	0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x48, 0x00, 0x52, 0x11, 0x65, 0x78, 0x65, 0x72,
	0x63, 0x69, 0x73, 0x65, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x12, 0x4b, 0x0a,
	0x0f, 0x66, 0x65, 0x74, 0x63, 0x68, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65,
	0x18, 0x0e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x64, 0x61, 0x6d, 0x6c, 0x5f, 0x6c, 0x66,
	0x5f, 0x32, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x2e, 0x46, 0x65, 0x74, 0x63, 0x68, 0x49,
	0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x48, 0x00, 0x52, 0x0e, 0x66, 0x65, 0x74, 0x63,
	0x68, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x12, 0x4f, 0x0a, 0x10, 0x64, 0x79,
	0x6e, 0x61, 0x6d, 0x69, 0x63, 0x5f, 0x65, 0x78, 0x65, 0x72, 0x63, 0x69, 0x73, 0x65, 0x18, 0xe9,
	0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x64, 0x61, 0x6d, 0x6c, 0x5f, 0x6c, 0x66, 0x5f,
	0x32, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x2e, 0x44, 0x79, 0x6e, 0x61, 0x6d, 0x69, 0x63,
	0x45, 0x78, 0x65, 0x72, 0x63, 0x69, 0x73, 0x65, 0x48, 0x00, 0x52, 0x0f, 0x64, 0x79, 0x6e, 0x61,
	0x6d, 0x69, 0x63, 0x45, 0x78, 0x65, 0x72, 0x63, 0x69, 0x73, 0x65, 0x12, 0x3d, 0x0a, 0x0a, 0x73,
	0x6f, 0x66, 0x74, 0x5f, 0x66, 0x65, 0x74, 0x63, 0x68, 0x18, 0xea, 0x07, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1b, 0x2e, 0x64, 0x61, 0x6d, 0x6c, 0x5f, 0x6c, 0x66, 0x5f, 0x32, 0x2e, 0x55, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x2e, 0x53, 0x6f, 0x66, 0x74, 0x46, 0x65, 0x74, 0x63, 0x68, 0x48, 0x00, 0x52,
	0x09, 0x73, 0x6f, 0x66, 0x74, 0x46, 0x65, 0x74, 0x63, 0x68, 0x12, 0x46, 0x0a, 0x0d, 0x73, 0x6f,
	0x66, 0x74, 0x5f, 0x65, 0x78, 0x65, 0x72, 0x63, 0x69, 0x73, 0x65, 0x18, 0xeb, 0x07, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x64, 0x61, 0x6d, 0x6c, 0x5f, 0x6c, 0x66, 0x5f, 0x32, 0x2e, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x2e, 0x53, 0x6f, 0x66, 0x74, 0x45, 0x78, 0x65, 0x72, 0x63, 0x69,
	0x73, 0x65, 0x48, 0x00, 0x52, 0x0c, 0x73, 0x6f, 0x66, 0x74, 0x45, 0x78, 0x65, 0x72, 0x63, 0x69,
	0x73, 0x65, 0x1a, 0x61, 0x0a, 0x06, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x12, 0x32, 0x0a, 0x08,
	0x74, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16,
	0x2e, 0x64, 0x61, 0x6d, 0x6c, 0x5f, 0x6c, 0x66, 0x5f, 0x32, 0x2e, 0x54, 0x79, 0x70, 0x65, 0x43,
	0x6f, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x52, 0x08, 0x74, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65,
	0x12, 0x23, 0x0a, 0x04, 0x65, 0x78, 0x70, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f,
	0x2e, 0x64, 0x61, 0x6d, 0x6c, 0x5f, 0x6c, 0x66, 0x5f, 0x32, 0x2e, 0x45, 0x78, 0x70, 0x72, 0x52,
	0x04, 0x65, 0x78, 0x70, 0x72, 0x1a, 0x6c, 0x0a, 0x0f, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x49,
	0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x12, 0x34, 0x0a, 0x09, 0x69, 0x6e, 0x74, 0x65,
	0x72, 0x66, 0x61, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x64, 0x61,
	0x6d, 0x6c, 0x5f, 0x6c, 0x66, 0x5f, 0x32, 0x2e, 0x54, 0x79, 0x70, 0x65, 0x43, 0x6f, 0x6e, 0x4e,
	0x61, 0x6d, 0x65, 0x52, 0x09, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x12, 0x23,
	0x0a, 0x04, 0x65, 0x78, 0x70, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x64,
	0x61, 0x6d, 0x6c, 0x5f, 0x6c, 0x66, 0x5f, 0x32, 0x2e, 0x45, 0x78, 0x70, 0x72, 0x52, 0x04, 0x65,
	0x78, 0x70, 0x72, 0x1a, 0xba, 0x01, 0x0a, 0x08, 0x45, 0x78, 0x65, 0x72, 0x63, 0x69, 0x73, 0x65,
	0x12, 0x32, 0x0a, 0x08, 0x74, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x16, 0x2e, 0x64, 0x61, 0x6d, 0x6c, 0x5f, 0x6c, 0x66, 0x5f, 0x32, 0x2e, 0x54,
	0x79, 0x70, 0x65, 0x43, 0x6f, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x52, 0x08, 0x74, 0x65, 0x6d, 0x70,
	0x6c, 0x61, 0x74, 0x65, 0x12, 0x2e, 0x0a, 0x13, 0x63, 0x68, 0x6f, 0x69, 0x63, 0x65, 0x5f, 0x69,
	0x6e, 0x74, 0x65, 0x72, 0x6e, 0x65, 0x64, 0x5f, 0x73, 0x74, 0x72, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x11, 0x63, 0x68, 0x6f, 0x69, 0x63, 0x65, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x65,
	0x64, 0x53, 0x74, 0x72, 0x12, 0x21, 0x0a, 0x03, 0x63, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x0f, 0x2e, 0x64, 0x61, 0x6d, 0x6c, 0x5f, 0x6c, 0x66, 0x5f, 0x32, 0x2e, 0x45, 0x78,
	0x70, 0x72, 0x52, 0x03, 0x63, 0x69, 0x64, 0x12, 0x21, 0x0a, 0x03, 0x61, 0x72, 0x67, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x64, 0x61, 0x6d, 0x6c, 0x5f, 0x6c, 0x66, 0x5f, 0x32,
	0x2e, 0x45, 0x78, 0x70, 0x72, 0x52, 0x03, 0x61, 0x72, 0x67, 0x4a, 0x04, 0x08, 0x04, 0x10, 0x05,
	0x1a, 0xb8, 0x01, 0x0a, 0x0c, 0x53, 0x6f, 0x66, 0x74, 0x45, 0x78, 0x65, 0x72, 0x63, 0x69, 0x73,
	0x65, 0x12, 0x32, 0x0a, 0x08, 0x74, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x64, 0x61, 0x6d, 0x6c, 0x5f, 0x6c, 0x66, 0x5f, 0x32, 0x2e,
	0x54, 0x79, 0x70, 0x65, 0x43, 0x6f, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x52, 0x08, 0x74, 0x65, 0x6d,
	0x70, 0x6c, 0x61, 0x74, 0x65, 0x12, 0x2e, 0x0a, 0x13, 0x63, 0x68, 0x6f, 0x69, 0x63, 0x65, 0x5f,
	0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x65, 0x64, 0x5f, 0x73, 0x74, 0x72, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x11, 0x63, 0x68, 0x6f, 0x69, 0x63, 0x65, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x6e,
	0x65, 0x64, 0x53, 0x74, 0x72, 0x12, 0x21, 0x0a, 0x03, 0x63, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x64, 0x61, 0x6d, 0x6c, 0x5f, 0x6c, 0x66, 0x5f, 0x32, 0x2e, 0x45,
	0x78, 0x70, 0x72, 0x52, 0x03, 0x63, 0x69, 0x64, 0x12, 0x21, 0x0a, 0x03, 0x61, 0x72, 0x67, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x64, 0x61, 0x6d, 0x6c, 0x5f, 0x6c, 0x66, 0x5f,
	0x32, 0x2e, 0x45, 0x78, 0x70, 0x72, 0x52, 0x03, 0x61, 0x72, 0x67, 0x1a, 0xbb, 0x01, 0x0a, 0x0f,
	0x44, 0x79, 0x6e, 0x61, 0x6d, 0x69, 0x63, 0x45, 0x78, 0x65, 0x72, 0x63, 0x69, 0x73, 0x65, 0x12,
	0x32, 0x0a, 0x08, 0x74, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x16, 0x2e, 0x64, 0x61, 0x6d, 0x6c, 0x5f, 0x6c, 0x66, 0x5f, 0x32, 0x2e, 0x54, 0x79,
	0x70, 0x65, 0x43, 0x6f, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x52, 0x08, 0x74, 0x65, 0x6d, 0x70, 0x6c,
	0x61, 0x74, 0x65, 0x12, 0x2e, 0x0a, 0x13, 0x63, 0x68, 0x6f, 0x69, 0x63, 0x65, 0x5f, 0x69, 0x6e,
	0x74, 0x65, 0x72, 0x6e, 0x65, 0x64, 0x5f, 0x73, 0x74, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x11, 0x63, 0x68, 0x6f, 0x69, 0x63, 0x65, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x65, 0x64,
	0x53, 0x74, 0x72, 0x12, 0x21, 0x0a, 0x03, 0x63, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x0f, 0x2e, 0x64, 0x61, 0x6d, 0x6c, 0x5f, 0x6c, 0x66, 0x5f, 0x32, 0x2e, 0x45, 0x78, 0x70,
	0x72, 0x52, 0x03, 0x63, 0x69, 0x64, 0x12, 0x21, 0x0a, 0x03, 0x61, 0x72, 0x67, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x64, 0x61, 0x6d, 0x6c, 0x5f, 0x6c, 0x66, 0x5f, 0x32, 0x2e,
	0x45, 0x78, 0x70, 0x72, 0x52, 0x03, 0x61, 0x72, 0x67, 0x1a, 0xe6, 0x01, 0x0a, 0x11, 0x45, 0x78,
	0x65, 0x72, 0x63, 0x69, 0x73, 0x65, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x12,
	0x34, 0x0a, 0x09, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x16, 0x2e, 0x64, 0x61, 0x6d, 0x6c, 0x5f, 0x6c, 0x66, 0x5f, 0x32, 0x2e, 0x54,
	0x79, 0x70, 0x65, 0x43, 0x6f, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x52, 0x09, 0x69, 0x6e, 0x74, 0x65,
	0x72, 0x66, 0x61, 0x63, 0x65, 0x12, 0x2e, 0x0a, 0x13, 0x63, 0x68, 0x6f, 0x69, 0x63, 0x65, 0x5f,
	0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x65, 0x64, 0x5f, 0x73, 0x74, 0x72, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x11, 0x63, 0x68, 0x6f, 0x69, 0x63, 0x65, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x6e,
	0x65, 0x64, 0x53, 0x74, 0x72, 0x12, 0x21, 0x0a, 0x03, 0x63, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x64, 0x61, 0x6d, 0x6c, 0x5f, 0x6c, 0x66, 0x5f, 0x32, 0x2e, 0x45,
	0x78, 0x70, 0x72, 0x52, 0x03, 0x63, 0x69, 0x64, 0x12, 0x21, 0x0a, 0x03, 0x61, 0x72, 0x67, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x64, 0x61, 0x6d, 0x6c, 0x5f, 0x6c, 0x66, 0x5f,
	0x32, 0x2e, 0x45, 0x78, 0x70, 0x72, 0x52, 0x03, 0x61, 0x72, 0x67, 0x12, 0x25, 0x0a, 0x05, 0x67,
	0x75, 0x61, 0x72, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x64, 0x61, 0x6d,
	0x6c, 0x5f, 0x6c, 0x66, 0x5f, 0x32, 0x2e, 0x45, 0x78, 0x70, 0x72, 0x52, 0x05, 0x67, 0x75, 0x61,
	0x72, 0x64, 0x1a, 0xb9, 0x01, 0x0a, 0x0d, 0x45, 0x78, 0x65, 0x72, 0x63, 0x69, 0x73, 0x65, 0x42,
	0x79, 0x4b, 0x65, 0x79, 0x12, 0x32, 0x0a, 0x08, 0x74, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x64, 0x61, 0x6d, 0x6c, 0x5f, 0x6c, 0x66,
	0x5f, 0x32, 0x2e, 0x54, 0x79, 0x70, 0x65, 0x43, 0x6f, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x52, 0x08,
	0x74, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x12, 0x2e, 0x0a, 0x13, 0x63, 0x68, 0x6f, 0x69,
	0x63, 0x65, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x65, 0x64, 0x5f, 0x73, 0x74, 0x72, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x11, 0x63, 0x68, 0x6f, 0x69, 0x63, 0x65, 0x49, 0x6e, 0x74,
	0x65, 0x72, 0x6e, 0x65, 0x64, 0x53, 0x74, 0x72, 0x12, 0x21, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x64, 0x61, 0x6d, 0x6c, 0x5f, 0x6c, 0x66, 0x5f,
	0x32, 0x2e, 0x45, 0x78, 0x70, 0x72, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x21, 0x0a, 0x03, 0x61,
	0x72, 0x67, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x64, 0x61, 0x6d, 0x6c, 0x5f,
	0x6c, 0x66, 0x5f, 0x32, 0x2e, 0x45, 0x78, 0x70, 0x72, 0x52, 0x03, 0x61, 0x72, 0x67, 0x1a, 0x5e,
	0x0a, 0x05, 0x46, 0x65, 0x74, 0x63, 0x68, 0x12, 0x32, 0x0a, 0x08, 0x74, 0x65, 0x6d, 0x70, 0x6c,
	0x61, 0x74, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x64, 0x61, 0x6d, 0x6c,
	0x5f, 0x6c, 0x66, 0x5f, 0x32, 0x2e, 0x54, 0x79, 0x70, 0x65, 0x43, 0x6f, 0x6e, 0x4e, 0x61, 0x6d,
	0x65, 0x52, 0x08, 0x74, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x12, 0x21, 0x0a, 0x03, 0x63,
	0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x64, 0x61, 0x6d, 0x6c, 0x5f,
	0x6c, 0x66, 0x5f, 0x32, 0x2e, 0x45, 0x78, 0x70, 0x72, 0x52, 0x03, 0x63, 0x69, 0x64, 0x1a, 0x62,
	0x0a, 0x09, 0x53, 0x6f, 0x66, 0x74, 0x46, 0x65, 0x74, 0x63, 0x68, 0x12, 0x32, 0x0a, 0x08, 0x74,
	0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e,
	0x64, 0x61, 0x6d, 0x6c, 0x5f, 0x6c, 0x66, 0x5f, 0x32, 0x2e, 0x54, 0x79, 0x70, 0x65, 0x43, 0x6f,
	0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x52, 0x08, 0x74, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x12,
	0x21, 0x0a, 0x03, 0x63, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x64,
	0x61, 0x6d, 0x6c, 0x5f, 0x6c, 0x66, 0x5f, 0x32, 0x2e, 0x45, 0x78, 0x70, 0x72, 0x52, 0x03, 0x63,
	0x69, 0x64, 0x1a, 0x69, 0x0a, 0x0e, 0x46, 0x65, 0x74, 0x63, 0x68, 0x49, 0x6e, 0x74, 0x65, 0x72,
	0x66, 0x61, 0x63, 0x65, 0x12, 0x34, 0x0a, 0x09, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x64, 0x61, 0x6d, 0x6c, 0x5f, 0x6c,
	0x66, 0x5f, 0x32, 0x2e, 0x54, 0x79, 0x70, 0x65, 0x43, 0x6f, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x52,
	0x09, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x12, 0x21, 0x0a, 0x03, 0x63, 0x69,
	0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x64, 0x61, 0x6d, 0x6c, 0x5f, 0x6c,
	0x66, 0x5f, 0x32, 0x2e, 0x45, 0x78, 0x70, 0x72, 0x52, 0x03, 0x63, 0x69, 0x64, 0x1a, 0x55, 0x0a,
	0x09, 0x45, 0x6d, 0x62, 0x65, 0x64, 0x45, 0x78, 0x70, 0x72, 0x12, 0x23, 0x0a, 0x04, 0x74, 0x79,
	0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x64, 0x61, 0x6d, 0x6c, 0x5f,
	0x6c, 0x66, 0x5f, 0x32, 0x2e, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12,
	0x23, 0x0a, 0x04, 0x62, 0x6f, 0x64, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e,
	0x64, 0x61, 0x6d, 0x6c, 0x5f, 0x6c, 0x66, 0x5f, 0x32, 0x2e, 0x45, 0x78, 0x70, 0x72, 0x52, 0x04,
	0x62, 0x6f, 0x64, 0x79, 0x1a, 0x66, 0x0a, 0x0d, 0x52, 0x65, 0x74, 0x72, 0x69, 0x65, 0x76, 0x65,
	0x42, 0x79, 0x4b, 0x65, 0x79, 0x12, 0x32, 0x0a, 0x08, 0x74, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x64, 0x61, 0x6d, 0x6c, 0x5f, 0x6c,
	0x66, 0x5f, 0x32, 0x2e, 0x54, 0x79, 0x70, 0x65, 0x43, 0x6f, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x52,
	0x08, 0x74, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x12, 0x21, 0x0a, 0x03, 0x6b, 0x65, 0x79,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x64, 0x61, 0x6d, 0x6c, 0x5f, 0x6c, 0x66,
	0x5f, 0x32, 0x2e, 0x45, 0x78, 0x70, 0x72, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x1a, 0xc2, 0x01, 0x0a,
	0x08, 0x54, 0x72, 0x79, 0x43, 0x61, 0x74, 0x63, 0x68, 0x12, 0x30, 0x0a, 0x0b, 0x72, 0x65, 0x74,
	0x75, 0x72, 0x6e, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f,
	0x2e, 0x64, 0x61, 0x6d, 0x6c, 0x5f, 0x6c, 0x66, 0x5f, 0x32, 0x2e, 0x54, 0x79, 0x70, 0x65, 0x52,
	0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x12, 0x2a, 0x0a, 0x08, 0x74,
	0x72, 0x79, 0x5f, 0x65, 0x78, 0x70, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e,
	0x64, 0x61, 0x6d, 0x6c, 0x5f, 0x6c, 0x66, 0x5f, 0x32, 0x2e, 0x45, 0x78, 0x70, 0x72, 0x52, 0x07,
	0x74, 0x72, 0x79, 0x45, 0x78, 0x70, 0x72, 0x12, 0x28, 0x0a, 0x10, 0x76, 0x61, 0x72, 0x5f, 0x69,
	0x6e, 0x74, 0x65, 0x72, 0x6e, 0x65, 0x64, 0x5f, 0x73, 0x74, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x0e, 0x76, 0x61, 0x72, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x65, 0x64, 0x53, 0x74,
	0x72, 0x12, 0x2e, 0x0a, 0x0a, 0x63, 0x61, 0x74, 0x63, 0x68, 0x5f, 0x65, 0x78, 0x70, 0x72, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x64, 0x61, 0x6d, 0x6c, 0x5f, 0x6c, 0x66, 0x5f,
	0x32, 0x2e, 0x45, 0x78, 0x70, 0x72, 0x52, 0x09, 0x63, 0x61, 0x74, 0x63, 0x68, 0x45, 0x78, 0x70,
	0x72, 0x42, 0x05, 0x0a, 0x03, 0x53, 0x75, 0x6d, 0x22, 0xf5, 0x04, 0x0a, 0x08, 0x53, 0x63, 0x65,
	0x6e, 0x61, 0x72, 0x69, 0x6f, 0x12, 0x25, 0x0a, 0x04, 0x70, 0x75, 0x72, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x64, 0x61, 0x6d, 0x6c, 0x5f, 0x6c, 0x66, 0x5f, 0x32, 0x2e,
	0x50, 0x75, 0x72, 0x65, 0x48, 0x00, 0x52, 0x04, 0x70, 0x75, 0x72, 0x65, 0x12, 0x28, 0x0a, 0x05,
	0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x64, 0x61,
	0x6d, 0x6c, 0x5f, 0x6c, 0x66, 0x5f, 0x32, 0x2e, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x48, 0x00, 0x52,
	0x05, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x12, 0x34, 0x0a, 0x06, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x64, 0x61, 0x6d, 0x6c, 0x5f, 0x6c, 0x66,
	0x5f, 0x32, 0x2e, 0x53, 0x63, 0x65, 0x6e, 0x61, 0x72, 0x69, 0x6f, 0x2e, 0x43, 0x6f, 0x6d, 0x6d,
	0x69, 0x74, 0x48, 0x00, 0x52, 0x06, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x12, 0x3c, 0x0a, 0x0a,
	0x6d, 0x75, 0x73, 0x74, 0x46, 0x61, 0x69, 0x6c, 0x41, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1a, 0x2e, 0x64, 0x61, 0x6d, 0x6c, 0x5f, 0x6c, 0x66, 0x5f, 0x32, 0x2e, 0x53, 0x63, 0x65,
	0x6e, 0x61, 0x72, 0x69, 0x6f, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x48, 0x00, 0x52, 0x0a,
	0x6d, 0x75, 0x73, 0x74, 0x46, 0x61, 0x69, 0x6c, 0x41, 0x74, 0x12, 0x25, 0x0a, 0x04, 0x70, 0x61,
	0x73, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x64, 0x61, 0x6d, 0x6c, 0x5f,
	0x6c, 0x66, 0x5f, 0x32, 0x2e, 0x45, 0x78, 0x70, 0x72, 0x48, 0x00, 0x52, 0x04, 0x70, 0x61, 0x73,
	0x73, 0x12, 0x2c, 0x0a, 0x08, 0x67, 0x65, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x64, 0x61, 0x6d, 0x6c, 0x5f, 0x6c, 0x66, 0x5f, 0x32, 0x2e,
	0x55, 0x6e, 0x69, 0x74, 0x48, 0x00, 0x52, 0x07, 0x67, 0x65, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x12,
	0x2e, 0x0a, 0x09, 0x67, 0x65, 0x74, 0x5f, 0x70, 0x61, 0x72, 0x74, 0x79, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x64, 0x61, 0x6d, 0x6c, 0x5f, 0x6c, 0x66, 0x5f, 0x32, 0x2e, 0x45,
	0x78, 0x70, 0x72, 0x48, 0x00, 0x52, 0x08, 0x67, 0x65, 0x74, 0x50, 0x61, 0x72, 0x74, 0x79, 0x12,
	0x3e, 0x0a, 0x0a, 0x65, 0x6d, 0x62, 0x65, 0x64, 0x5f, 0x65, 0x78, 0x70, 0x72, 0x18, 0x08, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x64, 0x61, 0x6d, 0x6c, 0x5f, 0x6c, 0x66, 0x5f, 0x32, 0x2e,
	0x53, 0x63, 0x65, 0x6e, 0x61, 0x72, 0x69, 0x6f, 0x2e, 0x45, 0x6d, 0x62, 0x65, 0x64, 0x45, 0x78,
	0x70, 0x72, 0x48, 0x00, 0x52, 0x09, 0x65, 0x6d, 0x62, 0x65, 0x64, 0x45, 0x78, 0x70, 0x72, 0x1a,
	0x80, 0x01, 0x0a, 0x06, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x12, 0x25, 0x0a, 0x05, 0x70, 0x61,
	0x72, 0x74, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x64, 0x61, 0x6d, 0x6c,
	0x5f, 0x6c, 0x66, 0x5f, 0x32, 0x2e, 0x45, 0x78, 0x70, 0x72, 0x52, 0x05, 0x70, 0x61, 0x72, 0x74,
	0x79, 0x12, 0x23, 0x0a, 0x04, 0x65, 0x78, 0x70, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x0f, 0x2e, 0x64, 0x61, 0x6d, 0x6c, 0x5f, 0x6c, 0x66, 0x5f, 0x32, 0x2e, 0x45, 0x78, 0x70, 0x72,
	0x52, 0x04, 0x65, 0x78, 0x70, 0x72, 0x12, 0x2a, 0x0a, 0x08, 0x72, 0x65, 0x74, 0x5f, 0x74, 0x79,
	0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x64, 0x61, 0x6d, 0x6c, 0x5f,
	0x6c, 0x66, 0x5f, 0x32, 0x2e, 0x54, 0x79, 0x70, 0x65, 0x52, 0x07, 0x72, 0x65, 0x74, 0x54, 0x79,
	0x70, 0x65, 0x1a, 0x55, 0x0a, 0x09, 0x45, 0x6d, 0x62, 0x65, 0x64, 0x45, 0x78, 0x70, 0x72, 0x12,
	0x23, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e,
	0x64, 0x61, 0x6d, 0x6c, 0x5f, 0x6c, 0x66, 0x5f, 0x32, 0x2e, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04,
	0x74, 0x79, 0x70, 0x65, 0x12, 0x23, 0x0a, 0x04, 0x62, 0x6f, 0x64, 0x79, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x64, 0x61, 0x6d, 0x6c, 0x5f, 0x6c, 0x66, 0x5f, 0x32, 0x2e, 0x45,
	0x78, 0x70, 0x72, 0x52, 0x04, 0x62, 0x6f, 0x64, 0x79, 0x42, 0x05, 0x0a, 0x03, 0x53, 0x75, 0x6d,
	0x22, 0xe6, 0x03, 0x0a, 0x0e, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x43, 0x68, 0x6f,
	0x69, 0x63, 0x65, 0x12, 0x2f, 0x0a, 0x08, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x64, 0x61, 0x6d, 0x6c, 0x5f, 0x6c, 0x66, 0x5f,
	0x32, 0x2e, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x08, 0x6c, 0x6f, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x2a, 0x0a, 0x11, 0x6e, 0x61, 0x6d, 0x65, 0x5f, 0x69, 0x6e, 0x74,
	0x65, 0x72, 0x6e, 0x65, 0x64, 0x5f, 0x73, 0x74, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x0f, 0x6e, 0x61, 0x6d, 0x65, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x65, 0x64, 0x53, 0x74, 0x72,
	0x12, 0x1c, 0x0a, 0x09, 0x63, 0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x69, 0x6e, 0x67, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x09, 0x63, 0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x69, 0x6e, 0x67, 0x12, 0x31,
	0x0a, 0x0b, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x73, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x64, 0x61, 0x6d, 0x6c, 0x5f, 0x6c, 0x66, 0x5f, 0x32, 0x2e,
	0x45, 0x78, 0x70, 0x72, 0x52, 0x0b, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72,
	0x73, 0x12, 0x2d, 0x0a, 0x09, 0x6f, 0x62, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x73, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x64, 0x61, 0x6d, 0x6c, 0x5f, 0x6c, 0x66, 0x5f, 0x32,
	0x2e, 0x45, 0x78, 0x70, 0x72, 0x52, 0x09, 0x6f, 0x62, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x73,
	0x12, 0x35, 0x0a, 0x0a, 0x61, 0x72, 0x67, 0x5f, 0x62, 0x69, 0x6e, 0x64, 0x65, 0x72, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x64, 0x61, 0x6d, 0x6c, 0x5f, 0x6c, 0x66, 0x5f, 0x32,
	0x2e, 0x56, 0x61, 0x72, 0x57, 0x69, 0x74, 0x68, 0x54, 0x79, 0x70, 0x65, 0x52, 0x09, 0x61, 0x72,
	0x67, 0x42, 0x69, 0x6e, 0x64, 0x65, 0x72, 0x12, 0x2a, 0x0a, 0x08, 0x72, 0x65, 0x74, 0x5f, 0x74,
	0x79, 0x70, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x64, 0x61, 0x6d, 0x6c,
	0x5f, 0x6c, 0x66, 0x5f, 0x32, 0x2e, 0x54, 0x79, 0x70, 0x65, 0x52, 0x07, 0x72, 0x65, 0x74, 0x54,
	0x79, 0x70, 0x65, 0x12, 0x27, 0x0a, 0x06, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x18, 0x09, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x64, 0x61, 0x6d, 0x6c, 0x5f, 0x6c, 0x66, 0x5f, 0x32, 0x2e,
	0x45, 0x78, 0x70, 0x72, 0x52, 0x06, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x12, 0x37, 0x0a, 0x18,
	0x73, 0x65, 0x6c, 0x66, 0x5f, 0x62, 0x69, 0x6e, 0x64, 0x65, 0x72, 0x5f, 0x69, 0x6e, 0x74, 0x65,
	0x72, 0x6e, 0x65, 0x64, 0x5f, 0x73, 0x74, 0x72, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x05, 0x52, 0x15,
	0x73, 0x65, 0x6c, 0x66, 0x42, 0x69, 0x6e, 0x64, 0x65, 0x72, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x6e,
	0x65, 0x64, 0x53, 0x74, 0x72, 0x12, 0x32, 0x0a, 0x0b, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69,
	0x7a, 0x65, 0x72, 0x73, 0x18, 0xe9, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x64, 0x61,
	0x6d, 0x6c, 0x5f, 0x6c, 0x66, 0x5f, 0x32, 0x2e, 0x45, 0x78, 0x70, 0x72, 0x52, 0x0b, 0x61, 0x75,
	0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x65, 0x72, 0x73, 0x22, 0x84, 0x02, 0x0a, 0x15, 0x49, 0x6e,
	0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x42,
	0x6f, 0x64, 0x79, 0x12, 0x52, 0x0a, 0x07, 0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x73, 0x18, 0x01,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x38, 0x2e, 0x64, 0x61, 0x6d, 0x6c, 0x5f, 0x6c, 0x66, 0x5f, 0x32,
	0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e,
	0x63, 0x65, 0x42, 0x6f, 0x64, 0x79, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65,
	0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x52, 0x07,
	0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x73, 0x12, 0x23, 0x0a, 0x04, 0x76, 0x69, 0x65, 0x77, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x64, 0x61, 0x6d, 0x6c, 0x5f, 0x6c, 0x66, 0x5f,
	0x32, 0x2e, 0x45, 0x78, 0x70, 0x72, 0x52, 0x04, 0x76, 0x69, 0x65, 0x77, 0x1a, 0x72, 0x0a, 0x17,
	0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63,
	0x65, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x12, 0x30, 0x0a, 0x14, 0x6d, 0x65, 0x74, 0x68, 0x6f,
	0x64, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x65, 0x64, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x12, 0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x49, 0x6e, 0x74,
	0x65, 0x72, 0x6e, 0x65, 0x64, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x25, 0x0a, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x64, 0x61, 0x6d, 0x6c, 0x5f,
	0x6c, 0x66, 0x5f, 0x32, 0x2e, 0x45, 0x78, 0x70, 0x72, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x22, 0xbe, 0x06, 0x0a, 0x0b, 0x44, 0x65, 0x66, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65,
	0x12, 0x30, 0x0a, 0x14, 0x74, 0x79, 0x63, 0x6f, 0x6e, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e,
	0x65, 0x64, 0x5f, 0x64, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x12,
	0x74, 0x79, 0x63, 0x6f, 0x6e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x65, 0x64, 0x44, 0x6e, 0x61,
	0x6d, 0x65, 0x12, 0x2c, 0x0a, 0x12, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x5f, 0x69, 0x6e, 0x74, 0x65,
	0x72, 0x6e, 0x65, 0x64, 0x5f, 0x73, 0x74, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x10,
	0x70, 0x61, 0x72, 0x61, 0x6d, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x65, 0x64, 0x53, 0x74, 0x72,
	0x12, 0x29, 0x0a, 0x07, 0x70, 0x72, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x0f, 0x2e, 0x64, 0x61, 0x6d, 0x6c, 0x5f, 0x6c, 0x66, 0x5f, 0x32, 0x2e, 0x45, 0x78,
	0x70, 0x72, 0x52, 0x07, 0x70, 0x72, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x12, 0x31, 0x0a, 0x0b, 0x73,
	0x69, 0x67, 0x6e, 0x61, 0x74, 0x6f, 0x72, 0x69, 0x65, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x0f, 0x2e, 0x64, 0x61, 0x6d, 0x6c, 0x5f, 0x6c, 0x66, 0x5f, 0x32, 0x2e, 0x45, 0x78, 0x70,
	0x72, 0x52, 0x0b, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x6f, 0x72, 0x69, 0x65, 0x73, 0x12, 0x2d,
	0x0a, 0x09, 0x61, 0x67, 0x72, 0x65, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x0f, 0x2e, 0x64, 0x61, 0x6d, 0x6c, 0x5f, 0x6c, 0x66, 0x5f, 0x32, 0x2e, 0x45, 0x78,
	0x70, 0x72, 0x52, 0x09, 0x61, 0x67, 0x72, 0x65, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x33, 0x0a,
	0x07, 0x63, 0x68, 0x6f, 0x69, 0x63, 0x65, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x19,
	0x2e, 0x64, 0x61, 0x6d, 0x6c, 0x5f, 0x6c, 0x66, 0x5f, 0x32, 0x2e, 0x54, 0x65, 0x6d, 0x70, 0x6c,
	0x61, 0x74, 0x65, 0x43, 0x68, 0x6f, 0x69, 0x63, 0x65, 0x52, 0x07, 0x63, 0x68, 0x6f, 0x69, 0x63,
	0x65, 0x73, 0x12, 0x2d, 0x0a, 0x09, 0x6f, 0x62, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x73, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x64, 0x61, 0x6d, 0x6c, 0x5f, 0x6c, 0x66, 0x5f,
	0x32, 0x2e, 0x45, 0x78, 0x70, 0x72, 0x52, 0x09, 0x6f, 0x62, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72,
	0x73, 0x12, 0x2f, 0x0a, 0x08, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x08, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x64, 0x61, 0x6d, 0x6c, 0x5f, 0x6c, 0x66, 0x5f, 0x32, 0x2e,
	0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x08, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x2f, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1d, 0x2e, 0x64, 0x61, 0x6d, 0x6c, 0x5f, 0x6c, 0x66, 0x5f, 0x32, 0x2e, 0x44, 0x65, 0x66, 0x54,
	0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x2e, 0x44, 0x65, 0x66, 0x4b, 0x65, 0x79, 0x52, 0x03,
	0x6b, 0x65, 0x79, 0x12, 0x41, 0x0a, 0x0a, 0x69, 0x6d, 0x70, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74,
	0x73, 0x18, 0x0a, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x64, 0x61, 0x6d, 0x6c, 0x5f, 0x6c,
	0x66, 0x5f, 0x32, 0x2e, 0x44, 0x65, 0x66, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x2e,
	0x49, 0x6d, 0x70, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x52, 0x0a, 0x69, 0x6d, 0x70, 0x6c,
	0x65, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x1a, 0x8c, 0x01, 0x0a, 0x06, 0x44, 0x65, 0x66, 0x4b, 0x65,
	0x79, 0x12, 0x23, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x0f, 0x2e, 0x64, 0x61, 0x6d, 0x6c, 0x5f, 0x6c, 0x66, 0x5f, 0x32, 0x2e, 0x54, 0x79, 0x70, 0x65,
	0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x2a, 0x0a, 0x08, 0x6b, 0x65, 0x79, 0x5f, 0x65, 0x78,
	0x70, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x64, 0x61, 0x6d, 0x6c, 0x5f,
	0x6c, 0x66, 0x5f, 0x32, 0x2e, 0x45, 0x78, 0x70, 0x72, 0x52, 0x07, 0x6b, 0x65, 0x79, 0x45, 0x78,
	0x70, 0x72, 0x12, 0x31, 0x0a, 0x0b, 0x6d, 0x61, 0x69, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72,
	0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x64, 0x61, 0x6d, 0x6c, 0x5f, 0x6c,
	0x66, 0x5f, 0x32, 0x2e, 0x45, 0x78, 0x70, 0x72, 0x52, 0x0b, 0x6d, 0x61, 0x69, 0x6e, 0x74, 0x61,
	0x69, 0x6e, 0x65, 0x72, 0x73, 0x1a, 0xa9, 0x01, 0x0a, 0x0a, 0x49, 0x6d, 0x70, 0x6c, 0x65, 0x6d,
	0x65, 0x6e, 0x74, 0x73, 0x12, 0x34, 0x0a, 0x09, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x64, 0x61, 0x6d, 0x6c, 0x5f, 0x6c,
	0x66, 0x5f, 0x32, 0x2e, 0x54, 0x79, 0x70, 0x65, 0x43, 0x6f, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x52,
	0x09, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x12, 0x34, 0x0a, 0x04, 0x62, 0x6f,
	0x64, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x64, 0x61, 0x6d, 0x6c, 0x5f,
	0x6c, 0x66, 0x5f, 0x32, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x49, 0x6e,
	0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x42, 0x6f, 0x64, 0x79, 0x52, 0x04, 0x62, 0x6f, 0x64, 0x79,
	0x12, 0x2f, 0x0a, 0x08, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x13, 0x2e, 0x64, 0x61, 0x6d, 0x6c, 0x5f, 0x6c, 0x66, 0x5f, 0x32, 0x2e, 0x4c,
	0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x08, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x22, 0x99, 0x01, 0x0a, 0x0f, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x4d,
	0x65, 0x74, 0x68, 0x6f, 0x64, 0x12, 0x2f, 0x0a, 0x08, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x64, 0x61, 0x6d, 0x6c, 0x5f, 0x6c,
	0x66, 0x5f, 0x32, 0x2e, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x08, 0x6c, 0x6f,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x30, 0x0a, 0x14, 0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64,
	0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x65, 0x64, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x12, 0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x49, 0x6e, 0x74, 0x65,
	0x72, 0x6e, 0x65, 0x64, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x23, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x64, 0x61, 0x6d, 0x6c, 0x5f, 0x6c, 0x66,
	0x5f, 0x32, 0x2e, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x22, 0xe3, 0x02,
	0x0a, 0x0c, 0x44, 0x65, 0x66, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x12, 0x2f,
	0x0a, 0x08, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x13, 0x2e, 0x64, 0x61, 0x6d, 0x6c, 0x5f, 0x6c, 0x66, 0x5f, 0x32, 0x2e, 0x4c, 0x6f, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x08, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x30, 0x0a, 0x14, 0x74, 0x79, 0x63, 0x6f, 0x6e, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x65,
	0x64, 0x5f, 0x64, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x12, 0x74,
	0x79, 0x63, 0x6f, 0x6e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x65, 0x64, 0x44, 0x6e, 0x61, 0x6d,
	0x65, 0x12, 0x34, 0x0a, 0x07, 0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x73, 0x18, 0x03, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x64, 0x61, 0x6d, 0x6c, 0x5f, 0x6c, 0x66, 0x5f, 0x32, 0x2e, 0x49,
	0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x52, 0x07,
	0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x73, 0x12, 0x2c, 0x0a, 0x12, 0x70, 0x61, 0x72, 0x61, 0x6d,
	0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x65, 0x64, 0x5f, 0x73, 0x74, 0x72, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x10, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x6e,
	0x65, 0x64, 0x53, 0x74, 0x72, 0x12, 0x33, 0x0a, 0x07, 0x63, 0x68, 0x6f, 0x69, 0x63, 0x65, 0x73,
	0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x64, 0x61, 0x6d, 0x6c, 0x5f, 0x6c, 0x66,
	0x5f, 0x32, 0x2e, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x43, 0x68, 0x6f, 0x69, 0x63,
	0x65, 0x52, 0x07, 0x63, 0x68, 0x6f, 0x69, 0x63, 0x65, 0x73, 0x12, 0x23, 0x0a, 0x04, 0x76, 0x69,
	0x65, 0x77, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x64, 0x61, 0x6d, 0x6c, 0x5f,
	0x6c, 0x66, 0x5f, 0x32, 0x2e, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x76, 0x69, 0x65, 0x77, 0x12,
	0x32, 0x0a, 0x08, 0x72, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x73, 0x18, 0x07, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x16, 0x2e, 0x64, 0x61, 0x6d, 0x6c, 0x5f, 0x6c, 0x66, 0x5f, 0x32, 0x2e, 0x54, 0x79,
	0x70, 0x65, 0x43, 0x6f, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x52, 0x08, 0x72, 0x65, 0x71, 0x75, 0x69,
	0x72, 0x65, 0x73, 0x22, 0x9a, 0x01, 0x0a, 0x0c, 0x44, 0x65, 0x66, 0x45, 0x78, 0x63, 0x65, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x2e, 0x0a, 0x13, 0x6e, 0x61, 0x6d, 0x65, 0x5f, 0x69, 0x6e, 0x74,
	0x65, 0x72, 0x6e, 0x65, 0x64, 0x5f, 0x64, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x11, 0x6e, 0x61, 0x6d, 0x65, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x65, 0x64, 0x44,
	0x6e, 0x61, 0x6d, 0x65, 0x12, 0x2f, 0x0a, 0x08, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x64, 0x61, 0x6d, 0x6c, 0x5f, 0x6c, 0x66,
	0x5f, 0x32, 0x2e, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x08, 0x6c, 0x6f, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x29, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x64, 0x61, 0x6d, 0x6c, 0x5f, 0x6c, 0x66,
	0x5f, 0x32, 0x2e, 0x45, 0x78, 0x70, 0x72, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x22, 0xc2, 0x04, 0x0a, 0x0b, 0x44, 0x65, 0x66, 0x44, 0x61, 0x74, 0x61, 0x54, 0x79, 0x70, 0x65,
	0x12, 0x2f, 0x0a, 0x08, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x13, 0x2e, 0x64, 0x61, 0x6d, 0x6c, 0x5f, 0x6c, 0x66, 0x5f, 0x32, 0x2e, 0x4c,
	0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x08, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x2e, 0x0a, 0x13, 0x6e, 0x61, 0x6d, 0x65, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e,
	0x65, 0x64, 0x5f, 0x64, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x11,
	0x6e, 0x61, 0x6d, 0x65, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x65, 0x64, 0x44, 0x6e, 0x61, 0x6d,
	0x65, 0x12, 0x32, 0x0a, 0x06, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x1a, 0x2e, 0x64, 0x61, 0x6d, 0x6c, 0x5f, 0x6c, 0x66, 0x5f, 0x32, 0x2e, 0x54, 0x79,
	0x70, 0x65, 0x56, 0x61, 0x72, 0x57, 0x69, 0x74, 0x68, 0x4b, 0x69, 0x6e, 0x64, 0x52, 0x06, 0x70,
	0x61, 0x72, 0x61, 0x6d, 0x73, 0x12, 0x22, 0x0a, 0x0c, 0x73, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x69,
	0x7a, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0c, 0x73, 0x65, 0x72,
	0x69, 0x61, 0x6c, 0x69, 0x7a, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x37, 0x0a, 0x06, 0x72, 0x65, 0x63,
	0x6f, 0x72, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x64, 0x61, 0x6d, 0x6c,
	0x5f, 0x6c, 0x66, 0x5f, 0x32, 0x2e, 0x44, 0x65, 0x66, 0x44, 0x61, 0x74, 0x61, 0x54, 0x79, 0x70,
	0x65, 0x2e, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x48, 0x00, 0x52, 0x06, 0x72, 0x65, 0x63, 0x6f,
	0x72, 0x64, 0x12, 0x39, 0x0a, 0x07, 0x76, 0x61, 0x72, 0x69, 0x61, 0x6e, 0x74, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x64, 0x61, 0x6d, 0x6c, 0x5f, 0x6c, 0x66, 0x5f, 0x32, 0x2e,
	0x44, 0x65, 0x66, 0x44, 0x61, 0x74, 0x61, 0x54, 0x79, 0x70, 0x65, 0x2e, 0x46, 0x69, 0x65, 0x6c,
	0x64, 0x73, 0x48, 0x00, 0x52, 0x07, 0x76, 0x61, 0x72, 0x69, 0x61, 0x6e, 0x74, 0x12, 0x3d, 0x0a,
	0x04, 0x65, 0x6e, 0x75, 0x6d, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x64, 0x61,
	0x6d, 0x6c, 0x5f, 0x6c, 0x66, 0x5f, 0x32, 0x2e, 0x44, 0x65, 0x66, 0x44, 0x61, 0x74, 0x61, 0x54,
	0x79, 0x70, 0x65, 0x2e, 0x45, 0x6e, 0x75, 0x6d, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63,
	0x74, 0x6f, 0x72, 0x73, 0x48, 0x00, 0x52, 0x04, 0x65, 0x6e, 0x75, 0x6d, 0x12, 0x2f, 0x0a, 0x09,
	0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x0f, 0x2e, 0x64, 0x61, 0x6d, 0x6c, 0x5f, 0x6c, 0x66, 0x5f, 0x32, 0x2e, 0x55, 0x6e, 0x69, 0x74,
	0x48, 0x00, 0x52, 0x09, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x1a, 0x3a, 0x0a,
	0x06, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x12, 0x30, 0x0a, 0x06, 0x66, 0x69, 0x65, 0x6c, 0x64,
	0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x64, 0x61, 0x6d, 0x6c, 0x5f, 0x6c,
	0x66, 0x5f, 0x32, 0x2e, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x57, 0x69, 0x74, 0x68, 0x54, 0x79, 0x70,
	0x65, 0x52, 0x06, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x1a, 0x4e, 0x0a, 0x10, 0x45, 0x6e, 0x75,
	0x6d, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x73, 0x12, 0x3a, 0x0a,
	0x19, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x73, 0x5f, 0x69, 0x6e,
	0x74, 0x65, 0x72, 0x6e, 0x65, 0x64, 0x5f, 0x73, 0x74, 0x72, 0x18, 0x02, 0x20, 0x03, 0x28, 0x05,
	0x52, 0x17, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x73, 0x49, 0x6e,
	0x74, 0x65, 0x72, 0x6e, 0x65, 0x64, 0x53, 0x74, 0x72, 0x42, 0x0a, 0x0a, 0x08, 0x44, 0x61, 0x74,
	0x61, 0x43, 0x6f, 0x6e, 0x73, 0x22, 0xc6, 0x01, 0x0a, 0x0a, 0x44, 0x65, 0x66, 0x54, 0x79, 0x70,
	0x65, 0x53, 0x79, 0x6e, 0x12, 0x2f, 0x0a, 0x08, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x64, 0x61, 0x6d, 0x6c, 0x5f, 0x6c, 0x66,
	0x5f, 0x32, 0x2e, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x08, 0x6c, 0x6f, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x2e, 0x0a, 0x13, 0x6e, 0x61, 0x6d, 0x65, 0x5f, 0x69, 0x6e,
	0x74, 0x65, 0x72, 0x6e, 0x65, 0x64, 0x5f, 0x64, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x11, 0x6e, 0x61, 0x6d, 0x65, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x65, 0x64,
	0x44, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x32, 0x0a, 0x06, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x18,
	0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x64, 0x61, 0x6d, 0x6c, 0x5f, 0x6c, 0x66, 0x5f,
	0x32, 0x2e, 0x54, 0x79, 0x70, 0x65, 0x56, 0x61, 0x72, 0x57, 0x69, 0x74, 0x68, 0x4b, 0x69, 0x6e,
	0x64, 0x52, 0x06, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x12, 0x23, 0x0a, 0x04, 0x74, 0x79, 0x70,
	0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x64, 0x61, 0x6d, 0x6c, 0x5f, 0x6c,
	0x66, 0x5f, 0x32, 0x2e, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x22, 0xa7,
	0x02, 0x0a, 0x08, 0x44, 0x65, 0x66, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x2f, 0x0a, 0x08, 0x6c,
	0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e,
	0x64, 0x61, 0x6d, 0x6c, 0x5f, 0x6c, 0x66, 0x5f, 0x32, 0x2e, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x52, 0x08, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x46, 0x0a, 0x0e,
	0x6e, 0x61, 0x6d, 0x65, 0x5f, 0x77, 0x69, 0x74, 0x68, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x64, 0x61, 0x6d, 0x6c, 0x5f, 0x6c, 0x66, 0x5f, 0x32,
	0x2e, 0x44, 0x65, 0x66, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x2e, 0x4e, 0x61, 0x6d, 0x65, 0x57, 0x69,
	0x74, 0x68, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0c, 0x6e, 0x61, 0x6d, 0x65, 0x57, 0x69, 0x74, 0x68,
	0x54, 0x79, 0x70, 0x65, 0x12, 0x23, 0x0a, 0x04, 0x65, 0x78, 0x70, 0x72, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x64, 0x61, 0x6d, 0x6c, 0x5f, 0x6c, 0x66, 0x5f, 0x32, 0x2e, 0x45,
	0x78, 0x70, 0x72, 0x52, 0x04, 0x65, 0x78, 0x70, 0x72, 0x12, 0x18, 0x0a, 0x07, 0x69, 0x73, 0x5f,
	0x74, 0x65, 0x73, 0x74, 0x18, 0xe8, 0x07, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x69, 0x73, 0x54,
	0x65, 0x73, 0x74, 0x1a, 0x63, 0x0a, 0x0c, 0x4e, 0x61, 0x6d, 0x65, 0x57, 0x69, 0x74, 0x68, 0x54,
	0x79, 0x70, 0x65, 0x12, 0x2e, 0x0a, 0x13, 0x6e, 0x61, 0x6d, 0x65, 0x5f, 0x69, 0x6e, 0x74, 0x65,
	0x72, 0x6e, 0x65, 0x64, 0x5f, 0x64, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x11, 0x6e, 0x61, 0x6d, 0x65, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x65, 0x64, 0x44, 0x6e,
	0x61, 0x6d, 0x65, 0x12, 0x23, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x0f, 0x2e, 0x64, 0x61, 0x6d, 0x6c, 0x5f, 0x6c, 0x66, 0x5f, 0x32, 0x2e, 0x54, 0x79,
	0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x22, 0xfa, 0x01, 0x0a, 0x0c, 0x46, 0x65, 0x61,
	0x74, 0x75, 0x72, 0x65, 0x46, 0x6c, 0x61, 0x67, 0x73, 0x12, 0x30, 0x0a, 0x13, 0x66, 0x6f, 0x72,
	0x62, 0x69, 0x64, 0x50, 0x61, 0x72, 0x74, 0x79, 0x4c, 0x69, 0x74, 0x65, 0x72, 0x61, 0x6c, 0x73,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x13, 0x66, 0x6f, 0x72, 0x62, 0x69, 0x64, 0x50, 0x61,
	0x72, 0x74, 0x79, 0x4c, 0x69, 0x74, 0x65, 0x72, 0x61, 0x6c, 0x73, 0x12, 0x58, 0x0a, 0x27, 0x64,
	0x6f, 0x6e, 0x74, 0x44, 0x69, 0x76, 0x75, 0x6c, 0x67, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61,
	0x63, 0x74, 0x49, 0x64, 0x73, 0x49, 0x6e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x41, 0x72, 0x67,
	0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x27, 0x64, 0x6f,
	0x6e, 0x74, 0x44, 0x69, 0x76, 0x75, 0x6c, 0x67, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63,
	0x74, 0x49, 0x64, 0x73, 0x49, 0x6e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x41, 0x72, 0x67, 0x75,
	0x6d, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x5e, 0x0a, 0x2a, 0x64, 0x6f, 0x6e, 0x74, 0x44, 0x69, 0x73,
	0x63, 0x6c, 0x6f, 0x73, 0x65, 0x4e, 0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x69, 0x6e,
	0x67, 0x43, 0x68, 0x6f, 0x69, 0x63, 0x65, 0x73, 0x54, 0x6f, 0x4f, 0x62, 0x73, 0x65, 0x72, 0x76,
	0x65, 0x72, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x2a, 0x64, 0x6f, 0x6e, 0x74, 0x44,
	0x69, 0x73, 0x63, 0x6c, 0x6f, 0x73, 0x65, 0x4e, 0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x73, 0x75, 0x6d,
	0x69, 0x6e, 0x67, 0x43, 0x68, 0x6f, 0x69, 0x63, 0x65, 0x73, 0x54, 0x6f, 0x4f, 0x62, 0x73, 0x65,
	0x72, 0x76, 0x65, 0x72, 0x73, 0x22, 0xa6, 0x03, 0x0a, 0x06, 0x4d, 0x6f, 0x64, 0x75, 0x6c, 0x65,
	0x12, 0x2e, 0x0a, 0x13, 0x6e, 0x61, 0x6d, 0x65, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x65,
	0x64, 0x5f, 0x64, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x11, 0x6e,
	0x61, 0x6d, 0x65, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x65, 0x64, 0x44, 0x6e, 0x61, 0x6d, 0x65,
	0x12, 0x2d, 0x0a, 0x05, 0x66, 0x6c, 0x61, 0x67, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x17, 0x2e, 0x64, 0x61, 0x6d, 0x6c, 0x5f, 0x6c, 0x66, 0x5f, 0x32, 0x2e, 0x46, 0x65, 0x61, 0x74,
	0x75, 0x72, 0x65, 0x46, 0x6c, 0x61, 0x67, 0x73, 0x52, 0x05, 0x66, 0x6c, 0x61, 0x67, 0x73, 0x12,
	0x31, 0x0a, 0x08, 0x73, 0x79, 0x6e, 0x6f, 0x6e, 0x79, 0x6d, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x15, 0x2e, 0x64, 0x61, 0x6d, 0x6c, 0x5f, 0x6c, 0x66, 0x5f, 0x32, 0x2e, 0x44, 0x65,
	0x66, 0x54, 0x79, 0x70, 0x65, 0x53, 0x79, 0x6e, 0x52, 0x08, 0x73, 0x79, 0x6e, 0x6f, 0x6e, 0x79,
	0x6d, 0x73, 0x12, 0x35, 0x0a, 0x0a, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x73,
	0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x64, 0x61, 0x6d, 0x6c, 0x5f, 0x6c, 0x66,
	0x5f, 0x32, 0x2e, 0x44, 0x65, 0x66, 0x44, 0x61, 0x74, 0x61, 0x54, 0x79, 0x70, 0x65, 0x52, 0x09,
	0x64, 0x61, 0x74, 0x61, 0x54, 0x79, 0x70, 0x65, 0x73, 0x12, 0x2b, 0x0a, 0x06, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x64, 0x61, 0x6d, 0x6c,
	0x5f, 0x6c, 0x66, 0x5f, 0x32, 0x2e, 0x44, 0x65, 0x66, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x06,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x12, 0x34, 0x0a, 0x09, 0x74, 0x65, 0x6d, 0x70, 0x6c, 0x61,
	0x74, 0x65, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x64, 0x61, 0x6d, 0x6c,
	0x5f, 0x6c, 0x66, 0x5f, 0x32, 0x2e, 0x44, 0x65, 0x66, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74,
	0x65, 0x52, 0x09, 0x74, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x73, 0x12, 0x37, 0x0a, 0x0a,
	0x65, 0x78, 0x63, 0x65, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x17, 0x2e, 0x64, 0x61, 0x6d, 0x6c, 0x5f, 0x6c, 0x66, 0x5f, 0x32, 0x2e, 0x44, 0x65, 0x66,
	0x45, 0x78, 0x63, 0x65, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0a, 0x65, 0x78, 0x63, 0x65, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x37, 0x0a, 0x0a, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61,
	0x63, 0x65, 0x73, 0x18, 0x08, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x64, 0x61, 0x6d, 0x6c,
	0x5f, 0x6c, 0x66, 0x5f, 0x32, 0x2e, 0x44, 0x65, 0x66, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61,
	0x63, 0x65, 0x52, 0x0a, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x22, 0x48,
	0x0a, 0x12, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x65, 0x64, 0x44, 0x6f, 0x74, 0x74, 0x65, 0x64,
	0x4e, 0x61, 0x6d, 0x65, 0x12, 0x32, 0x0a, 0x15, 0x73, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x73,
	0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x65, 0x64, 0x5f, 0x73, 0x74, 0x72, 0x18, 0x01, 0x20,
	0x03, 0x28, 0x05, 0x52, 0x13, 0x73, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x49, 0x6e, 0x74,
	0x65, 0x72, 0x6e, 0x65, 0x64, 0x53, 0x74, 0x72, 0x22, 0x5b, 0x0a, 0x11, 0x55, 0x70, 0x67, 0x72,
	0x61, 0x64, 0x65, 0x64, 0x50, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x49, 0x64, 0x12, 0x46, 0x0a,
	0x20, 0x75, 0x70, 0x67, 0x72, 0x61, 0x64, 0x65, 0x64, 0x5f, 0x70, 0x61, 0x63, 0x6b, 0x61, 0x67,
	0x65, 0x5f, 0x69, 0x64, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x65, 0x64, 0x5f, 0x73, 0x74,
	0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x1c, 0x75, 0x70, 0x67, 0x72, 0x61, 0x64, 0x65,
	0x64, 0x50, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x49, 0x64, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x6e,
	0x65, 0x64, 0x53, 0x74, 0x72, 0x22, 0xbd, 0x01, 0x0a, 0x0f, 0x50, 0x61, 0x63, 0x6b, 0x61, 0x67,
	0x65, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x2a, 0x0a, 0x11, 0x6e, 0x61, 0x6d,
	0x65, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x65, 0x64, 0x5f, 0x73, 0x74, 0x72, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x0f, 0x6e, 0x61, 0x6d, 0x65, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x6e,
	0x65, 0x64, 0x53, 0x74, 0x72, 0x12, 0x30, 0x0a, 0x14, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e,
	0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x65, 0x64, 0x5f, 0x73, 0x74, 0x72, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x12, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x74, 0x65,
	0x72, 0x6e, 0x65, 0x64, 0x53, 0x74, 0x72, 0x12, 0x4c, 0x0a, 0x13, 0x75, 0x70, 0x67, 0x72, 0x61,
	0x64, 0x65, 0x64, 0x5f, 0x70, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x64, 0x61, 0x6d, 0x6c, 0x5f, 0x6c, 0x66, 0x5f, 0x32,
	0x2e, 0x55, 0x70, 0x67, 0x72, 0x61, 0x64, 0x65, 0x64, 0x50, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65,
	0x49, 0x64, 0x52, 0x11, 0x75, 0x70, 0x67, 0x72, 0x61, 0x64, 0x65, 0x64, 0x50, 0x61, 0x63, 0x6b,
	0x61, 0x67, 0x65, 0x49, 0x64, 0x22, 0xa4, 0x02, 0x0a, 0x07, 0x50, 0x61, 0x63, 0x6b, 0x61, 0x67,
	0x65, 0x12, 0x2b, 0x0a, 0x07, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x11, 0x2e, 0x64, 0x61, 0x6d, 0x6c, 0x5f, 0x6c, 0x66, 0x5f, 0x32, 0x2e, 0x4d,
	0x6f, 0x64, 0x75, 0x6c, 0x65, 0x52, 0x07, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x73, 0x12, 0x29,
	0x0a, 0x10, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x65, 0x64, 0x5f, 0x73, 0x74, 0x72, 0x69, 0x6e,
	0x67, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e,
	0x65, 0x64, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x73, 0x12, 0x51, 0x0a, 0x15, 0x69, 0x6e, 0x74,
	0x65, 0x72, 0x6e, 0x65, 0x64, 0x5f, 0x64, 0x6f, 0x74, 0x74, 0x65, 0x64, 0x5f, 0x6e, 0x61, 0x6d,
	0x65, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x64, 0x61, 0x6d, 0x6c, 0x5f,
	0x6c, 0x66, 0x5f, 0x32, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x65, 0x64, 0x44, 0x6f, 0x74,
	0x74, 0x65, 0x64, 0x4e, 0x61, 0x6d, 0x65, 0x52, 0x13, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x65,
	0x64, 0x44, 0x6f, 0x74, 0x74, 0x65, 0x64, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x12, 0x36, 0x0a, 0x08,
	0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a,
	0x2e, 0x64, 0x61, 0x6d, 0x6c, 0x5f, 0x6c, 0x66, 0x5f, 0x32, 0x2e, 0x50, 0x61, 0x63, 0x6b, 0x61,
	0x67, 0x65, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x52, 0x08, 0x6d, 0x65, 0x74, 0x61,
	0x64, 0x61, 0x74, 0x61, 0x12, 0x36, 0x0a, 0x0e, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x65, 0x64,
	0x5f, 0x74, 0x79, 0x70, 0x65, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x64,
	0x61, 0x6d, 0x6c, 0x5f, 0x6c, 0x66, 0x5f, 0x32, 0x2e, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0d, 0x69,
	0x6e, 0x74, 0x65, 0x72, 0x6e, 0x65, 0x64, 0x54, 0x79, 0x70, 0x65, 0x73, 0x2a, 0x9f, 0x02, 0x0a,
	0x0b, 0x42, 0x75, 0x69, 0x6c, 0x74, 0x69, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x12, 0x08, 0x0a, 0x04,
	0x55, 0x4e, 0x49, 0x54, 0x10, 0x00, 0x12, 0x08, 0x0a, 0x04, 0x42, 0x4f, 0x4f, 0x4c, 0x10, 0x01,
	0x12, 0x09, 0x0a, 0x05, 0x49, 0x4e, 0x54, 0x36, 0x34, 0x10, 0x02, 0x12, 0x08, 0x0a, 0x04, 0x44,
	0x41, 0x54, 0x45, 0x10, 0x03, 0x12, 0x0d, 0x0a, 0x09, 0x54, 0x49, 0x4d, 0x45, 0x53, 0x54, 0x41,
	0x4d, 0x50, 0x10, 0x04, 0x12, 0x0b, 0x0a, 0x07, 0x4e, 0x55, 0x4d, 0x45, 0x52, 0x49, 0x43, 0x10,
	0x05, 0x12, 0x09, 0x0a, 0x05, 0x50, 0x41, 0x52, 0x54, 0x59, 0x10, 0x06, 0x12, 0x08, 0x0a, 0x04,
	0x54, 0x45, 0x58, 0x54, 0x10, 0x07, 0x12, 0x0f, 0x0a, 0x0b, 0x43, 0x4f, 0x4e, 0x54, 0x52, 0x41,
	0x43, 0x54, 0x5f, 0x49, 0x44, 0x10, 0x08, 0x12, 0x0c, 0x0a, 0x08, 0x4f, 0x50, 0x54, 0x49, 0x4f,
	0x4e, 0x41, 0x4c, 0x10, 0x09, 0x12, 0x08, 0x0a, 0x04, 0x4c, 0x49, 0x53, 0x54, 0x10, 0x0a, 0x12,
	0x0a, 0x0a, 0x06, 0x47, 0x45, 0x4e, 0x4d, 0x41, 0x50, 0x10, 0x0b, 0x12, 0x07, 0x0a, 0x03, 0x41,
	0x4e, 0x59, 0x10, 0x0d, 0x12, 0x11, 0x0a, 0x0d, 0x41, 0x4e, 0x59, 0x5f, 0x45, 0x58, 0x43, 0x45,
	0x50, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x0e, 0x12, 0x0c, 0x0a, 0x08, 0x54, 0x59, 0x50, 0x45, 0x5f,
	0x52, 0x45, 0x50, 0x10, 0x0f, 0x12, 0x09, 0x0a, 0x05, 0x41, 0x52, 0x52, 0x4f, 0x57, 0x10, 0x10,
	0x12, 0x0a, 0x0a, 0x06, 0x55, 0x50, 0x44, 0x41, 0x54, 0x45, 0x10, 0x11, 0x12, 0x0c, 0x0a, 0x07,
	0x54, 0x45, 0x58, 0x54, 0x4d, 0x41, 0x50, 0x10, 0xe9, 0x07, 0x12, 0x0f, 0x0a, 0x0a, 0x42, 0x49,
	0x47, 0x4e, 0x55, 0x4d, 0x45, 0x52, 0x49, 0x43, 0x10, 0xea, 0x07, 0x12, 0x12, 0x0a, 0x0d, 0x52,
	0x4f, 0x55, 0x4e, 0x44, 0x49, 0x4e, 0x47, 0x5f, 0x4d, 0x4f, 0x44, 0x45, 0x10, 0xeb, 0x07, 0x12,
	0x0d, 0x0a, 0x08, 0x53, 0x43, 0x45, 0x4e, 0x41, 0x52, 0x49, 0x4f, 0x10, 0xec, 0x07, 0x2a, 0x37,
	0x0a, 0x0a, 0x42, 0x75, 0x69, 0x6c, 0x74, 0x69, 0x6e, 0x43, 0x6f, 0x6e, 0x12, 0x0c, 0x0a, 0x08,
	0x43, 0x4f, 0x4e, 0x5f, 0x55, 0x4e, 0x49, 0x54, 0x10, 0x00, 0x12, 0x0d, 0x0a, 0x09, 0x43, 0x4f,
	0x4e, 0x5f, 0x46, 0x41, 0x4c, 0x53, 0x45, 0x10, 0x01, 0x12, 0x0c, 0x0a, 0x08, 0x43, 0x4f, 0x4e,
	0x5f, 0x54, 0x52, 0x55, 0x45, 0x10, 0x02, 0x2a, 0xf1, 0x0a, 0x0a, 0x0f, 0x42, 0x75, 0x69, 0x6c,
	0x74, 0x69, 0x6e, 0x46, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x09, 0x0a, 0x05, 0x54,
	0x52, 0x41, 0x43, 0x45, 0x10, 0x00, 0x12, 0x09, 0x0a, 0x05, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x10,
	0x01, 0x12, 0x09, 0x0a, 0x05, 0x45, 0x51, 0x55, 0x41, 0x4c, 0x10, 0x02, 0x12, 0x0b, 0x0a, 0x07,
	0x4c, 0x45, 0x53, 0x53, 0x5f, 0x45, 0x51, 0x10, 0x03, 0x12, 0x08, 0x0a, 0x04, 0x4c, 0x45, 0x53,
	0x53, 0x10, 0x04, 0x12, 0x0e, 0x0a, 0x0a, 0x47, 0x52, 0x45, 0x41, 0x54, 0x45, 0x52, 0x5f, 0x45,
	0x51, 0x10, 0x05, 0x12, 0x0b, 0x0a, 0x07, 0x47, 0x52, 0x45, 0x41, 0x54, 0x45, 0x52, 0x10, 0x06,
	0x12, 0x0d, 0x0a, 0x09, 0x41, 0x44, 0x44, 0x5f, 0x49, 0x4e, 0x54, 0x36, 0x34, 0x10, 0x07, 0x12,
	0x0d, 0x0a, 0x09, 0x53, 0x55, 0x42, 0x5f, 0x49, 0x4e, 0x54, 0x36, 0x34, 0x10, 0x08, 0x12, 0x0d,
	0x0a, 0x09, 0x4d, 0x55, 0x4c, 0x5f, 0x49, 0x4e, 0x54, 0x36, 0x34, 0x10, 0x09, 0x12, 0x0d, 0x0a,
	0x09, 0x44, 0x49, 0x56, 0x5f, 0x49, 0x4e, 0x54, 0x36, 0x34, 0x10, 0x0a, 0x12, 0x0d, 0x0a, 0x09,
	0x4d, 0x4f, 0x44, 0x5f, 0x49, 0x4e, 0x54, 0x36, 0x34, 0x10, 0x0b, 0x12, 0x0d, 0x0a, 0x09, 0x45,
	0x58, 0x50, 0x5f, 0x49, 0x4e, 0x54, 0x36, 0x34, 0x10, 0x0c, 0x12, 0x0f, 0x0a, 0x0b, 0x41, 0x44,
	0x44, 0x5f, 0x4e, 0x55, 0x4d, 0x45, 0x52, 0x49, 0x43, 0x10, 0x0d, 0x12, 0x0f, 0x0a, 0x0b, 0x53,
	0x55, 0x42, 0x5f, 0x4e, 0x55, 0x4d, 0x45, 0x52, 0x49, 0x43, 0x10, 0x0e, 0x12, 0x0f, 0x0a, 0x0b,
	0x4d, 0x55, 0x4c, 0x5f, 0x4e, 0x55, 0x4d, 0x45, 0x52, 0x49, 0x43, 0x10, 0x0f, 0x12, 0x0f, 0x0a,
	0x0b, 0x44, 0x49, 0x56, 0x5f, 0x4e, 0x55, 0x4d, 0x45, 0x52, 0x49, 0x43, 0x10, 0x10, 0x12, 0x11,
	0x0a, 0x0d, 0x52, 0x4f, 0x55, 0x4e, 0x44, 0x5f, 0x4e, 0x55, 0x4d, 0x45, 0x52, 0x49, 0x43, 0x10,
	0x11, 0x12, 0x10, 0x0a, 0x0c, 0x43, 0x41, 0x53, 0x54, 0x5f, 0x4e, 0x55, 0x4d, 0x45, 0x52, 0x49,
	0x43, 0x10, 0x12, 0x12, 0x11, 0x0a, 0x0d, 0x53, 0x48, 0x49, 0x46, 0x54, 0x5f, 0x4e, 0x55, 0x4d,
	0x45, 0x52, 0x49, 0x43, 0x10, 0x13, 0x12, 0x14, 0x0a, 0x10, 0x49, 0x4e, 0x54, 0x36, 0x34, 0x5f,
	0x54, 0x4f, 0x5f, 0x4e, 0x55, 0x4d, 0x45, 0x52, 0x49, 0x43, 0x10, 0x14, 0x12, 0x14, 0x0a, 0x10,
	0x4e, 0x55, 0x4d, 0x45, 0x52, 0x49, 0x43, 0x5f, 0x54, 0x4f, 0x5f, 0x49, 0x4e, 0x54, 0x36, 0x34,
	0x10, 0x15, 0x12, 0x11, 0x0a, 0x0d, 0x49, 0x4e, 0x54, 0x36, 0x34, 0x5f, 0x54, 0x4f, 0x5f, 0x54,
	0x45, 0x58, 0x54, 0x10, 0x16, 0x12, 0x13, 0x0a, 0x0f, 0x4e, 0x55, 0x4d, 0x45, 0x52, 0x49, 0x43,
	0x5f, 0x54, 0x4f, 0x5f, 0x54, 0x45, 0x58, 0x54, 0x10, 0x17, 0x12, 0x15, 0x0a, 0x11, 0x54, 0x49,
	0x4d, 0x45, 0x53, 0x54, 0x41, 0x4d, 0x50, 0x5f, 0x54, 0x4f, 0x5f, 0x54, 0x45, 0x58, 0x54, 0x10,
	0x19, 0x12, 0x10, 0x0a, 0x0c, 0x44, 0x41, 0x54, 0x45, 0x5f, 0x54, 0x4f, 0x5f, 0x54, 0x45, 0x58,
	0x54, 0x10, 0x1a, 0x12, 0x11, 0x0a, 0x0d, 0x50, 0x41, 0x52, 0x54, 0x59, 0x5f, 0x54, 0x4f, 0x5f,
	0x54, 0x45, 0x58, 0x54, 0x10, 0x1b, 0x12, 0x11, 0x0a, 0x0d, 0x54, 0x45, 0x58, 0x54, 0x5f, 0x54,
	0x4f, 0x5f, 0x50, 0x41, 0x52, 0x54, 0x59, 0x10, 0x1c, 0x12, 0x11, 0x0a, 0x0d, 0x54, 0x45, 0x58,
	0x54, 0x5f, 0x54, 0x4f, 0x5f, 0x49, 0x4e, 0x54, 0x36, 0x34, 0x10, 0x1d, 0x12, 0x13, 0x0a, 0x0f,
	0x54, 0x45, 0x58, 0x54, 0x5f, 0x54, 0x4f, 0x5f, 0x4e, 0x55, 0x4d, 0x45, 0x52, 0x49, 0x43, 0x10,
	0x1e, 0x12, 0x17, 0x0a, 0x13, 0x43, 0x4f, 0x4e, 0x54, 0x52, 0x41, 0x43, 0x54, 0x5f, 0x49, 0x44,
	0x5f, 0x54, 0x4f, 0x5f, 0x54, 0x45, 0x58, 0x54, 0x10, 0x1f, 0x12, 0x0f, 0x0a, 0x0b, 0x53, 0x48,
	0x41, 0x32, 0x35, 0x36, 0x5f, 0x54, 0x45, 0x58, 0x54, 0x10, 0x20, 0x12, 0x10, 0x0a, 0x0c, 0x45,
	0x58, 0x50, 0x4c, 0x4f, 0x44, 0x45, 0x5f, 0x54, 0x45, 0x58, 0x54, 0x10, 0x21, 0x12, 0x0f, 0x0a,
	0x0b, 0x41, 0x50, 0x50, 0x45, 0x4e, 0x44, 0x5f, 0x54, 0x45, 0x58, 0x54, 0x10, 0x22, 0x12, 0x10,
	0x0a, 0x0c, 0x49, 0x4d, 0x50, 0x4c, 0x4f, 0x44, 0x45, 0x5f, 0x54, 0x45, 0x58, 0x54, 0x10, 0x23,
	0x12, 0x17, 0x0a, 0x13, 0x43, 0x4f, 0x44, 0x45, 0x5f, 0x50, 0x4f, 0x49, 0x4e, 0x54, 0x53, 0x5f,
	0x54, 0x4f, 0x5f, 0x54, 0x45, 0x58, 0x54, 0x10, 0x24, 0x12, 0x17, 0x0a, 0x13, 0x54, 0x45, 0x58,
	0x54, 0x5f, 0x54, 0x4f, 0x5f, 0x43, 0x4f, 0x44, 0x45, 0x5f, 0x50, 0x4f, 0x49, 0x4e, 0x54, 0x53,
	0x10, 0x25, 0x12, 0x15, 0x0a, 0x11, 0x44, 0x41, 0x54, 0x45, 0x5f, 0x54, 0x4f, 0x5f, 0x55, 0x4e,
	0x49, 0x58, 0x5f, 0x44, 0x41, 0x59, 0x53, 0x10, 0x26, 0x12, 0x15, 0x0a, 0x11, 0x55, 0x4e, 0x49,
	0x58, 0x5f, 0x44, 0x41, 0x59, 0x53, 0x5f, 0x54, 0x4f, 0x5f, 0x44, 0x41, 0x54, 0x45, 0x10, 0x27,
	0x12, 0x22, 0x0a, 0x1e, 0x54, 0x49, 0x4d, 0x45, 0x53, 0x54, 0x41, 0x4d, 0x50, 0x5f, 0x54, 0x4f,
	0x5f, 0x55, 0x4e, 0x49, 0x58, 0x5f, 0x4d, 0x49, 0x43, 0x52, 0x4f, 0x53, 0x45, 0x43, 0x4f, 0x4e,
	0x44, 0x53, 0x10, 0x28, 0x12, 0x22, 0x0a, 0x1e, 0x55, 0x4e, 0x49, 0x58, 0x5f, 0x4d, 0x49, 0x43,
	0x52, 0x4f, 0x53, 0x45, 0x43, 0x4f, 0x4e, 0x44, 0x53, 0x5f, 0x54, 0x4f, 0x5f, 0x54, 0x49, 0x4d,
	0x45, 0x53, 0x54, 0x41, 0x4d, 0x50, 0x10, 0x29, 0x12, 0x16, 0x0a, 0x12, 0x43, 0x4f, 0x45, 0x52,
	0x43, 0x45, 0x5f, 0x43, 0x4f, 0x4e, 0x54, 0x52, 0x41, 0x43, 0x54, 0x5f, 0x49, 0x44, 0x10, 0x2a,
	0x12, 0x09, 0x0a, 0x05, 0x46, 0x4f, 0x4c, 0x44, 0x4c, 0x10, 0x2b, 0x12, 0x09, 0x0a, 0x05, 0x46,
	0x4f, 0x4c, 0x44, 0x52, 0x10, 0x2c, 0x12, 0x0e, 0x0a, 0x0a, 0x45, 0x51, 0x55, 0x41, 0x4c, 0x5f,
	0x4c, 0x49, 0x53, 0x54, 0x10, 0x2d, 0x12, 0x10, 0x0a, 0x0c, 0x47, 0x45, 0x4e, 0x4d, 0x41, 0x50,
	0x5f, 0x45, 0x4d, 0x50, 0x54, 0x59, 0x10, 0x34, 0x12, 0x11, 0x0a, 0x0d, 0x47, 0x45, 0x4e, 0x4d,
	0x41, 0x50, 0x5f, 0x49, 0x4e, 0x53, 0x45, 0x52, 0x54, 0x10, 0x35, 0x12, 0x11, 0x0a, 0x0d, 0x47,
	0x45, 0x4e, 0x4d, 0x41, 0x50, 0x5f, 0x4c, 0x4f, 0x4f, 0x4b, 0x55, 0x50, 0x10, 0x36, 0x12, 0x11,
	0x0a, 0x0d, 0x47, 0x45, 0x4e, 0x4d, 0x41, 0x50, 0x5f, 0x44, 0x45, 0x4c, 0x45, 0x54, 0x45, 0x10,
	0x37, 0x12, 0x0f, 0x0a, 0x0b, 0x47, 0x45, 0x4e, 0x4d, 0x41, 0x50, 0x5f, 0x4b, 0x45, 0x59, 0x53,
	0x10, 0x38, 0x12, 0x11, 0x0a, 0x0d, 0x47, 0x45, 0x4e, 0x4d, 0x41, 0x50, 0x5f, 0x56, 0x41, 0x4c,
	0x55, 0x45, 0x53, 0x10, 0x39, 0x12, 0x0f, 0x0a, 0x0b, 0x47, 0x45, 0x4e, 0x4d, 0x41, 0x50, 0x5f,
	0x53, 0x49, 0x5a, 0x45, 0x10, 0x3a, 0x12, 0x19, 0x0a, 0x15, 0x41, 0x4e, 0x59, 0x5f, 0x45, 0x58,
	0x43, 0x45, 0x50, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x4d, 0x45, 0x53, 0x53, 0x41, 0x47, 0x45, 0x10,
	0x3b, 0x12, 0x12, 0x0a, 0x0d, 0x54, 0x45, 0x58, 0x54, 0x4d, 0x41, 0x50, 0x5f, 0x45, 0x4d, 0x50,
	0x54, 0x59, 0x10, 0xe9, 0x07, 0x12, 0x13, 0x0a, 0x0e, 0x54, 0x45, 0x58, 0x54, 0x4d, 0x41, 0x50,
	0x5f, 0x49, 0x4e, 0x53, 0x45, 0x52, 0x54, 0x10, 0xea, 0x07, 0x12, 0x13, 0x0a, 0x0e, 0x54, 0x45,
	0x58, 0x54, 0x4d, 0x41, 0x50, 0x5f, 0x4c, 0x4f, 0x4f, 0x4b, 0x55, 0x50, 0x10, 0xeb, 0x07, 0x12,
	0x13, 0x0a, 0x0e, 0x54, 0x45, 0x58, 0x54, 0x4d, 0x41, 0x50, 0x5f, 0x44, 0x45, 0x4c, 0x45, 0x54,
	0x45, 0x10, 0xec, 0x07, 0x12, 0x14, 0x0a, 0x0f, 0x54, 0x45, 0x58, 0x54, 0x4d, 0x41, 0x50, 0x5f,
	0x54, 0x4f, 0x5f, 0x4c, 0x49, 0x53, 0x54, 0x10, 0xed, 0x07, 0x12, 0x11, 0x0a, 0x0c, 0x54, 0x45,
	0x58, 0x54, 0x4d, 0x41, 0x50, 0x5f, 0x53, 0x49, 0x5a, 0x45, 0x10, 0xee, 0x07, 0x12, 0x15, 0x0a,
	0x10, 0x53, 0x43, 0x41, 0x4c, 0x45, 0x5f, 0x42, 0x49, 0x47, 0x4e, 0x55, 0x4d, 0x45, 0x52, 0x49,
	0x43, 0x10, 0xd1, 0x0f, 0x12, 0x19, 0x0a, 0x14, 0x50, 0x52, 0x45, 0x43, 0x49, 0x53, 0x49, 0x4f,
	0x4e, 0x5f, 0x42, 0x49, 0x47, 0x4e, 0x55, 0x4d, 0x45, 0x52, 0x49, 0x43, 0x10, 0xd2, 0x0f, 0x12,
	0x13, 0x0a, 0x0e, 0x41, 0x44, 0x44, 0x5f, 0x42, 0x49, 0x47, 0x4e, 0x55, 0x4d, 0x45, 0x52, 0x49,
	0x43, 0x10, 0xd3, 0x0f, 0x12, 0x13, 0x0a, 0x0e, 0x53, 0x55, 0x42, 0x5f, 0x42, 0x49, 0x47, 0x4e,
	0x55, 0x4d, 0x45, 0x52, 0x49, 0x43, 0x10, 0xd4, 0x0f, 0x12, 0x13, 0x0a, 0x0e, 0x4d, 0x55, 0x4c,
	0x5f, 0x42, 0x49, 0x47, 0x4e, 0x55, 0x4d, 0x45, 0x52, 0x49, 0x43, 0x10, 0xd5, 0x0f, 0x12, 0x13,
	0x0a, 0x0e, 0x44, 0x49, 0x56, 0x5f, 0x42, 0x49, 0x47, 0x4e, 0x55, 0x4d, 0x45, 0x52, 0x49, 0x43,
	0x10, 0xd6, 0x0f, 0x12, 0x1b, 0x0a, 0x16, 0x53, 0x48, 0x49, 0x46, 0x54, 0x5f, 0x52, 0x49, 0x47,
	0x48, 0x54, 0x5f, 0x42, 0x49, 0x47, 0x4e, 0x55, 0x4d, 0x45, 0x52, 0x49, 0x43, 0x10, 0xd7, 0x0f,
	0x12, 0x1a, 0x0a, 0x15, 0x42, 0x49, 0x47, 0x4e, 0x55, 0x4d, 0x45, 0x52, 0x49, 0x43, 0x5f, 0x54,
	0x4f, 0x5f, 0x4e, 0x55, 0x4d, 0x45, 0x52, 0x49, 0x43, 0x10, 0xd8, 0x0f, 0x12, 0x1a, 0x0a, 0x15,
	0x4e, 0x55, 0x4d, 0x45, 0x52, 0x49, 0x43, 0x5f, 0x54, 0x4f, 0x5f, 0x42, 0x49, 0x47, 0x4e, 0x55,
	0x4d, 0x45, 0x52, 0x49, 0x43, 0x10, 0xd9, 0x0f, 0x12, 0x17, 0x0a, 0x12, 0x42, 0x49, 0x47, 0x4e,
	0x55, 0x4d, 0x45, 0x52, 0x49, 0x43, 0x5f, 0x54, 0x4f, 0x5f, 0x54, 0x45, 0x58, 0x54, 0x10, 0xda,
	0x0f, 0x12, 0x18, 0x0a, 0x13, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x52, 0x45, 0x50, 0x5f, 0x54, 0x59,
	0x43, 0x4f, 0x4e, 0x5f, 0x4e, 0x41, 0x4d, 0x45, 0x10, 0xc3, 0x17, 0x42, 0x6f, 0x0a, 0x14, 0x63,
	0x6f, 0x6d, 0x2e, 0x64, 0x61, 0x6d, 0x6c, 0x2e, 0x64, 0x61, 0x6d, 0x6c, 0x5f, 0x6c, 0x66, 0x5f,
	0x32, 0x5f, 0x31, 0x5a, 0x38, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f,
	0x64, 0x69, 0x67, 0x69, 0x74, 0x61, 0x6c, 0x2d, 0x61, 0x73, 0x73, 0x65, 0x74, 0x2f, 0x64, 0x61,
	0x7a, 0x6c, 0x2d, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2f, 0x76, 0x38, 0x2f, 0x67, 0x6f, 0x2f,
	0x61, 0x70, 0x69, 0x2f, 0x64, 0x61, 0x6d, 0x6c, 0x5f, 0x6c, 0x66, 0x5f, 0x32, 0xaa, 0x02, 0x1c,
	0x43, 0x6f, 0x6d, 0x2e, 0x44, 0x61, 0x6d, 0x6c, 0x2e, 0x44, 0x61, 0x6d, 0x6c, 0x5f, 0x4c, 0x66,
	0x5f, 0x32, 0x5f, 0x31, 0x2e, 0x44, 0x61, 0x6d, 0x6c, 0x4c, 0x66, 0x32, 0x62, 0x06, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_com_daml_daml_lf_2_1_daml_lf2_proto_rawDescOnce sync.Once
	file_com_daml_daml_lf_2_1_daml_lf2_proto_rawDescData = file_com_daml_daml_lf_2_1_daml_lf2_proto_rawDesc
)

func file_com_daml_daml_lf_2_1_daml_lf2_proto_rawDescGZIP() []byte {
	file_com_daml_daml_lf_2_1_daml_lf2_proto_rawDescOnce.Do(func() {
		file_com_daml_daml_lf_2_1_daml_lf2_proto_rawDescData = protoimpl.X.CompressGZIP(file_com_daml_daml_lf_2_1_daml_lf2_proto_rawDescData)
	})
	return file_com_daml_daml_lf_2_1_daml_lf2_proto_rawDescData
}

var file_com_daml_daml_lf_2_1_daml_lf2_proto_enumTypes = make([]protoimpl.EnumInfo, 4)
var file_com_daml_daml_lf_2_1_daml_lf2_proto_msgTypes = make([]protoimpl.MessageInfo, 105)
var file_com_daml_daml_lf_2_1_daml_lf2_proto_goTypes = []any{
	(BuiltinType)(0),                         // 0: daml_lf_2.BuiltinType
	(BuiltinCon)(0),                          // 1: daml_lf_2.BuiltinCon
	(BuiltinFunction)(0),                     // 2: daml_lf_2.BuiltinFunction
	(BuiltinLit_RoundingMode)(0),             // 3: daml_lf_2.BuiltinLit.RoundingMode
	(*Unit)(nil),                             // 4: daml_lf_2.Unit
	(*PackageRef)(nil),                       // 5: daml_lf_2.PackageRef
	(*ModuleRef)(nil),                        // 6: daml_lf_2.ModuleRef
	(*TypeConName)(nil),                      // 7: daml_lf_2.TypeConName
	(*TypeSynName)(nil),                      // 8: daml_lf_2.TypeSynName
	(*ValName)(nil),                          // 9: daml_lf_2.ValName
	(*FieldWithType)(nil),                    // 10: daml_lf_2.FieldWithType
	(*VarWithType)(nil),                      // 11: daml_lf_2.VarWithType
	(*TypeVarWithKind)(nil),                  // 12: daml_lf_2.TypeVarWithKind
	(*FieldWithExpr)(nil),                    // 13: daml_lf_2.FieldWithExpr
	(*Binding)(nil),                          // 14: daml_lf_2.Binding
	(*Kind)(nil),                             // 15: daml_lf_2.Kind
	(*Type)(nil),                             // 16: daml_lf_2.Type
	(*BuiltinLit)(nil),                       // 17: daml_lf_2.BuiltinLit
	(*Location)(nil),                         // 18: daml_lf_2.Location
	(*Expr)(nil),                             // 19: daml_lf_2.Expr
	(*CaseAlt)(nil),                          // 20: daml_lf_2.CaseAlt
	(*Case)(nil),                             // 21: daml_lf_2.Case
	(*Block)(nil),                            // 22: daml_lf_2.Block
	(*Pure)(nil),                             // 23: daml_lf_2.Pure
	(*Update)(nil),                           // 24: daml_lf_2.Update
	(*Scenario)(nil),                         // 25: daml_lf_2.Scenario
	(*TemplateChoice)(nil),                   // 26: daml_lf_2.TemplateChoice
	(*InterfaceInstanceBody)(nil),            // 27: daml_lf_2.InterfaceInstanceBody
	(*DefTemplate)(nil),                      // 28: daml_lf_2.DefTemplate
	(*InterfaceMethod)(nil),                  // 29: daml_lf_2.InterfaceMethod
	(*DefInterface)(nil),                     // 30: daml_lf_2.DefInterface
	(*DefException)(nil),                     // 31: daml_lf_2.DefException
	(*DefDataType)(nil),                      // 32: daml_lf_2.DefDataType
	(*DefTypeSyn)(nil),                       // 33: daml_lf_2.DefTypeSyn
	(*DefValue)(nil),                         // 34: daml_lf_2.DefValue
	(*FeatureFlags)(nil),                     // 35: daml_lf_2.FeatureFlags
	(*Module)(nil),                           // 36: daml_lf_2.Module
	(*InternedDottedName)(nil),               // 37: daml_lf_2.InternedDottedName
	(*UpgradedPackageId)(nil),                // 38: daml_lf_2.UpgradedPackageId
	(*PackageMetadata)(nil),                  // 39: daml_lf_2.PackageMetadata
	(*Package)(nil),                          // 40: daml_lf_2.Package
	(*Kind_Arrow)(nil),                       // 41: daml_lf_2.Kind.Arrow
	(*Type_Var)(nil),                         // 42: daml_lf_2.Type.Var
	(*Type_Con)(nil),                         // 43: daml_lf_2.Type.Con
	(*Type_Syn)(nil),                         // 44: daml_lf_2.Type.Syn
	(*Type_Builtin)(nil),                     // 45: daml_lf_2.Type.Builtin
	(*Type_Forall)(nil),                      // 46: daml_lf_2.Type.Forall
	(*Type_Struct)(nil),                      // 47: daml_lf_2.Type.Struct
	(*Location_Range)(nil),                   // 48: daml_lf_2.Location.Range
	(*Expr_RecCon)(nil),                      // 49: daml_lf_2.Expr.RecCon
	(*Expr_RecProj)(nil),                     // 50: daml_lf_2.Expr.RecProj
	(*Expr_RecUpd)(nil),                      // 51: daml_lf_2.Expr.RecUpd
	(*Expr_VariantCon)(nil),                  // 52: daml_lf_2.Expr.VariantCon
	(*Expr_EnumCon)(nil),                     // 53: daml_lf_2.Expr.EnumCon
	(*Expr_StructCon)(nil),                   // 54: daml_lf_2.Expr.StructCon
	(*Expr_StructProj)(nil),                  // 55: daml_lf_2.Expr.StructProj
	(*Expr_StructUpd)(nil),                   // 56: daml_lf_2.Expr.StructUpd
	(*Expr_App)(nil),                         // 57: daml_lf_2.Expr.App
	(*Expr_TyApp)(nil),                       // 58: daml_lf_2.Expr.TyApp
	(*Expr_Abs)(nil),                         // 59: daml_lf_2.Expr.Abs
	(*Expr_TyAbs)(nil),                       // 60: daml_lf_2.Expr.TyAbs
	(*Expr_Nil)(nil),                         // 61: daml_lf_2.Expr.Nil
	(*Expr_Cons)(nil),                        // 62: daml_lf_2.Expr.Cons
	(*Expr_OptionalNone)(nil),                // 63: daml_lf_2.Expr.OptionalNone
	(*Expr_OptionalSome)(nil),                // 64: daml_lf_2.Expr.OptionalSome
	(*Expr_ToAny)(nil),                       // 65: daml_lf_2.Expr.ToAny
	(*Expr_FromAny)(nil),                     // 66: daml_lf_2.Expr.FromAny
	(*Expr_ToAnyException)(nil),              // 67: daml_lf_2.Expr.ToAnyException
	(*Expr_FromAnyException)(nil),            // 68: daml_lf_2.Expr.FromAnyException
	(*Expr_Throw)(nil),                       // 69: daml_lf_2.Expr.Throw
	(*Expr_ToInterface)(nil),                 // 70: daml_lf_2.Expr.ToInterface
	(*Expr_FromInterface)(nil),               // 71: daml_lf_2.Expr.FromInterface
	(*Expr_CallInterface)(nil),               // 72: daml_lf_2.Expr.CallInterface
	(*Expr_ViewInterface)(nil),               // 73: daml_lf_2.Expr.ViewInterface
	(*Expr_SignatoryInterface)(nil),          // 74: daml_lf_2.Expr.SignatoryInterface
	(*Expr_ObserverInterface)(nil),           // 75: daml_lf_2.Expr.ObserverInterface
	(*Expr_UnsafeFromInterface)(nil),         // 76: daml_lf_2.Expr.UnsafeFromInterface
	(*Expr_ToRequiredInterface)(nil),         // 77: daml_lf_2.Expr.ToRequiredInterface
	(*Expr_FromRequiredInterface)(nil),       // 78: daml_lf_2.Expr.FromRequiredInterface
	(*Expr_UnsafeFromRequiredInterface)(nil), // 79: daml_lf_2.Expr.UnsafeFromRequiredInterface
	(*Expr_InterfaceTemplateTypeRep)(nil),    // 80: daml_lf_2.Expr.InterfaceTemplateTypeRep
	(*Expr_ChoiceController)(nil),            // 81: daml_lf_2.Expr.ChoiceController
	(*Expr_ChoiceObserver)(nil),              // 82: daml_lf_2.Expr.ChoiceObserver
	(*Expr_Experimental)(nil),                // 83: daml_lf_2.Expr.Experimental
	(*CaseAlt_Variant)(nil),                  // 84: daml_lf_2.CaseAlt.Variant
	(*CaseAlt_Enum)(nil),                     // 85: daml_lf_2.CaseAlt.Enum
	(*CaseAlt_Cons)(nil),                     // 86: daml_lf_2.CaseAlt.Cons
	(*CaseAlt_OptionalSome)(nil),             // 87: daml_lf_2.CaseAlt.OptionalSome
	(*Update_Create)(nil),                    // 88: daml_lf_2.Update.Create
	(*Update_CreateInterface)(nil),           // 89: daml_lf_2.Update.CreateInterface
	(*Update_Exercise)(nil),                  // 90: daml_lf_2.Update.Exercise
	(*Update_SoftExercise)(nil),              // 91: daml_lf_2.Update.SoftExercise
	(*Update_DynamicExercise)(nil),           // 92: daml_lf_2.Update.DynamicExercise
	(*Update_ExerciseInterface)(nil),         // 93: daml_lf_2.Update.ExerciseInterface
	(*Update_ExerciseByKey)(nil),             // 94: daml_lf_2.Update.ExerciseByKey
	(*Update_Fetch)(nil),                     // 95: daml_lf_2.Update.Fetch
	(*Update_SoftFetch)(nil),                 // 96: daml_lf_2.Update.SoftFetch
	(*Update_FetchInterface)(nil),            // 97: daml_lf_2.Update.FetchInterface
	(*Update_EmbedExpr)(nil),                 // 98: daml_lf_2.Update.EmbedExpr
	(*Update_RetrieveByKey)(nil),             // 99: daml_lf_2.Update.RetrieveByKey
	(*Update_TryCatch)(nil),                  // 100: daml_lf_2.Update.TryCatch
	(*Scenario_Commit)(nil),                  // 101: daml_lf_2.Scenario.Commit
	(*Scenario_EmbedExpr)(nil),               // 102: daml_lf_2.Scenario.EmbedExpr
	(*InterfaceInstanceBody_InterfaceInstanceMethod)(nil), // 103: daml_lf_2.InterfaceInstanceBody.InterfaceInstanceMethod
	(*DefTemplate_DefKey)(nil),                            // 104: daml_lf_2.DefTemplate.DefKey
	(*DefTemplate_Implements)(nil),                        // 105: daml_lf_2.DefTemplate.Implements
	(*DefDataType_Fields)(nil),                            // 106: daml_lf_2.DefDataType.Fields
	(*DefDataType_EnumConstructors)(nil),                  // 107: daml_lf_2.DefDataType.EnumConstructors
	(*DefValue_NameWithType)(nil),                         // 108: daml_lf_2.DefValue.NameWithType
}
var file_com_daml_daml_lf_2_1_daml_lf2_proto_depIdxs = []int32{
	4,   // 0: daml_lf_2.PackageRef.self:type_name -> daml_lf_2.Unit
	5,   // 1: daml_lf_2.ModuleRef.package_ref:type_name -> daml_lf_2.PackageRef
	6,   // 2: daml_lf_2.TypeConName.module:type_name -> daml_lf_2.ModuleRef
	6,   // 3: daml_lf_2.TypeSynName.module:type_name -> daml_lf_2.ModuleRef
	6,   // 4: daml_lf_2.ValName.module:type_name -> daml_lf_2.ModuleRef
	16,  // 5: daml_lf_2.FieldWithType.type:type_name -> daml_lf_2.Type
	16,  // 6: daml_lf_2.VarWithType.type:type_name -> daml_lf_2.Type
	15,  // 7: daml_lf_2.TypeVarWithKind.kind:type_name -> daml_lf_2.Kind
	19,  // 8: daml_lf_2.FieldWithExpr.expr:type_name -> daml_lf_2.Expr
	11,  // 9: daml_lf_2.Binding.binder:type_name -> daml_lf_2.VarWithType
	19,  // 10: daml_lf_2.Binding.bound:type_name -> daml_lf_2.Expr
	4,   // 11: daml_lf_2.Kind.star:type_name -> daml_lf_2.Unit
	41,  // 12: daml_lf_2.Kind.arrow:type_name -> daml_lf_2.Kind.Arrow
	4,   // 13: daml_lf_2.Kind.nat:type_name -> daml_lf_2.Unit
	42,  // 14: daml_lf_2.Type.var:type_name -> daml_lf_2.Type.Var
	43,  // 15: daml_lf_2.Type.con:type_name -> daml_lf_2.Type.Con
	45,  // 16: daml_lf_2.Type.builtin:type_name -> daml_lf_2.Type.Builtin
	46,  // 17: daml_lf_2.Type.forall:type_name -> daml_lf_2.Type.Forall
	47,  // 18: daml_lf_2.Type.struct:type_name -> daml_lf_2.Type.Struct
	44,  // 19: daml_lf_2.Type.syn:type_name -> daml_lf_2.Type.Syn
	3,   // 20: daml_lf_2.BuiltinLit.rounding_mode:type_name -> daml_lf_2.BuiltinLit.RoundingMode
	6,   // 21: daml_lf_2.Location.module:type_name -> daml_lf_2.ModuleRef
	48,  // 22: daml_lf_2.Location.range:type_name -> daml_lf_2.Location.Range
	18,  // 23: daml_lf_2.Expr.location:type_name -> daml_lf_2.Location
	9,   // 24: daml_lf_2.Expr.val:type_name -> daml_lf_2.ValName
	2,   // 25: daml_lf_2.Expr.builtin:type_name -> daml_lf_2.BuiltinFunction
	1,   // 26: daml_lf_2.Expr.builtin_con:type_name -> daml_lf_2.BuiltinCon
	17,  // 27: daml_lf_2.Expr.builtin_lit:type_name -> daml_lf_2.BuiltinLit
	49,  // 28: daml_lf_2.Expr.rec_con:type_name -> daml_lf_2.Expr.RecCon
	50,  // 29: daml_lf_2.Expr.rec_proj:type_name -> daml_lf_2.Expr.RecProj
	51,  // 30: daml_lf_2.Expr.rec_upd:type_name -> daml_lf_2.Expr.RecUpd
	52,  // 31: daml_lf_2.Expr.variant_con:type_name -> daml_lf_2.Expr.VariantCon
	53,  // 32: daml_lf_2.Expr.enum_con:type_name -> daml_lf_2.Expr.EnumCon
	54,  // 33: daml_lf_2.Expr.struct_con:type_name -> daml_lf_2.Expr.StructCon
	55,  // 34: daml_lf_2.Expr.struct_proj:type_name -> daml_lf_2.Expr.StructProj
	56,  // 35: daml_lf_2.Expr.struct_upd:type_name -> daml_lf_2.Expr.StructUpd
	57,  // 36: daml_lf_2.Expr.app:type_name -> daml_lf_2.Expr.App
	58,  // 37: daml_lf_2.Expr.ty_app:type_name -> daml_lf_2.Expr.TyApp
	59,  // 38: daml_lf_2.Expr.abs:type_name -> daml_lf_2.Expr.Abs
	60,  // 39: daml_lf_2.Expr.ty_abs:type_name -> daml_lf_2.Expr.TyAbs
	21,  // 40: daml_lf_2.Expr.case:type_name -> daml_lf_2.Case
	22,  // 41: daml_lf_2.Expr.let:type_name -> daml_lf_2.Block
	61,  // 42: daml_lf_2.Expr.nil:type_name -> daml_lf_2.Expr.Nil
	62,  // 43: daml_lf_2.Expr.cons:type_name -> daml_lf_2.Expr.Cons
	24,  // 44: daml_lf_2.Expr.update:type_name -> daml_lf_2.Update
	63,  // 45: daml_lf_2.Expr.optional_none:type_name -> daml_lf_2.Expr.OptionalNone
	64,  // 46: daml_lf_2.Expr.optional_some:type_name -> daml_lf_2.Expr.OptionalSome
	65,  // 47: daml_lf_2.Expr.to_any:type_name -> daml_lf_2.Expr.ToAny
	66,  // 48: daml_lf_2.Expr.from_any:type_name -> daml_lf_2.Expr.FromAny
	16,  // 49: daml_lf_2.Expr.type_rep:type_name -> daml_lf_2.Type
	67,  // 50: daml_lf_2.Expr.to_any_exception:type_name -> daml_lf_2.Expr.ToAnyException
	68,  // 51: daml_lf_2.Expr.from_any_exception:type_name -> daml_lf_2.Expr.FromAnyException
	69,  // 52: daml_lf_2.Expr.throw:type_name -> daml_lf_2.Expr.Throw
	70,  // 53: daml_lf_2.Expr.to_interface:type_name -> daml_lf_2.Expr.ToInterface
	71,  // 54: daml_lf_2.Expr.from_interface:type_name -> daml_lf_2.Expr.FromInterface
	72,  // 55: daml_lf_2.Expr.call_interface:type_name -> daml_lf_2.Expr.CallInterface
	74,  // 56: daml_lf_2.Expr.signatory_interface:type_name -> daml_lf_2.Expr.SignatoryInterface
	75,  // 57: daml_lf_2.Expr.observer_interface:type_name -> daml_lf_2.Expr.ObserverInterface
	73,  // 58: daml_lf_2.Expr.view_interface:type_name -> daml_lf_2.Expr.ViewInterface
	76,  // 59: daml_lf_2.Expr.unsafe_from_interface:type_name -> daml_lf_2.Expr.UnsafeFromInterface
	80,  // 60: daml_lf_2.Expr.interface_template_type_rep:type_name -> daml_lf_2.Expr.InterfaceTemplateTypeRep
	77,  // 61: daml_lf_2.Expr.to_required_interface:type_name -> daml_lf_2.Expr.ToRequiredInterface
	78,  // 62: daml_lf_2.Expr.from_required_interface:type_name -> daml_lf_2.Expr.FromRequiredInterface
	79,  // 63: daml_lf_2.Expr.unsafe_from_required_interface:type_name -> daml_lf_2.Expr.UnsafeFromRequiredInterface
	81,  // 64: daml_lf_2.Expr.choice_controller:type_name -> daml_lf_2.Expr.ChoiceController
	82,  // 65: daml_lf_2.Expr.choice_observer:type_name -> daml_lf_2.Expr.ChoiceObserver
	25,  // 66: daml_lf_2.Expr.scenario:type_name -> daml_lf_2.Scenario
	83,  // 67: daml_lf_2.Expr.experimental:type_name -> daml_lf_2.Expr.Experimental
	4,   // 68: daml_lf_2.CaseAlt.default:type_name -> daml_lf_2.Unit
	84,  // 69: daml_lf_2.CaseAlt.variant:type_name -> daml_lf_2.CaseAlt.Variant
	1,   // 70: daml_lf_2.CaseAlt.builtin_con:type_name -> daml_lf_2.BuiltinCon
	4,   // 71: daml_lf_2.CaseAlt.nil:type_name -> daml_lf_2.Unit
	86,  // 72: daml_lf_2.CaseAlt.cons:type_name -> daml_lf_2.CaseAlt.Cons
	4,   // 73: daml_lf_2.CaseAlt.optional_none:type_name -> daml_lf_2.Unit
	87,  // 74: daml_lf_2.CaseAlt.optional_some:type_name -> daml_lf_2.CaseAlt.OptionalSome
	85,  // 75: daml_lf_2.CaseAlt.enum:type_name -> daml_lf_2.CaseAlt.Enum
	19,  // 76: daml_lf_2.CaseAlt.body:type_name -> daml_lf_2.Expr
	19,  // 77: daml_lf_2.Case.scrut:type_name -> daml_lf_2.Expr
	20,  // 78: daml_lf_2.Case.alts:type_name -> daml_lf_2.CaseAlt
	14,  // 79: daml_lf_2.Block.bindings:type_name -> daml_lf_2.Binding
	19,  // 80: daml_lf_2.Block.body:type_name -> daml_lf_2.Expr
	16,  // 81: daml_lf_2.Pure.type:type_name -> daml_lf_2.Type
	19,  // 82: daml_lf_2.Pure.expr:type_name -> daml_lf_2.Expr
	23,  // 83: daml_lf_2.Update.pure:type_name -> daml_lf_2.Pure
	22,  // 84: daml_lf_2.Update.block:type_name -> daml_lf_2.Block
	88,  // 85: daml_lf_2.Update.create:type_name -> daml_lf_2.Update.Create
	90,  // 86: daml_lf_2.Update.exercise:type_name -> daml_lf_2.Update.Exercise
	94,  // 87: daml_lf_2.Update.exercise_by_key:type_name -> daml_lf_2.Update.ExerciseByKey
	95,  // 88: daml_lf_2.Update.fetch:type_name -> daml_lf_2.Update.Fetch
	4,   // 89: daml_lf_2.Update.get_time:type_name -> daml_lf_2.Unit
	99,  // 90: daml_lf_2.Update.lookup_by_key:type_name -> daml_lf_2.Update.RetrieveByKey
	99,  // 91: daml_lf_2.Update.fetch_by_key:type_name -> daml_lf_2.Update.RetrieveByKey
	98,  // 92: daml_lf_2.Update.embed_expr:type_name -> daml_lf_2.Update.EmbedExpr
	100, // 93: daml_lf_2.Update.try_catch:type_name -> daml_lf_2.Update.TryCatch
	89,  // 94: daml_lf_2.Update.create_interface:type_name -> daml_lf_2.Update.CreateInterface
	93,  // 95: daml_lf_2.Update.exercise_interface:type_name -> daml_lf_2.Update.ExerciseInterface
	97,  // 96: daml_lf_2.Update.fetch_interface:type_name -> daml_lf_2.Update.FetchInterface
	92,  // 97: daml_lf_2.Update.dynamic_exercise:type_name -> daml_lf_2.Update.DynamicExercise
	96,  // 98: daml_lf_2.Update.soft_fetch:type_name -> daml_lf_2.Update.SoftFetch
	91,  // 99: daml_lf_2.Update.soft_exercise:type_name -> daml_lf_2.Update.SoftExercise
	23,  // 100: daml_lf_2.Scenario.pure:type_name -> daml_lf_2.Pure
	22,  // 101: daml_lf_2.Scenario.block:type_name -> daml_lf_2.Block
	101, // 102: daml_lf_2.Scenario.commit:type_name -> daml_lf_2.Scenario.Commit
	101, // 103: daml_lf_2.Scenario.mustFailAt:type_name -> daml_lf_2.Scenario.Commit
	19,  // 104: daml_lf_2.Scenario.pass:type_name -> daml_lf_2.Expr
	4,   // 105: daml_lf_2.Scenario.get_time:type_name -> daml_lf_2.Unit
	19,  // 106: daml_lf_2.Scenario.get_party:type_name -> daml_lf_2.Expr
	102, // 107: daml_lf_2.Scenario.embed_expr:type_name -> daml_lf_2.Scenario.EmbedExpr
	18,  // 108: daml_lf_2.TemplateChoice.location:type_name -> daml_lf_2.Location
	19,  // 109: daml_lf_2.TemplateChoice.controllers:type_name -> daml_lf_2.Expr
	19,  // 110: daml_lf_2.TemplateChoice.observers:type_name -> daml_lf_2.Expr
	11,  // 111: daml_lf_2.TemplateChoice.arg_binder:type_name -> daml_lf_2.VarWithType
	16,  // 112: daml_lf_2.TemplateChoice.ret_type:type_name -> daml_lf_2.Type
	19,  // 113: daml_lf_2.TemplateChoice.update:type_name -> daml_lf_2.Expr
	19,  // 114: daml_lf_2.TemplateChoice.authorizers:type_name -> daml_lf_2.Expr
	103, // 115: daml_lf_2.InterfaceInstanceBody.methods:type_name -> daml_lf_2.InterfaceInstanceBody.InterfaceInstanceMethod
	19,  // 116: daml_lf_2.InterfaceInstanceBody.view:type_name -> daml_lf_2.Expr
	19,  // 117: daml_lf_2.DefTemplate.precond:type_name -> daml_lf_2.Expr
	19,  // 118: daml_lf_2.DefTemplate.signatories:type_name -> daml_lf_2.Expr
	19,  // 119: daml_lf_2.DefTemplate.agreement:type_name -> daml_lf_2.Expr
	26,  // 120: daml_lf_2.DefTemplate.choices:type_name -> daml_lf_2.TemplateChoice
	19,  // 121: daml_lf_2.DefTemplate.observers:type_name -> daml_lf_2.Expr
	18,  // 122: daml_lf_2.DefTemplate.location:type_name -> daml_lf_2.Location
	104, // 123: daml_lf_2.DefTemplate.key:type_name -> daml_lf_2.DefTemplate.DefKey
	105, // 124: daml_lf_2.DefTemplate.implements:type_name -> daml_lf_2.DefTemplate.Implements
	18,  // 125: daml_lf_2.InterfaceMethod.location:type_name -> daml_lf_2.Location
	16,  // 126: daml_lf_2.InterfaceMethod.type:type_name -> daml_lf_2.Type
	18,  // 127: daml_lf_2.DefInterface.location:type_name -> daml_lf_2.Location
	29,  // 128: daml_lf_2.DefInterface.methods:type_name -> daml_lf_2.InterfaceMethod
	26,  // 129: daml_lf_2.DefInterface.choices:type_name -> daml_lf_2.TemplateChoice
	16,  // 130: daml_lf_2.DefInterface.view:type_name -> daml_lf_2.Type
	7,   // 131: daml_lf_2.DefInterface.requires:type_name -> daml_lf_2.TypeConName
	18,  // 132: daml_lf_2.DefException.location:type_name -> daml_lf_2.Location
	19,  // 133: daml_lf_2.DefException.message:type_name -> daml_lf_2.Expr
	18,  // 134: daml_lf_2.DefDataType.location:type_name -> daml_lf_2.Location
	12,  // 135: daml_lf_2.DefDataType.params:type_name -> daml_lf_2.TypeVarWithKind
	106, // 136: daml_lf_2.DefDataType.record:type_name -> daml_lf_2.DefDataType.Fields
	106, // 137: daml_lf_2.DefDataType.variant:type_name -> daml_lf_2.DefDataType.Fields
	107, // 138: daml_lf_2.DefDataType.enum:type_name -> daml_lf_2.DefDataType.EnumConstructors
	4,   // 139: daml_lf_2.DefDataType.interface:type_name -> daml_lf_2.Unit
	18,  // 140: daml_lf_2.DefTypeSyn.location:type_name -> daml_lf_2.Location
	12,  // 141: daml_lf_2.DefTypeSyn.params:type_name -> daml_lf_2.TypeVarWithKind
	16,  // 142: daml_lf_2.DefTypeSyn.type:type_name -> daml_lf_2.Type
	18,  // 143: daml_lf_2.DefValue.location:type_name -> daml_lf_2.Location
	108, // 144: daml_lf_2.DefValue.name_with_type:type_name -> daml_lf_2.DefValue.NameWithType
	19,  // 145: daml_lf_2.DefValue.expr:type_name -> daml_lf_2.Expr
	35,  // 146: daml_lf_2.Module.flags:type_name -> daml_lf_2.FeatureFlags
	33,  // 147: daml_lf_2.Module.synonyms:type_name -> daml_lf_2.DefTypeSyn
	32,  // 148: daml_lf_2.Module.data_types:type_name -> daml_lf_2.DefDataType
	34,  // 149: daml_lf_2.Module.values:type_name -> daml_lf_2.DefValue
	28,  // 150: daml_lf_2.Module.templates:type_name -> daml_lf_2.DefTemplate
	31,  // 151: daml_lf_2.Module.exceptions:type_name -> daml_lf_2.DefException
	30,  // 152: daml_lf_2.Module.interfaces:type_name -> daml_lf_2.DefInterface
	38,  // 153: daml_lf_2.PackageMetadata.upgraded_package_id:type_name -> daml_lf_2.UpgradedPackageId
	36,  // 154: daml_lf_2.Package.modules:type_name -> daml_lf_2.Module
	37,  // 155: daml_lf_2.Package.interned_dotted_names:type_name -> daml_lf_2.InternedDottedName
	39,  // 156: daml_lf_2.Package.metadata:type_name -> daml_lf_2.PackageMetadata
	16,  // 157: daml_lf_2.Package.interned_types:type_name -> daml_lf_2.Type
	15,  // 158: daml_lf_2.Kind.Arrow.params:type_name -> daml_lf_2.Kind
	15,  // 159: daml_lf_2.Kind.Arrow.result:type_name -> daml_lf_2.Kind
	16,  // 160: daml_lf_2.Type.Var.args:type_name -> daml_lf_2.Type
	7,   // 161: daml_lf_2.Type.Con.tycon:type_name -> daml_lf_2.TypeConName
	16,  // 162: daml_lf_2.Type.Con.args:type_name -> daml_lf_2.Type
	8,   // 163: daml_lf_2.Type.Syn.tysyn:type_name -> daml_lf_2.TypeSynName
	16,  // 164: daml_lf_2.Type.Syn.args:type_name -> daml_lf_2.Type
	0,   // 165: daml_lf_2.Type.Builtin.builtin:type_name -> daml_lf_2.BuiltinType
	16,  // 166: daml_lf_2.Type.Builtin.args:type_name -> daml_lf_2.Type
	12,  // 167: daml_lf_2.Type.Forall.vars:type_name -> daml_lf_2.TypeVarWithKind
	16,  // 168: daml_lf_2.Type.Forall.body:type_name -> daml_lf_2.Type
	10,  // 169: daml_lf_2.Type.Struct.fields:type_name -> daml_lf_2.FieldWithType
	43,  // 170: daml_lf_2.Expr.RecCon.tycon:type_name -> daml_lf_2.Type.Con
	13,  // 171: daml_lf_2.Expr.RecCon.fields:type_name -> daml_lf_2.FieldWithExpr
	43,  // 172: daml_lf_2.Expr.RecProj.tycon:type_name -> daml_lf_2.Type.Con
	19,  // 173: daml_lf_2.Expr.RecProj.record:type_name -> daml_lf_2.Expr
	43,  // 174: daml_lf_2.Expr.RecUpd.tycon:type_name -> daml_lf_2.Type.Con
	19,  // 175: daml_lf_2.Expr.RecUpd.record:type_name -> daml_lf_2.Expr
	19,  // 176: daml_lf_2.Expr.RecUpd.update:type_name -> daml_lf_2.Expr
	43,  // 177: daml_lf_2.Expr.VariantCon.tycon:type_name -> daml_lf_2.Type.Con
	19,  // 178: daml_lf_2.Expr.VariantCon.variant_arg:type_name -> daml_lf_2.Expr
	7,   // 179: daml_lf_2.Expr.EnumCon.tycon:type_name -> daml_lf_2.TypeConName
	13,  // 180: daml_lf_2.Expr.StructCon.fields:type_name -> daml_lf_2.FieldWithExpr
	19,  // 181: daml_lf_2.Expr.StructProj.struct:type_name -> daml_lf_2.Expr
	19,  // 182: daml_lf_2.Expr.StructUpd.struct:type_name -> daml_lf_2.Expr
	19,  // 183: daml_lf_2.Expr.StructUpd.update:type_name -> daml_lf_2.Expr
	19,  // 184: daml_lf_2.Expr.App.fun:type_name -> daml_lf_2.Expr
	19,  // 185: daml_lf_2.Expr.App.args:type_name -> daml_lf_2.Expr
	19,  // 186: daml_lf_2.Expr.TyApp.expr:type_name -> daml_lf_2.Expr
	16,  // 187: daml_lf_2.Expr.TyApp.types:type_name -> daml_lf_2.Type
	11,  // 188: daml_lf_2.Expr.Abs.param:type_name -> daml_lf_2.VarWithType
	19,  // 189: daml_lf_2.Expr.Abs.body:type_name -> daml_lf_2.Expr
	12,  // 190: daml_lf_2.Expr.TyAbs.param:type_name -> daml_lf_2.TypeVarWithKind
	19,  // 191: daml_lf_2.Expr.TyAbs.body:type_name -> daml_lf_2.Expr
	16,  // 192: daml_lf_2.Expr.Nil.type:type_name -> daml_lf_2.Type
	16,  // 193: daml_lf_2.Expr.Cons.type:type_name -> daml_lf_2.Type
	19,  // 194: daml_lf_2.Expr.Cons.front:type_name -> daml_lf_2.Expr
	19,  // 195: daml_lf_2.Expr.Cons.tail:type_name -> daml_lf_2.Expr
	16,  // 196: daml_lf_2.Expr.OptionalNone.type:type_name -> daml_lf_2.Type
	16,  // 197: daml_lf_2.Expr.OptionalSome.type:type_name -> daml_lf_2.Type
	19,  // 198: daml_lf_2.Expr.OptionalSome.value:type_name -> daml_lf_2.Expr
	16,  // 199: daml_lf_2.Expr.ToAny.type:type_name -> daml_lf_2.Type
	19,  // 200: daml_lf_2.Expr.ToAny.expr:type_name -> daml_lf_2.Expr
	16,  // 201: daml_lf_2.Expr.FromAny.type:type_name -> daml_lf_2.Type
	19,  // 202: daml_lf_2.Expr.FromAny.expr:type_name -> daml_lf_2.Expr
	16,  // 203: daml_lf_2.Expr.ToAnyException.type:type_name -> daml_lf_2.Type
	19,  // 204: daml_lf_2.Expr.ToAnyException.expr:type_name -> daml_lf_2.Expr
	16,  // 205: daml_lf_2.Expr.FromAnyException.type:type_name -> daml_lf_2.Type
	19,  // 206: daml_lf_2.Expr.FromAnyException.expr:type_name -> daml_lf_2.Expr
	16,  // 207: daml_lf_2.Expr.Throw.return_type:type_name -> daml_lf_2.Type
	16,  // 208: daml_lf_2.Expr.Throw.exception_type:type_name -> daml_lf_2.Type
	19,  // 209: daml_lf_2.Expr.Throw.exception_expr:type_name -> daml_lf_2.Expr
	7,   // 210: daml_lf_2.Expr.ToInterface.interface_type:type_name -> daml_lf_2.TypeConName
	7,   // 211: daml_lf_2.Expr.ToInterface.template_type:type_name -> daml_lf_2.TypeConName
	19,  // 212: daml_lf_2.Expr.ToInterface.template_expr:type_name -> daml_lf_2.Expr
	7,   // 213: daml_lf_2.Expr.FromInterface.interface_type:type_name -> daml_lf_2.TypeConName
	7,   // 214: daml_lf_2.Expr.FromInterface.template_type:type_name -> daml_lf_2.TypeConName
	19,  // 215: daml_lf_2.Expr.FromInterface.interface_expr:type_name -> daml_lf_2.Expr
	7,   // 216: daml_lf_2.Expr.CallInterface.interface_type:type_name -> daml_lf_2.TypeConName
	19,  // 217: daml_lf_2.Expr.CallInterface.interface_expr:type_name -> daml_lf_2.Expr
	7,   // 218: daml_lf_2.Expr.ViewInterface.interface:type_name -> daml_lf_2.TypeConName
	19,  // 219: daml_lf_2.Expr.ViewInterface.expr:type_name -> daml_lf_2.Expr
	7,   // 220: daml_lf_2.Expr.SignatoryInterface.interface:type_name -> daml_lf_2.TypeConName
	19,  // 221: daml_lf_2.Expr.SignatoryInterface.expr:type_name -> daml_lf_2.Expr
	7,   // 222: daml_lf_2.Expr.ObserverInterface.interface:type_name -> daml_lf_2.TypeConName
	19,  // 223: daml_lf_2.Expr.ObserverInterface.expr:type_name -> daml_lf_2.Expr
	7,   // 224: daml_lf_2.Expr.UnsafeFromInterface.interface_type:type_name -> daml_lf_2.TypeConName
	7,   // 225: daml_lf_2.Expr.UnsafeFromInterface.template_type:type_name -> daml_lf_2.TypeConName
	19,  // 226: daml_lf_2.Expr.UnsafeFromInterface.contract_id_expr:type_name -> daml_lf_2.Expr
	19,  // 227: daml_lf_2.Expr.UnsafeFromInterface.interface_expr:type_name -> daml_lf_2.Expr
	7,   // 228: daml_lf_2.Expr.ToRequiredInterface.required_interface:type_name -> daml_lf_2.TypeConName
	7,   // 229: daml_lf_2.Expr.ToRequiredInterface.requiring_interface:type_name -> daml_lf_2.TypeConName
	19,  // 230: daml_lf_2.Expr.ToRequiredInterface.expr:type_name -> daml_lf_2.Expr
	7,   // 231: daml_lf_2.Expr.FromRequiredInterface.required_interface:type_name -> daml_lf_2.TypeConName
	7,   // 232: daml_lf_2.Expr.FromRequiredInterface.requiring_interface:type_name -> daml_lf_2.TypeConName
	19,  // 233: daml_lf_2.Expr.FromRequiredInterface.expr:type_name -> daml_lf_2.Expr
	7,   // 234: daml_lf_2.Expr.UnsafeFromRequiredInterface.required_interface:type_name -> daml_lf_2.TypeConName
	7,   // 235: daml_lf_2.Expr.UnsafeFromRequiredInterface.requiring_interface:type_name -> daml_lf_2.TypeConName
	19,  // 236: daml_lf_2.Expr.UnsafeFromRequiredInterface.contract_id_expr:type_name -> daml_lf_2.Expr
	19,  // 237: daml_lf_2.Expr.UnsafeFromRequiredInterface.interface_expr:type_name -> daml_lf_2.Expr
	7,   // 238: daml_lf_2.Expr.InterfaceTemplateTypeRep.interface:type_name -> daml_lf_2.TypeConName
	19,  // 239: daml_lf_2.Expr.InterfaceTemplateTypeRep.expr:type_name -> daml_lf_2.Expr
	7,   // 240: daml_lf_2.Expr.ChoiceController.template:type_name -> daml_lf_2.TypeConName
	19,  // 241: daml_lf_2.Expr.ChoiceController.contract_expr:type_name -> daml_lf_2.Expr
	19,  // 242: daml_lf_2.Expr.ChoiceController.choice_arg_expr:type_name -> daml_lf_2.Expr
	7,   // 243: daml_lf_2.Expr.ChoiceObserver.template:type_name -> daml_lf_2.TypeConName
	19,  // 244: daml_lf_2.Expr.ChoiceObserver.contract_expr:type_name -> daml_lf_2.Expr
	19,  // 245: daml_lf_2.Expr.ChoiceObserver.choice_arg_expr:type_name -> daml_lf_2.Expr
	16,  // 246: daml_lf_2.Expr.Experimental.type:type_name -> daml_lf_2.Type
	7,   // 247: daml_lf_2.CaseAlt.Variant.con:type_name -> daml_lf_2.TypeConName
	7,   // 248: daml_lf_2.CaseAlt.Enum.con:type_name -> daml_lf_2.TypeConName
	7,   // 249: daml_lf_2.Update.Create.template:type_name -> daml_lf_2.TypeConName
	19,  // 250: daml_lf_2.Update.Create.expr:type_name -> daml_lf_2.Expr
	7,   // 251: daml_lf_2.Update.CreateInterface.interface:type_name -> daml_lf_2.TypeConName
	19,  // 252: daml_lf_2.Update.CreateInterface.expr:type_name -> daml_lf_2.Expr
	7,   // 253: daml_lf_2.Update.Exercise.template:type_name -> daml_lf_2.TypeConName
	19,  // 254: daml_lf_2.Update.Exercise.cid:type_name -> daml_lf_2.Expr
	19,  // 255: daml_lf_2.Update.Exercise.arg:type_name -> daml_lf_2.Expr
	7,   // 256: daml_lf_2.Update.SoftExercise.template:type_name -> daml_lf_2.TypeConName
	19,  // 257: daml_lf_2.Update.SoftExercise.cid:type_name -> daml_lf_2.Expr
	19,  // 258: daml_lf_2.Update.SoftExercise.arg:type_name -> daml_lf_2.Expr
	7,   // 259: daml_lf_2.Update.DynamicExercise.template:type_name -> daml_lf_2.TypeConName
	19,  // 260: daml_lf_2.Update.DynamicExercise.cid:type_name -> daml_lf_2.Expr
	19,  // 261: daml_lf_2.Update.DynamicExercise.arg:type_name -> daml_lf_2.Expr
	7,   // 262: daml_lf_2.Update.ExerciseInterface.interface:type_name -> daml_lf_2.TypeConName
	19,  // 263: daml_lf_2.Update.ExerciseInterface.cid:type_name -> daml_lf_2.Expr
	19,  // 264: daml_lf_2.Update.ExerciseInterface.arg:type_name -> daml_lf_2.Expr
	19,  // 265: daml_lf_2.Update.ExerciseInterface.guard:type_name -> daml_lf_2.Expr
	7,   // 266: daml_lf_2.Update.ExerciseByKey.template:type_name -> daml_lf_2.TypeConName
	19,  // 267: daml_lf_2.Update.ExerciseByKey.key:type_name -> daml_lf_2.Expr
	19,  // 268: daml_lf_2.Update.ExerciseByKey.arg:type_name -> daml_lf_2.Expr
	7,   // 269: daml_lf_2.Update.Fetch.template:type_name -> daml_lf_2.TypeConName
	19,  // 270: daml_lf_2.Update.Fetch.cid:type_name -> daml_lf_2.Expr
	7,   // 271: daml_lf_2.Update.SoftFetch.template:type_name -> daml_lf_2.TypeConName
	19,  // 272: daml_lf_2.Update.SoftFetch.cid:type_name -> daml_lf_2.Expr
	7,   // 273: daml_lf_2.Update.FetchInterface.interface:type_name -> daml_lf_2.TypeConName
	19,  // 274: daml_lf_2.Update.FetchInterface.cid:type_name -> daml_lf_2.Expr
	16,  // 275: daml_lf_2.Update.EmbedExpr.type:type_name -> daml_lf_2.Type
	19,  // 276: daml_lf_2.Update.EmbedExpr.body:type_name -> daml_lf_2.Expr
	7,   // 277: daml_lf_2.Update.RetrieveByKey.template:type_name -> daml_lf_2.TypeConName
	19,  // 278: daml_lf_2.Update.RetrieveByKey.key:type_name -> daml_lf_2.Expr
	16,  // 279: daml_lf_2.Update.TryCatch.return_type:type_name -> daml_lf_2.Type
	19,  // 280: daml_lf_2.Update.TryCatch.try_expr:type_name -> daml_lf_2.Expr
	19,  // 281: daml_lf_2.Update.TryCatch.catch_expr:type_name -> daml_lf_2.Expr
	19,  // 282: daml_lf_2.Scenario.Commit.party:type_name -> daml_lf_2.Expr
	19,  // 283: daml_lf_2.Scenario.Commit.expr:type_name -> daml_lf_2.Expr
	16,  // 284: daml_lf_2.Scenario.Commit.ret_type:type_name -> daml_lf_2.Type
	16,  // 285: daml_lf_2.Scenario.EmbedExpr.type:type_name -> daml_lf_2.Type
	19,  // 286: daml_lf_2.Scenario.EmbedExpr.body:type_name -> daml_lf_2.Expr
	19,  // 287: daml_lf_2.InterfaceInstanceBody.InterfaceInstanceMethod.value:type_name -> daml_lf_2.Expr
	16,  // 288: daml_lf_2.DefTemplate.DefKey.type:type_name -> daml_lf_2.Type
	19,  // 289: daml_lf_2.DefTemplate.DefKey.key_expr:type_name -> daml_lf_2.Expr
	19,  // 290: daml_lf_2.DefTemplate.DefKey.maintainers:type_name -> daml_lf_2.Expr
	7,   // 291: daml_lf_2.DefTemplate.Implements.interface:type_name -> daml_lf_2.TypeConName
	27,  // 292: daml_lf_2.DefTemplate.Implements.body:type_name -> daml_lf_2.InterfaceInstanceBody
	18,  // 293: daml_lf_2.DefTemplate.Implements.location:type_name -> daml_lf_2.Location
	10,  // 294: daml_lf_2.DefDataType.Fields.fields:type_name -> daml_lf_2.FieldWithType
	16,  // 295: daml_lf_2.DefValue.NameWithType.type:type_name -> daml_lf_2.Type
	296, // [296:296] is the sub-list for method output_type
	296, // [296:296] is the sub-list for method input_type
	296, // [296:296] is the sub-list for extension type_name
	296, // [296:296] is the sub-list for extension extendee
	0,   // [0:296] is the sub-list for field type_name
}

func init() { file_com_daml_daml_lf_2_1_daml_lf2_proto_init() }
func file_com_daml_daml_lf_2_1_daml_lf2_proto_init() {
	if File_com_daml_daml_lf_2_1_daml_lf2_proto != nil {
		return
	}
	file_com_daml_daml_lf_2_1_daml_lf2_proto_msgTypes[1].OneofWrappers = []any{
		(*PackageRef_Self)(nil),
		(*PackageRef_PackageIdInternedStr)(nil),
	}
	file_com_daml_daml_lf_2_1_daml_lf2_proto_msgTypes[11].OneofWrappers = []any{
		(*Kind_Star)(nil),
		(*Kind_Arrow_)(nil),
		(*Kind_Nat)(nil),
	}
	file_com_daml_daml_lf_2_1_daml_lf2_proto_msgTypes[12].OneofWrappers = []any{
		(*Type_Var_)(nil),
		(*Type_Con_)(nil),
		(*Type_Builtin_)(nil),
		(*Type_Forall_)(nil),
		(*Type_Struct_)(nil),
		(*Type_Nat)(nil),
		(*Type_Syn_)(nil),
		(*Type_Interned)(nil),
	}
	file_com_daml_daml_lf_2_1_daml_lf2_proto_msgTypes[13].OneofWrappers = []any{
		(*BuiltinLit_Int64)(nil),
		(*BuiltinLit_Timestamp)(nil),
		(*BuiltinLit_NumericInternedStr)(nil),
		(*BuiltinLit_TextInternedStr)(nil),
		(*BuiltinLit_Date)(nil),
		(*BuiltinLit_RoundingMode_)(nil),
	}
	file_com_daml_daml_lf_2_1_daml_lf2_proto_msgTypes[15].OneofWrappers = []any{
		(*Expr_VarInternedStr)(nil),
		(*Expr_Val)(nil),
		(*Expr_Builtin)(nil),
		(*Expr_BuiltinCon)(nil),
		(*Expr_BuiltinLit)(nil),
		(*Expr_RecCon_)(nil),
		(*Expr_RecProj_)(nil),
		(*Expr_RecUpd_)(nil),
		(*Expr_VariantCon_)(nil),
		(*Expr_EnumCon_)(nil),
		(*Expr_StructCon_)(nil),
		(*Expr_StructProj_)(nil),
		(*Expr_StructUpd_)(nil),
		(*Expr_App_)(nil),
		(*Expr_TyApp_)(nil),
		(*Expr_Abs_)(nil),
		(*Expr_TyAbs_)(nil),
		(*Expr_Case)(nil),
		(*Expr_Let)(nil),
		(*Expr_Nil_)(nil),
		(*Expr_Cons_)(nil),
		(*Expr_Update)(nil),
		(*Expr_OptionalNone_)(nil),
		(*Expr_OptionalSome_)(nil),
		(*Expr_ToAny_)(nil),
		(*Expr_FromAny_)(nil),
		(*Expr_TypeRep)(nil),
		(*Expr_ToAnyException_)(nil),
		(*Expr_FromAnyException_)(nil),
		(*Expr_Throw_)(nil),
		(*Expr_ToInterface_)(nil),
		(*Expr_FromInterface_)(nil),
		(*Expr_CallInterface_)(nil),
		(*Expr_SignatoryInterface_)(nil),
		(*Expr_ObserverInterface_)(nil),
		(*Expr_ViewInterface_)(nil),
		(*Expr_UnsafeFromInterface_)(nil),
		(*Expr_InterfaceTemplateTypeRep_)(nil),
		(*Expr_ToRequiredInterface_)(nil),
		(*Expr_FromRequiredInterface_)(nil),
		(*Expr_UnsafeFromRequiredInterface_)(nil),
		(*Expr_ChoiceController_)(nil),
		(*Expr_ChoiceObserver_)(nil),
		(*Expr_Scenario)(nil),
		(*Expr_Experimental_)(nil),
	}
	file_com_daml_daml_lf_2_1_daml_lf2_proto_msgTypes[16].OneofWrappers = []any{
		(*CaseAlt_Default)(nil),
		(*CaseAlt_Variant_)(nil),
		(*CaseAlt_BuiltinCon)(nil),
		(*CaseAlt_Nil)(nil),
		(*CaseAlt_Cons_)(nil),
		(*CaseAlt_OptionalNone)(nil),
		(*CaseAlt_OptionalSome_)(nil),
		(*CaseAlt_Enum_)(nil),
	}
	file_com_daml_daml_lf_2_1_daml_lf2_proto_msgTypes[20].OneofWrappers = []any{
		(*Update_Pure)(nil),
		(*Update_Block)(nil),
		(*Update_Create_)(nil),
		(*Update_Exercise_)(nil),
		(*Update_ExerciseByKey_)(nil),
		(*Update_Fetch_)(nil),
		(*Update_GetTime)(nil),
		(*Update_LookupByKey)(nil),
		(*Update_FetchByKey)(nil),
		(*Update_EmbedExpr_)(nil),
		(*Update_TryCatch_)(nil),
		(*Update_CreateInterface_)(nil),
		(*Update_ExerciseInterface_)(nil),
		(*Update_FetchInterface_)(nil),
		(*Update_DynamicExercise_)(nil),
		(*Update_SoftFetch_)(nil),
		(*Update_SoftExercise_)(nil),
	}
	file_com_daml_daml_lf_2_1_daml_lf2_proto_msgTypes[21].OneofWrappers = []any{
		(*Scenario_Pure)(nil),
		(*Scenario_Block)(nil),
		(*Scenario_Commit_)(nil),
		(*Scenario_MustFailAt)(nil),
		(*Scenario_Pass)(nil),
		(*Scenario_GetTime)(nil),
		(*Scenario_GetParty)(nil),
		(*Scenario_EmbedExpr_)(nil),
	}
	file_com_daml_daml_lf_2_1_daml_lf2_proto_msgTypes[28].OneofWrappers = []any{
		(*DefDataType_Record)(nil),
		(*DefDataType_Variant)(nil),
		(*DefDataType_Enum)(nil),
		(*DefDataType_Interface)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_com_daml_daml_lf_2_1_daml_lf2_proto_rawDesc,
			NumEnums:      4,
			NumMessages:   105,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_com_daml_daml_lf_2_1_daml_lf2_proto_goTypes,
		DependencyIndexes: file_com_daml_daml_lf_2_1_daml_lf2_proto_depIdxs,
		EnumInfos:         file_com_daml_daml_lf_2_1_daml_lf2_proto_enumTypes,
		MessageInfos:      file_com_daml_daml_lf_2_1_daml_lf2_proto_msgTypes,
	}.Build()
	File_com_daml_daml_lf_2_1_daml_lf2_proto = out.File
	file_com_daml_daml_lf_2_1_daml_lf2_proto_rawDesc = nil
	file_com_daml_daml_lf_2_1_daml_lf2_proto_goTypes = nil
	file_com_daml_daml_lf_2_1_daml_lf2_proto_depIdxs = nil
}
