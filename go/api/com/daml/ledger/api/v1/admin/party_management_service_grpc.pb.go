// Copyright (c) 2017-2025 Digital Asset (Switzerland) GmbH and/or its affiliates. All rights reserved.
// SPDX-License-Identifier: Apache-2.0
// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.27.2
// source: com/daml/ledger/api/v1/admin/party_management_service.proto

package admin

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	PartyManagementService_GetParticipantId_FullMethodName              = "/com.daml.ledger.api.v1.admin.PartyManagementService/GetParticipantId"
	PartyManagementService_GetParties_FullMethodName                    = "/com.daml.ledger.api.v1.admin.PartyManagementService/GetParties"
	PartyManagementService_ListKnownParties_FullMethodName              = "/com.daml.ledger.api.v1.admin.PartyManagementService/ListKnownParties"
	PartyManagementService_AllocateParty_FullMethodName                 = "/com.daml.ledger.api.v1.admin.PartyManagementService/AllocateParty"
	PartyManagementService_UpdatePartyDetails_FullMethodName            = "/com.daml.ledger.api.v1.admin.PartyManagementService/UpdatePartyDetails"
	PartyManagementService_UpdatePartyIdentityProviderId_FullMethodName = "/com.daml.ledger.api.v1.admin.PartyManagementService/UpdatePartyIdentityProviderId"
)

// PartyManagementServiceClient is the client API for PartyManagementService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type PartyManagementServiceClient interface {
	GetParticipantId(ctx context.Context, in *GetParticipantIdRequest, opts ...grpc.CallOption) (*GetParticipantIdResponse, error)
	GetParties(ctx context.Context, in *GetPartiesRequest, opts ...grpc.CallOption) (*GetPartiesResponse, error)
	ListKnownParties(ctx context.Context, in *ListKnownPartiesRequest, opts ...grpc.CallOption) (*ListKnownPartiesResponse, error)
	AllocateParty(ctx context.Context, in *AllocatePartyRequest, opts ...grpc.CallOption) (*AllocatePartyResponse, error)
	UpdatePartyDetails(ctx context.Context, in *UpdatePartyDetailsRequest, opts ...grpc.CallOption) (*UpdatePartyDetailsResponse, error)
	UpdatePartyIdentityProviderId(ctx context.Context, in *UpdatePartyIdentityProviderRequest, opts ...grpc.CallOption) (*UpdatePartyIdentityProviderResponse, error)
}

type partyManagementServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewPartyManagementServiceClient(cc grpc.ClientConnInterface) PartyManagementServiceClient {
	return &partyManagementServiceClient{cc}
}

func (c *partyManagementServiceClient) GetParticipantId(ctx context.Context, in *GetParticipantIdRequest, opts ...grpc.CallOption) (*GetParticipantIdResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetParticipantIdResponse)
	err := c.cc.Invoke(ctx, PartyManagementService_GetParticipantId_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *partyManagementServiceClient) GetParties(ctx context.Context, in *GetPartiesRequest, opts ...grpc.CallOption) (*GetPartiesResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetPartiesResponse)
	err := c.cc.Invoke(ctx, PartyManagementService_GetParties_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *partyManagementServiceClient) ListKnownParties(ctx context.Context, in *ListKnownPartiesRequest, opts ...grpc.CallOption) (*ListKnownPartiesResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListKnownPartiesResponse)
	err := c.cc.Invoke(ctx, PartyManagementService_ListKnownParties_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *partyManagementServiceClient) AllocateParty(ctx context.Context, in *AllocatePartyRequest, opts ...grpc.CallOption) (*AllocatePartyResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AllocatePartyResponse)
	err := c.cc.Invoke(ctx, PartyManagementService_AllocateParty_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *partyManagementServiceClient) UpdatePartyDetails(ctx context.Context, in *UpdatePartyDetailsRequest, opts ...grpc.CallOption) (*UpdatePartyDetailsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdatePartyDetailsResponse)
	err := c.cc.Invoke(ctx, PartyManagementService_UpdatePartyDetails_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *partyManagementServiceClient) UpdatePartyIdentityProviderId(ctx context.Context, in *UpdatePartyIdentityProviderRequest, opts ...grpc.CallOption) (*UpdatePartyIdentityProviderResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdatePartyIdentityProviderResponse)
	err := c.cc.Invoke(ctx, PartyManagementService_UpdatePartyIdentityProviderId_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PartyManagementServiceServer is the server API for PartyManagementService service.
// All implementations must embed UnimplementedPartyManagementServiceServer
// for forward compatibility.
type PartyManagementServiceServer interface {
	GetParticipantId(context.Context, *GetParticipantIdRequest) (*GetParticipantIdResponse, error)
	GetParties(context.Context, *GetPartiesRequest) (*GetPartiesResponse, error)
	ListKnownParties(context.Context, *ListKnownPartiesRequest) (*ListKnownPartiesResponse, error)
	AllocateParty(context.Context, *AllocatePartyRequest) (*AllocatePartyResponse, error)
	UpdatePartyDetails(context.Context, *UpdatePartyDetailsRequest) (*UpdatePartyDetailsResponse, error)
	UpdatePartyIdentityProviderId(context.Context, *UpdatePartyIdentityProviderRequest) (*UpdatePartyIdentityProviderResponse, error)
	mustEmbedUnimplementedPartyManagementServiceServer()
}

// UnimplementedPartyManagementServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedPartyManagementServiceServer struct{}

func (UnimplementedPartyManagementServiceServer) GetParticipantId(context.Context, *GetParticipantIdRequest) (*GetParticipantIdResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetParticipantId not implemented")
}
func (UnimplementedPartyManagementServiceServer) GetParties(context.Context, *GetPartiesRequest) (*GetPartiesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetParties not implemented")
}
func (UnimplementedPartyManagementServiceServer) ListKnownParties(context.Context, *ListKnownPartiesRequest) (*ListKnownPartiesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListKnownParties not implemented")
}
func (UnimplementedPartyManagementServiceServer) AllocateParty(context.Context, *AllocatePartyRequest) (*AllocatePartyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AllocateParty not implemented")
}
func (UnimplementedPartyManagementServiceServer) UpdatePartyDetails(context.Context, *UpdatePartyDetailsRequest) (*UpdatePartyDetailsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdatePartyDetails not implemented")
}
func (UnimplementedPartyManagementServiceServer) UpdatePartyIdentityProviderId(context.Context, *UpdatePartyIdentityProviderRequest) (*UpdatePartyIdentityProviderResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdatePartyIdentityProviderId not implemented")
}
func (UnimplementedPartyManagementServiceServer) mustEmbedUnimplementedPartyManagementServiceServer() {
}
func (UnimplementedPartyManagementServiceServer) testEmbeddedByValue() {}

// UnsafePartyManagementServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to PartyManagementServiceServer will
// result in compilation errors.
type UnsafePartyManagementServiceServer interface {
	mustEmbedUnimplementedPartyManagementServiceServer()
}

func RegisterPartyManagementServiceServer(s grpc.ServiceRegistrar, srv PartyManagementServiceServer) {
	// If the following call pancis, it indicates UnimplementedPartyManagementServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&PartyManagementService_ServiceDesc, srv)
}

func _PartyManagementService_GetParticipantId_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetParticipantIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PartyManagementServiceServer).GetParticipantId(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PartyManagementService_GetParticipantId_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PartyManagementServiceServer).GetParticipantId(ctx, req.(*GetParticipantIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PartyManagementService_GetParties_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetPartiesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PartyManagementServiceServer).GetParties(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PartyManagementService_GetParties_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PartyManagementServiceServer).GetParties(ctx, req.(*GetPartiesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PartyManagementService_ListKnownParties_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListKnownPartiesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PartyManagementServiceServer).ListKnownParties(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PartyManagementService_ListKnownParties_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PartyManagementServiceServer).ListKnownParties(ctx, req.(*ListKnownPartiesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PartyManagementService_AllocateParty_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AllocatePartyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PartyManagementServiceServer).AllocateParty(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PartyManagementService_AllocateParty_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PartyManagementServiceServer).AllocateParty(ctx, req.(*AllocatePartyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PartyManagementService_UpdatePartyDetails_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdatePartyDetailsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PartyManagementServiceServer).UpdatePartyDetails(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PartyManagementService_UpdatePartyDetails_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PartyManagementServiceServer).UpdatePartyDetails(ctx, req.(*UpdatePartyDetailsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PartyManagementService_UpdatePartyIdentityProviderId_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdatePartyIdentityProviderRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PartyManagementServiceServer).UpdatePartyIdentityProviderId(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PartyManagementService_UpdatePartyIdentityProviderId_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PartyManagementServiceServer).UpdatePartyIdentityProviderId(ctx, req.(*UpdatePartyIdentityProviderRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// PartyManagementService_ServiceDesc is the grpc.ServiceDesc for PartyManagementService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var PartyManagementService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "com.daml.ledger.api.v1.admin.PartyManagementService",
	HandlerType: (*PartyManagementServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetParticipantId",
			Handler:    _PartyManagementService_GetParticipantId_Handler,
		},
		{
			MethodName: "GetParties",
			Handler:    _PartyManagementService_GetParties_Handler,
		},
		{
			MethodName: "ListKnownParties",
			Handler:    _PartyManagementService_ListKnownParties_Handler,
		},
		{
			MethodName: "AllocateParty",
			Handler:    _PartyManagementService_AllocateParty_Handler,
		},
		{
			MethodName: "UpdatePartyDetails",
			Handler:    _PartyManagementService_UpdatePartyDetails_Handler,
		},
		{
			MethodName: "UpdatePartyIdentityProviderId",
			Handler:    _PartyManagementService_UpdatePartyIdentityProviderId_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "com/daml/ledger/api/v1/admin/party_management_service.proto",
}
