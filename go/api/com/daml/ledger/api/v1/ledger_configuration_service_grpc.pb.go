// Copyright (c) 2017-2025 Digital Asset (Switzerland) GmbH and/or its affiliates. All rights reserved.
// SPDX-License-Identifier: Apache-2.0
// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v6.30.0
// source: com/daml/ledger/api/v1/ledger_configuration_service.proto

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	LedgerConfigurationService_GetLedgerConfiguration_FullMethodName = "/com.daml.ledger.api.v1.LedgerConfigurationService/GetLedgerConfiguration"
)

// LedgerConfigurationServiceClient is the client API for LedgerConfigurationService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type LedgerConfigurationServiceClient interface {
	GetLedgerConfiguration(ctx context.Context, in *GetLedgerConfigurationRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[GetLedgerConfigurationResponse], error)
}

type ledgerConfigurationServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewLedgerConfigurationServiceClient(cc grpc.ClientConnInterface) LedgerConfigurationServiceClient {
	return &ledgerConfigurationServiceClient{cc}
}

func (c *ledgerConfigurationServiceClient) GetLedgerConfiguration(ctx context.Context, in *GetLedgerConfigurationRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[GetLedgerConfigurationResponse], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &LedgerConfigurationService_ServiceDesc.Streams[0], LedgerConfigurationService_GetLedgerConfiguration_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[GetLedgerConfigurationRequest, GetLedgerConfigurationResponse]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type LedgerConfigurationService_GetLedgerConfigurationClient = grpc.ServerStreamingClient[GetLedgerConfigurationResponse]

// LedgerConfigurationServiceServer is the server API for LedgerConfigurationService service.
// All implementations must embed UnimplementedLedgerConfigurationServiceServer
// for forward compatibility.
type LedgerConfigurationServiceServer interface {
	GetLedgerConfiguration(*GetLedgerConfigurationRequest, grpc.ServerStreamingServer[GetLedgerConfigurationResponse]) error
	mustEmbedUnimplementedLedgerConfigurationServiceServer()
}

// UnimplementedLedgerConfigurationServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedLedgerConfigurationServiceServer struct{}

func (UnimplementedLedgerConfigurationServiceServer) GetLedgerConfiguration(*GetLedgerConfigurationRequest, grpc.ServerStreamingServer[GetLedgerConfigurationResponse]) error {
	return status.Errorf(codes.Unimplemented, "method GetLedgerConfiguration not implemented")
}
func (UnimplementedLedgerConfigurationServiceServer) mustEmbedUnimplementedLedgerConfigurationServiceServer() {
}
func (UnimplementedLedgerConfigurationServiceServer) testEmbeddedByValue() {}

// UnsafeLedgerConfigurationServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to LedgerConfigurationServiceServer will
// result in compilation errors.
type UnsafeLedgerConfigurationServiceServer interface {
	mustEmbedUnimplementedLedgerConfigurationServiceServer()
}

func RegisterLedgerConfigurationServiceServer(s grpc.ServiceRegistrar, srv LedgerConfigurationServiceServer) {
	// If the following call pancis, it indicates UnimplementedLedgerConfigurationServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&LedgerConfigurationService_ServiceDesc, srv)
}

func _LedgerConfigurationService_GetLedgerConfiguration_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(GetLedgerConfigurationRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(LedgerConfigurationServiceServer).GetLedgerConfiguration(m, &grpc.GenericServerStream[GetLedgerConfigurationRequest, GetLedgerConfigurationResponse]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type LedgerConfigurationService_GetLedgerConfigurationServer = grpc.ServerStreamingServer[GetLedgerConfigurationResponse]

// LedgerConfigurationService_ServiceDesc is the grpc.ServiceDesc for LedgerConfigurationService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var LedgerConfigurationService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "com.daml.ledger.api.v1.LedgerConfigurationService",
	HandlerType: (*LedgerConfigurationServiceServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "GetLedgerConfiguration",
			Handler:       _LedgerConfigurationService_GetLedgerConfiguration_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "com/daml/ledger/api/v1/ledger_configuration_service.proto",
}
