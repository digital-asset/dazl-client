// Copyright (c) 2017-2025 Digital Asset (Switzerland) GmbH and/or its affiliates. All rights reserved.
// SPDX-License-Identifier: Apache-2.0
// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.35.2
// 	protoc        v5.27.2
// source: com/daml/ledger/api/v2/interactive_submission_data.proto

package v2

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type PreparedTransaction struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Transaction *DamlTransaction `protobuf:"bytes,1,opt,name=transaction,proto3" json:"transaction,omitempty"`
	Metadata    *Metadata        `protobuf:"bytes,2,opt,name=metadata,proto3" json:"metadata,omitempty"`
}

func (x *PreparedTransaction) Reset() {
	*x = PreparedTransaction{}
	mi := &file_com_daml_ledger_api_v2_interactive_submission_data_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PreparedTransaction) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PreparedTransaction) ProtoMessage() {}

func (x *PreparedTransaction) ProtoReflect() protoreflect.Message {
	mi := &file_com_daml_ledger_api_v2_interactive_submission_data_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PreparedTransaction.ProtoReflect.Descriptor instead.
func (*PreparedTransaction) Descriptor() ([]byte, []int) {
	return file_com_daml_ledger_api_v2_interactive_submission_data_proto_rawDescGZIP(), []int{0}
}

func (x *PreparedTransaction) GetTransaction() *DamlTransaction {
	if x != nil {
		return x.Transaction
	}
	return nil
}

func (x *PreparedTransaction) GetMetadata() *Metadata {
	if x != nil {
		return x.Metadata
	}
	return nil
}

type Metadata struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SubmitterInfo           *Metadata_SubmitterInfo                `protobuf:"bytes,1,opt,name=submitter_info,json=submitterInfo,proto3" json:"submitter_info,omitempty"`
	SubmissionSeed          []byte                                 `protobuf:"bytes,2,opt,name=submission_seed,json=submissionSeed,proto3" json:"submission_seed,omitempty"`
	SubmissionTime          uint64                                 `protobuf:"varint,3,opt,name=submission_time,json=submissionTime,proto3" json:"submission_time,omitempty"`
	UsedPackages            []string                               `protobuf:"bytes,4,rep,name=used_packages,json=usedPackages,proto3" json:"used_packages,omitempty"`
	NodeSeeds               []*Metadata_NodeSeed                   `protobuf:"bytes,5,rep,name=node_seeds,json=nodeSeeds,proto3" json:"node_seeds,omitempty"`
	GlobalKeyMapping        []*Metadata_GlobalKeyMappingEntry      `protobuf:"bytes,6,rep,name=global_key_mapping,json=globalKeyMapping,proto3" json:"global_key_mapping,omitempty"`
	DisclosedEvents         []*Metadata_ProcessedDisclosedContract `protobuf:"bytes,7,rep,name=disclosed_events,json=disclosedEvents,proto3" json:"disclosed_events,omitempty"`
	LedgerEffectiveTime     *uint64                                `protobuf:"varint,8,opt,name=ledger_effective_time,json=ledgerEffectiveTime,proto3,oneof" json:"ledger_effective_time,omitempty"`
	WorkflowId              *string                                `protobuf:"bytes,9,opt,name=workflow_id,json=workflowId,proto3,oneof" json:"workflow_id,omitempty"`
	InterpretationTimeNanos uint64                                 `protobuf:"varint,10,opt,name=interpretation_time_nanos,json=interpretationTimeNanos,proto3" json:"interpretation_time_nanos,omitempty"`
	DomainId                string                                 `protobuf:"bytes,11,opt,name=domain_id,json=domainId,proto3" json:"domain_id,omitempty"`
	MediatorGroup           uint32                                 `protobuf:"varint,12,opt,name=mediator_group,json=mediatorGroup,proto3" json:"mediator_group,omitempty"`
	TransactionId           string                                 `protobuf:"bytes,13,opt,name=transaction_id,json=transactionId,proto3" json:"transaction_id,omitempty"`
}

func (x *Metadata) Reset() {
	*x = Metadata{}
	mi := &file_com_daml_ledger_api_v2_interactive_submission_data_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Metadata) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Metadata) ProtoMessage() {}

func (x *Metadata) ProtoReflect() protoreflect.Message {
	mi := &file_com_daml_ledger_api_v2_interactive_submission_data_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Metadata.ProtoReflect.Descriptor instead.
func (*Metadata) Descriptor() ([]byte, []int) {
	return file_com_daml_ledger_api_v2_interactive_submission_data_proto_rawDescGZIP(), []int{1}
}

func (x *Metadata) GetSubmitterInfo() *Metadata_SubmitterInfo {
	if x != nil {
		return x.SubmitterInfo
	}
	return nil
}

func (x *Metadata) GetSubmissionSeed() []byte {
	if x != nil {
		return x.SubmissionSeed
	}
	return nil
}

func (x *Metadata) GetSubmissionTime() uint64 {
	if x != nil {
		return x.SubmissionTime
	}
	return 0
}

func (x *Metadata) GetUsedPackages() []string {
	if x != nil {
		return x.UsedPackages
	}
	return nil
}

func (x *Metadata) GetNodeSeeds() []*Metadata_NodeSeed {
	if x != nil {
		return x.NodeSeeds
	}
	return nil
}

func (x *Metadata) GetGlobalKeyMapping() []*Metadata_GlobalKeyMappingEntry {
	if x != nil {
		return x.GlobalKeyMapping
	}
	return nil
}

func (x *Metadata) GetDisclosedEvents() []*Metadata_ProcessedDisclosedContract {
	if x != nil {
		return x.DisclosedEvents
	}
	return nil
}

func (x *Metadata) GetLedgerEffectiveTime() uint64 {
	if x != nil && x.LedgerEffectiveTime != nil {
		return *x.LedgerEffectiveTime
	}
	return 0
}

func (x *Metadata) GetWorkflowId() string {
	if x != nil && x.WorkflowId != nil {
		return *x.WorkflowId
	}
	return ""
}

func (x *Metadata) GetInterpretationTimeNanos() uint64 {
	if x != nil {
		return x.InterpretationTimeNanos
	}
	return 0
}

func (x *Metadata) GetDomainId() string {
	if x != nil {
		return x.DomainId
	}
	return ""
}

func (x *Metadata) GetMediatorGroup() uint32 {
	if x != nil {
		return x.MediatorGroup
	}
	return 0
}

func (x *Metadata) GetTransactionId() string {
	if x != nil {
		return x.TransactionId
	}
	return ""
}

type DamlTransaction struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Version string   `protobuf:"bytes,1,opt,name=version,proto3" json:"version,omitempty"`
	Roots   []string `protobuf:"bytes,2,rep,name=roots,proto3" json:"roots,omitempty"`
	Nodes   []*Node  `protobuf:"bytes,3,rep,name=nodes,proto3" json:"nodes,omitempty"`
}

func (x *DamlTransaction) Reset() {
	*x = DamlTransaction{}
	mi := &file_com_daml_ledger_api_v2_interactive_submission_data_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DamlTransaction) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DamlTransaction) ProtoMessage() {}

func (x *DamlTransaction) ProtoReflect() protoreflect.Message {
	mi := &file_com_daml_ledger_api_v2_interactive_submission_data_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DamlTransaction.ProtoReflect.Descriptor instead.
func (*DamlTransaction) Descriptor() ([]byte, []int) {
	return file_com_daml_ledger_api_v2_interactive_submission_data_proto_rawDescGZIP(), []int{2}
}

func (x *DamlTransaction) GetVersion() string {
	if x != nil {
		return x.Version
	}
	return ""
}

func (x *DamlTransaction) GetRoots() []string {
	if x != nil {
		return x.Roots
	}
	return nil
}

func (x *DamlTransaction) GetNodes() []*Node {
	if x != nil {
		return x.Nodes
	}
	return nil
}

type Node struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Version *string `protobuf:"bytes,1,opt,name=version,proto3,oneof" json:"version,omitempty"`
	NodeId  string  `protobuf:"bytes,2,opt,name=node_id,json=nodeId,proto3" json:"node_id,omitempty"`
	// Types that are assignable to NodeType:
	//
	//	*Node_Create
	//	*Node_Fetch_
	//	*Node_Exercise_
	//	*Node_Rollback_
	//	*Node_LookupByKey_
	NodeType isNode_NodeType `protobuf_oneof:"node_type"`
}

func (x *Node) Reset() {
	*x = Node{}
	mi := &file_com_daml_ledger_api_v2_interactive_submission_data_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Node) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Node) ProtoMessage() {}

func (x *Node) ProtoReflect() protoreflect.Message {
	mi := &file_com_daml_ledger_api_v2_interactive_submission_data_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Node.ProtoReflect.Descriptor instead.
func (*Node) Descriptor() ([]byte, []int) {
	return file_com_daml_ledger_api_v2_interactive_submission_data_proto_rawDescGZIP(), []int{3}
}

func (x *Node) GetVersion() string {
	if x != nil && x.Version != nil {
		return *x.Version
	}
	return ""
}

func (x *Node) GetNodeId() string {
	if x != nil {
		return x.NodeId
	}
	return ""
}

func (m *Node) GetNodeType() isNode_NodeType {
	if m != nil {
		return m.NodeType
	}
	return nil
}

func (x *Node) GetCreate() *Create {
	if x, ok := x.GetNodeType().(*Node_Create); ok {
		return x.Create
	}
	return nil
}

func (x *Node) GetFetch() *Node_Fetch {
	if x, ok := x.GetNodeType().(*Node_Fetch_); ok {
		return x.Fetch
	}
	return nil
}

func (x *Node) GetExercise() *Node_Exercise {
	if x, ok := x.GetNodeType().(*Node_Exercise_); ok {
		return x.Exercise
	}
	return nil
}

func (x *Node) GetRollback() *Node_Rollback {
	if x, ok := x.GetNodeType().(*Node_Rollback_); ok {
		return x.Rollback
	}
	return nil
}

func (x *Node) GetLookupByKey() *Node_LookupByKey {
	if x, ok := x.GetNodeType().(*Node_LookupByKey_); ok {
		return x.LookupByKey
	}
	return nil
}

type isNode_NodeType interface {
	isNode_NodeType()
}

type Node_Create struct {
	Create *Create `protobuf:"bytes,3,opt,name=create,proto3,oneof"`
}

type Node_Fetch_ struct {
	Fetch *Node_Fetch `protobuf:"bytes,4,opt,name=fetch,proto3,oneof"`
}

type Node_Exercise_ struct {
	Exercise *Node_Exercise `protobuf:"bytes,5,opt,name=exercise,proto3,oneof"`
}

type Node_Rollback_ struct {
	Rollback *Node_Rollback `protobuf:"bytes,6,opt,name=rollback,proto3,oneof"`
}

type Node_LookupByKey_ struct {
	LookupByKey *Node_LookupByKey `protobuf:"bytes,7,opt,name=lookup_by_key,json=lookupByKey,proto3,oneof"`
}

func (*Node_Create) isNode_NodeType() {}

func (*Node_Fetch_) isNode_NodeType() {}

func (*Node_Exercise_) isNode_NodeType() {}

func (*Node_Rollback_) isNode_NodeType() {}

func (*Node_LookupByKey_) isNode_NodeType() {}

type Create struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ContractId               string                    `protobuf:"bytes,1,opt,name=contract_id,json=contractId,proto3" json:"contract_id,omitempty"`
	PackageName              string                    `protobuf:"bytes,2,opt,name=package_name,json=packageName,proto3" json:"package_name,omitempty"`
	TemplateId               *Identifier               `protobuf:"bytes,3,opt,name=template_id,json=templateId,proto3" json:"template_id,omitempty"`
	Argument                 *Value                    `protobuf:"bytes,4,opt,name=argument,proto3" json:"argument,omitempty"`
	Signatories              []string                  `protobuf:"bytes,5,rep,name=signatories,proto3" json:"signatories,omitempty"`
	Stakeholders             []string                  `protobuf:"bytes,6,rep,name=stakeholders,proto3" json:"stakeholders,omitempty"`
	PackageVersion           *string                   `protobuf:"bytes,7,opt,name=package_version,json=packageVersion,proto3,oneof" json:"package_version,omitempty"`
	GlobalKeyWithMaintainers *GlobalKeyWithMaintainers `protobuf:"bytes,8,opt,name=global_key_with_maintainers,json=globalKeyWithMaintainers,proto3" json:"global_key_with_maintainers,omitempty"`
}

func (x *Create) Reset() {
	*x = Create{}
	mi := &file_com_daml_ledger_api_v2_interactive_submission_data_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Create) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Create) ProtoMessage() {}

func (x *Create) ProtoReflect() protoreflect.Message {
	mi := &file_com_daml_ledger_api_v2_interactive_submission_data_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Create.ProtoReflect.Descriptor instead.
func (*Create) Descriptor() ([]byte, []int) {
	return file_com_daml_ledger_api_v2_interactive_submission_data_proto_rawDescGZIP(), []int{4}
}

func (x *Create) GetContractId() string {
	if x != nil {
		return x.ContractId
	}
	return ""
}

func (x *Create) GetPackageName() string {
	if x != nil {
		return x.PackageName
	}
	return ""
}

func (x *Create) GetTemplateId() *Identifier {
	if x != nil {
		return x.TemplateId
	}
	return nil
}

func (x *Create) GetArgument() *Value {
	if x != nil {
		return x.Argument
	}
	return nil
}

func (x *Create) GetSignatories() []string {
	if x != nil {
		return x.Signatories
	}
	return nil
}

func (x *Create) GetStakeholders() []string {
	if x != nil {
		return x.Stakeholders
	}
	return nil
}

func (x *Create) GetPackageVersion() string {
	if x != nil && x.PackageVersion != nil {
		return *x.PackageVersion
	}
	return ""
}

func (x *Create) GetGlobalKeyWithMaintainers() *GlobalKeyWithMaintainers {
	if x != nil {
		return x.GlobalKeyWithMaintainers
	}
	return nil
}

type GlobalKey struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TemplateId  *Identifier `protobuf:"bytes,1,opt,name=template_id,json=templateId,proto3" json:"template_id,omitempty"`
	PackageName string      `protobuf:"bytes,2,opt,name=package_name,json=packageName,proto3" json:"package_name,omitempty"`
	Key         *Value      `protobuf:"bytes,3,opt,name=key,proto3" json:"key,omitempty"`
	Hash        []byte      `protobuf:"bytes,4,opt,name=hash,proto3" json:"hash,omitempty"`
}

func (x *GlobalKey) Reset() {
	*x = GlobalKey{}
	mi := &file_com_daml_ledger_api_v2_interactive_submission_data_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GlobalKey) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GlobalKey) ProtoMessage() {}

func (x *GlobalKey) ProtoReflect() protoreflect.Message {
	mi := &file_com_daml_ledger_api_v2_interactive_submission_data_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GlobalKey.ProtoReflect.Descriptor instead.
func (*GlobalKey) Descriptor() ([]byte, []int) {
	return file_com_daml_ledger_api_v2_interactive_submission_data_proto_rawDescGZIP(), []int{5}
}

func (x *GlobalKey) GetTemplateId() *Identifier {
	if x != nil {
		return x.TemplateId
	}
	return nil
}

func (x *GlobalKey) GetPackageName() string {
	if x != nil {
		return x.PackageName
	}
	return ""
}

func (x *GlobalKey) GetKey() *Value {
	if x != nil {
		return x.Key
	}
	return nil
}

func (x *GlobalKey) GetHash() []byte {
	if x != nil {
		return x.Hash
	}
	return nil
}

type GlobalKeyWithMaintainers struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Key         *GlobalKey `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
	Maintainers []string   `protobuf:"bytes,2,rep,name=maintainers,proto3" json:"maintainers,omitempty"`
}

func (x *GlobalKeyWithMaintainers) Reset() {
	*x = GlobalKeyWithMaintainers{}
	mi := &file_com_daml_ledger_api_v2_interactive_submission_data_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GlobalKeyWithMaintainers) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GlobalKeyWithMaintainers) ProtoMessage() {}

func (x *GlobalKeyWithMaintainers) ProtoReflect() protoreflect.Message {
	mi := &file_com_daml_ledger_api_v2_interactive_submission_data_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GlobalKeyWithMaintainers.ProtoReflect.Descriptor instead.
func (*GlobalKeyWithMaintainers) Descriptor() ([]byte, []int) {
	return file_com_daml_ledger_api_v2_interactive_submission_data_proto_rawDescGZIP(), []int{6}
}

func (x *GlobalKeyWithMaintainers) GetKey() *GlobalKey {
	if x != nil {
		return x.Key
	}
	return nil
}

func (x *GlobalKeyWithMaintainers) GetMaintainers() []string {
	if x != nil {
		return x.Maintainers
	}
	return nil
}

type Metadata_SubmitterInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ActAs     []string `protobuf:"bytes,1,rep,name=act_as,json=actAs,proto3" json:"act_as,omitempty"`
	ReadAs    []string `protobuf:"bytes,2,rep,name=read_as,json=readAs,proto3" json:"read_as,omitempty"`
	CommandId string   `protobuf:"bytes,3,opt,name=command_id,json=commandId,proto3" json:"command_id,omitempty"`
}

func (x *Metadata_SubmitterInfo) Reset() {
	*x = Metadata_SubmitterInfo{}
	mi := &file_com_daml_ledger_api_v2_interactive_submission_data_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Metadata_SubmitterInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Metadata_SubmitterInfo) ProtoMessage() {}

func (x *Metadata_SubmitterInfo) ProtoReflect() protoreflect.Message {
	mi := &file_com_daml_ledger_api_v2_interactive_submission_data_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Metadata_SubmitterInfo.ProtoReflect.Descriptor instead.
func (*Metadata_SubmitterInfo) Descriptor() ([]byte, []int) {
	return file_com_daml_ledger_api_v2_interactive_submission_data_proto_rawDescGZIP(), []int{1, 0}
}

func (x *Metadata_SubmitterInfo) GetActAs() []string {
	if x != nil {
		return x.ActAs
	}
	return nil
}

func (x *Metadata_SubmitterInfo) GetReadAs() []string {
	if x != nil {
		return x.ReadAs
	}
	return nil
}

func (x *Metadata_SubmitterInfo) GetCommandId() string {
	if x != nil {
		return x.CommandId
	}
	return ""
}

type Metadata_NodeSeed struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	NodeId int32  `protobuf:"varint,1,opt,name=node_id,json=nodeId,proto3" json:"node_id,omitempty"`
	Seed   []byte `protobuf:"bytes,2,opt,name=seed,proto3" json:"seed,omitempty"`
}

func (x *Metadata_NodeSeed) Reset() {
	*x = Metadata_NodeSeed{}
	mi := &file_com_daml_ledger_api_v2_interactive_submission_data_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Metadata_NodeSeed) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Metadata_NodeSeed) ProtoMessage() {}

func (x *Metadata_NodeSeed) ProtoReflect() protoreflect.Message {
	mi := &file_com_daml_ledger_api_v2_interactive_submission_data_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Metadata_NodeSeed.ProtoReflect.Descriptor instead.
func (*Metadata_NodeSeed) Descriptor() ([]byte, []int) {
	return file_com_daml_ledger_api_v2_interactive_submission_data_proto_rawDescGZIP(), []int{1, 1}
}

func (x *Metadata_NodeSeed) GetNodeId() int32 {
	if x != nil {
		return x.NodeId
	}
	return 0
}

func (x *Metadata_NodeSeed) GetSeed() []byte {
	if x != nil {
		return x.Seed
	}
	return nil
}

type Metadata_GlobalKeyMappingEntry struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Key   *GlobalKey `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
	Value *Value     `protobuf:"bytes,2,opt,name=value,proto3,oneof" json:"value,omitempty"`
}

func (x *Metadata_GlobalKeyMappingEntry) Reset() {
	*x = Metadata_GlobalKeyMappingEntry{}
	mi := &file_com_daml_ledger_api_v2_interactive_submission_data_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Metadata_GlobalKeyMappingEntry) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Metadata_GlobalKeyMappingEntry) ProtoMessage() {}

func (x *Metadata_GlobalKeyMappingEntry) ProtoReflect() protoreflect.Message {
	mi := &file_com_daml_ledger_api_v2_interactive_submission_data_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Metadata_GlobalKeyMappingEntry.ProtoReflect.Descriptor instead.
func (*Metadata_GlobalKeyMappingEntry) Descriptor() ([]byte, []int) {
	return file_com_daml_ledger_api_v2_interactive_submission_data_proto_rawDescGZIP(), []int{1, 2}
}

func (x *Metadata_GlobalKeyMappingEntry) GetKey() *GlobalKey {
	if x != nil {
		return x.Key
	}
	return nil
}

func (x *Metadata_GlobalKeyMappingEntry) GetValue() *Value {
	if x != nil {
		return x.Value
	}
	return nil
}

type Metadata_ProcessedDisclosedContract struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Contract       *Create `protobuf:"bytes,1,opt,name=contract,proto3" json:"contract,omitempty"`
	CreatedAt      uint64  `protobuf:"varint,2,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
	DriverMetadata []byte  `protobuf:"bytes,3,opt,name=driver_metadata,json=driverMetadata,proto3" json:"driver_metadata,omitempty"`
}

func (x *Metadata_ProcessedDisclosedContract) Reset() {
	*x = Metadata_ProcessedDisclosedContract{}
	mi := &file_com_daml_ledger_api_v2_interactive_submission_data_proto_msgTypes[10]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Metadata_ProcessedDisclosedContract) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Metadata_ProcessedDisclosedContract) ProtoMessage() {}

func (x *Metadata_ProcessedDisclosedContract) ProtoReflect() protoreflect.Message {
	mi := &file_com_daml_ledger_api_v2_interactive_submission_data_proto_msgTypes[10]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Metadata_ProcessedDisclosedContract.ProtoReflect.Descriptor instead.
func (*Metadata_ProcessedDisclosedContract) Descriptor() ([]byte, []int) {
	return file_com_daml_ledger_api_v2_interactive_submission_data_proto_rawDescGZIP(), []int{1, 3}
}

func (x *Metadata_ProcessedDisclosedContract) GetContract() *Create {
	if x != nil {
		return x.Contract
	}
	return nil
}

func (x *Metadata_ProcessedDisclosedContract) GetCreatedAt() uint64 {
	if x != nil {
		return x.CreatedAt
	}
	return 0
}

func (x *Metadata_ProcessedDisclosedContract) GetDriverMetadata() []byte {
	if x != nil {
		return x.DriverMetadata
	}
	return nil
}

type Node_Fetch struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ContractId         string                    `protobuf:"bytes,1,opt,name=contract_id,json=contractId,proto3" json:"contract_id,omitempty"`
	PackageName        string                    `protobuf:"bytes,2,opt,name=package_name,json=packageName,proto3" json:"package_name,omitempty"`
	TemplateId         *Identifier               `protobuf:"bytes,3,opt,name=template_id,json=templateId,proto3" json:"template_id,omitempty"`
	Signatories        []string                  `protobuf:"bytes,4,rep,name=signatories,proto3" json:"signatories,omitempty"`
	Stakeholders       []string                  `protobuf:"bytes,5,rep,name=stakeholders,proto3" json:"stakeholders,omitempty"`
	ActingParties      []string                  `protobuf:"bytes,6,rep,name=acting_parties,json=actingParties,proto3" json:"acting_parties,omitempty"`
	KeyWithMaintainers *GlobalKeyWithMaintainers `protobuf:"bytes,7,opt,name=key_with_maintainers,json=keyWithMaintainers,proto3" json:"key_with_maintainers,omitempty"`
	ByKey              bool                      `protobuf:"varint,8,opt,name=by_key,json=byKey,proto3" json:"by_key,omitempty"`
}

func (x *Node_Fetch) Reset() {
	*x = Node_Fetch{}
	mi := &file_com_daml_ledger_api_v2_interactive_submission_data_proto_msgTypes[11]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Node_Fetch) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Node_Fetch) ProtoMessage() {}

func (x *Node_Fetch) ProtoReflect() protoreflect.Message {
	mi := &file_com_daml_ledger_api_v2_interactive_submission_data_proto_msgTypes[11]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Node_Fetch.ProtoReflect.Descriptor instead.
func (*Node_Fetch) Descriptor() ([]byte, []int) {
	return file_com_daml_ledger_api_v2_interactive_submission_data_proto_rawDescGZIP(), []int{3, 0}
}

func (x *Node_Fetch) GetContractId() string {
	if x != nil {
		return x.ContractId
	}
	return ""
}

func (x *Node_Fetch) GetPackageName() string {
	if x != nil {
		return x.PackageName
	}
	return ""
}

func (x *Node_Fetch) GetTemplateId() *Identifier {
	if x != nil {
		return x.TemplateId
	}
	return nil
}

func (x *Node_Fetch) GetSignatories() []string {
	if x != nil {
		return x.Signatories
	}
	return nil
}

func (x *Node_Fetch) GetStakeholders() []string {
	if x != nil {
		return x.Stakeholders
	}
	return nil
}

func (x *Node_Fetch) GetActingParties() []string {
	if x != nil {
		return x.ActingParties
	}
	return nil
}

func (x *Node_Fetch) GetKeyWithMaintainers() *GlobalKeyWithMaintainers {
	if x != nil {
		return x.KeyWithMaintainers
	}
	return nil
}

func (x *Node_Fetch) GetByKey() bool {
	if x != nil {
		return x.ByKey
	}
	return false
}

type Node_Exercise struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Fetch             *Node_Fetch `protobuf:"bytes,1,opt,name=fetch,proto3" json:"fetch,omitempty"`
	InterfaceId       *Identifier `protobuf:"bytes,2,opt,name=interface_id,json=interfaceId,proto3" json:"interface_id,omitempty"`
	ChoiceId          string      `protobuf:"bytes,3,opt,name=choice_id,json=choiceId,proto3" json:"choice_id,omitempty"`
	ChosenValue       *Value      `protobuf:"bytes,4,opt,name=chosen_value,json=chosenValue,proto3" json:"chosen_value,omitempty"`
	Consuming         bool        `protobuf:"varint,5,opt,name=consuming,proto3" json:"consuming,omitempty"`
	Children          []string    `protobuf:"bytes,6,rep,name=children,proto3" json:"children,omitempty"`
	ExerciseResult    *Value      `protobuf:"bytes,7,opt,name=exercise_result,json=exerciseResult,proto3" json:"exercise_result,omitempty"`
	ChoiceObservers   []string    `protobuf:"bytes,8,rep,name=choice_observers,json=choiceObservers,proto3" json:"choice_observers,omitempty"`
	ChoiceAuthorizers []string    `protobuf:"bytes,9,rep,name=choice_authorizers,json=choiceAuthorizers,proto3" json:"choice_authorizers,omitempty"`
}

func (x *Node_Exercise) Reset() {
	*x = Node_Exercise{}
	mi := &file_com_daml_ledger_api_v2_interactive_submission_data_proto_msgTypes[12]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Node_Exercise) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Node_Exercise) ProtoMessage() {}

func (x *Node_Exercise) ProtoReflect() protoreflect.Message {
	mi := &file_com_daml_ledger_api_v2_interactive_submission_data_proto_msgTypes[12]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Node_Exercise.ProtoReflect.Descriptor instead.
func (*Node_Exercise) Descriptor() ([]byte, []int) {
	return file_com_daml_ledger_api_v2_interactive_submission_data_proto_rawDescGZIP(), []int{3, 1}
}

func (x *Node_Exercise) GetFetch() *Node_Fetch {
	if x != nil {
		return x.Fetch
	}
	return nil
}

func (x *Node_Exercise) GetInterfaceId() *Identifier {
	if x != nil {
		return x.InterfaceId
	}
	return nil
}

func (x *Node_Exercise) GetChoiceId() string {
	if x != nil {
		return x.ChoiceId
	}
	return ""
}

func (x *Node_Exercise) GetChosenValue() *Value {
	if x != nil {
		return x.ChosenValue
	}
	return nil
}

func (x *Node_Exercise) GetConsuming() bool {
	if x != nil {
		return x.Consuming
	}
	return false
}

func (x *Node_Exercise) GetChildren() []string {
	if x != nil {
		return x.Children
	}
	return nil
}

func (x *Node_Exercise) GetExerciseResult() *Value {
	if x != nil {
		return x.ExerciseResult
	}
	return nil
}

func (x *Node_Exercise) GetChoiceObservers() []string {
	if x != nil {
		return x.ChoiceObservers
	}
	return nil
}

func (x *Node_Exercise) GetChoiceAuthorizers() []string {
	if x != nil {
		return x.ChoiceAuthorizers
	}
	return nil
}

type Node_Rollback struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Children []string `protobuf:"bytes,1,rep,name=children,proto3" json:"children,omitempty"`
}

func (x *Node_Rollback) Reset() {
	*x = Node_Rollback{}
	mi := &file_com_daml_ledger_api_v2_interactive_submission_data_proto_msgTypes[13]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Node_Rollback) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Node_Rollback) ProtoMessage() {}

func (x *Node_Rollback) ProtoReflect() protoreflect.Message {
	mi := &file_com_daml_ledger_api_v2_interactive_submission_data_proto_msgTypes[13]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Node_Rollback.ProtoReflect.Descriptor instead.
func (*Node_Rollback) Descriptor() ([]byte, []int) {
	return file_com_daml_ledger_api_v2_interactive_submission_data_proto_rawDescGZIP(), []int{3, 2}
}

func (x *Node_Rollback) GetChildren() []string {
	if x != nil {
		return x.Children
	}
	return nil
}

type Node_LookupByKey struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PackageName string                    `protobuf:"bytes,1,opt,name=package_name,json=packageName,proto3" json:"package_name,omitempty"`
	TemplateId  *Identifier               `protobuf:"bytes,2,opt,name=template_id,json=templateId,proto3" json:"template_id,omitempty"`
	Key         *GlobalKeyWithMaintainers `protobuf:"bytes,3,opt,name=key,proto3" json:"key,omitempty"`
	ContractId  *string                   `protobuf:"bytes,4,opt,name=contract_id,json=contractId,proto3,oneof" json:"contract_id,omitempty"`
}

func (x *Node_LookupByKey) Reset() {
	*x = Node_LookupByKey{}
	mi := &file_com_daml_ledger_api_v2_interactive_submission_data_proto_msgTypes[14]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Node_LookupByKey) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Node_LookupByKey) ProtoMessage() {}

func (x *Node_LookupByKey) ProtoReflect() protoreflect.Message {
	mi := &file_com_daml_ledger_api_v2_interactive_submission_data_proto_msgTypes[14]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Node_LookupByKey.ProtoReflect.Descriptor instead.
func (*Node_LookupByKey) Descriptor() ([]byte, []int) {
	return file_com_daml_ledger_api_v2_interactive_submission_data_proto_rawDescGZIP(), []int{3, 3}
}

func (x *Node_LookupByKey) GetPackageName() string {
	if x != nil {
		return x.PackageName
	}
	return ""
}

func (x *Node_LookupByKey) GetTemplateId() *Identifier {
	if x != nil {
		return x.TemplateId
	}
	return nil
}

func (x *Node_LookupByKey) GetKey() *GlobalKeyWithMaintainers {
	if x != nil {
		return x.Key
	}
	return nil
}

func (x *Node_LookupByKey) GetContractId() string {
	if x != nil && x.ContractId != nil {
		return *x.ContractId
	}
	return ""
}

var File_com_daml_ledger_api_v2_interactive_submission_data_proto protoreflect.FileDescriptor

var file_com_daml_ledger_api_v2_interactive_submission_data_proto_rawDesc = []byte{
	0x0a, 0x38, 0x63, 0x6f, 0x6d, 0x2f, 0x64, 0x61, 0x6d, 0x6c, 0x2f, 0x6c, 0x65, 0x64, 0x67, 0x65,
	0x72, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x32, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x61, 0x63,
	0x74, 0x69, 0x76, 0x65, 0x5f, 0x73, 0x75, 0x62, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f,
	0x64, 0x61, 0x74, 0x61, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x16, 0x63, 0x6f, 0x6d, 0x2e,
	0x64, 0x61, 0x6d, 0x6c, 0x2e, 0x6c, 0x65, 0x64, 0x67, 0x65, 0x72, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x76, 0x32, 0x1a, 0x22, 0x63, 0x6f, 0x6d, 0x2f, 0x64, 0x61, 0x6d, 0x6c, 0x2f, 0x6c, 0x65, 0x64,
	0x67, 0x65, 0x72, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x32, 0x2f, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x9e, 0x01, 0x0a, 0x13, 0x50, 0x72, 0x65, 0x70, 0x61,
	0x72, 0x65, 0x64, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x49,
	0x0a, 0x0b, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x64, 0x61, 0x6d, 0x6c, 0x2e, 0x6c,
	0x65, 0x64, 0x67, 0x65, 0x72, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x32, 0x2e, 0x44, 0x61, 0x6d,
	0x6c, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0b, 0x74, 0x72,
	0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x3c, 0x0a, 0x08, 0x6d, 0x65, 0x74,
	0x61, 0x64, 0x61, 0x74, 0x61, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x63, 0x6f,
	0x6d, 0x2e, 0x64, 0x61, 0x6d, 0x6c, 0x2e, 0x6c, 0x65, 0x64, 0x67, 0x65, 0x72, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x76, 0x32, 0x2e, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x52, 0x08, 0x6d,
	0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x22, 0xef, 0x09, 0x0a, 0x08, 0x4d, 0x65, 0x74, 0x61,
	0x64, 0x61, 0x74, 0x61, 0x12, 0x55, 0x0a, 0x0e, 0x73, 0x75, 0x62, 0x6d, 0x69, 0x74, 0x74, 0x65,
	0x72, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x63,
	0x6f, 0x6d, 0x2e, 0x64, 0x61, 0x6d, 0x6c, 0x2e, 0x6c, 0x65, 0x64, 0x67, 0x65, 0x72, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x76, 0x32, 0x2e, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x53,
	0x75, 0x62, 0x6d, 0x69, 0x74, 0x74, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0d, 0x73, 0x75,
	0x62, 0x6d, 0x69, 0x74, 0x74, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x27, 0x0a, 0x0f, 0x73,
	0x75, 0x62, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x73, 0x65, 0x65, 0x64, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0c, 0x52, 0x0e, 0x73, 0x75, 0x62, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e,
	0x53, 0x65, 0x65, 0x64, 0x12, 0x27, 0x0a, 0x0f, 0x73, 0x75, 0x62, 0x6d, 0x69, 0x73, 0x73, 0x69,
	0x6f, 0x6e, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0e, 0x73,
	0x75, 0x62, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x23, 0x0a,
	0x0d, 0x75, 0x73, 0x65, 0x64, 0x5f, 0x70, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x73, 0x18, 0x04,
	0x20, 0x03, 0x28, 0x09, 0x52, 0x0c, 0x75, 0x73, 0x65, 0x64, 0x50, 0x61, 0x63, 0x6b, 0x61, 0x67,
	0x65, 0x73, 0x12, 0x48, 0x0a, 0x0a, 0x6e, 0x6f, 0x64, 0x65, 0x5f, 0x73, 0x65, 0x65, 0x64, 0x73,
	0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x64, 0x61, 0x6d,
	0x6c, 0x2e, 0x6c, 0x65, 0x64, 0x67, 0x65, 0x72, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x32, 0x2e,
	0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x4e, 0x6f, 0x64, 0x65, 0x53, 0x65, 0x65,
	0x64, 0x52, 0x09, 0x6e, 0x6f, 0x64, 0x65, 0x53, 0x65, 0x65, 0x64, 0x73, 0x12, 0x64, 0x0a, 0x12,
	0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x5f, 0x6b, 0x65, 0x79, 0x5f, 0x6d, 0x61, 0x70, 0x70, 0x69,
	0x6e, 0x67, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x36, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x64,
	0x61, 0x6d, 0x6c, 0x2e, 0x6c, 0x65, 0x64, 0x67, 0x65, 0x72, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76,
	0x32, 0x2e, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x47, 0x6c, 0x6f, 0x62, 0x61,
	0x6c, 0x4b, 0x65, 0x79, 0x4d, 0x61, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x52, 0x10, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x4b, 0x65, 0x79, 0x4d, 0x61, 0x70, 0x70, 0x69,
	0x6e, 0x67, 0x12, 0x66, 0x0a, 0x10, 0x64, 0x69, 0x73, 0x63, 0x6c, 0x6f, 0x73, 0x65, 0x64, 0x5f,
	0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x3b, 0x2e, 0x63,
	0x6f, 0x6d, 0x2e, 0x64, 0x61, 0x6d, 0x6c, 0x2e, 0x6c, 0x65, 0x64, 0x67, 0x65, 0x72, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x76, 0x32, 0x2e, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x50,
	0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x65, 0x64, 0x44, 0x69, 0x73, 0x63, 0x6c, 0x6f, 0x73, 0x65,
	0x64, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x52, 0x0f, 0x64, 0x69, 0x73, 0x63, 0x6c,
	0x6f, 0x73, 0x65, 0x64, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x37, 0x0a, 0x15, 0x6c, 0x65,
	0x64, 0x67, 0x65, 0x72, 0x5f, 0x65, 0x66, 0x66, 0x65, 0x63, 0x74, 0x69, 0x76, 0x65, 0x5f, 0x74,
	0x69, 0x6d, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x04, 0x48, 0x00, 0x52, 0x13, 0x6c, 0x65, 0x64,
	0x67, 0x65, 0x72, 0x45, 0x66, 0x66, 0x65, 0x63, 0x74, 0x69, 0x76, 0x65, 0x54, 0x69, 0x6d, 0x65,
	0x88, 0x01, 0x01, 0x12, 0x24, 0x0a, 0x0b, 0x77, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x5f,
	0x69, 0x64, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x48, 0x01, 0x52, 0x0a, 0x77, 0x6f, 0x72, 0x6b,
	0x66, 0x6c, 0x6f, 0x77, 0x49, 0x64, 0x88, 0x01, 0x01, 0x12, 0x3a, 0x0a, 0x19, 0x69, 0x6e, 0x74,
	0x65, 0x72, 0x70, 0x72, 0x65, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x69, 0x6d, 0x65,
	0x5f, 0x6e, 0x61, 0x6e, 0x6f, 0x73, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x04, 0x52, 0x17, 0x69, 0x6e,
	0x74, 0x65, 0x72, 0x70, 0x72, 0x65, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x69, 0x6d, 0x65,
	0x4e, 0x61, 0x6e, 0x6f, 0x73, 0x12, 0x1b, 0x0a, 0x09, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x5f,
	0x69, 0x64, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e,
	0x49, 0x64, 0x12, 0x25, 0x0a, 0x0e, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x74, 0x6f, 0x72, 0x5f, 0x67,
	0x72, 0x6f, 0x75, 0x70, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0d, 0x6d, 0x65, 0x64, 0x69,
	0x61, 0x74, 0x6f, 0x72, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x12, 0x25, 0x0a, 0x0e, 0x74, 0x72, 0x61,
	0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x0d, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0d, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64,
	0x1a, 0x5e, 0x0a, 0x0d, 0x53, 0x75, 0x62, 0x6d, 0x69, 0x74, 0x74, 0x65, 0x72, 0x49, 0x6e, 0x66,
	0x6f, 0x12, 0x15, 0x0a, 0x06, 0x61, 0x63, 0x74, 0x5f, 0x61, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28,
	0x09, 0x52, 0x05, 0x61, 0x63, 0x74, 0x41, 0x73, 0x12, 0x17, 0x0a, 0x07, 0x72, 0x65, 0x61, 0x64,
	0x5f, 0x61, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x06, 0x72, 0x65, 0x61, 0x64, 0x41,
	0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x5f, 0x69, 0x64, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x49, 0x64,
	0x1a, 0x37, 0x0a, 0x08, 0x4e, 0x6f, 0x64, 0x65, 0x53, 0x65, 0x65, 0x64, 0x12, 0x17, 0x0a, 0x07,
	0x6e, 0x6f, 0x64, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x6e,
	0x6f, 0x64, 0x65, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x65, 0x65, 0x64, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0c, 0x52, 0x04, 0x73, 0x65, 0x65, 0x64, 0x1a, 0x90, 0x01, 0x0a, 0x15, 0x47, 0x6c,
	0x6f, 0x62, 0x61, 0x6c, 0x4b, 0x65, 0x79, 0x4d, 0x61, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x12, 0x33, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x21, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x64, 0x61, 0x6d, 0x6c, 0x2e, 0x6c, 0x65, 0x64, 0x67,
	0x65, 0x72, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x32, 0x2e, 0x47, 0x6c, 0x6f, 0x62, 0x61, 0x6c,
	0x4b, 0x65, 0x79, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x38, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x64, 0x61,
	0x6d, 0x6c, 0x2e, 0x6c, 0x65, 0x64, 0x67, 0x65, 0x72, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x32,
	0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x48, 0x00, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x88,
	0x01, 0x01, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x1a, 0xa0, 0x01, 0x0a,
	0x1a, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x65, 0x64, 0x44, 0x69, 0x73, 0x63, 0x6c, 0x6f,
	0x73, 0x65, 0x64, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x12, 0x3a, 0x0a, 0x08, 0x63,
	0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e,
	0x63, 0x6f, 0x6d, 0x2e, 0x64, 0x61, 0x6d, 0x6c, 0x2e, 0x6c, 0x65, 0x64, 0x67, 0x65, 0x72, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x76, 0x32, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x52, 0x08, 0x63,
	0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x63, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x27, 0x0a, 0x0f, 0x64, 0x72, 0x69, 0x76, 0x65, 0x72,
	0x5f, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0c, 0x52,
	0x0e, 0x64, 0x72, 0x69, 0x76, 0x65, 0x72, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x42,
	0x18, 0x0a, 0x16, 0x5f, 0x6c, 0x65, 0x64, 0x67, 0x65, 0x72, 0x5f, 0x65, 0x66, 0x66, 0x65, 0x63,
	0x74, 0x69, 0x76, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x77, 0x6f,
	0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x5f, 0x69, 0x64, 0x22, 0x75, 0x0a, 0x0f, 0x44, 0x61, 0x6d,
	0x6c, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x18, 0x0a, 0x07,
	0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x76,
	0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x14, 0x0a, 0x05, 0x72, 0x6f, 0x6f, 0x74, 0x73, 0x18,
	0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x05, 0x72, 0x6f, 0x6f, 0x74, 0x73, 0x12, 0x32, 0x0a, 0x05,
	0x6e, 0x6f, 0x64, 0x65, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x63, 0x6f,
	0x6d, 0x2e, 0x64, 0x61, 0x6d, 0x6c, 0x2e, 0x6c, 0x65, 0x64, 0x67, 0x65, 0x72, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x76, 0x32, 0x2e, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x05, 0x6e, 0x6f, 0x64, 0x65, 0x73,
	0x22, 0x85, 0x0c, 0x0a, 0x04, 0x4e, 0x6f, 0x64, 0x65, 0x12, 0x1d, 0x0a, 0x07, 0x76, 0x65, 0x72,
	0x73, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x48, 0x01, 0x52, 0x07, 0x76, 0x65,
	0x72, 0x73, 0x69, 0x6f, 0x6e, 0x88, 0x01, 0x01, 0x12, 0x17, 0x0a, 0x07, 0x6e, 0x6f, 0x64, 0x65,
	0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x6e, 0x6f, 0x64, 0x65, 0x49,
	0x64, 0x12, 0x38, 0x0a, 0x06, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1e, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x64, 0x61, 0x6d, 0x6c, 0x2e, 0x6c, 0x65, 0x64,
	0x67, 0x65, 0x72, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x32, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x48, 0x00, 0x52, 0x06, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x12, 0x3a, 0x0a, 0x05, 0x66,
	0x65, 0x74, 0x63, 0x68, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x63, 0x6f, 0x6d,
	0x2e, 0x64, 0x61, 0x6d, 0x6c, 0x2e, 0x6c, 0x65, 0x64, 0x67, 0x65, 0x72, 0x2e, 0x61, 0x70, 0x69,
	0x2e, 0x76, 0x32, 0x2e, 0x4e, 0x6f, 0x64, 0x65, 0x2e, 0x46, 0x65, 0x74, 0x63, 0x68, 0x48, 0x00,
	0x52, 0x05, 0x66, 0x65, 0x74, 0x63, 0x68, 0x12, 0x43, 0x0a, 0x08, 0x65, 0x78, 0x65, 0x72, 0x63,
	0x69, 0x73, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x63, 0x6f, 0x6d, 0x2e,
	0x64, 0x61, 0x6d, 0x6c, 0x2e, 0x6c, 0x65, 0x64, 0x67, 0x65, 0x72, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x76, 0x32, 0x2e, 0x4e, 0x6f, 0x64, 0x65, 0x2e, 0x45, 0x78, 0x65, 0x72, 0x63, 0x69, 0x73, 0x65,
	0x48, 0x00, 0x52, 0x08, 0x65, 0x78, 0x65, 0x72, 0x63, 0x69, 0x73, 0x65, 0x12, 0x43, 0x0a, 0x08,
	0x72, 0x6f, 0x6c, 0x6c, 0x62, 0x61, 0x63, 0x6b, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25,
	0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x64, 0x61, 0x6d, 0x6c, 0x2e, 0x6c, 0x65, 0x64, 0x67, 0x65, 0x72,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x32, 0x2e, 0x4e, 0x6f, 0x64, 0x65, 0x2e, 0x52, 0x6f, 0x6c,
	0x6c, 0x62, 0x61, 0x63, 0x6b, 0x48, 0x00, 0x52, 0x08, 0x72, 0x6f, 0x6c, 0x6c, 0x62, 0x61, 0x63,
	0x6b, 0x12, 0x4e, 0x0a, 0x0d, 0x6c, 0x6f, 0x6f, 0x6b, 0x75, 0x70, 0x5f, 0x62, 0x79, 0x5f, 0x6b,
	0x65, 0x79, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x64,
	0x61, 0x6d, 0x6c, 0x2e, 0x6c, 0x65, 0x64, 0x67, 0x65, 0x72, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76,
	0x32, 0x2e, 0x4e, 0x6f, 0x64, 0x65, 0x2e, 0x4c, 0x6f, 0x6f, 0x6b, 0x75, 0x70, 0x42, 0x79, 0x4b,
	0x65, 0x79, 0x48, 0x00, 0x52, 0x0b, 0x6c, 0x6f, 0x6f, 0x6b, 0x75, 0x70, 0x42, 0x79, 0x4b, 0x65,
	0x79, 0x1a, 0xf8, 0x02, 0x0a, 0x05, 0x46, 0x65, 0x74, 0x63, 0x68, 0x12, 0x1f, 0x0a, 0x0b, 0x63,
	0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0a, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x49, 0x64, 0x12, 0x21, 0x0a, 0x0c,
	0x70, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0b, 0x70, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12,
	0x43, 0x0a, 0x0b, 0x74, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x64, 0x61, 0x6d, 0x6c, 0x2e,
	0x6c, 0x65, 0x64, 0x67, 0x65, 0x72, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x32, 0x2e, 0x49, 0x64,
	0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x52, 0x0a, 0x74, 0x65, 0x6d, 0x70, 0x6c, 0x61,
	0x74, 0x65, 0x49, 0x64, 0x12, 0x20, 0x0a, 0x0b, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x6f, 0x72,
	0x69, 0x65, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0b, 0x73, 0x69, 0x67, 0x6e, 0x61,
	0x74, 0x6f, 0x72, 0x69, 0x65, 0x73, 0x12, 0x22, 0x0a, 0x0c, 0x73, 0x74, 0x61, 0x6b, 0x65, 0x68,
	0x6f, 0x6c, 0x64, 0x65, 0x72, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0c, 0x73, 0x74,
	0x61, 0x6b, 0x65, 0x68, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x73, 0x12, 0x25, 0x0a, 0x0e, 0x61, 0x63,
	0x74, 0x69, 0x6e, 0x67, 0x5f, 0x70, 0x61, 0x72, 0x74, 0x69, 0x65, 0x73, 0x18, 0x06, 0x20, 0x03,
	0x28, 0x09, 0x52, 0x0d, 0x61, 0x63, 0x74, 0x69, 0x6e, 0x67, 0x50, 0x61, 0x72, 0x74, 0x69, 0x65,
	0x73, 0x12, 0x62, 0x0a, 0x14, 0x6b, 0x65, 0x79, 0x5f, 0x77, 0x69, 0x74, 0x68, 0x5f, 0x6d, 0x61,
	0x69, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x30, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x64, 0x61, 0x6d, 0x6c, 0x2e, 0x6c, 0x65, 0x64, 0x67, 0x65,
	0x72, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x32, 0x2e, 0x47, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x4b,
	0x65, 0x79, 0x57, 0x69, 0x74, 0x68, 0x4d, 0x61, 0x69, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72,
	0x73, 0x52, 0x12, 0x6b, 0x65, 0x79, 0x57, 0x69, 0x74, 0x68, 0x4d, 0x61, 0x69, 0x6e, 0x74, 0x61,
	0x69, 0x6e, 0x65, 0x72, 0x73, 0x12, 0x15, 0x0a, 0x06, 0x62, 0x79, 0x5f, 0x6b, 0x65, 0x79, 0x18,
	0x08, 0x20, 0x01, 0x28, 0x08, 0x52, 0x05, 0x62, 0x79, 0x4b, 0x65, 0x79, 0x1a, 0xc6, 0x03, 0x0a,
	0x08, 0x45, 0x78, 0x65, 0x72, 0x63, 0x69, 0x73, 0x65, 0x12, 0x38, 0x0a, 0x05, 0x66, 0x65, 0x74,
	0x63, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x64,
	0x61, 0x6d, 0x6c, 0x2e, 0x6c, 0x65, 0x64, 0x67, 0x65, 0x72, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76,
	0x32, 0x2e, 0x4e, 0x6f, 0x64, 0x65, 0x2e, 0x46, 0x65, 0x74, 0x63, 0x68, 0x52, 0x05, 0x66, 0x65,
	0x74, 0x63, 0x68, 0x12, 0x45, 0x0a, 0x0c, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65,
	0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x63, 0x6f, 0x6d, 0x2e,
	0x64, 0x61, 0x6d, 0x6c, 0x2e, 0x6c, 0x65, 0x64, 0x67, 0x65, 0x72, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x76, 0x32, 0x2e, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x52, 0x0b, 0x69,
	0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x63, 0x68,
	0x6f, 0x69, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x63,
	0x68, 0x6f, 0x69, 0x63, 0x65, 0x49, 0x64, 0x12, 0x40, 0x0a, 0x0c, 0x63, 0x68, 0x6f, 0x73, 0x65,
	0x6e, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e,
	0x63, 0x6f, 0x6d, 0x2e, 0x64, 0x61, 0x6d, 0x6c, 0x2e, 0x6c, 0x65, 0x64, 0x67, 0x65, 0x72, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x76, 0x32, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0b, 0x63, 0x68,
	0x6f, 0x73, 0x65, 0x6e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x63, 0x6f, 0x6e,
	0x73, 0x75, 0x6d, 0x69, 0x6e, 0x67, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x63, 0x6f,
	0x6e, 0x73, 0x75, 0x6d, 0x69, 0x6e, 0x67, 0x12, 0x1a, 0x0a, 0x08, 0x63, 0x68, 0x69, 0x6c, 0x64,
	0x72, 0x65, 0x6e, 0x18, 0x06, 0x20, 0x03, 0x28, 0x09, 0x52, 0x08, 0x63, 0x68, 0x69, 0x6c, 0x64,
	0x72, 0x65, 0x6e, 0x12, 0x46, 0x0a, 0x0f, 0x65, 0x78, 0x65, 0x72, 0x63, 0x69, 0x73, 0x65, 0x5f,
	0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x63,
	0x6f, 0x6d, 0x2e, 0x64, 0x61, 0x6d, 0x6c, 0x2e, 0x6c, 0x65, 0x64, 0x67, 0x65, 0x72, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x76, 0x32, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0e, 0x65, 0x78, 0x65,
	0x72, 0x63, 0x69, 0x73, 0x65, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x29, 0x0a, 0x10, 0x63,
	0x68, 0x6f, 0x69, 0x63, 0x65, 0x5f, 0x6f, 0x62, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x73, 0x18,
	0x08, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0f, 0x63, 0x68, 0x6f, 0x69, 0x63, 0x65, 0x4f, 0x62, 0x73,
	0x65, 0x72, 0x76, 0x65, 0x72, 0x73, 0x12, 0x2d, 0x0a, 0x12, 0x63, 0x68, 0x6f, 0x69, 0x63, 0x65,
	0x5f, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x65, 0x72, 0x73, 0x18, 0x09, 0x20, 0x03,
	0x28, 0x09, 0x52, 0x11, 0x63, 0x68, 0x6f, 0x69, 0x63, 0x65, 0x41, 0x75, 0x74, 0x68, 0x6f, 0x72,
	0x69, 0x7a, 0x65, 0x72, 0x73, 0x1a, 0x26, 0x0a, 0x08, 0x52, 0x6f, 0x6c, 0x6c, 0x62, 0x61, 0x63,
	0x6b, 0x12, 0x1a, 0x0a, 0x08, 0x63, 0x68, 0x69, 0x6c, 0x64, 0x72, 0x65, 0x6e, 0x18, 0x01, 0x20,
	0x03, 0x28, 0x09, 0x52, 0x08, 0x63, 0x68, 0x69, 0x6c, 0x64, 0x72, 0x65, 0x6e, 0x1a, 0xef, 0x01,
	0x0a, 0x0b, 0x4c, 0x6f, 0x6f, 0x6b, 0x75, 0x70, 0x42, 0x79, 0x4b, 0x65, 0x79, 0x12, 0x21, 0x0a,
	0x0c, 0x70, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0b, 0x70, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x4e, 0x61, 0x6d, 0x65,
	0x12, 0x43, 0x0a, 0x0b, 0x74, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x5f, 0x69, 0x64, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x64, 0x61, 0x6d, 0x6c,
	0x2e, 0x6c, 0x65, 0x64, 0x67, 0x65, 0x72, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x32, 0x2e, 0x49,
	0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x52, 0x0a, 0x74, 0x65, 0x6d, 0x70, 0x6c,
	0x61, 0x74, 0x65, 0x49, 0x64, 0x12, 0x42, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x30, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x64, 0x61, 0x6d, 0x6c, 0x2e, 0x6c, 0x65,
	0x64, 0x67, 0x65, 0x72, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x32, 0x2e, 0x47, 0x6c, 0x6f, 0x62,
	0x61, 0x6c, 0x4b, 0x65, 0x79, 0x57, 0x69, 0x74, 0x68, 0x4d, 0x61, 0x69, 0x6e, 0x74, 0x61, 0x69,
	0x6e, 0x65, 0x72, 0x73, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x24, 0x0a, 0x0b, 0x63, 0x6f, 0x6e,
	0x74, 0x72, 0x61, 0x63, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00,
	0x52, 0x0a, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x49, 0x64, 0x88, 0x01, 0x01, 0x42,
	0x0e, 0x0a, 0x0c, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x5f, 0x69, 0x64, 0x42,
	0x0b, 0x0a, 0x09, 0x6e, 0x6f, 0x64, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x42, 0x0a, 0x0a, 0x08,
	0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x22, 0xc5, 0x03, 0x0a, 0x06, 0x43, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x5f,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61,
	0x63, 0x74, 0x49, 0x64, 0x12, 0x21, 0x0a, 0x0c, 0x70, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x5f,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x70, 0x61, 0x63, 0x6b,
	0x61, 0x67, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x43, 0x0a, 0x0b, 0x74, 0x65, 0x6d, 0x70, 0x6c,
	0x61, 0x74, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x63,
	0x6f, 0x6d, 0x2e, 0x64, 0x61, 0x6d, 0x6c, 0x2e, 0x6c, 0x65, 0x64, 0x67, 0x65, 0x72, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x76, 0x32, 0x2e, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72,
	0x52, 0x0a, 0x74, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x49, 0x64, 0x12, 0x39, 0x0a, 0x08,
	0x61, 0x72, 0x67, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d,
	0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x64, 0x61, 0x6d, 0x6c, 0x2e, 0x6c, 0x65, 0x64, 0x67, 0x65, 0x72,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x32, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x08, 0x61,
	0x72, 0x67, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x20, 0x0a, 0x0b, 0x73, 0x69, 0x67, 0x6e, 0x61,
	0x74, 0x6f, 0x72, 0x69, 0x65, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0b, 0x73, 0x69,
	0x67, 0x6e, 0x61, 0x74, 0x6f, 0x72, 0x69, 0x65, 0x73, 0x12, 0x22, 0x0a, 0x0c, 0x73, 0x74, 0x61,
	0x6b, 0x65, 0x68, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x09, 0x52,
	0x0c, 0x73, 0x74, 0x61, 0x6b, 0x65, 0x68, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x73, 0x12, 0x2c, 0x0a,
	0x0f, 0x70, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x0e, 0x70, 0x61, 0x63, 0x6b, 0x61, 0x67,
	0x65, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x88, 0x01, 0x01, 0x12, 0x6f, 0x0a, 0x1b, 0x67,
	0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x5f, 0x6b, 0x65, 0x79, 0x5f, 0x77, 0x69, 0x74, 0x68, 0x5f, 0x6d,
	0x61, 0x69, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x73, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x30, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x64, 0x61, 0x6d, 0x6c, 0x2e, 0x6c, 0x65, 0x64, 0x67,
	0x65, 0x72, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x32, 0x2e, 0x47, 0x6c, 0x6f, 0x62, 0x61, 0x6c,
	0x4b, 0x65, 0x79, 0x57, 0x69, 0x74, 0x68, 0x4d, 0x61, 0x69, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65,
	0x72, 0x73, 0x52, 0x18, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x4b, 0x65, 0x79, 0x57, 0x69, 0x74,
	0x68, 0x4d, 0x61, 0x69, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x73, 0x42, 0x12, 0x0a, 0x10,
	0x5f, 0x70, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e,
	0x22, 0xb8, 0x01, 0x0a, 0x09, 0x47, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x4b, 0x65, 0x79, 0x12, 0x43,
	0x0a, 0x0b, 0x74, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x64, 0x61, 0x6d, 0x6c, 0x2e, 0x6c,
	0x65, 0x64, 0x67, 0x65, 0x72, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x32, 0x2e, 0x49, 0x64, 0x65,
	0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x52, 0x0a, 0x74, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74,
	0x65, 0x49, 0x64, 0x12, 0x21, 0x0a, 0x0c, 0x70, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x5f, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x70, 0x61, 0x63, 0x6b, 0x61,
	0x67, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x2f, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x64, 0x61, 0x6d, 0x6c, 0x2e, 0x6c,
	0x65, 0x64, 0x67, 0x65, 0x72, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x32, 0x2e, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x12, 0x0a, 0x04, 0x68, 0x61, 0x73, 0x68, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x04, 0x68, 0x61, 0x73, 0x68, 0x22, 0x71, 0x0a, 0x18, 0x47,
	0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x4b, 0x65, 0x79, 0x57, 0x69, 0x74, 0x68, 0x4d, 0x61, 0x69, 0x6e,
	0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x73, 0x12, 0x33, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x64, 0x61, 0x6d, 0x6c, 0x2e,
	0x6c, 0x65, 0x64, 0x67, 0x65, 0x72, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x32, 0x2e, 0x47, 0x6c,
	0x6f, 0x62, 0x61, 0x6c, 0x4b, 0x65, 0x79, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x20, 0x0a, 0x0b,
	0x6d, 0x61, 0x69, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28,
	0x09, 0x52, 0x0b, 0x6d, 0x61, 0x69, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x73, 0x42, 0x9d,
	0x01, 0x0a, 0x16, 0x63, 0x6f, 0x6d, 0x2e, 0x64, 0x61, 0x6d, 0x6c, 0x2e, 0x6c, 0x65, 0x64, 0x67,
	0x65, 0x72, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x32, 0x42, 0x23, 0x49, 0x6e, 0x74, 0x65, 0x72,
	0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x53, 0x75, 0x62, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e,
	0x44, 0x61, 0x74, 0x61, 0x4f, 0x75, 0x74, 0x65, 0x72, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x5a, 0x45,
	0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x64, 0x69, 0x67, 0x69, 0x74,
	0x61, 0x6c, 0x2d, 0x61, 0x73, 0x73, 0x65, 0x74, 0x2f, 0x64, 0x61, 0x7a, 0x6c, 0x2d, 0x63, 0x6c,
	0x69, 0x65, 0x6e, 0x74, 0x2f, 0x76, 0x38, 0x2f, 0x67, 0x6f, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x63,
	0x6f, 0x6d, 0x2f, 0x64, 0x61, 0x6d, 0x6c, 0x2f, 0x6c, 0x65, 0x64, 0x67, 0x65, 0x72, 0x2f, 0x61,
	0x70, 0x69, 0x2f, 0x76, 0x32, 0xaa, 0x02, 0x16, 0x43, 0x6f, 0x6d, 0x2e, 0x44, 0x61, 0x6d, 0x6c,
	0x2e, 0x4c, 0x65, 0x64, 0x67, 0x65, 0x72, 0x2e, 0x41, 0x70, 0x69, 0x2e, 0x56, 0x32, 0x62, 0x06,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_com_daml_ledger_api_v2_interactive_submission_data_proto_rawDescOnce sync.Once
	file_com_daml_ledger_api_v2_interactive_submission_data_proto_rawDescData = file_com_daml_ledger_api_v2_interactive_submission_data_proto_rawDesc
)

func file_com_daml_ledger_api_v2_interactive_submission_data_proto_rawDescGZIP() []byte {
	file_com_daml_ledger_api_v2_interactive_submission_data_proto_rawDescOnce.Do(func() {
		file_com_daml_ledger_api_v2_interactive_submission_data_proto_rawDescData = protoimpl.X.CompressGZIP(file_com_daml_ledger_api_v2_interactive_submission_data_proto_rawDescData)
	})
	return file_com_daml_ledger_api_v2_interactive_submission_data_proto_rawDescData
}

var file_com_daml_ledger_api_v2_interactive_submission_data_proto_msgTypes = make([]protoimpl.MessageInfo, 15)
var file_com_daml_ledger_api_v2_interactive_submission_data_proto_goTypes = []any{
	(*PreparedTransaction)(nil),                 // 0: com.daml.ledger.api.v2.PreparedTransaction
	(*Metadata)(nil),                            // 1: com.daml.ledger.api.v2.Metadata
	(*DamlTransaction)(nil),                     // 2: com.daml.ledger.api.v2.DamlTransaction
	(*Node)(nil),                                // 3: com.daml.ledger.api.v2.Node
	(*Create)(nil),                              // 4: com.daml.ledger.api.v2.Create
	(*GlobalKey)(nil),                           // 5: com.daml.ledger.api.v2.GlobalKey
	(*GlobalKeyWithMaintainers)(nil),            // 6: com.daml.ledger.api.v2.GlobalKeyWithMaintainers
	(*Metadata_SubmitterInfo)(nil),              // 7: com.daml.ledger.api.v2.Metadata.SubmitterInfo
	(*Metadata_NodeSeed)(nil),                   // 8: com.daml.ledger.api.v2.Metadata.NodeSeed
	(*Metadata_GlobalKeyMappingEntry)(nil),      // 9: com.daml.ledger.api.v2.Metadata.GlobalKeyMappingEntry
	(*Metadata_ProcessedDisclosedContract)(nil), // 10: com.daml.ledger.api.v2.Metadata.ProcessedDisclosedContract
	(*Node_Fetch)(nil),                          // 11: com.daml.ledger.api.v2.Node.Fetch
	(*Node_Exercise)(nil),                       // 12: com.daml.ledger.api.v2.Node.Exercise
	(*Node_Rollback)(nil),                       // 13: com.daml.ledger.api.v2.Node.Rollback
	(*Node_LookupByKey)(nil),                    // 14: com.daml.ledger.api.v2.Node.LookupByKey
	(*Identifier)(nil),                          // 15: com.daml.ledger.api.v2.Identifier
	(*Value)(nil),                               // 16: com.daml.ledger.api.v2.Value
}
var file_com_daml_ledger_api_v2_interactive_submission_data_proto_depIdxs = []int32{
	2,  // 0: com.daml.ledger.api.v2.PreparedTransaction.transaction:type_name -> com.daml.ledger.api.v2.DamlTransaction
	1,  // 1: com.daml.ledger.api.v2.PreparedTransaction.metadata:type_name -> com.daml.ledger.api.v2.Metadata
	7,  // 2: com.daml.ledger.api.v2.Metadata.submitter_info:type_name -> com.daml.ledger.api.v2.Metadata.SubmitterInfo
	8,  // 3: com.daml.ledger.api.v2.Metadata.node_seeds:type_name -> com.daml.ledger.api.v2.Metadata.NodeSeed
	9,  // 4: com.daml.ledger.api.v2.Metadata.global_key_mapping:type_name -> com.daml.ledger.api.v2.Metadata.GlobalKeyMappingEntry
	10, // 5: com.daml.ledger.api.v2.Metadata.disclosed_events:type_name -> com.daml.ledger.api.v2.Metadata.ProcessedDisclosedContract
	3,  // 6: com.daml.ledger.api.v2.DamlTransaction.nodes:type_name -> com.daml.ledger.api.v2.Node
	4,  // 7: com.daml.ledger.api.v2.Node.create:type_name -> com.daml.ledger.api.v2.Create
	11, // 8: com.daml.ledger.api.v2.Node.fetch:type_name -> com.daml.ledger.api.v2.Node.Fetch
	12, // 9: com.daml.ledger.api.v2.Node.exercise:type_name -> com.daml.ledger.api.v2.Node.Exercise
	13, // 10: com.daml.ledger.api.v2.Node.rollback:type_name -> com.daml.ledger.api.v2.Node.Rollback
	14, // 11: com.daml.ledger.api.v2.Node.lookup_by_key:type_name -> com.daml.ledger.api.v2.Node.LookupByKey
	15, // 12: com.daml.ledger.api.v2.Create.template_id:type_name -> com.daml.ledger.api.v2.Identifier
	16, // 13: com.daml.ledger.api.v2.Create.argument:type_name -> com.daml.ledger.api.v2.Value
	6,  // 14: com.daml.ledger.api.v2.Create.global_key_with_maintainers:type_name -> com.daml.ledger.api.v2.GlobalKeyWithMaintainers
	15, // 15: com.daml.ledger.api.v2.GlobalKey.template_id:type_name -> com.daml.ledger.api.v2.Identifier
	16, // 16: com.daml.ledger.api.v2.GlobalKey.key:type_name -> com.daml.ledger.api.v2.Value
	5,  // 17: com.daml.ledger.api.v2.GlobalKeyWithMaintainers.key:type_name -> com.daml.ledger.api.v2.GlobalKey
	5,  // 18: com.daml.ledger.api.v2.Metadata.GlobalKeyMappingEntry.key:type_name -> com.daml.ledger.api.v2.GlobalKey
	16, // 19: com.daml.ledger.api.v2.Metadata.GlobalKeyMappingEntry.value:type_name -> com.daml.ledger.api.v2.Value
	4,  // 20: com.daml.ledger.api.v2.Metadata.ProcessedDisclosedContract.contract:type_name -> com.daml.ledger.api.v2.Create
	15, // 21: com.daml.ledger.api.v2.Node.Fetch.template_id:type_name -> com.daml.ledger.api.v2.Identifier
	6,  // 22: com.daml.ledger.api.v2.Node.Fetch.key_with_maintainers:type_name -> com.daml.ledger.api.v2.GlobalKeyWithMaintainers
	11, // 23: com.daml.ledger.api.v2.Node.Exercise.fetch:type_name -> com.daml.ledger.api.v2.Node.Fetch
	15, // 24: com.daml.ledger.api.v2.Node.Exercise.interface_id:type_name -> com.daml.ledger.api.v2.Identifier
	16, // 25: com.daml.ledger.api.v2.Node.Exercise.chosen_value:type_name -> com.daml.ledger.api.v2.Value
	16, // 26: com.daml.ledger.api.v2.Node.Exercise.exercise_result:type_name -> com.daml.ledger.api.v2.Value
	15, // 27: com.daml.ledger.api.v2.Node.LookupByKey.template_id:type_name -> com.daml.ledger.api.v2.Identifier
	6,  // 28: com.daml.ledger.api.v2.Node.LookupByKey.key:type_name -> com.daml.ledger.api.v2.GlobalKeyWithMaintainers
	29, // [29:29] is the sub-list for method output_type
	29, // [29:29] is the sub-list for method input_type
	29, // [29:29] is the sub-list for extension type_name
	29, // [29:29] is the sub-list for extension extendee
	0,  // [0:29] is the sub-list for field type_name
}

func init() { file_com_daml_ledger_api_v2_interactive_submission_data_proto_init() }
func file_com_daml_ledger_api_v2_interactive_submission_data_proto_init() {
	if File_com_daml_ledger_api_v2_interactive_submission_data_proto != nil {
		return
	}
	file_com_daml_ledger_api_v2_value_proto_init()
	file_com_daml_ledger_api_v2_interactive_submission_data_proto_msgTypes[1].OneofWrappers = []any{}
	file_com_daml_ledger_api_v2_interactive_submission_data_proto_msgTypes[3].OneofWrappers = []any{
		(*Node_Create)(nil),
		(*Node_Fetch_)(nil),
		(*Node_Exercise_)(nil),
		(*Node_Rollback_)(nil),
		(*Node_LookupByKey_)(nil),
	}
	file_com_daml_ledger_api_v2_interactive_submission_data_proto_msgTypes[4].OneofWrappers = []any{}
	file_com_daml_ledger_api_v2_interactive_submission_data_proto_msgTypes[9].OneofWrappers = []any{}
	file_com_daml_ledger_api_v2_interactive_submission_data_proto_msgTypes[14].OneofWrappers = []any{}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_com_daml_ledger_api_v2_interactive_submission_data_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   15,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_com_daml_ledger_api_v2_interactive_submission_data_proto_goTypes,
		DependencyIndexes: file_com_daml_ledger_api_v2_interactive_submission_data_proto_depIdxs,
		MessageInfos:      file_com_daml_ledger_api_v2_interactive_submission_data_proto_msgTypes,
	}.Build()
	File_com_daml_ledger_api_v2_interactive_submission_data_proto = out.File
	file_com_daml_ledger_api_v2_interactive_submission_data_proto_rawDesc = nil
	file_com_daml_ledger_api_v2_interactive_submission_data_proto_goTypes = nil
	file_com_daml_ledger_api_v2_interactive_submission_data_proto_depIdxs = nil
}
