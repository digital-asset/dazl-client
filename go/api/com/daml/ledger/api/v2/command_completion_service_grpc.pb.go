// Copyright (c) 2017-2025 Digital Asset (Switzerland) GmbH and/or its affiliates. All rights reserved.
// SPDX-License-Identifier: Apache-2.0
// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v6.30.0
// source: com/daml/ledger/api/v2/command_completion_service.proto

package v2

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	CommandCompletionService_CompletionStream_FullMethodName = "/com.daml.ledger.api.v2.CommandCompletionService/CompletionStream"
)

// CommandCompletionServiceClient is the client API for CommandCompletionService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type CommandCompletionServiceClient interface {
	CompletionStream(ctx context.Context, in *CompletionStreamRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[CompletionStreamResponse], error)
}

type commandCompletionServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewCommandCompletionServiceClient(cc grpc.ClientConnInterface) CommandCompletionServiceClient {
	return &commandCompletionServiceClient{cc}
}

func (c *commandCompletionServiceClient) CompletionStream(ctx context.Context, in *CompletionStreamRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[CompletionStreamResponse], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &CommandCompletionService_ServiceDesc.Streams[0], CommandCompletionService_CompletionStream_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[CompletionStreamRequest, CompletionStreamResponse]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type CommandCompletionService_CompletionStreamClient = grpc.ServerStreamingClient[CompletionStreamResponse]

// CommandCompletionServiceServer is the server API for CommandCompletionService service.
// All implementations must embed UnimplementedCommandCompletionServiceServer
// for forward compatibility.
type CommandCompletionServiceServer interface {
	CompletionStream(*CompletionStreamRequest, grpc.ServerStreamingServer[CompletionStreamResponse]) error
	mustEmbedUnimplementedCommandCompletionServiceServer()
}

// UnimplementedCommandCompletionServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedCommandCompletionServiceServer struct{}

func (UnimplementedCommandCompletionServiceServer) CompletionStream(*CompletionStreamRequest, grpc.ServerStreamingServer[CompletionStreamResponse]) error {
	return status.Errorf(codes.Unimplemented, "method CompletionStream not implemented")
}
func (UnimplementedCommandCompletionServiceServer) mustEmbedUnimplementedCommandCompletionServiceServer() {
}
func (UnimplementedCommandCompletionServiceServer) testEmbeddedByValue() {}

// UnsafeCommandCompletionServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CommandCompletionServiceServer will
// result in compilation errors.
type UnsafeCommandCompletionServiceServer interface {
	mustEmbedUnimplementedCommandCompletionServiceServer()
}

func RegisterCommandCompletionServiceServer(s grpc.ServiceRegistrar, srv CommandCompletionServiceServer) {
	// If the following call pancis, it indicates UnimplementedCommandCompletionServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&CommandCompletionService_ServiceDesc, srv)
}

func _CommandCompletionService_CompletionStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(CompletionStreamRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(CommandCompletionServiceServer).CompletionStream(m, &grpc.GenericServerStream[CompletionStreamRequest, CompletionStreamResponse]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type CommandCompletionService_CompletionStreamServer = grpc.ServerStreamingServer[CompletionStreamResponse]

// CommandCompletionService_ServiceDesc is the grpc.ServiceDesc for CommandCompletionService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var CommandCompletionService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "com.daml.ledger.api.v2.CommandCompletionService",
	HandlerType: (*CommandCompletionServiceServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "CompletionStream",
			Handler:       _CommandCompletionService_CompletionStream_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "com/daml/ledger/api/v2/command_completion_service.proto",
}
