// Copyright (c) 2017-2025 Digital Asset (Switzerland) GmbH and/or its affiliates. All rights reserved.
// SPDX-License-Identifier: Apache-2.0
// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v6.30.0
// source: com/daml/ledger/api/v2/update_service.proto

package v2

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	UpdateService_GetUpdates_FullMethodName                  = "/com.daml.ledger.api.v2.UpdateService/GetUpdates"
	UpdateService_GetUpdateTrees_FullMethodName              = "/com.daml.ledger.api.v2.UpdateService/GetUpdateTrees"
	UpdateService_GetTransactionTreeByEventId_FullMethodName = "/com.daml.ledger.api.v2.UpdateService/GetTransactionTreeByEventId"
	UpdateService_GetTransactionTreeById_FullMethodName      = "/com.daml.ledger.api.v2.UpdateService/GetTransactionTreeById"
	UpdateService_GetTransactionByEventId_FullMethodName     = "/com.daml.ledger.api.v2.UpdateService/GetTransactionByEventId"
	UpdateService_GetTransactionById_FullMethodName          = "/com.daml.ledger.api.v2.UpdateService/GetTransactionById"
)

// UpdateServiceClient is the client API for UpdateService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type UpdateServiceClient interface {
	GetUpdates(ctx context.Context, in *GetUpdatesRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[GetUpdatesResponse], error)
	GetUpdateTrees(ctx context.Context, in *GetUpdatesRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[GetUpdateTreesResponse], error)
	GetTransactionTreeByEventId(ctx context.Context, in *GetTransactionByEventIdRequest, opts ...grpc.CallOption) (*GetTransactionTreeResponse, error)
	GetTransactionTreeById(ctx context.Context, in *GetTransactionByIdRequest, opts ...grpc.CallOption) (*GetTransactionTreeResponse, error)
	GetTransactionByEventId(ctx context.Context, in *GetTransactionByEventIdRequest, opts ...grpc.CallOption) (*GetTransactionResponse, error)
	GetTransactionById(ctx context.Context, in *GetTransactionByIdRequest, opts ...grpc.CallOption) (*GetTransactionResponse, error)
}

type updateServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewUpdateServiceClient(cc grpc.ClientConnInterface) UpdateServiceClient {
	return &updateServiceClient{cc}
}

func (c *updateServiceClient) GetUpdates(ctx context.Context, in *GetUpdatesRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[GetUpdatesResponse], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &UpdateService_ServiceDesc.Streams[0], UpdateService_GetUpdates_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[GetUpdatesRequest, GetUpdatesResponse]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type UpdateService_GetUpdatesClient = grpc.ServerStreamingClient[GetUpdatesResponse]

func (c *updateServiceClient) GetUpdateTrees(ctx context.Context, in *GetUpdatesRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[GetUpdateTreesResponse], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &UpdateService_ServiceDesc.Streams[1], UpdateService_GetUpdateTrees_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[GetUpdatesRequest, GetUpdateTreesResponse]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type UpdateService_GetUpdateTreesClient = grpc.ServerStreamingClient[GetUpdateTreesResponse]

func (c *updateServiceClient) GetTransactionTreeByEventId(ctx context.Context, in *GetTransactionByEventIdRequest, opts ...grpc.CallOption) (*GetTransactionTreeResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetTransactionTreeResponse)
	err := c.cc.Invoke(ctx, UpdateService_GetTransactionTreeByEventId_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *updateServiceClient) GetTransactionTreeById(ctx context.Context, in *GetTransactionByIdRequest, opts ...grpc.CallOption) (*GetTransactionTreeResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetTransactionTreeResponse)
	err := c.cc.Invoke(ctx, UpdateService_GetTransactionTreeById_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *updateServiceClient) GetTransactionByEventId(ctx context.Context, in *GetTransactionByEventIdRequest, opts ...grpc.CallOption) (*GetTransactionResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetTransactionResponse)
	err := c.cc.Invoke(ctx, UpdateService_GetTransactionByEventId_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *updateServiceClient) GetTransactionById(ctx context.Context, in *GetTransactionByIdRequest, opts ...grpc.CallOption) (*GetTransactionResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetTransactionResponse)
	err := c.cc.Invoke(ctx, UpdateService_GetTransactionById_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// UpdateServiceServer is the server API for UpdateService service.
// All implementations must embed UnimplementedUpdateServiceServer
// for forward compatibility.
type UpdateServiceServer interface {
	GetUpdates(*GetUpdatesRequest, grpc.ServerStreamingServer[GetUpdatesResponse]) error
	GetUpdateTrees(*GetUpdatesRequest, grpc.ServerStreamingServer[GetUpdateTreesResponse]) error
	GetTransactionTreeByEventId(context.Context, *GetTransactionByEventIdRequest) (*GetTransactionTreeResponse, error)
	GetTransactionTreeById(context.Context, *GetTransactionByIdRequest) (*GetTransactionTreeResponse, error)
	GetTransactionByEventId(context.Context, *GetTransactionByEventIdRequest) (*GetTransactionResponse, error)
	GetTransactionById(context.Context, *GetTransactionByIdRequest) (*GetTransactionResponse, error)
	mustEmbedUnimplementedUpdateServiceServer()
}

// UnimplementedUpdateServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedUpdateServiceServer struct{}

func (UnimplementedUpdateServiceServer) GetUpdates(*GetUpdatesRequest, grpc.ServerStreamingServer[GetUpdatesResponse]) error {
	return status.Errorf(codes.Unimplemented, "method GetUpdates not implemented")
}
func (UnimplementedUpdateServiceServer) GetUpdateTrees(*GetUpdatesRequest, grpc.ServerStreamingServer[GetUpdateTreesResponse]) error {
	return status.Errorf(codes.Unimplemented, "method GetUpdateTrees not implemented")
}
func (UnimplementedUpdateServiceServer) GetTransactionTreeByEventId(context.Context, *GetTransactionByEventIdRequest) (*GetTransactionTreeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTransactionTreeByEventId not implemented")
}
func (UnimplementedUpdateServiceServer) GetTransactionTreeById(context.Context, *GetTransactionByIdRequest) (*GetTransactionTreeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTransactionTreeById not implemented")
}
func (UnimplementedUpdateServiceServer) GetTransactionByEventId(context.Context, *GetTransactionByEventIdRequest) (*GetTransactionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTransactionByEventId not implemented")
}
func (UnimplementedUpdateServiceServer) GetTransactionById(context.Context, *GetTransactionByIdRequest) (*GetTransactionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTransactionById not implemented")
}
func (UnimplementedUpdateServiceServer) mustEmbedUnimplementedUpdateServiceServer() {}
func (UnimplementedUpdateServiceServer) testEmbeddedByValue()                       {}

// UnsafeUpdateServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to UpdateServiceServer will
// result in compilation errors.
type UnsafeUpdateServiceServer interface {
	mustEmbedUnimplementedUpdateServiceServer()
}

func RegisterUpdateServiceServer(s grpc.ServiceRegistrar, srv UpdateServiceServer) {
	// If the following call pancis, it indicates UnimplementedUpdateServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&UpdateService_ServiceDesc, srv)
}

func _UpdateService_GetUpdates_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(GetUpdatesRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(UpdateServiceServer).GetUpdates(m, &grpc.GenericServerStream[GetUpdatesRequest, GetUpdatesResponse]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type UpdateService_GetUpdatesServer = grpc.ServerStreamingServer[GetUpdatesResponse]

func _UpdateService_GetUpdateTrees_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(GetUpdatesRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(UpdateServiceServer).GetUpdateTrees(m, &grpc.GenericServerStream[GetUpdatesRequest, GetUpdateTreesResponse]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type UpdateService_GetUpdateTreesServer = grpc.ServerStreamingServer[GetUpdateTreesResponse]

func _UpdateService_GetTransactionTreeByEventId_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTransactionByEventIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UpdateServiceServer).GetTransactionTreeByEventId(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UpdateService_GetTransactionTreeByEventId_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UpdateServiceServer).GetTransactionTreeByEventId(ctx, req.(*GetTransactionByEventIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UpdateService_GetTransactionTreeById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTransactionByIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UpdateServiceServer).GetTransactionTreeById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UpdateService_GetTransactionTreeById_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UpdateServiceServer).GetTransactionTreeById(ctx, req.(*GetTransactionByIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UpdateService_GetTransactionByEventId_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTransactionByEventIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UpdateServiceServer).GetTransactionByEventId(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UpdateService_GetTransactionByEventId_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UpdateServiceServer).GetTransactionByEventId(ctx, req.(*GetTransactionByEventIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UpdateService_GetTransactionById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTransactionByIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UpdateServiceServer).GetTransactionById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UpdateService_GetTransactionById_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UpdateServiceServer).GetTransactionById(ctx, req.(*GetTransactionByIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// UpdateService_ServiceDesc is the grpc.ServiceDesc for UpdateService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var UpdateService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "com.daml.ledger.api.v2.UpdateService",
	HandlerType: (*UpdateServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetTransactionTreeByEventId",
			Handler:    _UpdateService_GetTransactionTreeByEventId_Handler,
		},
		{
			MethodName: "GetTransactionTreeById",
			Handler:    _UpdateService_GetTransactionTreeById_Handler,
		},
		{
			MethodName: "GetTransactionByEventId",
			Handler:    _UpdateService_GetTransactionByEventId_Handler,
		},
		{
			MethodName: "GetTransactionById",
			Handler:    _UpdateService_GetTransactionById_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "GetUpdates",
			Handler:       _UpdateService_GetUpdates_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "GetUpdateTrees",
			Handler:       _UpdateService_GetUpdateTrees_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "com/daml/ledger/api/v2/update_service.proto",
}
