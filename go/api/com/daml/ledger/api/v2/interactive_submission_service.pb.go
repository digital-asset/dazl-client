// Copyright (c) 2017-2025 Digital Asset (Switzerland) GmbH and/or its affiliates. All rights reserved.
// SPDX-License-Identifier: Apache-2.0
// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.35.2
// 	protoc        v5.27.2
// source: com/daml/ledger/api/v2/interactive_submission_service.proto

package v2

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	durationpb "google.golang.org/protobuf/types/known/durationpb"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type SignatureFormat int32

const (
	SignatureFormat_SIGNATURE_FORMAT_UNSPECIFIED SignatureFormat = 0
	SignatureFormat_SIGNATURE_FORMAT_RAW         SignatureFormat = 1
)

// Enum value maps for SignatureFormat.
var (
	SignatureFormat_name = map[int32]string{
		0: "SIGNATURE_FORMAT_UNSPECIFIED",
		1: "SIGNATURE_FORMAT_RAW",
	}
	SignatureFormat_value = map[string]int32{
		"SIGNATURE_FORMAT_UNSPECIFIED": 0,
		"SIGNATURE_FORMAT_RAW":         1,
	}
)

func (x SignatureFormat) Enum() *SignatureFormat {
	p := new(SignatureFormat)
	*p = x
	return p
}

func (x SignatureFormat) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SignatureFormat) Descriptor() protoreflect.EnumDescriptor {
	return file_com_daml_ledger_api_v2_interactive_submission_service_proto_enumTypes[0].Descriptor()
}

func (SignatureFormat) Type() protoreflect.EnumType {
	return &file_com_daml_ledger_api_v2_interactive_submission_service_proto_enumTypes[0]
}

func (x SignatureFormat) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use SignatureFormat.Descriptor instead.
func (SignatureFormat) EnumDescriptor() ([]byte, []int) {
	return file_com_daml_ledger_api_v2_interactive_submission_service_proto_rawDescGZIP(), []int{0}
}

type PrepareSubmissionRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ApplicationId                string                 `protobuf:"bytes,1,opt,name=application_id,json=applicationId,proto3" json:"application_id,omitempty"`
	CommandId                    string                 `protobuf:"bytes,2,opt,name=command_id,json=commandId,proto3" json:"command_id,omitempty"`
	Commands                     []*Command             `protobuf:"bytes,3,rep,name=commands,proto3" json:"commands,omitempty"`
	MinLedgerTimeAbs             *timestamppb.Timestamp `protobuf:"bytes,4,opt,name=min_ledger_time_abs,json=minLedgerTimeAbs,proto3" json:"min_ledger_time_abs,omitempty"`
	MinLedgerTimeRel             *durationpb.Duration   `protobuf:"bytes,5,opt,name=min_ledger_time_rel,json=minLedgerTimeRel,proto3" json:"min_ledger_time_rel,omitempty"`
	ActAs                        []string               `protobuf:"bytes,6,rep,name=act_as,json=actAs,proto3" json:"act_as,omitempty"`
	ReadAs                       []string               `protobuf:"bytes,7,rep,name=read_as,json=readAs,proto3" json:"read_as,omitempty"`
	DisclosedContracts           []*DisclosedContract   `protobuf:"bytes,8,rep,name=disclosed_contracts,json=disclosedContracts,proto3" json:"disclosed_contracts,omitempty"`
	DomainId                     string                 `protobuf:"bytes,9,opt,name=domain_id,json=domainId,proto3" json:"domain_id,omitempty"`
	PackageIdSelectionPreference []string               `protobuf:"bytes,10,rep,name=package_id_selection_preference,json=packageIdSelectionPreference,proto3" json:"package_id_selection_preference,omitempty"`
}

func (x *PrepareSubmissionRequest) Reset() {
	*x = PrepareSubmissionRequest{}
	mi := &file_com_daml_ledger_api_v2_interactive_submission_service_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PrepareSubmissionRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PrepareSubmissionRequest) ProtoMessage() {}

func (x *PrepareSubmissionRequest) ProtoReflect() protoreflect.Message {
	mi := &file_com_daml_ledger_api_v2_interactive_submission_service_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PrepareSubmissionRequest.ProtoReflect.Descriptor instead.
func (*PrepareSubmissionRequest) Descriptor() ([]byte, []int) {
	return file_com_daml_ledger_api_v2_interactive_submission_service_proto_rawDescGZIP(), []int{0}
}

func (x *PrepareSubmissionRequest) GetApplicationId() string {
	if x != nil {
		return x.ApplicationId
	}
	return ""
}

func (x *PrepareSubmissionRequest) GetCommandId() string {
	if x != nil {
		return x.CommandId
	}
	return ""
}

func (x *PrepareSubmissionRequest) GetCommands() []*Command {
	if x != nil {
		return x.Commands
	}
	return nil
}

func (x *PrepareSubmissionRequest) GetMinLedgerTimeAbs() *timestamppb.Timestamp {
	if x != nil {
		return x.MinLedgerTimeAbs
	}
	return nil
}

func (x *PrepareSubmissionRequest) GetMinLedgerTimeRel() *durationpb.Duration {
	if x != nil {
		return x.MinLedgerTimeRel
	}
	return nil
}

func (x *PrepareSubmissionRequest) GetActAs() []string {
	if x != nil {
		return x.ActAs
	}
	return nil
}

func (x *PrepareSubmissionRequest) GetReadAs() []string {
	if x != nil {
		return x.ReadAs
	}
	return nil
}

func (x *PrepareSubmissionRequest) GetDisclosedContracts() []*DisclosedContract {
	if x != nil {
		return x.DisclosedContracts
	}
	return nil
}

func (x *PrepareSubmissionRequest) GetDomainId() string {
	if x != nil {
		return x.DomainId
	}
	return ""
}

func (x *PrepareSubmissionRequest) GetPackageIdSelectionPreference() []string {
	if x != nil {
		return x.PackageIdSelectionPreference
	}
	return nil
}

type PrepareSubmissionResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PreparedTransaction     *PreparedTransaction `protobuf:"bytes,1,opt,name=prepared_transaction,json=preparedTransaction,proto3" json:"prepared_transaction,omitempty"`
	PreparedTransactionHash []byte               `protobuf:"bytes,2,opt,name=prepared_transaction_hash,json=preparedTransactionHash,proto3" json:"prepared_transaction_hash,omitempty"`
}

func (x *PrepareSubmissionResponse) Reset() {
	*x = PrepareSubmissionResponse{}
	mi := &file_com_daml_ledger_api_v2_interactive_submission_service_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PrepareSubmissionResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PrepareSubmissionResponse) ProtoMessage() {}

func (x *PrepareSubmissionResponse) ProtoReflect() protoreflect.Message {
	mi := &file_com_daml_ledger_api_v2_interactive_submission_service_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PrepareSubmissionResponse.ProtoReflect.Descriptor instead.
func (*PrepareSubmissionResponse) Descriptor() ([]byte, []int) {
	return file_com_daml_ledger_api_v2_interactive_submission_service_proto_rawDescGZIP(), []int{1}
}

func (x *PrepareSubmissionResponse) GetPreparedTransaction() *PreparedTransaction {
	if x != nil {
		return x.PreparedTransaction
	}
	return nil
}

func (x *PrepareSubmissionResponse) GetPreparedTransactionHash() []byte {
	if x != nil {
		return x.PreparedTransactionHash
	}
	return nil
}

type Signature struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Format    SignatureFormat `protobuf:"varint,1,opt,name=format,proto3,enum=com.daml.ledger.api.v2.SignatureFormat" json:"format,omitempty"`
	Signature []byte          `protobuf:"bytes,2,opt,name=signature,proto3" json:"signature,omitempty"`
	SignedBy  string          `protobuf:"bytes,3,opt,name=signed_by,json=signedBy,proto3" json:"signed_by,omitempty"`
}

func (x *Signature) Reset() {
	*x = Signature{}
	mi := &file_com_daml_ledger_api_v2_interactive_submission_service_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Signature) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Signature) ProtoMessage() {}

func (x *Signature) ProtoReflect() protoreflect.Message {
	mi := &file_com_daml_ledger_api_v2_interactive_submission_service_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Signature.ProtoReflect.Descriptor instead.
func (*Signature) Descriptor() ([]byte, []int) {
	return file_com_daml_ledger_api_v2_interactive_submission_service_proto_rawDescGZIP(), []int{2}
}

func (x *Signature) GetFormat() SignatureFormat {
	if x != nil {
		return x.Format
	}
	return SignatureFormat_SIGNATURE_FORMAT_UNSPECIFIED
}

func (x *Signature) GetSignature() []byte {
	if x != nil {
		return x.Signature
	}
	return nil
}

func (x *Signature) GetSignedBy() string {
	if x != nil {
		return x.SignedBy
	}
	return ""
}

type SinglePartySignatures struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Party      string       `protobuf:"bytes,1,opt,name=party,proto3" json:"party,omitempty"`
	Signatures []*Signature `protobuf:"bytes,2,rep,name=signatures,proto3" json:"signatures,omitempty"`
}

func (x *SinglePartySignatures) Reset() {
	*x = SinglePartySignatures{}
	mi := &file_com_daml_ledger_api_v2_interactive_submission_service_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SinglePartySignatures) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SinglePartySignatures) ProtoMessage() {}

func (x *SinglePartySignatures) ProtoReflect() protoreflect.Message {
	mi := &file_com_daml_ledger_api_v2_interactive_submission_service_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SinglePartySignatures.ProtoReflect.Descriptor instead.
func (*SinglePartySignatures) Descriptor() ([]byte, []int) {
	return file_com_daml_ledger_api_v2_interactive_submission_service_proto_rawDescGZIP(), []int{3}
}

func (x *SinglePartySignatures) GetParty() string {
	if x != nil {
		return x.Party
	}
	return ""
}

func (x *SinglePartySignatures) GetSignatures() []*Signature {
	if x != nil {
		return x.Signatures
	}
	return nil
}

type PartySignatures struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Signatures []*SinglePartySignatures `protobuf:"bytes,1,rep,name=signatures,proto3" json:"signatures,omitempty"`
}

func (x *PartySignatures) Reset() {
	*x = PartySignatures{}
	mi := &file_com_daml_ledger_api_v2_interactive_submission_service_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PartySignatures) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PartySignatures) ProtoMessage() {}

func (x *PartySignatures) ProtoReflect() protoreflect.Message {
	mi := &file_com_daml_ledger_api_v2_interactive_submission_service_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PartySignatures.ProtoReflect.Descriptor instead.
func (*PartySignatures) Descriptor() ([]byte, []int) {
	return file_com_daml_ledger_api_v2_interactive_submission_service_proto_rawDescGZIP(), []int{4}
}

func (x *PartySignatures) GetSignatures() []*SinglePartySignatures {
	if x != nil {
		return x.Signatures
	}
	return nil
}

type ExecuteSubmissionRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PreparedTransaction *PreparedTransaction `protobuf:"bytes,1,opt,name=prepared_transaction,json=preparedTransaction,proto3" json:"prepared_transaction,omitempty"`
	PartiesSignatures   *PartySignatures     `protobuf:"bytes,2,opt,name=parties_signatures,json=partiesSignatures,proto3" json:"parties_signatures,omitempty"`
	WorkflowId          string               `protobuf:"bytes,3,opt,name=workflow_id,json=workflowId,proto3" json:"workflow_id,omitempty"`
	// Types that are assignable to DeduplicationPeriod:
	//
	//	*ExecuteSubmissionRequest_DeduplicationDuration
	//	*ExecuteSubmissionRequest_DeduplicationOffset
	DeduplicationPeriod isExecuteSubmissionRequest_DeduplicationPeriod `protobuf_oneof:"deduplication_period"`
	SubmissionId        string                                         `protobuf:"bytes,6,opt,name=submission_id,json=submissionId,proto3" json:"submission_id,omitempty"`
	ApplicationId       string                                         `protobuf:"bytes,7,opt,name=application_id,json=applicationId,proto3" json:"application_id,omitempty"`
}

func (x *ExecuteSubmissionRequest) Reset() {
	*x = ExecuteSubmissionRequest{}
	mi := &file_com_daml_ledger_api_v2_interactive_submission_service_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ExecuteSubmissionRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExecuteSubmissionRequest) ProtoMessage() {}

func (x *ExecuteSubmissionRequest) ProtoReflect() protoreflect.Message {
	mi := &file_com_daml_ledger_api_v2_interactive_submission_service_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExecuteSubmissionRequest.ProtoReflect.Descriptor instead.
func (*ExecuteSubmissionRequest) Descriptor() ([]byte, []int) {
	return file_com_daml_ledger_api_v2_interactive_submission_service_proto_rawDescGZIP(), []int{5}
}

func (x *ExecuteSubmissionRequest) GetPreparedTransaction() *PreparedTransaction {
	if x != nil {
		return x.PreparedTransaction
	}
	return nil
}

func (x *ExecuteSubmissionRequest) GetPartiesSignatures() *PartySignatures {
	if x != nil {
		return x.PartiesSignatures
	}
	return nil
}

func (x *ExecuteSubmissionRequest) GetWorkflowId() string {
	if x != nil {
		return x.WorkflowId
	}
	return ""
}

func (m *ExecuteSubmissionRequest) GetDeduplicationPeriod() isExecuteSubmissionRequest_DeduplicationPeriod {
	if m != nil {
		return m.DeduplicationPeriod
	}
	return nil
}

func (x *ExecuteSubmissionRequest) GetDeduplicationDuration() *durationpb.Duration {
	if x, ok := x.GetDeduplicationPeriod().(*ExecuteSubmissionRequest_DeduplicationDuration); ok {
		return x.DeduplicationDuration
	}
	return nil
}

func (x *ExecuteSubmissionRequest) GetDeduplicationOffset() int64 {
	if x, ok := x.GetDeduplicationPeriod().(*ExecuteSubmissionRequest_DeduplicationOffset); ok {
		return x.DeduplicationOffset
	}
	return 0
}

func (x *ExecuteSubmissionRequest) GetSubmissionId() string {
	if x != nil {
		return x.SubmissionId
	}
	return ""
}

func (x *ExecuteSubmissionRequest) GetApplicationId() string {
	if x != nil {
		return x.ApplicationId
	}
	return ""
}

type isExecuteSubmissionRequest_DeduplicationPeriod interface {
	isExecuteSubmissionRequest_DeduplicationPeriod()
}

type ExecuteSubmissionRequest_DeduplicationDuration struct {
	DeduplicationDuration *durationpb.Duration `protobuf:"bytes,4,opt,name=deduplication_duration,json=deduplicationDuration,proto3,oneof"`
}

type ExecuteSubmissionRequest_DeduplicationOffset struct {
	DeduplicationOffset int64 `protobuf:"varint,5,opt,name=deduplication_offset,json=deduplicationOffset,proto3,oneof"`
}

func (*ExecuteSubmissionRequest_DeduplicationDuration) isExecuteSubmissionRequest_DeduplicationPeriod() {
}

func (*ExecuteSubmissionRequest_DeduplicationOffset) isExecuteSubmissionRequest_DeduplicationPeriod() {
}

type ExecuteSubmissionResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *ExecuteSubmissionResponse) Reset() {
	*x = ExecuteSubmissionResponse{}
	mi := &file_com_daml_ledger_api_v2_interactive_submission_service_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ExecuteSubmissionResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExecuteSubmissionResponse) ProtoMessage() {}

func (x *ExecuteSubmissionResponse) ProtoReflect() protoreflect.Message {
	mi := &file_com_daml_ledger_api_v2_interactive_submission_service_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExecuteSubmissionResponse.ProtoReflect.Descriptor instead.
func (*ExecuteSubmissionResponse) Descriptor() ([]byte, []int) {
	return file_com_daml_ledger_api_v2_interactive_submission_service_proto_rawDescGZIP(), []int{6}
}

var File_com_daml_ledger_api_v2_interactive_submission_service_proto protoreflect.FileDescriptor

var file_com_daml_ledger_api_v2_interactive_submission_service_proto_rawDesc = []byte{
	0x0a, 0x3b, 0x63, 0x6f, 0x6d, 0x2f, 0x64, 0x61, 0x6d, 0x6c, 0x2f, 0x6c, 0x65, 0x64, 0x67, 0x65,
	0x72, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x32, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x61, 0x63,
	0x74, 0x69, 0x76, 0x65, 0x5f, 0x73, 0x75, 0x62, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x16, 0x63,
	0x6f, 0x6d, 0x2e, 0x64, 0x61, 0x6d, 0x6c, 0x2e, 0x6c, 0x65, 0x64, 0x67, 0x65, 0x72, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x76, 0x32, 0x1a, 0x25, 0x63, 0x6f, 0x6d, 0x2f, 0x64, 0x61, 0x6d, 0x6c, 0x2f,
	0x6c, 0x65, 0x64, 0x67, 0x65, 0x72, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x32, 0x2f, 0x63, 0x6f,
	0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x38, 0x63, 0x6f,
	0x6d, 0x2f, 0x64, 0x61, 0x6d, 0x6c, 0x2f, 0x6c, 0x65, 0x64, 0x67, 0x65, 0x72, 0x2f, 0x61, 0x70,
	0x69, 0x2f, 0x76, 0x32, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65,
	0x5f, 0x73, 0x75, 0x62, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x64, 0x61, 0x74, 0x61,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d,
	0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xa2, 0x04, 0x0a, 0x18, 0x50, 0x72, 0x65, 0x70,
	0x61, 0x72, 0x65, 0x53, 0x75, 0x62, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x25, 0x0a, 0x0e, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x61, 0x70,
	0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x63,
	0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x09, 0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x49, 0x64, 0x12, 0x3b, 0x0a, 0x08, 0x63, 0x6f,
	0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x63,
	0x6f, 0x6d, 0x2e, 0x64, 0x61, 0x6d, 0x6c, 0x2e, 0x6c, 0x65, 0x64, 0x67, 0x65, 0x72, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x76, 0x32, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x52, 0x08, 0x63,
	0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x73, 0x12, 0x49, 0x0a, 0x13, 0x6d, 0x69, 0x6e, 0x5f, 0x6c,
	0x65, 0x64, 0x67, 0x65, 0x72, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x61, 0x62, 0x73, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70,
	0x52, 0x10, 0x6d, 0x69, 0x6e, 0x4c, 0x65, 0x64, 0x67, 0x65, 0x72, 0x54, 0x69, 0x6d, 0x65, 0x41,
	0x62, 0x73, 0x12, 0x48, 0x0a, 0x13, 0x6d, 0x69, 0x6e, 0x5f, 0x6c, 0x65, 0x64, 0x67, 0x65, 0x72,
	0x5f, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x72, 0x65, 0x6c, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x19, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x10, 0x6d, 0x69, 0x6e, 0x4c,
	0x65, 0x64, 0x67, 0x65, 0x72, 0x54, 0x69, 0x6d, 0x65, 0x52, 0x65, 0x6c, 0x12, 0x15, 0x0a, 0x06,
	0x61, 0x63, 0x74, 0x5f, 0x61, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x09, 0x52, 0x05, 0x61, 0x63,
	0x74, 0x41, 0x73, 0x12, 0x17, 0x0a, 0x07, 0x72, 0x65, 0x61, 0x64, 0x5f, 0x61, 0x73, 0x18, 0x07,
	0x20, 0x03, 0x28, 0x09, 0x52, 0x06, 0x72, 0x65, 0x61, 0x64, 0x41, 0x73, 0x12, 0x5a, 0x0a, 0x13,
	0x64, 0x69, 0x73, 0x63, 0x6c, 0x6f, 0x73, 0x65, 0x64, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61,
	0x63, 0x74, 0x73, 0x18, 0x08, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x63, 0x6f, 0x6d, 0x2e,
	0x64, 0x61, 0x6d, 0x6c, 0x2e, 0x6c, 0x65, 0x64, 0x67, 0x65, 0x72, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x76, 0x32, 0x2e, 0x44, 0x69, 0x73, 0x63, 0x6c, 0x6f, 0x73, 0x65, 0x64, 0x43, 0x6f, 0x6e, 0x74,
	0x72, 0x61, 0x63, 0x74, 0x52, 0x12, 0x64, 0x69, 0x73, 0x63, 0x6c, 0x6f, 0x73, 0x65, 0x64, 0x43,
	0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x73, 0x12, 0x1b, 0x0a, 0x09, 0x64, 0x6f, 0x6d, 0x61,
	0x69, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x64, 0x6f, 0x6d,
	0x61, 0x69, 0x6e, 0x49, 0x64, 0x12, 0x45, 0x0a, 0x1f, 0x70, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65,
	0x5f, 0x69, 0x64, 0x5f, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x70, 0x72,
	0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x18, 0x0a, 0x20, 0x03, 0x28, 0x09, 0x52, 0x1c,
	0x70, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x49, 0x64, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x50, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x22, 0xb7, 0x01, 0x0a,
	0x19, 0x50, 0x72, 0x65, 0x70, 0x61, 0x72, 0x65, 0x53, 0x75, 0x62, 0x6d, 0x69, 0x73, 0x73, 0x69,
	0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x5e, 0x0a, 0x14, 0x70, 0x72,
	0x65, 0x70, 0x61, 0x72, 0x65, 0x64, 0x5f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x64,
	0x61, 0x6d, 0x6c, 0x2e, 0x6c, 0x65, 0x64, 0x67, 0x65, 0x72, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76,
	0x32, 0x2e, 0x50, 0x72, 0x65, 0x70, 0x61, 0x72, 0x65, 0x64, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x13, 0x70, 0x72, 0x65, 0x70, 0x61, 0x72, 0x65, 0x64, 0x54,
	0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x3a, 0x0a, 0x19, 0x70, 0x72,
	0x65, 0x70, 0x61, 0x72, 0x65, 0x64, 0x5f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x5f, 0x68, 0x61, 0x73, 0x68, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x17, 0x70,
	0x72, 0x65, 0x70, 0x61, 0x72, 0x65, 0x64, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x48, 0x61, 0x73, 0x68, 0x22, 0x87, 0x01, 0x0a, 0x09, 0x53, 0x69, 0x67, 0x6e, 0x61,
	0x74, 0x75, 0x72, 0x65, 0x12, 0x3f, 0x0a, 0x06, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x27, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x64, 0x61, 0x6d, 0x6c, 0x2e,
	0x6c, 0x65, 0x64, 0x67, 0x65, 0x72, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x32, 0x2e, 0x53, 0x69,
	0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x52, 0x06, 0x66,
	0x6f, 0x72, 0x6d, 0x61, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75,
	0x72, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x09, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74,
	0x75, 0x72, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x73, 0x69, 0x67, 0x6e, 0x65, 0x64, 0x5f, 0x62, 0x79,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x73, 0x69, 0x67, 0x6e, 0x65, 0x64, 0x42, 0x79,
	0x22, 0x70, 0x0a, 0x15, 0x53, 0x69, 0x6e, 0x67, 0x6c, 0x65, 0x50, 0x61, 0x72, 0x74, 0x79, 0x53,
	0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x70, 0x61, 0x72,
	0x74, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x70, 0x61, 0x72, 0x74, 0x79, 0x12,
	0x41, 0x0a, 0x0a, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x73, 0x18, 0x02, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x64, 0x61, 0x6d, 0x6c, 0x2e, 0x6c,
	0x65, 0x64, 0x67, 0x65, 0x72, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x32, 0x2e, 0x53, 0x69, 0x67,
	0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x52, 0x0a, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72,
	0x65, 0x73, 0x22, 0x60, 0x0a, 0x0f, 0x50, 0x61, 0x72, 0x74, 0x79, 0x53, 0x69, 0x67, 0x6e, 0x61,
	0x74, 0x75, 0x72, 0x65, 0x73, 0x12, 0x4d, 0x0a, 0x0a, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75,
	0x72, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x63, 0x6f, 0x6d, 0x2e,
	0x64, 0x61, 0x6d, 0x6c, 0x2e, 0x6c, 0x65, 0x64, 0x67, 0x65, 0x72, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x76, 0x32, 0x2e, 0x53, 0x69, 0x6e, 0x67, 0x6c, 0x65, 0x50, 0x61, 0x72, 0x74, 0x79, 0x53, 0x69,
	0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x73, 0x52, 0x0a, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74,
	0x75, 0x72, 0x65, 0x73, 0x22, 0xe0, 0x03, 0x0a, 0x18, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x65,
	0x53, 0x75, 0x62, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x5e, 0x0a, 0x14, 0x70, 0x72, 0x65, 0x70, 0x61, 0x72, 0x65, 0x64, 0x5f, 0x74, 0x72,
	0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x2b, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x64, 0x61, 0x6d, 0x6c, 0x2e, 0x6c, 0x65, 0x64, 0x67, 0x65,
	0x72, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x32, 0x2e, 0x50, 0x72, 0x65, 0x70, 0x61, 0x72, 0x65,
	0x64, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x13, 0x70, 0x72,
	0x65, 0x70, 0x61, 0x72, 0x65, 0x64, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x56, 0x0a, 0x12, 0x70, 0x61, 0x72, 0x74, 0x69, 0x65, 0x73, 0x5f, 0x73, 0x69, 0x67,
	0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e,
	0x63, 0x6f, 0x6d, 0x2e, 0x64, 0x61, 0x6d, 0x6c, 0x2e, 0x6c, 0x65, 0x64, 0x67, 0x65, 0x72, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x76, 0x32, 0x2e, 0x50, 0x61, 0x72, 0x74, 0x79, 0x53, 0x69, 0x67, 0x6e,
	0x61, 0x74, 0x75, 0x72, 0x65, 0x73, 0x52, 0x11, 0x70, 0x61, 0x72, 0x74, 0x69, 0x65, 0x73, 0x53,
	0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x73, 0x12, 0x1f, 0x0a, 0x0b, 0x77, 0x6f, 0x72,
	0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a,
	0x77, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x49, 0x64, 0x12, 0x52, 0x0a, 0x16, 0x64, 0x65,
	0x64, 0x75, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x64, 0x75, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44, 0x75, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x00, 0x52, 0x15, 0x64, 0x65, 0x64, 0x75, 0x70, 0x6c, 0x69,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x33,
	0x0a, 0x14, 0x64, 0x65, 0x64, 0x75, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f,
	0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x48, 0x00, 0x52, 0x13,
	0x64, 0x65, 0x64, 0x75, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4f, 0x66, 0x66,
	0x73, 0x65, 0x74, 0x12, 0x23, 0x0a, 0x0d, 0x73, 0x75, 0x62, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f,
	0x6e, 0x5f, 0x69, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x73, 0x75, 0x62, 0x6d,
	0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x25, 0x0a, 0x0e, 0x61, 0x70, 0x70, 0x6c,
	0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0d, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x42,
	0x16, 0x0a, 0x14, 0x64, 0x65, 0x64, 0x75, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x5f, 0x70, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x22, 0x1b, 0x0a, 0x19, 0x45, 0x78, 0x65, 0x63, 0x75,
	0x74, 0x65, 0x53, 0x75, 0x62, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x2a, 0x4d, 0x0a, 0x0f, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72,
	0x65, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x12, 0x20, 0x0a, 0x1c, 0x53, 0x49, 0x47, 0x4e, 0x41,
	0x54, 0x55, 0x52, 0x45, 0x5f, 0x46, 0x4f, 0x52, 0x4d, 0x41, 0x54, 0x5f, 0x55, 0x4e, 0x53, 0x50,
	0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x18, 0x0a, 0x14, 0x53, 0x49, 0x47,
	0x4e, 0x41, 0x54, 0x55, 0x52, 0x45, 0x5f, 0x46, 0x4f, 0x52, 0x4d, 0x41, 0x54, 0x5f, 0x52, 0x41,
	0x57, 0x10, 0x01, 0x32, 0x92, 0x02, 0x0a, 0x1c, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x61, 0x63, 0x74,
	0x69, 0x76, 0x65, 0x53, 0x75, 0x62, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x12, 0x78, 0x0a, 0x11, 0x50, 0x72, 0x65, 0x70, 0x61, 0x72, 0x65, 0x53,
	0x75, 0x62, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x30, 0x2e, 0x63, 0x6f, 0x6d, 0x2e,
	0x64, 0x61, 0x6d, 0x6c, 0x2e, 0x6c, 0x65, 0x64, 0x67, 0x65, 0x72, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x76, 0x32, 0x2e, 0x50, 0x72, 0x65, 0x70, 0x61, 0x72, 0x65, 0x53, 0x75, 0x62, 0x6d, 0x69, 0x73,
	0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x31, 0x2e, 0x63, 0x6f,
	0x6d, 0x2e, 0x64, 0x61, 0x6d, 0x6c, 0x2e, 0x6c, 0x65, 0x64, 0x67, 0x65, 0x72, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x76, 0x32, 0x2e, 0x50, 0x72, 0x65, 0x70, 0x61, 0x72, 0x65, 0x53, 0x75, 0x62, 0x6d,
	0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x78,
	0x0a, 0x11, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x65, 0x53, 0x75, 0x62, 0x6d, 0x69, 0x73, 0x73,
	0x69, 0x6f, 0x6e, 0x12, 0x30, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x64, 0x61, 0x6d, 0x6c, 0x2e, 0x6c,
	0x65, 0x64, 0x67, 0x65, 0x72, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x32, 0x2e, 0x45, 0x78, 0x65,
	0x63, 0x75, 0x74, 0x65, 0x53, 0x75, 0x62, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x31, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x64, 0x61, 0x6d, 0x6c,
	0x2e, 0x6c, 0x65, 0x64, 0x67, 0x65, 0x72, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x32, 0x2e, 0x45,
	0x78, 0x65, 0x63, 0x75, 0x74, 0x65, 0x53, 0x75, 0x62, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x42, 0xa0, 0x01, 0x0a, 0x16, 0x63, 0x6f, 0x6d,
	0x2e, 0x64, 0x61, 0x6d, 0x6c, 0x2e, 0x6c, 0x65, 0x64, 0x67, 0x65, 0x72, 0x2e, 0x61, 0x70, 0x69,
	0x2e, 0x76, 0x32, 0x42, 0x26, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65,
	0x53, 0x75, 0x62, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x4f, 0x75, 0x74, 0x65, 0x72, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x5a, 0x45, 0x67, 0x69, 0x74,
	0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x64, 0x69, 0x67, 0x69, 0x74, 0x61, 0x6c, 0x2d,
	0x61, 0x73, 0x73, 0x65, 0x74, 0x2f, 0x64, 0x61, 0x7a, 0x6c, 0x2d, 0x63, 0x6c, 0x69, 0x65, 0x6e,
	0x74, 0x2f, 0x76, 0x38, 0x2f, 0x67, 0x6f, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x63, 0x6f, 0x6d, 0x2f,
	0x64, 0x61, 0x6d, 0x6c, 0x2f, 0x6c, 0x65, 0x64, 0x67, 0x65, 0x72, 0x2f, 0x61, 0x70, 0x69, 0x2f,
	0x76, 0x32, 0xaa, 0x02, 0x16, 0x43, 0x6f, 0x6d, 0x2e, 0x44, 0x61, 0x6d, 0x6c, 0x2e, 0x4c, 0x65,
	0x64, 0x67, 0x65, 0x72, 0x2e, 0x41, 0x70, 0x69, 0x2e, 0x56, 0x32, 0x62, 0x06, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x33,
}

var (
	file_com_daml_ledger_api_v2_interactive_submission_service_proto_rawDescOnce sync.Once
	file_com_daml_ledger_api_v2_interactive_submission_service_proto_rawDescData = file_com_daml_ledger_api_v2_interactive_submission_service_proto_rawDesc
)

func file_com_daml_ledger_api_v2_interactive_submission_service_proto_rawDescGZIP() []byte {
	file_com_daml_ledger_api_v2_interactive_submission_service_proto_rawDescOnce.Do(func() {
		file_com_daml_ledger_api_v2_interactive_submission_service_proto_rawDescData = protoimpl.X.CompressGZIP(file_com_daml_ledger_api_v2_interactive_submission_service_proto_rawDescData)
	})
	return file_com_daml_ledger_api_v2_interactive_submission_service_proto_rawDescData
}

var file_com_daml_ledger_api_v2_interactive_submission_service_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_com_daml_ledger_api_v2_interactive_submission_service_proto_msgTypes = make([]protoimpl.MessageInfo, 7)
var file_com_daml_ledger_api_v2_interactive_submission_service_proto_goTypes = []any{
	(SignatureFormat)(0),              // 0: com.daml.ledger.api.v2.SignatureFormat
	(*PrepareSubmissionRequest)(nil),  // 1: com.daml.ledger.api.v2.PrepareSubmissionRequest
	(*PrepareSubmissionResponse)(nil), // 2: com.daml.ledger.api.v2.PrepareSubmissionResponse
	(*Signature)(nil),                 // 3: com.daml.ledger.api.v2.Signature
	(*SinglePartySignatures)(nil),     // 4: com.daml.ledger.api.v2.SinglePartySignatures
	(*PartySignatures)(nil),           // 5: com.daml.ledger.api.v2.PartySignatures
	(*ExecuteSubmissionRequest)(nil),  // 6: com.daml.ledger.api.v2.ExecuteSubmissionRequest
	(*ExecuteSubmissionResponse)(nil), // 7: com.daml.ledger.api.v2.ExecuteSubmissionResponse
	(*Command)(nil),                   // 8: com.daml.ledger.api.v2.Command
	(*timestamppb.Timestamp)(nil),     // 9: google.protobuf.Timestamp
	(*durationpb.Duration)(nil),       // 10: google.protobuf.Duration
	(*DisclosedContract)(nil),         // 11: com.daml.ledger.api.v2.DisclosedContract
	(*PreparedTransaction)(nil),       // 12: com.daml.ledger.api.v2.PreparedTransaction
}
var file_com_daml_ledger_api_v2_interactive_submission_service_proto_depIdxs = []int32{
	8,  // 0: com.daml.ledger.api.v2.PrepareSubmissionRequest.commands:type_name -> com.daml.ledger.api.v2.Command
	9,  // 1: com.daml.ledger.api.v2.PrepareSubmissionRequest.min_ledger_time_abs:type_name -> google.protobuf.Timestamp
	10, // 2: com.daml.ledger.api.v2.PrepareSubmissionRequest.min_ledger_time_rel:type_name -> google.protobuf.Duration
	11, // 3: com.daml.ledger.api.v2.PrepareSubmissionRequest.disclosed_contracts:type_name -> com.daml.ledger.api.v2.DisclosedContract
	12, // 4: com.daml.ledger.api.v2.PrepareSubmissionResponse.prepared_transaction:type_name -> com.daml.ledger.api.v2.PreparedTransaction
	0,  // 5: com.daml.ledger.api.v2.Signature.format:type_name -> com.daml.ledger.api.v2.SignatureFormat
	3,  // 6: com.daml.ledger.api.v2.SinglePartySignatures.signatures:type_name -> com.daml.ledger.api.v2.Signature
	4,  // 7: com.daml.ledger.api.v2.PartySignatures.signatures:type_name -> com.daml.ledger.api.v2.SinglePartySignatures
	12, // 8: com.daml.ledger.api.v2.ExecuteSubmissionRequest.prepared_transaction:type_name -> com.daml.ledger.api.v2.PreparedTransaction
	5,  // 9: com.daml.ledger.api.v2.ExecuteSubmissionRequest.parties_signatures:type_name -> com.daml.ledger.api.v2.PartySignatures
	10, // 10: com.daml.ledger.api.v2.ExecuteSubmissionRequest.deduplication_duration:type_name -> google.protobuf.Duration
	1,  // 11: com.daml.ledger.api.v2.InteractiveSubmissionService.PrepareSubmission:input_type -> com.daml.ledger.api.v2.PrepareSubmissionRequest
	6,  // 12: com.daml.ledger.api.v2.InteractiveSubmissionService.ExecuteSubmission:input_type -> com.daml.ledger.api.v2.ExecuteSubmissionRequest
	2,  // 13: com.daml.ledger.api.v2.InteractiveSubmissionService.PrepareSubmission:output_type -> com.daml.ledger.api.v2.PrepareSubmissionResponse
	7,  // 14: com.daml.ledger.api.v2.InteractiveSubmissionService.ExecuteSubmission:output_type -> com.daml.ledger.api.v2.ExecuteSubmissionResponse
	13, // [13:15] is the sub-list for method output_type
	11, // [11:13] is the sub-list for method input_type
	11, // [11:11] is the sub-list for extension type_name
	11, // [11:11] is the sub-list for extension extendee
	0,  // [0:11] is the sub-list for field type_name
}

func init() { file_com_daml_ledger_api_v2_interactive_submission_service_proto_init() }
func file_com_daml_ledger_api_v2_interactive_submission_service_proto_init() {
	if File_com_daml_ledger_api_v2_interactive_submission_service_proto != nil {
		return
	}
	file_com_daml_ledger_api_v2_commands_proto_init()
	file_com_daml_ledger_api_v2_interactive_submission_data_proto_init()
	file_com_daml_ledger_api_v2_interactive_submission_service_proto_msgTypes[5].OneofWrappers = []any{
		(*ExecuteSubmissionRequest_DeduplicationDuration)(nil),
		(*ExecuteSubmissionRequest_DeduplicationOffset)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_com_daml_ledger_api_v2_interactive_submission_service_proto_rawDesc,
			NumEnums:      1,
			NumMessages:   7,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_com_daml_ledger_api_v2_interactive_submission_service_proto_goTypes,
		DependencyIndexes: file_com_daml_ledger_api_v2_interactive_submission_service_proto_depIdxs,
		EnumInfos:         file_com_daml_ledger_api_v2_interactive_submission_service_proto_enumTypes,
		MessageInfos:      file_com_daml_ledger_api_v2_interactive_submission_service_proto_msgTypes,
	}.Build()
	File_com_daml_ledger_api_v2_interactive_submission_service_proto = out.File
	file_com_daml_ledger_api_v2_interactive_submission_service_proto_rawDesc = nil
	file_com_daml_ledger_api_v2_interactive_submission_service_proto_goTypes = nil
	file_com_daml_ledger_api_v2_interactive_submission_service_proto_depIdxs = nil
}
