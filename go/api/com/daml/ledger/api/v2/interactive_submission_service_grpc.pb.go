// Copyright (c) 2017-2025 Digital Asset (Switzerland) GmbH and/or its affiliates. All rights reserved.
// SPDX-License-Identifier: Apache-2.0
// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v6.30.0
// source: com/daml/ledger/api/v2/interactive_submission_service.proto

package v2

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	InteractiveSubmissionService_PrepareSubmission_FullMethodName = "/com.daml.ledger.api.v2.InteractiveSubmissionService/PrepareSubmission"
	InteractiveSubmissionService_ExecuteSubmission_FullMethodName = "/com.daml.ledger.api.v2.InteractiveSubmissionService/ExecuteSubmission"
)

// InteractiveSubmissionServiceClient is the client API for InteractiveSubmissionService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type InteractiveSubmissionServiceClient interface {
	PrepareSubmission(ctx context.Context, in *PrepareSubmissionRequest, opts ...grpc.CallOption) (*PrepareSubmissionResponse, error)
	ExecuteSubmission(ctx context.Context, in *ExecuteSubmissionRequest, opts ...grpc.CallOption) (*ExecuteSubmissionResponse, error)
}

type interactiveSubmissionServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewInteractiveSubmissionServiceClient(cc grpc.ClientConnInterface) InteractiveSubmissionServiceClient {
	return &interactiveSubmissionServiceClient{cc}
}

func (c *interactiveSubmissionServiceClient) PrepareSubmission(ctx context.Context, in *PrepareSubmissionRequest, opts ...grpc.CallOption) (*PrepareSubmissionResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(PrepareSubmissionResponse)
	err := c.cc.Invoke(ctx, InteractiveSubmissionService_PrepareSubmission_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *interactiveSubmissionServiceClient) ExecuteSubmission(ctx context.Context, in *ExecuteSubmissionRequest, opts ...grpc.CallOption) (*ExecuteSubmissionResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ExecuteSubmissionResponse)
	err := c.cc.Invoke(ctx, InteractiveSubmissionService_ExecuteSubmission_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// InteractiveSubmissionServiceServer is the server API for InteractiveSubmissionService service.
// All implementations must embed UnimplementedInteractiveSubmissionServiceServer
// for forward compatibility.
type InteractiveSubmissionServiceServer interface {
	PrepareSubmission(context.Context, *PrepareSubmissionRequest) (*PrepareSubmissionResponse, error)
	ExecuteSubmission(context.Context, *ExecuteSubmissionRequest) (*ExecuteSubmissionResponse, error)
	mustEmbedUnimplementedInteractiveSubmissionServiceServer()
}

// UnimplementedInteractiveSubmissionServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedInteractiveSubmissionServiceServer struct{}

func (UnimplementedInteractiveSubmissionServiceServer) PrepareSubmission(context.Context, *PrepareSubmissionRequest) (*PrepareSubmissionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PrepareSubmission not implemented")
}
func (UnimplementedInteractiveSubmissionServiceServer) ExecuteSubmission(context.Context, *ExecuteSubmissionRequest) (*ExecuteSubmissionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ExecuteSubmission not implemented")
}
func (UnimplementedInteractiveSubmissionServiceServer) mustEmbedUnimplementedInteractiveSubmissionServiceServer() {
}
func (UnimplementedInteractiveSubmissionServiceServer) testEmbeddedByValue() {}

// UnsafeInteractiveSubmissionServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to InteractiveSubmissionServiceServer will
// result in compilation errors.
type UnsafeInteractiveSubmissionServiceServer interface {
	mustEmbedUnimplementedInteractiveSubmissionServiceServer()
}

func RegisterInteractiveSubmissionServiceServer(s grpc.ServiceRegistrar, srv InteractiveSubmissionServiceServer) {
	// If the following call pancis, it indicates UnimplementedInteractiveSubmissionServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&InteractiveSubmissionService_ServiceDesc, srv)
}

func _InteractiveSubmissionService_PrepareSubmission_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PrepareSubmissionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InteractiveSubmissionServiceServer).PrepareSubmission(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: InteractiveSubmissionService_PrepareSubmission_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InteractiveSubmissionServiceServer).PrepareSubmission(ctx, req.(*PrepareSubmissionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _InteractiveSubmissionService_ExecuteSubmission_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ExecuteSubmissionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InteractiveSubmissionServiceServer).ExecuteSubmission(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: InteractiveSubmissionService_ExecuteSubmission_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InteractiveSubmissionServiceServer).ExecuteSubmission(ctx, req.(*ExecuteSubmissionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// InteractiveSubmissionService_ServiceDesc is the grpc.ServiceDesc for InteractiveSubmissionService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var InteractiveSubmissionService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "com.daml.ledger.api.v2.InteractiveSubmissionService",
	HandlerType: (*InteractiveSubmissionServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "PrepareSubmission",
			Handler:    _InteractiveSubmissionService_PrepareSubmission_Handler,
		},
		{
			MethodName: "ExecuteSubmission",
			Handler:    _InteractiveSubmissionService_ExecuteSubmission_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "com/daml/ledger/api/v2/interactive_submission_service.proto",
}
