# Copyright (c) 2017-2025 Digital Asset (Switzerland) GmbH and/or its affiliates. All rights reserved.
# SPDX-License-Identifier: Apache-2.0
# fmt: off
# isort: skip_file

import builtins as _builtins, typing as _typing

import grpc as _grpc
from grpc import aio as _grpc_aio

from .topology_manager_read_service_pb2 import ListAllRequest, ListAllResponse, ListAvailableStoresRequest, ListAvailableStoresResult, ListDomainParametersChangesRequest, ListDomainParametersChangesResult, ListIdentifierDelegationRequest, ListIdentifierDelegationResult, ListMediatorDomainStateRequest, ListMediatorDomainStateResult, ListNamespaceDelegationRequest, ListNamespaceDelegationResult, ListOwnerToKeyMappingRequest, ListOwnerToKeyMappingResult, ListParticipantDomainStateRequest, ListParticipantDomainStateResult, ListPartyToParticipantRequest, ListPartyToParticipantResult, ListSignedLegalIdentityClaimRequest, ListSignedLegalIdentityClaimResult, ListVettedPackagesRequest, ListVettedPackagesResult

__all__ = [
    "TopologyManagerReadServiceStub",
]


# noinspection PyPep8Naming,DuplicatedCode
class TopologyManagerReadServiceStub:
    @classmethod  # type: ignore
    @_typing.overload
    def __new__(cls, channel: _grpc.Channel) -> _TopologyManagerReadServiceBlockingStub: ...  # type: ignore
    @classmethod  # type: ignore
    @_typing.overload
    def __new__(cls, channel: _grpc_aio.Channel) -> _TopologyManagerReadServiceAsyncStub: ...  # type: ignore
    def ListAvailableStores(self, __1: ListAvailableStoresRequest, *, timeout: _typing.Optional[float] = ..., metadata: _typing.Optional[_typing.Tuple[_typing.Tuple[str, _typing.Union[str, bytes]], ...]] = ..., credentials: _typing.Optional[_grpc.CallCredentials] = ..., wait_for_ready: _typing.Optional[bool] = ..., compression: _typing.Optional[_grpc.Compression] = ...) -> _typing.Union[ListAvailableStoresResult, _grpc_aio.UnaryUnaryCall[_typing.Any, ListAvailableStoresResult]]: ...
    def ListPartyToParticipant(self, __1: ListPartyToParticipantRequest, *, timeout: _typing.Optional[float] = ..., metadata: _typing.Optional[_typing.Tuple[_typing.Tuple[str, _typing.Union[str, bytes]], ...]] = ..., credentials: _typing.Optional[_grpc.CallCredentials] = ..., wait_for_ready: _typing.Optional[bool] = ..., compression: _typing.Optional[_grpc.Compression] = ...) -> _typing.Union[ListPartyToParticipantResult, _grpc_aio.UnaryUnaryCall[_typing.Any, ListPartyToParticipantResult]]: ...
    def ListOwnerToKeyMapping(self, __1: ListOwnerToKeyMappingRequest, *, timeout: _typing.Optional[float] = ..., metadata: _typing.Optional[_typing.Tuple[_typing.Tuple[str, _typing.Union[str, bytes]], ...]] = ..., credentials: _typing.Optional[_grpc.CallCredentials] = ..., wait_for_ready: _typing.Optional[bool] = ..., compression: _typing.Optional[_grpc.Compression] = ...) -> _typing.Union[ListOwnerToKeyMappingResult, _grpc_aio.UnaryUnaryCall[_typing.Any, ListOwnerToKeyMappingResult]]: ...
    def ListNamespaceDelegation(self, __1: ListNamespaceDelegationRequest, *, timeout: _typing.Optional[float] = ..., metadata: _typing.Optional[_typing.Tuple[_typing.Tuple[str, _typing.Union[str, bytes]], ...]] = ..., credentials: _typing.Optional[_grpc.CallCredentials] = ..., wait_for_ready: _typing.Optional[bool] = ..., compression: _typing.Optional[_grpc.Compression] = ...) -> _typing.Union[ListNamespaceDelegationResult, _grpc_aio.UnaryUnaryCall[_typing.Any, ListNamespaceDelegationResult]]: ...
    def ListIdentifierDelegation(self, __1: ListIdentifierDelegationRequest, *, timeout: _typing.Optional[float] = ..., metadata: _typing.Optional[_typing.Tuple[_typing.Tuple[str, _typing.Union[str, bytes]], ...]] = ..., credentials: _typing.Optional[_grpc.CallCredentials] = ..., wait_for_ready: _typing.Optional[bool] = ..., compression: _typing.Optional[_grpc.Compression] = ...) -> _typing.Union[ListIdentifierDelegationResult, _grpc_aio.UnaryUnaryCall[_typing.Any, ListIdentifierDelegationResult]]: ...
    def ListSignedLegalIdentityClaim(self, __1: ListSignedLegalIdentityClaimRequest, *, timeout: _typing.Optional[float] = ..., metadata: _typing.Optional[_typing.Tuple[_typing.Tuple[str, _typing.Union[str, bytes]], ...]] = ..., credentials: _typing.Optional[_grpc.CallCredentials] = ..., wait_for_ready: _typing.Optional[bool] = ..., compression: _typing.Optional[_grpc.Compression] = ...) -> _typing.Union[ListSignedLegalIdentityClaimResult, _grpc_aio.UnaryUnaryCall[_typing.Any, ListSignedLegalIdentityClaimResult]]: ...
    def ListParticipantDomainState(self, __1: ListParticipantDomainStateRequest, *, timeout: _typing.Optional[float] = ..., metadata: _typing.Optional[_typing.Tuple[_typing.Tuple[str, _typing.Union[str, bytes]], ...]] = ..., credentials: _typing.Optional[_grpc.CallCredentials] = ..., wait_for_ready: _typing.Optional[bool] = ..., compression: _typing.Optional[_grpc.Compression] = ...) -> _typing.Union[ListParticipantDomainStateResult, _grpc_aio.UnaryUnaryCall[_typing.Any, ListParticipantDomainStateResult]]: ...
    def ListMediatorDomainState(self, __1: ListMediatorDomainStateRequest, *, timeout: _typing.Optional[float] = ..., metadata: _typing.Optional[_typing.Tuple[_typing.Tuple[str, _typing.Union[str, bytes]], ...]] = ..., credentials: _typing.Optional[_grpc.CallCredentials] = ..., wait_for_ready: _typing.Optional[bool] = ..., compression: _typing.Optional[_grpc.Compression] = ...) -> _typing.Union[ListMediatorDomainStateResult, _grpc_aio.UnaryUnaryCall[_typing.Any, ListMediatorDomainStateResult]]: ...
    def ListVettedPackages(self, __1: ListVettedPackagesRequest, *, timeout: _typing.Optional[float] = ..., metadata: _typing.Optional[_typing.Tuple[_typing.Tuple[str, _typing.Union[str, bytes]], ...]] = ..., credentials: _typing.Optional[_grpc.CallCredentials] = ..., wait_for_ready: _typing.Optional[bool] = ..., compression: _typing.Optional[_grpc.Compression] = ...) -> _typing.Union[ListVettedPackagesResult, _grpc_aio.UnaryUnaryCall[_typing.Any, ListVettedPackagesResult]]: ...
    def ListDomainParametersChanges(self, __1: ListDomainParametersChangesRequest, *, timeout: _typing.Optional[float] = ..., metadata: _typing.Optional[_typing.Tuple[_typing.Tuple[str, _typing.Union[str, bytes]], ...]] = ..., credentials: _typing.Optional[_grpc.CallCredentials] = ..., wait_for_ready: _typing.Optional[bool] = ..., compression: _typing.Optional[_grpc.Compression] = ...) -> _typing.Union[ListDomainParametersChangesResult, _grpc_aio.UnaryUnaryCall[_typing.Any, ListDomainParametersChangesResult]]: ...
    def ListAll(self, __1: ListAllRequest, *, timeout: _typing.Optional[float] = ..., metadata: _typing.Optional[_typing.Tuple[_typing.Tuple[str, _typing.Union[str, bytes]], ...]] = ..., credentials: _typing.Optional[_grpc.CallCredentials] = ..., wait_for_ready: _typing.Optional[bool] = ..., compression: _typing.Optional[_grpc.Compression] = ...) -> _typing.Union[ListAllResponse, _grpc_aio.UnaryUnaryCall[_typing.Any, ListAllResponse]]: ...

# noinspection PyPep8Naming,DuplicatedCode
class _TopologyManagerReadServiceBlockingStub(TopologyManagerReadServiceStub):
    def ListAvailableStores(self, __1: ListAvailableStoresRequest, timeout: _typing.Optional[float] = ..., metadata: _typing.Optional[_typing.Tuple[_typing.Tuple[str, _typing.Union[str, bytes]], ...]] = ..., credentials: _typing.Optional[_grpc.CallCredentials] = ..., wait_for_ready: _typing.Optional[bool] = ..., compression: _typing.Optional[_grpc.Compression] = ...) -> ListAvailableStoresResult: ...
    def ListPartyToParticipant(self, __1: ListPartyToParticipantRequest, timeout: _typing.Optional[float] = ..., metadata: _typing.Optional[_typing.Tuple[_typing.Tuple[str, _typing.Union[str, bytes]], ...]] = ..., credentials: _typing.Optional[_grpc.CallCredentials] = ..., wait_for_ready: _typing.Optional[bool] = ..., compression: _typing.Optional[_grpc.Compression] = ...) -> ListPartyToParticipantResult: ...
    def ListOwnerToKeyMapping(self, __1: ListOwnerToKeyMappingRequest, timeout: _typing.Optional[float] = ..., metadata: _typing.Optional[_typing.Tuple[_typing.Tuple[str, _typing.Union[str, bytes]], ...]] = ..., credentials: _typing.Optional[_grpc.CallCredentials] = ..., wait_for_ready: _typing.Optional[bool] = ..., compression: _typing.Optional[_grpc.Compression] = ...) -> ListOwnerToKeyMappingResult: ...
    def ListNamespaceDelegation(self, __1: ListNamespaceDelegationRequest, timeout: _typing.Optional[float] = ..., metadata: _typing.Optional[_typing.Tuple[_typing.Tuple[str, _typing.Union[str, bytes]], ...]] = ..., credentials: _typing.Optional[_grpc.CallCredentials] = ..., wait_for_ready: _typing.Optional[bool] = ..., compression: _typing.Optional[_grpc.Compression] = ...) -> ListNamespaceDelegationResult: ...
    def ListIdentifierDelegation(self, __1: ListIdentifierDelegationRequest, timeout: _typing.Optional[float] = ..., metadata: _typing.Optional[_typing.Tuple[_typing.Tuple[str, _typing.Union[str, bytes]], ...]] = ..., credentials: _typing.Optional[_grpc.CallCredentials] = ..., wait_for_ready: _typing.Optional[bool] = ..., compression: _typing.Optional[_grpc.Compression] = ...) -> ListIdentifierDelegationResult: ...
    def ListSignedLegalIdentityClaim(self, __1: ListSignedLegalIdentityClaimRequest, timeout: _typing.Optional[float] = ..., metadata: _typing.Optional[_typing.Tuple[_typing.Tuple[str, _typing.Union[str, bytes]], ...]] = ..., credentials: _typing.Optional[_grpc.CallCredentials] = ..., wait_for_ready: _typing.Optional[bool] = ..., compression: _typing.Optional[_grpc.Compression] = ...) -> ListSignedLegalIdentityClaimResult: ...
    def ListParticipantDomainState(self, __1: ListParticipantDomainStateRequest, timeout: _typing.Optional[float] = ..., metadata: _typing.Optional[_typing.Tuple[_typing.Tuple[str, _typing.Union[str, bytes]], ...]] = ..., credentials: _typing.Optional[_grpc.CallCredentials] = ..., wait_for_ready: _typing.Optional[bool] = ..., compression: _typing.Optional[_grpc.Compression] = ...) -> ListParticipantDomainStateResult: ...
    def ListMediatorDomainState(self, __1: ListMediatorDomainStateRequest, timeout: _typing.Optional[float] = ..., metadata: _typing.Optional[_typing.Tuple[_typing.Tuple[str, _typing.Union[str, bytes]], ...]] = ..., credentials: _typing.Optional[_grpc.CallCredentials] = ..., wait_for_ready: _typing.Optional[bool] = ..., compression: _typing.Optional[_grpc.Compression] = ...) -> ListMediatorDomainStateResult: ...
    def ListVettedPackages(self, __1: ListVettedPackagesRequest, timeout: _typing.Optional[float] = ..., metadata: _typing.Optional[_typing.Tuple[_typing.Tuple[str, _typing.Union[str, bytes]], ...]] = ..., credentials: _typing.Optional[_grpc.CallCredentials] = ..., wait_for_ready: _typing.Optional[bool] = ..., compression: _typing.Optional[_grpc.Compression] = ...) -> ListVettedPackagesResult: ...
    def ListDomainParametersChanges(self, __1: ListDomainParametersChangesRequest, timeout: _typing.Optional[float] = ..., metadata: _typing.Optional[_typing.Tuple[_typing.Tuple[str, _typing.Union[str, bytes]], ...]] = ..., credentials: _typing.Optional[_grpc.CallCredentials] = ..., wait_for_ready: _typing.Optional[bool] = ..., compression: _typing.Optional[_grpc.Compression] = ...) -> ListDomainParametersChangesResult: ...
    def ListAll(self, __1: ListAllRequest, timeout: _typing.Optional[float] = ..., metadata: _typing.Optional[_typing.Tuple[_typing.Tuple[str, _typing.Union[str, bytes]], ...]] = ..., credentials: _typing.Optional[_grpc.CallCredentials] = ..., wait_for_ready: _typing.Optional[bool] = ..., compression: _typing.Optional[_grpc.Compression] = ...) -> ListAllResponse: ...

# noinspection PyPep8Naming,DuplicatedCode
class _TopologyManagerReadServiceAsyncStub(TopologyManagerReadServiceStub):
    def ListAvailableStores(self, __1: ListAvailableStoresRequest, *, timeout: _typing.Optional[float] = ..., metadata: _typing.Optional[_grpc_aio.Metadata] = ..., credentials: _typing.Optional[_grpc.CallCredentials] = ..., wait_for_ready: _typing.Optional[bool] = ..., compression: _typing.Optional[_grpc.Compression] = ...) -> _grpc_aio.UnaryUnaryCall[_typing.Any, ListAvailableStoresResult]: ...  # type: ignore
    def ListPartyToParticipant(self, __1: ListPartyToParticipantRequest, *, timeout: _typing.Optional[float] = ..., metadata: _typing.Optional[_grpc_aio.Metadata] = ..., credentials: _typing.Optional[_grpc.CallCredentials] = ..., wait_for_ready: _typing.Optional[bool] = ..., compression: _typing.Optional[_grpc.Compression] = ...) -> _grpc_aio.UnaryUnaryCall[_typing.Any, ListPartyToParticipantResult]: ...  # type: ignore
    def ListOwnerToKeyMapping(self, __1: ListOwnerToKeyMappingRequest, *, timeout: _typing.Optional[float] = ..., metadata: _typing.Optional[_grpc_aio.Metadata] = ..., credentials: _typing.Optional[_grpc.CallCredentials] = ..., wait_for_ready: _typing.Optional[bool] = ..., compression: _typing.Optional[_grpc.Compression] = ...) -> _grpc_aio.UnaryUnaryCall[_typing.Any, ListOwnerToKeyMappingResult]: ...  # type: ignore
    def ListNamespaceDelegation(self, __1: ListNamespaceDelegationRequest, *, timeout: _typing.Optional[float] = ..., metadata: _typing.Optional[_grpc_aio.Metadata] = ..., credentials: _typing.Optional[_grpc.CallCredentials] = ..., wait_for_ready: _typing.Optional[bool] = ..., compression: _typing.Optional[_grpc.Compression] = ...) -> _grpc_aio.UnaryUnaryCall[_typing.Any, ListNamespaceDelegationResult]: ...  # type: ignore
    def ListIdentifierDelegation(self, __1: ListIdentifierDelegationRequest, *, timeout: _typing.Optional[float] = ..., metadata: _typing.Optional[_grpc_aio.Metadata] = ..., credentials: _typing.Optional[_grpc.CallCredentials] = ..., wait_for_ready: _typing.Optional[bool] = ..., compression: _typing.Optional[_grpc.Compression] = ...) -> _grpc_aio.UnaryUnaryCall[_typing.Any, ListIdentifierDelegationResult]: ...  # type: ignore
    def ListSignedLegalIdentityClaim(self, __1: ListSignedLegalIdentityClaimRequest, *, timeout: _typing.Optional[float] = ..., metadata: _typing.Optional[_grpc_aio.Metadata] = ..., credentials: _typing.Optional[_grpc.CallCredentials] = ..., wait_for_ready: _typing.Optional[bool] = ..., compression: _typing.Optional[_grpc.Compression] = ...) -> _grpc_aio.UnaryUnaryCall[_typing.Any, ListSignedLegalIdentityClaimResult]: ...  # type: ignore
    def ListParticipantDomainState(self, __1: ListParticipantDomainStateRequest, *, timeout: _typing.Optional[float] = ..., metadata: _typing.Optional[_grpc_aio.Metadata] = ..., credentials: _typing.Optional[_grpc.CallCredentials] = ..., wait_for_ready: _typing.Optional[bool] = ..., compression: _typing.Optional[_grpc.Compression] = ...) -> _grpc_aio.UnaryUnaryCall[_typing.Any, ListParticipantDomainStateResult]: ...  # type: ignore
    def ListMediatorDomainState(self, __1: ListMediatorDomainStateRequest, *, timeout: _typing.Optional[float] = ..., metadata: _typing.Optional[_grpc_aio.Metadata] = ..., credentials: _typing.Optional[_grpc.CallCredentials] = ..., wait_for_ready: _typing.Optional[bool] = ..., compression: _typing.Optional[_grpc.Compression] = ...) -> _grpc_aio.UnaryUnaryCall[_typing.Any, ListMediatorDomainStateResult]: ...  # type: ignore
    def ListVettedPackages(self, __1: ListVettedPackagesRequest, *, timeout: _typing.Optional[float] = ..., metadata: _typing.Optional[_grpc_aio.Metadata] = ..., credentials: _typing.Optional[_grpc.CallCredentials] = ..., wait_for_ready: _typing.Optional[bool] = ..., compression: _typing.Optional[_grpc.Compression] = ...) -> _grpc_aio.UnaryUnaryCall[_typing.Any, ListVettedPackagesResult]: ...  # type: ignore
    def ListDomainParametersChanges(self, __1: ListDomainParametersChangesRequest, *, timeout: _typing.Optional[float] = ..., metadata: _typing.Optional[_grpc_aio.Metadata] = ..., credentials: _typing.Optional[_grpc.CallCredentials] = ..., wait_for_ready: _typing.Optional[bool] = ..., compression: _typing.Optional[_grpc.Compression] = ...) -> _grpc_aio.UnaryUnaryCall[_typing.Any, ListDomainParametersChangesResult]: ...  # type: ignore
    def ListAll(self, __1: ListAllRequest, *, timeout: _typing.Optional[float] = ..., metadata: _typing.Optional[_grpc_aio.Metadata] = ..., credentials: _typing.Optional[_grpc.CallCredentials] = ..., wait_for_ready: _typing.Optional[bool] = ..., compression: _typing.Optional[_grpc.Compression] = ...) -> _grpc_aio.UnaryUnaryCall[_typing.Any, ListAllResponse]: ...  # type: ignore
