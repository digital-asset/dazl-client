# Copyright (c) 2017-2025 Digital Asset (Switzerland) GmbH and/or its affiliates. All rights reserved.
# SPDX-License-Identifier: Apache-2.0
# fmt: off
# isort: skip_file

import builtins as _builtins, typing as _typing

import grpc as _grpc
from grpc import aio as _grpc_aio

from .topology_manager_read_service_pb2 import ExportTopologySnapshotRequest, ExportTopologySnapshotResponse, GenesisStateRequest, GenesisStateResponse, ListAllRequest, ListAllResponse, ListAvailableStoresRequest, ListAvailableStoresResponse, ListDecentralizedNamespaceDefinitionRequest, ListDecentralizedNamespaceDefinitionResponse, ListMediatorSynchronizerStateRequest, ListMediatorSynchronizerStateResponse, ListNamespaceDelegationRequest, ListNamespaceDelegationResponse, ListOwnerToKeyMappingRequest, ListOwnerToKeyMappingResponse, ListParticipantSynchronizerPermissionRequest, ListParticipantSynchronizerPermissionResponse, ListPartyHostingLimitsRequest, ListPartyHostingLimitsResponse, ListPartyToKeyMappingRequest, ListPartyToKeyMappingResponse, ListPartyToParticipantRequest, ListPartyToParticipantResponse, ListPurgeTopologyTransactionRequest, ListPurgeTopologyTransactionResponse, ListSequencerSynchronizerStateRequest, ListSequencerSynchronizerStateResponse, ListSynchronizerParametersStateRequest, ListSynchronizerParametersStateResponse, ListSynchronizerTrustCertificateRequest, ListSynchronizerTrustCertificateResponse, ListVettedPackagesRequest, ListVettedPackagesResponse

__all__ = [
    "TopologyManagerReadServiceStub",
]


# noinspection PyPep8Naming,DuplicatedCode
class TopologyManagerReadServiceStub:
    @classmethod  # type: ignore
    @_typing.overload
    def __new__(cls, channel: _grpc.Channel) -> _TopologyManagerReadServiceBlockingStub: ...  # type: ignore
    @classmethod  # type: ignore
    @_typing.overload
    def __new__(cls, channel: _grpc_aio.Channel) -> _TopologyManagerReadServiceAsyncStub: ...  # type: ignore
    def ListNamespaceDelegation(self, __1: ListNamespaceDelegationRequest, *, timeout: _typing.Optional[float] = ..., metadata: _typing.Optional[_typing.Tuple[_typing.Tuple[str, _typing.Union[str, bytes]], ...]] = ..., credentials: _typing.Optional[_grpc.CallCredentials] = ..., wait_for_ready: _typing.Optional[bool] = ..., compression: _typing.Optional[_grpc.Compression] = ...) -> _typing.Union[ListNamespaceDelegationResponse, _grpc_aio.UnaryUnaryCall[_typing.Any, ListNamespaceDelegationResponse]]: ...
    def ListDecentralizedNamespaceDefinition(self, __1: ListDecentralizedNamespaceDefinitionRequest, *, timeout: _typing.Optional[float] = ..., metadata: _typing.Optional[_typing.Tuple[_typing.Tuple[str, _typing.Union[str, bytes]], ...]] = ..., credentials: _typing.Optional[_grpc.CallCredentials] = ..., wait_for_ready: _typing.Optional[bool] = ..., compression: _typing.Optional[_grpc.Compression] = ...) -> _typing.Union[ListDecentralizedNamespaceDefinitionResponse, _grpc_aio.UnaryUnaryCall[_typing.Any, ListDecentralizedNamespaceDefinitionResponse]]: ...
    def ListOwnerToKeyMapping(self, __1: ListOwnerToKeyMappingRequest, *, timeout: _typing.Optional[float] = ..., metadata: _typing.Optional[_typing.Tuple[_typing.Tuple[str, _typing.Union[str, bytes]], ...]] = ..., credentials: _typing.Optional[_grpc.CallCredentials] = ..., wait_for_ready: _typing.Optional[bool] = ..., compression: _typing.Optional[_grpc.Compression] = ...) -> _typing.Union[ListOwnerToKeyMappingResponse, _grpc_aio.UnaryUnaryCall[_typing.Any, ListOwnerToKeyMappingResponse]]: ...
    def ListPartyToKeyMapping(self, __1: ListPartyToKeyMappingRequest, *, timeout: _typing.Optional[float] = ..., metadata: _typing.Optional[_typing.Tuple[_typing.Tuple[str, _typing.Union[str, bytes]], ...]] = ..., credentials: _typing.Optional[_grpc.CallCredentials] = ..., wait_for_ready: _typing.Optional[bool] = ..., compression: _typing.Optional[_grpc.Compression] = ...) -> _typing.Union[ListPartyToKeyMappingResponse, _grpc_aio.UnaryUnaryCall[_typing.Any, ListPartyToKeyMappingResponse]]: ...
    def ListSynchronizerTrustCertificate(self, __1: ListSynchronizerTrustCertificateRequest, *, timeout: _typing.Optional[float] = ..., metadata: _typing.Optional[_typing.Tuple[_typing.Tuple[str, _typing.Union[str, bytes]], ...]] = ..., credentials: _typing.Optional[_grpc.CallCredentials] = ..., wait_for_ready: _typing.Optional[bool] = ..., compression: _typing.Optional[_grpc.Compression] = ...) -> _typing.Union[ListSynchronizerTrustCertificateResponse, _grpc_aio.UnaryUnaryCall[_typing.Any, ListSynchronizerTrustCertificateResponse]]: ...
    def ListParticipantSynchronizerPermission(self, __1: ListParticipantSynchronizerPermissionRequest, *, timeout: _typing.Optional[float] = ..., metadata: _typing.Optional[_typing.Tuple[_typing.Tuple[str, _typing.Union[str, bytes]], ...]] = ..., credentials: _typing.Optional[_grpc.CallCredentials] = ..., wait_for_ready: _typing.Optional[bool] = ..., compression: _typing.Optional[_grpc.Compression] = ...) -> _typing.Union[ListParticipantSynchronizerPermissionResponse, _grpc_aio.UnaryUnaryCall[_typing.Any, ListParticipantSynchronizerPermissionResponse]]: ...
    def ListPartyHostingLimits(self, __1: ListPartyHostingLimitsRequest, *, timeout: _typing.Optional[float] = ..., metadata: _typing.Optional[_typing.Tuple[_typing.Tuple[str, _typing.Union[str, bytes]], ...]] = ..., credentials: _typing.Optional[_grpc.CallCredentials] = ..., wait_for_ready: _typing.Optional[bool] = ..., compression: _typing.Optional[_grpc.Compression] = ...) -> _typing.Union[ListPartyHostingLimitsResponse, _grpc_aio.UnaryUnaryCall[_typing.Any, ListPartyHostingLimitsResponse]]: ...
    def ListVettedPackages(self, __1: ListVettedPackagesRequest, *, timeout: _typing.Optional[float] = ..., metadata: _typing.Optional[_typing.Tuple[_typing.Tuple[str, _typing.Union[str, bytes]], ...]] = ..., credentials: _typing.Optional[_grpc.CallCredentials] = ..., wait_for_ready: _typing.Optional[bool] = ..., compression: _typing.Optional[_grpc.Compression] = ...) -> _typing.Union[ListVettedPackagesResponse, _grpc_aio.UnaryUnaryCall[_typing.Any, ListVettedPackagesResponse]]: ...
    def ListPartyToParticipant(self, __1: ListPartyToParticipantRequest, *, timeout: _typing.Optional[float] = ..., metadata: _typing.Optional[_typing.Tuple[_typing.Tuple[str, _typing.Union[str, bytes]], ...]] = ..., credentials: _typing.Optional[_grpc.CallCredentials] = ..., wait_for_ready: _typing.Optional[bool] = ..., compression: _typing.Optional[_grpc.Compression] = ...) -> _typing.Union[ListPartyToParticipantResponse, _grpc_aio.UnaryUnaryCall[_typing.Any, ListPartyToParticipantResponse]]: ...
    def ListSynchronizerParametersState(self, __1: ListSynchronizerParametersStateRequest, *, timeout: _typing.Optional[float] = ..., metadata: _typing.Optional[_typing.Tuple[_typing.Tuple[str, _typing.Union[str, bytes]], ...]] = ..., credentials: _typing.Optional[_grpc.CallCredentials] = ..., wait_for_ready: _typing.Optional[bool] = ..., compression: _typing.Optional[_grpc.Compression] = ...) -> _typing.Union[ListSynchronizerParametersStateResponse, _grpc_aio.UnaryUnaryCall[_typing.Any, ListSynchronizerParametersStateResponse]]: ...
    def ListMediatorSynchronizerState(self, __1: ListMediatorSynchronizerStateRequest, *, timeout: _typing.Optional[float] = ..., metadata: _typing.Optional[_typing.Tuple[_typing.Tuple[str, _typing.Union[str, bytes]], ...]] = ..., credentials: _typing.Optional[_grpc.CallCredentials] = ..., wait_for_ready: _typing.Optional[bool] = ..., compression: _typing.Optional[_grpc.Compression] = ...) -> _typing.Union[ListMediatorSynchronizerStateResponse, _grpc_aio.UnaryUnaryCall[_typing.Any, ListMediatorSynchronizerStateResponse]]: ...
    def ListSequencerSynchronizerState(self, __1: ListSequencerSynchronizerStateRequest, *, timeout: _typing.Optional[float] = ..., metadata: _typing.Optional[_typing.Tuple[_typing.Tuple[str, _typing.Union[str, bytes]], ...]] = ..., credentials: _typing.Optional[_grpc.CallCredentials] = ..., wait_for_ready: _typing.Optional[bool] = ..., compression: _typing.Optional[_grpc.Compression] = ...) -> _typing.Union[ListSequencerSynchronizerStateResponse, _grpc_aio.UnaryUnaryCall[_typing.Any, ListSequencerSynchronizerStateResponse]]: ...
    def ListPurgeTopologyTransaction(self, __1: ListPurgeTopologyTransactionRequest, *, timeout: _typing.Optional[float] = ..., metadata: _typing.Optional[_typing.Tuple[_typing.Tuple[str, _typing.Union[str, bytes]], ...]] = ..., credentials: _typing.Optional[_grpc.CallCredentials] = ..., wait_for_ready: _typing.Optional[bool] = ..., compression: _typing.Optional[_grpc.Compression] = ...) -> _typing.Union[ListPurgeTopologyTransactionResponse, _grpc_aio.UnaryUnaryCall[_typing.Any, ListPurgeTopologyTransactionResponse]]: ...
    def ListAvailableStores(self, __1: ListAvailableStoresRequest, *, timeout: _typing.Optional[float] = ..., metadata: _typing.Optional[_typing.Tuple[_typing.Tuple[str, _typing.Union[str, bytes]], ...]] = ..., credentials: _typing.Optional[_grpc.CallCredentials] = ..., wait_for_ready: _typing.Optional[bool] = ..., compression: _typing.Optional[_grpc.Compression] = ...) -> _typing.Union[ListAvailableStoresResponse, _grpc_aio.UnaryUnaryCall[_typing.Any, ListAvailableStoresResponse]]: ...
    def ListAll(self, __1: ListAllRequest, *, timeout: _typing.Optional[float] = ..., metadata: _typing.Optional[_typing.Tuple[_typing.Tuple[str, _typing.Union[str, bytes]], ...]] = ..., credentials: _typing.Optional[_grpc.CallCredentials] = ..., wait_for_ready: _typing.Optional[bool] = ..., compression: _typing.Optional[_grpc.Compression] = ...) -> _typing.Union[ListAllResponse, _grpc_aio.UnaryUnaryCall[_typing.Any, ListAllResponse]]: ...
    def ExportTopologySnapshot(self, __1: ExportTopologySnapshotRequest, *, timeout: _typing.Optional[float] = ..., metadata: _typing.Optional[_typing.Tuple[_typing.Tuple[str, _typing.Union[str, bytes]], ...]] = ..., credentials: _typing.Optional[_grpc.CallCredentials] = ..., wait_for_ready: _typing.Optional[bool] = ..., compression: _typing.Optional[_grpc.Compression] = ...) -> _typing.Union[_grpc.CallIterator[ExportTopologySnapshotResponse], _grpc_aio.UnaryStreamCall[_typing.Any, ExportTopologySnapshotResponse]]: ...
    def GenesisState(self, __1: GenesisStateRequest, *, timeout: _typing.Optional[float] = ..., metadata: _typing.Optional[_typing.Tuple[_typing.Tuple[str, _typing.Union[str, bytes]], ...]] = ..., credentials: _typing.Optional[_grpc.CallCredentials] = ..., wait_for_ready: _typing.Optional[bool] = ..., compression: _typing.Optional[_grpc.Compression] = ...) -> _typing.Union[_grpc.CallIterator[GenesisStateResponse], _grpc_aio.UnaryStreamCall[_typing.Any, GenesisStateResponse]]: ...

# noinspection PyPep8Naming,DuplicatedCode
class _TopologyManagerReadServiceBlockingStub(TopologyManagerReadServiceStub):
    def ListNamespaceDelegation(self, __1: ListNamespaceDelegationRequest, timeout: _typing.Optional[float] = ..., metadata: _typing.Optional[_typing.Tuple[_typing.Tuple[str, _typing.Union[str, bytes]], ...]] = ..., credentials: _typing.Optional[_grpc.CallCredentials] = ..., wait_for_ready: _typing.Optional[bool] = ..., compression: _typing.Optional[_grpc.Compression] = ...) -> ListNamespaceDelegationResponse: ...
    def ListDecentralizedNamespaceDefinition(self, __1: ListDecentralizedNamespaceDefinitionRequest, timeout: _typing.Optional[float] = ..., metadata: _typing.Optional[_typing.Tuple[_typing.Tuple[str, _typing.Union[str, bytes]], ...]] = ..., credentials: _typing.Optional[_grpc.CallCredentials] = ..., wait_for_ready: _typing.Optional[bool] = ..., compression: _typing.Optional[_grpc.Compression] = ...) -> ListDecentralizedNamespaceDefinitionResponse: ...
    def ListOwnerToKeyMapping(self, __1: ListOwnerToKeyMappingRequest, timeout: _typing.Optional[float] = ..., metadata: _typing.Optional[_typing.Tuple[_typing.Tuple[str, _typing.Union[str, bytes]], ...]] = ..., credentials: _typing.Optional[_grpc.CallCredentials] = ..., wait_for_ready: _typing.Optional[bool] = ..., compression: _typing.Optional[_grpc.Compression] = ...) -> ListOwnerToKeyMappingResponse: ...
    def ListPartyToKeyMapping(self, __1: ListPartyToKeyMappingRequest, timeout: _typing.Optional[float] = ..., metadata: _typing.Optional[_typing.Tuple[_typing.Tuple[str, _typing.Union[str, bytes]], ...]] = ..., credentials: _typing.Optional[_grpc.CallCredentials] = ..., wait_for_ready: _typing.Optional[bool] = ..., compression: _typing.Optional[_grpc.Compression] = ...) -> ListPartyToKeyMappingResponse: ...
    def ListSynchronizerTrustCertificate(self, __1: ListSynchronizerTrustCertificateRequest, timeout: _typing.Optional[float] = ..., metadata: _typing.Optional[_typing.Tuple[_typing.Tuple[str, _typing.Union[str, bytes]], ...]] = ..., credentials: _typing.Optional[_grpc.CallCredentials] = ..., wait_for_ready: _typing.Optional[bool] = ..., compression: _typing.Optional[_grpc.Compression] = ...) -> ListSynchronizerTrustCertificateResponse: ...
    def ListParticipantSynchronizerPermission(self, __1: ListParticipantSynchronizerPermissionRequest, timeout: _typing.Optional[float] = ..., metadata: _typing.Optional[_typing.Tuple[_typing.Tuple[str, _typing.Union[str, bytes]], ...]] = ..., credentials: _typing.Optional[_grpc.CallCredentials] = ..., wait_for_ready: _typing.Optional[bool] = ..., compression: _typing.Optional[_grpc.Compression] = ...) -> ListParticipantSynchronizerPermissionResponse: ...
    def ListPartyHostingLimits(self, __1: ListPartyHostingLimitsRequest, timeout: _typing.Optional[float] = ..., metadata: _typing.Optional[_typing.Tuple[_typing.Tuple[str, _typing.Union[str, bytes]], ...]] = ..., credentials: _typing.Optional[_grpc.CallCredentials] = ..., wait_for_ready: _typing.Optional[bool] = ..., compression: _typing.Optional[_grpc.Compression] = ...) -> ListPartyHostingLimitsResponse: ...
    def ListVettedPackages(self, __1: ListVettedPackagesRequest, timeout: _typing.Optional[float] = ..., metadata: _typing.Optional[_typing.Tuple[_typing.Tuple[str, _typing.Union[str, bytes]], ...]] = ..., credentials: _typing.Optional[_grpc.CallCredentials] = ..., wait_for_ready: _typing.Optional[bool] = ..., compression: _typing.Optional[_grpc.Compression] = ...) -> ListVettedPackagesResponse: ...
    def ListPartyToParticipant(self, __1: ListPartyToParticipantRequest, timeout: _typing.Optional[float] = ..., metadata: _typing.Optional[_typing.Tuple[_typing.Tuple[str, _typing.Union[str, bytes]], ...]] = ..., credentials: _typing.Optional[_grpc.CallCredentials] = ..., wait_for_ready: _typing.Optional[bool] = ..., compression: _typing.Optional[_grpc.Compression] = ...) -> ListPartyToParticipantResponse: ...
    def ListSynchronizerParametersState(self, __1: ListSynchronizerParametersStateRequest, timeout: _typing.Optional[float] = ..., metadata: _typing.Optional[_typing.Tuple[_typing.Tuple[str, _typing.Union[str, bytes]], ...]] = ..., credentials: _typing.Optional[_grpc.CallCredentials] = ..., wait_for_ready: _typing.Optional[bool] = ..., compression: _typing.Optional[_grpc.Compression] = ...) -> ListSynchronizerParametersStateResponse: ...
    def ListMediatorSynchronizerState(self, __1: ListMediatorSynchronizerStateRequest, timeout: _typing.Optional[float] = ..., metadata: _typing.Optional[_typing.Tuple[_typing.Tuple[str, _typing.Union[str, bytes]], ...]] = ..., credentials: _typing.Optional[_grpc.CallCredentials] = ..., wait_for_ready: _typing.Optional[bool] = ..., compression: _typing.Optional[_grpc.Compression] = ...) -> ListMediatorSynchronizerStateResponse: ...
    def ListSequencerSynchronizerState(self, __1: ListSequencerSynchronizerStateRequest, timeout: _typing.Optional[float] = ..., metadata: _typing.Optional[_typing.Tuple[_typing.Tuple[str, _typing.Union[str, bytes]], ...]] = ..., credentials: _typing.Optional[_grpc.CallCredentials] = ..., wait_for_ready: _typing.Optional[bool] = ..., compression: _typing.Optional[_grpc.Compression] = ...) -> ListSequencerSynchronizerStateResponse: ...
    def ListPurgeTopologyTransaction(self, __1: ListPurgeTopologyTransactionRequest, timeout: _typing.Optional[float] = ..., metadata: _typing.Optional[_typing.Tuple[_typing.Tuple[str, _typing.Union[str, bytes]], ...]] = ..., credentials: _typing.Optional[_grpc.CallCredentials] = ..., wait_for_ready: _typing.Optional[bool] = ..., compression: _typing.Optional[_grpc.Compression] = ...) -> ListPurgeTopologyTransactionResponse: ...
    def ListAvailableStores(self, __1: ListAvailableStoresRequest, timeout: _typing.Optional[float] = ..., metadata: _typing.Optional[_typing.Tuple[_typing.Tuple[str, _typing.Union[str, bytes]], ...]] = ..., credentials: _typing.Optional[_grpc.CallCredentials] = ..., wait_for_ready: _typing.Optional[bool] = ..., compression: _typing.Optional[_grpc.Compression] = ...) -> ListAvailableStoresResponse: ...
    def ListAll(self, __1: ListAllRequest, timeout: _typing.Optional[float] = ..., metadata: _typing.Optional[_typing.Tuple[_typing.Tuple[str, _typing.Union[str, bytes]], ...]] = ..., credentials: _typing.Optional[_grpc.CallCredentials] = ..., wait_for_ready: _typing.Optional[bool] = ..., compression: _typing.Optional[_grpc.Compression] = ...) -> ListAllResponse: ...
    def ExportTopologySnapshot(self, __1: ExportTopologySnapshotRequest, timeout: _typing.Optional[float] = ..., metadata: _typing.Optional[_typing.Tuple[_typing.Tuple[str, _typing.Union[str, bytes]], ...]] = ..., credentials: _typing.Optional[_grpc.CallCredentials] = ..., wait_for_ready: _typing.Optional[bool] = ..., compression: _typing.Optional[_grpc.Compression] = ...) -> _grpc.CallIterator[ExportTopologySnapshotResponse]: ...
    def GenesisState(self, __1: GenesisStateRequest, timeout: _typing.Optional[float] = ..., metadata: _typing.Optional[_typing.Tuple[_typing.Tuple[str, _typing.Union[str, bytes]], ...]] = ..., credentials: _typing.Optional[_grpc.CallCredentials] = ..., wait_for_ready: _typing.Optional[bool] = ..., compression: _typing.Optional[_grpc.Compression] = ...) -> _grpc.CallIterator[GenesisStateResponse]: ...

# noinspection PyPep8Naming,DuplicatedCode
class _TopologyManagerReadServiceAsyncStub(TopologyManagerReadServiceStub):
    def ListNamespaceDelegation(self, __1: ListNamespaceDelegationRequest, *, timeout: _typing.Optional[float] = ..., metadata: _typing.Optional[_grpc_aio.Metadata] = ..., credentials: _typing.Optional[_grpc.CallCredentials] = ..., wait_for_ready: _typing.Optional[bool] = ..., compression: _typing.Optional[_grpc.Compression] = ...) -> _grpc_aio.UnaryUnaryCall[_typing.Any, ListNamespaceDelegationResponse]: ...  # type: ignore
    def ListDecentralizedNamespaceDefinition(self, __1: ListDecentralizedNamespaceDefinitionRequest, *, timeout: _typing.Optional[float] = ..., metadata: _typing.Optional[_grpc_aio.Metadata] = ..., credentials: _typing.Optional[_grpc.CallCredentials] = ..., wait_for_ready: _typing.Optional[bool] = ..., compression: _typing.Optional[_grpc.Compression] = ...) -> _grpc_aio.UnaryUnaryCall[_typing.Any, ListDecentralizedNamespaceDefinitionResponse]: ...  # type: ignore
    def ListOwnerToKeyMapping(self, __1: ListOwnerToKeyMappingRequest, *, timeout: _typing.Optional[float] = ..., metadata: _typing.Optional[_grpc_aio.Metadata] = ..., credentials: _typing.Optional[_grpc.CallCredentials] = ..., wait_for_ready: _typing.Optional[bool] = ..., compression: _typing.Optional[_grpc.Compression] = ...) -> _grpc_aio.UnaryUnaryCall[_typing.Any, ListOwnerToKeyMappingResponse]: ...  # type: ignore
    def ListPartyToKeyMapping(self, __1: ListPartyToKeyMappingRequest, *, timeout: _typing.Optional[float] = ..., metadata: _typing.Optional[_grpc_aio.Metadata] = ..., credentials: _typing.Optional[_grpc.CallCredentials] = ..., wait_for_ready: _typing.Optional[bool] = ..., compression: _typing.Optional[_grpc.Compression] = ...) -> _grpc_aio.UnaryUnaryCall[_typing.Any, ListPartyToKeyMappingResponse]: ...  # type: ignore
    def ListSynchronizerTrustCertificate(self, __1: ListSynchronizerTrustCertificateRequest, *, timeout: _typing.Optional[float] = ..., metadata: _typing.Optional[_grpc_aio.Metadata] = ..., credentials: _typing.Optional[_grpc.CallCredentials] = ..., wait_for_ready: _typing.Optional[bool] = ..., compression: _typing.Optional[_grpc.Compression] = ...) -> _grpc_aio.UnaryUnaryCall[_typing.Any, ListSynchronizerTrustCertificateResponse]: ...  # type: ignore
    def ListParticipantSynchronizerPermission(self, __1: ListParticipantSynchronizerPermissionRequest, *, timeout: _typing.Optional[float] = ..., metadata: _typing.Optional[_grpc_aio.Metadata] = ..., credentials: _typing.Optional[_grpc.CallCredentials] = ..., wait_for_ready: _typing.Optional[bool] = ..., compression: _typing.Optional[_grpc.Compression] = ...) -> _grpc_aio.UnaryUnaryCall[_typing.Any, ListParticipantSynchronizerPermissionResponse]: ...  # type: ignore
    def ListPartyHostingLimits(self, __1: ListPartyHostingLimitsRequest, *, timeout: _typing.Optional[float] = ..., metadata: _typing.Optional[_grpc_aio.Metadata] = ..., credentials: _typing.Optional[_grpc.CallCredentials] = ..., wait_for_ready: _typing.Optional[bool] = ..., compression: _typing.Optional[_grpc.Compression] = ...) -> _grpc_aio.UnaryUnaryCall[_typing.Any, ListPartyHostingLimitsResponse]: ...  # type: ignore
    def ListVettedPackages(self, __1: ListVettedPackagesRequest, *, timeout: _typing.Optional[float] = ..., metadata: _typing.Optional[_grpc_aio.Metadata] = ..., credentials: _typing.Optional[_grpc.CallCredentials] = ..., wait_for_ready: _typing.Optional[bool] = ..., compression: _typing.Optional[_grpc.Compression] = ...) -> _grpc_aio.UnaryUnaryCall[_typing.Any, ListVettedPackagesResponse]: ...  # type: ignore
    def ListPartyToParticipant(self, __1: ListPartyToParticipantRequest, *, timeout: _typing.Optional[float] = ..., metadata: _typing.Optional[_grpc_aio.Metadata] = ..., credentials: _typing.Optional[_grpc.CallCredentials] = ..., wait_for_ready: _typing.Optional[bool] = ..., compression: _typing.Optional[_grpc.Compression] = ...) -> _grpc_aio.UnaryUnaryCall[_typing.Any, ListPartyToParticipantResponse]: ...  # type: ignore
    def ListSynchronizerParametersState(self, __1: ListSynchronizerParametersStateRequest, *, timeout: _typing.Optional[float] = ..., metadata: _typing.Optional[_grpc_aio.Metadata] = ..., credentials: _typing.Optional[_grpc.CallCredentials] = ..., wait_for_ready: _typing.Optional[bool] = ..., compression: _typing.Optional[_grpc.Compression] = ...) -> _grpc_aio.UnaryUnaryCall[_typing.Any, ListSynchronizerParametersStateResponse]: ...  # type: ignore
    def ListMediatorSynchronizerState(self, __1: ListMediatorSynchronizerStateRequest, *, timeout: _typing.Optional[float] = ..., metadata: _typing.Optional[_grpc_aio.Metadata] = ..., credentials: _typing.Optional[_grpc.CallCredentials] = ..., wait_for_ready: _typing.Optional[bool] = ..., compression: _typing.Optional[_grpc.Compression] = ...) -> _grpc_aio.UnaryUnaryCall[_typing.Any, ListMediatorSynchronizerStateResponse]: ...  # type: ignore
    def ListSequencerSynchronizerState(self, __1: ListSequencerSynchronizerStateRequest, *, timeout: _typing.Optional[float] = ..., metadata: _typing.Optional[_grpc_aio.Metadata] = ..., credentials: _typing.Optional[_grpc.CallCredentials] = ..., wait_for_ready: _typing.Optional[bool] = ..., compression: _typing.Optional[_grpc.Compression] = ...) -> _grpc_aio.UnaryUnaryCall[_typing.Any, ListSequencerSynchronizerStateResponse]: ...  # type: ignore
    def ListPurgeTopologyTransaction(self, __1: ListPurgeTopologyTransactionRequest, *, timeout: _typing.Optional[float] = ..., metadata: _typing.Optional[_grpc_aio.Metadata] = ..., credentials: _typing.Optional[_grpc.CallCredentials] = ..., wait_for_ready: _typing.Optional[bool] = ..., compression: _typing.Optional[_grpc.Compression] = ...) -> _grpc_aio.UnaryUnaryCall[_typing.Any, ListPurgeTopologyTransactionResponse]: ...  # type: ignore
    def ListAvailableStores(self, __1: ListAvailableStoresRequest, *, timeout: _typing.Optional[float] = ..., metadata: _typing.Optional[_grpc_aio.Metadata] = ..., credentials: _typing.Optional[_grpc.CallCredentials] = ..., wait_for_ready: _typing.Optional[bool] = ..., compression: _typing.Optional[_grpc.Compression] = ...) -> _grpc_aio.UnaryUnaryCall[_typing.Any, ListAvailableStoresResponse]: ...  # type: ignore
    def ListAll(self, __1: ListAllRequest, *, timeout: _typing.Optional[float] = ..., metadata: _typing.Optional[_grpc_aio.Metadata] = ..., credentials: _typing.Optional[_grpc.CallCredentials] = ..., wait_for_ready: _typing.Optional[bool] = ..., compression: _typing.Optional[_grpc.Compression] = ...) -> _grpc_aio.UnaryUnaryCall[_typing.Any, ListAllResponse]: ...  # type: ignore
    def ExportTopologySnapshot(self, __1: ExportTopologySnapshotRequest, *, timeout: _typing.Optional[float] = ..., metadata: _typing.Optional[_grpc_aio.Metadata] = ..., credentials: _typing.Optional[_grpc.CallCredentials] = ..., wait_for_ready: _typing.Optional[bool] = ..., compression: _typing.Optional[_grpc.Compression] = ...) -> _grpc_aio.UnaryStreamCall[_typing.Any, ExportTopologySnapshotResponse]: ...  # type: ignore
    def GenesisState(self, __1: GenesisStateRequest, *, timeout: _typing.Optional[float] = ..., metadata: _typing.Optional[_grpc_aio.Metadata] = ..., credentials: _typing.Optional[_grpc.CallCredentials] = ..., wait_for_ready: _typing.Optional[bool] = ..., compression: _typing.Optional[_grpc.Compression] = ...) -> _grpc_aio.UnaryStreamCall[_typing.Any, GenesisStateResponse]: ...  # type: ignore
