# Copyright (c) 2017-2025 Digital Asset (Switzerland) GmbH and/or its affiliates. All rights reserved.
# SPDX-License-Identifier: Apache-2.0
# fmt: off
# isort: skip_file

import builtins as _builtins, typing as _typing

import grpc as _grpc
from grpc import aio as _grpc_aio

from .inspection_service_pb2 import CountInFlightRequest, CountInFlightResponse, GetConfigForSlowCounterParticipantsRequest, GetConfigForSlowCounterParticipantsResponse, GetIntervalsBehindForCounterParticipantsRequest, GetIntervalsBehindForCounterParticipantsResponse, InspectCommitmentContractsRequest, InspectCommitmentContractsResponse, LookupOffsetByTimeRequest, LookupOffsetByTimeResponse, LookupReceivedAcsCommitmentsRequest, LookupReceivedAcsCommitmentsResponse, LookupSentAcsCommitmentsRequest, LookupSentAcsCommitmentsResponse, OpenCommitmentRequest, OpenCommitmentResponse, SetConfigForSlowCounterParticipantsRequest, SetConfigForSlowCounterParticipantsResponse

__all__ = [
    "InspectionServiceStub",
]


# noinspection PyPep8Naming,DuplicatedCode
class InspectionServiceStub:
    @classmethod  # type: ignore
    @_typing.overload
    def __new__(cls, channel: _grpc.Channel) -> _InspectionServiceBlockingStub: ...  # type: ignore
    @classmethod  # type: ignore
    @_typing.overload
    def __new__(cls, channel: _grpc_aio.Channel) -> _InspectionServiceAsyncStub: ...  # type: ignore
    def LookupOffsetByTime(self, __1: LookupOffsetByTimeRequest, *, timeout: _typing.Optional[float] = ..., metadata: _typing.Optional[_typing.Tuple[_typing.Tuple[str, _typing.Union[str, bytes]], ...]] = ..., credentials: _typing.Optional[_grpc.CallCredentials] = ..., wait_for_ready: _typing.Optional[bool] = ..., compression: _typing.Optional[_grpc.Compression] = ...) -> _typing.Union[LookupOffsetByTimeResponse, _grpc_aio.UnaryUnaryCall[_typing.Any, LookupOffsetByTimeResponse]]: ...
    def OpenCommitment(self, __1: OpenCommitmentRequest, *, timeout: _typing.Optional[float] = ..., metadata: _typing.Optional[_typing.Tuple[_typing.Tuple[str, _typing.Union[str, bytes]], ...]] = ..., credentials: _typing.Optional[_grpc.CallCredentials] = ..., wait_for_ready: _typing.Optional[bool] = ..., compression: _typing.Optional[_grpc.Compression] = ...) -> _typing.Union[_grpc.CallIterator[OpenCommitmentResponse], _grpc_aio.UnaryStreamCall[_typing.Any, OpenCommitmentResponse]]: ...
    def InspectCommitmentContracts(self, __1: InspectCommitmentContractsRequest, *, timeout: _typing.Optional[float] = ..., metadata: _typing.Optional[_typing.Tuple[_typing.Tuple[str, _typing.Union[str, bytes]], ...]] = ..., credentials: _typing.Optional[_grpc.CallCredentials] = ..., wait_for_ready: _typing.Optional[bool] = ..., compression: _typing.Optional[_grpc.Compression] = ...) -> _typing.Union[_grpc.CallIterator[InspectCommitmentContractsResponse], _grpc_aio.UnaryStreamCall[_typing.Any, InspectCommitmentContractsResponse]]: ...
    def LookupSentAcsCommitments(self, __1: LookupSentAcsCommitmentsRequest, *, timeout: _typing.Optional[float] = ..., metadata: _typing.Optional[_typing.Tuple[_typing.Tuple[str, _typing.Union[str, bytes]], ...]] = ..., credentials: _typing.Optional[_grpc.CallCredentials] = ..., wait_for_ready: _typing.Optional[bool] = ..., compression: _typing.Optional[_grpc.Compression] = ...) -> _typing.Union[LookupSentAcsCommitmentsResponse, _grpc_aio.UnaryUnaryCall[_typing.Any, LookupSentAcsCommitmentsResponse]]: ...
    def LookupReceivedAcsCommitments(self, __1: LookupReceivedAcsCommitmentsRequest, *, timeout: _typing.Optional[float] = ..., metadata: _typing.Optional[_typing.Tuple[_typing.Tuple[str, _typing.Union[str, bytes]], ...]] = ..., credentials: _typing.Optional[_grpc.CallCredentials] = ..., wait_for_ready: _typing.Optional[bool] = ..., compression: _typing.Optional[_grpc.Compression] = ...) -> _typing.Union[LookupReceivedAcsCommitmentsResponse, _grpc_aio.UnaryUnaryCall[_typing.Any, LookupReceivedAcsCommitmentsResponse]]: ...
    def SetConfigForSlowCounterParticipants(self, __1: SetConfigForSlowCounterParticipantsRequest, *, timeout: _typing.Optional[float] = ..., metadata: _typing.Optional[_typing.Tuple[_typing.Tuple[str, _typing.Union[str, bytes]], ...]] = ..., credentials: _typing.Optional[_grpc.CallCredentials] = ..., wait_for_ready: _typing.Optional[bool] = ..., compression: _typing.Optional[_grpc.Compression] = ...) -> _typing.Union[SetConfigForSlowCounterParticipantsResponse, _grpc_aio.UnaryUnaryCall[_typing.Any, SetConfigForSlowCounterParticipantsResponse]]: ...
    def GetConfigForSlowCounterParticipants(self, __1: GetConfigForSlowCounterParticipantsRequest, *, timeout: _typing.Optional[float] = ..., metadata: _typing.Optional[_typing.Tuple[_typing.Tuple[str, _typing.Union[str, bytes]], ...]] = ..., credentials: _typing.Optional[_grpc.CallCredentials] = ..., wait_for_ready: _typing.Optional[bool] = ..., compression: _typing.Optional[_grpc.Compression] = ...) -> _typing.Union[GetConfigForSlowCounterParticipantsResponse, _grpc_aio.UnaryUnaryCall[_typing.Any, GetConfigForSlowCounterParticipantsResponse]]: ...
    def GetIntervalsBehindForCounterParticipants(self, __1: GetIntervalsBehindForCounterParticipantsRequest, *, timeout: _typing.Optional[float] = ..., metadata: _typing.Optional[_typing.Tuple[_typing.Tuple[str, _typing.Union[str, bytes]], ...]] = ..., credentials: _typing.Optional[_grpc.CallCredentials] = ..., wait_for_ready: _typing.Optional[bool] = ..., compression: _typing.Optional[_grpc.Compression] = ...) -> _typing.Union[GetIntervalsBehindForCounterParticipantsResponse, _grpc_aio.UnaryUnaryCall[_typing.Any, GetIntervalsBehindForCounterParticipantsResponse]]: ...
    def CountInFlight(self, __1: CountInFlightRequest, *, timeout: _typing.Optional[float] = ..., metadata: _typing.Optional[_typing.Tuple[_typing.Tuple[str, _typing.Union[str, bytes]], ...]] = ..., credentials: _typing.Optional[_grpc.CallCredentials] = ..., wait_for_ready: _typing.Optional[bool] = ..., compression: _typing.Optional[_grpc.Compression] = ...) -> _typing.Union[CountInFlightResponse, _grpc_aio.UnaryUnaryCall[_typing.Any, CountInFlightResponse]]: ...

# noinspection PyPep8Naming,DuplicatedCode
class _InspectionServiceBlockingStub(InspectionServiceStub):
    def LookupOffsetByTime(self, __1: LookupOffsetByTimeRequest, timeout: _typing.Optional[float] = ..., metadata: _typing.Optional[_typing.Tuple[_typing.Tuple[str, _typing.Union[str, bytes]], ...]] = ..., credentials: _typing.Optional[_grpc.CallCredentials] = ..., wait_for_ready: _typing.Optional[bool] = ..., compression: _typing.Optional[_grpc.Compression] = ...) -> LookupOffsetByTimeResponse: ...
    def OpenCommitment(self, __1: OpenCommitmentRequest, timeout: _typing.Optional[float] = ..., metadata: _typing.Optional[_typing.Tuple[_typing.Tuple[str, _typing.Union[str, bytes]], ...]] = ..., credentials: _typing.Optional[_grpc.CallCredentials] = ..., wait_for_ready: _typing.Optional[bool] = ..., compression: _typing.Optional[_grpc.Compression] = ...) -> _grpc.CallIterator[OpenCommitmentResponse]: ...
    def InspectCommitmentContracts(self, __1: InspectCommitmentContractsRequest, timeout: _typing.Optional[float] = ..., metadata: _typing.Optional[_typing.Tuple[_typing.Tuple[str, _typing.Union[str, bytes]], ...]] = ..., credentials: _typing.Optional[_grpc.CallCredentials] = ..., wait_for_ready: _typing.Optional[bool] = ..., compression: _typing.Optional[_grpc.Compression] = ...) -> _grpc.CallIterator[InspectCommitmentContractsResponse]: ...
    def LookupSentAcsCommitments(self, __1: LookupSentAcsCommitmentsRequest, timeout: _typing.Optional[float] = ..., metadata: _typing.Optional[_typing.Tuple[_typing.Tuple[str, _typing.Union[str, bytes]], ...]] = ..., credentials: _typing.Optional[_grpc.CallCredentials] = ..., wait_for_ready: _typing.Optional[bool] = ..., compression: _typing.Optional[_grpc.Compression] = ...) -> LookupSentAcsCommitmentsResponse: ...
    def LookupReceivedAcsCommitments(self, __1: LookupReceivedAcsCommitmentsRequest, timeout: _typing.Optional[float] = ..., metadata: _typing.Optional[_typing.Tuple[_typing.Tuple[str, _typing.Union[str, bytes]], ...]] = ..., credentials: _typing.Optional[_grpc.CallCredentials] = ..., wait_for_ready: _typing.Optional[bool] = ..., compression: _typing.Optional[_grpc.Compression] = ...) -> LookupReceivedAcsCommitmentsResponse: ...
    def SetConfigForSlowCounterParticipants(self, __1: SetConfigForSlowCounterParticipantsRequest, timeout: _typing.Optional[float] = ..., metadata: _typing.Optional[_typing.Tuple[_typing.Tuple[str, _typing.Union[str, bytes]], ...]] = ..., credentials: _typing.Optional[_grpc.CallCredentials] = ..., wait_for_ready: _typing.Optional[bool] = ..., compression: _typing.Optional[_grpc.Compression] = ...) -> SetConfigForSlowCounterParticipantsResponse: ...
    def GetConfigForSlowCounterParticipants(self, __1: GetConfigForSlowCounterParticipantsRequest, timeout: _typing.Optional[float] = ..., metadata: _typing.Optional[_typing.Tuple[_typing.Tuple[str, _typing.Union[str, bytes]], ...]] = ..., credentials: _typing.Optional[_grpc.CallCredentials] = ..., wait_for_ready: _typing.Optional[bool] = ..., compression: _typing.Optional[_grpc.Compression] = ...) -> GetConfigForSlowCounterParticipantsResponse: ...
    def GetIntervalsBehindForCounterParticipants(self, __1: GetIntervalsBehindForCounterParticipantsRequest, timeout: _typing.Optional[float] = ..., metadata: _typing.Optional[_typing.Tuple[_typing.Tuple[str, _typing.Union[str, bytes]], ...]] = ..., credentials: _typing.Optional[_grpc.CallCredentials] = ..., wait_for_ready: _typing.Optional[bool] = ..., compression: _typing.Optional[_grpc.Compression] = ...) -> GetIntervalsBehindForCounterParticipantsResponse: ...
    def CountInFlight(self, __1: CountInFlightRequest, timeout: _typing.Optional[float] = ..., metadata: _typing.Optional[_typing.Tuple[_typing.Tuple[str, _typing.Union[str, bytes]], ...]] = ..., credentials: _typing.Optional[_grpc.CallCredentials] = ..., wait_for_ready: _typing.Optional[bool] = ..., compression: _typing.Optional[_grpc.Compression] = ...) -> CountInFlightResponse: ...

# noinspection PyPep8Naming,DuplicatedCode
class _InspectionServiceAsyncStub(InspectionServiceStub):
    def LookupOffsetByTime(self, __1: LookupOffsetByTimeRequest, *, timeout: _typing.Optional[float] = ..., metadata: _typing.Optional[_grpc_aio.Metadata] = ..., credentials: _typing.Optional[_grpc.CallCredentials] = ..., wait_for_ready: _typing.Optional[bool] = ..., compression: _typing.Optional[_grpc.Compression] = ...) -> _grpc_aio.UnaryUnaryCall[_typing.Any, LookupOffsetByTimeResponse]: ...  # type: ignore
    def OpenCommitment(self, __1: OpenCommitmentRequest, *, timeout: _typing.Optional[float] = ..., metadata: _typing.Optional[_grpc_aio.Metadata] = ..., credentials: _typing.Optional[_grpc.CallCredentials] = ..., wait_for_ready: _typing.Optional[bool] = ..., compression: _typing.Optional[_grpc.Compression] = ...) -> _grpc_aio.UnaryStreamCall[_typing.Any, OpenCommitmentResponse]: ...  # type: ignore
    def InspectCommitmentContracts(self, __1: InspectCommitmentContractsRequest, *, timeout: _typing.Optional[float] = ..., metadata: _typing.Optional[_grpc_aio.Metadata] = ..., credentials: _typing.Optional[_grpc.CallCredentials] = ..., wait_for_ready: _typing.Optional[bool] = ..., compression: _typing.Optional[_grpc.Compression] = ...) -> _grpc_aio.UnaryStreamCall[_typing.Any, InspectCommitmentContractsResponse]: ...  # type: ignore
    def LookupSentAcsCommitments(self, __1: LookupSentAcsCommitmentsRequest, *, timeout: _typing.Optional[float] = ..., metadata: _typing.Optional[_grpc_aio.Metadata] = ..., credentials: _typing.Optional[_grpc.CallCredentials] = ..., wait_for_ready: _typing.Optional[bool] = ..., compression: _typing.Optional[_grpc.Compression] = ...) -> _grpc_aio.UnaryUnaryCall[_typing.Any, LookupSentAcsCommitmentsResponse]: ...  # type: ignore
    def LookupReceivedAcsCommitments(self, __1: LookupReceivedAcsCommitmentsRequest, *, timeout: _typing.Optional[float] = ..., metadata: _typing.Optional[_grpc_aio.Metadata] = ..., credentials: _typing.Optional[_grpc.CallCredentials] = ..., wait_for_ready: _typing.Optional[bool] = ..., compression: _typing.Optional[_grpc.Compression] = ...) -> _grpc_aio.UnaryUnaryCall[_typing.Any, LookupReceivedAcsCommitmentsResponse]: ...  # type: ignore
    def SetConfigForSlowCounterParticipants(self, __1: SetConfigForSlowCounterParticipantsRequest, *, timeout: _typing.Optional[float] = ..., metadata: _typing.Optional[_grpc_aio.Metadata] = ..., credentials: _typing.Optional[_grpc.CallCredentials] = ..., wait_for_ready: _typing.Optional[bool] = ..., compression: _typing.Optional[_grpc.Compression] = ...) -> _grpc_aio.UnaryUnaryCall[_typing.Any, SetConfigForSlowCounterParticipantsResponse]: ...  # type: ignore
    def GetConfigForSlowCounterParticipants(self, __1: GetConfigForSlowCounterParticipantsRequest, *, timeout: _typing.Optional[float] = ..., metadata: _typing.Optional[_grpc_aio.Metadata] = ..., credentials: _typing.Optional[_grpc.CallCredentials] = ..., wait_for_ready: _typing.Optional[bool] = ..., compression: _typing.Optional[_grpc.Compression] = ...) -> _grpc_aio.UnaryUnaryCall[_typing.Any, GetConfigForSlowCounterParticipantsResponse]: ...  # type: ignore
    def GetIntervalsBehindForCounterParticipants(self, __1: GetIntervalsBehindForCounterParticipantsRequest, *, timeout: _typing.Optional[float] = ..., metadata: _typing.Optional[_grpc_aio.Metadata] = ..., credentials: _typing.Optional[_grpc.CallCredentials] = ..., wait_for_ready: _typing.Optional[bool] = ..., compression: _typing.Optional[_grpc.Compression] = ...) -> _grpc_aio.UnaryUnaryCall[_typing.Any, GetIntervalsBehindForCounterParticipantsResponse]: ...  # type: ignore
    def CountInFlight(self, __1: CountInFlightRequest, *, timeout: _typing.Optional[float] = ..., metadata: _typing.Optional[_grpc_aio.Metadata] = ..., credentials: _typing.Optional[_grpc.CallCredentials] = ..., wait_for_ready: _typing.Optional[bool] = ..., compression: _typing.Optional[_grpc.Compression] = ...) -> _grpc_aio.UnaryUnaryCall[_typing.Any, CountInFlightResponse]: ...  # type: ignore
