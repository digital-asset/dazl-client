# Copyright (c) 2017-2025 Digital Asset (Switzerland) GmbH and/or its affiliates. All rights reserved.
# SPDX-License-Identifier: Apache-2.0
# fmt: off
# isort: skip_file

import builtins as _builtins, typing as _typing

import grpc as _grpc
from grpc import aio as _grpc_aio

from .synchronizer_connectivity_pb2 import ConnectSynchronizerRequest, ConnectSynchronizerResponse, DisconnectAllSynchronizersRequest, DisconnectAllSynchronizersResponse, DisconnectSynchronizerRequest, DisconnectSynchronizerResponse, GetSynchronizerIdRequest, GetSynchronizerIdResponse, ListConnectedSynchronizersRequest, ListConnectedSynchronizersResponse, ListRegisteredSynchronizersRequest, ListRegisteredSynchronizersResponse, LogoutRequest, LogoutResponse, ModifySynchronizerRequest, ModifySynchronizerResponse, ReconnectSynchronizerRequest, ReconnectSynchronizerResponse, ReconnectSynchronizersRequest, ReconnectSynchronizersResponse, RegisterSynchronizerRequest, RegisterSynchronizerResponse

__all__ = [
    "SynchronizerConnectivityServiceStub",
]


# noinspection PyPep8Naming,DuplicatedCode
class SynchronizerConnectivityServiceStub:
    @classmethod  # type: ignore
    @_typing.overload
    def __new__(cls, channel: _grpc.Channel) -> _SynchronizerConnectivityServiceBlockingStub: ...  # type: ignore
    @classmethod  # type: ignore
    @_typing.overload
    def __new__(cls, channel: _grpc_aio.Channel) -> _SynchronizerConnectivityServiceAsyncStub: ...  # type: ignore
    def ConnectSynchronizer(self, __1: ConnectSynchronizerRequest, *, timeout: _typing.Optional[float] = ..., metadata: _typing.Optional[_typing.Tuple[_typing.Tuple[str, _typing.Union[str, bytes]], ...]] = ..., credentials: _typing.Optional[_grpc.CallCredentials] = ..., wait_for_ready: _typing.Optional[bool] = ..., compression: _typing.Optional[_grpc.Compression] = ...) -> _typing.Union[ConnectSynchronizerResponse, _grpc_aio.UnaryUnaryCall[_typing.Any, ConnectSynchronizerResponse]]: ...
    def RegisterSynchronizer(self, __1: RegisterSynchronizerRequest, *, timeout: _typing.Optional[float] = ..., metadata: _typing.Optional[_typing.Tuple[_typing.Tuple[str, _typing.Union[str, bytes]], ...]] = ..., credentials: _typing.Optional[_grpc.CallCredentials] = ..., wait_for_ready: _typing.Optional[bool] = ..., compression: _typing.Optional[_grpc.Compression] = ...) -> _typing.Union[RegisterSynchronizerResponse, _grpc_aio.UnaryUnaryCall[_typing.Any, RegisterSynchronizerResponse]]: ...
    def ReconnectSynchronizers(self, __1: ReconnectSynchronizersRequest, *, timeout: _typing.Optional[float] = ..., metadata: _typing.Optional[_typing.Tuple[_typing.Tuple[str, _typing.Union[str, bytes]], ...]] = ..., credentials: _typing.Optional[_grpc.CallCredentials] = ..., wait_for_ready: _typing.Optional[bool] = ..., compression: _typing.Optional[_grpc.Compression] = ...) -> _typing.Union[ReconnectSynchronizersResponse, _grpc_aio.UnaryUnaryCall[_typing.Any, ReconnectSynchronizersResponse]]: ...
    def ReconnectSynchronizer(self, __1: ReconnectSynchronizerRequest, *, timeout: _typing.Optional[float] = ..., metadata: _typing.Optional[_typing.Tuple[_typing.Tuple[str, _typing.Union[str, bytes]], ...]] = ..., credentials: _typing.Optional[_grpc.CallCredentials] = ..., wait_for_ready: _typing.Optional[bool] = ..., compression: _typing.Optional[_grpc.Compression] = ...) -> _typing.Union[ReconnectSynchronizerResponse, _grpc_aio.UnaryUnaryCall[_typing.Any, ReconnectSynchronizerResponse]]: ...
    def ModifySynchronizer(self, __1: ModifySynchronizerRequest, *, timeout: _typing.Optional[float] = ..., metadata: _typing.Optional[_typing.Tuple[_typing.Tuple[str, _typing.Union[str, bytes]], ...]] = ..., credentials: _typing.Optional[_grpc.CallCredentials] = ..., wait_for_ready: _typing.Optional[bool] = ..., compression: _typing.Optional[_grpc.Compression] = ...) -> _typing.Union[ModifySynchronizerResponse, _grpc_aio.UnaryUnaryCall[_typing.Any, ModifySynchronizerResponse]]: ...
    def DisconnectSynchronizer(self, __1: DisconnectSynchronizerRequest, *, timeout: _typing.Optional[float] = ..., metadata: _typing.Optional[_typing.Tuple[_typing.Tuple[str, _typing.Union[str, bytes]], ...]] = ..., credentials: _typing.Optional[_grpc.CallCredentials] = ..., wait_for_ready: _typing.Optional[bool] = ..., compression: _typing.Optional[_grpc.Compression] = ...) -> _typing.Union[DisconnectSynchronizerResponse, _grpc_aio.UnaryUnaryCall[_typing.Any, DisconnectSynchronizerResponse]]: ...
    def DisconnectAllSynchronizers(self, __1: DisconnectAllSynchronizersRequest, *, timeout: _typing.Optional[float] = ..., metadata: _typing.Optional[_typing.Tuple[_typing.Tuple[str, _typing.Union[str, bytes]], ...]] = ..., credentials: _typing.Optional[_grpc.CallCredentials] = ..., wait_for_ready: _typing.Optional[bool] = ..., compression: _typing.Optional[_grpc.Compression] = ...) -> _typing.Union[DisconnectAllSynchronizersResponse, _grpc_aio.UnaryUnaryCall[_typing.Any, DisconnectAllSynchronizersResponse]]: ...
    def Logout(self, __1: LogoutRequest, *, timeout: _typing.Optional[float] = ..., metadata: _typing.Optional[_typing.Tuple[_typing.Tuple[str, _typing.Union[str, bytes]], ...]] = ..., credentials: _typing.Optional[_grpc.CallCredentials] = ..., wait_for_ready: _typing.Optional[bool] = ..., compression: _typing.Optional[_grpc.Compression] = ...) -> _typing.Union[LogoutResponse, _grpc_aio.UnaryUnaryCall[_typing.Any, LogoutResponse]]: ...
    def ListConnectedSynchronizers(self, __1: ListConnectedSynchronizersRequest, *, timeout: _typing.Optional[float] = ..., metadata: _typing.Optional[_typing.Tuple[_typing.Tuple[str, _typing.Union[str, bytes]], ...]] = ..., credentials: _typing.Optional[_grpc.CallCredentials] = ..., wait_for_ready: _typing.Optional[bool] = ..., compression: _typing.Optional[_grpc.Compression] = ...) -> _typing.Union[ListConnectedSynchronizersResponse, _grpc_aio.UnaryUnaryCall[_typing.Any, ListConnectedSynchronizersResponse]]: ...
    def ListRegisteredSynchronizers(self, __1: ListRegisteredSynchronizersRequest, *, timeout: _typing.Optional[float] = ..., metadata: _typing.Optional[_typing.Tuple[_typing.Tuple[str, _typing.Union[str, bytes]], ...]] = ..., credentials: _typing.Optional[_grpc.CallCredentials] = ..., wait_for_ready: _typing.Optional[bool] = ..., compression: _typing.Optional[_grpc.Compression] = ...) -> _typing.Union[ListRegisteredSynchronizersResponse, _grpc_aio.UnaryUnaryCall[_typing.Any, ListRegisteredSynchronizersResponse]]: ...
    def GetSynchronizerId(self, __1: GetSynchronizerIdRequest, *, timeout: _typing.Optional[float] = ..., metadata: _typing.Optional[_typing.Tuple[_typing.Tuple[str, _typing.Union[str, bytes]], ...]] = ..., credentials: _typing.Optional[_grpc.CallCredentials] = ..., wait_for_ready: _typing.Optional[bool] = ..., compression: _typing.Optional[_grpc.Compression] = ...) -> _typing.Union[GetSynchronizerIdResponse, _grpc_aio.UnaryUnaryCall[_typing.Any, GetSynchronizerIdResponse]]: ...

# noinspection PyPep8Naming,DuplicatedCode
class _SynchronizerConnectivityServiceBlockingStub(SynchronizerConnectivityServiceStub):
    def ConnectSynchronizer(self, __1: ConnectSynchronizerRequest, timeout: _typing.Optional[float] = ..., metadata: _typing.Optional[_typing.Tuple[_typing.Tuple[str, _typing.Union[str, bytes]], ...]] = ..., credentials: _typing.Optional[_grpc.CallCredentials] = ..., wait_for_ready: _typing.Optional[bool] = ..., compression: _typing.Optional[_grpc.Compression] = ...) -> ConnectSynchronizerResponse: ...
    def RegisterSynchronizer(self, __1: RegisterSynchronizerRequest, timeout: _typing.Optional[float] = ..., metadata: _typing.Optional[_typing.Tuple[_typing.Tuple[str, _typing.Union[str, bytes]], ...]] = ..., credentials: _typing.Optional[_grpc.CallCredentials] = ..., wait_for_ready: _typing.Optional[bool] = ..., compression: _typing.Optional[_grpc.Compression] = ...) -> RegisterSynchronizerResponse: ...
    def ReconnectSynchronizers(self, __1: ReconnectSynchronizersRequest, timeout: _typing.Optional[float] = ..., metadata: _typing.Optional[_typing.Tuple[_typing.Tuple[str, _typing.Union[str, bytes]], ...]] = ..., credentials: _typing.Optional[_grpc.CallCredentials] = ..., wait_for_ready: _typing.Optional[bool] = ..., compression: _typing.Optional[_grpc.Compression] = ...) -> ReconnectSynchronizersResponse: ...
    def ReconnectSynchronizer(self, __1: ReconnectSynchronizerRequest, timeout: _typing.Optional[float] = ..., metadata: _typing.Optional[_typing.Tuple[_typing.Tuple[str, _typing.Union[str, bytes]], ...]] = ..., credentials: _typing.Optional[_grpc.CallCredentials] = ..., wait_for_ready: _typing.Optional[bool] = ..., compression: _typing.Optional[_grpc.Compression] = ...) -> ReconnectSynchronizerResponse: ...
    def ModifySynchronizer(self, __1: ModifySynchronizerRequest, timeout: _typing.Optional[float] = ..., metadata: _typing.Optional[_typing.Tuple[_typing.Tuple[str, _typing.Union[str, bytes]], ...]] = ..., credentials: _typing.Optional[_grpc.CallCredentials] = ..., wait_for_ready: _typing.Optional[bool] = ..., compression: _typing.Optional[_grpc.Compression] = ...) -> ModifySynchronizerResponse: ...
    def DisconnectSynchronizer(self, __1: DisconnectSynchronizerRequest, timeout: _typing.Optional[float] = ..., metadata: _typing.Optional[_typing.Tuple[_typing.Tuple[str, _typing.Union[str, bytes]], ...]] = ..., credentials: _typing.Optional[_grpc.CallCredentials] = ..., wait_for_ready: _typing.Optional[bool] = ..., compression: _typing.Optional[_grpc.Compression] = ...) -> DisconnectSynchronizerResponse: ...
    def DisconnectAllSynchronizers(self, __1: DisconnectAllSynchronizersRequest, timeout: _typing.Optional[float] = ..., metadata: _typing.Optional[_typing.Tuple[_typing.Tuple[str, _typing.Union[str, bytes]], ...]] = ..., credentials: _typing.Optional[_grpc.CallCredentials] = ..., wait_for_ready: _typing.Optional[bool] = ..., compression: _typing.Optional[_grpc.Compression] = ...) -> DisconnectAllSynchronizersResponse: ...
    def Logout(self, __1: LogoutRequest, timeout: _typing.Optional[float] = ..., metadata: _typing.Optional[_typing.Tuple[_typing.Tuple[str, _typing.Union[str, bytes]], ...]] = ..., credentials: _typing.Optional[_grpc.CallCredentials] = ..., wait_for_ready: _typing.Optional[bool] = ..., compression: _typing.Optional[_grpc.Compression] = ...) -> LogoutResponse: ...
    def ListConnectedSynchronizers(self, __1: ListConnectedSynchronizersRequest, timeout: _typing.Optional[float] = ..., metadata: _typing.Optional[_typing.Tuple[_typing.Tuple[str, _typing.Union[str, bytes]], ...]] = ..., credentials: _typing.Optional[_grpc.CallCredentials] = ..., wait_for_ready: _typing.Optional[bool] = ..., compression: _typing.Optional[_grpc.Compression] = ...) -> ListConnectedSynchronizersResponse: ...
    def ListRegisteredSynchronizers(self, __1: ListRegisteredSynchronizersRequest, timeout: _typing.Optional[float] = ..., metadata: _typing.Optional[_typing.Tuple[_typing.Tuple[str, _typing.Union[str, bytes]], ...]] = ..., credentials: _typing.Optional[_grpc.CallCredentials] = ..., wait_for_ready: _typing.Optional[bool] = ..., compression: _typing.Optional[_grpc.Compression] = ...) -> ListRegisteredSynchronizersResponse: ...
    def GetSynchronizerId(self, __1: GetSynchronizerIdRequest, timeout: _typing.Optional[float] = ..., metadata: _typing.Optional[_typing.Tuple[_typing.Tuple[str, _typing.Union[str, bytes]], ...]] = ..., credentials: _typing.Optional[_grpc.CallCredentials] = ..., wait_for_ready: _typing.Optional[bool] = ..., compression: _typing.Optional[_grpc.Compression] = ...) -> GetSynchronizerIdResponse: ...

# noinspection PyPep8Naming,DuplicatedCode
class _SynchronizerConnectivityServiceAsyncStub(SynchronizerConnectivityServiceStub):
    def ConnectSynchronizer(self, __1: ConnectSynchronizerRequest, *, timeout: _typing.Optional[float] = ..., metadata: _typing.Optional[_grpc_aio.Metadata] = ..., credentials: _typing.Optional[_grpc.CallCredentials] = ..., wait_for_ready: _typing.Optional[bool] = ..., compression: _typing.Optional[_grpc.Compression] = ...) -> _grpc_aio.UnaryUnaryCall[_typing.Any, ConnectSynchronizerResponse]: ...  # type: ignore
    def RegisterSynchronizer(self, __1: RegisterSynchronizerRequest, *, timeout: _typing.Optional[float] = ..., metadata: _typing.Optional[_grpc_aio.Metadata] = ..., credentials: _typing.Optional[_grpc.CallCredentials] = ..., wait_for_ready: _typing.Optional[bool] = ..., compression: _typing.Optional[_grpc.Compression] = ...) -> _grpc_aio.UnaryUnaryCall[_typing.Any, RegisterSynchronizerResponse]: ...  # type: ignore
    def ReconnectSynchronizers(self, __1: ReconnectSynchronizersRequest, *, timeout: _typing.Optional[float] = ..., metadata: _typing.Optional[_grpc_aio.Metadata] = ..., credentials: _typing.Optional[_grpc.CallCredentials] = ..., wait_for_ready: _typing.Optional[bool] = ..., compression: _typing.Optional[_grpc.Compression] = ...) -> _grpc_aio.UnaryUnaryCall[_typing.Any, ReconnectSynchronizersResponse]: ...  # type: ignore
    def ReconnectSynchronizer(self, __1: ReconnectSynchronizerRequest, *, timeout: _typing.Optional[float] = ..., metadata: _typing.Optional[_grpc_aio.Metadata] = ..., credentials: _typing.Optional[_grpc.CallCredentials] = ..., wait_for_ready: _typing.Optional[bool] = ..., compression: _typing.Optional[_grpc.Compression] = ...) -> _grpc_aio.UnaryUnaryCall[_typing.Any, ReconnectSynchronizerResponse]: ...  # type: ignore
    def ModifySynchronizer(self, __1: ModifySynchronizerRequest, *, timeout: _typing.Optional[float] = ..., metadata: _typing.Optional[_grpc_aio.Metadata] = ..., credentials: _typing.Optional[_grpc.CallCredentials] = ..., wait_for_ready: _typing.Optional[bool] = ..., compression: _typing.Optional[_grpc.Compression] = ...) -> _grpc_aio.UnaryUnaryCall[_typing.Any, ModifySynchronizerResponse]: ...  # type: ignore
    def DisconnectSynchronizer(self, __1: DisconnectSynchronizerRequest, *, timeout: _typing.Optional[float] = ..., metadata: _typing.Optional[_grpc_aio.Metadata] = ..., credentials: _typing.Optional[_grpc.CallCredentials] = ..., wait_for_ready: _typing.Optional[bool] = ..., compression: _typing.Optional[_grpc.Compression] = ...) -> _grpc_aio.UnaryUnaryCall[_typing.Any, DisconnectSynchronizerResponse]: ...  # type: ignore
    def DisconnectAllSynchronizers(self, __1: DisconnectAllSynchronizersRequest, *, timeout: _typing.Optional[float] = ..., metadata: _typing.Optional[_grpc_aio.Metadata] = ..., credentials: _typing.Optional[_grpc.CallCredentials] = ..., wait_for_ready: _typing.Optional[bool] = ..., compression: _typing.Optional[_grpc.Compression] = ...) -> _grpc_aio.UnaryUnaryCall[_typing.Any, DisconnectAllSynchronizersResponse]: ...  # type: ignore
    def Logout(self, __1: LogoutRequest, *, timeout: _typing.Optional[float] = ..., metadata: _typing.Optional[_grpc_aio.Metadata] = ..., credentials: _typing.Optional[_grpc.CallCredentials] = ..., wait_for_ready: _typing.Optional[bool] = ..., compression: _typing.Optional[_grpc.Compression] = ...) -> _grpc_aio.UnaryUnaryCall[_typing.Any, LogoutResponse]: ...  # type: ignore
    def ListConnectedSynchronizers(self, __1: ListConnectedSynchronizersRequest, *, timeout: _typing.Optional[float] = ..., metadata: _typing.Optional[_grpc_aio.Metadata] = ..., credentials: _typing.Optional[_grpc.CallCredentials] = ..., wait_for_ready: _typing.Optional[bool] = ..., compression: _typing.Optional[_grpc.Compression] = ...) -> _grpc_aio.UnaryUnaryCall[_typing.Any, ListConnectedSynchronizersResponse]: ...  # type: ignore
    def ListRegisteredSynchronizers(self, __1: ListRegisteredSynchronizersRequest, *, timeout: _typing.Optional[float] = ..., metadata: _typing.Optional[_grpc_aio.Metadata] = ..., credentials: _typing.Optional[_grpc.CallCredentials] = ..., wait_for_ready: _typing.Optional[bool] = ..., compression: _typing.Optional[_grpc.Compression] = ...) -> _grpc_aio.UnaryUnaryCall[_typing.Any, ListRegisteredSynchronizersResponse]: ...  # type: ignore
    def GetSynchronizerId(self, __1: GetSynchronizerIdRequest, *, timeout: _typing.Optional[float] = ..., metadata: _typing.Optional[_grpc_aio.Metadata] = ..., credentials: _typing.Optional[_grpc.CallCredentials] = ..., wait_for_ready: _typing.Optional[bool] = ..., compression: _typing.Optional[_grpc.Compression] = ...) -> _grpc_aio.UnaryUnaryCall[_typing.Any, GetSynchronizerIdResponse]: ...  # type: ignore
