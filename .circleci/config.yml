# Copyright (c) 2017-2025 Digital Asset (Switzerland) GmbH and/or its affiliates. All rights reserved.
# SPDX-License-Identifier: Apache-2.0
commands:
  restore_dazl_cache:
    parameters:
      python_version:
        type: string
    steps:
      - run:
          name: Nix preparation
          command: .circleci/scripts/prep.sh
      - restore_cache:
          name: Nix restore cache
          keys:
            - nix-{{ checksum "/home/circleci/nix/cache-keys/nix-checksums" }}
            - nix
      - run:
          name: Nix Setup
          command: .circleci/scripts/setup.sh
      - restore_cache:
          key: daml-{{ checksum ".circleci/install-daml" }}
      - run:
          command: .circleci/install-daml
      - save_cache:
          key: daml-{{ checksum ".circleci/install-daml" }}
          paths:
            - /home/circleci/.daml
      - restore_cache:
          key: python-deps-{{ checksum "poetry.lock" }}-<<parameters.python_version>>
      - run:
          command: poetry config virtualenvs.in-project true && make python-deps
      - save_cache:
          key: python-deps-{{ checksum "poetry.lock" }}-<<parameters.python_version>>
          paths:
            - .venv
jobs:
  nix-setup:
    docker:
      - image: cimg/base:stable
    steps:
      - checkout
      - run:
          name: Nix preparation
          command: .circleci/scripts/prep.sh
      - restore_cache:
          name: Nix restore cache
          keys:
            - nix-{{ checksum "/home/circleci/nix/cache-keys/nix-checksums" }}
            - nix
      - run:
          name: Nix Setup
          command: .circleci/scripts/setup.sh
      - save_cache:
          name: Nix save cache
          key: nix-{{ checksum "/home/circleci/nix/cache-keys/nix-checksums" }}
          paths:
            - /home/circleci/.config/nix
            - /home/circleci/.local/state
            - /home/circleci/.nix-bashrc
            - /home/circleci/.nix-channels
            - /home/circleci/.nix-defexpr
            - /home/circleci/.nix-profile
            - /nix
  check-py:
    parameters:
      python_version:
        type: string
    docker:
      - image: cimg/base:stable
    resource_class: medium
    steps:
      - checkout
      - restore_dazl_cache:
          python_version: <<parameters.python_version>>
      - run:
          name: Set up venv
          command: poetry env use python<<parameters.python_version>>
      - run:
          name: Python format checks
          command: make python-format-test
      - run:
          name: Python typechecks
          command: make python-typecheck
      - store_test_results:
          path: target/test-results
  test-py:
    parameters:
      python_version:
        type: string
    docker:
      - image: cimg/base:stable
    resource_class: large
    steps:
      - checkout
      - restore_dazl_cache:
          python_version: <<parameters.python_version>>
      - run:
          name: Set up venv
          command: poetry env use python<<parameters.python_version>>
      - run:
          name: Python unit tests
          command: make python-unit-test
      - run:
          name: Python packaging
          command: make build
      - store_test_results:
          path: target/test-results
  blackduck:
    docker:
      - image: cimg/python:3.8.19-browsers
    steps:
      - checkout
      - restore_dazl_cache:
          python_version: "3.8.19"
      - run:
          name: Python packaging
          command: make build
      - run:
          name: Run Blackduck Detect
          command: |
            if [ "${CIRCLE_BRANCH}" == "main" ]; then
              SCAN_MODE="INTELLIGENT"
            else
              SCAN_MODE="RAPID"
            fi

            bash <(curl -s https://raw.githubusercontent.com/DACH-NY/security-blackduck/master/synopsys-detect) \
            ci-build ${CIRCLE_PROJECT_USERNAME}_${CIRCLE_PROJECT_REPONAME} ${CIRCLE_BRANCH} \
            --detect.included.detector.types=POETRY \
            --detect.excluded.detector.types=GO_MOD \
            --logging.level.com.synopsys.integration=DEBUG \
            --detect.blackduck.scan.mode="${SCAN_MODE}" \
            --detect.policy.check.fail.on.severities=MAJOR,CRITICAL,BLOCKER \
            --detect.timeout=600
  # build doesn't do anything, except run after all of our other jobs.
  build:
    docker:
      - image: cimg/base:stable
    steps:
      - run:
          name: Success
          command: |
            echo "success!"
version: 2.1
workflows:
  workflow:
    jobs:
      - nix-setup:
          context: artifactory
      - blackduck:
          context: blackduck
      - check-py:
          matrix:
            parameters:
              python_version: ["3.10", "3.11", "3.12", "3.13"]
          requires:
            - nix-setup
      - test-py:
          matrix:
            parameters:
              python_version: ["3.10", "3.11", "3.12", "3.13"]
          requires:
            - nix-setup
      - build:
          requires:
            - blackduck
            - check-py
            - test-py
