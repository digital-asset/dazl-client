-- Copyright (c) 2017-2025, Digital Asset (Switzerland) GmbH and/or its affiliates. All rights reserved.
-- SPDX-License-Identifier: Apache-2.0

module KitchenSink1.Supplier where

import KitchenSink1.SKU
import KitchenSink1.Warehouse

import DA.Assert
import DA.TextMap

-- SKUState is an enum that models the various states of a supplier's SKU.
-- This should be kept an enum, as this is used to test enum support in dazl.
data SKUState = Draft | Active | Retired deriving (Eq, Show)

-- Item represents a thing that a consumer might want to purchase.
template Item
  with
    supplier : Party
    sku : Text
    publicParty : Party
    description : Text
    metadata : TextMap Text
    state : SKUState
  where
    signatory supplier
    observer publicParty
    key SKU with .. : SKU
    maintainer key.supplier

    choice Remove : ()
      controller supplier
        do
          assertEq state Draft

    nonconsuming choice Activate : ContractId Item
      controller supplier
        do
          if state == Retired then
            return self
          else do
            archive self
            create this with state = Retired

    nonconsuming choice RetireOrRemove : Either () (ContractId Item)
      controller supplier
        do
          case state of
            Draft -> Left <$> archive self
            Active -> do
              archive self
              Right <$> create this with state = Retired
            Retired -> Right <$> pure self

    nonconsuming choice CreateShipment : ContractId SupplierDelivery
      with
        warehouse : Party
        quantity : Int
      controller supplier
        do
          create SupplierDelivery with sku = SKU with .. ; ..


-- SupplierDelivery 
template SupplierDelivery
  with
    warehouse : Party
    sku : SKU
    quantity : Int
  where
    signatory sku.supplier
    observer warehouse
    
    choice Accept : ContractId WarehouseStock
      controller warehouse
        do
          addStock warehouse sku quantity

    choice Reject : ContractId ReturnedInventory
      with
        reason : Text
      controller warehouse
        do
          create ReturnedInventory with ..


-- ReturnedInventory
template ReturnedInventory
  with
    warehouse : Party
    sku : SKU
    quantity : Int
    reason : Text
  where
    signatory warehouse
    observer sku.supplier

    choice Dispose : ()
      controller sku.supplier
        do
          pure ()
